cscope 15 /program/nginx -q 0000015941 0003225709
	@auto/lib/zlib/patch.zlib.h

1 --- 
	gzlib
.
h
 
Thu
 
	gJul
 9 20:06:56 1998

2 +++ 
zlib
-1.1.3/zlib.
h
 
Tue
 
M¨
 22 13:41:04 2005

4 (0 
ö
 
of
 
	gîr‹
).

7 -
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

	@objs/ngx_auto_config.h

1 
	#NGX_CONFIGURE
 ""

	)

3 #i‚de‡
NGX_HAVE_GCC_ATOMIC


4 
	#NGX_HAVE_GCC_ATOMIC
 1

	)

8 #i‚de‡
NGX_HAVE_C99_VARIADIC_MACROS


9 
	#NGX_HAVE_C99_VARIADIC_MACROS
 1

	)

13 #i‚de‡
NGX_HAVE_GCC_VARIADIC_MACROS


14 
	#NGX_HAVE_GCC_VARIADIC_MACROS
 1

	)

18 #i‚de‡
NGX_HAVE_EPOLL


19 
	#NGX_HAVE_EPOLL
 1

	)

23 #i‚de‡
NGX_HAVE_CLEAR_EVENT


24 
	#NGX_HAVE_CLEAR_EVENT
 1

	)

28 #i‚de‡
NGX_HAVE_SENDFILE


29 
	#NGX_HAVE_SENDFILE
 1

	)

33 #i‚de‡
NGX_HAVE_SENDFILE64


34 
	#NGX_HAVE_SENDFILE64
 1

	)

38 #i‚de‡
NGX_HAVE_PR_SET_DUMPABLE


39 
	#NGX_HAVE_PR_SET_DUMPABLE
 1

	)

43 #i‚de‡
NGX_HAVE_SCHED_SETAFFINITY


44 
	#NGX_HAVE_SCHED_SETAFFINITY
 1

	)

48 #i‚de‡
NGX_HAVE_GNU_CRYPT_R


49 
	#NGX_HAVE_GNU_CRYPT_R
 1

	)

53 #i‚de‡
NGX_HAVE_NONALIGNED


54 
	#NGX_HAVE_NONALIGNED
 1

	)

58 #i‚de‡
NGX_CPU_CACHE_LINE


59 
	#NGX_CPU_CACHE_LINE
 64

	)

63 
	#NGX_KQUEUE_UDATA_T
 (*)

	)

66 #i‚de‡
NGX_HAVE_POSIX_FADVISE


67 
	#NGX_HAVE_POSIX_FADVISE
 1

	)

71 #i‚de‡
NGX_HAVE_O_DIRECT


72 
	#NGX_HAVE_O_DIRECT
 1

	)

76 #i‚de‡
NGX_HAVE_ALIGNED_DIRECTIO


77 
	#NGX_HAVE_ALIGNED_DIRECTIO
 1

	)

81 #i‚de‡
NGX_HAVE_STATFS


82 
	#NGX_HAVE_STATFS
 1

	)

86 #i‚de‡
NGX_HAVE_STATVFS


87 
	#NGX_HAVE_STATVFS
 1

	)

91 #i‚de‡
NGX_HAVE_SCHED_YIELD


92 
	#NGX_HAVE_SCHED_YIELD
 1

	)

96 #i‚de‡
NGX_HAVE_DEFERRED_ACCEPT


97 
	#NGX_HAVE_DEFERRED_ACCEPT
 1

	)

101 #i‚de‡
NGX_HAVE_ACCEPT4


102 
	#NGX_HAVE_ACCEPT4
 1

	)

106 #i‚de‡
NGX_HAVE_UNIX_DOMAIN


107 
	#NGX_HAVE_UNIX_DOMAIN
 1

	)

111 #i‚de‡
NGX_PTR_SIZE


112 
	#NGX_PTR_SIZE
 8

	)

116 #i‚de‡
NGX_SIG_ATOMIC_T_SIZE


117 
	#NGX_SIG_ATOMIC_T_SIZE
 4

	)

121 #i‚de‡
NGX_HAVE_LITTLE_ENDIAN


122 
	#NGX_HAVE_LITTLE_ENDIAN
 1

	)

126 #i‚de‡
NGX_MAX_SIZE_T_VALUE


127 
	#NGX_MAX_SIZE_T_VALUE
 9223372036854775807LL

	)

131 #i‚de‡
NGX_SIZE_T_LEN


132 
	#NGX_SIZE_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

136 #i‚de‡
NGX_MAX_OFF_T_VALUE


137 
	#NGX_MAX_OFF_T_VALUE
 9223372036854775807LL

	)

141 #i‚de‡
NGX_OFF_T_LEN


142 
	#NGX_OFF_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

146 #i‚de‡
NGX_TIME_T_SIZE


147 
	#NGX_TIME_T_SIZE
 8

	)

151 #i‚de‡
NGX_TIME_T_LEN


152 
	#NGX_TIME_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

156 #i‚de‡
NGX_HAVE_PREAD


157 
	#NGX_HAVE_PREAD
 1

	)

161 #i‚de‡
NGX_HAVE_PWRITE


162 
	#NGX_HAVE_PWRITE
 1

	)

166 #i‚de‡
NGX_SYS_NERR


167 
	#NGX_SYS_NERR
 135

	)

171 #i‚de‡
NGX_HAVE_LOCALTIME_R


172 
	#NGX_HAVE_LOCALTIME_R
 1

	)

176 #i‚de‡
NGX_HAVE_POSIX_MEMALIGN


177 
	#NGX_HAVE_POSIX_MEMALIGN
 1

	)

181 #i‚de‡
NGX_HAVE_MEMALIGN


182 
	#NGX_HAVE_MEMALIGN
 1

	)

186 #i‚de‡
NGX_HAVE_MAP_ANON


187 
	#NGX_HAVE_MAP_ANON
 1

	)

191 #i‚de‡
NGX_HAVE_MAP_DEVZERO


192 
	#NGX_HAVE_MAP_DEVZERO
 1

	)

196 #i‚de‡
NGX_HAVE_SYSVSHM


197 
	#NGX_HAVE_SYSVSHM
 1

	)

201 #i‚de‡
NGX_HAVE_POSIX_SEM


202 
	#NGX_HAVE_POSIX_SEM
 1

	)

206 #i‚de‡
NGX_HAVE_MSGHDR_MSG_CONTROL


207 
	#NGX_HAVE_MSGHDR_MSG_CONTROL
 1

	)

211 #i‚de‡
NGX_HAVE_FIONBIO


212 
	#NGX_HAVE_FIONBIO
 1

	)

216 #i‚de‡
NGX_HAVE_GMTOFF


217 
	#NGX_HAVE_GMTOFF
 1

	)

221 #i‚de‡
NGX_HAVE_D_TYPE


222 
	#NGX_HAVE_D_TYPE
 1

	)

226 #i‚de‡
NGX_HAVE_SC_NPROCESSORS_ONLN


227 
	#NGX_HAVE_SC_NPROCESSORS_ONLN
 1

	)

231 #i‚de‡
NGX_HTTP_CACHE


232 
	#NGX_HTTP_CACHE
 1

	)

236 #i‚de‡
NGX_HTTP_GZIP


237 
	#NGX_HTTP_GZIP
 1

	)

241 #i‚de‡
NGX_HTTP_SSI


242 
	#NGX_HTTP_SSI
 1

	)

246 #i‚de‡
NGX_CRYPT


247 
	#NGX_CRYPT
 1

	)

251 #i‚de‡
NGX_HTTP_GEO


252 
	#NGX_HTTP_GEO
 1

	)

256 #i‚de‡
NGX_HTTP_PROXY


257 
	#NGX_HTTP_PROXY
 1

	)

261 #i‚de‡
NGX_PCRE


262 
	#NGX_PCRE
 1

	)

266 #i‚de‡
NGX_PREFIX


267 
	#NGX_PREFIX
 "/u§/loˇl/ngöx/"

	)

271 #i‚de‡
NGX_CONF_PREFIX


272 
	#NGX_CONF_PREFIX
 "c⁄f/"

	)

276 #i‚de‡
NGX_SBIN_PATH


277 
	#NGX_SBIN_PATH
 ""

	)

281 #i‚de‡
NGX_CONF_PATH


282 
	#NGX_CONF_PATH
 "c⁄f/ngöx.c⁄f"

	)

286 #i‚de‡
NGX_PID_PATH


287 
	#NGX_PID_PATH
 "logs/ngöx.pid"

	)

291 #i‚de‡
NGX_LOCK_PATH


292 
	#NGX_LOCK_PATH
 "logs/ngöx.lock"

	)

296 #i‚de‡
NGX_ERROR_LOG_PATH


297 
	#NGX_ERROR_LOG_PATH
 "logs/îr‹.log"

	)

301 #i‚de‡
NGX_HTTP_LOG_PATH


302 
	#NGX_HTTP_LOG_PATH
 "logs/ac˚ss.log"

	)

306 #i‚de‡
NGX_HTTP_CLIENT_TEMP_PATH


307 
	#NGX_HTTP_CLIENT_TEMP_PATH
 "˛õ¡_body_ãmp"

	)

311 #i‚de‡
NGX_HTTP_PROXY_TEMP_PATH


312 
	#NGX_HTTP_PROXY_TEMP_PATH
 "¥oxy_ãmp"

	)

316 #i‚de‡
NGX_HTTP_FASTCGI_TEMP_PATH


317 
	#NGX_HTTP_FASTCGI_TEMP_PATH
 "Á°cgi_ãmp"

	)

321 #i‚de‡
NGX_HTTP_UWSGI_TEMP_PATH


322 
	#NGX_HTTP_UWSGI_TEMP_PATH
 "uwsgi_ãmp"

	)

326 #i‚de‡
NGX_HTTP_SCGI_TEMP_PATH


327 
	#NGX_HTTP_SCGI_TEMP_PATH
 "scgi_ãmp"

	)

331 #i‚de‡
NGX_SUPPRESS_WARN


332 
	#NGX_SUPPRESS_WARN
 1

	)

336 #i‚de‡
NGX_SMP


337 
	#NGX_SMP
 1

	)

341 #i‚de‡
NGX_USER


342 
	#NGX_USER
 "nobody"

	)

346 #i‚de‡
NGX_GROUP


347 
	#NGX_GROUP
 "nobody"

	)

	@objs/ngx_auto_headers.h

3 #i‚de‡
NGX_HAVE_UNISTD_H


4 
	#NGX_HAVE_UNISTD_H
 1

	)

8 #i‚de‡
NGX_HAVE_INTTYPES_H


9 
	#NGX_HAVE_INTTYPES_H
 1

	)

13 #i‚de‡
NGX_HAVE_LIMITS_H


14 
	#NGX_HAVE_LIMITS_H
 1

	)

18 #i‚de‡
NGX_HAVE_SYS_PARAM_H


19 
	#NGX_HAVE_SYS_PARAM_H
 1

	)

23 #i‚de‡
NGX_HAVE_SYS_MOUNT_H


24 
	#NGX_HAVE_SYS_MOUNT_H
 1

	)

28 #i‚de‡
NGX_HAVE_SYS_STATVFS_H


29 
	#NGX_HAVE_SYS_STATVFS_H
 1

	)

33 #i‚de‡
NGX_HAVE_CRYPT_H


34 
	#NGX_HAVE_CRYPT_H
 1

	)

38 #i‚de‡
NGX_LINUX


39 
	#NGX_LINUX
 1

	)

43 #i‚de‡
NGX_HAVE_SYS_PRCTL_H


44 
	#NGX_HAVE_SYS_PRCTL_H
 1

	)

48 #i‚de‡
NGX_HAVE_SYS_VFS_H


49 
	#NGX_HAVE_SYS_VFS_H
 1

	)

	@objs/ngx_modules.c

2 
	~<ngx_c⁄fig.h
>

3 
	~<ngx_c‹e.h
>

7 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

8 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

9 
ngx_moduÀ_t
 
ngx_c⁄f_moduÀ
;

10 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

11 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

12 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

13 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

14 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

15 
ngx_moduÀ_t
 
ngx_hâp_log_moduÀ
;

16 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_hâp_°©ic_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_hâp_autoödex_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_hâp_ödex_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_hâp_auth_basic_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_hâp_ac˚ss_moduÀ
;

22 
ngx_moduÀ_t
 
ngx_hâp_limô_z⁄e_moduÀ
;

23 
ngx_moduÀ_t
 
ngx_hâp_limô_ªq_moduÀ
;

24 
ngx_moduÀ_t
 
ngx_hâp_geo_moduÀ
;

25 
ngx_moduÀ_t
 
ngx_hâp_m≠_moduÀ
;

26 
ngx_moduÀ_t
 
ngx_hâp_•lô_˛õ¡s_moduÀ
;

27 
ngx_moduÀ_t
 
ngx_hâp_ª„ªr_moduÀ
;

28 
ngx_moduÀ_t
 
ngx_hâp_ªwrôe_moduÀ
;

29 
ngx_moduÀ_t
 
ngx_hâp_¥oxy_moduÀ
;

30 
ngx_moduÀ_t
 
ngx_hâp_Á°cgi_moduÀ
;

31 
ngx_moduÀ_t
 
ngx_hâp_uwsgi_moduÀ
;

32 
ngx_moduÀ_t
 
ngx_hâp_scgi_moduÀ
;

33 
ngx_moduÀ_t
 
ngx_hâp_memˇched_moduÀ
;

34 
ngx_moduÀ_t
 
ngx_hâp_em±y_gif_moduÀ
;

35 
ngx_moduÀ_t
 
ngx_hâp_brow£r_moduÀ
;

36 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_ù_hash_moduÀ
;

37 
ngx_moduÀ_t
 
ngx_hâp_wrôe_fûãr_moduÀ
;

38 
ngx_moduÀ_t
 
ngx_hâp_hódî_fûãr_moduÀ
;

39 
ngx_moduÀ_t
 
ngx_hâp_chunked_fûãr_moduÀ
;

40 
ngx_moduÀ_t
 
ngx_hâp_ønge_hódî_fûãr_moduÀ
;

41 
ngx_moduÀ_t
 
ngx_hâp_gzù_fûãr_moduÀ
;

42 
ngx_moduÀ_t
 
ngx_hâp_po°p⁄e_fûãr_moduÀ
;

43 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

44 
ngx_moduÀ_t
 
ngx_hâp_ch¨£t_fûãr_moduÀ
;

45 
ngx_moduÀ_t
 
ngx_hâp_u£rid_fûãr_moduÀ
;

46 
ngx_moduÀ_t
 
ngx_hâp_hódîs_fûãr_moduÀ
;

47 
ngx_moduÀ_t
 
ngx_hâp_c›y_fûãr_moduÀ
;

48 
ngx_moduÀ_t
 
ngx_hâp_ønge_body_fûãr_moduÀ
;

49 
ngx_moduÀ_t
 
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
;

51 
ngx_moduÀ_t
 *
	gngx_moduÀs
[] = {

52 &
ngx_c‹e_moduÀ
,

53 &
ngx_îæog_moduÀ
,

54 &
ngx_c⁄f_moduÀ
,

55 &
ngx_evíts_moduÀ
,

56 &
ngx_evít_c‹e_moduÀ
,

57 &
ngx_ïﬁl_moduÀ
,

58 &
ngx_hâp_moduÀ
,

59 &
ngx_hâp_c‹e_moduÀ
,

60 &
ngx_hâp_log_moduÀ
,

61 &
ngx_hâp_up°ªam_moduÀ
,

62 &
ngx_hâp_°©ic_moduÀ
,

63 &
ngx_hâp_autoödex_moduÀ
,

64 &
ngx_hâp_ödex_moduÀ
,

65 &
ngx_hâp_auth_basic_moduÀ
,

66 &
ngx_hâp_ac˚ss_moduÀ
,

67 &
ngx_hâp_limô_z⁄e_moduÀ
,

68 &
ngx_hâp_limô_ªq_moduÀ
,

69 &
ngx_hâp_geo_moduÀ
,

70 &
ngx_hâp_m≠_moduÀ
,

71 &
ngx_hâp_•lô_˛õ¡s_moduÀ
,

72 &
ngx_hâp_ª„ªr_moduÀ
,

73 &
ngx_hâp_ªwrôe_moduÀ
,

74 &
ngx_hâp_¥oxy_moduÀ
,

75 &
ngx_hâp_Á°cgi_moduÀ
,

76 &
ngx_hâp_uwsgi_moduÀ
,

77 &
ngx_hâp_scgi_moduÀ
,

78 &
ngx_hâp_memˇched_moduÀ
,

79 &
ngx_hâp_em±y_gif_moduÀ
,

80 &
ngx_hâp_brow£r_moduÀ
,

81 &
ngx_hâp_up°ªam_ù_hash_moduÀ
,

82 &
ngx_hâp_wrôe_fûãr_moduÀ
,

83 &
ngx_hâp_hódî_fûãr_moduÀ
,

84 &
ngx_hâp_chunked_fûãr_moduÀ
,

85 &
ngx_hâp_ønge_hódî_fûãr_moduÀ
,

86 &
ngx_hâp_gzù_fûãr_moduÀ
,

87 &
ngx_hâp_po°p⁄e_fûãr_moduÀ
,

88 &
ngx_hâp_ssi_fûãr_moduÀ
,

89 &
ngx_hâp_ch¨£t_fûãr_moduÀ
,

90 &
ngx_hâp_u£rid_fûãr_moduÀ
,

91 &
ngx_hâp_hódîs_fûãr_moduÀ
,

92 &
ngx_hâp_c›y_fûãr_moduÀ
,

93 &
ngx_hâp_ønge_body_fûãr_moduÀ
,

94 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
,

95 
NULL


	@src/core/nginx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
);

15 
ngx_öt_t
 
ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
);

16 
ngx_öt_t
 
ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
);

17 *
ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

18 *
ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

19 *
ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

20 *
ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

21 *
ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

22 *
ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

26 
ngx_c⁄f_íum_t
 
	gngx_debug_poöts
[] = {

27 { 
ngx_°rög
("°›"), 
NGX_DEBUG_POINTS_STOP
 },

28 { 
ngx_°rög
("ab‹t"), 
NGX_DEBUG_POINTS_ABORT
 },

29 { 
ngx_nuŒ_°rög
, 0 }

33 
ngx_comm™d_t
 
	gngx_c‹e_comm™ds
[] = {

35 { 
ngx_°rög
("daemon"),

36 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

37 
ngx_c⁄f_£t_Êag_¶Ÿ
,

39 
off£tof
(
ngx_c‹e_c⁄f_t
, 
d´m⁄
),

40 
NULL
 },

42 { 
ngx_°rög
("master_process"),

43 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

44 
ngx_c⁄f_£t_Êag_¶Ÿ
,

46 
off£tof
(
ngx_c‹e_c⁄f_t
, 
ma°î
),

47 
NULL
 },

49 { 
ngx_°rög
("timer_resolution"),

50 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

51 
ngx_c⁄f_£t_m£c_¶Ÿ
,

53 
off£tof
(
ngx_c‹e_c⁄f_t
, 
timî_ªsﬁuti⁄
),

54 
NULL
 },

56 { 
ngx_°rög
("pid"),

57 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_°r_¶Ÿ
,

60 
off£tof
(
ngx_c‹e_c⁄f_t
, 
pid
),

61 
NULL
 },

63 { 
ngx_°rög
("lock_file"),

64 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_°r_¶Ÿ
,

67 
off£tof
(
ngx_c‹e_c⁄f_t
, 
lock_fûe
),

68 
NULL
 },

70 { 
ngx_°rög
("worker_processes"),

71 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_num_¶Ÿ
,

74 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kî_¥o˚s£s
),

75 
NULL
 },

77 { 
ngx_°rög
("debug_points"),

78 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_íum_¶Ÿ
,

81 
off£tof
(
ngx_c‹e_c⁄f_t
, 
debug_poöts
),

82 &
ngx_debug_poöts
 },

84 { 
ngx_°rög
("user"),

85 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE12
,

86 
ngx_£t_u£r
,

89 
NULL
 },

91 { 
ngx_°rög
("worker_priority"),

92 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_£t_¥i‹ôy
,

96 
NULL
 },

98 { 
ngx_°rög
("worker_cpu_affinity"),

99 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_1MORE
,

100 
ngx_£t_˝u_afföôy
,

103 
NULL
 },

105 { 
ngx_°rög
("worker_rlimit_nofile"),

106 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_c⁄f_£t_num_¶Ÿ
,

109 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_nofûe
),

110 
NULL
 },

112 { 
ngx_°rög
("worker_rlimit_core"),

113 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

114 
ngx_c⁄f_£t_off_¶Ÿ
,

116 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_c‹e
),

117 
NULL
 },

119 { 
ngx_°rög
("worker_rlimit_sigpending"),

120 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

121 
ngx_c⁄f_£t_num_¶Ÿ
,

123 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_sig≥ndög
),

124 
NULL
 },

126 { 
ngx_°rög
("working_directory"),

127 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

128 
ngx_c⁄f_£t_°r_¶Ÿ
,

130 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kög_dúe˘‹y
),

131 
NULL
 },

133 { 
ngx_°rög
("env"),

134 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

135 
ngx_£t_ív
,

138 
NULL
 },

140 #i‡(
NGX_THREADS
)

142 { 
ngx_°rög
("worker_threads"),

143 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

144 
ngx_c⁄f_£t_num_¶Ÿ
,

146 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kî_thªads
),

147 
NULL
 },

149 { 
ngx_°rög
("thread_stack_size"),

150 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

151 
ngx_c⁄f_£t_size_¶Ÿ
,

153 
off£tof
(
ngx_c‹e_c⁄f_t
, 
thªad_°ack_size
),

154 
NULL
 },

158 
ngx_nuŒ_comm™d


162 
ngx_c‹e_moduÀ_t
 
	gngx_c‹e_moduÀ_˘x
 = {

163 
ngx_°rög
("core"),

164 
ngx_c‹e_moduÀ_¸óã_c⁄f
,

165 
ngx_c‹e_moduÀ_öô_c⁄f


169 
ngx_moduÀ_t
 
	gngx_c‹e_moduÀ
 = {

170 
NGX_MODULE_V1
,

171 &
ngx_c‹e_moduÀ_˘x
,

172 
ngx_c‹e_comm™ds
,

173 
NGX_CORE_MODULE
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NGX_MODULE_V1_PADDING


185 
ngx_uöt_t
 
	gngx_max_moduÀ
;

187 
ngx_uöt_t
 
	gngx_show_hñp
;

188 
ngx_uöt_t
 
	gngx_show_vîsi⁄
;

189 
ngx_uöt_t
 
	gngx_show_c⁄figuª
;

190 
u_ch¨
 *
	gngx_¥efix
;

191 
u_ch¨
 *
	gngx_c⁄f_fûe
;

192 
u_ch¨
 *
	gngx_c⁄f_∑øms
;

193 *
	gngx_sig«l
;

196 **
	gngx_os_ívú⁄
;

199 
ngx_cde˛


200 
	$maö
(
¨gc
, *c⁄° *
¨gv
)

202 
ngx_öt_t
 
i
;

203 
ngx_log_t
 *
log
;

204 
ngx_cy˛e_t
 *
cy˛e
, 
öô_cy˛e
;

205 
ngx_c‹e_c⁄f_t
 *
ccf
;

207 #i‡(
NGX_FREEBSD
)

208 
	`ngx_debug_öô
();

211 i‡(
	`ngx_°ªº‹_öô
(Ë!
NGX_OK
) {

215 i‡(
	`ngx_gë_›ti⁄s
(
¨gc
, 
¨gv
Ë!
NGX_OK
) {

219 i‡(
ngx_show_vîsi⁄
) {

220 
	`ngx_wrôe_°dîr
("ngöx vîsi⁄: " 
NGINX_VER
 
NGX_LINEFEED
);

222 i‡(
ngx_show_hñp
) {

223 
	`ngx_wrôe_°dîr
(

225 "[-∞¥efix] [-g dúe˘ives]" 
NGX_LINEFEED


226 
NGX_LINEFEED


227 "O±i⁄s:" 
NGX_LINEFEED


228 " -?,-h :Åhi†hñp" 
NGX_LINEFEED


229 " -v : show vîsi⁄ándÉxô" 
NGX_LINEFEED


231 
NGX_LINEFEED


232 " -à :Åe° c⁄figuøti⁄ándÉxô" 
NGX_LINEFEED


234 "durög c⁄figuøti⁄Åe°ög" 
NGX_LINEFEED


236 "°›, quô,Ñe›í,Ññﬂd" 
NGX_LINEFEED


237 #ifde‡
NGX_PREFIX


239 
NGX_PREFIX
 ")" 
NGX_LINEFEED


241 " -∞¥efix : sëÖªfixÖ©h (deÁu…: NONE)" 
NGX_LINEFEED


244 
NGX_CONF_PATH
 ")" 
NGX_LINEFEED


246 "fûe" 
NGX_LINEFEED
 NGX_LINEFEED

250 i‡(
ngx_show_c⁄figuª
) {

251 
	`ngx_wrôe_°dîr
(

252 #ifde‡
NGX_COMPILER


253 "buûàby " 
NGX_COMPILER
 
NGX_LINEFEED


255 #i‡(
NGX_SSL
)

256 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


257 "TLS SNI suµ‹àíabÀd" 
NGX_LINEFEED


259 "TLS SNI suµ‹àdißbÀd" 
NGX_LINEFEED


262 "c⁄figuªárgumíts:" 
NGX_CONFIGURE
 
NGX_LINEFEED
);

265 i‡(!
ngx_ã°_c⁄fig
) {

270  
ngx_max_sockës
 = -1;

272 
	`ngx_time_öô
();

274 #i‡(
NGX_PCRE
)

275 
	`ngx_ªgex_öô
();

278 
ngx_pid
 = 
	`ngx_gëpid
();

280 
log
 = 
	`ngx_log_öô
(
ngx_¥efix
);

281 i‡(
log
 =
NULL
) {

286 #i‡(
NGX_OPENSSL
)

287 
	`ngx_s¶_öô
(
log
);

295 
	`ngx_memzîo
(&
öô_cy˛e
, (
ngx_cy˛e_t
));

296 
öô_cy˛e
.
log
 =Üog;

297 
ngx_cy˛e
 = &
öô_cy˛e
;

299 
öô_cy˛e
.
poﬁ
 = 
	`ngx_¸óã_poﬁ
(1024, 
log
);

300 i‡(
öô_cy˛e
.
poﬁ
 =
NULL
) {

304 i‡(
	`ngx_ßve_¨gv
(&
öô_cy˛e
, 
¨gc
, 
¨gv
Ë!
NGX_OK
) {

308 i‡(
	`ngx_¥o˚ss_›ti⁄s
(&
öô_cy˛e
Ë!
NGX_OK
) {

312 i‡(
	`ngx_os_öô
(
log
Ë!
NGX_OK
) {

320 i‡(
	`ngx_¸c32_èbÀ_öô
(Ë!
NGX_OK
) {

324 i‡(
	`ngx_add_öhîôed_sockës
(&
öô_cy˛e
Ë!
NGX_OK
) {

328 
ngx_max_moduÀ
 = 0;

329 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

330 
ngx_moduÀs
[
i
]->
ödex
 = 
ngx_max_moduÀ
++;

333 
cy˛e
 = 
	`ngx_öô_cy˛e
(&
öô_cy˛e
);

334 i‡(
cy˛e
 =
NULL
) {

335 i‡(
ngx_ã°_c⁄fig
) {

336 
	`ngx_log_°dîr
(0, "configuration file %sÅest failed",

337 
öô_cy˛e
.
c⁄f_fûe
.
d©a
);

343 i‡(
ngx_ã°_c⁄fig
) {

344 i‡(!
ngx_quõt_mode
) {

345 
	`ngx_log_°dîr
(0, "configuration file %sÅest is successful",

346 
cy˛e
->
c⁄f_fûe
.
d©a
);

352 i‡(
ngx_sig«l
) {

353  
	`ngx_sig«l_¥o˚ss
(
cy˛e
, 
ngx_sig«l
);

356 
	`ngx_os_°©us
(
cy˛e
->
log
);

358 
ngx_cy˛e
 = 
cy˛e
;

360 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

362 i‡(
ccf
->
ma°î
 && 
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

363 
ngx_¥o˚ss
 = 
NGX_PROCESS_MASTER
;

366 #i‡!(
NGX_WIN32
)

368 i‡(
	`ngx_öô_sig«ls
(
cy˛e
->
log
Ë!
NGX_OK
) {

372 i‡(!
ngx_öhîôed
 && 
ccf
->
d´m⁄
) {

373 i‡(
	`ngx_d´m⁄
(
cy˛e
->
log
Ë!
NGX_OK
) {

377 
ngx_d´m⁄ized
 = 1;

380 i‡(
ngx_öhîôed
) {

381 
ngx_d´m⁄ized
 = 1;

386 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
cy˛e
->
log
Ë!
NGX_OK
) {

390 i‡(
cy˛e
->
log
->
fûe
->
fd
 !
ngx_°dîr
) {

392 i‡(
	`ngx_£t_°dîr
(
cy˛e
->
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

393 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

394 
ngx_£t_°dîr_n
 " failed");

399 i‡(
log
->
fûe
->
fd
 !
ngx_°dîr
) {

400 i‡(
	`ngx_˛o£_fûe
(
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

401 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

402 
ngx_˛o£_fûe_n
 " built-inÜog failed");

406 
ngx_u£_°dîr
 = 0;

408 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

409 
	`ngx_sögÀ_¥o˚ss_cy˛e
(
cy˛e
);

412 
	`ngx_ma°î_¥o˚ss_cy˛e
(
cy˛e
);

416 
	}
}

419 
ngx_öt_t


420 
	$ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

422 
u_ch¨
 *
p
, *
v
, *
öhîôed
;

423 
ngx_öt_t
 
s
;

424 
ngx_li°íög_t
 *
ls
;

426 
öhîôed
 = (
u_ch¨
 *Ë
	`gëív
(
NGINX_VAR
);

428 i‡(
öhîôed
 =
NULL
) {

429  
NGX_OK
;

432 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

433 "usög inhîôed sockë†‰om \"%s\"", 
öhîôed
);

435 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
li°íög
, cy˛e->
poﬁ
, 10,

436 (
ngx_li°íög_t
))

437 !
NGX_OK
)

439  
NGX_ERROR
;

442 
p
 = 
öhîôed
, 
v
 =Ö; *p;Ö++) {

443 i‡(*
p
 == ':' || *p == ';') {

444 
s
 = 
	`ngx_©oi
(
v
, 
p
 - v);

445 i‡(
s
 =
NGX_ERROR
) {

446 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

447 "övÆid sockëÇumbî \"%s\" i¿" 
NGINX_VAR


449 " o‡thêv¨übÀ", 
v
);

453 
v
 = 
p
 + 1;

455 
ls
 = 
	`ngx_¨øy_push
(&
cy˛e
->
li°íög
);

456 i‡(
ls
 =
NULL
) {

457  
NGX_ERROR
;

460 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

462 
ls
->
fd
 = (
ngx_sockë_t
Ë
s
;

466 
ngx_öhîôed
 = 1;

468  
	`ngx_£t_öhîôed_sockës
(
cy˛e
);

469 
	}
}

473 
	$ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
)

475 **
p
, **
ív
;

476 
ngx_°r_t
 *
v¨
;

477 
ngx_uöt_t
 
i
, 
n
;

478 
ngx_c‹e_c⁄f_t
 *
ccf
;

480 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

482 i‡(
œ°
 =
NULL
 && 
ccf
->
ívú⁄mít
) {

483  
ccf
->
ívú⁄mít
;

486 
v¨
 = 
ccf
->
ív
.
ñts
;

488 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

489 i‡(
	`ngx_°rcmp
(
v¨
[
i
].
d©a
, "TZ") == 0

490 || 
	`ngx_°∫cmp
(
v¨
[
i
].
d©a
, "TZ=", 3) == 0)

492 
tz_found
;

496 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

497 i‡(
v¨
 =
NULL
) {

498  
NULL
;

501 
v¨
->
Àn
 = 2;

502 
v¨
->
d©a
 = (
u_ch¨
 *) "TZ";

504 
v¨
 = 
ccf
->
ív
.
ñts
;

506 
tz_found
:

508 
n
 = 0;

510 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

512 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

513 
n
++;

517 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

519 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

520 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

522 
n
++;

528 i‡(
œ°
) {

529 
ív
 = 
	`ngx_Æloc
((*
œ°
 + 
n
 + 1Ë* (*), 
cy˛e
->
log
);

530 *
œ°
 = 
n
;

533 
ív
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
n
 + 1) * (*));

536 i‡(
ív
 =
NULL
) {

537  
NULL
;

540 
n
 = 0;

542 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

544 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

545 
ív
[
n
++] = (*Ë
v¨
[
i
].
d©a
;

549 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

551 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

552 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

554 
ív
[
n
++] = *
p
;

560 
ív
[
n
] = 
NULL
;

562 i‡(
œ°
 =
NULL
) {

563 
ccf
->
ívú⁄mít
 = 
ív
;

564 
ívú⁄
 = 
ív
;

567  
ív
;

568 
	}
}

571 
ngx_pid_t


572 
	$ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
)

574 **
ív
, *
v¨
;

575 
u_ch¨
 *
p
;

576 
ngx_uöt_t
 
i
, 
n
;

577 
ngx_pid_t
 
pid
;

578 
ngx_exec_˘x_t
 
˘x
;

579 
ngx_c‹e_c⁄f_t
 *
ccf
;

580 
ngx_li°íög_t
 *
ls
;

582 
	`ngx_memzîo
(&
˘x
, (
ngx_exec_˘x_t
));

584 
˘x
.
∑th
 = 
¨gv
[0];

585 
˘x
.
«me
 = "new binaryÖrocess";

586 
˘x
.
¨gv
 =árgv;

588 
n
 = 2;

589 
ív
 = 
	`ngx_£t_ívú⁄mít
(
cy˛e
, &
n
);

590 i‡(
ív
 =
NULL
) {

591  
NGX_INVALID_PID
;

594 
v¨
 = 
	`ngx_Æloc
((
NGINX_VAR
)

595 + 
cy˛e
->
li°íög
.
√…s
 * (
NGX_INT32_LEN
 + 1) + 2,

596 
cy˛e
->
log
);

598 
p
 = 
	`ngx_˝ymem
(
v¨
, 
NGINX_VAR
 "=", (NGINX_VAR));

600 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

601 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

602 
p
 = 
	`ngx_•rötf
’, "%ud;", 
ls
[
i
].
fd
);

605 *
p
 = '\0';

607 
ív
[
n
++] = 
v¨
;

609 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

613 
ív
[
n
++] = "SPARE=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

621 
ív
[
n
] = 
NULL
;

623 #i‡(
NGX_DEBUG
)

625 **
e
;

626 
e
 = 
ív
; *e;É++) {

627 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "ív: %s", *
e
);

632 
˘x
.
ívp
 = (*c⁄° *Ë
ív
;

634 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

636 i‡(
	`ngx_ª«me_fûe
(
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©aË!
NGX_OK
) {

637 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

638 
ngx_ª«me_fûe_n
 " %sÅo %s failed "

640 
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©a, 
¨gv
[0]);

642 
	`ngx_‰ì
(
ív
);

643 
	`ngx_‰ì
(
v¨
);

645  
NGX_INVALID_PID
;

648 
pid
 = 
	`ngx_execuã
(
cy˛e
, &
˘x
);

650 i‡(
pid
 =
NGX_INVALID_PID
) {

651 i‡(
	`ngx_ª«me_fûe
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©aË!
NGX_OK
) {

652 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

653 
ngx_ª«me_fûe_n
 " %s backÅo %s failedáfter "

655 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
¨gv
[0]);

659 
	`ngx_‰ì
(
ív
);

660 
	`ngx_‰ì
(
v¨
);

662  
pid
;

663 
	}
}

666 
ngx_öt_t


667 
	$ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
)

669 
u_ch¨
 *
p
;

670 
ngx_öt_t
 
i
;

672 
i
 = 1; i < 
¨gc
; i++) {

674 
p
 = (
u_ch¨
 *Ë
¨gv
[
i
];

676 i‡(*
p
++ != '-') {

677 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%s\"", 
¨gv
[
i
]);

678  
NGX_ERROR
;

681 *
p
) {

683 *
p
++) {

687 
ngx_show_vîsi⁄
 = 1;

688 
ngx_show_hñp
 = 1;

692 
ngx_show_vîsi⁄
 = 1;

696 
ngx_show_vîsi⁄
 = 1;

697 
ngx_show_c⁄figuª
 = 1;

701 
ngx_ã°_c⁄fig
 = 1;

705 
ngx_quõt_mode
 = 1;

709 i‡(*
p
) {

710 
ngx_¥efix
 = 
p
;

711 
√xt
;

714 i‡(
¨gv
[++
i
]) {

715 
ngx_¥efix
 = (
u_ch¨
 *Ë
¨gv
[
i
];

716 
√xt
;

719 
	`ngx_log_°dîr
(0, "option \"-p\"Ñequires directoryÇame");

720  
NGX_ERROR
;

723 i‡(*
p
) {

724 
ngx_c⁄f_fûe
 = 
p
;

725 
√xt
;

728 i‡(
¨gv
[++
i
]) {

729 
ngx_c⁄f_fûe
 = (
u_ch¨
 *Ë
¨gv
[
i
];

730 
√xt
;

733 
	`ngx_log_°dîr
(0, "option \"-c\"Ñequires fileÇame");

734  
NGX_ERROR
;

737 i‡(*
p
) {

738 
ngx_c⁄f_∑øms
 = 
p
;

739 
√xt
;

742 i‡(
¨gv
[++
i
]) {

743 
ngx_c⁄f_∑øms
 = (
u_ch¨
 *Ë
¨gv
[
i
];

744 
√xt
;

747 
	`ngx_log_°dîr
(0, "option \"-g\"ÑequiresÖarameter");

748  
NGX_ERROR
;

751 i‡(*
p
) {

752 
ngx_sig«l
 = (*Ë
p
;

754 } i‡(
¨gv
[++
i
]) {

755 
ngx_sig«l
 = 
¨gv
[
i
];

758 
	`ngx_log_°dîr
(0, "option \"-s\"ÑequiresÖarameter");

759  
NGX_ERROR
;

762 i‡(
	`ngx_°rcmp
(
ngx_sig«l
, "stop") == 0

763 || 
	`ngx_°rcmp
(
ngx_sig«l
, "quit") == 0

764 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reopen") == 0

765 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reload") == 0)

767 
ngx_¥o˚ss
 = 
NGX_PROCESS_SIGNALLER
;

768 
√xt
;

771 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"-†%s\"", 
ngx_sig«l
);

772  
NGX_ERROR
;

775 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%c\"", *(
p
 - 1));

776  
NGX_ERROR
;

780 
√xt
:

785  
NGX_OK
;

786 
	}
}

789 
ngx_öt_t


790 
	$ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
)

792 #i‡(
NGX_FREEBSD
)

794 
ngx_os_¨gv
 = (**Ë
¨gv
;

795 
ngx_¨gc
 = 
¨gc
;

796 
ngx_¨gv
 = (**Ë
¨gv
;

799 
size_t
 
Àn
;

800 
ngx_öt_t
 
i
;

802 
ngx_os_¨gv
 = (**Ë
¨gv
;

803 
ngx_¨gc
 = 
¨gc
;

805 
ngx_¨gv
 = 
	`ngx_Æloc
((
¨gc
 + 1Ë* (*), 
cy˛e
->
log
);

806 i‡(
ngx_¨gv
 =
NULL
) {

807  
NGX_ERROR
;

810 
i
 = 0; i < 
¨gc
; i++) {

811 
Àn
 = 
	`ngx_°æí
(
¨gv
[
i
]) + 1;

813 
ngx_¨gv
[
i
] = 
	`ngx_Æloc
(
Àn
, 
cy˛e
->
log
);

814 i‡(
ngx_¨gv
[
i
] =
NULL
) {

815  
NGX_ERROR
;

818 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_¨gv
[
i
], (u_ch¨ *Ë
¨gv
[i], 
Àn
);

821 
ngx_¨gv
[
i
] = 
NULL
;

825 
ngx_os_ívú⁄
 = 
ívú⁄
;

827  
NGX_OK
;

828 
	}
}

831 
ngx_öt_t


832 
	$ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
)

834 
u_ch¨
 *
p
;

835 
size_t
 
Àn
;

837 i‡(
ngx_¥efix
) {

838 
Àn
 = 
	`ngx_°æí
(
ngx_¥efix
);

839 
p
 = 
ngx_¥efix
;

841 i‡(!
	`ngx_∑th_£∑øt‹
(*
p
)) {

842 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 1);

843 i‡(
p
 =
NULL
) {

844  
NGX_ERROR
;

847 
	`ngx_mem˝y
(
p
, 
ngx_¥efix
, 
Àn
);

848 
p
[
Àn
++] = '/';

851 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

852 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

853 
cy˛e
->
¥efix
.
Àn
 =Üen;

854 
cy˛e
->
¥efix
.
d©a
 = 
p
;

858 #i‚de‡
NGX_PREFIX


860 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
NGX_MAX_PATH
);

861 i‡(
p
 =
NULL
) {

862  
NGX_ERROR
;

865 i‡(
	`ngx_gëcwd
(
p
, 
NGX_MAX_PATH
) == 0) {

866 
	`ngx_log_°dîr
(
ngx_î∫o
, "[emîg]: " 
ngx_gëcwd_n
 " failed");

867  
NGX_ERROR
;

870 
Àn
 = 
	`ngx_°æí
(
p
);

872 
p
[
Àn
++] = '/';

874 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

875 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

876 
cy˛e
->
¥efix
.
Àn
 =Üen;

877 
cy˛e
->
¥efix
.
d©a
 = 
p
;

881 #ifde‡
NGX_CONF_PREFIX


882 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_CONF_PREFIX
);

884 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_PREFIX
);

886 
	`ngx_°r_£t
(&
cy˛e
->
¥efix
, 
NGX_PREFIX
);

891 i‡(
ngx_c⁄f_fûe
) {

892 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_fûe
);

893 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
ngx_c⁄f_fûe
;

896 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_fûe
, 
NGX_CONF_PATH
);

899 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &cy˛e->
c⁄f_fûe
, 0Ë!
NGX_OK
) {

900  
NGX_ERROR
;

903 
p
 = 
cy˛e
->
c⁄f_fûe
.
d©a
 + cy˛e->c⁄f_fûe.
Àn
 - 1;

904 
p
 > 
cy˛e
->
c⁄f_fûe
.
d©a
;

905 
p
--)

907 i‡(
	`ngx_∑th_£∑øt‹
(*
p
)) {

908 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
p
 - 
ngx_cy˛e
->
c⁄f_fûe
.
d©a
 + 1;

909 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
ngx_cy˛e
->
c⁄f_fûe
.data;

914 i‡(
ngx_c⁄f_∑øms
) {

915 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_∑øms
);

916 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
ngx_c⁄f_∑øms
;

919 i‡(
ngx_ã°_c⁄fig
) {

920 
cy˛e
->
log
->
log_Àvñ
 = 
NGX_LOG_INFO
;

923  
NGX_OK
;

924 
	}
}

928 
	$ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

930 
ngx_c‹e_c⁄f_t
 *
ccf
;

932 
ccf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_c‹e_c⁄f_t
));

933 i‡(
ccf
 =
NULL
) {

934  
NULL
;

947 
ccf
->
d´m⁄
 = 
NGX_CONF_UNSET
;

948 
ccf
->
ma°î
 = 
NGX_CONF_UNSET
;

949 
ccf
->
timî_ªsﬁuti⁄
 = 
NGX_CONF_UNSET_MSEC
;

951 
ccf
->
w‹kî_¥o˚s£s
 = 
NGX_CONF_UNSET
;

952 
ccf
->
debug_poöts
 = 
NGX_CONF_UNSET
;

954 
ccf
->
æimô_nofûe
 = 
NGX_CONF_UNSET
;

955 
ccf
->
æimô_c‹e
 = 
NGX_CONF_UNSET
;

956 
ccf
->
æimô_sig≥ndög
 = 
NGX_CONF_UNSET
;

958 
ccf
->
u£r
 = (
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
;

959 
ccf
->
group
 = (
ngx_gid_t
Ë
NGX_CONF_UNSET_UINT
;

961 #i‡(
NGX_THREADS
)

962 
ccf
->
w‹kî_thªads
 = 
NGX_CONF_UNSET
;

963 
ccf
->
thªad_°ack_size
 = 
NGX_CONF_UNSET_SIZE
;

966 i‡(
	`ngx_¨øy_öô
(&
ccf
->
ív
, 
cy˛e
->
poﬁ
, 1, (
ngx_°r_t
))

967 !
NGX_OK
)

969  
NULL
;

972  
ccf
;

973 
	}
}

977 
	$ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

979 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

981 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
d´m⁄
, 1);

982 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
ma°î
, 1);

983 
	`ngx_c⁄f_öô_m£c_vÆue
(
ccf
->
timî_ªsﬁuti⁄
, 0);

985 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_¥o˚s£s
, 1);

986 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
debug_poöts
, 0);

988 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
)

990 i‡(
ccf
->
˝u_afföôy_n


991 && 
ccf
->
˝u_afföôy_n
 != 1

992 && 
ccf
->
˝u_afföôy_n
 !(
ngx_uöt_t
Ëccf->
w‹kî_¥o˚s£s
)

994 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

1002 #i‡(
NGX_THREADS
)

1004 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_thªads
, 0);

1005 
ngx_thªads_n
 = 
ccf
->
w‹kî_thªads
;

1006 
	`ngx_c⁄f_öô_size_vÆue
(
ccf
->
thªad_°ack_size
, 2 * 1024 * 1024);

1011 i‡(
ccf
->
pid
.
Àn
 == 0) {

1012 
	`ngx_°r_£t
(&
ccf
->
pid
, 
NGX_PID_PATH
);

1015 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
pid
, 0Ë!
NGX_OK
) {

1016  
NGX_CONF_ERROR
;

1019 
ccf
->
ﬁdpid
.
Àn
 = ccf->
pid
.À¿+ (
NGX_OLDPID_EXT
);

1021 
ccf
->
ﬁdpid
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, ccf->ﬁdpid.
Àn
);

1022 i‡(
ccf
->
ﬁdpid
.
d©a
 =
NULL
) {

1023  
NGX_CONF_ERROR
;

1026 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, ccf->pid.
Àn
),

1027 
NGX_OLDPID_EXT
, (NGX_OLDPID_EXT));

1030 #i‡!(
NGX_WIN32
)

1032 i‡(
ccf
->
u£r
 =(
uid_t
Ë
NGX_CONF_UNSET_UINT
 && 
	`gëeuid
() == 0) {

1033 
group
 *
gΩ
;

1034 
∑sswd
 *
pwd
;

1036 
	`ngx_£t_î∫o
(0);

1037 
pwd
 = 
	`gëpw«m
(
NGX_USER
);

1038 i‡(
pwd
 =
NULL
) {

1039 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1040 "gëpw«m(\"" 
NGX_USER
 "\") failed");

1041  
NGX_CONF_ERROR
;

1044 
ccf
->
u£∫ame
 = 
NGX_USER
;

1045 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1047 
	`ngx_£t_î∫o
(0);

1048 
gΩ
 = 
	`gëg∫am
(
NGX_GROUP
);

1049 i‡(
gΩ
 =
NULL
) {

1050 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1051 "gëg∫am(\"" 
NGX_GROUP
 "\") failed");

1052  
NGX_CONF_ERROR
;

1055 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1059 i‡(
ccf
->
lock_fûe
.
Àn
 == 0) {

1060 
	`ngx_°r_£t
(&
ccf
->
lock_fûe
, 
NGX_LOCK_PATH
);

1063 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
lock_fûe
, 0Ë!
NGX_OK
) {

1064  
NGX_CONF_ERROR
;

1068 
ngx_°r_t
 
lock_fûe
;

1070 
lock_fûe
 = 
cy˛e
->
ﬁd_cy˛e
->lock_file;

1072 i‡(
lock_fûe
.
Àn
) {

1073 
lock_fûe
.
Àn
--;

1075 i‡(
ccf
->
lock_fûe
.
Àn
 !=Üock_file.len

1076 || 
	`ngx_°∫cmp
(
ccf
->
lock_fûe
.
d©a
,Üock_fûe.d©a,Üock_fûe.
Àn
)

1079 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1083 
cy˛e
->
lock_fûe
.
Àn
 =Üock_file.len + 1;

1084 
lock_fûe
.
Àn
 += (".accept");

1086 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_p°rdup
(cy˛e->
poﬁ
, &lock_file);

1087 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1088  
NGX_CONF_ERROR
;

1092 
cy˛e
->
lock_fûe
.
Àn
 = 
ccf
->lock_file.len + 1;

1093 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_≤Æloc
(cy˛e->
poﬁ
,

1094 
ccf
->
lock_fûe
.
Àn
 + (".accept"));

1095 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1096  
NGX_CONF_ERROR
;

1099 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
cy˛e
->
lock_fûe
.
d©a
, 
ccf
->lock_file.data,

1100 
ccf
->
lock_fûe
.
Àn
),

1107  
NGX_CONF_OK
;

1108 
	}
}

1112 
	$ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1114 #i‡(
NGX_WIN32
)

1116 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1119  
NGX_CONF_OK
;

1123 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1125 *
group
;

1126 
∑sswd
 *
pwd
;

1127 
group
 *
gΩ
;

1128 
ngx_°r_t
 *
vÆue
;

1130 i‡(
ccf
->
u£r
 !(
uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1134 i‡(
	`gëeuid
() != 0) {

1135 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1139  
NGX_CONF_OK
;

1142 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1144 
ccf
->
u£∫ame
 = (*Ë
vÆue
[1].
d©a
;

1146 
	`ngx_£t_î∫o
(0);

1147 
pwd
 = 
	`gëpw«m
((c⁄° *Ë
vÆue
[1].
d©a
);

1148 i‡(
pwd
 =
NULL
) {

1149 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1150 "gëpw«m(\"%s\"ËÁûed", 
vÆue
[1].
d©a
);

1151  
NGX_CONF_ERROR
;

1154 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1156 
group
 = (*Ë((
cf
->
¨gs
->
√…s
 =2Ë? 
vÆue
[1].
d©a
 : value[2].data);

1158 
	`ngx_£t_î∫o
(0);

1159 
gΩ
 = 
	`gëg∫am
(
group
);

1160 i‡(
gΩ
 =
NULL
) {

1161 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1162 "gëg∫am(\"%s\"ËÁûed", 
group
);

1163  
NGX_CONF_ERROR
;

1166 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1168  
NGX_CONF_OK
;

1171 
	}
}

1175 
	$ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1177 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1179 
ngx_°r_t
 *
vÆue
, *
v¨
;

1180 
ngx_uöt_t
 
i
;

1182 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

1183 i‡(
v¨
 =
NULL
) {

1184  
NGX_CONF_ERROR
;

1187 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1188 *
v¨
 = 
vÆue
[1];

1190 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

1192 i‡(
vÆue
[1].
d©a
[
i
] == '=') {

1194 
v¨
->
Àn
 = 
i
;

1196  
NGX_CONF_OK
;

1200  
NGX_CONF_OK
;

1201 
	}
}

1205 
	$ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1207 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1209 
ngx_°r_t
 *
vÆue
;

1210 
ngx_uöt_t
 
n
, 
möus
;

1212 i‡(
ccf
->
¥i‹ôy
 != 0) {

1216 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1218 i‡(
vÆue
[1].
d©a
[0] == '-') {

1219 
n
 = 1;

1220 
möus
 = 1;

1222 } i‡(
vÆue
[1].
d©a
[0] == '+') {

1223 
n
 = 1;

1224 
möus
 = 0;

1227 
n
 = 0;

1228 
möus
 = 0;

1231 
ccf
->
¥i‹ôy
 = 
	`ngx_©oi
(&
vÆue
[1].
d©a
[
n
], vÆue[1].
Àn
 -Ç);

1232 i‡(
ccf
->
¥i‹ôy
 =
NGX_ERROR
) {

1236 i‡(
möus
) {

1237 
ccf
->
¥i‹ôy
 = -ccf->priority;

1240  
NGX_CONF_OK
;

1241 
	}
}

1245 
	$ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1247 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
)

1248 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1250 
u_ch¨
 
ch
;

1251 
u_l⁄g
 *
mask
;

1252 
ngx_°r_t
 *
vÆue
;

1253 
ngx_uöt_t
 
i
, 
n
;

1255 i‡(
ccf
->
˝u_afföôy
) {

1259 
mask
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (cf->
¨gs
->
√…s
 - 1) * ());

1260 i‡(
mask
 =
NULL
) {

1261  
NGX_CONF_ERROR
;

1264 
ccf
->
˝u_afföôy_n
 = 
cf
->
¨gs
->
√…s
 - 1;

1265 
ccf
->
˝u_afföôy
 = 
mask
;

1267 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1269 
n
 = 1;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

1271 i‡(
vÆue
[
n
].
Àn
 > 32) {

1272 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1274  
NGX_CONF_ERROR
;

1277 
mask
[
n
 - 1] = 0;

1279 
i
 = 0; i < 
vÆue
[
n
].
Àn
; i++) {

1281 
ch
 = 
vÆue
[
n
].
d©a
[
i
];

1283 i‡(
ch
 == ' ') {

1287 
mask
[
n
 - 1] <<= 1;

1289 i‡(
ch
 == '0') {

1293 i‡(
ch
 == '1') {

1294 
mask
[
n
 - 1] |= 1;

1298 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1300 
ch
);

1301  
NGX_CONF_ERROR
;

1307 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1312  
NGX_CONF_OK
;

1313 
	}
}

1316 
u_l⁄g


1317 
	$ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
)

1319 
ngx_c‹e_c⁄f_t
 *
ccf
;

1321 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

1322 
ngx_c‹e_moduÀ
);

1324 i‡(
ccf
->
˝u_afföôy
 =
NULL
) {

1328 i‡(
ccf
->
˝u_afföôy_n
 > 
n
) {

1329  
ccf
->
˝u_afföôy
[
n
];

1332  
ccf
->
˝u_afföôy
[ccf->
˝u_afföôy_n
 - 1];

1333 
	}
}

	@src/core/nginx.h

8 #i‚de‡
_NGINX_H_INCLUDED_


9 
	#_NGINX_H_INCLUDED_


	)

12 
	#ngöx_vîsi⁄
 1000015

	)

13 
	#NGINX_VERSION
 "1.0.15"

	)

14 
	#NGINX_VER
 "ngöx/" 
NGINX_VERSION


	)

16 
	#NGINX_VAR
 "NGINX"

	)

17 
	#NGX_OLDPID_EXT
 ".ﬁdbö"

	)

	@src/core/ngx_array.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_¨øy_t
 *

13 
	$ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_¨øy_t
 *
a
;

17 
a
 = 
	`ngx_∑Œoc
(
p
, (
ngx_¨øy_t
));

18 i‡(
a
 =
NULL
) {

19  
NULL
;

22 
a
->
ñts
 = 
	`ngx_∑Œoc
(
p
, 
n
 * 
size
);

23 i‡(
a
->
ñts
 =
NULL
) {

24  
NULL
;

27 
a
->
√…s
 = 0;

28 
a
->
size
 = size;

29 
a
->
«Œoc
 = 
n
;

30 
a
->
poﬁ
 = 
p
;

32  
a
;

33 
	}
}

37 
	$ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
)

39 
ngx_poﬁ_t
 *
p
;

41 
p
 = 
a
->
poﬁ
;

43 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°
) {

44 
p
->
d
.
œ°
 -
a
->
size
 *á->
«Œoc
;

47 i‡((
u_ch¨
 *Ë
a
 + (
ngx_¨øy_t
Ë=
p
->
d
.
œ°
) {

48 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë
a
;

50 
	}
}

54 
	$ngx_¨øy_push
(
ngx_¨øy_t
 *
a
)

56 *
ñt
, *
√w
;

57 
size_t
 
size
;

58 
ngx_poﬁ_t
 *
p
;

60 i‡(
a
->
√…s
 =a->
«Œoc
) {

64 
size
 = 
a
->sizê*á->
«Œoc
;

66 
p
 = 
a
->
poﬁ
;

68 i‡((
u_ch¨
 *Ë
a
->
ñts
 + 
size
 =
p
->
d
.
œ°


69 && 
p
->
d
.
œ°
 + 
a
->
size
 <p->d.
íd
)

76 
p
->
d
.
œ°
 +
a
->
size
;

77 
a
->
«Œoc
++;

82 
√w
 = 
	`ngx_∑Œoc
(
p
, 2 * 
size
);

83 i‡(
√w
 =
NULL
) {

84  
NULL
;

87 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
, 
size
);

88 
a
->
ñts
 = 
√w
;

89 
a
->
«Œoc
 *= 2;

93 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

94 
a
->
√…s
++;

96  
ñt
;

97 
	}
}

101 
	$ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
)

103 *
ñt
, *
√w
;

104 
size_t
 
size
;

105 
ngx_uöt_t
 
«Œoc
;

106 
ngx_poﬁ_t
 *
p
;

108 
size
 = 
n
 * 
a
->size;

110 i‡(
a
->
√…s
 + 
n
 >á->
«Œoc
) {

114 
p
 = 
a
->
poﬁ
;

116 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°


117 && 
p
->
d
.
œ°
 + 
size
 <p->d.
íd
)

124 
p
->
d
.
œ°
 +
size
;

125 
a
->
«Œoc
 +
n
;

130 
«Œoc
 = 2 * ((
n
 >
a
->nalloc) ?Ç :á->nalloc);

132 
√w
 = 
	`ngx_∑Œoc
(
p
, 
«Œoc
 * 
a
->
size
);

133 i‡(
√w
 =
NULL
) {

134  
NULL
;

137 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
,á->
√…s
 *á->
size
);

138 
a
->
ñts
 = 
√w
;

139 
a
->
«Œoc
 =Çalloc;

143 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

144 
a
->
√…s
 +
n
;

146  
ñt
;

147 
	}
}

	@src/core/ngx_array.h

8 #i‚de‡
_NGX_ARRAY_H_INCLUDED_


9 
	#_NGX_ARRAY_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_¨øy_s
 {

17 *
	mñts
;

18 
ngx_uöt_t
 
	m√…s
;

19 
size_t
 
	msize
;

20 
ngx_uöt_t
 
	m«Œoc
;

21 
ngx_poﬁ_t
 *
	mpoﬁ
;

25 
ngx_¨øy_t
 *
ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

26 
ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
);

27 *
ngx_¨øy_push
(
ngx_¨øy_t
 *
a
);

28 *
ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
);

31 
ngx_ölöe
 
ngx_öt_t


32 
	$ngx_¨øy_öô
(
ngx_¨øy_t
 *
¨øy
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
¨øy
->
√…s
 = 0;

40 
¨øy
->
size
 = size;

41 
¨øy
->
«Œoc
 = 
n
;

42 
¨øy
->
poﬁ
 =Öool;

44 
¨øy
->
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

45 i‡(
¨øy
->
ñts
 =
NULL
) {

46  
NGX_ERROR
;

49  
NGX_OK
;

50 
	}
}

	@src/core/ngx_buf.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_buf_t
 *

13 
	$ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

15 
ngx_buf_t
 *
b
;

17 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

18 i‡(
b
 =
NULL
) {

19  
NULL
;

22 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

23 i‡(
b
->
°¨t
 =
NULL
) {

24  
NULL
;

38 
b
->
pos
 = b->
°¨t
;

39 
b
->
œ°
 = b->
°¨t
;

40 
b
->
íd
 = b->
œ°
 + 
size
;

41 
b
->
ãmp‹¨y
 = 1;

43  
b
;

44 
	}
}

47 
ngx_chaö_t
 *

48 
	$ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
)

50 
ngx_chaö_t
 *
˛
;

52 
˛
 = 
poﬁ
->
chaö
;

54 i‡(
˛
) {

55 
poﬁ
->
chaö
 = 
˛
->
√xt
;

56  
˛
;

59 
˛
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_chaö_t
));

60 i‡(
˛
 =
NULL
) {

61  
NULL
;

64  
˛
;

65 
	}
}

68 
ngx_chaö_t
 *

69 
	$ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
)

71 
u_ch¨
 *
p
;

72 
ngx_öt_t
 
i
;

73 
ngx_buf_t
 *
b
;

74 
ngx_chaö_t
 *
chaö
, *
˛
, **
Œ
;

76 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
bufs
->
num
 * bufs->
size
);

77 i‡(
p
 =
NULL
) {

78  
NULL
;

81 
Œ
 = &
chaö
;

83 
i
 = 0; i < 
bufs
->
num
; i++) {

85 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

86 i‡(
b
 =
NULL
) {

87  
NULL
;

102 
b
->
pos
 = 
p
;

103 
b
->
œ°
 = 
p
;

104 
b
->
ãmp‹¨y
 = 1;

106 
b
->
°¨t
 = 
p
;

107 
p
 +
bufs
->
size
;

108 
b
->
íd
 = 
p
;

110 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

111 i‡(
˛
 =
NULL
) {

112  
NULL
;

115 
˛
->
buf
 = 
b
;

116 *
Œ
 = 
˛
;

117 
Œ
 = &
˛
->
√xt
;

120 *
Œ
 = 
NULL
;

122  
chaö
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
)

129 
ngx_chaö_t
 *
˛
, **
Œ
;

131 
Œ
 = 
chaö
;

133 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

134 
Œ
 = &
˛
->
√xt
;

137 
ö
) {

138 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

139 i‡(
˛
 =
NULL
) {

140  
NGX_ERROR
;

143 
˛
->
buf
 = 
ö
->buf;

144 *
Œ
 = 
˛
;

145 
Œ
 = &
˛
->
√xt
;

146 
ö
 = in->
√xt
;

149 *
Œ
 = 
NULL
;

151  
NGX_OK
;

152 
	}
}

155 
ngx_chaö_t
 *

156 
	$ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
)

158 
ngx_chaö_t
 *
˛
;

160 i‡(*
‰ì
) {

161 
˛
 = *
‰ì
;

162 *
‰ì
 = 
˛
->
√xt
;

163 
˛
->
√xt
 = 
NULL
;

164  
˛
;

167 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
);

168 i‡(
˛
 =
NULL
) {

169  
NULL
;

172 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
p
);

173 i‡(
˛
->
buf
 =
NULL
) {

174  
NULL
;

177 
˛
->
√xt
 = 
NULL
;

179  
˛
;

180 
	}
}

184 
	$ngx_chaö_upd©e_chaös
(
ngx_chaö_t
 **
‰ì
,Çgx_chaö_à**
busy
,

185 
ngx_chaö_t
 **
out
, 
ngx_buf_èg_t
 
èg
)

187 
ngx_chaö_t
 *
˛
;

189 i‡(*
busy
 =
NULL
) {

190 *
busy
 = *
out
;

193 
˛
 = *
busy
; cl->
√xt
; cl = cl->next) { }

195 
˛
->
√xt
 = *
out
;

198 *
out
 = 
NULL
;

200 *
busy
) {

201 i‡(
	`ngx_buf_size
((*
busy
)->
buf
) != 0) {

205 i‡((*
busy
)->
buf
->
èg
 !=Åag) {

206 *
busy
 = (*busy)->
√xt
;

210 (*
busy
)->
buf
->
pos
 = (*busy)->buf->
°¨t
;

211 (*
busy
)->
buf
->
œ°
 = (*busy)->buf->
°¨t
;

213 
˛
 = *
busy
;

214 *
busy
 = 
˛
->
√xt
;

215 
˛
->
√xt
 = *
‰ì
;

216 *
‰ì
 = 
˛
;

218 
	}
}

	@src/core/ngx_buf.h

8 #i‚de‡
_NGX_BUF_H_INCLUDED_


9 
	#_NGX_BUF_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 * 
	tngx_buf_èg_t
;

18 
ngx_buf_s
 
	tngx_buf_t
;

20 
	sngx_buf_s
 {

21 
u_ch¨
 *
	mpos
;

22 
u_ch¨
 *
	mœ°
;

23 
off_t
 
	mfûe_pos
;

24 
off_t
 
	mfûe_œ°
;

26 
u_ch¨
 *
	m°¨t
;

27 
u_ch¨
 *
	míd
;

28 
ngx_buf_èg_t
 
	mèg
;

29 
ngx_fûe_t
 *
	mfûe
;

30 
ngx_buf_t
 *
	mshadow
;

34 
	mãmp‹¨y
:1;

40 
	mmem‹y
:1;

43 
	mmm≠
:1;

45 
	mªcy˛ed
:1;

46 
	mö_fûe
:1;

47 
	mÊush
:1;

48 
	msync
:1;

49 
	mœ°_buf
:1;

50 
	mœ°_ö_chaö
:1;

52 
	mœ°_shadow
:1;

53 
	mãmp_fûe
:1;

55  
	mnum
;

59 
	sngx_chaö_s
 {

60 
ngx_buf_t
 *
	mbuf
;

61 
ngx_chaö_t
 *
	m√xt
;

66 
ngx_öt_t
 
	mnum
;

67 
size_t
 
	msize
;

68 } 
	tngx_bufs_t
;

71 
ngx_ouçut_chaö_˘x_s
 
	tngx_ouçut_chaö_˘x_t
;

73 
	$ngx_öt_t
 (*
	tngx_ouçut_chaö_fûãr_±
)(*
	t˘x
, 
	tngx_chaö_t
 *
	tö
);

75 #i‡(
NGX_HAVE_FILE_AIO
)

76 (*
	tngx_ouçut_chaö_aio_±
)(
	tngx_ouçut_chaö_˘x_t
 *
	t˘x
,

77 
	tngx_fûe_t
 *
	tfûe
);

80 
	sngx_ouçut_chaö_˘x_s
 {

81 
ngx_buf_t
 *
buf
;

82 
ngx_chaö_t
 *
ö
;

83 
ngx_chaö_t
 *
‰ì
;

84 
ngx_chaö_t
 *
busy
;

86 
£ndfûe
:1;

87 
dúe˘io
:1;

88 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

89 
u«lig√d
:1;

91 
√ed_ö_mem‹y
:1;

92 
√ed_ö_ãmp
:1;

93 #i‡(
NGX_HAVE_FILE_AIO
)

94 
aio
:1;

96 
ngx_ouçut_chaö_aio_±
 
aio_h™dÀr
;

99 
off_t
 
Æignmít
;

101 
ngx_poﬁ_t
 *
poﬁ
;

102 
ngx_öt_t
 
Æloˇãd
;

103 
ngx_bufs_t
 
bufs
;

104 
ngx_buf_èg_t
 
èg
;

106 
ngx_ouçut_chaö_fûãr_±
 
ouçut_fûãr
;

107 *
fûãr_˘x
;

112 
ngx_chaö_t
 *
out
;

113 
ngx_chaö_t
 **
œ°
;

114 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

115 
ngx_poﬁ_t
 *
poﬁ
;

116 
off_t
 
limô
;

117 } 
	tngx_chaö_wrôî_˘x_t
;

120 
	#NGX_CHAIN_ERROR
 (
ngx_chaö_t
 *Ë
NGX_ERROR


	)

123 
	#ngx_buf_ö_mem‹y
(
b
Ë(b->
ãmp‹¨y
 || b->
mem‹y
 || b->
mm≠
)

	)

124 
	#ngx_buf_ö_mem‹y_⁄ly
(
b
Ë(
	`ngx_buf_ö_mem‹y
(bË&& !b->
ö_fûe
)

	)

126 
	#ngx_buf_•ecül
(
b
) \

127 ((
b
->
Êush
 || b->
œ°_buf
 || b->
sync
) \

128 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
)

	)

130 
	#ngx_buf_sync_⁄ly
(
b
) \

131 (
b
->
sync
 \

132 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
 && !b->
Êush
 && !b->
œ°_buf
)

	)

134 
	#ngx_buf_size
(
b
) \

135 (
	`ngx_buf_ö_mem‹y
(
b
Ë? (
off_t
Ë(b->
œ°
 - b->
pos
): \

136 (
b
->
fûe_œ°
 - b->
fûe_pos
))

	)

138 
ngx_buf_t
 *
	`ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

139 
ngx_chaö_t
 *
	`ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
);

142 
	#ngx_Æloc_buf
(
poﬁ
Ë
	`ngx_∑Œoc
’oﬁ, (
ngx_buf_t
))

	)

143 
	#ngx_ˇŒoc_buf
(
poﬁ
Ë
	`ngx_pˇŒoc
’oﬁ, (
ngx_buf_t
))

	)

145 
ngx_chaö_t
 *
	`ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
);

146 
	#ngx_‰ì_chaö
(
poﬁ
, 
˛
) \

147 
˛
->
√xt
 = 
poﬁ
->
chaö
; \

148 
poﬁ
->
chaö
 = 
˛


	)

152 
ngx_öt_t
 
	`ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

153 
ngx_öt_t
 
	`ngx_chaö_wrôî
(*
˘x
, 
ngx_chaö_t
 *
ö
);

155 
ngx_öt_t
 
	`ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

156 
ngx_chaö_t
 *
ö
);

157 
ngx_chaö_t
 *
	`ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
,Çgx_chaö_à**
‰ì
);

158 
	`ngx_chaö_upd©e_chaös
(
ngx_chaö_t
 **
‰ì
,Çgx_chaö_à**
busy
,

159 
ngx_chaö_t
 **
out
, 
ngx_buf_èg_t
 
èg
);

	@src/core/ngx_conf_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

11 
	#NGX_CONF_BUFFER
 4096

	)

13 
ngx_öt_t
 
ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
,Çgx_öt_à
œ°
);

14 
ngx_öt_t
 
ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

16 
ngx_öt_t
 
ngx_c⁄f_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
);

17 
ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
);

20 
ngx_comm™d_t
 
	gngx_c⁄f_comm™ds
[] = {

22 { 
ngx_°rög
("include"),

23 
NGX_ANY_CONF
|
NGX_CONF_TAKE1
,

24 
ngx_c⁄f_ö˛ude
,

27 
NULL
 },

29 
ngx_nuŒ_comm™d


33 
ngx_moduÀ_t
 
	gngx_c⁄f_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 
NULL
,

36 
ngx_c⁄f_comm™ds
,

37 
NGX_CONF_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
ngx_c⁄f_Êush_fûes
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


51 
ngx_uöt_t
 
	g¨gumít_numbî
[] = {

52 
NGX_CONF_NOARGS
,

53 
NGX_CONF_TAKE1
,

54 
NGX_CONF_TAKE2
,

55 
NGX_CONF_TAKE3
,

56 
NGX_CONF_TAKE4
,

57 
NGX_CONF_TAKE5
,

58 
NGX_CONF_TAKE6
,

59 
NGX_CONF_TAKE7


64 
	$ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
)

66 *
rv
;

67 
ngx_°r_t
 *
∑øm
;

68 
ngx_buf_t
 
b
;

69 
ngx_c⁄f_fûe_t
 
c⁄f_fûe
;

71 
∑øm
 = &
cf
->
cy˛e
->
c⁄f_∑øm
;

73 i‡(
∑øm
->
Àn
 == 0) {

74  
NGX_CONF_OK
;

77 
	`ngx_memzîo
(&
c⁄f_fûe
, (
ngx_c⁄f_fûe_t
));

79 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

81 
b
.
°¨t
 = 
∑øm
->
d©a
;

82 
b
.
pos
 = 
∑øm
->
d©a
;

83 
b
.
œ°
 = 
∑øm
->
d©a
 +Ö¨am->
Àn
;

84 
b
.
íd
 = b.
œ°
;

85 
b
.
ãmp‹¨y
 = 1;

87 
c⁄f_fûe
.
fûe
.
fd
 = 
NGX_INVALID_FILE
;

88 
c⁄f_fûe
.
fûe
.
«me
.
d©a
 = 
NULL
;

89 
c⁄f_fûe
.
löe
 = 0;

91 
cf
->
c⁄f_fûe
 = &conf_file;

92 
cf
->
c⁄f_fûe
->
buf„r
 = &
b
;

94 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

96 
cf
->
c⁄f_fûe
 = 
NULL
;

98  
rv
;

99 
	}
}

103 
	$ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
)

105 *
rv
;

106 
ngx_fd_t
 
fd
;

107 
ngx_öt_t
 
rc
;

108 
ngx_buf_t
 
buf
;

109 
ngx_c⁄f_fûe_t
 *
¥ev
, 
c⁄f_fûe
;

111 
∑r£_fûe
 = 0,

112 
∑r£_block
,

113 
∑r£_∑øm


114 } 
ty≥
;

116 #i‡(
NGX_SUPPRESS_WARN
)

117 
fd
 = 
NGX_INVALID_FILE
;

118 
¥ev
 = 
NULL
;

121 i‡(
fûíame
) {

125 
fd
 = 
	`ngx_›í_fûe
(
fûíame
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

126 i‡(
fd
 =
NGX_INVALID_FILE
) {

127 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

128 
ngx_›í_fûe_n
 " \"%s\" failed",

129 
fûíame
->
d©a
);

130  
NGX_CONF_ERROR
;

133 
¥ev
 = 
cf
->
c⁄f_fûe
;

135 
cf
->
c⁄f_fûe
 = &conf_file;

137 i‡(
	`ngx_fd_öfo
(
fd
, &
cf
->
c⁄f_fûe
->
fûe
.
öfo
) == -1) {

138 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 
ngx_î∫o
,

139 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûíame
->
d©a
);

142 
cf
->
c⁄f_fûe
->
buf„r
 = &
buf
;

144 
buf
.
°¨t
 = 
	`ngx_Æloc
(
NGX_CONF_BUFFER
, 
cf
->
log
);

145 i‡(
buf
.
°¨t
 =
NULL
) {

146 
Áûed
;

149 
buf
.
pos
 = buf.
°¨t
;

150 
buf
.
œ°
 = buf.
°¨t
;

151 
buf
.
íd
 = buf.
œ°
 + 
NGX_CONF_BUFFER
;

152 
buf
.
ãmp‹¨y
 = 1;

154 
cf
->
c⁄f_fûe
->
fûe
.
fd
 = fd;

155 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
Àn
 = 
fûíame
->len;

156 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
 = 
fûíame
->data;

157 
cf
->
c⁄f_fûe
->
fûe
.
off£t
 = 0;

158 
cf
->
c⁄f_fûe
->
fûe
.
log
 = cf->log;

159 
cf
->
c⁄f_fûe
->
löe
 = 1;

161 
ty≥
 = 
∑r£_fûe
;

163 } i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

165 
ty≥
 = 
∑r£_block
;

168 
ty≥
 = 
∑r£_∑øm
;

173 
rc
 = 
	`ngx_c⁄f_ªad_tokí
(
cf
);

185 i‡(
rc
 =
NGX_ERROR
) {

186 
d⁄e
;

189 i‡(
rc
 =
NGX_CONF_BLOCK_DONE
) {

191 i‡(
ty≥
 !
∑r£_block
) {

192 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"}\"");

193 
Áûed
;

196 
d⁄e
;

199 i‡(
rc
 =
NGX_CONF_FILE_DONE
) {

201 i‡(
ty≥
 =
∑r£_block
) {

202 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

204 
Áûed
;

207 
d⁄e
;

210 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

212 i‡(
ty≥
 =
∑r£_∑øm
) {

213 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

216 
Áûed
;

222 i‡(
cf
->
h™dÀr
) {

229 
rv
 = (*
cf
->
h™dÀr
)(cf, 
NULL
, cf->
h™dÀr_c⁄f
);

230 i‡(
rv
 =
NGX_CONF_OK
) {

234 i‡(
rv
 =
NGX_CONF_ERROR
) {

235 
Áûed
;

238 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, 
rv
);

240 
Áûed
;

244 
rc
 = 
	`ngx_c⁄f_h™dÀr
(
cf
,Ñc);

246 i‡(
rc
 =
NGX_ERROR
) {

247 
Áûed
;

251 
Áûed
:

253 
rc
 = 
NGX_ERROR
;

255 
d⁄e
:

257 i‡(
fûíame
) {

258 i‡(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
) {

259 
	`ngx_‰ì
(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
);

262 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

263 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

264 
ngx_˛o£_fûe_n
 " %s failed",

265 
fûíame
->
d©a
);

266  
NGX_CONF_ERROR
;

269 
cf
->
c⁄f_fûe
 = 
¥ev
;

272 i‡(
rc
 =
NGX_ERROR
) {

273  
NGX_CONF_ERROR
;

276  
NGX_CONF_OK
;

277 
	}
}

280 
ngx_öt_t


281 
	$ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
, 
ngx_öt_t
 
œ°
)

283 *
rv
;

284 *
c⁄f
, **
c⁄Â
;

285 
ngx_uöt_t
 
i
, 
mu…i
;

286 
ngx_°r_t
 *
«me
;

287 
ngx_comm™d_t
 *
cmd
;

289 
«me
 = 
cf
->
¨gs
->
ñts
;

291 
mu…i
 = 0;

293 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

297 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CONF_MODULE


298 && 
ngx_moduÀs
[
i
]->
ty≥
 !
cf
->
moduÀ_ty≥
)

303 
cmd
 = 
ngx_moduÀs
[
i
]->
comm™ds
;

304 i‡(
cmd
 =
NULL
) {

308  ; 
cmd
->
«me
.
Àn
; cmd++) {

310 i‡(
«me
->
Àn
 !
cmd
->name.len) {

314 i‡(
	`ngx_°rcmp
(
«me
->
d©a
, 
cmd
->name.data) != 0) {

321 i‡(!(
cmd
->
ty≥
 & 
cf
->
cmd_ty≥
)) {

322 i‡(
cmd
->
ty≥
 & 
NGX_CONF_MULTI
) {

323 
mu…i
 = 1;

327 
nŸ_Ælowed
;

330 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_OK
) {

331 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

333 
«me
->
d©a
);

334  
NGX_ERROR
;

337 i‡((
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_CONF_BLOCK_START
) {

338 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

340 
«me
->
d©a
);

341  
NGX_ERROR
;

346 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_ANY
)) {

348 i‡(
cmd
->
ty≥
 & 
NGX_CONF_FLAG
) {

350 i‡(
cf
->
¨gs
->
√…s
 != 2) {

351 
övÆid
;

354 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_1MORE
) {

356 i‡(
cf
->
¨gs
->
√…s
 < 2) {

357 
övÆid
;

360 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_2MORE
) {

362 i‡(
cf
->
¨gs
->
√…s
 < 3) {

363 
övÆid
;

366 } i‡(
cf
->
¨gs
->
√…s
 > 
NGX_CONF_MAX_ARGS
) {

368 
övÆid
;

370 } i‡(!(
cmd
->
ty≥
 & 
¨gumít_numbî
[
cf
->
¨gs
->
√…s
 - 1]))

372 
övÆid
;

378 
c⁄f
 = 
NULL
;

380 i‡(
cmd
->
ty≥
 & 
NGX_DIRECT_CONF
) {

381 
c⁄f
 = ((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
];

383 } i‡(
cmd
->
ty≥
 & 
NGX_MAIN_CONF
) {

384 
c⁄f
 = &(((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
]);

386 } i‡(
cf
->
˘x
) {

387 
c⁄Â
 = *(**Ë((*Ë
cf
->
˘x
 + 
cmd
->
c⁄f
);

389 i‡(
c⁄Â
) {

390 
c⁄f
 = 
c⁄Â
[
ngx_moduÀs
[
i
]->
˘x_ödex
];

394 
rv
 = 
cmd
->
	`£t
(
cf
, cmd, 
c⁄f
);

396 i‡(
rv
 =
NGX_CONF_OK
) {

397  
NGX_OK
;

400 i‡(
rv
 =
NGX_CONF_ERROR
) {

401  
NGX_ERROR
;

404 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

405 "\"%s\" dúe˘ivê%s", 
«me
->
d©a
, 
rv
);

407  
NGX_ERROR
;

411 i‡(
mu…i
 == 0) {

412 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

413 "unknow¿dúe˘ivê\"%s\"", 
«me
->
d©a
);

415  
NGX_ERROR
;

418 
nŸ_Ælowed
:

420 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

421 "\"%s\" dúe˘ivêi†nŸáŒowed hîe", 
«me
->
d©a
);

422  
NGX_ERROR
;

424 
övÆid
:

426 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

428 
«me
->
d©a
);

430  
NGX_ERROR
;

431 
	}
}

434 
ngx_öt_t


435 
	$ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
)

437 
u_ch¨
 *
°¨t
, 
ch
, *
§c
, *
d°
;

438 
off_t
 
fûe_size
;

439 
size_t
 
Àn
;

440 
ssize_t
 
n
, 
size
;

441 
ngx_uöt_t
 
found
, 
√ed_•a˚
, 
œ°_•a˚
, 
sh¨p_commít
, 
v¨übÀ
;

442 
ngx_uöt_t
 
quŸed
, 
s_quŸed
, 
d_quŸed
, 
°¨t_löe
;

443 
ngx_°r_t
 *
w‹d
;

444 
ngx_buf_t
 *
b
;

446 
found
 = 0;

447 
√ed_•a˚
 = 0;

448 
œ°_•a˚
 = 1;

449 
sh¨p_commít
 = 0;

450 
v¨übÀ
 = 0;

451 
quŸed
 = 0;

452 
s_quŸed
 = 0;

453 
d_quŸed
 = 0;

455 
cf
->
¨gs
->
√…s
 = 0;

456 
b
 = 
cf
->
c⁄f_fûe
->
buf„r
;

457 
°¨t
 = 
b
->
pos
;

458 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

460 
fûe_size
 = 
	`ngx_fûe_size
(&
cf
->
c⁄f_fûe
->
fûe
.
öfo
);

464 i‡(
b
->
pos
 >b->
œ°
) {

466 i‡(
cf
->
c⁄f_fûe
->
fûe
.
off£t
 >
fûe_size
) {

468 i‡(
cf
->
¨gs
->
√…s
 > 0) {

470 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

471 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

474  
NGX_ERROR
;

477 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

480  
NGX_ERROR
;

483  
NGX_CONF_FILE_DONE
;

486 
Àn
 = 
b
->
pos
 - 
°¨t
;

488 i‡(
Àn
 =
NGX_CONF_BUFFER
) {

489 
cf
->
c⁄f_fûe
->
löe
 = 
°¨t_löe
;

491 i‡(
d_quŸed
) {

492 
ch
 = '"';

494 } i‡(
s_quŸed
) {

495 
ch
 = '\'';

498 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

500 10, 
°¨t
);

501  
NGX_ERROR
;

504 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

506 "missögÅîmö©ög \"%c\" ch¨a˘î", 
ch
);

507  
NGX_ERROR
;

510 i‡(
Àn
) {

511 
	`ngx_memmove
(
b
->
°¨t
, sèπ, 
Àn
);

514 
size
 = (
ssize_t
Ë(
fûe_size
 - 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

516 i‡(
size
 > 
b
->
íd
 - (b->
°¨t
 + 
Àn
)) {

517 
size
 = 
b
->
íd
 - (b->
°¨t
 + 
Àn
);

520 
n
 = 
	`ngx_ªad_fûe
(&
cf
->
c⁄f_fûe
->
fûe
, 
b
->
°¨t
 + 
Àn
, 
size
,

521 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

523 i‡(
n
 =
NGX_ERROR
) {

524  
NGX_ERROR
;

527 i‡(
n
 !
size
) {

528 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

529 
ngx_ªad_fûe_n
 "Ñeturned "

531 
n
, 
size
);

532  
NGX_ERROR
;

535 
b
->
pos
 = b->
°¨t
 + 
Àn
;

536 
b
->
œ°
 = b->
pos
 + 
n
;

537 
°¨t
 = 
b
->start;

540 
ch
 = *
b
->
pos
++;

542 i‡(
ch
 =
LF
) {

543 
cf
->
c⁄f_fûe
->
löe
++;

545 i‡(
sh¨p_commít
) {

546 
sh¨p_commít
 = 0;

550 i‡(
sh¨p_commít
) {

554 i‡(
quŸed
) {

555 
quŸed
 = 0;

559 i‡(
√ed_•a˚
) {

560 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

561 
œ°_•a˚
 = 1;

562 
√ed_•a˚
 = 0;

566 i‡(
ch
 == ';') {

567  
NGX_OK
;

570 i‡(
ch
 == '{') {

571  
NGX_CONF_BLOCK_START
;

574 i‡(
ch
 == ')') {

575 
œ°_•a˚
 = 1;

576 
√ed_•a˚
 = 0;

579 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

580 "u√x≥˘ed \"%c\"", 
ch
);

581  
NGX_ERROR
;

585 i‡(
œ°_•a˚
) {

586 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

590 
°¨t
 = 
b
->
pos
 - 1;

591 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

593 
ch
) {

597 i‡(
cf
->
¨gs
->
√…s
 == 0) {

598 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

599 "u√x≥˘ed \"%c\"", 
ch
);

600  
NGX_ERROR
;

603 i‡(
ch
 == '{') {

604  
NGX_CONF_BLOCK_START
;

607  
NGX_OK
;

610 i‡(
cf
->
¨gs
->
√…s
 != 0) {

611 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

613  
NGX_ERROR
;

616  
NGX_CONF_BLOCK_DONE
;

619 
sh¨p_commít
 = 1;

623 
quŸed
 = 1;

624 
œ°_•a˚
 = 0;

628 
°¨t
++;

629 
d_quŸed
 = 1;

630 
œ°_•a˚
 = 0;

634 
°¨t
++;

635 
s_quŸed
 = 1;

636 
œ°_•a˚
 = 0;

640 
œ°_•a˚
 = 0;

644 i‡(
ch
 ='{' && 
v¨übÀ
) {

648 
v¨übÀ
 = 0;

650 i‡(
ch
 == '\\') {

651 
quŸed
 = 1;

655 i‡(
ch
 == '$') {

656 
v¨übÀ
 = 1;

660 i‡(
d_quŸed
) {

661 i‡(
ch
 == '"') {

662 
d_quŸed
 = 0;

663 
√ed_•a˚
 = 1;

664 
found
 = 1;

667 } i‡(
s_quŸed
) {

668 i‡(
ch
 == '\'') {

669 
s_quŸed
 = 0;

670 
√ed_•a˚
 = 1;

671 
found
 = 1;

674 } i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF


675 || 
ch
 == ';' || ch == '{')

677 
œ°_•a˚
 = 1;

678 
found
 = 1;

681 i‡(
found
) {

682 
w‹d
 = 
	`ngx_¨øy_push
(
cf
->
¨gs
);

683 i‡(
w‹d
 =
NULL
) {

684  
NGX_ERROR
;

687 
w‹d
->
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
b
->
pos
 - 
°¨t
 + 1);

688 i‡(
w‹d
->
d©a
 =
NULL
) {

689  
NGX_ERROR
;

692 
d°
 = 
w‹d
->
d©a
, 
§c
 = 
°¨t
, 
Àn
 = 0;

693 
§c
 < 
b
->
pos
 - 1;

694 
Àn
++)

696 i‡(*
§c
 == '\\') {

697 
§c
[1]) {

701 
§c
++;

705 *
d°
++ = '\t';

706 
§c
 += 2;

710 *
d°
++ = '\r';

711 
§c
 += 2;

715 *
d°
++ = '\n';

716 
§c
 += 2;

721 *
d°
++ = *
§c
++;

723 *
d°
 = '\0';

724 
w‹d
->
Àn
 =Üen;

726 i‡(
ch
 == ';') {

727  
NGX_OK
;

730 i‡(
ch
 == '{') {

731  
NGX_CONF_BLOCK_START
;

734 
found
 = 0;

738 
	}
}

742 
	$ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

744 *
rv
;

745 
ngx_öt_t
 
n
;

746 
ngx_°r_t
 *
vÆue
, 
fûe
, 
«me
;

747 
ngx_glob_t
 
gl
;

749 
vÆue
 = 
cf
->
¨gs
->
ñts
;

750 
fûe
 = 
vÆue
[1];

752 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

754 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

755  
NGX_CONF_ERROR
;

758 i‡(
	`°Ωbrk
((*Ë
fûe
.
d©a
, "*?["Ë=
NULL
) {

760 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

762  
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

765 
	`ngx_memzîo
(&
gl
, (
ngx_glob_t
));

767 
gl
.
∑âîn
 = 
fûe
.
d©a
;

768 
gl
.
log
 = 
cf
->log;

769 
gl
.
ã°
 = 1;

771 i‡(
	`ngx_›í_glob
(&
gl
Ë!
NGX_OK
) {

772 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

773 
ngx_›í_glob_n
 " \"%s\" faûed", 
fûe
.
d©a
);

774  
NGX_CONF_ERROR
;

777 
rv
 = 
NGX_CONF_OK
;

780 
n
 = 
	`ngx_ªad_glob
(&
gl
, &
«me
);

782 i‡(
n
 !
NGX_OK
) {

786 
fûe
.
Àn
 = 
«me
.len++;

787 
fûe
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

789 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

791 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

793 i‡(
rv
 !
NGX_CONF_OK
) {

798 
	`ngx_˛o£_glob
(&
gl
);

800  
rv
;

801 
	}
}

804 
ngx_öt_t


805 
	$ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
c⁄f_¥efix
)

807 
size_t
 
Àn
;

808 
u_ch¨
 *
p
, *
n
, *
¥efix
;

809 
ngx_öt_t
 
rc
;

811 
rc
 = 
	`ngx_c⁄f_ã°_fuŒ_«me
(
«me
);

813 i‡(
rc
 =
NGX_OK
) {

814  
rc
;

817 i‡(
c⁄f_¥efix
) {

818 
Àn
 = 
cy˛e
->
c⁄f_¥efix
.len;

819 
¥efix
 = 
cy˛e
->
c⁄f_¥efix
.
d©a
;

822 
Àn
 = 
cy˛e
->
¥efix
.len;

823 
¥efix
 = 
cy˛e
->¥efix.
d©a
;

826 #i‡(
NGX_WIN32
)

828 i‡(
rc
 == 2) {

829 
Àn
 = 
rc
;

834 
n
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 
«me
->len + 1);

835 i‡(
n
 =
NULL
) {

836  
NGX_ERROR
;

839 
p
 = 
	`ngx_˝ymem
(
n
, 
¥efix
, 
Àn
);

840 
	`ngx_˝y°∫
(
p
, 
«me
->
d©a
,Çame->
Àn
 + 1);

842 
«me
->
Àn
 +=Üen;

843 
«me
->
d©a
 = 
n
;

845  
NGX_OK
;

846 
	}
}

849 
ngx_öt_t


850 
	$ngx_c⁄f_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
)

852 #i‡(
NGX_WIN32
)

853 
u_ch¨
 
c0
, 
c1
;

855 
c0
 = 
«me
->
d©a
[0];

857 i‡(
«me
->
Àn
 < 2) {

858 i‡(
c0
 == '/') {

862  
NGX_DECLINED
;

865 
c1
 = 
«me
->
d©a
[1];

867 i‡(
c1
 == ':') {

868 
c0
 |= 0x20;

870 i‡((
c0
 >= 'a' && c0 <= 'z')) {

871  
NGX_OK
;

874  
NGX_DECLINED
;

877 i‡(
c1
 == '/') {

878  
NGX_OK
;

881 i‡(
c0
 == '/') {

885  
NGX_DECLINED
;

889 i‡(
«me
->
d©a
[0] == '/') {

890  
NGX_OK
;

893  
NGX_DECLINED
;

896 
	}
}

899 
ngx_›í_fûe_t
 *

900 
	$ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

902 
ngx_°r_t
 
fuŒ
;

903 
ngx_uöt_t
 
i
;

904 
ngx_li°_∑π_t
 *
∑π
;

905 
ngx_›í_fûe_t
 *
fûe
;

907 #i‡(
NGX_SUPPRESS_WARN
)

908 
	`ngx_°r_nuŒ
(&
fuŒ
);

911 i‡(
«me
->
Àn
) {

912 
fuŒ
 = *
«me
;

914 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
fuŒ
, 0Ë!
NGX_OK
) {

915  
NULL
;

918 
∑π
 = &
cy˛e
->
›í_fûes
.part;

919 
fûe
 = 
∑π
->
ñts
;

921 
i
 = 0; ; i++) {

923 i‡(
i
 >
∑π
->
√…s
) {

924 i‡(
∑π
->
√xt
 =
NULL
) {

927 
∑π
 =Ö¨t->
√xt
;

928 
fûe
 = 
∑π
->
ñts
;

929 
i
 = 0;

932 i‡(
fuŒ
.
Àn
 !
fûe
[
i
].
«me
.len) {

936 i‡(
	`ngx_°rcmp
(
fuŒ
.
d©a
, 
fûe
[
i
].
«me
.data) == 0) {

937  &
fûe
[
i
];

942 
fûe
 = 
	`ngx_li°_push
(&
cy˛e
->
›í_fûes
);

943 i‡(
fûe
 =
NULL
) {

944  
NULL
;

947 i‡(
«me
->
Àn
) {

948 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

949 
fûe
->
«me
 = 
fuŒ
;

952 
fûe
->
fd
 = 
ngx_°dîr
;

953 
fûe
->
«me
 = *name;

956 
fûe
->
buf„r
 = 
NULL
;

958  
fûe
;

959 
	}
}

963 
	$ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
)

965 
ssize_t
 
n
, 
Àn
;

966 
ngx_uöt_t
 
i
;

967 
ngx_li°_∑π_t
 *
∑π
;

968 
ngx_›í_fûe_t
 *
fûe
;

970 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "flush files");

972 
∑π
 = &
cy˛e
->
›í_fûes
.part;

973 
fûe
 = 
∑π
->
ñts
;

975 
i
 = 0; ; i++) {

977 i‡(
i
 >
∑π
->
√…s
) {

978 i‡(
∑π
->
√xt
 =
NULL
) {

981 
∑π
 =Ö¨t->
√xt
;

982 
fûe
 = 
∑π
->
ñts
;

983 
i
 = 0;

986 
Àn
 = 
fûe
[
i
].
pos
 - fûe[i].
buf„r
;

988 i‡(
fûe
[
i
].
buf„r
 =
NULL
 || 
Àn
 == 0) {

992 
n
 = 
	`ngx_wrôe_fd
(
fûe
[
i
].
fd
, fûe[i].
buf„r
, 
Àn
);

994 i‡(
n
 =
NGX_FILE_ERROR
) {

995 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

996 
ngx_wrôe_fd_n
 "Åo \"%s\" failed",

997 
fûe
[
i
].
«me
.
d©a
);

999 } i‡(
n
 !
Àn
) {

1000 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

1001 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

1002 
fûe
[
i
].
«me
.
d©a
, 
n
, 
Àn
);

1005 
	}
}

1008 
ngx_cde˛


1009 
	$ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
, 
ngx_îr_t
 
îr
,

1010 c⁄° *
fmt
, ...)

1012 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
], *
p
, *
œ°
;

1013 
va_li°
 
¨gs
;

1015 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

1017 
	`va_°¨t
(
¨gs
, 
fmt
);

1018 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
, 
fmt
, 
¨gs
);

1019 
	`va_íd
(
¨gs
);

1021 i‡(
îr
) {

1022 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

1025 i‡(
cf
->
c⁄f_fûe
 =
NULL
) {

1026 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s", 
p
 - 
îr°r
,Érrstr);

1030 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1031 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in commandÜine",

1032 
p
 - 
îr°r
,Érrstr);

1036 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in %s:%ui",

1037 
p
 - 
îr°r
,Érrstr,

1038 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
, cf->c⁄f_fûe->
löe
);

1039 
	}
}

1043 
	$ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1045 *
p
 = 
c⁄f
;

1047 
ngx_°r_t
 *
vÆue
;

1048 
ngx_Êag_t
 *
Â
;

1049 
ngx_c⁄f_po°_t
 *
po°
;

1051 
Â
 = (
ngx_Êag_t
 *Ë(
p
 + 
cmd
->
off£t
);

1053 i‡(*
Â
 !
NGX_CONF_UNSET
) {

1057 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1059 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "on") == 0) {

1060 *
Â
 = 1;

1062 } i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "off") == 0) {

1063 *
Â
 = 0;

1066 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1069 
vÆue
[1].
d©a
, 
cmd
->
«me
.data);

1070  
NGX_CONF_ERROR
;

1073 i‡(
cmd
->
po°
) {

1074 
po°
 = 
cmd
->post;

1075  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
Â
);

1078  
NGX_CONF_OK
;

1079 
	}
}

1083 
	$ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1085 *
p
 = 
c⁄f
;

1087 
ngx_°r_t
 *
fõld
, *
vÆue
;

1088 
ngx_c⁄f_po°_t
 *
po°
;

1090 
fõld
 = (
ngx_°r_t
 *Ë(
p
 + 
cmd
->
off£t
);

1092 i‡(
fõld
->
d©a
) {

1096 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1098 *
fõld
 = 
vÆue
[1];

1100 i‡(
cmd
->
po°
) {

1101 
po°
 = 
cmd
->post;

1102  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
fõld
);

1105  
NGX_CONF_OK
;

1106 
	}
}

1110 
	$ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1112 *
p
 = 
c⁄f
;

1114 
ngx_°r_t
 *
vÆue
, *
s
;

1115 
ngx_¨øy_t
 **
a
;

1116 
ngx_c⁄f_po°_t
 *
po°
;

1118 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1120 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1121 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_°r_t
));

1122 i‡(*
a
 =
NULL
) {

1123  
NGX_CONF_ERROR
;

1127 
s
 = 
	`ngx_¨øy_push
(*
a
);

1128 i‡(
s
 =
NULL
) {

1129  
NGX_CONF_ERROR
;

1132 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1134 *
s
 = 
vÆue
[1];

1136 i‡(
cmd
->
po°
) {

1137 
po°
 = 
cmd
->post;

1138  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
s
);

1141  
NGX_CONF_OK
;

1142 
	}
}

1146 
	$ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1148 *
p
 = 
c⁄f
;

1150 
ngx_°r_t
 *
vÆue
;

1151 
ngx_¨øy_t
 **
a
;

1152 
ngx_keyvÆ_t
 *
kv
;

1153 
ngx_c⁄f_po°_t
 *
po°
;

1155 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1157 i‡(*
a
 =
NULL
) {

1158 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_keyvÆ_t
));

1159 i‡(*
a
 =
NULL
) {

1160  
NGX_CONF_ERROR
;

1164 
kv
 = 
	`ngx_¨øy_push
(*
a
);

1165 i‡(
kv
 =
NULL
) {

1166  
NGX_CONF_ERROR
;

1169 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1171 
kv
->
key
 = 
vÆue
[1];

1172 
kv
->
vÆue
 = value[2];

1174 i‡(
cmd
->
po°
) {

1175 
po°
 = 
cmd
->post;

1176  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
kv
);

1179  
NGX_CONF_OK
;

1180 
	}
}

1184 
	$ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1186 *
p
 = 
c⁄f
;

1188 
ngx_öt_t
 *
≈
;

1189 
ngx_°r_t
 *
vÆue
;

1190 
ngx_c⁄f_po°_t
 *
po°
;

1193 
≈
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1195 i‡(*
≈
 !
NGX_CONF_UNSET
) {

1199 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1200 *
≈
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1201 i‡(*
≈
 =
NGX_ERROR
) {

1205 i‡(
cmd
->
po°
) {

1206 
po°
 = 
cmd
->post;

1207  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
≈
);

1210  
NGX_CONF_OK
;

1211 
	}
}

1215 
	$ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1217 *
p
 = 
c⁄f
;

1219 
size_t
 *
•
;

1220 
ngx_°r_t
 *
vÆue
;

1221 
ngx_c⁄f_po°_t
 *
po°
;

1224 
•
 = (
size_t
 *Ë(
p
 + 
cmd
->
off£t
);

1225 i‡(*
•
 !
NGX_CONF_UNSET_SIZE
) {

1229 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1231 *
•
 = 
	`ngx_∑r£_size
(&
vÆue
[1]);

1232 i‡(*
•
 =(
size_t
Ë
NGX_ERROR
) {

1236 i‡(
cmd
->
po°
) {

1237 
po°
 = 
cmd
->post;

1238  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1241  
NGX_CONF_OK
;

1242 
	}
}

1246 
	$ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1248 *
p
 = 
c⁄f
;

1250 
off_t
 *
›
;

1251 
ngx_°r_t
 *
vÆue
;

1252 
ngx_c⁄f_po°_t
 *
po°
;

1255 
›
 = (
off_t
 *Ë(
p
 + 
cmd
->
off£t
);

1256 i‡(*
›
 !
NGX_CONF_UNSET
) {

1260 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1262 *
›
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

1263 i‡(*
›
 =(
off_t
Ë
NGX_ERROR
) {

1267 i‡(
cmd
->
po°
) {

1268 
po°
 = 
cmd
->post;

1269  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
›
);

1272  
NGX_CONF_OK
;

1273 
	}
}

1277 
	$ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1279 *
p
 = 
c⁄f
;

1281 
ngx_m£c_t
 *
m•
;

1282 
ngx_°r_t
 *
vÆue
;

1283 
ngx_c⁄f_po°_t
 *
po°
;

1286 
m•
 = (
ngx_m£c_t
 *Ë(
p
 + 
cmd
->
off£t
);

1287 i‡(*
m•
 !
NGX_CONF_UNSET_MSEC
) {

1291 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1293 *
m•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

1294 i‡(*
m•
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1298 i‡(*
m•
 =(
ngx_m£c_t
Ë
NGX_PARSE_LARGE_TIME
) {

1302 i‡(
cmd
->
po°
) {

1303 
po°
 = 
cmd
->post;

1304  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
m•
);

1307  
NGX_CONF_OK
;

1308 
	}
}

1312 
	$ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1314 *
p
 = 
c⁄f
;

1316 
time_t
 *
•
;

1317 
ngx_°r_t
 *
vÆue
;

1318 
ngx_c⁄f_po°_t
 *
po°
;

1321 
•
 = (
time_t
 *Ë(
p
 + 
cmd
->
off£t
);

1322 i‡(*
•
 !
NGX_CONF_UNSET
) {

1326 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1328 *
•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

1329 i‡(*
•
 =
NGX_ERROR
) {

1333 i‡(*
•
 =
NGX_PARSE_LARGE_TIME
) {

1337 i‡(
cmd
->
po°
) {

1338 
po°
 = 
cmd
->post;

1339  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1342  
NGX_CONF_OK
;

1343 
	}
}

1347 
	$ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1349 *
p
 = 
c⁄f
;

1351 
ngx_°r_t
 *
vÆue
;

1352 
ngx_bufs_t
 *
bufs
;

1355 
bufs
 = (
ngx_bufs_t
 *Ë(
p
 + 
cmd
->
off£t
);

1356 i‡(
bufs
->
num
) {

1360 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1362 
bufs
->
num
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1363 i‡(
bufs
->
num
 =
NGX_ERROR
 || bufs->num == 0) {

1367 
bufs
->
size
 = 
	`ngx_∑r£_size
(&
vÆue
[2]);

1368 i‡(
bufs
->
size
 =(
size_t
Ë
NGX_ERROR
 || bufs->size == 0) {

1372  
NGX_CONF_OK
;

1373 
	}
}

1377 
	$ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1379 *
p
 = 
c⁄f
;

1381 
ngx_uöt_t
 *
≈
, 
i
;

1382 
ngx_°r_t
 *
vÆue
;

1383 
ngx_c⁄f_íum_t
 *
e
;

1385 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1387 i‡(*
≈
 !
NGX_CONF_UNSET_UINT
) {

1391 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1392 
e
 = 
cmd
->
po°
;

1394 
i
 = 0; 
e
[i].
«me
.
Àn
 != 0; i++) {

1395 i‡(
e
[
i
].
«me
.
Àn
 !
vÆue
[1].len

1396 || 
	`ngx_°rˇ£cmp
(
e
[
i
].
«me
.
d©a
, 
vÆue
[1].data) != 0)

1401 *
≈
 = 
e
[
i
].
vÆue
;

1403  
NGX_CONF_OK
;

1406 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1407 "övÆid vÆuê\"%s\"", 
vÆue
[1].
d©a
);

1409  
NGX_CONF_ERROR
;

1410 
	}
}

1414 
	$ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1416 *
p
 = 
c⁄f
;

1418 
ngx_uöt_t
 *
≈
, 
i
, 
m
;

1419 
ngx_°r_t
 *
vÆue
;

1420 
ngx_c⁄f_bômask_t
 *
mask
;

1423 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1424 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1425 
mask
 = 
cmd
->
po°
;

1427 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1428 
m
 = 0; 
mask
[m].
«me
.
Àn
 != 0; m++) {

1430 i‡(
mask
[
m
].
«me
.
Àn
 !
vÆue
[
i
].len

1431 || 
	`ngx_°rˇ£cmp
(
mask
[
m
].
«me
.
d©a
, 
vÆue
[
i
].data) != 0)

1436 i‡(*
≈
 & 
mask
[
m
].mask) {

1437 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1438 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1441 *
≈
 |
mask
[
m
].mask;

1447 i‡(
mask
[
m
].
«me
.
Àn
 == 0) {

1448 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1449 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1451  
NGX_CONF_ERROR
;

1455  
NGX_CONF_OK
;

1456 
	}
}

1460 
	$ngx_c⁄f_unsuµ‹ãd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1463 
	}
}

1467 
	$ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1469 
ngx_c⁄f_dïªˇãd_t
 *
d
 = 
po°
;

1471 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1474 
d
->
ﬁd_«me
, d->
√w_«me
);

1476  
NGX_CONF_OK
;

1477 
	}
}

1481 
	$ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1483 
ngx_c⁄f_num_bounds_t
 *
bounds
 = 
po°
;

1484 
ngx_öt_t
 *
≈
 = 
d©a
;

1486 i‡(
bounds
->
high
 == -1) {

1487 i‡(*
≈
 >
bounds
->
low
) {

1488  
NGX_CONF_OK
;

1491 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1492 "vÆuêmu° bêequÆ o∏m‹êth™ %i", 
bounds
->
low
);

1494  
NGX_CONF_ERROR
;

1497 i‡(*
≈
 >
bounds
->
low
 && *≈ <bounds->
high
) {

1498  
NGX_CONF_OK
;

1501 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1503 
bounds
->
low
, bounds->
high
);

1505  
NGX_CONF_ERROR
;

1506 
	}
}

	@src/core/ngx_conf_file.h

8 #i‚de‡
_NGX_HTTP_CONF_FILE_H_INCLUDED_


9 
	#_NGX_HTTP_CONF_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

22 
	#NGX_CONF_NOARGS
 0x00000001

	)

23 
	#NGX_CONF_TAKE1
 0x00000002

	)

24 
	#NGX_CONF_TAKE2
 0x00000004

	)

25 
	#NGX_CONF_TAKE3
 0x00000008

	)

26 
	#NGX_CONF_TAKE4
 0x00000010

	)

27 
	#NGX_CONF_TAKE5
 0x00000020

	)

28 
	#NGX_CONF_TAKE6
 0x00000040

	)

29 
	#NGX_CONF_TAKE7
 0x00000080

	)

31 
	#NGX_CONF_MAX_ARGS
 8

	)

33 
	#NGX_CONF_TAKE12
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
)

	)

34 
	#NGX_CONF_TAKE13
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE3
)

	)

36 
	#NGX_CONF_TAKE23
 (
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

38 
	#NGX_CONF_TAKE123
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

39 
	#NGX_CONF_TAKE1234
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
 \

40 |
NGX_CONF_TAKE4
)

	)

42 
	#NGX_CONF_ARGS_NUMBER
 0x000000ff

	)

43 
	#NGX_CONF_BLOCK
 0x00000100

	)

44 
	#NGX_CONF_FLAG
 0x00000200

	)

45 
	#NGX_CONF_ANY
 0x00000400

	)

46 
	#NGX_CONF_1MORE
 0x00000800

	)

47 
	#NGX_CONF_2MORE
 0x00001000

	)

48 
	#NGX_CONF_MULTI
 0x00002000

	)

50 
	#NGX_DIRECT_CONF
 0x00010000

	)

52 
	#NGX_MAIN_CONF
 0x01000000

	)

53 
	#NGX_ANY_CONF
 0x0F000000

	)

57 
	#NGX_CONF_UNSET
 -1

	)

58 
	#NGX_CONF_UNSET_UINT
 (
ngx_uöt_t
Ë-1

	)

59 
	#NGX_CONF_UNSET_PTR
 (*Ë-1

	)

60 
	#NGX_CONF_UNSET_SIZE
 (
size_t
Ë-1

	)

61 
	#NGX_CONF_UNSET_MSEC
 (
ngx_m£c_t
Ë-1

	)

64 
	#NGX_CONF_OK
 
NULL


	)

65 
	#NGX_CONF_ERROR
 (*Ë-1

	)

67 
	#NGX_CONF_BLOCK_START
 1

	)

68 
	#NGX_CONF_BLOCK_DONE
 2

	)

69 
	#NGX_CONF_FILE_DONE
 3

	)

71 
	#NGX_CORE_MODULE
 0x45524F43

	)

72 
	#NGX_CONF_MODULE
 0x464E4F43

	)

75 
	#NGX_MAX_CONF_ERRSTR
 1024

	)

78 
	sngx_comm™d_s
 {

79 
ngx_°r_t
 
	m«me
;

80 
ngx_uöt_t
 
	mty≥
;

81 *(*
	m£t
)(
ngx_c⁄f_t
 *
	mcf
, 
ngx_comm™d_t
 *
	mcmd
, *
	mc⁄f
);

82 
ngx_uöt_t
 
	mc⁄f
;

83 
ngx_uöt_t
 
	moff£t
;

84 *
	mpo°
;

87 
	#ngx_nuŒ_comm™d
 { 
ngx_nuŒ_°rög
, 0, 
NULL
, 0, 0, NULL }

	)

90 
	sngx_›í_fûe_s
 {

91 
ngx_fd_t
 
	mfd
;

92 
ngx_°r_t
 
	m«me
;

94 
u_ch¨
 *
	mbuf„r
;

95 
u_ch¨
 *
	mpos
;

96 
u_ch¨
 *
	mœ°
;

100 
ngx_uöt_t
 
	mÊags
;

102 
ngx_uöt_t
 (*
h™dÀr
)(*
	md©a
, 
ngx_›í_fûe_t
 *
	mfûe
);

103 *
	md©a
;

108 
	#NGX_MODULE_V1
 0, 0, 0, 0, 0, 0, 1

	)

109 
	#NGX_MODULE_V1_PADDING
 0, 0, 0, 0, 0, 0, 0, 0

	)

111 
	sngx_moduÀ_s
 {

112 
ngx_uöt_t
 
	m˘x_ödex
;

113 
ngx_uöt_t
 
	mödex
;

115 
ngx_uöt_t
 
	m•¨e0
;

116 
ngx_uöt_t
 
	m•¨e1
;

117 
ngx_uöt_t
 
	m•¨e2
;

118 
ngx_uöt_t
 
	m•¨e3
;

120 
ngx_uöt_t
 
	mvîsi⁄
;

122 *
	m˘x
;

123 
ngx_comm™d_t
 *
	mcomm™ds
;

124 
ngx_uöt_t
 
	mty≥
;

126 
ngx_öt_t
 (*
öô_ma°î
)(
ngx_log_t
 *
	mlog
);

128 
ngx_öt_t
 (*
öô_moduÀ
)(
ngx_cy˛e_t
 *
	mcy˛e
);

130 
ngx_öt_t
 (*
öô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

131 
ngx_öt_t
 (*
öô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

132 (*
	mexô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

133 (*
	mexô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

135 (*
	mexô_ma°î
)(
ngx_cy˛e_t
 *
	mcy˛e
);

137 
uöçå_t
 
	m•¨e_hook0
;

138 
uöçå_t
 
	m•¨e_hook1
;

139 
uöçå_t
 
	m•¨e_hook2
;

140 
uöçå_t
 
	m•¨e_hook3
;

141 
uöçå_t
 
	m•¨e_hook4
;

142 
uöçå_t
 
	m•¨e_hook5
;

143 
uöçå_t
 
	m•¨e_hook6
;

144 
uöçå_t
 
	m•¨e_hook7
;

149 
ngx_°r_t
 
	m«me
;

150 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

151 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

152 } 
	tngx_c‹e_moduÀ_t
;

156 
ngx_fûe_t
 
	mfûe
;

157 
ngx_buf_t
 *
	mbuf„r
;

158 
ngx_uöt_t
 
	mlöe
;

159 } 
	tngx_c⁄f_fûe_t
;

162 *(*
	tngx_c⁄f_h™dÀr_±
)(
	tngx_c⁄f_t
 *
	tcf
,

163 
	tngx_comm™d_t
 *
	tdummy
, *
	tc⁄f
);

166 
	sngx_c⁄f_s
 {

167 *
	m«me
;

168 
ngx_¨øy_t
 *
	m¨gs
;

170 
ngx_cy˛e_t
 *
	mcy˛e
;

171 
ngx_poﬁ_t
 *
	mpoﬁ
;

172 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

173 
ngx_c⁄f_fûe_t
 *
	mc⁄f_fûe
;

174 
ngx_log_t
 *
	mlog
;

176 *
	m˘x
;

177 
ngx_uöt_t
 
	mmoduÀ_ty≥
;

178 
ngx_uöt_t
 
	mcmd_ty≥
;

180 
ngx_c⁄f_h™dÀr_±
 
	mh™dÀr
;

181 *
	mh™dÀr_c⁄f
;

185 *(*
	tngx_c⁄f_po°_h™dÀr_±
Ë(
	tngx_c⁄f_t
 *
	tcf
,

186 *
	td©a
, *
	tc⁄f
);

189 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

190 } 
	tngx_c⁄f_po°_t
;

194 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

195 *
	mﬁd_«me
;

196 *
	m√w_«me
;

197 } 
	tngx_c⁄f_dïªˇãd_t
;

201 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

202 
ngx_öt_t
 
	mlow
;

203 
ngx_öt_t
 
	mhigh
;

204 } 
	tngx_c⁄f_num_bounds_t
;

208 
ngx_°r_t
 
	m«me
;

209 
ngx_uöt_t
 
	mvÆue
;

210 } 
	tngx_c⁄f_íum_t
;

213 
	#NGX_CONF_BITMASK_SET
 1

	)

216 
ngx_°r_t
 
	m«me
;

217 
ngx_uöt_t
 
	mmask
;

218 } 
	tngx_c⁄f_bômask_t
;

222 * 
ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

223 *
ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

226 
	#ngx_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
Ëc⁄f_˘x[moduÀ.
ödex
]

	)

230 
	#ngx_c⁄f_öô_vÆue
(
c⁄f
, ) \

231 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

232 
c⁄f
 = ; \

233 }

	)

235 
	#ngx_c⁄f_öô_±r_vÆue
(
c⁄f
, ) \

236 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

237 
c⁄f
 = ; \

238 }

	)

240 
	#ngx_c⁄f_öô_uöt_vÆue
(
c⁄f
, ) \

241 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

242 
c⁄f
 = ; \

243 }

	)

245 
	#ngx_c⁄f_öô_size_vÆue
(
c⁄f
, ) \

246 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

247 
c⁄f
 = ; \

248 }

	)

250 
	#ngx_c⁄f_öô_m£c_vÆue
(
c⁄f
, ) \

251 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

252 
c⁄f
 = ; \

253 }

	)

255 
	#ngx_c⁄f_mîge_vÆue
(
c⁄f
, 
¥ev
, ) \

256 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

257 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

258 }

	)

260 
	#ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
, 
¥ev
, ) \

261 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

262 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_PTR
) ?  :Örev; \

263 }

	)

265 
	#ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
, 
¥ev
, ) \

266 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

267 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_UINT
) ?  :Örev; \

268 }

	)

270 
	#ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
, 
¥ev
, ) \

271 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

272 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_MSEC
) ?  :Örev; \

273 }

	)

275 
	#ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
, 
¥ev
, ) \

276 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

277 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

278 }

	)

280 
	#ngx_c⁄f_mîge_size_vÆue
(
c⁄f
, 
¥ev
, ) \

281 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

282 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_SIZE
) ?  :Örev; \

283 }

	)

285 
	#ngx_c⁄f_mîge_off_vÆue
(
c⁄f
, 
¥ev
, ) \

286 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

287 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

288 }

	)

290 
	#ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
, 
¥ev
, ) \

291 i‡(
c⁄f
.
d©a
 =
NULL
) { \

292 i‡(
¥ev
.
d©a
) { \

293 
c⁄f
.
Àn
 = 
¥ev
.len; \

294 
c⁄f
.
d©a
 = 
¥ev
.data; \

296 
c⁄f
.
Àn
 = () - 1; \

297 
c⁄f
.
d©a
 = (
u_ch¨
 *) ; \

299 }

	)

301 
	#ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
, 
¥ev
, 
deÁu…_num
, 
deÁu…_size
) \

302 i‡(
c⁄f
.
num
 == 0) { \

303 i‡(
¥ev
.
num
) { \

304 
c⁄f
.
num
 = 
¥ev
.num; \

305 
c⁄f
.
size
 = 
¥ev
.size; \

307 
c⁄f
.
num
 = 
deÁu…_num
; \

308 
c⁄f
.
size
 = 
deÁu…_size
; \

310 }

	)

312 
	#ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
, 
¥ev
, ) \

313 i‡(
c⁄f
 == 0) { \

314 
c⁄f
 = (
¥ev
 == 0) ?  :Örev; \

315 }

	)

318 *
ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
);

319 *
ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
);

322 
ngx_öt_t
 
ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
,

323 
ngx_uöt_t
 
c⁄f_¥efix
);

324 
ngx_›í_fûe_t
 *
ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

325 
ngx_cde˛
 
ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
,

326 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

329 *
ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

330 *
ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

331 *
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

332 *
c⁄f
);

333 *
ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

334 *
ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

335 *
ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

336 *
ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

337 *
ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

338 *
ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

339 *
ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

340 *
ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

341 *
ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

344 
ngx_uöt_t
 
ngx_max_moduÀ
;

345 
ngx_moduÀ_t
 *
ngx_moduÀs
[];

	@src/core/ngx_config.h

8 #i‚de‡
_NGX_CONFIG_H_INCLUDED_


9 
	#_NGX_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_auto_hódîs.h
>

15 #i‡
deföed
 
__Døg⁄Fly__
 && !deföed 
__FªeBSD__


16 
	#__FªeBSD__
 4

	)

17 
	#__FªeBSD_vîsi⁄
 480101

	)

21 #i‡(
NGX_FREEBSD
)

22 
	~<ngx_‰ìbsd_c⁄fig.h
>

25 #ñi‡(
NGX_LINUX
)

26 
	~<ngx_löux_c⁄fig.h
>

29 #ñi‡(
NGX_SOLARIS
)

30 
	~<ngx_sﬁ¨is_c⁄fig.h
>

33 #ñi‡(
NGX_DARWIN
)

34 
	~<ngx_d¨wö_c⁄fig.h
>

37 #ñi‡(
NGX_WIN32
)

38 
	~<ngx_wö32_c⁄fig.h
>

42 
	~<ngx_posix_c⁄fig.h
>

47 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


48 
	#NGX_HAVE_SO_SNDLOWAT
 1

	)

52 #i‡!(
NGX_WIN32
)

54 
	#ngx_sig«l_hñ≥r
(
n
Ë
SIG
##
	)
n

55 
	#ngx_sig«l_vÆue
(
n
Ë
	`ngx_sig«l_hñ≥r
“)

	)

57 
	#ngx_øndom
 
øndom


	)

60 
	#NGX_SHUTDOWN_SIGNAL
 
QUIT


	)

61 
	#NGX_TERMINATE_SIGNAL
 
TERM


	)

62 
	#NGX_NOACCEPT_SIGNAL
 
WINCH


	)

63 
	#NGX_RECONFIGURE_SIGNAL
 
HUP


	)

65 #i‡(
NGX_LINUXTHREADS
)

66 
	#NGX_REOPEN_SIGNAL
 
INFO


	)

67 
	#NGX_CHANGEBIN_SIGNAL
 
XCPU


	)

69 
	#NGX_REOPEN_SIGNAL
 
USR1


	)

70 
	#NGX_CHANGEBIN_SIGNAL
 
USR2


	)

73 
	#ngx_cde˛


	)

74 
	#ngx_libc_cde˛


	)

78 
öçå_t
 
	tngx_öt_t
;

79 
uöçå_t
 
	tngx_uöt_t
;

80 
öçå_t
 
	tngx_Êag_t
;

83 
	#NGX_INT32_LEN
 ("-2147483648"Ë- 1

	)

84 
	#NGX_INT64_LEN
 ("-9223372036854775808"Ë- 1

	)

86 #i‡(
NGX_PTR_SIZE
 == 4)

87 
	#NGX_INT_T_LEN
 
NGX_INT32_LEN


	)

89 
	#NGX_INT_T_LEN
 
NGX_INT64_LEN


	)

93 #i‚de‡
NGX_ALIGNMENT


94 
	#NGX_ALIGNMENT
 (Ë

	)

97 
	#ngx_Æign
(
d
, 
a
Ë(((dË+ (®- 1)Ë& ~◊ - 1))

	)

98 
	#ngx_Æign_±r
(
p
, 
a
) \

99 (
u_ch¨
 *Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
a
 - 1)Ë& ~((uöçå_tË®- 1))

	)

102 
	#ngx_ab‹t
 
ab‹t


	)

106 
	#NGX_INVALID_ARRAY_INDEX
 0x80000000

	)

110 #i‚de‡
ngx_ölöe


111 
	#ngx_ölöe
 
ölöe


	)

114 #i‚de‡
INADDR_NONE


115 
	#INADDR_NONE
 ((Ë-1)

	)

118 #ifde‡
MAXHOSTNAMELEN


119 
	#NGX_MAXHOSTNAMELEN
 
MAXHOSTNAMELEN


	)

121 
	#NGX_MAXHOSTNAMELEN
 256

	)

125 #i‡((
__GNU__
 =2Ë&& (
__GNUC_MINOR__
 < 8))

126 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffffLL

	)

128 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffff

	)

131 
	#NGX_MAX_INT32_VALUE
 (
uöt32_t
Ë0x7fffffff

	)

	@src/core/ngx_connection.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_os_io_t
 
	gngx_io
;

16 
ngx_døö_c⁄√˘i⁄s
();

19 
ngx_li°íög_t
 *

20 
	$ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
, 
sockÀn_t
 
sockÀn
)

22 
size_t
 
Àn
;

23 
ngx_li°íög_t
 *
ls
;

24 
sockaddr
 *
ß
;

25 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

27 
ls
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
li°íög
);

28 i‡(
ls
 =
NULL
) {

29  
NULL
;

32 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

34 
ß
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
sockÀn
);

35 i‡(
ß
 =
NULL
) {

36  
NULL
;

39 
	`ngx_mem˝y
(
ß
, 
sockaddr
, 
sockÀn
);

41 
ls
->
sockaddr
 = 
ß
;

42 
ls
->
sockÀn
 = socklen;

44 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

45 
ls
->
addr_ãxt
.
Àn
 =Üen;

47 
ls
->
sockaddr
->
ß_Ámûy
) {

48 #i‡(
NGX_HAVE_INET6
)

49 
AF_INET6
:

50 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

53 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

54 
AF_UNIX
:

55 
ls
->
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

56 
Àn
++;

59 
AF_INET
:

60 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

63 
ls
->
addr_ãxt_max_Àn
 = 
NGX_SOCKADDR_STRLEN
;

67 
ls
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

68 i‡(
ls
->
addr_ãxt
.
d©a
 =
NULL
) {

69  
NULL
;

72 
	`ngx_mem˝y
(
ls
->
addr_ãxt
.
d©a
, 
ãxt
, 
Àn
);

74 
ls
->
fd
 = (
ngx_sockë_t
) -1;

75 
ls
->
ty≥
 = 
SOCK_STREAM
;

77 
ls
->
backlog
 = 
NGX_LISTEN_BACKLOG
;

78 
ls
->
rcvbuf
 = -1;

79 
ls
->
¢dbuf
 = -1;

81 #i‡(
NGX_HAVE_SETFIB
)

82 
ls
->
£tfib
 = -1;

85  
ls
;

86 
	}
}

89 
ngx_öt_t


90 
	$ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

92 
size_t
 
Àn
;

93 
ngx_uöt_t
 
i
;

94 
ngx_li°íög_t
 *
ls
;

95 
sockÀn_t
 
ﬁí
;

96 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

97 
ngx_îr_t
 
îr
;

98 
ac˚±_fûãr_¨g
 
af
;

100 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

101 
timeout
;

104 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

105 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

107 
ls
[
i
].
sockaddr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 
NGX_SOCKADDRLEN
);

108 i‡(
ls
[
i
].
sockaddr
 =
NULL
) {

109  
NGX_ERROR
;

112 
ls
[
i
].
sockÀn
 = 
NGX_SOCKADDRLEN
;

113 i‡(
	`gësock«me
(
ls
[
i
].
fd
,Üs[i].
sockaddr
, &ls[i].
sockÀn
) == -1) {

114 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

116 "sockë #%d faûed", 
ls
[
i
].
fd
);

117 
ls
[
i
].
ign‹e
 = 1;

121 
ls
[
i
].
sockaddr
->
ß_Ámûy
) {

123 #i‡(
NGX_HAVE_INET6
)

124 
AF_INET6
:

125 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

126 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + (":65535") - 1;

130 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

131 
AF_UNIX
:

132 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

133 
Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

137 
AF_INET
:

138 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

139 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

143 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

145 "™ unsuµ‹ãdÖrŸocﬁ famûy", 
ls
[
i
].
fd
);

146 
ls
[
i
].
ign‹e
 = 1;

150 
ls
[
i
].
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
);

151 i‡(
ls
[
i
].
addr_ãxt
.
d©a
 =
NULL
) {

152  
NGX_ERROR
;

155 
Àn
 = 
	`ngx_sock_¡›
(
ls
[
i
].
sockaddr
,Üs[i].
addr_ãxt
.
d©a
,Üen, 1);

156 i‡(
Àn
 == 0) {

157  
NGX_ERROR
;

160 
ls
[
i
].
addr_ãxt
.
Àn
 =Üen;

162 
ls
[
i
].
backlog
 = 
NGX_LISTEN_BACKLOG
;

164 
ﬁí
 = ();

166 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*Ë&ls[i].
rcvbuf
,

167 &
ﬁí
)

170 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

172 &
ls
[
i
].
addr_ãxt
);

174 
ls
[
i
].
rcvbuf
 = -1;

177 
ﬁí
 = ();

179 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*Ë&ls[i].
¢dbuf
,

180 &
ﬁí
)

183 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

185 &
ls
[
i
].
addr_ãxt
);

187 
ls
[
i
].
¢dbuf
 = -1;

193 #i‡(
NGX_HAVE_SETFIB
)

195 i‡(
	`gësock›t
(
ls
[
i
].
£tfib
, 
SOL_SOCKET
, 
SO_SETFIB
,

196 (*Ë&
ls
[
i
].
£tfib
, &
ﬁí
)

199 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

201 &
ls
[
i
].
addr_ãxt
);

203 
ls
[
i
].
£tfib
 = -1;

209 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

211 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

212 
ﬁí
 = (
ac˚±_fûãr_¨g
);

214 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
af
, &
ﬁí
)

217 
îr
 = 
ngx_î∫o
;

219 i‡(
îr
 =
NGX_EINVAL
) {

223 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

225 &
ls
[
i
].
addr_ãxt
);

229 i‡(
ﬁí
 < (
ac˚±_fûãr_¨g
Ë|| 
af
.
af_«me
[0] == '\0') {

233 
ls
[
i
].
ac˚±_fûãr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 16);

234 i‡(
ls
[
i
].
ac˚±_fûãr
 =
NULL
) {

235  
NGX_ERROR
;

238 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
,

239 (
u_ch¨
 *Ë
af
.
af_«me
, 16);

242 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

244 
timeout
 = 0;

245 
ﬁí
 = ();

247 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
, &
timeout
, &
ﬁí
)

250 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
ngx_î∫o
,

252 &
ls
[
i
].
addr_ãxt
);

256 i‡(
ﬁí
 < (Ë|| 
timeout
 == 0) {

260 
ls
[
i
].
de„ºed_ac˚±
 = 1;

264  
NGX_OK
;

265 
	}
}

268 
ngx_öt_t


269 
	$ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

271 
ªu£addr
;

272 
ngx_uöt_t
 
i
, 
åõs
, 
Áûed
;

273 
ngx_îr_t
 
îr
;

274 
ngx_log_t
 *
log
;

275 
ngx_sockë_t
 
s
;

276 
ngx_li°íög_t
 *
ls
;

278 
ªu£addr
 = 1;

279 #i‡(
NGX_SUPPRESS_WARN
)

280 
Áûed
 = 0;

283 
log
 = 
cy˛e
->log;

287 
åõs
 = 5;Åries;Åries--) {

288 
Áûed
 = 0;

292 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

293 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

295 i‡(
ls
[
i
].
ign‹e
) {

299 i‡(
ls
[
i
].
fd
 != -1) {

303 i‡(
ls
[
i
].
öhîôed
) {

312 
s
 = 
	`ngx_sockë
(
ls
[
i
].
sockaddr
->
ß_Ámûy
,Üs[i].
ty≥
, 0);

314 i‡(
s
 == -1) {

315 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

316 
ngx_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

317  
NGX_ERROR
;

320 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

321 (c⁄° *Ë&
ªu£addr
, ())

324 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

326 &
ls
[
i
].
addr_ãxt
);

328 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

329 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

330 
ngx_˛o£_sockë_n
 " %V failed",

331 &
ls
[
i
].
addr_ãxt
);

334  
NGX_ERROR
;

337 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

339 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET6
 &&Üs[i].
ùv6⁄ly
) {

340 
ùv6⁄ly
;

342 
ùv6⁄ly
 = (
ls
[
i
].ipv6only == 1);

344 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

345 (c⁄° *Ë&
ùv6⁄ly
, ())

348 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

350 &
ls
[
i
].
addr_ãxt
);

356 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
)) {

357 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

358 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

359 
ngx_n⁄blockög_n
 " %V failed",

360 &
ls
[
i
].
addr_ãxt
);

362 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

363 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

364 
ngx_˛o£_sockë_n
 " %V failed",

365 &
ls
[
i
].
addr_ãxt
);

368  
NGX_ERROR
;

372 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

373 "böd(Ë%V #%d ", &
ls
[
i
].
addr_ãxt
, 
s
);

375 i‡(
	`böd
(
s
, 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
) == -1) {

376 
îr
 = 
ngx_sockë_î∫o
;

378 i‡(
îr
 =
NGX_EADDRINUSE
 && 
ngx_ã°_c⁄fig
) {

382 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

383 "böd(Ëtÿ%V faûed", &
ls
[
i
].
addr_ãxt
);

385 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

386 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

387 
ngx_˛o£_sockë_n
 " %V failed",

388 &
ls
[
i
].
addr_ãxt
);

391 i‡(
îr
 !
NGX_EADDRINUSE
) {

392  
NGX_ERROR
;

395 
Áûed
 = 1;

400 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

402 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

403 
mode_t
 
mode
;

404 
u_ch¨
 *
«me
;

406 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

407 
mode
 = (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
);

409 i‡(
	`chmod
((*Ë
«me
, 
mode
) == -1) {

410 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

411 "chmod(Ë\"%s\" faûed", 
«me
);

414 i‡(
ngx_ã°_c⁄fig
) {

415 i‡(
	`ngx_dñëe_fûe
(
«me
) == -1) {

416 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

417 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

423 i‡(
	`li°í
(
s
, 
ls
[
i
].
backlog
) == -1) {

424 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

426 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

428 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

429 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

430 
ngx_˛o£_sockë_n
 " %V failed",

431 &
ls
[
i
].
addr_ãxt
);

434  
NGX_ERROR
;

437 
ls
[
i
].
li°í
 = 1;

439 
ls
[
i
].
fd
 = 
s
;

442 i‡(!
Áûed
) {

448 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

451 
	`ngx_m¶ìp
(500);

454 i‡(
Áûed
) {

455 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0, "still couldÇot bind()");

456  
NGX_ERROR
;

459  
NGX_OK
;

460 
	}
}

464 
	$ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

466 
ngx_uöt_t
 
i
;

467 
ngx_li°íög_t
 *
ls
;

469 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

470 
ac˚±_fûãr_¨g
 
af
;

472 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

473 
timeout
;

476 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

477 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

479 
ls
[
i
].
log
 = *ls[i].
logp
;

481 i‡(
ls
[
i
].
rcvbuf
 != -1) {

482 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

483 (c⁄° *Ë&
ls
[
i
].
rcvbuf
, ())

486 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

488 
ls
[
i
].
rcvbuf
, &ls[i].
addr_ãxt
);

492 i‡(
ls
[
i
].
¢dbuf
 != -1) {

493 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

494 (c⁄° *Ë&
ls
[
i
].
¢dbuf
, ())

497 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

499 
ls
[
i
].
¢dbuf
, &ls[i].
addr_ãxt
);

503 #i‡(
NGX_HAVE_SETFIB
)

504 i‡(
ls
[
i
].
£tfib
 != -1) {

505 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

506 (c⁄° *Ë&
ls
[
i
].
£tfib
, ())

509 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

511 
ls
[
i
].
£tfib
, &ls[i].
addr_ãxt
);

518 
t˝_nodñay
 = 1;

520 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

521 (c⁄° *Ë&
t˝_nodñay
, ())

524 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

526 &
ls
[
i
].
addr_ãxt
);

531 i‡(
ls
[
i
].
li°í
) {

535 i‡(
	`li°í
(
ls
[
i
].
fd
,Üs[i].
backlog
) == -1) {

536 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

538 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

547 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

549 #ifde‡
SO_ACCEPTFILTER


551 i‡(
ls
[
i
].
dñëe_de„ºed
) {

552 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, 
NULL
, 0)

555 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

558 &
ls
[
i
].
addr_ãxt
);

560 i‡(
ls
[
i
].
ac˚±_fûãr
) {

561 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

564 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

570 
ls
[
i
].
de„ºed_ac˚±
 = 0;

573 i‡(
ls
[
i
].
add_de„ºed
) {

574 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

575 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
af
.
af_«me
,

576 (
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
, 16);

578 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
,

579 &
af
, (
ac˚±_fûãr_¨g
))

582 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

585 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

589 
ls
[
i
].
de„ºed_ac˚±
 = 1;

594 #ifde‡
TCP_DEFER_ACCEPT


596 i‡(
ls
[
i
].
add_de„ºed
 ||Üs[i].
dñëe_de„ºed
) {

598 i‡(
ls
[
i
].
add_de„ºed
) {

599 
timeout
 = (Ë(
ls
[
i
].
po°_ac˚±_timeout
 / 1000);

602 
timeout
 = 0;

605 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
,

606 &
timeout
, ())

609 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

612 
timeout
, &
ls
[
i
].
addr_ãxt
);

618 i‡(
ls
[
i
].
add_de„ºed
) {

619 
ls
[
i
].
de„ºed_ac˚±
 = 1;

628 
	}
}

632 
	$ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

634 
ngx_uöt_t
 
i
;

635 
ngx_li°íög_t
 *
ls
;

636 
ngx_c⁄√˘i⁄_t
 *
c
;

638 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

642 
ngx_ac˚±_muãx_hñd
 = 0;

643 
ngx_u£_ac˚±_muãx
 = 0;

645 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

646 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

648 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

650 i‡(
c
) {

651 i‡(
c
->
ªad
->
a˘ive
) {

652 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

653 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

655 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

663 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0);

666 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

670 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

672 
c
->
fd
 = (
ngx_sockë_t
) -1;

675 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

676 "˛o£Üi°íög %V #%d ", &
ls
[
i
].
addr_ãxt
,Üs[i].
fd
);

678 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

679 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

680 
ngx_˛o£_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

683 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

685 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX


686 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER


687 && 
ngx_√w_bö¨y
 == 0)

689 
u_ch¨
 *
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

691 i‡(
	`ngx_dñëe_fûe
(
«me
) == -1) {

692 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

693 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

699 
ls
[
i
].
fd
 = (
ngx_sockë_t
) -1;

701 
	}
}

704 
ngx_c⁄√˘i⁄_t
 *

705 
	$ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
)

707 
ngx_uöt_t
 
ö°™˚
;

708 
ngx_evít_t
 *
ªv
, *
wev
;

709 
ngx_c⁄√˘i⁄_t
 *
c
;

713 i‡(
ngx_cy˛e
->
fûes
 && (
ngx_uöt_t
Ë
s
 >ngx_cy˛e->
fûes_n
) {

714 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

717 
s
, 
ngx_cy˛e
->
fûes_n
);

718  
NULL
;

723 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

725 i‡(
c
 =
NULL
) {

726 
	`ngx_døö_c⁄√˘i⁄s
();

727 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

730 i‡(
c
 =
NULL
) {

731 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

733 
ngx_cy˛e
->
c⁄√˘i⁄_n
);

737  
NULL
;

740 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
->
d©a
;

741 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
--;

745 i‡(
ngx_cy˛e
->
fûes
) {

746 
ngx_cy˛e
->
fûes
[
s
] = 
c
;

749 
ªv
 = 
c
->
ªad
;

750 
wev
 = 
c
->
wrôe
;

752 
	`ngx_memzîo
(
c
, (
ngx_c⁄√˘i⁄_t
));

754 
c
->
ªad
 = 
ªv
;

755 
c
->
wrôe
 = 
wev
;

756 
c
->
fd
 = 
s
;

757 
c
->
log
 =Üog;

759 
ö°™˚
 = 
ªv
->instance;

761 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

762 
	`ngx_memzîo
(
wev
, (
ngx_evít_t
));

764 
ªv
->
ö°™˚
 = !instance;

765 
wev
->
ö°™˚
 = !instance;

767 
ªv
->
ödex
 = 
NGX_INVALID_INDEX
;

768 
wev
->
ödex
 = 
NGX_INVALID_INDEX
;

770 
ªv
->
d©a
 = 
c
;

771 
wev
->
d©a
 = 
c
;

773 
wev
->
wrôe
 = 1;

775  
c
;

776 
	}
}

780 
	$ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

784 
c
->
d©a
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

785 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
;

786 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
++;

790 i‡(
ngx_cy˛e
->
fûes
) {

791 
ngx_cy˛e
->
fûes
[
c
->
fd
] = 
NULL
;

793 
	}
}

797 
	$ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

799 
ngx_îr_t
 
îr
;

800 
ngx_uöt_t
 
log_îr‹
, 
Àvñ
;

801 
ngx_sockë_t
 
fd
;

803 i‡(
c
->
fd
 == -1) {

804 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "connectionálready closed");

808 i‡(
c
->
ªad
->
timî_£t
) {

809 
	`ngx_dñ_timî
(
c
->
ªad
);

812 i‡(
c
->
wrôe
->
timî_£t
) {

813 
	`ngx_dñ_timî
(
c
->
wrôe
);

816 i‡(
ngx_dñ_c⁄n
) {

817 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

820 i‡(
c
->
ªad
->
a˘ive
 || c->ªad->
dißbÀd
) {

821 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

824 i‡(
c
->
wrôe
->
a˘ive
 || c->wrôe->
dißbÀd
) {

825 
	`ngx_dñ_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLOSE_EVENT
);

829 #i‡(
NGX_THREADS
)

837 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

839 i‡(
c
->
ªad
->
¥ev
) {

840 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

843 i‡(
c
->
wrôe
->
¥ev
) {

844 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

847 
c
->
ªad
->
˛o£d
 = 1;

848 
c
->
wrôe
->
˛o£d
 = 1;

850 i‡(
c
->
sögÀ_c⁄√˘i⁄
) {

851 
	`ngx_u∆ock
(&
c
->
lock
);

852 
c
->
ªad
->
locked
 = 0;

853 
c
->
wrôe
->
locked
 = 0;

856 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

860 i‡(
c
->
ªad
->
¥ev
) {

861 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

864 i‡(
c
->
wrôe
->
¥ev
) {

865 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

868 
c
->
ªad
->
˛o£d
 = 1;

869 
c
->
wrôe
->
˛o£d
 = 1;

873 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

875 
log_îr‹
 = 
c
->log_error;

877 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

879 
fd
 = 
c
->fd;

880 
c
->
fd
 = (
ngx_sockë_t
) -1;

882 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

884 
îr
 = 
ngx_sockë_î∫o
;

886 i‡(
îr
 =
NGX_ECONNRESET
 ||Éº =
NGX_ENOTCONN
) {

888 
log_îr‹
) {

890 
NGX_ERROR_INFO
:

891 
Àvñ
 = 
NGX_LOG_INFO
;

894 
NGX_ERROR_ERR
:

895 
Àvñ
 = 
NGX_LOG_ERR
;

899 
Àvñ
 = 
NGX_LOG_CRIT
;

903 
Àvñ
 = 
NGX_LOG_CRIT
;

908 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 
îr
,

909 
ngx_˛o£_sockë_n
 " %d faûed", 
fd
);

911 
	}
}

915 
	$ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
)

917 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

918 "ªußbÀ c⁄√˘i⁄: %ui", 
ªußbÀ
);

920 i‡(
c
->
ªußbÀ
) {

921 
	`ngx_queue_ªmove
(&
c
->
queue
);

924 
c
->
ªußbÀ
 =Ñeusable;

926 i‡(
ªußbÀ
) {

929 
	`ngx_queue_ö£π_hód
(

930 (
ngx_queue_t
 *Ë&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
, &
c
->
queue
);

932 
	}
}

936 
	$ngx_døö_c⁄√˘i⁄s
()

938 
ngx_öt_t
 
i
;

939 
ngx_queue_t
 *
q
;

940 
ngx_c⁄√˘i⁄_t
 *
c
;

942 
i
 = 0; i < 32; i++) {

943 i‡(
	`ngx_queue_em±y
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
)) {

947 
q
 = 
	`ngx_queue_œ°
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

948 
c
 = 
	`ngx_queue_d©a
(
q
, 
ngx_c⁄√˘i⁄_t
, 
queue
);

950 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

953 
c
->
˛o£
 = 1;

954 
c
->
ªad
->
	`h™dÀr
(c->read);

956 
	}
}

959 
ngx_öt_t


960 
	$ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

961 
ngx_uöt_t
 
p‹t
)

963 
sockÀn_t
 
Àn
;

964 
ngx_uöt_t
 
addr
;

965 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

966 
sockaddr_ö
 *
sö
;

967 #i‡(
NGX_HAVE_INET6
)

968 
ngx_uöt_t
 
i
;

969 
sockaddr_ö6
 *
sö6
;

972 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

974 #i‡(
NGX_HAVE_INET6
)

975 
AF_INET6
:

976 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

978 
addr
 = 0, 
i
 = 0;áddr == 0 && i < 16; i++) {

979 
addr
 |
sö6
->
sö6_addr
.
s6_addr
[
i
];

986 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

987 
addr
 = 
sö
->
sö_addr
.
s_addr
;

991 i‡(
addr
 == 0) {

993 
Àn
 = 
NGX_SOCKADDRLEN
;

995 i‡(
	`gësock«me
(
c
->
fd
, (
sockaddr
 *Ë&
ß
, &
Àn
) == -1) {

996 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, "getsockname() failed");

997  
NGX_ERROR
;

1000 
c
->
loˇl_sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
Àn
);

1001 i‡(
c
->
loˇl_sockaddr
 =
NULL
) {

1002  
NGX_ERROR
;

1005 
	`ngx_mem˝y
(
c
->
loˇl_sockaddr
, &
ß
, 
Àn
);

1008 i‡(
s
 =
NULL
) {

1009  
NGX_OK
;

1012 
s
->
Àn
 = 
	`ngx_sock_¡›
(
c
->
loˇl_sockaddr
, s->
d©a
, s->Àn, 
p‹t
);

1014  
NGX_OK
;

1015 
	}
}

1018 
ngx_öt_t


1019 
	$ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
)

1021 
ngx_uöt_t
 
Àvñ
;

1025 i‡((
îr
 =
NGX_ECONNRESET


1026 #i‡(
NGX_WIN32
)

1027 || 
îr
 =
NGX_ECONNABORTED


1029 Ë&& 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_ECONNRESET
)

1034 #i‡(
NGX_SOLARIS
)

1035 i‡(
îr
 =
NGX_EINVAL
 && 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_EINVAL
) {

1040 i‡(
îr
 == 0

1041 || 
îr
 =
NGX_ECONNRESET


1042 #i‡(
NGX_WIN32
)

1043 || 
îr
 =
NGX_ECONNABORTED


1045 || 
îr
 =
NGX_EPIPE


1047 || 
îr
 =
NGX_ENOTCONN


1048 || 
îr
 =
NGX_ETIMEDOUT


1049 || 
îr
 =
NGX_ECONNREFUSED


1050 || 
îr
 =
NGX_ENETDOWN


1051 || 
îr
 =
NGX_ENETUNREACH


1052 || 
îr
 =
NGX_EHOSTDOWN


1053 || 
îr
 =
NGX_EHOSTUNREACH
)

1055 
c
->
log_îr‹
) {

1057 
NGX_ERROR_IGNORE_EINVAL
:

1058 
NGX_ERROR_IGNORE_ECONNRESET
:

1059 
NGX_ERROR_INFO
:

1060 
Àvñ
 = 
NGX_LOG_INFO
;

1064 
Àvñ
 = 
NGX_LOG_ERR
;

1068 
Àvñ
 = 
NGX_LOG_ALERT
;

1071 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1073  
NGX_ERROR
;

1074 
	}
}

	@src/core/ngx_connection.h

8 #i‚de‡
_NGX_CONNECTION_H_INCLUDED_


9 
	#_NGX_CONNECTION_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°íög_s
 
	tngx_li°íög_t
;

18 
	sngx_li°íög_s
 {

19 
ngx_sockë_t
 
	mfd
;

21 
sockaddr
 *
	msockaddr
;

22 
sockÀn_t
 
	msockÀn
;

23 
size_t
 
	maddr_ãxt_max_Àn
;

24 
ngx_°r_t
 
	maddr_ãxt
;

26 
	mty≥
;

28 
	mbacklog
;

29 
	mrcvbuf
;

30 
	m¢dbuf
;

33 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

35 *
	m£rvîs
;

37 
ngx_log_t
 
	mlog
;

38 
ngx_log_t
 *
	mlogp
;

40 
size_t
 
	mpoﬁ_size
;

42 
size_t
 
	mpo°_ac˚±_buf„r_size
;

44 
ngx_m£c_t
 
	mpo°_ac˚±_timeout
;

46 
ngx_li°íög_t
 *
	m¥evious
;

47 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

49 
	m›í
:1;

50 
	mªmaö
:1;

51 
	mign‹e
:1;

53 
	mbound
:1;

54 
	möhîôed
:1;

55 
	mn⁄blockög_ac˚±
:1;

56 
	mli°í
:1;

57 
	mn⁄blockög
:1;

58 
	msh¨ed
:1;

59 
	maddr_¡›
:1;

61 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

62 
	mùv6⁄ly
:2;

65 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

66 
	mde„ºed_ac˚±
:1;

67 
	mdñëe_de„ºed
:1;

68 
	madd_de„ºed
:1;

69 #ifde‡
SO_ACCEPTFILTER


70 *
	mac˚±_fûãr
;

73 #i‡(
NGX_HAVE_SETFIB
)

74 
	m£tfib
;

81 
	mNGX_ERROR_ALERT
 = 0,

82 
	mNGX_ERROR_ERR
,

83 
	mNGX_ERROR_INFO
,

84 
	mNGX_ERROR_IGNORE_ECONNRESET
,

85 
	mNGX_ERROR_IGNORE_EINVAL


86 } 
	tngx_c⁄√˘i⁄_log_îr‹_e
;

90 
	mNGX_TCP_NODELAY_UNSET
 = 0,

91 
	mNGX_TCP_NODELAY_SET
,

92 
	mNGX_TCP_NODELAY_DISABLED


93 } 
	tngx_c⁄√˘i⁄_t˝_nodñay_e
;

97 
	mNGX_TCP_NOPUSH_UNSET
 = 0,

98 
	mNGX_TCP_NOPUSH_SET
,

99 
	mNGX_TCP_NOPUSH_DISABLED


100 } 
	tngx_c⁄√˘i⁄_t˝_n›ush_e
;

103 
	#NGX_LOWLEVEL_BUFFERED
 0x0f

	)

104 
	#NGX_SSL_BUFFERED
 0x01

	)

107 
	sngx_c⁄√˘i⁄_s
 {

108 *
	md©a
;

109 
ngx_evít_t
 *
	mªad
;

110 
ngx_evít_t
 *
	mwrôe
;

112 
ngx_sockë_t
 
	mfd
;

114 
ngx_ªcv_±
 
	mªcv
;

115 
ngx_£nd_±
 
	m£nd
;

116 
ngx_ªcv_chaö_±
 
	mªcv_chaö
;

117 
ngx_£nd_chaö_±
 
	m£nd_chaö
;

119 
ngx_li°íög_t
 *
	mli°íög
;

121 
off_t
 
	m£¡
;

123 
ngx_log_t
 *
	mlog
;

125 
ngx_poﬁ_t
 *
	mpoﬁ
;

127 
sockaddr
 *
	msockaddr
;

128 
sockÀn_t
 
	msockÀn
;

129 
ngx_°r_t
 
	maddr_ãxt
;

131 #i‡(
NGX_SSL
)

132 
ngx_s¶_c⁄√˘i⁄_t
 *
	ms¶
;

135 
sockaddr
 *
	mloˇl_sockaddr
;

137 
ngx_buf_t
 *
	mbuf„r
;

139 
ngx_queue_t
 
	mqueue
;

141 
ngx_©omic_uöt_t
 
	mnumbî
;

143 
ngx_uöt_t
 
	mªque°s
;

145 
	mbuf„ªd
:8;

147 
	mlog_îr‹
:3;

149 
	msögÀ_c⁄√˘i⁄
:1;

150 
	mu√x≥˘ed_eof
:1;

151 
	mtimedout
:1;

152 
	mîr‹
:1;

153 
	mde°royed
:1;

155 
	midÀ
:1;

156 
	mªußbÀ
:1;

157 
	m˛o£
:1;

159 
	m£ndfûe
:1;

160 
	m¢dlow©
:1;

161 
	mt˝_nodñay
:2;

162 
	mt˝_n›ush
:2;

164 #i‡(
NGX_HAVE_IOCP
)

165 
	mac˚±_c⁄ãxt_upd©ed
:1;

168 #i‡(
NGX_HAVE_AIO_SENDFILE
)

169 
	maio_£ndfûe
:1;

170 
ngx_buf_t
 *
	mbusy_£ndfûe
;

173 #i‡(
NGX_THREADS
)

174 
ngx_©omic_t
 
	mlock
;

179 
ngx_li°íög_t
 *
ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
,

180 
sockÀn_t
 
sockÀn
);

181 
ngx_öt_t
 
ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

182 
ngx_öt_t
 
ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

183 
ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

184 
ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

185 
ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

186 
ngx_öt_t
 
ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

187 
ngx_uöt_t
 
p‹t
);

188 
ngx_öt_t
 
ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
);

190 
ngx_c⁄√˘i⁄_t
 *
ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
);

191 
ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

193 
ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
);

	@src/core/ngx_core.h

8 #i‚de‡
_NGX_CORE_H_INCLUDED_


9 
	#_NGX_CORE_H_INCLUDED_


	)

12 
ngx_moduÀ_s
 
	tngx_moduÀ_t
;

13 
ngx_c⁄f_s
 
	tngx_c⁄f_t
;

14 
ngx_cy˛e_s
 
	tngx_cy˛e_t
;

15 
ngx_poﬁ_s
 
	tngx_poﬁ_t
;

16 
ngx_chaö_s
 
	tngx_chaö_t
;

17 
ngx_log_s
 
	tngx_log_t
;

18 
ngx_¨øy_s
 
	tngx_¨øy_t
;

19 
ngx_›í_fûe_s
 
	tngx_›í_fûe_t
;

20 
ngx_comm™d_s
 
	tngx_comm™d_t
;

21 
ngx_fûe_s
 
	tngx_fûe_t
;

22 
ngx_evít_s
 
	tngx_evít_t
;

23 
ngx_evít_aio_s
 
	tngx_evít_aio_t
;

24 
ngx_c⁄√˘i⁄_s
 
	tngx_c⁄√˘i⁄_t
;

26 (*
	tngx_evít_h™dÀr_±
)(
	tngx_evít_t
 *
	tev
);

27 (*
	tngx_c⁄√˘i⁄_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
);

30 
	#NGX_OK
 0

	)

31 
	#NGX_ERROR
 -1

	)

32 
	#NGX_AGAIN
 -2

	)

33 
	#NGX_BUSY
 -3

	)

34 
	#NGX_DONE
 -4

	)

35 
	#NGX_DECLINED
 -5

	)

36 
	#NGX_ABORT
 -6

	)

39 
	~<ngx_î∫o.h
>

40 
	~<ngx_©omic.h
>

41 
	~<ngx_thªad.h
>

42 
	~<ngx_rbåì.h
>

43 
	~<ngx_time.h
>

44 
	~<ngx_sockë.h
>

45 
	~<ngx_°rög.h
>

46 
	~<ngx_fûes.h
>

47 
	~<ngx_shmem.h
>

48 
	~<ngx_¥o˚ss.h
>

49 
	~<ngx_u£r.h
>

50 
	~<ngx_∑r£.h
>

51 
	~<ngx_log.h
>

52 
	~<ngx_Æloc.h
>

53 
	~<ngx_∑Œoc.h
>

54 
	~<ngx_buf.h
>

55 
	~<ngx_queue.h
>

56 
	~<ngx_¨øy.h
>

57 
	~<ngx_li°.h
>

58 
	~<ngx_hash.h
>

59 
	~<ngx_fûe.h
>

60 
	~<ngx_¸c.h
>

61 
	~<ngx_¸c32.h
>

62 
	~<ngx_murmurhash.h
>

63 #i‡(
NGX_PCRE
)

64 
	~<ngx_ªgex.h
>

66 
	~<ngx_ødix_åì.h
>

67 
	~<ngx_times.h
>

68 
	~<ngx_shmtx.h
>

69 
	~<ngx_¶ab.h
>

70 
	~<ngx_öë.h
>

71 
	~<ngx_cy˛e.h
>

72 #i‡(
NGX_OPENSSL
)

73 
	~<ngx_evít_›ís¶.h
>

75 
	~<ngx_¥o˚ss_cy˛e.h
>

76 
	~<ngx_c⁄f_fûe.h
>

77 
	~<ngx_ªsﬁvî.h
>

78 
	~<ngx_›í_fûe_ˇche.h
>

79 
	~<ngx_os.h
>

80 
	~<ngx_c⁄√˘i⁄.h
>

83 
	#LF
 (
u_ch¨
Ë10

	)

84 
	#CR
 (
u_ch¨
Ë13

	)

85 
	#CRLF
 "\x0d\x0a"

	)

88 
	#ngx_abs
(
vÆue
Ë(((vÆueË>0Ë? (vÆueË: - (vÆue))

	)

89 
	#ngx_max
(
vÆ1
, 
vÆ2
Ë((vÆ1 < vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

90 
	#ngx_mö
(
vÆ1
, 
vÆ2
Ë((vÆ1 > vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

92 
	`ngx_˝uöfo
();

	@src/core/ngx_cpuinfo.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(–
__i386__
 || 
__amd64__
 ) && ( 
__GNUC__
 || 
__INTEL_COMPILER
 ))

15 
ngx_ölöe
 
ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
);

18 #i‡–
__i386__
 )

20 
ngx_ölöe
 

21 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

30 
	`__asm__
 (

42 : : "a" (
i
), "D" (
buf
) : "ecx", "edx", "esi", "memory" );

43 
	}
}

49 
ngx_ölöe
 

50 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

52 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

54 
	`__asm__
 (

58 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
Ë: "a" (
i
) );

60 
buf
[0] = 
óx
;

61 
buf
[1] = 
ebx
;

62 
buf
[2] = 
edx
;

63 
buf
[3] = 
ecx
;

64 
	}
}

73 
	$ngx_˝uöfo
()

75 
u_ch¨
 *
víd‹
;

76 
uöt32_t
 
vbuf
[5], 
˝u
[4], 
modñ
;

78 
vbuf
[0] = 0;

79 
vbuf
[1] = 0;

80 
vbuf
[2] = 0;

81 
vbuf
[3] = 0;

82 
vbuf
[4] = 0;

84 
	`ngx_˝uid
(0, 
vbuf
);

86 
víd‹
 = (
u_ch¨
 *Ë&
vbuf
[1];

88 i‡(
vbuf
[0] == 0) {

92 
	`ngx_˝uid
(1, 
˝u
);

94 i‡(
	`ngx_°rcmp
(
víd‹
, "GenuineIntel") == 0) {

96 (
˝u
[0] & 0xf00) >> 8) {

100 
ngx_ˇchñöe_size
 = 32;

105 
ngx_ˇchñöe_size
 = 32;

107 
modñ
 = ((
˝u
[0] & 0xf0000) >> 8) | (cpu[0] & 0xf0);

109 i‡(
modñ
 >= 0xd0) {

111 
ngx_ˇchñöe_size
 = 64;

121 
ngx_ˇchñöe_size
 = 128;

125 } i‡(
	`ngx_°rcmp
(
víd‹
, "AuthenticAMD") == 0) {

126 
ngx_ˇchñöe_size
 = 64;

128 
	}
}

134 
	$ngx_˝uöfo
()

136 
	}
}

	@src/core/ngx_crc.h

8 #i‚de‡
_NGX_CRC_H_INCLUDED_


9 
	#_NGX_CRC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
uöt32_t


19 
	$ngx_¸c
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

21 
uöt32_t
 
sum
;

23 
sum
 = 0; 
Àn
;Üen--) {

30 
sum
 = sum >> 1 | sum << 31;

32 
sum
 +*
d©a
++;

35  
sum
;

36 
	}
}

	@src/core/ngx_crc32.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

26 
uöt32_t
 
	gngx_¸c32_èbÀ16
[] = {

34 
uöt32_t
 
	gngx_¸c32_èbÀ256
[] = {

102 
uöt32_t
 *
	gngx_¸c32_èbÀ_sh‹t
 = 
ngx_¸c32_èbÀ16
;

105 
ngx_öt_t


106 
	$ngx_¸c32_èbÀ_öô
()

108 *
p
;

110 i‡(((
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t


111 & ~((
uöçå_t
Ë
ngx_ˇchñöe_size
 - 1))

112 =(
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t
)

114  
NGX_OK
;

117 
p
 = 
	`ngx_Æloc
(16 * (
uöt32_t
Ë+ 
ngx_ˇchñöe_size
, 
ngx_cy˛e
->
log
);

118 i‡(
p
 =
NULL
) {

119  
NGX_ERROR
;

122 
p
 = 
	`ngx_Æign_±r
’, 
ngx_ˇchñöe_size
);

124 
	`ngx_mem˝y
(
p
, 
ngx_¸c32_èbÀ16
, 16 * (
uöt32_t
));

126 
ngx_¸c32_èbÀ_sh‹t
 = 
p
;

128  
NGX_OK
;

129 
	}
}

	@src/core/ngx_crc32.h

8 #i‚de‡
_NGX_CRC32_H_INCLUDED_


9 
	#_NGX_CRC32_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 *
ngx_¸c32_èbÀ_sh‹t
;

17 
uöt32_t
 
ngx_¸c32_èbÀ256
[];

20 
ngx_ölöe
 
uöt32_t


21 
	$ngx_¸c32_sh‹t
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

23 
u_ch¨
 
c
;

24 
uöt32_t
 
¸c
;

26 
¸c
 = 0xffffffff;

28 
Àn
--) {

29 
c
 = *
p
++;

30 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 & 0xf)) & 0xf] ^ (crc >> 4);

31 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 >> 4)) & 0xf] ^ (crc >> 4);

34  
¸c
 ^ 0xffffffff;

35 
	}
}

38 
ngx_ölöe
 
uöt32_t


39 
	$ngx_¸c32_l⁄g
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

41 
uöt32_t
 
¸c
;

43 
¸c
 = 0xffffffff;

45 
Àn
--) {

46 
¸c
 = 
ngx_¸c32_èbÀ256
[(¸¯^ *
p
++) & 0xff] ^ (crc >> 8);

49  
¸c
 ^ 0xffffffff;

50 
	}
}

53 
	#ngx_¸c32_öô
(
¸c
) \

54 
¸c
 = 0xffffffff

	)

57 
ngx_ölöe
 

58 
	$ngx_¸c32_upd©e
(
uöt32_t
 *
¸c
, 
u_ch¨
 *
p
, 
size_t
 
Àn
)

60 
uöt32_t
 
c
;

62 
c
 = *
¸c
;

64 
Àn
--) {

65 
c
 = 
ngx_¸c32_èbÀ256
[(¯^ *
p
++) & 0xff] ^ (c >> 8);

68 *
¸c
 = 
c
;

69 
	}
}

72 
	#ngx_¸c32_föÆ
(
¸c
) \

73 
¸c
 ^0xffffffff

	)

76 
ngx_öt_t
 
ngx_¸c32_èbÀ_öô
();

	@src/core/ngx_crypt.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_md5.h
>

10 #i‡(
NGX_HAVE_SHA1
)

11 
	~<ngx_sha1.h
>

15 #i‡(
NGX_CRYPT
)

17 
ngx_öt_t
 
ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

18 
u_ch¨
 **
í¸y±ed
);

19 
ngx_öt_t
 
ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

20 
u_ch¨
 **
í¸y±ed
);

22 #i‡(
NGX_HAVE_SHA1
)

24 
ngx_öt_t
 
ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

25 
u_ch¨
 **
í¸y±ed
);

30 
u_ch¨
 *
ngx_¸y±_to64
(u_ch¨ *
p
, 
uöt32_t
 
v
, 
size_t
 
n
);

33 
ngx_öt_t


34 
	$ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

36 i‡(
	`ngx_°∫cmp
(
ß…
, "$apr1$", ("$apr1$") - 1) == 0) {

37  
	`ngx_¸y±_≠r1
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

39 } i‡(
	`ngx_°∫cmp
(
ß…
, "{PLAIN}", ("{PLAIN}") - 1) == 0) {

40  
	`ngx_¸y±_∂aö
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

42 #i‡(
NGX_HAVE_SHA1
)

43 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SSHA}", ("{SSHA}") - 1) == 0) {

44  
	`ngx_¸y±_ssha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

50  
	`ngx_libc_¸y±
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

51 
	}
}

54 
ngx_öt_t


55 
	$ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

57 
ngx_öt_t
 
n
;

58 
ngx_uöt_t
 
i
;

59 
u_ch¨
 *
p
, *
œ°
, 
föÆ
[16];

60 
size_t
 
ß…Àn
, 
keyÀn
;

61 
ngx_md5_t
 
md5
, 
˘x1
;

65 
keyÀn
 = 
	`ngx_°æí
(
key
);

69 
ß…
 += ("$apr1$") - 1;

70 
œ°
 = 
ß…
 + 8;

71 
p
 = 
ß…
; *∞&& *∞!'$' &&Ö < 
œ°
;Ö++) { }

72 
ß…Àn
 = 
p
 - 
ß…
;

76 
	`ngx_md5_öô
(&
md5
);

77 
	`ngx_md5_upd©e
(&
md5
, 
key
, 
keyÀn
);

78 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *) "$apr1$", ("$apr1$") - 1);

79 
	`ngx_md5_upd©e
(&
md5
, 
ß…
, 
ß…Àn
);

81 
	`ngx_md5_öô
(&
˘x1
);

82 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

83 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

84 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

85 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

87 
n
 = 
keyÀn
;Ç > 0;Ç -= 16) {

88 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 
n
 > 16 ? 16 :Ç);

91 
	`ngx_memzîo
(
föÆ
, (final));

93 
i
 = 
keyÀn
; i; i >>= 1) {

94 i‡(
i
 & 1) {

95 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 1);

98 
	`ngx_md5_upd©e
(&
md5
, 
key
, 1);

102 
	`ngx_md5_föÆ
(
föÆ
, &
md5
);

104 
i
 = 0; i < 1000; i++) {

105 
	`ngx_md5_öô
(&
˘x1
);

107 i‡(
i
 & 1) {

108 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

111 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

114 i‡(
i
 % 3) {

115 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

118 i‡(
i
 % 7) {

119 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

122 i‡(
i
 & 1) {

123 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

126 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

129 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

134 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("$≠r1$"Ë- 1 + 
ß…Àn
 + 16 + 1);

135 i‡(*
í¸y±ed
 =
NULL
) {

136  
NGX_ERROR
;

139 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "$apr1$", ("$apr1$") - 1);

140 
p
 = 
	`ngx_c›y
’, 
ß…
, 
ß…Àn
);

141 *
p
++ = '$';

143 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 0]<<16) | (final[ 6]<<8) | final[12], 4);

144 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 1]<<16) | (final[ 7]<<8) | final[13], 4);

145 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 2]<<16) | (final[ 8]<<8) | final[14], 4);

146 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 3]<<16) | (final[ 9]<<8) | final[15], 4);

147 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 4]<<16) | (final[10]<<8) | final[ 5], 4);

148 
p
 = 
	`ngx_¸y±_to64
’, 
föÆ
[11], 2);

149 *
p
 = '\0';

151  
NGX_OK
;

152 
	}
}

155 
u_ch¨
 *

156 
	$ngx_¸y±_to64
(
u_ch¨
 *
p
, 
uöt32_t
 
v
, 
size_t
 
n
)

158 
u_ch¨
 
ôﬂ64
[] =

161 
n
--) {

162 *
p
++ = 
ôﬂ64
[
v
 & 0x3f];

163 
v
 >>= 6;

166  
p
;

167 
	}
}

170 
ngx_öt_t


171 
	$ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

173 
size_t
 
Àn
;

174 
u_ch¨
 *
p
;

176 
Àn
 = 
	`ngx_°æí
(
key
);

178 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("{PLAIN}"Ë- 1 + 
Àn
 + 1);

179 i‡(*
í¸y±ed
 =
NULL
) {

180  
NGX_ERROR
;

183 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{PLAIN}", ("{PLAIN}") - 1);

184 
	`ngx_mem˝y
(
p
, 
key
, 
Àn
 + 1);

186  
NGX_OK
;

187 
	}
}

190 #i‡(
NGX_HAVE_SHA1
)

192 
ngx_öt_t


193 
	$ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

195 
size_t
 
Àn
;

196 
ngx_°r_t
 
ícoded
, 
decoded
;

197 
ngx_sha1_t
 
sha1
;

203 
ícoded
.
d©a
 = 
ß…
 + ("{SSHA}") - 1;

204 
ícoded
.
Àn
 = 
	`ngx_°æí
”ncoded.
d©a
);

206 
decoded
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
ícoded
.
Àn
));

207 i‡(
decoded
.
d©a
 =
NULL
) {

208  
NGX_ERROR
;

211 
	`ngx_decode_ba£64
(&
decoded
, &
ícoded
);

215 
	`ngx_sha1_öô
(&
sha1
);

216 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

217 
	`ngx_sha1_upd©e
(&
sha1
, 
decoded
.
d©a
 + 20, decoded.
Àn
 - 20);

218 
	`ngx_sha1_föÆ
(
decoded
.
d©a
, &
sha1
);

222 
Àn
 = ("{SSHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

224 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

225 i‡(*
í¸y±ed
 =
NULL
) {

226  
NGX_ERROR
;

229 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SSHA}", ("{SSHA}") - 1);

230 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

231 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

233  
NGX_OK
;

234 
	}
}

	@src/core/ngx_crypt.h

8 #i‚de‡
_NGX_CRYPT_H_INCLUDED_


9 
	#_NGX_CRYPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_öt_t
 
ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

17 
u_ch¨
 **
í¸y±ed
);

	@src/core/ngx_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
);

14 
ngx_öt_t
 
ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, sockadd∏*
ß2
);

15 
ngx_öt_t
 
ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
,

16 
ngx_shm_z⁄e_t
 *
shm_z⁄e
);

17 
ngx_öt_t
 
ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
);

18 
ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
);

21 vﬁ©ûê
ngx_cy˛e_t
 *
	gngx_cy˛e
;

22 
ngx_¨øy_t
 
	gngx_ﬁd_cy˛es
;

24 
ngx_poﬁ_t
 *
	gngx_ãmp_poﬁ
;

25 
ngx_evít_t
 
	gngx_˛ó√r_evít
;

27 
ngx_uöt_t
 
	gngx_ã°_c⁄fig
;

28 
ngx_uöt_t
 
	gngx_quõt_mode
;

30 #i‡(
NGX_THREADS
)

31 
ngx_és_key_t
 
	gngx_c‹e_és_key
;

36 
ngx_c⁄√˘i⁄_t
 
	gdumb
;

39 
ngx_°r_t
 
	gîr‹_log
 = 
ngx_°rög
(
NGX_ERROR_LOG_PATH
);

42 
ngx_cy˛e_t
 *

43 
	$ngx_öô_cy˛e
(
ngx_cy˛e_t
 *
ﬁd_cy˛e
)

45 *
rv
;

46 **
£nv
, **
ív
;

47 
ngx_uöt_t
 
i
, 
n
;

48 
ngx_log_t
 *
log
;

49 
ngx_time_t
 *
ç
;

50 
ngx_c⁄f_t
 
c⁄f
;

51 
ngx_poﬁ_t
 *
poﬁ
;

52 
ngx_cy˛e_t
 *
cy˛e
, **
ﬁd
;

53 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
oshm_z⁄e
;

54 
ngx_li°_∑π_t
 *
∑π
, *
›¨t
;

55 
ngx_›í_fûe_t
 *
fûe
;

56 
ngx_li°íög_t
 *
ls
, *
∆s
;

57 
ngx_c‹e_c⁄f_t
 *
ccf
, *
ﬁd_ccf
;

58 
ngx_c‹e_moduÀ_t
 *
moduÀ
;

59 
ho°«me
[
NGX_MAXHOSTNAMELEN
];

61 
	`ngx_timez⁄e_upd©e
();

65 
ç
 = 
	`ngx_timeofday
();

66 
ç
->
£c
 = 0;

68 
	`ngx_time_upd©e
();

71 
log
 = 
ﬁd_cy˛e
->log;

73 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

74 i‡(
poﬁ
 =
NULL
) {

75  
NULL
;

77 
poﬁ
->
log
 =Üog;

79 
cy˛e
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_cy˛e_t
));

80 i‡(
cy˛e
 =
NULL
) {

81 
	`ngx_de°roy_poﬁ
(
poﬁ
);

82  
NULL
;

85 
cy˛e
->
poﬁ
 =Öool;

86 
cy˛e
->
log
 =Üog;

87 
cy˛e
->
√w_log
.
log_Àvñ
 = 
NGX_LOG_ERR
;

88 
cy˛e
->
ﬁd_cy˛e
 = old_cycle;

90 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
ﬁd_cy˛e
->conf_prefix.len;

91 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_prefix);

92 i‡(
cy˛e
->
c⁄f_¥efix
.
d©a
 =
NULL
) {

93 
	`ngx_de°roy_poﬁ
(
poﬁ
);

94  
NULL
;

97 
cy˛e
->
¥efix
.
Àn
 = 
ﬁd_cy˛e
->prefix.len;

98 
cy˛e
->
¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->prefix);

99 i‡(
cy˛e
->
¥efix
.
d©a
 =
NULL
) {

100 
	`ngx_de°roy_poﬁ
(
poﬁ
);

101  
NULL
;

104 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
ﬁd_cy˛e
->conf_file.len;

105 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ﬁd_cy˛e
->c⁄f_fûe.
Àn
 + 1);

106 i‡(
cy˛e
->
c⁄f_fûe
.
d©a
 =
NULL
) {

107 
	`ngx_de°roy_poﬁ
(
poﬁ
);

108  
NULL
;

110 
	`ngx_˝y°∫
(
cy˛e
->
c⁄f_fûe
.
d©a
, 
ﬁd_cy˛e
->conf_file.data,

111 
ﬁd_cy˛e
->
c⁄f_fûe
.
Àn
 + 1);

113 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
ﬁd_cy˛e
->conf_param.len;

114 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_param);

115 i‡(
cy˛e
->
c⁄f_∑øm
.
d©a
 =
NULL
) {

116 
	`ngx_de°roy_poﬁ
(
poﬁ
);

117  
NULL
;

121 
n
 = 
ﬁd_cy˛e
->
∑thes
.
√…s
 ? old_cycle->pathes.nelts : 10;

123 
cy˛e
->
∑thes
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_∑th_t
 *));

124 i‡(
cy˛e
->
∑thes
.
ñts
 =
NULL
) {

125 
	`ngx_de°roy_poﬁ
(
poﬁ
);

126  
NULL
;

129 
cy˛e
->
∑thes
.
√…s
 = 0;

130 
cy˛e
->
∑thes
.
size
 = (
ngx_∑th_t
 *);

131 
cy˛e
->
∑thes
.
«Œoc
 = 
n
;

132 
cy˛e
->
∑thes
.
poﬁ
 =Öool;

135 i‡(
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
) {

136 
n
 = 
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
;

137 
∑π
 = 
ﬁd_cy˛e
->
›í_fûes
.∑π.
√xt
;Öart;Öart =Öart->next) {

138 
n
 +
∑π
->
√…s
;

142 
n
 = 20;

145 i‡(
	`ngx_li°_öô
(&
cy˛e
->
›í_fûes
, 
poﬁ
, 
n
, (
ngx_›í_fûe_t
))

146 !
NGX_OK
)

148 
	`ngx_de°roy_poﬁ
(
poﬁ
);

149  
NULL
;

153 i‡(
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
) {

154 
n
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
;

155 
∑π
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.∑π.
√xt
;Öart;Öart =Öart->next)

157 
n
 +
∑π
->
√…s
;

161 
n
 = 1;

164 i‡(
	`ngx_li°_öô
(&
cy˛e
->
sh¨ed_mem‹y
, 
poﬁ
, 
n
, (
ngx_shm_z⁄e_t
))

165 !
NGX_OK
)

167 
	`ngx_de°roy_poﬁ
(
poﬁ
);

168  
NULL
;

171 
n
 = 
ﬁd_cy˛e
->
li°íög
.
√…s
 ? old_cycle->listening.nelts : 10;

173 
cy˛e
->
li°íög
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_li°íög_t
));

174 i‡(
cy˛e
->
li°íög
.
ñts
 =
NULL
) {

175 
	`ngx_de°roy_poﬁ
(
poﬁ
);

176  
NULL
;

179 
cy˛e
->
li°íög
.
√…s
 = 0;

180 
cy˛e
->
li°íög
.
size
 = (
ngx_li°íög_t
);

181 
cy˛e
->
li°íög
.
«Œoc
 = 
n
;

182 
cy˛e
->
li°íög
.
poﬁ
 =Öool;

185 
	`ngx_queue_öô
(&
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

188 
cy˛e
->
c⁄f_˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
ngx_max_moduÀ
 * (*));

189 i‡(
cy˛e
->
c⁄f_˘x
 =
NULL
) {

190 
	`ngx_de°roy_poﬁ
(
poﬁ
);

191  
NULL
;

195 i‡(
	`gëho°«me
(
ho°«me
, 
NGX_MAXHOSTNAMELEN
) == -1) {

196 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "gethostname() failed");

197 
	`ngx_de°roy_poﬁ
(
poﬁ
);

198  
NULL
;

203 
ho°«me
[
NGX_MAXHOSTNAMELEN
 - 1] = '\0';

204 
cy˛e
->
ho°«me
.
Àn
 = 
	`ngx_°æí
(hostname);

206 
cy˛e
->
ho°«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, cy˛e->ho°«me.
Àn
);

207 i‡(
cy˛e
->
ho°«me
.
d©a
 =
NULL
) {

208 
	`ngx_de°roy_poﬁ
(
poﬁ
);

209  
NULL
;

212 
	`ngx_°æow
(
cy˛e
->
ho°«me
.
d©a
, (
u_ch¨
 *Ëho°«me, cy˛e->ho°«me.
Àn
);

215 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

216 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

220 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

222 i‡(
moduÀ
->
¸óã_c⁄f
) {

223 
rv
 = 
moduÀ
->
	`¸óã_c⁄f
(
cy˛e
);

224 i‡(
rv
 =
NULL
) {

225 
	`ngx_de°roy_poﬁ
(
poﬁ
);

226  
NULL
;

228 
cy˛e
->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
] = 
rv
;

233 
£nv
 = 
ívú⁄
;

236 
	`ngx_memzîo
(&
c⁄f
, (
ngx_c⁄f_t
));

238 
c⁄f
.
¨gs
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 10, (
ngx_°r_t
));

239 i‡(
c⁄f
.
¨gs
 =
NULL
) {

240 
	`ngx_de°roy_poﬁ
(
poﬁ
);

241  
NULL
;

244 
c⁄f
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

245 i‡(
c⁄f
.
ãmp_poﬁ
 =
NULL
) {

246 
	`ngx_de°roy_poﬁ
(
poﬁ
);

247  
NULL
;

251 
c⁄f
.
˘x
 = 
cy˛e
->
c⁄f_˘x
;

252 
c⁄f
.
cy˛e
 = cycle;

253 
c⁄f
.
poﬁ
 =Öool;

254 
c⁄f
.
log
 =Üog;

255 
c⁄f
.
moduÀ_ty≥
 = 
NGX_CORE_MODULE
;

256 
c⁄f
.
cmd_ty≥
 = 
NGX_MAIN_CONF
;

259 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

262 i‡(
	`ngx_c⁄f_∑øm
(&
c⁄f
Ë!
NGX_CONF_OK
) {

263 
ívú⁄
 = 
£nv
;

264 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

265  
NULL
;

268 i‡(
	`ngx_c⁄f_∑r£
(&
c⁄f
, &
cy˛e
->
c⁄f_fûe
Ë!
NGX_CONF_OK
) {

269 
ívú⁄
 = 
£nv
;

270 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

271  
NULL
;

274 i‡(
ngx_ã°_c⁄fig
 && !
ngx_quõt_mode
) {

275 
	`ngx_log_°dîr
(0, "the configuration file %s syntax is ok",

276 
cy˛e
->
c⁄f_fûe
.
d©a
);

279 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

280 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

284 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

286 i‡(
moduÀ
->
öô_c⁄f
) {

287 i‡(
moduÀ
->
	`öô_c⁄f
(
cy˛e
, cy˛e->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
])

288 =
NGX_CONF_ERROR
)

290 
ívú⁄
 = 
£nv
;

291 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

292  
NULL
;

297 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SIGNALLER
) {

298  
cy˛e
;

301 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

303 i‡(
ngx_ã°_c⁄fig
) {

305 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

306 
Áûed
;

309 } i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

316 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

317 
ngx_c‹e_moduÀ
);

318 i‡(
ccf
->
pid
.
Àn
 !
ﬁd_ccf
->pid.len

319 || 
	`ngx_°rcmp
(
ccf
->
pid
.
d©a
, 
ﬁd_ccf
->pid.data) != 0)

323 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

324 
Áûed
;

327 
	`ngx_dñëe_pidfûe
(
ﬁd_cy˛e
);

332 i‡(
	`ngx_ã°_lockfûe
(
cy˛e
->
lock_fûe
.
d©a
, 
log
Ë!
NGX_OK
) {

333 
Áûed
;

337 i‡(
	`ngx_¸óã_∑thes
(
cy˛e
, 
ccf
->
u£r
Ë!
NGX_OK
) {

338 
Áûed
;

342 i‡(
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

343 
cy˛e
->
√w_log
.
fûe
 = 
	`ngx_c⁄f_›í_fûe
(cy˛e, &
îr‹_log
);

344 i‡(
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

345 
Áûed
;

351 
∑π
 = &
cy˛e
->
›í_fûes
.part;

352 
fûe
 = 
∑π
->
ñts
;

354 
i
 = 0; ; i++) {

356 i‡(
i
 >
∑π
->
√…s
) {

357 i‡(
∑π
->
√xt
 =
NULL
) {

360 
∑π
 =Ö¨t->
√xt
;

361 
fûe
 = 
∑π
->
ñts
;

362 
i
 = 0;

365 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

369 
fûe
[
i
].
fd
 = 
	`ngx_›í_fûe
(fûe[i].
«me
.
d©a
,

370 
NGX_FILE_APPEND
,

371 
NGX_FILE_CREATE_OR_OPEN
,

372 
NGX_FILE_DEFAULT_ACCESS
);

374 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

376 &
fûe
[
i
], fûe[i].
fd
, fûe[i].
«me
.
d©a
);

378 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

380 
ngx_›í_fûe_n
 " \"%s\" failed",

381 
fûe
[
i
].
«me
.
d©a
);

382 
Áûed
;

385 #i‡!(
NGX_WIN32
)

386 i‡(
	`f˙é
(
fûe
[
i
].
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

387 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

389 
fûe
[
i
].
«me
.
d©a
);

390 
Áûed
;

395 
cy˛e
->
log
 = &cy˛e->
√w_log
;

396 
poﬁ
->
log
 = &
cy˛e
->
√w_log
;

401 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

402 
shm_z⁄e
 = 
∑π
->
ñts
;

404 
i
 = 0; ; i++) {

406 i‡(
i
 >
∑π
->
√…s
) {

407 i‡(
∑π
->
√xt
 =
NULL
) {

410 
∑π
 =Ö¨t->
√xt
;

411 
shm_z⁄e
 = 
∑π
->
ñts
;

412 
i
 = 0;

415 i‡(
shm_z⁄e
[
i
].
shm
.
size
 == 0) {

416 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

418 &
shm_z⁄e
[
i
].
shm
.
«me
);

419 
Áûed
;

422 
shm_z⁄e
[
i
].
shm
.
log
 = 
cy˛e
->log;

424 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

425 
oshm_z⁄e
 = 
›¨t
->
ñts
;

427 
n
 = 0; ;Ç++) {

429 i‡(
n
 >
›¨t
->
√…s
) {

430 i‡(
›¨t
->
√xt
 =
NULL
) {

433 
›¨t
 = o∑π->
√xt
;

434 
oshm_z⁄e
 = 
›¨t
->
ñts
;

435 
n
 = 0;

438 i‡(
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
 !
oshm_z⁄e
[
n
].shm.name.len) {

442 i‡(
	`ngx_°∫cmp
(
shm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

443 
oshm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

444 
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

450 i‡(
shm_z⁄e
[
i
].
shm
.
size
 =
oshm_z⁄e
[
n
].shm.size) {

451 
shm_z⁄e
[
i
].
shm
.
addr
 = 
oshm_z⁄e
[
n
].shm.addr;

453 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
oshm_z⁄e
[
n
].
d©a
)

454 !
NGX_OK
)

456 
Áûed
;

459 
shm_z⁄e_found
;

462 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
n
].
shm
);

467 i‡(
	`ngx_shm_Æloc
(&
shm_z⁄e
[
i
].
shm
Ë!
NGX_OK
) {

468 
Áûed
;

471 i‡(
	`ngx_öô_z⁄e_poﬁ
(
cy˛e
, &
shm_z⁄e
[
i
]Ë!
NGX_OK
) {

472 
Áûed
;

475 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
NULL
Ë!
NGX_OK
) {

476 
Áûed
;

479 
shm_z⁄e_found
:

487 i‡(
ﬁd_cy˛e
->
li°íög
.
√…s
) {

488 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

489 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

490 
ls
[
i
].
ªmaö
 = 0;

493 
∆s
 = 
cy˛e
->
li°íög
.
ñts
;

494 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

496 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

497 i‡(
ls
[
i
].
ign‹e
) {

501 i‡(
	`ngx_cmp_sockaddr
(
∆s
[
n
].
sockaddr
, 
ls
[
i
].sockaddrË=
NGX_OK
)

503 
∆s
[
n
].
fd
 = 
ls
[
i
].fd;

504 
∆s
[
n
].
¥evious
 = &
ls
[
i
];

505 
ls
[
i
].
ªmaö
 = 1;

507 i‡(
ls
[
n
].
backlog
 !
∆s
[
i
].backlog) {

508 
∆s
[
n
].
li°í
 = 1;

511 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

517 
∆s
[
n
].
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

519 i‡(
ls
[
i
].
ac˚±_fûãr
 && 
∆s
[
n
].accept_filter) {

520 i‡(
	`ngx_°rcmp
(
ls
[
i
].
ac˚±_fûãr
,

521 
∆s
[
n
].
ac˚±_fûãr
)

524 
∆s
[
n
].
dñëe_de„ºed
 = 1;

525 
∆s
[
n
].
add_de„ºed
 = 1;

528 } i‡(
ls
[
i
].
ac˚±_fûãr
) {

529 
∆s
[
n
].
dñëe_de„ºed
 = 1;

531 } i‡(
∆s
[
n
].
ac˚±_fûãr
) {

532 
∆s
[
n
].
add_de„ºed
 = 1;

536 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

538 i‡(
ls
[
n
].
de„ºed_ac˚±
 && !
∆s
[n].deferred_accept) {

539 
∆s
[
n
].
dñëe_de„ºed
 = 1;

541 } i‡(
ls
[
i
].
de„ºed_ac˚±
 !
∆s
[
n
].deferred_accept)

543 
∆s
[
n
].
add_de„ºed
 = 1;

550 i‡(
∆s
[
n
].
fd
 == -1) {

551 
∆s
[
n
].
›í
 = 1;

556 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

557 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

558 
ls
[
i
].
›í
 = 1;

559 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

560 i‡(
ls
[
i
].
ac˚±_fûãr
) {

561 
ls
[
i
].
add_de„ºed
 = 1;

564 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

565 i‡(
ls
[
i
].
de„ºed_ac˚±
) {

566 
ls
[
i
].
add_de„ºed
 = 1;

572 i‡(
	`ngx_›í_li°íög_sockës
(
cy˛e
Ë!
NGX_OK
) {

573 
Áûed
;

576 i‡(!
ngx_ã°_c⁄fig
) {

577 
	`ngx_c⁄figuª_li°íög_sockës
(
cy˛e
);

583 i‡(!
ngx_u£_°dîr
 && 
cy˛e
->
log
->
fûe
->
fd
 !
ngx_°dîr
) {

585 i‡(
	`ngx_£t_°dîr
(
cy˛e
->
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

586 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

587 
ngx_£t_°dîr_n
 " failed");

591 
poﬁ
->
log
 = 
cy˛e
->log;

593 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

594 i‡(
ngx_moduÀs
[
i
]->
öô_moduÀ
) {

595 i‡(
ngx_moduÀs
[
i
]->
	`öô_moduÀ
(
cy˛e
Ë!
NGX_OK
) {

597 
	`exô
(1);

607 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

608 
oshm_z⁄e
 = 
›¨t
->
ñts
;

610 
i
 = 0; ; i++) {

612 i‡(
i
 >
›¨t
->
√…s
) {

613 i‡(
›¨t
->
√xt
 =
NULL
) {

614 
ﬁd_shm_z⁄e_d⁄e
;

616 
›¨t
 = o∑π->
√xt
;

617 
oshm_z⁄e
 = 
›¨t
->
ñts
;

618 
i
 = 0;

621 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

622 
shm_z⁄e
 = 
∑π
->
ñts
;

624 
n
 = 0; ;Ç++) {

626 i‡(
n
 >
∑π
->
√…s
) {

627 i‡(
∑π
->
√xt
 =
NULL
) {

630 
∑π
 =Ö¨t->
√xt
;

631 
shm_z⁄e
 = 
∑π
->
ñts
;

632 
n
 = 0;

635 i‡(
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
 =
shm_z⁄e
[
n
].shm.name.len

636 && 
	`ngx_°∫cmp
(
oshm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

637 
shm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

638 
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

641 
live_shm_z⁄e
;

645 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
i
].
shm
);

647 
live_shm_z⁄e
:

652 
ﬁd_shm_z⁄e_d⁄e
:

657 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

658 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

660 i‡(
ls
[
i
].
ªmaö
 ||Üs[i].
fd
 == -1) {

664 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

665 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

666 
ngx_˛o£_sockë_n
 "Üistening socket on %V failed",

667 &
ls
[
i
].
addr_ãxt
);

670 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

672 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

673 
u_ch¨
 *
«me
;

675 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

677 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

678 "dñëög sockë %s", 
«me
);

680 i‡(
	`ngx_dñëe_fûe
(
«me
) == -1) {

681 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

682 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

692 
∑π
 = &
ﬁd_cy˛e
->
›í_fûes
.part;

693 
fûe
 = 
∑π
->
ñts
;

695 
i
 = 0; ; i++) {

697 i‡(
i
 >
∑π
->
√…s
) {

698 i‡(
∑π
->
√xt
 =
NULL
) {

701 
∑π
 =Ö¨t->
√xt
;

702 
fûe
 = 
∑π
->
ñts
;

703 
i
 = 0;

706 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

710 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

711 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

712 
ngx_˛o£_fûe_n
 " \"%s\" failed",

713 
fûe
[
i
].
«me
.
d©a
);

717 
	`ngx_de°roy_poﬁ
(
c⁄f
.
ãmp_poﬁ
);

719 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_MASTER
 || 
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

727 
ív
 = 
ívú⁄
;

728 
ívú⁄
 = 
£nv
;

730 
	`ngx_de°roy_poﬁ
(
ﬁd_cy˛e
->
poﬁ
);

731 
cy˛e
->
ﬁd_cy˛e
 = 
NULL
;

733 
ívú⁄
 = 
ív
;

735  
cy˛e
;

739 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

740 
ngx_ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
cy˛e
->
log
);

741 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

742 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

744 
	`exô
(1);

747 
n
 = 10;

748 
ngx_ﬁd_cy˛es
.
ñts
 = 
	`ngx_pˇŒoc
(
ngx_ãmp_poﬁ
,

749 
n
 * (
ngx_cy˛e_t
 *));

750 i‡(
ngx_ﬁd_cy˛es
.
ñts
 =
NULL
) {

751 
	`exô
(1);

753 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

754 
ngx_ﬁd_cy˛es
.
size
 = (
ngx_cy˛e_t
 *);

755 
ngx_ﬁd_cy˛es
.
«Œoc
 = 
n
;

756 
ngx_ﬁd_cy˛es
.
poﬁ
 = 
ngx_ãmp_poﬁ
;

758 
ngx_˛ó√r_evít
.
h™dÀr
 = 
ngx_˛ón_ﬁd_cy˛es
;

759 
ngx_˛ó√r_evít
.
log
 = 
cy˛e
->log;

760 
ngx_˛ó√r_evít
.
d©a
 = &
dumb
;

761 
dumb
.
fd
 = (
ngx_sockë_t
) -1;

764 
ngx_ãmp_poﬁ
->
log
 = 
cy˛e
->log;

766 
ﬁd
 = 
	`ngx_¨øy_push
(&
ngx_ﬁd_cy˛es
);

767 i‡(
ﬁd
 =
NULL
) {

768 
	`exô
(1);

770 *
ﬁd
 = 
ﬁd_cy˛e
;

772 i‡(!
ngx_˛ó√r_evít
.
timî_£t
) {

773 
	`ngx_add_timî
(&
ngx_˛ó√r_evít
, 30000);

774 
ngx_˛ó√r_evít
.
timî_£t
 = 1;

777  
cy˛e
;

780 
Áûed
:

782 i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

783 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

784 
ngx_c‹e_moduÀ
);

785 i‡(
ﬁd_ccf
->
ívú⁄mít
) {

786 
ívú⁄
 = 
ﬁd_ccf
->
ívú⁄mít
;

792 
∑π
 = &
cy˛e
->
›í_fûes
.part;

793 
fûe
 = 
∑π
->
ñts
;

795 
i
 = 0; ; i++) {

797 i‡(
i
 >
∑π
->
√…s
) {

798 i‡(
∑π
->
√xt
 =
NULL
) {

801 
∑π
 =Ö¨t->
√xt
;

802 
fûe
 = 
∑π
->
ñts
;

803 
i
 = 0;

806 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

810 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

811 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

812 
ngx_˛o£_fûe_n
 " \"%s\" failed",

813 
fûe
[
i
].
«me
.
d©a
);

817 i‡(
ngx_ã°_c⁄fig
) {

818 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

819  
NULL
;

822 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

823 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

824 i‡(
ls
[
i
].
fd
 =-1 || !ls[i].
›í
) {

828 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

829 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

830 
ngx_˛o£_sockë_n
 " %V failed",

831 &
ls
[
i
].
addr_ãxt
);

835 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

837  
NULL
;

838 
	}
}

842 
	$ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
)

844 
	`ngx_de°roy_poﬁ
(
c⁄f
->
ãmp_poﬁ
);

845 
	`ngx_de°roy_poﬁ
(
c⁄f
->
poﬁ
);

846 
	}
}

849 
ngx_öt_t


850 
	$ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, sockadd∏*
ß2
)

852 
sockaddr_ö
 *
sö1
, *
sö2
;

853 #i‡(
NGX_HAVE_INET6
)

854 
sockaddr_ö6
 *
sö61
, *
sö62
;

856 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

857 
sockaddr_un
 *
ßun1
, *
ßun2
;

860 i‡(
ß1
->
ß_Ámûy
 !
ß2
->sa_family) {

861  
NGX_DECLINED
;

864 
ß1
->
ß_Ámûy
) {

866 #i‡(
NGX_HAVE_INET6
)

867 
AF_INET6
:

868 
sö61
 = (
sockaddr_ö6
 *Ë
ß1
;

869 
sö62
 = (
sockaddr_ö6
 *Ë
ß2
;

871 i‡(
sö61
->
sö6_p‹t
 !
sö62
->sin6_port) {

872  
NGX_DECLINED
;

875 i‡(
	`ngx_memcmp
(&
sö61
->
sö6_addr
, &
sö62
->sin6_addr, 16) != 0) {

876  
NGX_DECLINED
;

882 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

883 
AF_UNIX
:

884 
ßun1
 = (
sockaddr_un
 *Ë
ß1
;

885 
ßun2
 = (
sockaddr_un
 *Ë
ß2
;

887 i‡(
	`ngx_memcmp
(&
ßun1
->
sun_∑th
, &
ßun2
->sun_path,

888 (
ßun1
->
sun_∑th
))

891  
NGX_DECLINED
;

899 
sö1
 = (
sockaddr_ö
 *Ë
ß1
;

900 
sö2
 = (
sockaddr_ö
 *Ë
ß2
;

902 i‡(
sö1
->
sö_p‹t
 !
sö2
->sin_port) {

903  
NGX_DECLINED
;

906 i‡(
sö1
->
sö_addr
.
s_addr
 !
sö2
->sin_addr.s_addr) {

907  
NGX_DECLINED
;

913  
NGX_OK
;

914 
	}
}

917 
ngx_öt_t


918 
	$ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_shm_z⁄e_t
 *
zn
)

920 
u_ch¨
 *
fûe
;

921 
ngx_¶ab_poﬁ_t
 *
•
;

923 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
zn
->
shm
.
addr
;

925 i‡(
zn
->
shm
.
exi°s
) {

927 i‡(
•
 =•->
addr
) {

928  
NGX_OK
;

931 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

933 &
zn
->
shm
.
«me
, 
•
->
addr
, sp);

934  
NGX_ERROR
;

937 
•
->
íd
 = 
zn
->
shm
.
addr
 + zn->shm.
size
;

938 
•
->
mö_shi·
 = 3;

939 
•
->
addr
 = 
zn
->
shm
.addr;

941 #i‡(
NGX_HAVE_ATOMIC_OPS
)

943 
fûe
 = 
NULL
;

947 
fûe
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, cy˛e->
lock_fûe
.
Àn
 + 
zn
->
shm
.
«me
.len);

948 i‡(
fûe
 =
NULL
) {

949  
NGX_ERROR
;

952 (Ë
	`ngx_•rötf
(
fûe
, "%V%V%Z", &
cy˛e
->
lock_fûe
, &
zn
->
shm
.
«me
);

956 i‡(
	`ngx_shmtx_¸óã
(&
•
->
muãx
, (*Ë&•->
lock
, 
fûe
Ë!
NGX_OK
) {

957  
NGX_ERROR
;

960 
	`ngx_¶ab_öô
(
•
);

962  
NGX_OK
;

963 
	}
}

966 
ngx_öt_t


967 
	$ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
)

969 
size_t
 
Àn
;

970 
ngx_uöt_t
 
¸óã
;

971 
ngx_fûe_t
 
fûe
;

972 
u_ch¨
 
pid
[
NGX_INT64_LEN
 + 2];

974 i‡(
ngx_¥o˚ss
 > 
NGX_PROCESS_MASTER
) {

975  
NGX_OK
;

978 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

980 
fûe
.
«me
 = *name;

981 
fûe
.
log
 =Üog;

983 
¸óã
 = 
ngx_ã°_c⁄fig
 ? 
NGX_FILE_CREATE_OR_OPEN
 : 
NGX_FILE_TRUNCATE
;

985 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
,

986 
¸óã
, 
NGX_FILE_DEFAULT_ACCESS
);

988 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

989 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

990 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

991  
NGX_ERROR
;

994 i‡(!
ngx_ã°_c⁄fig
) {

995 
Àn
 = 
	`ngx_¢¥ötf
(
pid
, 
NGX_INT64_LEN
 + 2, "%P%N", 
ngx_pid
) -Öid;

997 i‡(
	`ngx_wrôe_fûe
(&
fûe
, 
pid
, 
Àn
, 0Ë=
NGX_ERROR
) {

998  
NGX_ERROR
;

1002 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1003 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1004 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1007  
NGX_OK
;

1008 
	}
}

1012 
	$ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
)

1014 
u_ch¨
 *
«me
;

1015 
ngx_c‹e_c⁄f_t
 *
ccf
;

1017 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1019 
«me
 = 
ngx_√w_bö¨y
 ? 
ccf
->
ﬁdpid
.
d©a
 : ccf->
pid
.data;

1021 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1022 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1023 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1025 
	}
}

1028 
ngx_öt_t


1029 
	$ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
)

1031 
ssize_t
 
n
;

1032 
ngx_öt_t
 
pid
;

1033 
ngx_fûe_t
 
fûe
;

1034 
ngx_c‹e_c⁄f_t
 *
ccf
;

1035 
u_ch¨
 
buf
[
NGX_INT64_LEN
 + 2];

1037 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "signalÖrocess started");

1039 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1041 
fûe
.
«me
 = 
ccf
->
pid
;

1042 
fûe
.
log
 = 
cy˛e
->log;

1044 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
,

1045 
NGX_FILE_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1047 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1048 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 
ngx_î∫o
,

1049 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1053 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 
NGX_INT64_LEN
 + 2, 0);

1055 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1056 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1057 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1060 i‡(
n
 =
NGX_ERROR
) {

1064 
n
-- && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

1066 
pid
 = 
	`ngx_©oi
(
buf
, ++
n
);

1068 i‡(
pid
 =
NGX_ERROR
) {

1069 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 0,

1071 
n
, 
buf
, 
fûe
.
«me
.
d©a
);

1075  
	`ngx_os_sig«l_¥o˚ss
(
cy˛e
, 
sig
, 
pid
);

1077 
	}
}

1080 
ngx_öt_t


1081 
	$ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
)

1083 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

1084 
ngx_fd_t
 
fd
;

1086 
fd
 = 
	`ngx_›í_fûe
(
fûe
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

1087 
NGX_FILE_DEFAULT_ACCESS
);

1089 i‡(
fd
 =
NGX_INVALID_FILE
) {

1090 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

1091 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
);

1092  
NGX_ERROR
;

1095 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1096 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1097 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
);

1100 i‡(
	`ngx_dñëe_fûe
(
fûe
Ë=
NGX_FILE_ERROR
) {

1101 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1102 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
fûe
);

1107  
NGX_OK
;

1108 
	}
}

1112 
	$ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

1114 
ssize_t
 
n
, 
Àn
;

1115 
ngx_fd_t
 
fd
;

1116 
ngx_uöt_t
 
i
;

1117 
ngx_li°_∑π_t
 *
∑π
;

1118 
ngx_›í_fûe_t
 *
fûe
;

1120 
∑π
 = &
cy˛e
->
›í_fûes
.part;

1121 
fûe
 = 
∑π
->
ñts
;

1123 
i
 = 0; ; i++) {

1125 i‡(
i
 >
∑π
->
√…s
) {

1126 i‡(
∑π
->
√xt
 =
NULL
) {

1129 
∑π
 =Ö¨t->
√xt
;

1130 
fûe
 = 
∑π
->
ñts
;

1131 
i
 = 0;

1134 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

1138 
Àn
 = 
fûe
[
i
].
pos
 - fûe[i].
buf„r
;

1140 i‡(
fûe
[
i
].
buf„r
 && 
Àn
 != 0) {

1142 
n
 = 
	`ngx_wrôe_fd
(
fûe
[
i
].
fd
, fûe[i].
buf„r
, 
Àn
);

1144 i‡(
n
 =
NGX_FILE_ERROR
) {

1145 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1146 
ngx_wrôe_fd_n
 "Åo \"%s\" failed",

1147 
fûe
[
i
].
«me
.
d©a
);

1149 } i‡(
n
 !
Àn
) {

1150 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

1151 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

1152 
fûe
[
i
].
«me
.
d©a
, 
n
, 
Àn
);

1155 
fûe
[
i
].
pos
 = fûe[i].
buf„r
;

1158 
fd
 = 
	`ngx_›í_fûe
(
fûe
[
i
].
«me
.
d©a
, 
NGX_FILE_APPEND
,

1159 
NGX_FILE_CREATE_OR_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1161 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

1163 
fûe
[
i
].
«me
.
d©a
, fûe[i].
fd
, fd);

1165 i‡(
fd
 =
NGX_INVALID_FILE
) {

1166 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1167 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1171 #i‡!(
NGX_WIN32
)

1172 i‡(
u£r
 !(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1173 
ngx_fûe_öfo_t
 
fi
;

1175 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, &
fi
)

1176 =
NGX_FILE_ERROR
)

1178 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1179 
ngx_fûe_öfo_n
 " \"%s\" failed",

1180 
fûe
[
i
].
«me
.
d©a
);

1182 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1183 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1184 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1185 
fûe
[
i
].
«me
.
d©a
);

1189 i‡(
fi
.
°_uid
 !
u£r
) {

1190 i‡(
	`chown
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
u£r
, -1) == -1) {

1191 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1193 
fûe
[
i
].
«me
.
d©a
, 
u£r
);

1195 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1196 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1197 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1198 
fûe
[
i
].
«me
.
d©a
);

1203 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
)) != (S_IRUSR|S_IWUSR)) {

1205 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
);

1207 i‡(
	`chmod
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

1208 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1209 "chmod(Ë\"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1211 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1212 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1213 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1214 
fûe
[
i
].
«me
.
d©a
);

1220 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

1221 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1223 
fûe
[
i
].
«me
.
d©a
);

1225 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1226 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1227 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1228 
fûe
[
i
].
«me
.
d©a
);

1235 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

1236 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1237 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1238 
fûe
[
i
].
«me
.
d©a
);

1241 
fûe
[
i
].
fd
 = fd;

1244 #i‡!(
NGX_WIN32
)

1246 i‡(
cy˛e
->
log
->
fûe
->
fd
 !
STDERR_FILENO
) {

1247 i‡(
	`dup2
(
cy˛e
->
log
->
fûe
->
fd
, 
STDERR_FILENO
) == -1) {

1248 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1254 
	}
}

1257 
ngx_shm_z⁄e_t
 *

1258 
	$ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
size_t
 
size
, *
èg
)

1260 
ngx_uöt_t
 
i
;

1261 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1262 
ngx_li°_∑π_t
 *
∑π
;

1264 
∑π
 = &
cf
->
cy˛e
->
sh¨ed_mem‹y
.part;

1265 
shm_z⁄e
 = 
∑π
->
ñts
;

1267 
i
 = 0; ; i++) {

1269 i‡(
i
 >
∑π
->
√…s
) {

1270 i‡(
∑π
->
√xt
 =
NULL
) {

1273 
∑π
 =Ö¨t->
√xt
;

1274 
shm_z⁄e
 = 
∑π
->
ñts
;

1275 
i
 = 0;

1278 i‡(
«me
->
Àn
 !
shm_z⁄e
[
i
].
shm
.name.len) {

1282 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
shm_z⁄e
[
i
].
shm
.«me.d©a,Çame->
Àn
)

1288 i‡(
size
 && sizê!
shm_z⁄e
[
i
].
shm
.size) {

1289 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1292 
size
, &
shm_z⁄e
[
i
].
shm
.
«me
, shm_zone[i].shm.size);

1293  
NULL
;

1296 i‡(
èg
 !
shm_z⁄e
[
i
].tag) {

1297 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1300 &
shm_z⁄e
[
i
].
shm
.
«me
);

1301  
NULL
;

1304  &
shm_z⁄e
[
i
];

1307 
shm_z⁄e
 = 
	`ngx_li°_push
(&
cf
->
cy˛e
->
sh¨ed_mem‹y
);

1309 i‡(
shm_z⁄e
 =
NULL
) {

1310  
NULL
;

1313 
shm_z⁄e
->
d©a
 = 
NULL
;

1314 
shm_z⁄e
->
shm
.
log
 = 
cf
->
cy˛e
->log;

1315 
shm_z⁄e
->
shm
.
size
 = size;

1316 
shm_z⁄e
->
shm
.
«me
 = *name;

1317 
shm_z⁄e
->
shm
.
exi°s
 = 0;

1318 
shm_z⁄e
->
öô
 = 
NULL
;

1319 
shm_z⁄e
->
èg
 =Åag;

1321  
shm_z⁄e
;

1322 
	}
}

1326 
	$ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
)

1328 
ngx_uöt_t
 
i
, 
n
, 
found
, 
live
;

1329 
ngx_log_t
 *
log
;

1330 
ngx_cy˛e_t
 **
cy˛e
;

1332 
log
 = 
ngx_cy˛e
->log;

1333 
ngx_ãmp_poﬁ
->
log
 =Üog;

1335 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "clean old cycles");

1337 
live
 = 0;

1339 
cy˛e
 = 
ngx_ﬁd_cy˛es
.
ñts
;

1340 
i
 = 0; i < 
ngx_ﬁd_cy˛es
.
√…s
; i++) {

1342 i‡(
cy˛e
[
i
] =
NULL
) {

1346 
found
 = 0;

1348 
n
 = 0;Ç < 
cy˛e
[
i
]->
c⁄√˘i⁄_n
;Ç++) {

1349 i‡(
cy˛e
[
i
]->
c⁄√˘i⁄s
[
n
].
fd
 !(
ngx_sockë_t
) -1) {

1350 
found
 = 1;

1352 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "livêfd:%d", 
n
);

1358 i‡(
found
) {

1359 
live
 = 1;

1363 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "˛ó¿ﬁd cy˛e: %d", 
i
);

1365 
	`ngx_de°roy_poﬁ
(
cy˛e
[
i
]->
poﬁ
);

1366 
cy˛e
[
i
] = 
NULL
;

1369 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "ﬁd cy˛e†°©us: %d", 
live
);

1371 i‡(
live
) {

1372 
	`ngx_add_timî
(
ev
, 30000);

1375 
	`ngx_de°roy_poﬁ
(
ngx_ãmp_poﬁ
);

1376 
ngx_ãmp_poﬁ
 = 
NULL
;

1377 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

1379 
	}
}

	@src/core/ngx_cycle.h

8 #i‚de‡
_NGX_CYCLE_H_INCLUDED_


9 
	#_NGX_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‚de‡
NGX_CYCLE_POOL_SIZE


17 
	#NGX_CYCLE_POOL_SIZE
 16384

	)

21 
	#NGX_DEBUG_POINTS_STOP
 1

	)

22 
	#NGX_DEBUG_POINTS_ABORT
 2

	)

25 
ngx_shm_z⁄e_s
 
	tngx_shm_z⁄e_t
;

27 
	$ngx_öt_t
 (*
	tngx_shm_z⁄e_öô_±
Ë(
	tngx_shm_z⁄e_t
 *
	tz⁄e
, *
	td©a
);

29 
	sngx_shm_z⁄e_s
 {

30 *
d©a
;

31 
ngx_shm_t
 
shm
;

32 
ngx_shm_z⁄e_öô_±
 
öô
;

33 *
èg
;

37 
	sngx_cy˛e_s
 {

38 ****
c⁄f_˘x
;

39 
ngx_poﬁ_t
 *
poﬁ
;

41 
ngx_log_t
 *
log
;

42 
ngx_log_t
 
√w_log
;

44 
ngx_c⁄√˘i⁄_t
 **
fûes
;

45 
ngx_c⁄√˘i⁄_t
 *
‰ì_c⁄√˘i⁄s
;

46 
ngx_uöt_t
 
‰ì_c⁄√˘i⁄_n
;

48 
ngx_queue_t
 
ªußbÀ_c⁄√˘i⁄s_queue
;

50 
ngx_¨øy_t
 
li°íög
;

51 
ngx_¨øy_t
 
∑thes
;

52 
ngx_li°_t
 
›í_fûes
;

53 
ngx_li°_t
 
sh¨ed_mem‹y
;

55 
ngx_uöt_t
 
c⁄√˘i⁄_n
;

56 
ngx_uöt_t
 
fûes_n
;

58 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄s
;

59 
ngx_evít_t
 *
ªad_evíts
;

60 
ngx_evít_t
 *
wrôe_evíts
;

62 
ngx_cy˛e_t
 *
ﬁd_cy˛e
;

64 
ngx_°r_t
 
c⁄f_fûe
;

65 
ngx_°r_t
 
c⁄f_∑øm
;

66 
ngx_°r_t
 
c⁄f_¥efix
;

67 
ngx_°r_t
 
¥efix
;

68 
ngx_°r_t
 
lock_fûe
;

69 
ngx_°r_t
 
ho°«me
;

74 
ngx_Êag_t
 
d´m⁄
;

75 
ngx_Êag_t
 
ma°î
;

77 
ngx_m£c_t
 
timî_ªsﬁuti⁄
;

79 
ngx_öt_t
 
w‹kî_¥o˚s£s
;

80 
ngx_öt_t
 
debug_poöts
;

82 
ngx_öt_t
 
æimô_nofûe
;

83 
ngx_öt_t
 
æimô_sig≥ndög
;

84 
off_t
 
æimô_c‹e
;

86 
¥i‹ôy
;

88 
ngx_uöt_t
 
˝u_afföôy_n
;

89 
u_l⁄g
 *
˝u_afföôy
;

91 *
u£∫ame
;

92 
ngx_uid_t
 
u£r
;

93 
ngx_gid_t
 
group
;

95 
ngx_°r_t
 
w‹kög_dúe˘‹y
;

96 
ngx_°r_t
 
lock_fûe
;

98 
ngx_°r_t
 
pid
;

99 
ngx_°r_t
 
ﬁdpid
;

101 
ngx_¨øy_t
 
ív
;

102 **
ívú⁄mít
;

104 #i‡(
NGX_THREADS
)

105 
ngx_öt_t
 
w‹kî_thªads
;

106 
size_t
 
thªad_°ack_size
;

109 } 
	tngx_c‹e_c⁄f_t
;

113 
ngx_poﬁ_t
 *
poﬁ
;

114 } 
	tngx_c‹e_és_t
;

117 
	#ngx_is_öô_cy˛e
(
cy˛e
Ë(cy˛e->
c⁄f_˘x
 =
NULL
)

	)

120 
ngx_cy˛e_t
 *
	`ngx_öô_cy˛e
“gx_cy˛e_à*
ﬁd_cy˛e
);

121 
ngx_öt_t
 
	`ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
);

122 
	`ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
);

123 
ngx_öt_t
 
	`ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
);

124 
	`ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

125 **
	`ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
);

126 
ngx_pid_t
 
	`ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
);

127 
u_l⁄g
 
	`ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
);

128 
ngx_shm_z⁄e_t
 *
	`ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

129 
size_t
 
size
, *
èg
);

132 vﬁ©ûê
ngx_cy˛e_t
 *
ngx_cy˛e
;

133 
ngx_¨øy_t
 
ngx_ﬁd_cy˛es
;

134 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

135 
ngx_uöt_t
 
ngx_ã°_c⁄fig
;

136 
ngx_uöt_t
 
ngx_quõt_mode
;

137 #i‡(
NGX_THREADS
)

138 
ngx_és_key_t
 
ngx_c‹e_és_key
;

	@src/core/ngx_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_©omic_t
 
	gãmp_numbî
 = 0;

13 
ngx_©omic_t
 *
	gngx_ãmp_numbî
 = &
ãmp_numbî
;

14 
ngx_©omic_öt_t
 
	gngx_øndom_numbî
 = 123456;

17 
ssize_t


18 
	$ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
)

20 
ngx_öt_t
 
rc
;

22 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

23 
rc
 = 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

24 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
);

26 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_AGAIN
) {

27  
rc
;

30 i‡(
tf
->
log_Àvñ
) {

31 
	`ngx_log_îr‹
(
tf
->
log_Àvñ
,Åf->
fûe
.
log
, 0, "%s %V",

32 
tf
->
w¨n
, &tf->
fûe
.
«me
);

36  
	`ngx_wrôe_chaö_to_fûe
(&
tf
->
fûe
, 
chaö
,Åf->
off£t
,Åf->
poﬁ
);

37 
	}
}

40 
ngx_öt_t


41 
	$ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
, 
ngx_poﬁ_t
 *
poﬁ
,

42 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,Çgx_uöt_à
ac˚ss
)

44 
uöt32_t
 
n
;

45 
ngx_îr_t
 
îr
;

46 
ngx_poﬁ_˛ónup_t
 *
˛n
;

47 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

49 
fûe
->
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len + 10;

51 
fûe
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, fûe->«me.
Àn
 + 1);

52 i‡(
fûe
->
«me
.
d©a
 =
NULL
) {

53  
NGX_ERROR
;

57 
i
 = 0; i < 
fûe
->
«me
.
Àn
; i++) {

58 
fûe
->
«me
.
d©a
[
i
] = 'X';

62 
	`ngx_mem˝y
(
fûe
->
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

64 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0);

66 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

67 i‡(
˛n
 =
NULL
) {

68  
NGX_ERROR
;

72 (Ë
	`ngx_•rötf
(
fûe
->
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len,

73 "%010uD%Z", 
n
);

75 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
fûe
->
«me
.
d©a
, fûe->«me.
Àn
);

77 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

78 "hashedÖ©h: %s", 
fûe
->
«me
.
d©a
);

80 
fûe
->
fd
 = 
	`ngx_›í_ãmpfûe
(fûe->
«me
.
d©a
, 
≥rsi°ít
, 
ac˚ss
);

82 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

83 "ãm∞fd:%d", 
fûe
->
fd
);

85 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

87 
˛n
->
h™dÀr
 = 
˛ón
 ? 
ngx_poﬁ_dñëe_fûe
 : 
ngx_poﬁ_˛ónup_fûe
;

88 
˛nf
 = 
˛n
->
d©a
;

90 
˛nf
->
fd
 = 
fûe
->fd;

91 
˛nf
->
«me
 = 
fûe
->«me.
d©a
;

92 
˛nf
->
log
 = 
poﬁ
->log;

94  
NGX_OK
;

97 
îr
 = 
ngx_î∫o
;

99 i‡(
îr
 =
NGX_EEXIST
) {

100 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(1);

104 i‡((
∑th
->
Àvñ
[0] =0Ë|| (
îr
 !
NGX_ENOPATH
)) {

105 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

106 
ngx_›í_ãmpfûe_n
 " \"%s\" failed",

107 
fûe
->
«me
.
d©a
);

108  
NGX_ERROR
;

111 i‡(
	`ngx_¸óã_∑th
(
fûe
, 
∑th
Ë=
NGX_ERROR
) {

112  
NGX_ERROR
;

115 
	}
}

119 
	$ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
)

121 
size_t
 
i
, 
Àvñ
;

122 
ngx_uöt_t
 
n
;

124 
i
 = 
∑th
->
«me
.
Àn
 + 1;

126 
fûe
[
∑th
->
«me
.
Àn
 +Öath->len] = '/';

128 
n
 = 0;Ç < 3;Ç++) {

129 
Àvñ
 = 
∑th
->Àvñ[
n
];

131 i‡(
Àvñ
 == 0) {

135 
Àn
 -
Àvñ
;

136 
fûe
[
i
 - 1] = '/';

137 
	`ngx_mem˝y
(&
fûe
[
i
], &fûe[
Àn
], 
Àvñ
);

138 
i
 +
Àvñ
 + 1;

140 
	}
}

143 
ngx_öt_t


144 
	$ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
)

146 
size_t
 
pos
;

147 
ngx_îr_t
 
îr
;

148 
ngx_uöt_t
 
i
;

150 
pos
 = 
∑th
->
«me
.
Àn
;

152 
i
 = 0; i < 3; i++) {

153 i‡(
∑th
->
Àvñ
[
i
] == 0) {

157 
pos
 +
∑th
->
Àvñ
[
i
] + 1;

159 
fûe
->
«me
.
d©a
[
pos
] = '\0';

161 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

162 "ãm∞fûe: \"%s\"", 
fûe
->
«me
.
d©a
);

164 i‡(
	`ngx_¸óã_dú
(
fûe
->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

165 
îr
 = 
ngx_î∫o
;

166 i‡(
îr
 !
NGX_EEXIST
) {

167 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

168 
ngx_¸óã_dú_n
 " \"%s\" failed",

169 
fûe
->
«me
.
d©a
);

170  
NGX_ERROR
;

174 
fûe
->
«me
.
d©a
[
pos
] = '/';

177  
NGX_OK
;

178 
	}
}

181 
ngx_îr_t


182 
	$ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
)

184 
u_ch¨
 *
p
, 
ch
;

185 
ngx_îr_t
 
îr
;

187 
îr
 = 0;

189 #i‡(
NGX_WIN32
)

190 
p
 = 
dú
 + 3;

192 
p
 = 
dú
 + 1;

195  ; *
p
;Ö++) {

196 
ch
 = *
p
;

198 i‡(
ch
 != '/') {

202 *
p
 = '\0';

204 i‡(
	`ngx_¸óã_dú
(
dú
, 
ac˚ss
Ë=
NGX_FILE_ERROR
) {

205 
îr
 = 
ngx_î∫o
;

207 
îr
) {

208 
NGX_EEXIST
:

209 
îr
 = 0;

210 
NGX_EACCES
:

214  
îr
;

218 *
p
 = '/';

221  
îr
;

222 
	}
}

225 
ngx_©omic_uöt_t


226 
	$ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
)

228 
ngx_©omic_uöt_t
 
n
, 
add
;

230 
add
 = 
cﬁlisi⁄
 ? 
ngx_øndom_numbî
 : 1;

232 
n
 = 
	`ngx_©omic_„tch_add
(
ngx_ãmp_numbî
, 
add
);

234  
n
 + 
add
;

235 
	}
}

239 
	$ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

241 *
p
 = 
c⁄f
;

243 
ssize_t
 
Àvñ
;

244 
ngx_°r_t
 *
vÆue
;

245 
ngx_uöt_t
 
i
, 
n
;

246 
ngx_∑th_t
 *
∑th
, **
¶Ÿ
;

248 
¶Ÿ
 = (
ngx_∑th_t
 **Ë(
p
 + 
cmd
->
off£t
);

250 i‡(*
¶Ÿ
) {

254 
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

255 i‡(
∑th
 =
NULL
) {

256  
NGX_CONF_ERROR
;

259 
vÆue
 = 
cf
->
¨gs
->
ñts
;

261 
∑th
->
«me
 = 
vÆue
[1];

263 i‡(
∑th
->
«me
.
d©a
[∑th->«me.
Àn
 - 1] == '/') {

264 
∑th
->
«me
.
Àn
--;

267 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
->
«me
, 0Ë!
NGX_OK
) {

268  
NULL
;

271 
∑th
->
Àn
 = 0;

272 
∑th
->
m™agî
 = 
NULL
;

273 
∑th
->
lﬂdî
 = 
NULL
;

274 
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

275 
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

277 
i
 = 0, 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
; i++,Ç++) {

278 
Àvñ
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
, vÆue[n].
Àn
);

279 i‡(
Àvñ
 =
NGX_ERROR
 ||Üevel == 0) {

283 
∑th
->
Àvñ
[
i
] =Üevel;

284 
∑th
->
Àn
 +
Àvñ
 + 1;

287 
i
 < 3) {

288 
∑th
->
Àvñ
[
i
++] = 0;

291 *
¶Ÿ
 = 
∑th
;

293 i‡(
	`ngx_add_∑th
(
cf
, 
¶Ÿ
Ë=
NGX_ERROR
) {

294  
NGX_CONF_ERROR
;

297  
NGX_CONF_OK
;

298 
	}
}

302 
	$ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,Çgx_∑th_à*
¥ev
,

303 
ngx_∑th_öô_t
 *
öô
)

305 i‡(*
∑th
) {

306  
NGX_CONF_OK
;

309 i‡(
¥ev
) {

310 *
∑th
 = 
¥ev
;

311  
NGX_CONF_OK
;

314 *
∑th
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

315 i‡(*
∑th
 =
NULL
) {

316  
NGX_CONF_ERROR
;

319 (*
∑th
)->
«me
 = 
öô
->name;

321 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &(*
∑th
)->
«me
, 0Ë!
NGX_OK
) {

322  
NGX_CONF_ERROR
;

325 (*
∑th
)->
Àvñ
[0] = 
öô
->level[0];

326 (*
∑th
)->
Àvñ
[1] = 
öô
->level[1];

327 (*
∑th
)->
Àvñ
[2] = 
öô
->level[2];

329 (*
∑th
)->
Àn
 = 
öô
->
Àvñ
[0] + (init->level[0] ? 1 : 0)

330 + 
öô
->
Àvñ
[1] + (init->level[1] ? 1 : 0)

331 + 
öô
->
Àvñ
[2] + (init->level[2] ? 1 : 0);

333 (*
∑th
)->
m™agî
 = 
NULL
;

334 (*
∑th
)->
lﬂdî
 = 
NULL
;

335 (*
∑th
)->
c⁄f_fûe
 = 
NULL
;

337 i‡(
	`ngx_add_∑th
(
cf
, 
∑th
Ë!
NGX_OK
) {

338  
NGX_CONF_ERROR
;

341  
NGX_CONF_OK
;

342 
	}
}

346 
	$ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

348 *
c⁄Â
 = 
c⁄f
;

350 
u_ch¨
 *
p
;

351 
ngx_°r_t
 *
vÆue
;

352 
ngx_uöt_t
 
i
, 
right
, 
shi·
, *
ac˚ss
;

354 
ac˚ss
 = (
ngx_uöt_t
 *Ë(
c⁄Â
 + 
cmd
->
off£t
);

356 i‡(*
ac˚ss
 !
NGX_CONF_UNSET_UINT
) {

360 
vÆue
 = 
cf
->
¨gs
->
ñts
;

362 *
ac˚ss
 = 0600;

364 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

366 
p
 = 
vÆue
[
i
].
d©a
;

368 i‡(
	`ngx_°∫cmp
(
p
, "user:", ("user:") - 1) == 0) {

369 
shi·
 = 6;

370 
p
 += ("user:") - 1;

372 } i‡(
	`ngx_°∫cmp
(
p
, "group:", ("group:") - 1) == 0) {

373 
shi·
 = 3;

374 
p
 += ("group:") - 1;

376 } i‡(
	`ngx_°∫cmp
(
p
, "all:", ("all:") - 1) == 0) {

377 
shi·
 = 0;

378 
p
 += ("all:") - 1;

381 
övÆid
;

384 i‡(
	`ngx_°rcmp
(
p
, "rw") == 0) {

385 
right
 = 6;

387 } i‡(
	`ngx_°rcmp
(
p
, "r") == 0) {

388 
right
 = 4;

391 
övÆid
;

394 *
ac˚ss
 |
right
 << 
shi·
;

397  
NGX_CONF_OK
;

399 
övÆid
:

401 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

403  
NGX_CONF_ERROR
;

404 
	}
}

407 
ngx_öt_t


408 
	$ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
)

410 
ngx_uöt_t
 
i
, 
n
;

411 
ngx_∑th_t
 *
∑th
, **
p
;

413 
∑th
 = *
¶Ÿ
;

415 
p
 = 
cf
->
cy˛e
->
∑thes
.
ñts
;

416 
i
 = 0; i < 
cf
->
cy˛e
->
∑thes
.
√…s
; i++) {

417 i‡(
p
[
i
]->
«me
.
Àn
 =
∑th
->name.len

418 && 
	`ngx_°rcmp
(
p
[
i
]->
«me
.
d©a
, 
∑th
->name.data) == 0)

420 
n
 = 0;Ç < 3;Ç++) {

421 i‡(
p
[
i
]->
Àvñ
[
n
] !
∑th
->level[n]) {

422 i‡(
∑th
->
c⁄f_fûe
 =
NULL
) {

423 i‡(
p
[
i
]->
c⁄f_fûe
 =
NULL
) {

424 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

429 &
p
[
i
]->
«me
);

430  
NGX_ERROR
;

433 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

438 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

439  
NGX_ERROR
;

442 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

445 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

446  
NGX_ERROR
;

449 i‡(
p
[
i
]->
Àvñ
[
n
] == 0) {

454 *
¶Ÿ
 = 
p
[
i
];

456  
NGX_OK
;

460 
p
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
∑thes
);

461 i‡(
p
 =
NULL
) {

462  
NGX_ERROR
;

465 *
p
 = 
∑th
;

467  
NGX_OK
;

468 
	}
}

471 
ngx_öt_t


472 
	$ngx_¸óã_∑thes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

474 
ngx_îr_t
 
îr
;

475 
ngx_uöt_t
 
i
;

476 
ngx_∑th_t
 **
∑th
;

478 
∑th
 = 
cy˛e
->
∑thes
.
ñts
;

479 
i
 = 0; i < 
cy˛e
->
∑thes
.
√…s
; i++) {

481 i‡(
	`ngx_¸óã_dú
(
∑th
[
i
]->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

482 
îr
 = 
ngx_î∫o
;

483 i‡(
îr
 !
NGX_EEXIST
) {

484 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
îr
,

485 
ngx_¸óã_dú_n
 " \"%s\" failed",

486 
∑th
[
i
]->
«me
.
d©a
);

487  
NGX_ERROR
;

491 i‡(
u£r
 =(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

495 #i‡!(
NGX_WIN32
)

497 
ngx_fûe_öfo_t
 
fi
;

499 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, &
fi
)

500 =
NGX_FILE_ERROR
)

502 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

503 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

504  
NGX_ERROR
;

507 i‡(
fi
.
°_uid
 !
u£r
) {

508 i‡(
	`chown
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
u£r
, -1) == -1) {

509 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

511 
∑th
[
i
]->
«me
.
d©a
, 
u£r
);

512  
NGX_ERROR
;

516 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

517 !(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

519 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
);

521 i‡(
	`chmod
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

522 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

523 "chmod(Ë\"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

524  
NGX_ERROR
;

531  
NGX_OK
;

532 
	}
}

535 
ngx_öt_t


536 
	$ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
, 
ngx_ext_ª«me_fûe_t
 *
ext
)

538 
u_ch¨
 *
«me
;

539 
ngx_îr_t
 
îr
;

540 
ngx_c›y_fûe_t
 
cf
;

542 #i‡!(
NGX_WIN32
)

544 i‡(
ext
->
ac˚ss
) {

545 i‡(
	`ngx_ch™ge_fûe_ac˚ss
(
§c
->
d©a
, 
ext
->
ac˚ss
Ë=
NGX_FILE_ERROR
) {

546 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

547 
ngx_ch™ge_fûe_ac˚ss_n
 " \"%s\" faûed", 
§c
->
d©a
);

548 
îr
 = 0;

549 
Áûed
;

555 i‡(
ext
->
time
 != -1) {

556 i‡(
	`ngx_£t_fûe_time
(
§c
->
d©a
, 
ext
->
fd
,Éxt->
time
Ë!
NGX_OK
) {

557 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

558 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
§c
->
d©a
);

559 
îr
 = 0;

560 
Áûed
;

564 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

565  
NGX_OK
;

568 
îr
 = 
ngx_î∫o
;

570 i‡(
îr
 =
NGX_ENOPATH
) {

572 i‡(!
ext
->
¸óã_∑th
) {

573 
Áûed
;

576 
îr
 = 
	`ngx_¸óã_fuŒ_∑th
(
to
->
d©a
, 
	`ngx_dú_ac˚ss
(
ext
->
∑th_ac˚ss
));

578 i‡(
îr
) {

579 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

580 
ngx_¸óã_dú_n
 " \"%s\" faûed", 
to
->
d©a
);

581 
îr
 = 0;

582 
Áûed
;

585 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

586  
NGX_OK
;

589 
îr
 = 
ngx_î∫o
;

592 #i‡(
NGX_WIN32
)

594 i‡(
îr
 =
NGX_EEXIST
) {

595 
îr
 = 
	`ngx_wö32_ª«me_fûe
(
§c
, 
to
, 
ext
->
log
);

597 i‡(
îr
 == 0) {

598  
NGX_OK
;

604 i‡(
îr
 =
NGX_EXDEV
) {

606 
cf
.
size
 = -1;

607 
cf
.
buf_size
 = 0;

608 
cf
.
ac˚ss
 = 
ext
->access;

609 
cf
.
time
 = 
ext
->time;

610 
cf
.
log
 = 
ext
->log;

612 
«me
 = 
	`ngx_Æloc
(
to
->
Àn
 + 1 + 10 + 1, 
ext
->
log
);

613 i‡(
«me
 =
NULL
) {

614  
NGX_ERROR
;

617 (Ë
	`ngx_•rötf
(
«me
, "%*s.%010uD%Z", 
to
->
Àn
,Åo->
d©a
,

618 (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0));

620 i‡(
	`ngx_c›y_fûe
(
§c
->
d©a
, 
«me
, &
cf
Ë=
NGX_OK
) {

622 i‡(
	`ngx_ª«me_fûe
(
«me
, 
to
->
d©a
Ë!
NGX_FILE_ERROR
) {

623 
	`ngx_‰ì
(
«me
);

625 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

626 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

627 
ngx_dñëe_fûe_n
 " \"%s\" failed",

628 
§c
->
d©a
);

629  
NGX_ERROR
;

632  
NGX_OK
;

635 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

636 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

637 
«me
, 
to
->
d©a
);

639 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

640 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

641 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

646 
	`ngx_‰ì
(
«me
);

648 
îr
 = 0;

651 
Áûed
:

653 i‡(
ext
->
dñëe_fûe
) {

654 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

655 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

656 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
§c
->
d©a
);

660 i‡(
îr
) {

661 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

662 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

663 
§c
->
d©a
, 
to
->data);

666  
NGX_ERROR
;

667 
	}
}

670 
ngx_öt_t


671 
	$ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
)

673 *
buf
;

674 
off_t
 
size
;

675 
size_t
 
Àn
;

676 
ssize_t
 
n
;

677 
ngx_fd_t
 
fd
, 
nfd
;

678 
ngx_öt_t
 
rc
;

679 
ngx_fûe_öfo_t
 
fi
;

681 
rc
 = 
NGX_ERROR
;

682 
buf
 = 
NULL
;

683 
nfd
 = 
NGX_INVALID_FILE
;

685 
fd
 = 
	`ngx_›í_fûe
(
‰om
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

687 i‡(
fd
 =
NGX_INVALID_FILE
) {

688 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

689 
ngx_›í_fûe_n
 " \"%s\" faûed", 
‰om
);

690 
Áûed
;

693 i‡(
cf
->
size
 != -1) {

694 
size
 = 
cf
->size;

697 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

698 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

699 
ngx_fd_öfo_n
 " \"%s\" faûed", 
‰om
);

701 
Áûed
;

704 
size
 = 
	`ngx_fûe_size
(&
fi
);

707 
Àn
 = 
cf
->
buf_size
 ? cf->buf_size : 65536;

709 i‡((
off_t
Ë
Àn
 > 
size
) {

710 
Àn
 = (
size_t
Ë
size
;

713 
buf
 = 
	`ngx_Æloc
(
Àn
, 
cf
->
log
);

714 i‡(
buf
 =
NULL
) {

715 
Áûed
;

718 
nfd
 = 
	`ngx_›í_fûe
(
to
, 
NGX_FILE_WRONLY
, 
NGX_FILE_CREATE_OR_OPEN
,

719 
cf
->
ac˚ss
);

721 i‡(
nfd
 =
NGX_INVALID_FILE
) {

722 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

723 
ngx_›í_fûe_n
 " \"%s\" faûed", 
to
);

724 
Áûed
;

727 
size
 > 0) {

729 i‡((
off_t
Ë
Àn
 > 
size
) {

730 
Àn
 = (
size_t
Ë
size
;

733 
n
 = 
	`ngx_ªad_fd
(
fd
, 
buf
, 
Àn
);

735 i‡(
n
 =
NGX_FILE_ERROR
) {

736 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

737 
ngx_ªad_fd_n
 " \"%s\" faûed", 
‰om
);

738 
Áûed
;

741 i‡((
size_t
Ë
n
 !
Àn
) {

742 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

743 
ngx_ªad_fd_n
 " hasÑead only %z of %uz from %s",

744 
n
, 
size
, 
‰om
);

745 
Áûed
;

748 
n
 = 
	`ngx_wrôe_fd
(
nfd
, 
buf
, 
Àn
);

750 i‡(
n
 =
NGX_FILE_ERROR
) {

751 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

752 
ngx_wrôe_fd_n
 " \"%s\" faûed", 
to
);

753 
Áûed
;

756 i‡((
size_t
Ë
n
 !
Àn
) {

757 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

758 
ngx_wrôe_fd_n
 " has written only %z of %uzÅo %s",

759 
n
, 
size
, 
to
);

760 
Áûed
;

763 
size
 -
n
;

766 i‡(
cf
->
time
 != -1) {

767 i‡(
	`ngx_£t_fûe_time
(
to
, 
nfd
, 
cf
->
time
Ë!
NGX_OK
) {

768 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

769 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
to
);

770 
Áûed
;

774 
rc
 = 
NGX_OK
;

776 
Áûed
:

778 i‡(
nfd
 !
NGX_INVALID_FILE
) {

779 i‡(
	`ngx_˛o£_fûe
(
nfd
Ë=
NGX_FILE_ERROR
) {

780 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

781 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
to
);

785 i‡(
fd
 !
NGX_INVALID_FILE
) {

786 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

787 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

788 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
‰om
);

792 i‡(
buf
) {

793 
	`ngx_‰ì
(
buf
);

796  
rc
;

797 
	}
}

818 
ngx_öt_t


819 
	$ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
)

821 *
d©a
, *
¥ev
;

822 
u_ch¨
 *
p
, *
«me
;

823 
size_t
 
Àn
;

824 
ngx_öt_t
 
rc
;

825 
ngx_îr_t
 
îr
;

826 
ngx_°r_t
 
fûe
, 
buf
;

827 
ngx_dú_t
 
dú
;

829 
	`ngx_°r_nuŒ
(&
buf
);

831 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

832 "wÆkÅªê\"%V\"", 
åì
);

834 i‡(
	`ngx_›í_dú
(
åì
, &
dú
Ë=
NGX_ERROR
) {

835 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

836 
ngx_›í_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

837  
NGX_ERROR
;

840 
¥ev
 = 
˘x
->
d©a
;

842 i‡(
˘x
->
Æloc
) {

843 
d©a
 = 
	`ngx_Æloc
(
˘x
->
Æloc
, ctx->
log
);

844 i‡(
d©a
 =
NULL
) {

845 
Áûed
;

848 i‡(
˘x
->
	`öô_h™dÀr
(
d©a
, 
¥ev
Ë=
NGX_ABORT
) {

849 
Áûed
;

852 
˘x
->
d©a
 = data;

855 
d©a
 = 
NULL
;

860 
	`ngx_£t_î∫o
(0);

862 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

863 
îr
 = 
ngx_î∫o
;

865 i‡(
îr
 =
NGX_ENOMOREFILES
) {

866 
rc
 = 
NGX_OK
;

869 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
îr
,

870 
ngx_ªad_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

871 
rc
 = 
NGX_ERROR
;

874 
d⁄e
;

877 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

878 
«me
 = 
	`ngx_de_«me
(&
dú
);

880 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

881 "åìÇamê%uz:\"%s\"", 
Àn
, 
«me
);

883 i‡(
Àn
 =1 && 
«me
[0] == '.') {

887 i‡(
Àn
 =2 && 
«me
[0] == '.' &&Çame[1] == '.') {

891 
fûe
.
Àn
 = 
åì
->len + 1 +Üen;

893 i‡(
fûe
.
Àn
 + 
NGX_DIR_MASK_LEN
 > 
buf
.len) {

895 i‡(
buf
.
Àn
) {

896 
	`ngx_‰ì
(
buf
.
d©a
);

899 
buf
.
Àn
 = 
åì
->À¿+ 1 +Üí + 
NGX_DIR_MASK_LEN
;

901 
buf
.
d©a
 = 
	`ngx_Æloc
(buf.
Àn
 + 1, 
˘x
->
log
);

902 i‡(
buf
.
d©a
 =
NULL
) {

903 
Áûed
;

907 
p
 = 
	`ngx_˝ymem
(
buf
.
d©a
, 
åì
->d©a,Åªe->
Àn
);

908 *
p
++ = '/';

909 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 + 1);

911 
fûe
.
d©a
 = 
buf
.data;

913 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

914 "åìÖ©h \"%s\"", 
fûe
.
d©a
);

916 i‡(!
dú
.
vÆid_öfo
) {

917 i‡(
	`ngx_de_öfo
(
fûe
.
d©a
, &
dú
Ë=
NGX_FILE_ERROR
) {

918 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

919 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûe
.
d©a
);

924 i‡(
	`ngx_de_is_fûe
(&
dú
)) {

926 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

927 "åì fûê\"%s\"", 
fûe
.
d©a
);

929 
˘x
->
size
 = 
	`ngx_de_size
(&
dú
);

930 
˘x
->
fs_size
 = 
	`ngx_de_fs_size
(&
dú
);

931 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

932 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

934 i‡(
˘x
->
	`fûe_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

935 
Áûed
;

938 } i‡(
	`ngx_de_is_dú
(&
dú
)) {

940 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

941 "åìÉ¡î dú \"%s\"", 
fûe
.
d©a
);

943 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

944 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

946 i‡(
˘x
->
	`¥e_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

947 
Áûed
;

950 i‡(
	`ngx_wÆk_åì
(
˘x
, &
fûe
Ë=
NGX_ABORT
) {

951 
Áûed
;

954 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

955 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

957 i‡(
˘x
->
	`po°_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

958 
Áûed
;

963 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

964 "åì s≥cü»\"%s\"", 
fûe
.
d©a
);

966 i‡(
˘x
->
	`•ec_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

967 
Áûed
;

972 
Áûed
:

974 
rc
 = 
NGX_ABORT
;

976 
d⁄e
:

978 i‡(
buf
.
Àn
) {

979 
	`ngx_‰ì
(
buf
.
d©a
);

982 i‡(
d©a
) {

983 
	`ngx_‰ì
(
d©a
);

984 
˘x
->
d©a
 = 
¥ev
;

987 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

988 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

989 
ngx_˛o£_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

992  
rc
;

993 
	}
}

	@src/core/ngx_file.h

8 #i‚de‡
_NGX_FILE_H_INCLUDED_


9 
	#_NGX_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_fûe_s
 {

17 
ngx_fd_t
 
	mfd
;

18 
ngx_°r_t
 
	m«me
;

19 
ngx_fûe_öfo_t
 
	möfo
;

21 
off_t
 
	moff£t
;

22 
off_t
 
	msys_off£t
;

24 
ngx_log_t
 *
	mlog
;

26 #i‡(
NGX_HAVE_FILE_AIO
)

27 
ngx_evít_aio_t
 *
	maio
;

30 
	mvÆid_öfo
:1;

31 
	mdúe˘io
:1;

35 
	#NGX_MAX_PATH_LEVEL
 3

	)

38 
	$time_t
 (*
	tngx_∑th_m™agî_±
Ë(*
	td©a
);

39 (*
	tngx_∑th_lﬂdî_±
Ë(*
	td©a
);

43 
ngx_°r_t
 
«me
;

44 
size_t
 
Àn
;

45 
size_t
 
Àvñ
[3];

47 
ngx_∑th_m™agî_±
 
m™agî
;

48 
ngx_∑th_lﬂdî_±
 
lﬂdî
;

49 *
d©a
;

51 
u_ch¨
 *
c⁄f_fûe
;

52 
ngx_uöt_t
 
löe
;

53 } 
	tngx_∑th_t
;

57 
ngx_°r_t
 
«me
;

58 
size_t
 
Àvñ
[3];

59 } 
	tngx_∑th_öô_t
;

63 
ngx_fûe_t
 
fûe
;

64 
off_t
 
off£t
;

65 
ngx_∑th_t
 *
∑th
;

66 
ngx_poﬁ_t
 *
poﬁ
;

67 *
w¨n
;

69 
ngx_uöt_t
 
ac˚ss
;

71 
log_Àvñ
:8;

72 
≥rsi°ít
:1;

73 
˛ón
:1;

74 } 
	tngx_ãmp_fûe_t
;

78 
ngx_uöt_t
 
ac˚ss
;

79 
ngx_uöt_t
 
∑th_ac˚ss
;

80 
time_t
 
time
;

81 
ngx_fd_t
 
fd
;

83 
¸óã_∑th
:1;

84 
dñëe_fûe
:1;

86 
ngx_log_t
 *
log
;

87 } 
	tngx_ext_ª«me_fûe_t
;

91 
off_t
 
size
;

92 
size_t
 
buf_size
;

94 
ngx_uöt_t
 
ac˚ss
;

95 
time_t
 
time
;

97 
ngx_log_t
 *
log
;

98 } 
	tngx_c›y_fûe_t
;

101 
ngx_åì_˘x_s
 
	tngx_åì_˘x_t
;

103 
	$ngx_öt_t
 (*
	tngx_åì_öô_h™dÀr_±
Ë(*
	t˘x
, *
	t¥ev
);

104 
	$ngx_öt_t
 (*
	tngx_åì_h™dÀr_±
Ë(
	tngx_åì_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 *
	t«me
);

106 
	sngx_åì_˘x_s
 {

107 
off_t
 
size
;

108 
off_t
 
fs_size
;

109 
ngx_uöt_t
 
ac˚ss
;

110 
time_t
 
mtime
;

112 
ngx_åì_öô_h™dÀr_±
 
öô_h™dÀr
;

113 
ngx_åì_h™dÀr_±
 
fûe_h™dÀr
;

114 
ngx_åì_h™dÀr_±
 
¥e_åì_h™dÀr
;

115 
ngx_åì_h™dÀr_±
 
po°_åì_h™dÀr
;

116 
ngx_åì_h™dÀr_±
 
•ec_h™dÀr
;

118 *
d©a
;

119 
size_t
 
Æloc
;

121 
ngx_log_t
 *
log
;

125 
ssize_t
 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
);

126 
ngx_öt_t
 
	`ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
,

127 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,

128 
ngx_uöt_t
 
ac˚ss
);

129 
	`ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
);

130 
ngx_öt_t
 
	`ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
);

131 
ngx_îr_t
 
	`ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
);

132 
ngx_öt_t
 
	`ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
);

133 
ngx_öt_t
 
	`ngx_¸óã_∑thes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

134 
ngx_öt_t
 
	`ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
,

135 
ngx_ext_ª«me_fûe_t
 *
ext
);

136 
ngx_öt_t
 
	`ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
);

137 
ngx_öt_t
 
	`ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
);

139 
ngx_©omic_uöt_t
 
	`ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
);

141 *
	`ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

142 *
	`ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,

143 
ngx_∑th_t
 *
¥ev
, 
ngx_∑th_öô_t
 *
öô
);

144 *
	`ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

147 
ngx_©omic_t
 *
ngx_ãmp_numbî
;

148 
ngx_©omic_öt_t
 
ngx_øndom_numbî
;

	@src/core/ngx_hash.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

15 
ngx_uöt_t
 
i
;

16 
ngx_hash_ñt_t
 *
ñt
;

19 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "hf:\"%*s\"", 
Àn
, 
«me
);

22 
ñt
 = 
hash
->
buckës
[
key
 % hash->
size
];

24 i‡(
ñt
 =
NULL
) {

25  
NULL
;

28 
ñt
->
vÆue
) {

29 i‡(
Àn
 !(
size_t
Ë
ñt
->len) {

30 
√xt
;

33 
i
 = 0; i < 
Àn
; i++) {

34 i‡(
«me
[
i
] !
ñt
->name[i]) {

35 
√xt
;

39  
ñt
->
vÆue
;

41 
√xt
:

43 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

48  
NULL
;

49 
	}
}

53 
	$ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

55 *
vÆue
;

56 
ngx_uöt_t
 
i
, 
n
, 
key
;

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "wch:\"%*s\"", 
Àn
, 
«me
);

62 
n
 = 
Àn
;

64 
n
) {

65 i‡(
«me
[
n
 - 1] == '.') {

69 
n
--;

72 
key
 = 0;

74 
i
 = 
n
; i < 
Àn
; i++) {

75 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

79 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

82 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, &
«me
[
n
], 
Àn
 -Ç);

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

88 i‡(
vÆue
) {

101 i‡((
uöçå_t
Ë
vÆue
 & 2) {

103 i‡(
n
 == 0) {

107 i‡((
uöçå_t
Ë
vÆue
 & 1) {

108  
NULL
;

111 
hwc
 = (
ngx_hash_wûdˇrd_t
 *)

112 ((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

113  
hwc
->
vÆue
;

116 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

118 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hwc
, 
«me
, 
n
 - 1);

120 i‡(
vÆue
) {

121  
vÆue
;

124  
hwc
->
vÆue
;

127 i‡((
uöçå_t
Ë
vÆue
 & 1) {

129 i‡(
n
 == 0) {

133  
NULL
;

136  (*Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

139  
vÆue
;

142  
hwc
->
vÆue
;

143 
	}
}

147 
	$ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

149 *
vÆue
;

150 
ngx_uöt_t
 
i
, 
key
;

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "w˘:\"%*s\"", 
Àn
, 
«me
);

156 
key
 = 0;

158 
i
 = 0; i < 
Àn
; i++) {

159 i‡(
«me
[
i
] == '.') {

163 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

166 i‡(
i
 =
Àn
) {

167  
NULL
;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

174 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, 
«me
, 
i
);

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

180 i‡(
vÆue
) {

188 i‡((
uöçå_t
Ë
vÆue
 & 2) {

190 
i
++;

192 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

194 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hwc
, &
«me
[
i
], 
Àn
 - i);

196 i‡(
vÆue
) {

197  
vÆue
;

200  
hwc
->
vÆue
;

203  
vÆue
;

206  
hwc
->
vÆue
;

207 
	}
}

211 
	$ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
,

212 
size_t
 
Àn
)

214 *
vÆue
;

216 i‡(
hash
->hash.
buckës
) {

217 
vÆue
 = 
	`ngx_hash_föd
(&
hash
->hash, 
key
, 
«me
, 
Àn
);

219 i‡(
vÆue
) {

220  
vÆue
;

224 i‡(
Àn
 == 0) {

225  
NULL
;

228 i‡(
hash
->
wc_hód
 && hash->wc_hód->hash.
buckës
) {

229 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hash
->
wc_hód
, 
«me
, 
Àn
);

231 i‡(
vÆue
) {

232  
vÆue
;

236 i‡(
hash
->
wc_èû
 && hash->wc_èû->hash.
buckës
) {

237 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hash
->
wc_èû
, 
«me
, 
Àn
);

239 i‡(
vÆue
) {

240  
vÆue
;

244  
NULL
;

245 
	}
}

248 
	#NGX_HASH_ELT_SIZE
(
«me
) \

249 ((*Ë+ 
	`ngx_Æign
((
«me
)->
key
.
Àn
 + 2, (*)))

	)

251 
ngx_öt_t


252 
	$ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
, 
ngx_uöt_t
 
√…s
)

254 
u_ch¨
 *
ñts
;

255 
size_t
 
Àn
;

256 
u_sh‹t
 *
ã°
;

257 
ngx_uöt_t
 
i
, 
n
, 
key
, 
size
, 
°¨t
, 
buckë_size
;

258 
ngx_hash_ñt_t
 *
ñt
, **
buckës
;

260 
n
 = 0;Ç < 
√…s
;Ç++) {

261 i‡(
höô
->
buckë_size
 < 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]) + (*))

263 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

266 
höô
->
«me
, höô->«me, höô->
buckë_size
);

267  
NGX_ERROR
;

271 
ã°
 = 
	`ngx_Æloc
(
höô
->
max_size
 * (
u_sh‹t
), höô->
poﬁ
->
log
);

272 i‡(
ã°
 =
NULL
) {

273  
NGX_ERROR
;

276 
buckë_size
 = 
höô
->bucket_size - (*);

278 
°¨t
 = 
√…s
 / (
buckë_size
 / (2 * (*)));

279 
°¨t
 = start ? start : 1;

281 i‡(
höô
->
max_size
 > 10000 && 
√…s
 && hinit->max_size /Çelts < 100) {

282 
°¨t
 = 
höô
->
max_size
 - 1000;

285 
size
 = 
°¨t
; sizê< 
höô
->
max_size
; size++) {

287 
	`ngx_memzîo
(
ã°
, 
size
 * (
u_sh‹t
));

289 
n
 = 0;Ç < 
√…s
;Ç++) {

290 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

294 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

295 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

298 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

300 
size
, 
key
, 
ã°
[key], &
«mes
[
n
].key);

303 i‡(
ã°
[
key
] > (
u_sh‹t
Ë
buckë_size
) {

304 
√xt
;

308 
found
;

310 
√xt
:

315 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

318 
höô
->
«me
, höô->«me, höô->
max_size
,

319 
höô
->
«me
, höô->
buckë_size
);

321 
	`ngx_‰ì
(
ã°
);

323  
NGX_ERROR
;

325 
found
:

327 
i
 = 0; i < 
size
; i++) {

328 
ã°
[
i
] = (*);

331 
n
 = 0;Ç < 
√…s
;Ç++) {

332 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

336 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

337 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

340 
Àn
 = 0;

342 
i
 = 0; i < 
size
; i++) {

343 i‡(
ã°
[
i
] == (*)) {

347 
ã°
[
i
] = (
u_sh‹t
Ë(
	`ngx_Æign
—e°[i], 
ngx_ˇchñöe_size
));

349 
Àn
 +
ã°
[
i
];

352 i‡(
höô
->
hash
 =
NULL
) {

353 
höô
->
hash
 = 
	`ngx_pˇŒoc
(höô->
poﬁ
, (
ngx_hash_wûdˇrd_t
)

354 + 
size
 * (
ngx_hash_ñt_t
 *));

355 i‡(
höô
->
hash
 =
NULL
) {

356 
	`ngx_‰ì
(
ã°
);

357  
NGX_ERROR
;

360 
buckës
 = (
ngx_hash_ñt_t
 **)

361 ((
u_ch¨
 *Ë
höô
->
hash
 + (
ngx_hash_wûdˇrd_t
));

364 
buckës
 = 
	`ngx_pˇŒoc
(
höô
->
poﬁ
, 
size
 * (
ngx_hash_ñt_t
 *));

365 i‡(
buckës
 =
NULL
) {

366 
	`ngx_‰ì
(
ã°
);

367  
NGX_ERROR
;

371 
ñts
 = 
	`ngx_∑Œoc
(
höô
->
poﬁ
, 
Àn
 + 
ngx_ˇchñöe_size
);

372 i‡(
ñts
 =
NULL
) {

373 
	`ngx_‰ì
(
ã°
);

374  
NGX_ERROR
;

377 
ñts
 = 
	`ngx_Æign_±r
”…s, 
ngx_ˇchñöe_size
);

379 
i
 = 0; i < 
size
; i++) {

380 i‡(
ã°
[
i
] == (*)) {

384 
buckës
[
i
] = (
ngx_hash_ñt_t
 *Ë
ñts
;

385 
ñts
 +
ã°
[
i
];

389 
i
 = 0; i < 
size
; i++) {

390 
ã°
[
i
] = 0;

393 
n
 = 0;Ç < 
√…s
;Ç++) {

394 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

398 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

399 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
key
] + 
ã°
[key]);

401 
ñt
->
vÆue
 = 
«mes
[
n
].value;

402 
ñt
->
Àn
 = (
u_sh‹t
Ë
«mes
[
n
].
key
.len;

404 
	`ngx_°æow
(
ñt
->
«me
, 
«mes
[
n
].
key
.
d©a
,Çames[n].key.
Àn
);

406 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

409 
i
 = 0; i < 
size
; i++) {

410 i‡(
buckës
[
i
] =
NULL
) {

414 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
i
] + 
ã°
[i]);

416 
ñt
->
vÆue
 = 
NULL
;

419 
	`ngx_‰ì
(
ã°
);

421 
höô
->
hash
->
buckës
 = buckets;

422 
höô
->
hash
->
size
 = size;

426 
i
 = 0; i < 
size
; i++) {

427 
ngx_°r_t
 
vÆ
;

428 
ngx_uöt_t
 
key
;

430 
ñt
 = 
buckës
[
i
];

432 i‡(
ñt
 =
NULL
) {

433 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

434 "%ui: NULL", 
i
);

438 
ñt
->
vÆue
) {

439 
vÆ
.
Àn
 = 
ñt
->len;

440 
vÆ
.
d©a
 = &
ñt
->
«me
[0];

442 
key
 = 
höô
->
	`key
(
vÆ
.
d©a
, vÆ.
Àn
);

444 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

445 "%ui: %∞\"%V\" %ui", 
i
, 
ñt
, &
vÆ
, 
key
);

447 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

454  
NGX_OK
;

455 
	}
}

458 
ngx_öt_t


459 
	$ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

460 
ngx_uöt_t
 
√…s
)

462 
size_t
 
Àn
, 
dŸ_Àn
;

463 
ngx_uöt_t
 
i
, 
n
, 
dŸ
;

464 
ngx_¨øy_t
 
cuº_«mes
, 
√xt_«mes
;

465 
ngx_hash_key_t
 *
«me
, *
√xt_«me
;

466 
ngx_hash_öô_t
 
h
;

467 
ngx_hash_wûdˇrd_t
 *
wdc
;

469 i‡(
	`ngx_¨øy_öô
(&
cuº_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

470 (
ngx_hash_key_t
))

471 !
NGX_OK
)

473  
NGX_ERROR
;

476 i‡(
	`ngx_¨øy_öô
(&
√xt_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

477 (
ngx_hash_key_t
))

478 !
NGX_OK
)

480  
NGX_ERROR
;

483 
n
 = 0;Ç < 
√…s
;Ç = 
i
) {

486 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

487 "wc0: \"%V\"", &
«mes
[
n
].
key
);

490 
dŸ
 = 0;

492 
Àn
 = 0;Üí < 
«mes
[
n
].
key
.len;Üen++) {

493 i‡(
«mes
[
n
].
key
.
d©a
[
Àn
] == '.') {

494 
dŸ
 = 1;

499 
«me
 = 
	`ngx_¨øy_push
(&
cuº_«mes
);

500 i‡(
«me
 =
NULL
) {

501  
NGX_ERROR
;

504 
«me
->
key
.
Àn
 =Üen;

505 
«me
->
key
.
d©a
 = 
«mes
[
n
].key.data;

506 
«me
->
key_hash
 = 
höô
->
	`key
“ame->
key
.
d©a
,Çame->key.
Àn
);

507 
«me
->
vÆue
 = 
«mes
[
n
].value;

510 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

511 "wc1: \"%V\" %ui", &
«me
->
key
, 
dŸ
);

514 
dŸ_Àn
 = 
Àn
 + 1;

516 i‡(
dŸ
) {

517 
Àn
++;

520 
√xt_«mes
.
√…s
 = 0;

522 i‡(
«mes
[
n
].
key
.
Àn
 !=Üen) {

523 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

524 i‡(
√xt_«me
 =
NULL
) {

525  
NGX_ERROR
;

528 
√xt_«me
->
key
.
Àn
 = 
«mes
[
n
].key.len -Üen;

529 
√xt_«me
->
key
.
d©a
 = 
«mes
[
n
].key.d©®+ 
Àn
;

530 
√xt_«me
->
key_hash
 = 0;

531 
√xt_«me
->
vÆue
 = 
«mes
[
n
].value;

534 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

535 "wc2: \"%V\"", &
√xt_«me
->
key
);

539 
i
 = 
n
 + 1; i < 
√…s
; i++) {

540 i‡(
	`ngx_°∫cmp
(
«mes
[
n
].
key
.
d©a
,Çames[
i
].key.d©a, 
Àn
) != 0) {

544 i‡(!
dŸ


545 && 
«mes
[
i
].
key
.
Àn
 >Üen

546 && 
«mes
[
i
].
key
.
d©a
[
Àn
] != '.')

551 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

552 i‡(
√xt_«me
 =
NULL
) {

553  
NGX_ERROR
;

556 
√xt_«me
->
key
.
Àn
 = 
«mes
[
i
].key.À¿- 
dŸ_Àn
;

557 
√xt_«me
->
key
.
d©a
 = 
«mes
[
i
].key.d©®+ 
dŸ_Àn
;

558 
√xt_«me
->
key_hash
 = 0;

559 
√xt_«me
->
vÆue
 = 
«mes
[
i
].value;

562 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

563 "wc3: \"%V\"", &
√xt_«me
->
key
);

567 i‡(
√xt_«mes
.
√…s
) {

569 
h
 = *
höô
;

570 
h
.
hash
 = 
NULL
;

572 i‡(
	`ngx_hash_wûdˇrd_öô
(&
h
, (
ngx_hash_key_t
 *Ë
√xt_«mes
.
ñts
,

573 
√xt_«mes
.
√…s
)

574 !
NGX_OK
)

576  
NGX_ERROR
;

579 
wdc
 = (
ngx_hash_wûdˇrd_t
 *Ë
h
.
hash
;

581 i‡(
«mes
[
n
].
key
.
Àn
 ==Üen) {

582 
wdc
->
vÆue
 = 
«mes
[
n
].value;

585 
«me
->
vÆue
 = (*Ë((
uöçå_t
Ë
wdc
 | (
dŸ
 ? 3 : 2));

587 } i‡(
dŸ
) {

588 
«me
->
vÆue
 = (*Ë((
uöçå_t
)Çame->value | 1);

592 i‡(
	`ngx_hash_öô
(
höô
, (
ngx_hash_key_t
 *Ë
cuº_«mes
.
ñts
,

593 
cuº_«mes
.
√…s
)

594 !
NGX_OK
)

596  
NGX_ERROR
;

599  
NGX_OK
;

600 
	}
}

603 
ngx_uöt_t


604 
	$ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

606 
ngx_uöt_t
 
i
, 
key
;

608 
key
 = 0;

610 
i
 = 0; i < 
Àn
; i++) {

611 
key
 = 
	`ngx_hash
(key, 
d©a
[
i
]);

614  
key
;

615 
	}
}

618 
ngx_uöt_t


619 
	$ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

621 
ngx_uöt_t
 
i
, 
key
;

623 
key
 = 0;

625 
i
 = 0; i < 
Àn
; i++) {

626 
key
 = 
	`ngx_hash
(key, 
	`ngx_tﬁowî
(
d©a
[
i
]));

629  
key
;

630 
	}
}

633 
ngx_uöt_t


634 
	$ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

636 
ngx_uöt_t
 
key
;

638 
key
 = 0;

640 
n
--) {

641 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

642 
key
 = 
	`ngx_hash
(key, *
d°
);

643 
d°
++;

644 
§c
++;

647  
key
;

648 
	}
}

651 
ngx_öt_t


652 
	$ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
)

654 
ngx_uöt_t
 
asize
;

656 i‡(
ty≥
 =
NGX_HASH_SMALL
) {

657 
asize
 = 4;

658 
ha
->
hsize
 = 107;

661 
asize
 = 
NGX_HASH_LARGE_ASIZE
;

662 
ha
->
hsize
 = 
NGX_HASH_LARGE_HSIZE
;

665 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys
, ha->
ãmp_poﬁ
, 
asize
, (
ngx_hash_key_t
))

666 !
NGX_OK
)

668  
NGX_ERROR
;

671 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_hód
, ha->
ãmp_poﬁ
, 
asize
,

672 (
ngx_hash_key_t
))

673 !
NGX_OK
)

675  
NGX_ERROR
;

678 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_èû
, ha->
ãmp_poﬁ
, 
asize
,

679 (
ngx_hash_key_t
))

680 !
NGX_OK
)

682  
NGX_ERROR
;

685 
ha
->
keys_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
, (
ngx_¨øy_t
Ë* ha->
hsize
);

686 i‡(
ha
->
keys_hash
 =
NULL
) {

687  
NGX_ERROR
;

690 
ha
->
dns_wc_hód_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

691 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

692 i‡(
ha
->
dns_wc_hód_hash
 =
NULL
) {

693  
NGX_ERROR
;

696 
ha
->
dns_wc_èû_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

697 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

698 i‡(
ha
->
dns_wc_èû_hash
 =
NULL
) {

699  
NGX_ERROR
;

702  
NGX_OK
;

703 
	}
}

706 
ngx_öt_t


707 
	$ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
, *
vÆue
,

708 
ngx_uöt_t
 
Êags
)

710 
size_t
 
Àn
;

711 
u_ch¨
 *
p
;

712 
ngx_°r_t
 *
«me
;

713 
ngx_uöt_t
 
i
, 
k
, 
n
, 
skù
, 
œ°
;

714 
ngx_¨øy_t
 *
keys
, *
hwc
;

715 
ngx_hash_key_t
 *
hk
;

717 
œ°
 = 
key
->
Àn
;

719 i‡(
Êags
 & 
NGX_HASH_WILDCARD_KEY
) {

726 
n
 = 0;

728 
i
 = 0; i < 
key
->
Àn
; i++) {

730 i‡(
key
->
d©a
[
i
] == '*') {

731 i‡(++
n
 > 1) {

732  
NGX_DECLINED
;

736 i‡(
key
->
d©a
[
i
] == '.' && key->data[i + 1] == '.') {

737  
NGX_DECLINED
;

741 i‡(
key
->
Àn
 > 1 && key->
d©a
[0] == '.') {

742 
skù
 = 1;

743 
wûdˇrd
;

746 i‡(
key
->
Àn
 > 2) {

748 i‡(
key
->
d©a
[0] == '*' && key->data[1] == '.') {

749 
skù
 = 2;

750 
wûdˇrd
;

753 i‡(
key
->
d©a
[
i
 - 2] == '.' && key->data[i - 1] == '*') {

754 
skù
 = 0;

755 
œ°
 -= 2;

756 
wûdˇrd
;

760 i‡(
n
) {

761  
NGX_DECLINED
;

767 
k
 = 0;

769 
i
 = 0; i < 
œ°
; i++) {

770 i‡(!(
Êags
 & 
NGX_HASH_READONLY_KEY
)) {

771 
key
->
d©a
[
i
] = 
	`ngx_tﬁowî
(key->data[i]);

773 
k
 = 
	`ngx_hash
(k, 
key
->
d©a
[
i
]);

776 
k
 %
ha
->
hsize
;

780 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

782 i‡(
«me
) {

783 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

784 i‡(
œ°
 !
«me
[
i
].
Àn
) {

788 i‡(
	`ngx_°∫cmp
(
key
->
d©a
, 
«me
[
i
].d©a, 
œ°
) == 0) {

789  
NGX_BUSY
;

794 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

795 (
ngx_°r_t
))

796 !
NGX_OK
)

798  
NGX_ERROR
;

802 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

803 i‡(
«me
 =
NULL
) {

804  
NGX_ERROR
;

807 *
«me
 = *
key
;

809 
hk
 = 
	`ngx_¨øy_push
(&
ha
->
keys
);

810 i‡(
hk
 =
NULL
) {

811  
NGX_ERROR
;

814 
hk
->
key
 = *key;

815 
hk
->
key_hash
 = 
	`ngx_hash_key
(
key
->
d©a
, 
œ°
);

816 
hk
->
vÆue
 = value;

818  
NGX_OK
;

821 
wûdˇrd
:

825 
k
 = 
	`ngx_hash_°æow
(&
key
->
d©a
[
skù
], &key->d©a[skù], 
œ°
 - skip);

827 
k
 %
ha
->
hsize
;

829 i‡(
skù
 == 1) {

833 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

835 i‡(
«me
) {

836 
Àn
 = 
œ°
 - 
skù
;

838 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

839 i‡(
Àn
 !
«me
[
i
].len) {

843 i‡(
	`ngx_°∫cmp
(&
key
->
d©a
[1], 
«me
[
i
].d©a, 
Àn
) == 0) {

844  
NGX_BUSY
;

849 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

850 (
ngx_°r_t
))

851 !
NGX_OK
)

853  
NGX_ERROR
;

857 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

858 i‡(
«me
 =
NULL
) {

859  
NGX_ERROR
;

862 
«me
->
Àn
 = 
œ°
 - 1;

863 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

864 i‡(
«me
->
d©a
 =
NULL
) {

865  
NGX_ERROR
;

868 
	`ngx_mem˝y
(
«me
->
d©a
, &
key
->d©a[1],Çame->
Àn
);

872 i‡(
skù
) {

879 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

880 i‡(
p
 =
NULL
) {

881  
NGX_ERROR
;

884 
Àn
 = 0;

885 
n
 = 0;

887 
i
 = 
œ°
 - 1; i; i--) {

888 i‡(
key
->
d©a
[
i
] == '.') {

889 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[
i
 + 1], 
Àn
);

890 
n
 +
Àn
;

891 
p
[
n
++] = '.';

892 
Àn
 = 0;

896 
Àn
++;

899 i‡(
Àn
) {

900 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[1], 
Àn
);

901 
n
 +
Àn
;

904 
p
[
n
] = '\0';

906 
hwc
 = &
ha
->
dns_wc_hód
;

907 
keys
 = &
ha
->
dns_wc_hód_hash
[
k
];

913 
œ°
++;

915 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

916 i‡(
p
 =
NULL
) {

917  
NGX_ERROR
;

920 
	`ngx_˝y°∫
(
p
, 
key
->
d©a
, 
œ°
);

922 
hwc
 = &
ha
->
dns_wc_èû
;

923 
keys
 = &
ha
->
dns_wc_èû_hash
[
k
];

927 
hk
 = 
	`ngx_¨øy_push
(
hwc
);

928 i‡(
hk
 =
NULL
) {

929  
NGX_ERROR
;

932 
hk
->
key
.
Àn
 = 
œ°
 - 1;

933 
hk
->
key
.
d©a
 = 
p
;

934 
hk
->
key_hash
 = 0;

935 
hk
->
vÆue
 = value;

940 
«me
 = 
keys
->
ñts
;

942 i‡(
«me
) {

943 
Àn
 = 
œ°
 - 
skù
;

945 
i
 = 0; i < 
keys
->
√…s
; i++) {

946 i‡(
Àn
 !
«me
[
i
].len) {

950 i‡(
	`ngx_°∫cmp
(
key
->
d©a
 + 
skù
, 
«me
[
i
].d©a, 
Àn
) == 0) {

951  
NGX_BUSY
;

956 i‡(
	`ngx_¨øy_öô
(
keys
, 
ha
->
ãmp_poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
)

958  
NGX_ERROR
;

962 
«me
 = 
	`ngx_¨øy_push
(
keys
);

963 i‡(
«me
 =
NULL
) {

964  
NGX_ERROR
;

967 
«me
->
Àn
 = 
œ°
 - 
skù
;

968 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

969 i‡(
«me
->
d©a
 =
NULL
) {

970  
NGX_ERROR
;

973 
	`ngx_mem˝y
(
«me
->
d©a
, 
key
->d©®+ 
skù
,Çame->
Àn
);

975  
NGX_OK
;

976 
	}
}

	@src/core/ngx_hash.h

8 #i‚de‡
_NGX_HASH_H_INCLUDED_


9 
	#_NGX_HASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mvÆue
;

18 
u_sh‹t
 
	mÀn
;

19 
u_ch¨
 
	m«me
[1];

20 } 
	tngx_hash_ñt_t
;

24 
ngx_hash_ñt_t
 **
	mbuckës
;

25 
ngx_uöt_t
 
	msize
;

26 } 
	tngx_hash_t
;

30 
ngx_hash_t
 
	mhash
;

31 *
	mvÆue
;

32 } 
	tngx_hash_wûdˇrd_t
;

36 
ngx_°r_t
 
	mkey
;

37 
ngx_uöt_t
 
	mkey_hash
;

38 *
	mvÆue
;

39 } 
	tngx_hash_key_t
;

42 
	$ngx_uöt_t
 (*
	tngx_hash_key_±
Ë(
	tu_ch¨
 *
	td©a
, 
	tsize_t
 
	tÀn
);

46 
ngx_hash_t
 
hash
;

47 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

48 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

49 } 
	tngx_hash_comböed_t
;

53 
ngx_hash_t
 *
hash
;

54 
ngx_hash_key_±
 
key
;

56 
ngx_uöt_t
 
max_size
;

57 
ngx_uöt_t
 
buckë_size
;

59 *
«me
;

60 
ngx_poﬁ_t
 *
poﬁ
;

61 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

62 } 
	tngx_hash_öô_t
;

65 
	#NGX_HASH_SMALL
 1

	)

66 
	#NGX_HASH_LARGE
 2

	)

68 
	#NGX_HASH_LARGE_ASIZE
 16384

	)

69 
	#NGX_HASH_LARGE_HSIZE
 10007

	)

71 
	#NGX_HASH_WILDCARD_KEY
 1

	)

72 
	#NGX_HASH_READONLY_KEY
 2

	)

76 
ngx_uöt_t
 
hsize
;

78 
ngx_poﬁ_t
 *
poﬁ
;

79 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

81 
ngx_¨øy_t
 
keys
;

82 
ngx_¨øy_t
 *
keys_hash
;

84 
ngx_¨øy_t
 
dns_wc_hód
;

85 
ngx_¨øy_t
 *
dns_wc_hód_hash
;

87 
ngx_¨øy_t
 
dns_wc_èû
;

88 
ngx_¨øy_t
 *
dns_wc_èû_hash
;

89 } 
	tngx_hash_keys_¨øys_t
;

93 
ngx_uöt_t
 
hash
;

94 
ngx_°r_t
 
key
;

95 
ngx_°r_t
 
vÆue
;

96 
u_ch¨
 *
lowˇ£_key
;

97 } 
	tngx_èbÀ_ñt_t
;

100 *
	`ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

101 *
	`ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

102 *
	`ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

103 *
	`ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
,

104 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

106 
ngx_öt_t
 
	`ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

107 
ngx_uöt_t
 
√…s
);

108 
ngx_öt_t
 
	`ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

109 
ngx_uöt_t
 
√…s
);

111 
	#ngx_hash
(
key
, 
c
Ë((
ngx_uöt_t
Ëkey * 31 + c)

	)

112 
ngx_uöt_t
 
	`ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

113 
ngx_uöt_t
 
	`ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

114 
ngx_uöt_t
 
	`ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

117 
ngx_öt_t
 
	`ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
);

118 
ngx_öt_t
 
	`ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
,

119 *
vÆue
, 
ngx_uöt_t
 
Êags
);

	@src/core/ngx_inet.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

13 
ngx_öt_t
 
ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

14 
ngx_öt_t
 
ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

17 
ö_addr_t


18 
	$ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

20 
u_ch¨
 *
p
, 
c
;

21 
ö_addr_t
 
addr
;

22 
ngx_uöt_t
 
o˘ë
, 
n
;

24 
addr
 = 0;

25 
o˘ë
 = 0;

26 
n
 = 0;

28 
p
 = 
ãxt
;Ö <Åexà+ 
Àn
;Ö++) {

30 
c
 = *
p
;

32 i‡(
c
 >= '0' && c <= '9') {

33 
o˘ë
 = o˘ë * 10 + (
c
 - '0');

37 i‡(
c
 ='.' && 
o˘ë
 < 256) {

38 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

39 
o˘ë
 = 0;

40 
n
++;

44  
INADDR_NONE
;

47 i‡(
n
 != 3) {

48  
INADDR_NONE
;

51 i‡(
o˘ë
 < 256) {

52 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

53  
	`ht⁄l
(
addr
);

56  
INADDR_NONE
;

57 
	}
}

60 #i‡(
NGX_HAVE_INET6
)

62 
ngx_öt_t


63 
	$ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
)

65 
u_ch¨
 
c
, *
zîo
, *
digô
, *
s
, *
d
;

66 
size_t
 
Àn4
;

67 
ngx_uöt_t
 
n
, 
nibbÀs
, 
w‹d
;

69 i‡(
Àn
 == 0) {

70  
NGX_ERROR
;

73 
zîo
 = 
NULL
;

74 
digô
 = 
NULL
;

75 
Àn4
 = 0;

76 
nibbÀs
 = 0;

77 
w‹d
 = 0;

78 
n
 = 8;

80 i‡(
p
[0] == ':') {

81 
p
++;

82 
Àn
--;

85  ; 
Àn
;Üen--) {

86 
c
 = *
p
++;

88 i‡(
c
 == ':') {

89 i‡(
nibbÀs
) {

90 
digô
 = 
p
;

91 
Àn4
 = 
Àn
;

92 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

93 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

95 i‡(--
n
) {

96 
nibbÀs
 = 0;

97 
w‹d
 = 0;

102 i‡(
zîo
 =
NULL
) {

103 
digô
 = 
p
;

104 
Àn4
 = 
Àn
;

105 
zîo
 = 
addr
;

110  
NGX_ERROR
;

113 i‡(
c
 ='.' && 
nibbÀs
) {

114 i‡(
n
 < 2 || 
digô
 =
NULL
) {

115  
NGX_ERROR
;

118 
w‹d
 = 
	`ngx_öë_addr
(
digô
, 
Àn4
 - 1);

119 i‡(
w‹d
 =
INADDR_NONE
) {

120  
NGX_ERROR
;

123 
w‹d
 = 
	`¡ohl
(word);

124 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 24) & 0xff);

125 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 16) & 0xff);

126 
n
--;

130 i‡(++
nibbÀs
 > 4) {

131  
NGX_ERROR
;

134 i‡(
c
 >= '0' && c <= '9') {

135 
w‹d
 = w‹d * 16 + (
c
 - '0');

139 
c
 |= 0x20;

141 i‡(
c
 >= 'a' && c <= 'f') {

142 
w‹d
 = w‹d * 16 + (
c
 - 'a') + 10;

146  
NGX_ERROR
;

149 i‡(
nibbÀs
 =0 && 
zîo
 =
NULL
) {

150  
NGX_ERROR
;

153 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

154 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

156 i‡(--
n
) {

157 i‡(
zîo
) {

158 
n
 *= 2;

159 
s
 = 
addr
 - 1;

160 
d
 = 
s
 + 
n
;

161 
s
 >
zîo
) {

162 *
d
-- = *
s
--;

164 
	`ngx_memzîo
(
zîo
, 
n
);

165  
NGX_OK
;

169 i‡(
zîo
 =
NULL
) {

170  
NGX_OK
;

174  
NGX_ERROR
;

175 
	}
}

180 
size_t


181 
	$ngx_sock_¡›
(
sockaddr
 *
ß
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
, 
ngx_uöt_t
 
p‹t
)

183 
u_ch¨
 *
p
;

184 
sockaddr_ö
 *
sö
;

185 #i‡(
NGX_HAVE_INET6
)

186 
size_t
 
n
;

187 
sockaddr_ö6
 *
sö6
;

189 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

190 
sockaddr_un
 *
ßun
;

193 
ß
->
ß_Ámûy
) {

195 
AF_INET
:

197 
sö
 = (
sockaddr_ö
 *Ë
ß
;

198 
p
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

200 i‡(
p‹t
) {

201 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud:%d",

202 
p
[0],Ö[1],Ö[2],Ö[3], 
	`¡ohs
(
sö
->
sö_p‹t
));

204 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

205 
p
[0],Ö[1],Ö[2],Ö[3]);

208  (
p
 - 
ãxt
);

210 #i‡(
NGX_HAVE_INET6
)

212 
AF_INET6
:

214 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

216 
n
 = 0;

218 i‡(
p‹t
) {

219 
ãxt
[
n
++] = '[';

222 
n
 = 
	`ngx_öë6_¡›
(
sö6
->
sö6_addr
.
s6_addr
, &
ãxt
[n], 
Àn
);

224 i‡(
p‹t
) {

225 
n
 = 
	`ngx_•rötf
(&
ãxt
[1 +Ç], "]:%d",

226 
	`¡ohs
(
sö6
->
sö6_p‹t
)Ë- 
ãxt
;

229  
n
;

232 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

234 
AF_UNIX
:

235 
ßun
 = (
sockaddr_un
 *Ë
ß
;

239  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%s%Z", 
ßun
->
sun_∑th
) -Åext - 1;

246 
	}
}

249 
size_t


250 
	$ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

252 
u_ch¨
 *
p
;

254 
Ámûy
) {

256 
AF_INET
:

258 
p
 = 
addr
;

260  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

261 
p
[0],Ö[1],Ö[2],Ö[3])

262 - 
ãxt
;

264 #i‡(
NGX_HAVE_INET6
)

266 
AF_INET6
:

267  
	`ngx_öë6_¡›
(
addr
, 
ãxt
, 
Àn
);

274 
	}
}

277 #i‡(
NGX_HAVE_INET6
)

279 
size_t


280 
	$ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, 
size_t
 
Àn
)

282 
u_ch¨
 *
d°
;

283 
size_t
 
max
, 
n
;

284 
ngx_uöt_t
 
i
, 
zîo
, 
œ°
;

286 i‡(
Àn
 < 
NGX_INET6_ADDRSTRLEN
) {

290 
zîo
 = (
ngx_uöt_t
) -1;

291 
œ°
 = (
ngx_uöt_t
) -1;

292 
max
 = 1;

293 
n
 = 0;

295 
i
 = 0; i < 16; i += 2) {

297 i‡(
p
[
i
] ||Ö[i + 1]) {

299 i‡(
max
 < 
n
) {

300 
zîo
 = 
œ°
;

301 
max
 = 
n
;

304 
n
 = 0;

308 i‡(
n
++ == 0) {

309 
œ°
 = 
i
;

313 i‡(
max
 < 
n
) {

314 
zîo
 = 
œ°
;

315 
max
 = 
n
;

318 
d°
 = 
ãxt
;

319 
n
 = 16;

321 i‡(
zîo
 == 0) {

323 i‡((
max
 =5 && 
p
[10] == 0xff &&Ö[11] == 0xff)

324 || (
max
 == 6)

325 || (
max
 =7 && 
p
[14] != 0 &&Ö[15] != 1))

327 
n
 = 12;

330 *
d°
++ = ':';

333 
i
 = 0; i < 
n
; i += 2) {

335 i‡(
i
 =
zîo
) {

336 *
d°
++ = ':';

337 
i
 +(
max
 - 1) * 2;

341 
d°
 = 
	`ngx_•rötf
(d°, "%uxi", 
p
[
i
] * 256 +Ö[i + 1]);

343 i‡(
i
 < 14) {

344 *
d°
++ = ':';

348 i‡(
n
 == 12) {

349 
d°
 = 
	`ngx_•rötf
(d°, "%ud.%ud.%ud.%ud", 
p
[12],Ö[13],Ö[14],Ö[15]);

352  
d°
 - 
ãxt
;

353 
	}
}

358 
ngx_öt_t


359 
	$ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
)

361 
u_ch¨
 *
addr
, *
mask
, *
œ°
;

362 
size_t
 
Àn
;

363 
ngx_öt_t
 
shi·
;

364 #i‡(
NGX_HAVE_INET6
)

365 
ngx_öt_t
 
rc
;

366 
ngx_uöt_t
 
s
, 
i
;

369 
addr
 = 
ãxt
->
d©a
;

370 
œ°
 = 
addr
 + 
ãxt
->
Àn
;

372 
mask
 = 
	`ngx_°æchr
(
addr
, 
œ°
, '/');

373 
Àn
 = (
mask
 ? mask : 
œ°
Ë- 
addr
;

375 
cidr
->
u
.
ö
.
addr
 = 
	`ngx_öë_addr
◊ddr, 
Àn
);

377 i‡(
cidr
->
u
.
ö
.
addr
 !
INADDR_NONE
) {

378 
cidr
->
Ámûy
 = 
AF_INET
;

380 i‡(
mask
 =
NULL
) {

381 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

382  
NGX_OK
;

385 #i‡(
NGX_HAVE_INET6
)

386 } i‡(
	`ngx_öë6_addr
(
addr
, 
Àn
, 
cidr
->
u
.
ö6
.addr.
s6_addr
Ë=
NGX_OK
) {

387 
cidr
->
Ámûy
 = 
AF_INET6
;

389 i‡(
mask
 =
NULL
) {

390 
	`ngx_mem£t
(
cidr
->
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

391  
NGX_OK
;

396  
NGX_ERROR
;

399 
mask
++;

401 
shi·
 = 
	`ngx_©oi
(
mask
, 
œ°
 - mask);

402 i‡(
shi·
 =
NGX_ERROR
) {

403  
NGX_ERROR
;

406 
cidr
->
Ámûy
) {

408 #i‡(
NGX_HAVE_INET6
)

409 
AF_INET6
:

410 
addr
 = 
cidr
->
u
.
ö6
.addr.
s6_addr
;

411 
mask
 = 
cidr
->
u
.
ö6
.mask.
s6_addr
;

412 
rc
 = 
NGX_OK
;

414 
i
 = 0; i < 16; i++) {

416 
s
 = (
shi·
 > 8) ? 8 : shift;

417 
shi·
 -
s
;

419 
mask
[
i
] = (
u_ch¨
Ë(0 - (1 << (8 - 
s
)));

421 i‡(
addr
[
i
] !◊ddr[i] & 
mask
[i])) {

422 
rc
 = 
NGX_DONE
;

423 
addr
[
i
] &
mask
[i];

427  
rc
;

432 i‡(
shi·
) {

433 
cidr
->
u
.
ö
.
mask
 = 
	`ht⁄l
((
ngx_uöt_t
Ë(0 - (1 << (32 - 
shi·
))));

437 
cidr
->
u
.
ö
.
mask
 = 0;

440 i‡(
cidr
->
u
.
ö
.
addr
 =(cidr->u.ö.add∏& cidr->u.ö.
mask
)) {

441  
NGX_OK
;

444 
cidr
->
u
.
ö
.
addr
 &cidr->u.ö.
mask
;

446  
NGX_DONE
;

448 
	}
}

451 
ngx_öt_t


452 
	$ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

454 
ö_addr_t
 
öaddr
;

455 
ngx_uöt_t
 
Ámûy
;

456 
sockaddr_ö
 *
sö
;

457 #i‡(
NGX_HAVE_INET6
)

458 
ö6_addr
 
öaddr6
;

459 
sockaddr_ö6
 *
sö6
;

465 
	`ngx_memzîo
(
öaddr6
.
s6_addr
, (
ö6_addr
));

468 
öaddr
 = 
	`ngx_öë_addr
(
ãxt
, 
Àn
);

470 i‡(
öaddr
 !
INADDR_NONE
) {

471 
Ámûy
 = 
AF_INET
;

472 
Àn
 = (
sockaddr_ö
);

474 #i‡(
NGX_HAVE_INET6
)

475 } i‡(
	`ngx_öë6_addr
(
ãxt
, 
Àn
, 
öaddr6
.
s6_addr
Ë=
NGX_OK
) {

476 
Ámûy
 = 
AF_INET6
;

477 
Àn
 = (
sockaddr_ö6
);

481  
NGX_DECLINED
;

484 
addr
->
sockaddr
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Àn
);

485 i‡(
addr
->
sockaddr
 =
NULL
) {

486  
NGX_ERROR
;

489 
addr
->
sockaddr
->
ß_Ámûy
 = (
u_ch¨
Ë
Ámûy
;

490 
addr
->
sockÀn
 = 
Àn
;

492 
Ámûy
) {

494 #i‡(
NGX_HAVE_INET6
)

495 
AF_INET6
:

496 
sö6
 = (
sockaddr_ö6
 *Ë
addr
->
sockaddr
;

497 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
öaddr6
.s6_addr, 16);

502 
sö
 = (
sockaddr_ö
 *Ë
addr
->
sockaddr
;

503 
sö
->
sö_addr
.
s_addr
 = 
öaddr
;

507  
NGX_OK
;

508 
	}
}

511 
ngx_öt_t


512 
	$ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

514 
u_ch¨
 *
p
;

516 
p
 = 
u
->
uæ
.
d©a
;

518 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "unix:", 5) == 0) {

519  
	`ngx_∑r£_unix_domaö_uæ
(
poﬁ
, 
u
);

522 i‡((
p
[0] =':' ||Ö[0] ='/'Ë&& !
u
->
li°í
) {

523 
u
->
îr
 = "invalid host";

524  
NGX_ERROR
;

527 i‡(
p
[0] == '[') {

528  
	`ngx_∑r£_öë6_uæ
(
poﬁ
, 
u
);

531  
	`ngx_∑r£_öë_uæ
(
poﬁ
, 
u
);

532 
	}
}

535 
ngx_öt_t


536 
	$ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

538 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

539 
u_ch¨
 *
∑th
, *
uri
, *
œ°
;

540 
size_t
 
Àn
;

541 
sockaddr_un
 *
ßun
;

543 
Àn
 = 
u
->
uæ
.len;

544 
∑th
 = 
u
->
uæ
.
d©a
;

546 
∑th
 += 5;

547 
Àn
 -= 5;

549 i‡(
u
->
uri_∑π
) {

551 
œ°
 = 
∑th
 + 
Àn
;

552 
uri
 = 
	`ngx_°æchr
(
∑th
, 
œ°
, ':');

554 i‡(
uri
) {

555 
Àn
 = 
uri
 - 
∑th
;

556 
uri
++;

557 
u
->
uri
.
Àn
 = 
œ°
 - uri;

558 
u
->
uri
.
d©a
 = uri;

562 i‡(
Àn
 == 0) {

563 
u
->
îr
 = "noÖath inÅhe unix domain socket";

564  
NGX_ERROR
;

567 
u
->
ho°
.
Àn
 =Üen++;

568 
u
->
ho°
.
d©a
 = 
∑th
;

570 i‡(
Àn
 > (
ßun
->
sun_∑th
)) {

571 
u
->
îr
 = "tooÜongÖath inÅhe unix domain socket";

572  
NGX_ERROR
;

575 
u
->
sockÀn
 = (
sockaddr_un
);

576 
ßun
 = (
sockaddr_un
 *Ë&
u
->
sockaddr
;

577 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

578 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

580 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

581 i‡(
u
->
addrs
 =
NULL
) {

582  
NGX_ERROR
;

585 
ßun
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_un
));

586 i‡(
ßun
 =
NULL
) {

587  
NGX_ERROR
;

590 
u
->
Ámûy
 = 
AF_UNIX
;

591 
u
->
«ddrs
 = 1;

593 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

594 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

596 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
ßun
;

597 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_un
);

598 
u
->
addrs
[0].
«me
.
Àn
 =Üen + 4;

599 
u
->
addrs
[0].
«me
.
d©a
 = u->
uæ
.data;

601  
NGX_OK
;

605 
u
->
îr
 = "the unix domain socketsáreÇot supported onÅhisÖlatform";

607  
NGX_ERROR
;

610 
	}
}

613 
ngx_öt_t


614 
	$ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

616 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
, *
¨gs
;

617 
size_t
 
Àn
;

618 
ngx_öt_t
 
n
;

619 
ho°ít
 *
h
;

620 
sockaddr_ö
 *
sö
;

622 
u
->
sockÀn
 = (
sockaddr_ö
);

623 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

624 
sö
->
sö_Ámûy
 = 
AF_INET
;

626 
u
->
Ámûy
 = 
AF_INET
;

628 
ho°
 = 
u
->
uæ
.
d©a
;

630 
œ°
 = 
ho°
 + 
u
->
uæ
.
Àn
;

632 
p‹t
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ':');

634 
uri
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '/');

636 
¨gs
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '?');

638 i‡(
¨gs
) {

639 i‡(
uri
 =
NULL
) {

640 
uri
 = 
¨gs
;

642 } i‡(
¨gs
 < 
uri
) {

643 
uri
 = 
¨gs
;

647 i‡(
uri
) {

648 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

649 
u
->
îr
 = "invalid host";

650  
NGX_ERROR
;

653 
u
->
uri
.
Àn
 = 
œ°
 - uri;

654 
u
->
uri
.
d©a
 = uri;

656 
œ°
 = 
uri
;

658 i‡(
uri
 < 
p‹t
) {

659 
p‹t
 = 
NULL
;

663 i‡(
p‹t
) {

664 
p‹t
++;

666 
Àn
 = 
œ°
 - 
p‹t
;

668 i‡(
Àn
 == 0) {

669 
u
->
îr
 = "invalidÖort";

670  
NGX_ERROR
;

673 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

675 i‡(
n
 < 1 ||Ç > 65535) {

676 
u
->
îr
 = "invalidÖort";

677  
NGX_ERROR
;

680 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

681 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

683 
u
->
p‹t_ãxt
.
Àn
 =Üen;

684 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

686 
œ°
 = 
p‹t
 - 1;

689 i‡(
uri
 =
NULL
) {

691 i‡(
u
->
li°í
) {

695 
n
 = 
	`ngx_©oi
(
ho°
, 
œ°
 - host);

697 i‡(
n
 !
NGX_ERROR
) {

699 i‡(
n
 < 1 ||Ç > 65535) {

700 
u
->
îr
 = "invalidÖort";

701  
NGX_ERROR
;

704 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

705 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

707 
u
->
p‹t_ãxt
.
Àn
 = 
œ°
 - 
ho°
;

708 
u
->
p‹t_ãxt
.
d©a
 = 
ho°
;

710 
u
->
wûdˇrd
 = 1;

712  
NGX_OK
;

717 
u
->
no_p‹t
 = 1;

720 
Àn
 = 
œ°
 - 
ho°
;

722 i‡(
Àn
 == 0) {

723 
u
->
îr
 = "no host";

724  
NGX_ERROR
;

727 i‡(
Àn
 =1 && *
ho°
 == '*') {

728 
Àn
 = 0;

731 
u
->
ho°
.
Àn
 =Üen;

732 
u
->
ho°
.
d©a
 = host;

734 i‡(
u
->
no_ªsﬁve
) {

735  
NGX_OK
;

738 i‡(
Àn
) {

739 
sö
->
sö_addr
.
s_addr
 = 
	`ngx_öë_addr
(
ho°
, 
Àn
);

741 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_NONE
) {

742 
p
 = 
	`ngx_Æloc
(++
Àn
, 
poﬁ
->
log
);

743 i‡(
p
 =
NULL
) {

744  
NGX_ERROR
;

747 (Ë
	`ngx_˝y°∫
(
p
, 
ho°
, 
Àn
);

749 
h
 = 
	`gëho°by«me
((c⁄° *Ë
p
);

751 
	`ngx_‰ì
(
p
);

753 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

754 
u
->
îr
 = "hostÇot found";

755  
NGX_ERROR
;

758 
sö
->
sö_addr
.
s_addr
 = *(
ö_addr_t
 *Ë(
h
->
h_addr_li°
[0]);

761 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

762 
u
->
wûdˇrd
 = 1;

766 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

767 
u
->
wûdˇrd
 = 1;

770 i‡(
u
->
no_p‹t
) {

771 
u
->
p‹t
 = u->
deÁu…_p‹t
;

772 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

775 i‡(
u
->
li°í
) {

776  
NGX_OK
;

779 i‡(
	`ngx_öë_ªsﬁve_ho°
(
poﬁ
, 
u
Ë!
NGX_OK
) {

780  
NGX_ERROR
;

783  
NGX_OK
;

784 
	}
}

787 
ngx_öt_t


788 
	$ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

790 #i‡(
NGX_HAVE_INET6
)

791 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
;

792 
size_t
 
Àn
;

793 
ngx_öt_t
 
n
;

794 
sockaddr_ö6
 *
sö6
;

796 
u
->
sockÀn
 = (
sockaddr_ö6
);

797 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

798 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

800 
ho°
 = 
u
->
uæ
.
d©a
 + 1;

802 
œ°
 = 
u
->
uæ
.
d©a
 + u->uæ.
Àn
;

804 
p
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ']');

806 i‡(
p
 =
NULL
) {

807 
u
->
îr
 = "invalid host";

808  
NGX_ERROR
;

811 i‡(
œ°
 - 
p
) {

813 
p‹t
 = 
p
 + 1;

815 
uri
 = 
	`ngx_°æchr
(
p‹t
, 
œ°
, '/');

817 i‡(
uri
) {

818 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

819 
u
->
îr
 = "invalid host";

820  
NGX_ERROR
;

823 
u
->
uri
.
Àn
 = 
œ°
 - uri;

824 
u
->
uri
.
d©a
 = uri;

827 i‡(*
p‹t
 == ':') {

828 
p‹t
++;

830 
Àn
 = 
œ°
 - 
p‹t
;

832 i‡(
Àn
 == 0) {

833 
u
->
îr
 = "invalidÖort";

834  
NGX_ERROR
;

837 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

839 i‡(
n
 < 1 ||Ç > 65535) {

840 
u
->
îr
 = "invalidÖort";

841  
NGX_ERROR
;

844 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

845 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

847 
u
->
p‹t_ãxt
.
Àn
 =Üen;

848 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

851 
u
->
no_p‹t
 = 1;

855 
Àn
 = 
p
 - 
ho°
;

857 i‡(
Àn
 == 0) {

858 
u
->
îr
 = "no host";

859  
NGX_ERROR
;

862 
u
->
ho°
.
Àn
 =Üen;

863 
u
->
ho°
.
d©a
 = host;

865 i‡(
	`ngx_öë6_addr
(
ho°
, 
Àn
, 
sö6
->
sö6_addr
.
s6_addr
Ë!
NGX_OK
) {

866 
u
->
îr
 = "invalid IPv6áddress";

867  
NGX_ERROR
;

870 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

871 
u
->
wûdˇrd
 = 1;

874 
u
->
Ámûy
 = 
AF_INET6
;

876 i‡(
u
->
no_ªsﬁve
) {

877  
NGX_OK
;

880 i‡(
u
->
no_p‹t
) {

881 
u
->
p‹t
 = u->
deÁu…_p‹t
;

882 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

885  
NGX_OK
;

889 
u
->
îr
 = "the INET6 socketsáreÇot supported onÅhisÖlatform";

891  
NGX_ERROR
;

894 
	}
}

897 
ngx_öt_t


898 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

900 
u_ch¨
 *
p
, *
ho°
;

901 
size_t
 
Àn
;

902 
ö_p‹t_t
 
p‹t
;

903 
ö_addr_t
 
ö_addr
;

904 
ngx_uöt_t
 
i
;

905 
ho°ít
 *
h
;

906 
sockaddr_ö
 *
sö
;

910 
p‹t
 = 
	`ht⁄s
(
u
->port);

912 
ö_addr
 = 
	`ngx_öë_addr
(
u
->
ho°
.
d©a
, u->ho°.
Àn
);

914 i‡(
ö_addr
 =
INADDR_NONE
) {

915 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

916 i‡(
ho°
 =
NULL
) {

917  
NGX_ERROR
;

920 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

922 
h
 = 
	`gëho°by«me
((*Ë
ho°
);

924 
	`ngx_‰ì
(
ho°
);

926 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

927 
u
->
îr
 = "hostÇot found";

928  
NGX_ERROR
;

931 i‡(
u
->
⁄e_addr
 == 0) {

932 
i
 = 0; 
h
->
h_addr_li°
[i] !
NULL
; i++) { }

935 
i
 = 1;

940 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

941 i‡(
u
->
addrs
 =
NULL
) {

942  
NGX_ERROR
;

945 
u
->
«ddrs
 = 
i
;

947 
i
 = 0; i < 
u
->
«ddrs
; i++) {

949 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

950 i‡(
sö
 =
NULL
) {

951  
NGX_ERROR
;

954 
sö
->
sö_Ámûy
 = 
AF_INET
;

955 
sö
->
sö_p‹t
 = 
p‹t
;

956 
sö
->
sö_addr
.
s_addr
 = *(
ö_addr_t
 *Ë(
h
->
h_addr_li°
[
i
]);

958 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

959 
u
->
addrs
[
i
].
sockÀn
 = (
sockaddr_ö
);

961 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

963 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

964 i‡(
p
 =
NULL
) {

965  
NGX_ERROR
;

968 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
, 
p
,Üen, 1);

970 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

971 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

978 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

979 i‡(
u
->
addrs
 =
NULL
) {

980  
NGX_ERROR
;

983 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

984 i‡(
sö
 =
NULL
) {

985  
NGX_ERROR
;

988 
u
->
«ddrs
 = 1;

990 
sö
->
sö_Ámûy
 = 
AF_INET
;

991 
sö
->
sö_p‹t
 = 
p‹t
;

992 
sö
->
sö_addr
.
s_addr
 = 
ö_addr
;

994 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

995 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

997 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

998 i‡(
p
 =
NULL
) {

999  
NGX_ERROR
;

1002 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

1003 &
u
->
ho°
, 
	`¡ohs
(
p‹t
)Ë- 
p
;

1004 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

1007  
NGX_OK
;

1008 
	}
}

	@src/core/ngx_inet.h

8 #i‚de‡
_NGX_INET_H_INCLUDED_


9 
	#_NGX_INET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

24 
	#NGX_INET_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

25 
	#NGX_INET6_ADDRSTRLEN
 \

26 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

27 
	#NGX_UNIX_ADDRSTRLEN
 \

28 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

30 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

31 
	#NGX_SOCKADDR_STRLEN
 (("unix:"Ë- 1 + 
NGX_UNIX_ADDRSTRLEN
)

	)

33 
	#NGX_SOCKADDR_STRLEN
 (
NGX_INET6_ADDRSTRLEN
 + (":65535"Ë- 1)

	)

36 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

37 
	#NGX_SOCKADDRLEN
 (
sockaddr_un
)

	)

39 
	#NGX_SOCKADDRLEN
 512

	)

44 
ö_addr_t
 
	maddr
;

45 
ö_addr_t
 
	mmask
;

46 } 
	tngx_ö_cidr_t
;

49 #i‡(
NGX_HAVE_INET6
)

52 
ö6_addr
 
	maddr
;

53 
ö6_addr
 
	mmask
;

54 } 
	tngx_ö6_cidr_t
;

60 
ngx_uöt_t
 
	mÁmûy
;

62 
ngx_ö_cidr_t
 
	mö
;

63 #i‡(
NGX_HAVE_INET6
)

64 
ngx_ö6_cidr_t
 
	mö6
;

66 } 
	mu
;

67 } 
	tngx_cidr_t
;

71 
sockaddr
 *
	msockaddr
;

72 
sockÀn_t
 
	msockÀn
;

73 
ngx_°r_t
 
	m«me
;

74 } 
	tngx_addr_t
;

78 
ngx_°r_t
 
	muæ
;

79 
ngx_°r_t
 
	mho°
;

80 
ngx_°r_t
 
	mp‹t_ãxt
;

81 
ngx_°r_t
 
	muri
;

83 
ö_p‹t_t
 
	mp‹t
;

84 
ö_p‹t_t
 
	mdeÁu…_p‹t
;

85 
	mÁmûy
;

87 
	mli°í
:1;

88 
	muri_∑π
:1;

89 
	mno_ªsﬁve
:1;

90 
	m⁄e_addr
:1;

92 
	mno_p‹t
:1;

93 
	mwûdˇrd
:1;

95 
sockÀn_t
 
	msockÀn
;

96 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

98 
ngx_addr_t
 *
	maddrs
;

99 
ngx_uöt_t
 
	m«ddrs
;

101 *
	mîr
;

102 } 
	tngx_uæ_t
;

105 
ö_addr_t
 
ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
);

106 #i‡(
NGX_HAVE_INET6
)

107 
ngx_öt_t
 
ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
);

108 
size_t
 
ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, size_à
Àn
);

110 
size_t
 
ngx_sock_¡›
(
sockaddr
 *
ß
, 
u_ch¨
 *
ãxt
, size_à
Àn
,

111 
ngx_uöt_t
 
p‹t
);

112 
size_t
 
ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, size_à
Àn
);

113 
ngx_öt_t
 
ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
);

114 
ngx_öt_t
 
ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
,

115 
size_t
 
Àn
);

116 
ngx_öt_t
 
ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

117 
ngx_öt_t
 
ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

	@src/core/ngx_list.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_li°_t
 *

13 
	$ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_li°_t
 *
li°
;

17 
li°
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_li°_t
));

18 i‡(
li°
 =
NULL
) {

19  
NULL
;

22 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

23 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

24  
NULL
;

27 
li°
->
∑π
.
√…s
 = 0;

28 
li°
->
∑π
.
√xt
 = 
NULL
;

29 
li°
->
œ°
 = &li°->
∑π
;

30 
li°
->
size
 = size;

31 
li°
->
«Œoc
 = 
n
;

32 
li°
->
poﬁ
 =Öool;

34  
li°
;

35 
	}
}

39 
	$ngx_li°_push
(
ngx_li°_t
 *
l
)

41 *
ñt
;

42 
ngx_li°_∑π_t
 *
œ°
;

44 
œ°
 = 
l
->last;

46 i‡(
œ°
->
√…s
 =
l
->
«Œoc
) {

50 
œ°
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
, (
ngx_li°_∑π_t
));

51 i‡(
œ°
 =
NULL
) {

52  
NULL
;

55 
œ°
->
ñts
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
,Ü->
«Œoc
 *Ü->
size
);

56 i‡(
œ°
->
ñts
 =
NULL
) {

57  
NULL
;

60 
œ°
->
√…s
 = 0;

61 
œ°
->
√xt
 = 
NULL
;

63 
l
->
œ°
->
√xt
 =Üast;

64 
l
->
œ°
 =Üast;

67 
ñt
 = (*Ë
œ°
->
ñts
 + 
l
->
size
 *Üa°->
√…s
;

68 
œ°
->
√…s
++;

70  
ñt
;

71 
	}
}

	@src/core/ngx_list.h

8 #i‚de‡
_NGX_LIST_H_INCLUDED_


9 
	#_NGX_LIST_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°_∑π_s
 
	tngx_li°_∑π_t
;

18 
	sngx_li°_∑π_s
 {

19 *
	mñts
;

20 
ngx_uöt_t
 
	m√…s
;

21 
ngx_li°_∑π_t
 *
	m√xt
;

26 
ngx_li°_∑π_t
 *
	mœ°
;

27 
ngx_li°_∑π_t
 
	m∑π
;

28 
size_t
 
	msize
;

29 
ngx_uöt_t
 
	m«Œoc
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 } 
	tngx_li°_t
;

34 
ngx_li°_t
 *
ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

36 
ngx_ölöe
 
ngx_öt_t


37 
	$ngx_li°_öô
(
ngx_li°_t
 *
li°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

40 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

41  
NGX_ERROR
;

44 
li°
->
∑π
.
√…s
 = 0;

45 
li°
->
∑π
.
√xt
 = 
NULL
;

46 
li°
->
œ°
 = &li°->
∑π
;

47 
li°
->
size
 = size;

48 
li°
->
«Œoc
 = 
n
;

49 
li°
->
poﬁ
 =Öool;

51  
NGX_OK
;

52 
	}
}

80 *
ngx_li°_push
(
ngx_li°_t
 *
li°
);

	@src/core/ngx_log.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_îæog_comm™ds
[] = {

17 {
ngx_°rög
("error_log"),

18 
NGX_MAIN_CONF
|
NGX_CONF_1MORE
,

19 
ngx_îr‹_log
,

22 
NULL
},

24 
ngx_nuŒ_comm™d


28 
ngx_c‹e_moduÀ_t
 
	gngx_îæog_moduÀ_˘x
 = {

29 
ngx_°rög
("errlog"),

30 
NULL
,

31 
NULL


35 
ngx_moduÀ_t
 
	gngx_îæog_moduÀ
 = {

36 
NGX_MODULE_V1
,

37 &
ngx_îæog_moduÀ_˘x
,

38 
ngx_îæog_comm™ds
,

39 
NGX_CORE_MODULE
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NGX_MODULE_V1_PADDING


51 
ngx_log_t
 
	gngx_log
;

52 
ngx_›í_fûe_t
 
	gngx_log_fûe
;

53 
ngx_uöt_t
 
	gngx_u£_°dîr
 = 1;

56 
ngx_°r_t
 
	gîr_Àvñs
[] = {

57 
ngx_nuŒ_°rög
,

58 
ngx_°rög
("emerg"),

59 
ngx_°rög
("alert"),

60 
ngx_°rög
("crit"),

61 
ngx_°rög
("error"),

62 
ngx_°rög
("warn"),

63 
ngx_°rög
("notice"),

64 
ngx_°rög
("info"),

65 
ngx_°rög
("debug")

68 c⁄° *
	gdebug_Àvñs
[] = {

74 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

77 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

78 c⁄° *
fmt
, ...)

83 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

84 c⁄° *
fmt
, 
va_li°
 
¨gs
)

88 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

89 
va_li°
 
¨gs
;

91 
u_ch¨
 *
p
, *
œ°
, *
msg
;

92 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

94 i‡(
log
->
fûe
->
fd
 =
NGX_INVALID_FILE
) {

98 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

100 
	`ngx_mem˝y
(
îr°r
, 
ngx_ˇched_îr_log_time
.
d©a
,

101 
ngx_ˇched_îr_log_time
.
Àn
);

103 
p
 = 
îr°r
 + 
ngx_ˇched_îr_log_time
.
Àn
;

105 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, " [%V] ", &
îr_Àvñs
[
Àvñ
]);

108 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%P#" 
NGX_TID_T_FMT
 ": ",

109 
ngx_log_pid
, 
ngx_log_tid
);

111 i‡(
log
->
c⁄√˘i⁄
) {

112 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "*%uA ", 
log
->
c⁄√˘i⁄
);

115 
msg
 = 
p
;

117 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

119 
	`va_°¨t
(
¨gs
, 
fmt
);

120 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

121 
	`va_íd
(
¨gs
);

125 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

129 i‡(
îr
) {

130 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

133 i‡(
Àvñ
 !
NGX_LOG_DEBUG
 && 
log
->
h™dÀr
) {

134 
p
 = 
log
->
	`h™dÀr
÷og,Ö, 
œ°
 -Ö);

137 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

138 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

141 
	`ngx_löe„ed
(
p
);

143 (Ë
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
îr°r
, 
p
 -Érrstr);

145 i‡(!
ngx_u£_°dîr


146 || 
Àvñ
 > 
NGX_LOG_WARN


147 || 
log
->
fûe
->
fd
 =
ngx_°dîr
)

152 
msg
 -(7 + 
îr_Àvñs
[
Àvñ
].
Àn
 + 3);

154 (Ë
	`ngx_•rötf
(
msg
, "ngöx: [%V] ", &
îr_Àvñs
[
Àvñ
]);

156 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
msg
, 
p
 - msg);

157 
	}
}

160 #i‡!(
NGX_HAVE_VARIADIC_MACROS
)

162 
ngx_cde˛


163 
	$ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

164 c⁄° *
fmt
, ...)

166 
va_li°
 
¨gs
;

168 i‡(
log
->
log_Àvñ
 >
Àvñ
) {

169 
	`va_°¨t
(
¨gs
, 
fmt
);

170 
	`ngx_log_îr‹_c‹e
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨gs
);

171 
	`va_íd
(
¨gs
);

173 
	}
}

176 
ngx_cde˛


177 
	$ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

179 
va_li°
 
¨gs
;

181 
	`va_°¨t
(
¨gs
, 
fmt
);

182 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
îr
, 
fmt
, 
¨gs
);

183 
	`va_íd
(
¨gs
);

184 
	}
}

189 
ngx_cde˛


190 
	$ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

192 
u_ch¨
 *
p
;

193 
va_li°
 
¨gs
;

194 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

196 
	`va_°¨t
(
¨gs
, 
fmt
);

197 
p
 = 
	`ngx_v¢¥ötf
(
îr°r
, ”º°rË- 1, 
fmt
, 
¨gs
);

198 
	`va_íd
(
¨gs
);

200 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

201 "%*s", 
p
 - 
îr°r
,Érrstr);

202 
	}
}

205 
ngx_cde˛


206 
	$ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

208 
u_ch¨
 *
p
, *
œ°
;

209 
va_li°
 
¨gs
;

210 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

212 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

213 
p
 = 
îr°r
 + 7;

215 
	`ngx_mem˝y
(
îr°r
, "nginx: ", 7);

217 
	`va_°¨t
(
¨gs
, 
fmt
);

218 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

219 
	`va_íd
(
¨gs
);

221 i‡(
îr
) {

222 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

225 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

226 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

229 
	`ngx_löe„ed
(
p
);

231 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
îr°r
, 
p
 -Érrstr);

232 
	}
}

235 
u_ch¨
 *

236 
	$ngx_log_î∫o
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
)

238 i‡(
buf
 > 
œ°
 - 50) {

242 
buf
 = 
œ°
 - 50;

243 *
buf
++ = '.';

244 *
buf
++ = '.';

245 *
buf
++ = '.';

248 #i‡(
NGX_WIN32
)

249 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, ((Ë
îr
 < 0x80000000)

250 ? " (%d: " : " (%Xd: ", 
îr
);

252 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, " (%d: ", 
îr
);

255 
buf
 = 
	`ngx_°ªº‹
(
îr
, buf, 
œ°
 - buf);

257 i‡(
buf
 < 
œ°
) {

258 *
buf
++ = ')';

261  
buf
;

262 
	}
}

265 
ngx_log_t
 *

266 
	$ngx_log_öô
(
u_ch¨
 *
¥efix
)

268 
u_ch¨
 *
p
, *
«me
;

269 
size_t
 
∆í
, 
∂í
;

271 
ngx_log
.
fûe
 = &
ngx_log_fûe
;

272 
ngx_log
.
log_Àvñ
 = 
NGX_LOG_NOTICE
;

274 
«me
 = (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
;

281 
∆í
 = 
	`ngx_°æí
(
«me
);

283 i‡(
∆í
 == 0) {

284 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

285  &
ngx_log
;

288 
p
 = 
NULL
;

290 #i‡(
NGX_WIN32
)

291 i‡(
«me
[1] != ':') {

293 i‡(
«me
[0] != '/') {

296 i‡(
¥efix
) {

297 
∂í
 = 
	`ngx_°æí
(
¥efix
);

300 #ifde‡
NGX_PREFIX


301 
¥efix
 = (
u_ch¨
 *Ë
NGX_PREFIX
;

302 
∂í
 = 
	`ngx_°æí
(
¥efix
);

304 
∂í
 = 0;

308 i‡(
∂í
) {

309 
«me
 = 
	`mÆloc
(
∂í
 + 
∆í
 + 2);

310 i‡(
«me
 =
NULL
) {

311  
NULL
;

314 
p
 = 
	`ngx_˝ymem
(
«me
, 
¥efix
, 
∂í
);

316 i‡(!
	`ngx_∑th_£∑øt‹
(*(
p
 - 1))) {

317 *
p
++ = '/';

320 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
, 
∆í
 + 1);

322 
p
 = 
«me
;

326 
ngx_log_fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_APPEND
,

327 
NGX_FILE_CREATE_OR_OPEN
,

328 
NGX_FILE_DEFAULT_ACCESS
);

330 i‡(
ngx_log_fûe
.
fd
 =
NGX_INVALID_FILE
) {

331 
	`ngx_log_°dîr
(
ngx_î∫o
,

333 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

334 #i‡(
NGX_WIN32
)

335 
	`ngx_evít_log
(
ngx_î∫o
,

337 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

340 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

343 i‡(
p
) {

344 
	`ngx_‰ì
(
p
);

347  &
ngx_log
;

348 
	}
}

351 
ngx_log_t
 *

352 
	$ngx_log_¸óã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

354 
ngx_log_t
 *
log
;

356 
log
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_log_t
));

357 i‡(
log
 =
NULL
) {

358  
NULL
;

361 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cy˛e
, 
«me
);

362 i‡(
log
->
fûe
 =
NULL
) {

363  
NULL
;

366  
log
;

367 
	}
}

371 
	$ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
)

373 
ngx_uöt_t
 
i
, 
n
, 
d
, 
found
;

374 
ngx_°r_t
 *
vÆue
;

376 
vÆue
 = 
cf
->
¨gs
->
ñts
;

378 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

379 
found
 = 0;

381 
n
 = 1;Ç <
NGX_LOG_DEBUG
;Ç++) {

382 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
îr_Àvñs
[
n
].data) == 0) {

384 i‡(
log
->
log_Àvñ
 != 0) {

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

387 &
vÆue
[
i
]);

388  
NGX_CONF_ERROR
;

391 
log
->
log_Àvñ
 = 
n
;

392 
found
 = 1;

397 
n
 = 0, 
d
 = 
NGX_LOG_DEBUG_FIRST
; d <
NGX_LOG_DEBUG_LAST
; d <<= 1) {

398 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
debug_Àvñs
[
n
++]) == 0) {

399 i‡(
log
->
log_Àvñ
 & ~
NGX_LOG_DEBUG_ALL
) {

400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

402 &
vÆue
[
i
]);

403  
NGX_CONF_ERROR
;

406 
log
->
log_Àvñ
 |
d
;

407 
found
 = 1;

413 i‡(!
found
) {

414 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

415 "övÆidÜogÜevñ \"%V\"", &
vÆue
[
i
]);

416  
NGX_CONF_ERROR
;

420 i‡(
log
->
log_Àvñ
 =
NGX_LOG_DEBUG
) {

421 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

424  
NGX_CONF_OK
;

425 
	}
}

429 
	$ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

431 
ngx_°r_t
 *
vÆue
, 
«me
;

433 i‡(
cf
->
cy˛e
->
√w_log
.
fûe
) {

437 
vÆue
 = 
cf
->
¨gs
->
ñts
;

439 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "stderr") == 0) {

440 
	`ngx_°r_nuŒ
(&
«me
);

443 
«me
 = 
vÆue
[1];

446 
cf
->
cy˛e
->
√w_log
.
fûe
 = 
	`ngx_c⁄f_›í_fûe
(cf->cy˛e, &
«me
);

447 i‡(
cf
->
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

448  
NULL
;

451 i‡(
cf
->
¨gs
->
√…s
 == 2) {

452 
cf
->
cy˛e
->
√w_log
.
log_Àvñ
 = 
NGX_LOG_ERR
;

453  
NGX_CONF_OK
;

456 
cf
->
cy˛e
->
√w_log
.
log_Àvñ
 = 0;

458  
	`ngx_log_£t_Àvñs
(
cf
, &cf->
cy˛e
->
√w_log
);

459 
	}
}

	@src/core/ngx_log.h

8 #i‚de‡
_NGX_LOG_H_INCLUDED_


9 
	#_NGX_LOG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_LOG_STDERR
 0

	)

17 
	#NGX_LOG_EMERG
 1

	)

18 
	#NGX_LOG_ALERT
 2

	)

19 
	#NGX_LOG_CRIT
 3

	)

20 
	#NGX_LOG_ERR
 4

	)

21 
	#NGX_LOG_WARN
 5

	)

22 
	#NGX_LOG_NOTICE
 6

	)

23 
	#NGX_LOG_INFO
 7

	)

24 
	#NGX_LOG_DEBUG
 8

	)

26 
	#NGX_LOG_DEBUG_CORE
 0x010

	)

27 
	#NGX_LOG_DEBUG_ALLOC
 0x020

	)

28 
	#NGX_LOG_DEBUG_MUTEX
 0x040

	)

29 
	#NGX_LOG_DEBUG_EVENT
 0x080

	)

30 
	#NGX_LOG_DEBUG_HTTP
 0x100

	)

31 
	#NGX_LOG_DEBUG_MAIL
 0x200

	)

32 
	#NGX_LOG_DEBUG_MYSQL
 0x400

	)

39 
	#NGX_LOG_DEBUG_FIRST
 
NGX_LOG_DEBUG_CORE


	)

40 
	#NGX_LOG_DEBUG_LAST
 
NGX_LOG_DEBUG_MYSQL


	)

41 
	#NGX_LOG_DEBUG_CONNECTION
 0x80000000

	)

42 
	#NGX_LOG_DEBUG_ALL
 0x7ffffff0

	)

45 
	gu_ch¨
 *(*
	tngx_log_h™dÀr_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

48 
	sngx_log_s
 {

49 
ngx_uöt_t
 
	mlog_Àvñ
;

50 
ngx_›í_fûe_t
 *
	mfûe
;

52 
ngx_©omic_uöt_t
 
	mc⁄√˘i⁄
;

54 
ngx_log_h™dÀr_±
 
	mh™dÀr
;

55 *
	md©a
;

63 *
	ma˘i⁄
;

67 
	#NGX_MAX_ERROR_STR
 2048

	)

72 #i‡(
NGX_HAVE_C99_VARIADIC_MACROS
)

74 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

76 
	#ngx_log_îr‹
(
Àvñ
, 
log
, ...) \

77 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
__VA_ARGS__
)

	)

79 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

80 c⁄° *
fmt
, ...);

82 
	#ngx_log_debug
(
Àvñ
, 
log
, ...) \

83 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

84 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
__VA_ARGS__
)

	)

88 #ñi‡(
NGX_HAVE_GCC_VARIADIC_MACROS
)

90 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

92 
	#ngx_log_îr‹
(
Àvñ
, 
log
, 
¨gs
...) \

93 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
¨gs
)

	)

95 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

96 c⁄° *
fmt
, ...);

98 
	#ngx_log_debug
(
Àvñ
, 
log
, 
¨gs
...) \

99 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

100 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
¨gs
)

	)

106 
	#NGX_HAVE_VARIADIC_MACROS
 0

	)

108 
ngx_cde˛
 
ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

109 c⁄° *
fmt
, ...);

110 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

111 c⁄° *
fmt
, 
va_li°
 
¨gs
);

112 
ngx_cde˛
 
ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

113 c⁄° *
fmt
, ...);

121 #i‡(
NGX_DEBUG
)

123 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

125 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

126 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

128 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

129 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

131 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

132 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

134 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

135 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

137 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

138 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

140 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

141 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

143 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

144 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

145 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

146 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

148 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

149 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

150 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

151 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

153 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

154 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

155 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

156 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

161 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

162 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

163 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
)

	)

165 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

166 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

167 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
)

	)

169 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

170 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

171 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

173 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

174 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

175 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

177 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

178 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

179 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

181 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

182 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

183 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

185 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

186 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

187 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

188 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

190 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

191 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

192 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

193 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

194 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

196 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

197 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

198 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

199 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

200 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

206 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

207 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

208 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

209 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

210 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

211 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

212 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

213 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

214 
¨g6
, 
¨g7
)

	)

215 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

216 
¨g6
, 
¨g7
, 
¨g8
)

	)

222 
ngx_log_t
 *
ngx_log_öô
(
u_ch¨
 *
¥efix
);

223 
ngx_log_t
 *
ngx_log_¸óã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

224 *
ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
);

225 
ngx_cde˛
 
ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

226 
ngx_cde˛
 
ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

227 
u_ch¨
 *
ngx_log_î∫o
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
);

239 
ngx_ölöe
 

240 
	$ngx_wrôe_°dîr
(*
ãxt
)

242 (Ë
	`ngx_wrôe_fd
(
ngx_°dîr
, 
ãxt
, 
	`°æí
(text));

243 
	}
}

246 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

247 
ngx_uöt_t
 
ngx_u£_°dîr
;

	@src/core/ngx_md5.c

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_md5.h
>

16 #i‡!(
NGX_HAVE_MD5
)

18 c⁄° 
u_ch¨
 *
ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° u_ch¨ *
d©a
,

19 
size_t
 
size
);

23 
	$ngx_md5_öô
(
ngx_md5_t
 *
˘x
)

25 
˘x
->
a
 = 0x67452301;

26 
˘x
->
b
 = 0xefcdab89;

27 
˘x
->
c
 = 0x98badcfe;

28 
˘x
->
d
 = 0x10325476;

30 
˘x
->
byãs
 = 0;

31 
	}
}

35 
	$ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
)

37 
size_t
 
u£d
, 
‰ì
;

39 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

40 
˘x
->
byãs
 +
size
;

42 i‡(
u£d
) {

43 
‰ì
 = 64 - 
u£d
;

45 i‡(
size
 < 
‰ì
) {

46 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

50 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

51 
d©a
 = (
u_ch¨
 *Ëd©®+ 
‰ì
;

52 
size
 -
‰ì
;

53 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

56 i‡(
size
 >= 64) {

57 
d©a
 = 
	`ngx_md5_body
(
˘x
, d©a, 
size
 & ~(
size_t
) 0x3f);

58 
size
 &= 0x3f;

61 
	`ngx_mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

62 
	}
}

66 
	$ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
)

68 
size_t
 
u£d
, 
‰ì
;

70 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

72 
˘x
->
buf„r
[
u£d
++] = 0x80;

74 
‰ì
 = 64 - 
u£d
;

76 i‡(
‰ì
 < 8) {

77 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
);

78 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

79 
u£d
 = 0;

80 
‰ì
 = 64;

83 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
 - 8);

85 
˘x
->
byãs
 <<= 3;

86 
˘x
->
buf„r
[56] = (
u_ch¨
Ë˘x->
byãs
;

87 
˘x
->
buf„r
[57] = (
u_ch¨
Ë(˘x->
byãs
 >> 8);

88 
˘x
->
buf„r
[58] = (
u_ch¨
Ë(˘x->
byãs
 >> 16);

89 
˘x
->
buf„r
[59] = (
u_ch¨
Ë(˘x->
byãs
 >> 24);

90 
˘x
->
buf„r
[60] = (
u_ch¨
Ë(˘x->
byãs
 >> 32);

91 
˘x
->
buf„r
[61] = (
u_ch¨
Ë(˘x->
byãs
 >> 40);

92 
˘x
->
buf„r
[62] = (
u_ch¨
Ë(˘x->
byãs
 >> 48);

93 
˘x
->
buf„r
[63] = (
u_ch¨
Ë(˘x->
byãs
 >> 56);

95 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

97 
ªsu…
[0] = (
u_ch¨
Ë
˘x
->
a
;

98 
ªsu…
[1] = (
u_ch¨
Ë(
˘x
->
a
 >> 8);

99 
ªsu…
[2] = (
u_ch¨
Ë(
˘x
->
a
 >> 16);

100 
ªsu…
[3] = (
u_ch¨
Ë(
˘x
->
a
 >> 24);

101 
ªsu…
[4] = (
u_ch¨
Ë
˘x
->
b
;

102 
ªsu…
[5] = (
u_ch¨
Ë(
˘x
->
b
 >> 8);

103 
ªsu…
[6] = (
u_ch¨
Ë(
˘x
->
b
 >> 16);

104 
ªsu…
[7] = (
u_ch¨
Ë(
˘x
->
b
 >> 24);

105 
ªsu…
[8] = (
u_ch¨
Ë
˘x
->
c
;

106 
ªsu…
[9] = (
u_ch¨
Ë(
˘x
->
c
 >> 8);

107 
ªsu…
[10] = (
u_ch¨
Ë(
˘x
->
c
 >> 16);

108 
ªsu…
[11] = (
u_ch¨
Ë(
˘x
->
c
 >> 24);

109 
ªsu…
[12] = (
u_ch¨
Ë
˘x
->
d
;

110 
ªsu…
[13] = (
u_ch¨
Ë(
˘x
->
d
 >> 8);

111 
ªsu…
[14] = (
u_ch¨
Ë(
˘x
->
d
 >> 16);

112 
ªsu…
[15] = (
u_ch¨
Ë(
˘x
->
d
 >> 24);

114 
	`ngx_memzîo
(
˘x
, (*ctx));

115 
	}
}

126 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

127 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

128 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

129 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

135 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

136 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

137 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

138 (
a
Ë+(
b
)

	)

149 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

151 
	#SET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

152 
	#GET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

156 
	#SET
(
n
) \

157 (
block
[
n
] = \

158 (
uöt32_t
Ë
p
[
n
 * 4] | \

159 ((
uöt32_t
Ë
p
[
n
 * 4 + 1] << 8) | \

160 ((
uöt32_t
Ë
p
[
n
 * 4 + 2] << 16) | \

161 ((
uöt32_t
Ë
p
[
n
 * 4 + 3] << 24))

	)

163 
	#GET
(
n
Ë
block
[n]

	)

173 c⁄° 
u_ch¨
 *

174 
	$ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° 
u_ch¨
 *
d©a
, 
size_t
 
size
)

176 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

177 
uöt32_t
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

178 c⁄° 
u_ch¨
 *
p
;

179 #i‡!(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

180 
uöt32_t
 
block
[16];

183 
p
 = 
d©a
;

185 
a
 = 
˘x
->a;

186 
b
 = 
˘x
->b;

187 
c
 = 
˘x
->c;

188 
d
 = 
˘x
->d;

191 
ßved_a
 = 
a
;

192 
ßved_b
 = 
b
;

193 
ßved_c
 = 
c
;

194 
ßved_d
 = 
d
;

198 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7);

199 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12);

200 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17);

201 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22);

202 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7);

203 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12);

204 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17);

205 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22);

206 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7);

207 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12);

208 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17);

209 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22);

210 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7);

211 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12);

212 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17);

213 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22);

217 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5);

218 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9);

219 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14);

220 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20);

221 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5);

222 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9);

223 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14);

224 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20);

225 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5);

226 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9);

227 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14);

228 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20);

229 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5);

230 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9);

231 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14);

232 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20);

236 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4);

237 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11);

238 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16);

239 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23);

240 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4);

241 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11);

242 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16);

243 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23);

244 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4);

245 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11);

246 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16);

247 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23);

248 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4);

249 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11);

250 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16);

251 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23);

255 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6);

256 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10);

257 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15);

258 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21);

259 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6);

260 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10);

261 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15);

262 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21);

263 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6);

264 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10);

265 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15);

266 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21);

267 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6);

268 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10);

269 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15);

270 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21);

272 
a
 +
ßved_a
;

273 
b
 +
ßved_b
;

274 
c
 +
ßved_c
;

275 
d
 +
ßved_d
;

277 
p
 += 64;

279 } 
size
 -= 64);

281 
˘x
->
a
 =á;

282 
˘x
->
b
 = b;

283 
˘x
->
c
 = c;

284 
˘x
->
d
 = d;

286  
p
;

287 
	}
}

	@src/core/ngx_md5.h

8 #i‚de‡
_NGX_MD5_H_INCLUDED_


9 
	#_NGX_MD5_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_MD5
)

18 #i‡(
NGX_HAVE_OPENSSL_MD5_H
)

19 
	~<›ís¶/md5.h
>

21 
	~<md5.h
>

25 
MD5_CTX
 
	tngx_md5_t
;

28 #i‡(
NGX_OPENSSL_MD5
)

30 
	#ngx_md5_öô
 
MD5_Inô


	)

31 
	#ngx_md5_upd©e
 
MD5_Upd©e


	)

32 
	#ngx_md5_föÆ
 
MD5_FöÆ


	)

36 
	#ngx_md5_öô
 
MD5Inô


	)

37 
	#ngx_md5_upd©e
 
MD5Upd©e


	)

38 
	#ngx_md5_föÆ
 
MD5FöÆ


	)

47 
uöt64_t
 
	mbyãs
;

48 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
;

49 
u_ch¨
 
	mbuf„r
[64];

50 } 
	tngx_md5_t
;

53 
ngx_md5_öô
(
ngx_md5_t
 *
˘x
);

54 
ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
);

55 
ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
);

	@src/core/ngx_murmurhash.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
uöt32_t


12 
	$ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

14 
uöt32_t
 
h
, 
k
;

16 
h
 = 0 ^ 
Àn
;

18 
Àn
 >= 4) {

19 
k
 = 
d©a
[0];

20 
k
 |
d©a
[1] << 8;

21 
k
 |
d©a
[2] << 16;

22 
k
 |
d©a
[3] << 24;

24 
k
 *= 0x5bd1e995;

25 
k
 ^= k >> 24;

26 
k
 *= 0x5bd1e995;

28 
h
 *= 0x5bd1e995;

29 
h
 ^
k
;

31 
d©a
 += 4;

32 
Àn
 -= 4;

35 
Àn
) {

37 
h
 ^
d©a
[2] << 16;

39 
h
 ^
d©a
[1] << 8;

41 
h
 ^
d©a
[0];

42 
h
 *= 0x5bd1e995;

45 
h
 ^= h >> 13;

46 
h
 *= 0x5bd1e995;

47 
h
 ^= h >> 15;

49  
h
;

50 
	}
}

	@src/core/ngx_murmurhash.h

8 #i‚de‡
_NGX_MURMURHASH_H_INCLUDED_


9 
	#_NGX_MURMURHASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 
ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

	@src/core/ngx_open_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

21 
	#NGX_MIN_READ_AHEAD
 (128 * 1024)

	)

24 
ngx_›í_fûe_ˇche_˛ónup
(*
d©a
);

25 
ngx_öt_t
 
ngx_›í_™d_°©_fûe
(
u_ch¨
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

26 
ngx_log_t
 *
log
);

27 
ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

28 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

29 
ngx_›í_fûe_˛ónup
(*
d©a
);

30 
ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

31 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
);

32 
ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
);

33 
ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

34 
ngx_uöt_t
 
n
, 
ngx_log_t
 *
log
);

35 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

36 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

37 
ngx_ˇched_›í_fûe_t
 *

38 
ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

39 
uöt32_t
 
hash
);

40 
ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
);

43 
ngx_›í_fûe_ˇche_t
 *

44 
	$ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
)

46 
ngx_poﬁ_˛ónup_t
 *
˛n
;

47 
ngx_›í_fûe_ˇche_t
 *
ˇche
;

49 
ˇche
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_›í_fûe_ˇche_t
));

50 i‡(
ˇche
 =
NULL
) {

51  
NULL
;

54 
	`ngx_rbåì_öô
(&
ˇche
->
rbåì
, &ˇche->
£¡öñ
,

55 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
);

57 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

59 
ˇche
->
cuºít
 = 0;

60 
ˇche
->
max
 = max;

61 
ˇche
->
öa˘ive
 = inactive;

63 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, 0);

64 i‡(
˛n
 =
NULL
) {

65  
NULL
;

68 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_˛ónup
;

69 
˛n
->
d©a
 = 
ˇche
;

71  
ˇche
;

72 
	}
}

76 
	$ngx_›í_fûe_ˇche_˛ónup
(*
d©a
)

78 
ngx_›í_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

80 
ngx_queue_t
 *
q
;

81 
ngx_ˇched_›í_fûe_t
 *
fûe
;

83 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

88 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

92 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

94 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

96 
	`ngx_queue_ªmove
(
q
);

98 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

100 
ˇche
->
cuºít
--;

102 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

103 "dñëêˇched o≥¿fûe: %s", 
fûe
->
«me
);

105 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

106 
fûe
->
˛o£
 = 1;

107 
fûe
->
cou¡
 = 0;

108 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
ngx_cy˛e
->
log
);

111 
	`ngx_‰ì
(
fûe
->
«me
);

112 
	`ngx_‰ì
(
fûe
);

116 i‡(
ˇche
->
cuºít
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

119 
ˇche
->
cuºít
);

122 i‡(
ˇche
->
rbåì
.
roŸ
 !ˇche->rbåì.
£¡öñ
) {

123 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

127 
	}
}

130 
ngx_öt_t


131 
	$ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

132 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
)

134 
time_t
 
now
;

135 
uöt32_t
 
hash
;

136 
ngx_öt_t
 
rc
;

137 
ngx_fûe_öfo_t
 
fi
;

138 
ngx_poﬁ_˛ónup_t
 *
˛n
;

139 
ngx_ˇched_›í_fûe_t
 *
fûe
;

140 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

141 
ngx_›í_fûe_ˇche_˛ónup_t
 *
of˛n
;

143 
of
->
fd
 = 
NGX_INVALID_FILE
;

144 
of
->
îr
 = 0;

146 i‡(
ˇche
 =
NULL
) {

148 i‡(
of
->
ã°_⁄ly
) {

150 i‡(
	`ngx_fûe_öfo
(
«me
->
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

151 
of
->
îr
 = 
ngx_î∫o
;

152 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

153  
NGX_ERROR
;

156 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

157 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

158 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

159 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

160 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

161 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

162 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

163 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

165  
NGX_OK
;

168 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

169 i‡(
˛n
 =
NULL
) {

170  
NGX_ERROR
;

173 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
->
d©a
, 
of
, 
poﬁ
->
log
);

175 i‡(
rc
 =
NGX_OK
 && !
of
->
is_dú
) {

176 
˛n
->
h™dÀr
 = 
ngx_poﬁ_˛ónup_fûe
;

177 
˛nf
 = 
˛n
->
d©a
;

179 
˛nf
->
fd
 = 
of
->fd;

180 
˛nf
->
«me
 =Çame->
d©a
;

181 
˛nf
->
log
 = 
poﬁ
->log;

184  
rc
;

187 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_›í_fûe_ˇche_˛ónup_t
));

188 i‡(
˛n
 =
NULL
) {

189  
NGX_ERROR
;

192 
now
 = 
	`ngx_time
();

194 
hash
 = 
	`ngx_¸c32_l⁄g
(
«me
->
d©a
,Çame->
Àn
);

196 
fûe
 = 
	`ngx_›í_fûe_lookup
(
ˇche
, 
«me
, 
hash
);

198 i‡(
fûe
) {

200 
fûe
->
u£s
++;

202 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

204 i‡(
fûe
->
fd
 =
NGX_INVALID_FILE
 && fûe->
îr
 =0 && !fûe->
is_dú
) {

208 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
->
d©a
, 
of
, 
poﬁ
->
log
);

210 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

211 
Áûed
;

214 
add_evít
;

217 i‡(
fûe
->
u£_evít


218 || (
fûe
->
evít
 =
NULL


219 && (
of
->
uniq
 =0 || of->uniq =
fûe
->uniq)

220 && 
now
 - 
fûe
->
¸óãd
 < 
of
->
vÆid
))

222 i‡(
fûe
->
îr
 == 0) {

224 
of
->
fd
 = 
fûe
->fd;

225 
of
->
uniq
 = 
fûe
->uniq;

226 
of
->
mtime
 = 
fûe
->mtime;

227 
of
->
size
 = 
fûe
->size;

229 
of
->
is_dú
 = 
fûe
->is_dir;

230 
of
->
is_fûe
 = 
fûe
->is_file;

231 
of
->
is_lök
 = 
fûe
->is_link;

232 
of
->
is_exec
 = 
fûe
->is_exec;

233 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

235 i‡(!
fûe
->
is_dú
) {

236 
fûe
->
cou¡
++;

237 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

241 
of
->
îr
 = 
fûe
->err;

242 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

245 
found
;

248 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

250 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
);

252 i‡(
fûe
->
is_dú
) {

260 
of
->
ã°_dú
 = 1;

263 
of
->
fd
 = 
fûe
->fd;

264 
of
->
uniq
 = 
fûe
->uniq;

266 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
->
d©a
, 
of
, 
poﬁ
->
log
);

268 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

269 
Áûed
;

272 i‡(
of
->
is_dú
) {

274 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

275 
upd©e
;

280 } i‡(
of
->
îr
 == 0) {

282 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

283 
add_evít
;

286 i‡(
of
->
uniq
 =
fûe
->uniq) {

288 i‡(
fûe
->
evít
) {

289 
fûe
->
u£_evít
 = 1;

292 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

294 
upd©e
;

301 i‡(
fûe
->
îr
 || fûe->
is_dú
) {

302 
upd©e
;

308 i‡(
fûe
->
cou¡
 == 0) {

310 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

312 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

313 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

314 
ngx_˛o£_fûe_n
 " \"%s\" failed",

315 
«me
->
d©a
);

318 
add_evít
;

321 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

323 
ˇche
->
cuºít
--;

325 
fûe
->
˛o£
 = 1;

327 
¸óã
;

332 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
->
d©a
, 
of
, 
poﬁ
->
log
);

334 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

335 
Áûed
;

338 
¸óã
:

340 i‡(
ˇche
->
cuºít
 >ˇche->
max
) {

341 
	`ngx_expúe_ﬁd_ˇched_fûes
(
ˇche
, 0, 
poﬁ
->
log
);

344 
fûe
 = 
	`ngx_Æloc
((
ngx_ˇched_›í_fûe_t
), 
poﬁ
->
log
);

346 i‡(
fûe
 =
NULL
) {

347 
Áûed
;

350 
fûe
->
«me
 = 
	`ngx_Æloc
“ame->
Àn
 + 1, 
poﬁ
->
log
);

352 i‡(
fûe
->
«me
 =
NULL
) {

353 
	`ngx_‰ì
(
fûe
);

354 
fûe
 = 
NULL
;

355 
Áûed
;

358 
	`ngx_˝y°∫
(
fûe
->
«me
,Çame->
d©a
,Çame->
Àn
 + 1);

360 
fûe
->
node
.
key
 = 
hash
;

362 
	`ngx_rbåì_ö£π
(&
ˇche
->
rbåì
, &
fûe
->
node
);

364 
ˇche
->
cuºít
++;

366 
fûe
->
u£s
 = 1;

367 
fûe
->
cou¡
 = 0;

368 
fûe
->
u£_evít
 = 0;

369 
fûe
->
evít
 = 
NULL
;

371 
add_evít
:

373 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

375 
upd©e
:

377 
fûe
->
fd
 = 
of
->fd;

378 
fûe
->
îr
 = 
of
->err;

380 i‡(
of
->
îr
 == 0) {

381 
fûe
->
uniq
 = 
of
->uniq;

382 
fûe
->
mtime
 = 
of
->mtime;

383 
fûe
->
size
 = 
of
->size;

385 
fûe
->
˛o£
 = 0;

387 
fûe
->
is_dú
 = 
of
->is_dir;

388 
fûe
->
is_fûe
 = 
of
->is_file;

389 
fûe
->
is_lök
 = 
of
->is_link;

390 
fûe
->
is_exec
 = 
of
->is_exec;

391 
fûe
->
is_dúe˘io
 = 
of
->is_directio;

393 i‡(!
of
->
is_dú
) {

394 
fûe
->
cou¡
++;

398 
fûe
->
¸óãd
 = 
now
;

400 
found
:

402 
fûe
->
ac˚s£d
 = 
now
;

404 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

406 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

408 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
, fûe->
u£s
);

410 i‡(
of
->
îr
 == 0) {

412 i‡(!
of
->
is_dú
) {

413 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_˛ónup
;

414 
of˛n
 = 
˛n
->
d©a
;

416 
of˛n
->
ˇche
 = cache;

417 
of˛n
->
fûe
 = file;

418 
of˛n
->
mö_u£s
 = 
of
->min_uses;

419 
of˛n
->
log
 = 
poﬁ
->log;

422  
NGX_OK
;

425  
NGX_ERROR
;

427 
Áûed
:

429 i‡(
fûe
) {

430 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

432 
ˇche
->
cuºít
--;

434 i‡(
fûe
->
cou¡
 == 0) {

436 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

437 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

438 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

439 
ngx_˛o£_fûe_n
 " \"%s\" failed",

440 
fûe
->
«me
);

444 
	`ngx_‰ì
(
fûe
->
«me
);

445 
	`ngx_‰ì
(
fûe
);

448 
fûe
->
˛o£
 = 1;

452 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

453 i‡(
	`ngx_˛o£_fûe
(
of
->
fd
Ë=
NGX_FILE_ERROR
) {

454 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

455 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

459  
NGX_ERROR
;

460 
	}
}

463 
ngx_öt_t


464 
	$ngx_›í_™d_°©_fûe
(
u_ch¨
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
)

466 
ngx_fd_t
 
fd
;

467 
ngx_fûe_öfo_t
 
fi
;

469 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

471 i‡(
	`ngx_fûe_öfo
(
«me
, &
fi
Ë=
NGX_FILE_ERROR
) {

472 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

473 
Áûed
;

476 i‡(
of
->
uniq
 =
	`ngx_fûe_uniq
(&
fi
)) {

477 
d⁄e
;

480 } i‡(
of
->
ã°_dú
) {

482 i‡(
	`ngx_fûe_öfo
(
«me
, &
fi
Ë=
NGX_FILE_ERROR
) {

483 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

484 
Áûed
;

487 i‡(
	`ngx_is_dú
(&
fi
)) {

488 
d⁄e
;

492 i‡(!
of
->
log
) {

499 
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

500 
NGX_FILE_OPEN
, 0);

503 
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_APPEND
, 
NGX_FILE_CREATE_OR_OPEN
,

504 
NGX_FILE_DEFAULT_ACCESS
);

507 i‡(
fd
 =
NGX_INVALID_FILE
) {

508 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

509 
Áûed
;

512 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

513 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 
ngx_î∫o
,

514 
ngx_fd_öfo_n
 " \"%s\" faûed", 
«me
);

516 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

517 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

518 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
);

521 
of
->
fd
 = 
NGX_INVALID_FILE
;

523  
NGX_ERROR
;

526 i‡(
	`ngx_is_dú
(&
fi
)) {

527 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

528 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

529 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
);

532 
of
->
fd
 = 
NGX_INVALID_FILE
;

535 
of
->
fd
 = fd;

537 i‡(
of
->
ªad_ahód
 && 
	`ngx_fûe_size
(&
fi
Ë> 
NGX_MIN_READ_AHEAD
) {

538 i‡(
	`ngx_ªad_ahód
(
fd
, 
of
->
ªad_ahód
Ë=
NGX_ERROR
) {

539 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

540 
ngx_ªad_ahód_n
 " \"%s\" faûed", 
«me
);

544 i‡(
of
->
dúe˘io
 <
	`ngx_fûe_size
(&
fi
)) {

545 i‡(
	`ngx_dúe˘io_⁄
(
fd
Ë=
NGX_FILE_ERROR
) {

546 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

547 
ngx_dúe˘io_⁄_n
 " \"%s\" faûed", 
«me
);

550 
of
->
is_dúe˘io
 = 1;

555 
d⁄e
:

557 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

558 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

559 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

560 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

561 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

562 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

563 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

564 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

566  
NGX_OK
;

568 
Áûed
:

570 
of
->
fd
 = 
NGX_INVALID_FILE
;

571 
of
->
îr
 = 
ngx_î∫o
;

573  
NGX_ERROR
;

574 
	}
}

583 
	$ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

584 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
)

586 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

588 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_VNODE_EVENT
)

589 || !
of
->
evíts


590 || 
fûe
->
evít


591 || 
of
->
fd
 =
NGX_INVALID_FILE


592 || 
fûe
->
u£s
 < 
of
->
mö_u£s
)

597 
fûe
->
u£_evít
 = 0;

599 
fûe
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
log
);

600 i‡(
fûe
->
evít
=
NULL
) {

604 
„v
 = 
	`ngx_Æloc
((
ngx_›í_fûe_ˇche_evít_t
), 
log
);

605 i‡(
„v
 =
NULL
) {

606 
	`ngx_‰ì
(
fûe
->
evít
);

607 
fûe
->
evít
 = 
NULL
;

611 
„v
->
fd
 = 
of
->fd;

612 
„v
->
fûe
 = file;

613 
„v
->
ˇche
 = cache;

615 
fûe
->
evít
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_ªmove
;

616 
fûe
->
evít
->
d©a
 = 
„v
;

624 
fûe
->
evít
->
log
 = 
ngx_cy˛e
->log;

626 i‡(
	`ngx_add_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
, 
NGX_ONESHOT_EVENT
)

627 !
NGX_OK
)

629 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

630 
	`ngx_‰ì
(
fûe
->
evít
);

631 
fûe
->
evít
 = 
NULL
;

643 
	}
}

647 
	$ngx_›í_fûe_˛ónup
(*
d©a
)

649 
ngx_›í_fûe_ˇche_˛ónup_t
 *
c
 = 
d©a
;

651 
c
->
fûe
->
cou¡
--;

653 
	`ngx_˛o£_ˇched_fûe
(
c
->
ˇche
, c->
fûe
, c->
mö_u£s
, c->
log
);

656 
	`ngx_expúe_ﬁd_ˇched_fûes
(
c
->
ˇche
, 1, c->
log
);

657 
	}
}

661 
	$ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

662 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
)

664 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

666 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
u£s
, fûe->
˛o£
);

668 i‡(!
fûe
->
˛o£
) {

670 
fûe
->
ac˚s£d
 = 
	`ngx_time
();

672 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

674 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

676 i‡(
fûe
->
u£s
 >
mö_u£s
 || fûe->
cou¡
) {

681 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

683 i‡(
fûe
->
cou¡
) {

687 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

689 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

690 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

691 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
);

694 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

697 i‡(!
fûe
->
˛o£
) {

701 
	`ngx_‰ì
(
fûe
->
«me
);

702 
	`ngx_‰ì
(
fûe
);

703 
	}
}

707 
	$ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
)

709 i‡(
fûe
->
evít
 =
NULL
) {

713 (Ë
	`ngx_dñ_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
,

714 
fûe
->
cou¡
 ? 
NGX_FLUSH_EVENT
 : 
NGX_CLOSE_EVENT
);

716 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

717 
	`ngx_‰ì
(
fûe
->
evít
);

718 
fûe
->
evít
 = 
NULL
;

719 
fûe
->
u£_evít
 = 0;

720 
	}
}

724 
	$ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_uöt_t
 
n
,

725 
ngx_log_t
 *
log
)

727 
time_t
 
now
;

728 
ngx_queue_t
 *
q
;

729 
ngx_ˇched_›í_fûe_t
 *
fûe
;

731 
now
 = 
	`ngx_time
();

739 
n
 < 3) {

741 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

745 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

747 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

749 i‡(
n
++ !0 && 
now
 - 
fûe
->
ac˚s£d
 <
ˇche
->
öa˘ive
) {

753 
	`ngx_queue_ªmove
(
q
);

755 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

757 
ˇche
->
cuºít
--;

759 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

760 "expúêˇched o≥¿fûe: %s", 
fûe
->
«me
);

762 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

763 
fûe
->
˛o£
 = 1;

764 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
log
);

767 
	`ngx_‰ì
(
fûe
->
«me
);

768 
	`ngx_‰ì
(
fûe
);

771 
	}
}

775 
	$ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

776 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

778 
ngx_rbåì_node_t
 **
p
;

779 
ngx_ˇched_›í_fûe_t
 *
fûe
, *
fûe_ãmp
;

783 i‡(
node
->
key
 < 
ãmp
->key) {

785 
p
 = &
ãmp
->
À·
;

787 } i‡(
node
->
key
 > 
ãmp
->key) {

789 
p
 = &
ãmp
->
right
;

793 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

794 
fûe_ãmp
 = (
ngx_ˇched_›í_fûe_t
 *Ë
ãmp
;

796 
p
 = (
	`ngx_°rcmp
(
fûe
->
«me
, 
fûe_ãmp
->name) < 0)

797 ? &
ãmp
->
À·
 : &ãmp->
right
;

800 i‡(*
p
 =
£¡öñ
) {

804 
ãmp
 = *
p
;

807 *
p
 = 
node
;

808 
node
->
∑ª¡
 = 
ãmp
;

809 
node
->
À·
 = 
£¡öñ
;

810 
node
->
right
 = 
£¡öñ
;

811 
	`ngx_rbt_ªd
(
node
);

812 
	}
}

815 
ngx_ˇched_›í_fûe_t
 *

816 
	$ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

817 
uöt32_t
 
hash
)

819 
ngx_öt_t
 
rc
;

820 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

821 
ngx_ˇched_›í_fûe_t
 *
fûe
;

823 
node
 = 
ˇche
->
rbåì
.
roŸ
;

824 
£¡öñ
 = 
ˇche
->
rbåì
.sentinel;

826 
node
 !
£¡öñ
) {

828 i‡(
hash
 < 
node
->
key
) {

829 
node
 =Çode->
À·
;

833 i‡(
hash
 > 
node
->
key
) {

834 
node
 =Çode->
right
;

840 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

842 
rc
 = 
	`ngx_°rcmp
(
«me
->
d©a
, 
fûe
->name);

844 i‡(
rc
 == 0) {

845  
fûe
;

848 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

851  
NULL
;

852 
	}
}

856 
	$ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
)

858 
ngx_ˇched_›í_fûe_t
 *
fûe
;

859 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

861 
„v
 = 
ev
->
d©a
;

862 
fûe
 = 
„v
->file;

864 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

866 
	`ngx_rbåì_dñëe
(&
„v
->
ˇche
->
rbåì
, &
fûe
->
node
);

868 
„v
->
ˇche
->
cuºít
--;

871 
fûe
->
evít
 = 
NULL
;

872 
fûe
->
u£_evít
 = 0;

874 
fûe
->
˛o£
 = 1;

876 
	`ngx_˛o£_ˇched_fûe
(
„v
->
ˇche
, 
fûe
, 0, 
ev
->
log
);

880 
	`ngx_‰ì
(
ev
->
d©a
);

881 
	`ngx_‰ì
(
ev
);

882 
	}
}

	@src/core/ngx_open_file_cache.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_OPEN_FILE_CACHE_H_INCLUDED_


13 
	#_NGX_OPEN_FILE_CACHE_H_INCLUDED_


	)

16 
	#NGX_OPEN_FILE_DIRECTIO_OFF
 
NGX_MAX_OFF_T_VALUE


	)

20 
ngx_fd_t
 
	mfd
;

21 
ngx_fûe_uniq_t
 
	muniq
;

22 
time_t
 
	mmtime
;

23 
off_t
 
	msize
;

24 
off_t
 
	mfs_size
;

25 
off_t
 
	mdúe˘io
;

26 
size_t
 
	mªad_ahód
;

28 
ngx_îr_t
 
	mîr
;

29 *
	mÁûed
;

31 
time_t
 
	mvÆid
;

33 
ngx_uöt_t
 
	mmö_u£s
;

35 
	mã°_dú
:1;

36 
	mã°_⁄ly
:1;

37 
	mlog
:1;

38 
	mîr‹s
:1;

39 
	mevíts
:1;

41 
	mis_dú
:1;

42 
	mis_fûe
:1;

43 
	mis_lök
:1;

44 
	mis_exec
:1;

45 
	mis_dúe˘io
:1;

46 } 
	tngx_›í_fûe_öfo_t
;

49 
ngx_ˇched_›í_fûe_s
 
	tngx_ˇched_›í_fûe_t
;

51 
	sngx_ˇched_›í_fûe_s
 {

52 
ngx_rbåì_node_t
 
	mnode
;

53 
ngx_queue_t
 
	mqueue
;

55 
u_ch¨
 *
	m«me
;

56 
time_t
 
	m¸óãd
;

57 
time_t
 
	mac˚s£d
;

59 
ngx_fd_t
 
	mfd
;

60 
ngx_fûe_uniq_t
 
	muniq
;

61 
time_t
 
	mmtime
;

62 
off_t
 
	msize
;

63 
ngx_îr_t
 
	mîr
;

65 
uöt32_t
 
	mu£s
;

67 
	mcou¡
:24;

68 
	m˛o£
:1;

69 
	mu£_evít
:1;

71 
	mis_dú
:1;

72 
	mis_fûe
:1;

73 
	mis_lök
:1;

74 
	mis_exec
:1;

75 
	mis_dúe˘io
:1;

77 
ngx_evít_t
 *
	mevít
;

82 
ngx_rbåì_t
 
	mrbåì
;

83 
ngx_rbåì_node_t
 
	m£¡öñ
;

84 
ngx_queue_t
 
	mexpúe_queue
;

86 
ngx_uöt_t
 
	mcuºít
;

87 
ngx_uöt_t
 
	mmax
;

88 
time_t
 
	möa˘ive
;

89 } 
	tngx_›í_fûe_ˇche_t
;

93 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

94 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

95 
ngx_uöt_t
 
	mmö_u£s
;

96 
ngx_log_t
 *
	mlog
;

97 } 
	tngx_›í_fûe_ˇche_˛ónup_t
;

103 *
	md©a
;

104 
ngx_evít_t
 *
	mªad
;

105 
ngx_evít_t
 *
	mwrôe
;

106 
ngx_fd_t
 
	mfd
;

108 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

109 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

110 } 
	tngx_›í_fûe_ˇche_evít_t
;

113 
ngx_›í_fûe_ˇche_t
 *
ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
,

114 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
);

115 
ngx_öt_t
 
ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

116 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
);

	@src/core/ngx_output_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
	#NGX_SENDFILE_LIMIT
 4096

	)

27 
	#NGX_NONE
 1

	)

30 
ngx_ölöe
 
ngx_öt_t


31 
ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
);

32 
ngx_öt_t
 
ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
,

33 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
);

34 
ngx_öt_t
 
ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

35 
off_t
 
bsize
);

36 
ngx_öt_t
 
ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

37 
off_t
 
bsize
);

38 
ngx_öt_t
 
ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
);

41 
ngx_öt_t


42 
	$ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

44 
off_t
 
bsize
;

45 
ngx_öt_t
 
rc
, 
œ°
;

46 
ngx_chaö_t
 *
˛
, *
out
, **
œ°_out
;

48 i‡(
˘x
->
ö
 =
NULL
 && ctx->
busy
 == NULL) {

56 i‡(
ö
 =
NULL
) {

57  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

60 i‡(
ö
->
√xt
 =
NULL


61 #i‡(
NGX_SENDFILE_LIMIT
)

62 && !(
ö
->
buf
->
ö_fûe
 && in->buf->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

64 && 
	`ngx_ouçut_chaö_as_is
(
˘x
, 
ö
->
buf
))

66  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

72 i‡(
ö
) {

73 i‡(
	`ngx_ouçut_chaö_add_c›y
(
˘x
->
poﬁ
, &˘x->
ö
, inË=
NGX_ERROR
) {

74  
NGX_ERROR
;

78 
out
 = 
NULL
;

79 
œ°_out
 = &
out
;

80 
œ°
 = 
NGX_NONE
;

84 #i‡(
NGX_HAVE_FILE_AIO
)

85 i‡(
˘x
->
aio
) {

86  
NGX_AGAIN
;

90 
˘x
->
ö
) {

97 
bsize
 = 
	`ngx_buf_size
(
˘x
->
ö
->
buf
);

99 i‡(
bsize
 =0 && !
	`ngx_buf_•ecül
(
˘x
->
ö
->
buf
)) {

101 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

104 
˘x
->
ö
->
buf
->
ãmp‹¨y
,

105 
˘x
->
ö
->
buf
->
ªcy˛ed
,

106 
˘x
->
ö
->
buf
->
ö_fûe
,

107 
˘x
->
ö
->
buf
->
°¨t
,

108 
˘x
->
ö
->
buf
->
pos
,

109 
˘x
->
ö
->
buf
->
œ°
,

110 
˘x
->
ö
->
buf
->
fûe
,

111 
˘x
->
ö
->
buf
->
fûe_pos
,

112 
˘x
->
ö
->
buf
->
fûe_œ°
);

114 
	`ngx_debug_poöt
();

116 
˘x
->
ö
 = ctx->ö->
√xt
;

121 i‡(
	`ngx_ouçut_chaö_as_is
(
˘x
, ctx->
ö
->
buf
)) {

125 
˛
 = 
˘x
->
ö
;

126 
˘x
->
ö
 = 
˛
->
√xt
;

128 *
œ°_out
 = 
˛
;

129 
œ°_out
 = &
˛
->
√xt
;

130 
˛
->
√xt
 = 
NULL
;

135 i‡(
˘x
->
buf
 =
NULL
) {

137 
rc
 = 
	`ngx_ouçut_chaö_Æign_fûe_buf
(
˘x
, 
bsize
);

139 i‡(
rc
 =
NGX_ERROR
) {

140  
NGX_ERROR
;

143 i‡(
rc
 !
NGX_OK
) {

145 i‡(
˘x
->
‰ì
) {

149 
˛
 = 
˘x
->
‰ì
;

150 
˘x
->
buf
 = 
˛
->buf;

151 
˘x
->
‰ì
 = 
˛
->
√xt
;

153 
	`ngx_‰ì_chaö
(
˘x
->
poﬁ
, 
˛
);

155 } i‡(
out
 || 
˘x
->
Æloˇãd
 =˘x->
bufs
.
num
) {

159 } i‡(
	`ngx_ouçut_chaö_gë_buf
(
˘x
, 
bsize
Ë!
NGX_OK
) {

160  
NGX_ERROR
;

165 
rc
 = 
	`ngx_ouçut_chaö_c›y_buf
(
˘x
);

167 i‡(
rc
 =
NGX_ERROR
) {

168  
rc
;

171 i‡(
rc
 =
NGX_AGAIN
) {

172 i‡(
out
) {

176  
rc
;

181 i‡(
	`ngx_buf_size
(
˘x
->
ö
->
buf
) == 0) {

182 
˘x
->
ö
 = ctx->ö->
√xt
;

185 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

186 i‡(
˛
 =
NULL
) {

187  
NGX_ERROR
;

190 
˛
->
buf
 = 
˘x
->buf;

191 
˛
->
√xt
 = 
NULL
;

192 *
œ°_out
 = 
˛
;

193 
œ°_out
 = &
˛
->
√xt
;

194 
˘x
->
buf
 = 
NULL
;

197 i‡(
out
 =
NULL
 && 
œ°
 !
NGX_NONE
) {

199 i‡(
˘x
->
ö
) {

200  
NGX_AGAIN
;

203  
œ°
;

206 
œ°
 = 
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
out
);

208 i‡(
œ°
 =
NGX_ERROR
 ||Üa° =
NGX_DONE
) {

209  
œ°
;

212 
	`ngx_chaö_upd©e_chaös
(&
˘x
->
‰ì
, &˘x->
busy
, &
out
, ctx->
èg
);

213 
œ°_out
 = &
out
;

215 
	}
}

218 
ngx_ölöe
 
ngx_öt_t


219 
	$ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
)

221 
ngx_uöt_t
 
£ndfûe
;

223 i‡(
	`ngx_buf_•ecül
(
buf
)) {

227 i‡(
buf
->
ö_fûe
 && buf->
fûe
->
dúe˘io
) {

231 
£ndfûe
 = 
˘x
->sendfile;

233 #i‡(
NGX_SENDFILE_LIMIT
)

235 i‡(
buf
->
ö_fûe
 && buf->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

236 
£ndfûe
 = 0;

241 i‡(!
£ndfûe
) {

243 i‡(!
	`ngx_buf_ö_mem‹y
(
buf
)) {

247 
buf
->
ö_fûe
 = 0;

250 i‡(
˘x
->
√ed_ö_mem‹y
 && !
	`ngx_buf_ö_mem‹y
(
buf
)) {

254 i‡(
˘x
->
√ed_ö_ãmp
 && (
buf
->
mem‹y
 || buf->
mm≠
)) {

259 
	}
}

262 
ngx_öt_t


263 
	$ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

264 
ngx_chaö_t
 *
ö
)

266 
ngx_chaö_t
 *
˛
, **
Œ
;

267 #i‡(
NGX_SENDFILE_LIMIT
)

268 
ngx_buf_t
 *
b
, *
buf
;

271 
Œ
 = 
chaö
;

273 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

274 
Œ
 = &
˛
->
√xt
;

277 
ö
) {

279 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

280 i‡(
˛
 =
NULL
) {

281  
NGX_ERROR
;

284 #i‡(
NGX_SENDFILE_LIMIT
)

286 
buf
 = 
ö
->buf;

288 i‡(
buf
->
ö_fûe


289 && 
buf
->
fûe_pos
 < 
NGX_SENDFILE_LIMIT


290 && 
buf
->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

294 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

295 i‡(
b
 =
NULL
) {

296  
NGX_ERROR
;

299 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

301 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

302 
buf
->
pos
 +(
ssize_t
Ë(
NGX_SENDFILE_LIMIT
 - buf->
fûe_pos
);

303 
b
->
œ°
 = 
buf
->
pos
;

306 
buf
->
fûe_pos
 = 
NGX_SENDFILE_LIMIT
;

307 
b
->
fûe_œ°
 = 
NGX_SENDFILE_LIMIT
;

309 
˛
->
buf
 = 
b
;

312 
˛
->
buf
 = buf;

313 
ö
 = in->
√xt
;

317 
˛
->
buf
 = 
ö
->buf;

318 
ö
 = in->
√xt
;

322 
˛
->
√xt
 = 
NULL
;

323 *
Œ
 = 
˛
;

324 
Œ
 = &
˛
->
√xt
;

327  
NGX_OK
;

328 
	}
}

331 
ngx_öt_t


332 
	$ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

334 
size_t
 
size
;

335 
ngx_buf_t
 *
ö
;

337 
ö
 = 
˘x
->ö->
buf
;

339 i‡(
ö
->
fûe
 =
NULL
 || !ö->fûe->
dúe˘io
) {

340  
NGX_DECLINED
;

343 
˘x
->
dúe˘io
 = 1;

345 
size
 = (
size_t
Ë(
ö
->
fûe_pos
 - (ö->fûe_po†& ~(
˘x
->
Æignmít
 - 1)));

347 i‡(
size
 == 0) {

349 i‡(
bsize
 >(
off_t
Ë
˘x
->
bufs
.
size
) {

350  
NGX_DECLINED
;

353 
size
 = (
size_t
Ë
bsize
;

356 
size
 = (
size_t
Ë
˘x
->
Æignmít
 - size;

358 i‡((
off_t
Ë
size
 > 
bsize
) {

359 
size
 = (
size_t
Ë
bsize
;

363 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 
size
);

364 i‡(
˘x
->
buf
 =
NULL
) {

365  
NGX_ERROR
;

373 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

374 
˘x
->
u«lig√d
 = 1;

377  
NGX_OK
;

378 
	}
}

381 
ngx_öt_t


382 
	$ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

384 
size_t
 
size
;

385 
ngx_buf_t
 *
b
, *
ö
;

386 
ngx_uöt_t
 
ªcy˛ed
;

388 
ö
 = 
˘x
->ö->
buf
;

389 
size
 = 
˘x
->
bufs
.size;

390 
ªcy˛ed
 = 1;

392 i‡(
ö
->
œ°_ö_chaö
) {

394 i‡(
bsize
 < (
off_t
Ë
size
) {

401 
size
 = (
size_t
Ë
bsize
;

402 
ªcy˛ed
 = 0;

404 } i‡(!
˘x
->
dúe˘io


405 && 
˘x
->
bufs
.
num
 == 1

406 && (
bsize
 < (
off_t
Ë(
size
 + size / 4)))

414 
size
 = (
size_t
Ë
bsize
;

415 
ªcy˛ed
 = 0;

419 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
poﬁ
);

420 i‡(
b
 =
NULL
) {

421  
NGX_ERROR
;

424 i‡(
˘x
->
dúe˘io
) {

431 
b
->
°¨t
 = 
	`ngx_pmemÆign
(
˘x
->
poﬁ
, 
size
, (
size_t
Ë˘x->
Æignmít
);

432 i‡(
b
->
°¨t
 =
NULL
) {

433  
NGX_ERROR
;

437 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

438 i‡(
b
->
°¨t
 =
NULL
) {

439  
NGX_ERROR
;

443 
b
->
pos
 = b->
°¨t
;

444 
b
->
œ°
 = b->
°¨t
;

445 
b
->
íd
 = b->
œ°
 + 
size
;

446 
b
->
ãmp‹¨y
 = 1;

447 
b
->
èg
 = 
˘x
->tag;

448 
b
->
ªcy˛ed
 =Ñecycled;

450 
˘x
->
buf
 = 
b
;

451 
˘x
->
Æloˇãd
++;

453  
NGX_OK
;

454 
	}
}

457 
ngx_öt_t


458 
	$ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
)

460 
off_t
 
size
;

461 
ssize_t
 
n
;

462 
ngx_buf_t
 *
§c
, *
d°
;

463 
ngx_uöt_t
 
£ndfûe
;

465 
§c
 = 
˘x
->
ö
->
buf
;

466 
d°
 = 
˘x
->
buf
;

468 
size
 = 
	`ngx_buf_size
(
§c
);

469 
size
 = 
	`ngx_mö
(size, 
d°
->
íd
 - d°->
pos
);

471 
£ndfûe
 = 
˘x
->£ndfûê& !˘x->
dúe˘io
;

473 #i‡(
NGX_SENDFILE_LIMIT
)

475 i‡(
§c
->
ö_fûe
 && src->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

476 
£ndfûe
 = 0;

481 i‡(
	`ngx_buf_ö_mem‹y
(
§c
)) {

482 
	`ngx_mem˝y
(
d°
->
pos
, 
§c
->pos, (
size_t
Ë
size
);

483 
§c
->
pos
 +(
size_t
Ë
size
;

484 
d°
->
œ°
 +(
size_t
Ë
size
;

486 i‡(
§c
->
ö_fûe
) {

488 i‡(
£ndfûe
) {

489 
d°
->
ö_fûe
 = 1;

490 
d°
->
fûe
 = 
§c
->file;

491 
d°
->
fûe_pos
 = 
§c
->file_pos;

492 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
size
;

495 
d°
->
ö_fûe
 = 0;

498 
§c
->
fûe_pos
 +
size
;

501 
d°
->
ö_fûe
 = 0;

504 i‡(
§c
->
pos
 =§c->
œ°
) {

505 
d°
->
Êush
 = 
§c
->flush;

506 
d°
->
œ°_buf
 = 
§c
->last_buf;

507 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

512 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

514 i‡(
˘x
->
u«lig√d
) {

515 i‡(
	`ngx_dúe˘io_off
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

516 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

517 
ngx_dúe˘io_off_n
 " \"%s\" failed",

518 
§c
->
fûe
->
«me
.
d©a
);

524 #i‡(
NGX_HAVE_FILE_AIO
)

526 i‡(
˘x
->
aio_h™dÀr
) {

527 
n
 = 
	`ngx_fûe_aio_ªad
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

528 
§c
->
fûe_pos
, 
˘x
->
poﬁ
);

529 i‡(
n
 =
NGX_AGAIN
) {

530 
˘x
->
	`aio_h™dÀr
(˘x, 
§c
->
fûe
);

531  
NGX_AGAIN
;

535 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

536 
§c
->
fûe_pos
);

540 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
, src->
fûe_pos
);

544 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

546 i‡(
˘x
->
u«lig√d
) {

547 
ngx_îr_t
 
îr
;

549 
îr
 = 
ngx_î∫o
;

551 i‡(
	`ngx_dúe˘io_⁄
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

552 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

553 
ngx_dúe˘io_⁄_n
 " \"%s\" failed",

554 
§c
->
fûe
->
«me
.
d©a
);

557 
	`ngx_£t_î∫o
(
îr
);

559 
˘x
->
u«lig√d
 = 0;

564 i‡(
n
 =
NGX_ERROR
) {

565  (
ngx_öt_t
Ë
n
;

568 i‡(
n
 !
size
) {

569 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

570 
ngx_ªad_fûe_n
 "Ñead only %z of %O from \"%s\"",

571 
n
, 
size
, 
§c
->
fûe
->
«me
.
d©a
);

572  
NGX_ERROR
;

575 
d°
->
œ°
 +
n
;

577 i‡(
£ndfûe
) {

578 
d°
->
ö_fûe
 = 1;

579 
d°
->
fûe
 = 
§c
->file;

580 
d°
->
fûe_pos
 = 
§c
->file_pos;

581 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
n
;

584 
d°
->
ö_fûe
 = 0;

587 
§c
->
fûe_pos
 +
n
;

589 i‡(
§c
->
fûe_pos
 =§c->
fûe_œ°
) {

590 
d°
->
Êush
 = 
§c
->flush;

591 
d°
->
œ°_buf
 = 
§c
->last_buf;

592 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

596  
NGX_OK
;

597 
	}
}

600 
ngx_öt_t


601 
	$ngx_chaö_wrôî
(*
d©a
, 
ngx_chaö_t
 *
ö
)

603 
ngx_chaö_wrôî_˘x_t
 *
˘x
 = 
d©a
;

605 
off_t
 
size
;

606 
ngx_chaö_t
 *
˛
;

607 
ngx_c⁄√˘i⁄_t
 *
c
;

609 
c
 = 
˘x
->
c⁄√˘i⁄
;

611 
size
 = 0; 
ö
; i¿ö->
√xt
) {

614 i‡(
	`ngx_buf_size
(
ö
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(in->buf)) {

615 
	`ngx_debug_poöt
();

619 
size
 +
	`ngx_buf_size
(
ö
->
buf
);

621 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

623 
ö
->
buf
->
Êush
, 
	`ngx_buf_size
(in->buf));

625 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

626 i‡(
˛
 =
NULL
) {

627  
NGX_ERROR
;

630 
˛
->
buf
 = 
ö
->buf;

631 
˛
->
√xt
 = 
NULL
;

632 *
˘x
->
œ°
 = 
˛
;

633 
˘x
->
œ°
 = &
˛
->
√xt
;

636 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

637 "chaö wrôî in: %p", 
˘x
->
out
);

639 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

642 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

643 
	`ngx_debug_poöt
();

648 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

651 i‡(
size
 =0 && !
c
->
buf„ªd
) {

652  
NGX_OK
;

655 
˘x
->
out
 = 
c
->
	`£nd_chaö
(c, ctx->out, ctx->
limô
);

657 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

658 "chaö wrôî out: %p", 
˘x
->
out
);

660 i‡(
˘x
->
out
 =
NGX_CHAIN_ERROR
) {

661  
NGX_ERROR
;

664 i‡(
˘x
->
out
 =
NULL
) {

665 
˘x
->
œ°
 = &˘x->
out
;

667 i‡(!
c
->
buf„ªd
) {

668  
NGX_OK
;

672  
NGX_AGAIN
;

673 
	}
}

	@src/core/ngx_palloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

13 *
ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

16 
ngx_poﬁ_t
 *

17 
	$ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
)

19 
ngx_poﬁ_t
 *
p
;

21 
p
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
size
, 
log
);

22 i‡(
p
 =
NULL
) {

23  
NULL
;

26 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

27 
p
->
d
.
íd
 = (
u_ch¨
 *Ë∞+ 
size
;

28 
p
->
d
.
√xt
 = 
NULL
;

29 
p
->
d
.
Áûed
 = 0;

31 
size
 = sizê- (
ngx_poﬁ_t
);

32 
p
->
max
 = (
size
 < 
NGX_MAX_ALLOC_FROM_POOL
) ? size : NGX_MAX_ALLOC_FROM_POOL;

34 
p
->
cuºít
 =Ö;

35 
p
->
chaö
 = 
NULL
;

36 
p
->
œrge
 = 
NULL
;

37 
p
->
˛ónup
 = 
NULL
;

38 
p
->
log
 =Üog;

40  
p
;

41 
	}
}

45 
	$ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

47 
ngx_poﬁ_t
 *
p
, *
n
;

48 
ngx_poﬁ_œrge_t
 *
l
;

49 
ngx_poﬁ_˛ónup_t
 *
c
;

51 
c
 = 
poﬁ
->
˛ónup
; c; c = c->
√xt
) {

52 i‡(
c
->
h™dÀr
) {

53 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

54 "ru¿˛ónup: %p", 
c
);

55 
c
->
	`h™dÀr
(c->
d©a
);

59 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

61 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0, "‰ì: %p", 
l
->
Æloc
);

63 i‡(
l
->
Æloc
) {

64 
	`ngx_‰ì
(
l
->
Æloc
);

68 #i‡(
NGX_DEBUG
)

75 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

76 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

77 "‰ì: %p, unu£d: %uz", 
p
,Ö->
d
.
íd
 -Ö->d.
œ°
);

79 i‡(
n
 =
NULL
) {

86 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

87 
	`ngx_‰ì
(
p
);

89 i‡(
n
 =
NULL
) {

93 
	}
}

97 
	$ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

99 
ngx_poﬁ_t
 *
p
;

100 
ngx_poﬁ_œrge_t
 *
l
;

102 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

103 i‡(
l
->
Æloc
) {

104 
	`ngx_‰ì
(
l
->
Æloc
);

108 
poﬁ
->
œrge
 = 
NULL
;

110 
p
 = 
poﬁ
;Ö;Ö =Ö->
d
.
√xt
) {

111 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

113 
	}
}

117 
	$ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

119 
u_ch¨
 *
m
;

120 
ngx_poﬁ_t
 *
p
;

122 i‡(
size
 <
poﬁ
->
max
) {

124 
p
 = 
poﬁ
->
cuºít
;

127 
m
 = 
	`ngx_Æign_±r
(
p
->
d
.
œ°
, 
NGX_ALIGNMENT
);

129 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

130 
p
->
d
.
œ°
 = 
m
 + 
size
;

132  
m
;

135 
p
 =Ö->
d
.
√xt
;

137 } 
p
);

139  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

142  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

143 
	}
}

147 
	$ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

149 
u_ch¨
 *
m
;

150 
ngx_poﬁ_t
 *
p
;

152 i‡(
size
 <
poﬁ
->
max
) {

154 
p
 = 
poﬁ
->
cuºít
;

157 
m
 = 
p
->
d
.
œ°
;

159 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

160 
p
->
d
.
œ°
 = 
m
 + 
size
;

162  
m
;

165 
p
 =Ö->
d
.
√xt
;

167 } 
p
);

169  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

172  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

173 
	}
}

177 
	$ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

179 
u_ch¨
 *
m
;

180 
size_t
 
psize
;

181 
ngx_poﬁ_t
 *
p
, *
√w
, *
cuºít
;

183 
psize
 = (
size_t
Ë(
poﬁ
->
d
.
íd
 - (
u_ch¨
 *)Öool);

185 
m
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
psize
, 
poﬁ
->
log
);

186 i‡(
m
 =
NULL
) {

187  
NULL
;

190 
√w
 = (
ngx_poﬁ_t
 *Ë
m
;

192 
√w
->
d
.
íd
 = 
m
 + 
psize
;

193 
√w
->
d
.
√xt
 = 
NULL
;

194 
√w
->
d
.
Áûed
 = 0;

196 
m
 +(
ngx_poﬁ_d©a_t
);

197 
m
 = 
	`ngx_Æign_±r
(m, 
NGX_ALIGNMENT
);

198 
√w
->
d
.
œ°
 = 
m
 + 
size
;

200 
cuºít
 = 
poﬁ
->current;

202 
p
 = 
cuºít
;Ö->
d
.
√xt
;Ö =Ö->d.next) {

203 i‡(
p
->
d
.
Áûed
++ > 4) {

204 
cuºít
 = 
p
->
d
.
√xt
;

208 
p
->
d
.
√xt
 = 
√w
;

210 
poﬁ
->
cuºít
 = cuºíà? cuºíà: 
√w
;

212  
m
;

213 
	}
}

217 
	$ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

219 *
p
;

220 
ngx_uöt_t
 
n
;

221 
ngx_poﬁ_œrge_t
 *
œrge
;

223 
p
 = 
	`ngx_Æloc
(
size
, 
poﬁ
->
log
);

224 i‡(
p
 =
NULL
) {

225  
NULL
;

228 
n
 = 0;

230 
œrge
 = 
poﬁ
->œrge;Ü¨ge;Ü¨gêœrge->
√xt
) {

231 i‡(
œrge
->
Æloc
 =
NULL
) {

232 
œrge
->
Æloc
 = 
p
;

233  
p
;

236 i‡(
n
++ > 3) {

241 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

242 i‡(
œrge
 =
NULL
) {

243 
	`ngx_‰ì
(
p
);

244  
NULL
;

247 
œrge
->
Æloc
 = 
p
;

248 
œrge
->
√xt
 = 
poﬁ
->large;

249 
poﬁ
->
œrge
 =Üarge;

251  
p
;

252 
	}
}

256 
	$ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
)

258 *
p
;

259 
ngx_poﬁ_œrge_t
 *
œrge
;

261 
p
 = 
	`ngx_memÆign
(
Æignmít
, 
size
, 
poﬁ
->
log
);

262 i‡(
p
 =
NULL
) {

263  
NULL
;

266 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

267 i‡(
œrge
 =
NULL
) {

268 
	`ngx_‰ì
(
p
);

269  
NULL
;

272 
œrge
->
Æloc
 = 
p
;

273 
œrge
->
√xt
 = 
poﬁ
->large;

274 
poﬁ
->
œrge
 =Üarge;

276  
p
;

277 
	}
}

280 
ngx_öt_t


281 
	$ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
)

283 
ngx_poﬁ_œrge_t
 *
l
;

285 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

286 i‡(
p
 =
l
->
Æloc
) {

287 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

288 "‰ì: %p", 
l
->
Æloc
);

289 
	`ngx_‰ì
(
l
->
Æloc
);

290 
l
->
Æloc
 = 
NULL
;

292  
NGX_OK
;

296  
NGX_DECLINED
;

297 
	}
}

301 
	$ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

303 *
p
;

305 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

306 i‡(
p
) {

307 
	`ngx_memzîo
(
p
, 
size
);

310  
p
;

311 
	}
}

314 
ngx_poﬁ_˛ónup_t
 *

315 
	$ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
)

317 
ngx_poﬁ_˛ónup_t
 *
c
;

319 
c
 = 
	`ngx_∑Œoc
(
p
, (
ngx_poﬁ_˛ónup_t
));

320 i‡(
c
 =
NULL
) {

321  
NULL
;

324 i‡(
size
) {

325 
c
->
d©a
 = 
	`ngx_∑Œoc
(
p
, 
size
);

326 i‡(
c
->
d©a
 =
NULL
) {

327  
NULL
;

331 
c
->
d©a
 = 
NULL
;

334 
c
->
h™dÀr
 = 
NULL
;

335 
c
->
√xt
 = 
p
->
˛ónup
;

337 
p
->
˛ónup
 = 
c
;

339 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
p
->
log
, 0, "add cÀ™up: %p", 
c
);

341  
c
;

342 
	}
}

346 
	$ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
)

348 
ngx_poﬁ_˛ónup_t
 *
c
;

349 
ngx_poﬁ_˛ónup_fûe_t
 *
cf
;

351 
c
 = 
p
->
˛ónup
; c; c = c->
√xt
) {

352 i‡(
c
->
h™dÀr
 =
ngx_poﬁ_˛ónup_fûe
) {

354 
cf
 = 
c
->
d©a
;

356 i‡(
cf
->
fd
 == fd) {

357 
c
->
	`h™dÀr
(
cf
);

358 
c
->
h™dÀr
 = 
NULL
;

363 
	}
}

367 
	$ngx_poﬁ_˛ónup_fûe
(*
d©a
)

369 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

371 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d",

372 
c
->
fd
);

374 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

376 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

378 
	}
}

382 
	$ngx_poﬁ_dñëe_fûe
(*
d©a
)

384 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

386 
ngx_îr_t
 
îr
;

388 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d %s",

389 
c
->
fd
, c->
«me
);

391 i‡(
	`ngx_dñëe_fûe
(
c
->
«me
Ë=
NGX_FILE_ERROR
) {

392 
îr
 = 
ngx_î∫o
;

394 i‡(
îr
 !
NGX_ENOENT
) {

395 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
îr
,

396 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

400 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

401 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

402 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

404 
	}
}

410 
	$ngx_gë_ˇched_block
(
size_t
 
size
)

412 *
p
;

413 
ngx_ˇched_block_¶Ÿ_t
 *
¶Ÿ
;

415 i‡(
ngx_cy˛e
->
ˇche
 =
NULL
) {

416  
NULL
;

419 
¶Ÿ
 = &
ngx_cy˛e
->
ˇche
[(
size
 + 
ngx_∑gesize
 - 1) /Çgx_pagesize];

421 
¶Ÿ
->
åõs
++;

423 i‡(
¶Ÿ
->
numbî
) {

424 
p
 = 
¶Ÿ
->
block
;

425 
¶Ÿ
->
block
 = slŸ->block->
√xt
;

426 
¶Ÿ
->
numbî
--;

427  
p
;

430  
NULL
;

431 
	}
}

	@src/core/ngx_palloc.h

8 #i‚de‡
_NGX_PALLOC_H_INCLUDED_


9 
	#_NGX_PALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

20 
	#NGX_MAX_ALLOC_FROM_POOL
 (
ngx_∑gesize
 - 1)

	)

22 
	#NGX_DEFAULT_POOL_SIZE
 (16 * 1024)

	)

24 
	#NGX_POOL_ALIGNMENT
 16

	)

25 
	#NGX_MIN_POOL_SIZE
 \

26 
	`ngx_Æign
(((
ngx_poﬁ_t
Ë+ 2 * (
ngx_poﬁ_œrge_t
)), \

27 
NGX_POOL_ALIGNMENT
)

	)

30 (*
	tngx_poﬁ_˛ónup_±
)(*
	td©a
);

32 
ngx_poﬁ_˛ónup_s
 
	tngx_poﬁ_˛ónup_t
;

34 
	sngx_poﬁ_˛ónup_s
 {

35 
ngx_poﬁ_˛ónup_±
 
h™dÀr
;

36 *
d©a
;

37 
ngx_poﬁ_˛ónup_t
 *
√xt
;

41 
ngx_poﬁ_œrge_s
 
	tngx_poﬁ_œrge_t
;

43 
	sngx_poﬁ_œrge_s
 {

44 
ngx_poﬁ_œrge_t
 *
√xt
;

45 *
Æloc
;

50 
u_ch¨
 *
œ°
;

51 
u_ch¨
 *
íd
;

52 
ngx_poﬁ_t
 *
√xt
;

53 
ngx_uöt_t
 
Áûed
;

54 } 
	tngx_poﬁ_d©a_t
;

57 
	sngx_poﬁ_s
 {

58 
ngx_poﬁ_d©a_t
 
d
;

59 
size_t
 
max
;

60 
ngx_poﬁ_t
 *
cuºít
;

61 
ngx_chaö_t
 *
chaö
;

62 
ngx_poﬁ_œrge_t
 *
œrge
;

63 
ngx_poﬁ_˛ónup_t
 *
˛ónup
;

64 
ngx_log_t
 *
log
;

69 
ngx_fd_t
 
fd
;

70 
u_ch¨
 *
«me
;

71 
ngx_log_t
 *
log
;

72 } 
	tngx_poﬁ_˛ónup_fûe_t
;

75 *
	`ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

76 *
	`ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

78 
ngx_poﬁ_t
 *
	`ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
);

79 
	`ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

80 
	`ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

82 *
	`ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

83 *
	`ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

84 *
	`ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

85 *
	`ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
);

86 
ngx_öt_t
 
	`ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
);

89 
ngx_poﬁ_˛ónup_t
 *
	`ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
);

90 
	`ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
);

91 
	`ngx_poﬁ_˛ónup_fûe
(*
d©a
);

92 
	`ngx_poﬁ_dñëe_fûe
(*
d©a
);

	@src/core/ngx_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ssize_t


13 
	$ngx_∑r£_size
(
ngx_°r_t
 *
löe
)

15 
u_ch¨
 
unô
;

16 
size_t
 
Àn
;

17 
ssize_t
 
size
;

18 
ngx_öt_t
 
sˇÀ
;

20 
Àn
 = 
löe
->len;

21 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

23 
unô
) {

26 
Àn
--;

27 
sˇÀ
 = 1024;

32 
Àn
--;

33 
sˇÀ
 = 1024 * 1024;

37 
sˇÀ
 = 1;

40 
size
 = 
	`ngx_©osz
(
löe
->
d©a
, 
Àn
);

41 i‡(
size
 =
NGX_ERROR
) {

42  
NGX_ERROR
;

45 
size
 *
sˇÀ
;

47  
size
;

48 
	}
}

51 
off_t


52 
	$ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
)

54 
u_ch¨
 
unô
;

55 
off_t
 
off£t
;

56 
size_t
 
Àn
;

57 
ngx_öt_t
 
sˇÀ
;

59 
Àn
 = 
löe
->len;

60 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

62 
unô
) {

65 
Àn
--;

66 
sˇÀ
 = 1024;

71 
Àn
--;

72 
sˇÀ
 = 1024 * 1024;

77 
Àn
--;

78 
sˇÀ
 = 1024 * 1024 * 1024;

82 
sˇÀ
 = 1;

85 
off£t
 = 
	`ngx_©oof
(
löe
->
d©a
, 
Àn
);

86 i‡(
off£t
 =
NGX_ERROR
) {

87  
NGX_ERROR
;

90 
off£t
 *
sˇÀ
;

92  
off£t
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
)

99 
u_ch¨
 *
p
, *
œ°
;

100 
ngx_öt_t
 
vÆue
, 
tŸÆ
, 
sˇÀ
;

101 
ngx_uöt_t
 
max
, 
vÆid
;

103 
°_°¨t
 = 0,

104 
°_yór
,

105 
°_m⁄th
,

106 
°_wìk
,

107 
°_day
,

108 
°_hour
,

109 
°_mö
,

110 
°_£c
,

111 
°_m£c
,

112 
°_œ°


113 } 
°ï
;

115 
vÆid
 = 0;

116 
vÆue
 = 0;

117 
tŸÆ
 = 0;

118 
°ï
 = 
is_£c
 ? 
°_°¨t
 : 
°_m⁄th
;

119 
sˇÀ
 = 
is_£c
 ? 1 : 1000;

121 
p
 = 
löe
->
d©a
;

122 
œ°
 = 
p
 + 
löe
->
Àn
;

124 
p
 < 
œ°
) {

126 i‡(*
p
 >= '0' && *p <= '9') {

127 
vÆue
 = vÆuê* 10 + (*
p
++ - '0');

128 
vÆid
 = 1;

132 *
p
++) {

135 i‡(
°ï
 > 
°_°¨t
) {

136  
NGX_ERROR
;

138 
°ï
 = 
°_yór
;

139 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 365);

140 
sˇÀ
 = 60 * 60 * 24 * 365;

144 i‡(
°ï
 >
°_m⁄th
) {

145  
NGX_ERROR
;

147 
°ï
 = 
°_m⁄th
;

148 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 30);

149 
sˇÀ
 = 60 * 60 * 24 * 30;

153 i‡(
°ï
 >
°_wìk
) {

154  
NGX_ERROR
;

156 
°ï
 = 
°_wìk
;

157 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 7);

158 
sˇÀ
 = 60 * 60 * 24 * 7;

162 i‡(
°ï
 >
°_day
) {

163  
NGX_ERROR
;

165 
°ï
 = 
°_day
;

166 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24);

167 
sˇÀ
 = 60 * 60 * 24;

171 i‡(
°ï
 >
°_hour
) {

172  
NGX_ERROR
;

174 
°ï
 = 
°_hour
;

175 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60);

176 
sˇÀ
 = 60 * 60;

180 i‡(*
p
 == 's') {

181 i‡(
is_£c
 || 
°ï
 >
°_m£c
) {

182  
NGX_ERROR
;

184 
p
++;

185 
°ï
 = 
°_m£c
;

186 
max
 = 
NGX_MAX_INT32_VALUE
;

187 
sˇÀ
 = 1;

191 i‡(
°ï
 >
°_mö
) {

192  
NGX_ERROR
;

194 
°ï
 = 
°_mö
;

195 
max
 = 
NGX_MAX_INT32_VALUE
 / 60;

196 
sˇÀ
 = 60;

200 i‡(
°ï
 >
°_£c
) {

201  
NGX_ERROR
;

203 
°ï
 = 
°_£c
;

204 
max
 = 
NGX_MAX_INT32_VALUE
;

205 
sˇÀ
 = 1;

209 i‡(
°ï
 >
°_£c
) {

210  
NGX_ERROR
;

212 
°ï
 = 
°_œ°
;

213 
max
 = 
NGX_MAX_INT32_VALUE
;

214 
sˇÀ
 = 1;

218  
NGX_ERROR
;

221 i‡(
°ï
 !
°_m£c
 && !
is_£c
) {

222 
sˇÀ
 *= 1000;

223 
max
 /= 1000;

226 i‡((
ngx_uöt_t
Ë
vÆue
 > 
max
) {

227  
NGX_ERROR
;

230 
tŸÆ
 +
vÆue
 * 
sˇÀ
;

232 i‡((
ngx_uöt_t
Ë
tŸÆ
 > 
NGX_MAX_INT32_VALUE
) {

233  
NGX_ERROR
;

236 
vÆue
 = 0;

237 
sˇÀ
 = 
is_£c
 ? 1 : 1000;

239 
p
 < 
œ°
 && *p == ' ') {

240 
p
++;

244 i‡(
vÆid
) {

245  
tŸÆ
 + 
vÆue
 * 
sˇÀ
;

248  
NGX_ERROR
;

249 
	}
}

	@src/core/ngx_parse.h

8 #i‚de‡
_NGX_PARSE_H_INCLUDED_


9 
	#_NGX_PARSE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_PARSE_LARGE_TIME
 -2

	)

19 
ssize_t
 
ngx_∑r£_size
(
ngx_°r_t
 *
löe
);

20 
off_t
 
ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
);

21 
ngx_öt_t
 
ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
);

	@src/core/ngx_queue.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

17 
ngx_queue_t
 *

18 
	$ngx_queue_middÀ
(
ngx_queue_t
 *
queue
)

20 
ngx_queue_t
 *
middÀ
, *
√xt
;

22 
middÀ
 = 
	`ngx_queue_hód
(
queue
);

24 i‡(
middÀ
 =
	`ngx_queue_œ°
(
queue
)) {

25  
middÀ
;

28 
√xt
 = 
	`ngx_queue_hód
(
queue
);

31 
middÀ
 = 
	`ngx_queue_√xt
(middle);

33 
√xt
 = 
	`ngx_queue_√xt
(next);

35 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

36  
middÀ
;

39 
√xt
 = 
	`ngx_queue_√xt
(next);

41 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

42  
middÀ
;

45 
	}
}

51 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

52 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *))

54 
ngx_queue_t
 *
q
, *
¥ev
, *
√xt
;

56 
q
 = 
	`ngx_queue_hód
(
queue
);

58 i‡(
q
 =
	`ngx_queue_œ°
(
queue
)) {

62 
q
 = 
	`ngx_queue_√xt
(q); q !
	`ngx_queue_£¡öñ
(
queue
); q = 
√xt
) {

64 
¥ev
 = 
	`ngx_queue_¥ev
(
q
);

65 
√xt
 = 
	`ngx_queue_√xt
(
q
);

67 
	`ngx_queue_ªmove
(
q
);

70 i‡(
	`cmp
(
¥ev
, 
q
) <= 0) {

74 
¥ev
 = 
	`ngx_queue_¥ev
(prev);

76 } 
¥ev
 !
	`ngx_queue_£¡öñ
(
queue
));

78 
	`ngx_queue_ö£π_a·î
(
¥ev
, 
q
);

80 
	}
}

	@src/core/ngx_queue.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_QUEUE_H_INCLUDED_


13 
	#_NGX_QUEUE_H_INCLUDED_


	)

16 
ngx_queue_s
 
	tngx_queue_t
;

18 
	sngx_queue_s
 {

19 
ngx_queue_t
 *
	m¥ev
;

20 
ngx_queue_t
 *
	m√xt
;

24 
	#ngx_queue_öô
(
q
) \

25 (
q
)->
¥ev
 = q; \

26 (
q
)->
√xt
 = 
	)
q

29 
	#ngx_queue_em±y
(
h
) \

30 (
h
 =(h)->
¥ev
)

	)

33 
	#ngx_queue_ö£π_hód
(
h
, 
x
) \

34 (
x
)->
√xt
 = (
h
)->next; \

35 (
x
)->
√xt
->
¥ev
 = x; \

36 (
x
)->
¥ev
 = 
h
; \

37 (
h
)->
√xt
 = 
x


	)

40 
	#ngx_queue_ö£π_a·î
 
ngx_queue_ö£π_hód


	)

43 
	#ngx_queue_ö£π_èû
(
h
, 
x
) \

44 (
x
)->
¥ev
 = (
h
)->prev; \

45 (
x
)->
¥ev
->
√xt
 = x; \

46 (
x
)->
√xt
 = 
h
; \

47 (
h
)->
¥ev
 = 
x


	)

50 
	#ngx_queue_hód
(
h
) \

51 (
h
)->
√xt


	)

54 
	#ngx_queue_œ°
(
h
) \

55 (
h
)->
¥ev


	)

58 
	#ngx_queue_£¡öñ
(
h
) \

59 (
h
)

	)

62 
	#ngx_queue_√xt
(
q
) \

63 (
q
)->
√xt


	)

66 
	#ngx_queue_¥ev
(
q
) \

67 (
q
)->
¥ev


	)

70 #i‡(
NGX_DEBUG
)

72 
	#ngx_queue_ªmove
(
x
) \

73 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

74 (
x
)->
¥ev
->
√xt
 = (x)->next; \

75 (
x
)->
¥ev
 = 
NULL
; \

76 (
x
)->
√xt
 = 
NULL


	)

80 
	#ngx_queue_ªmove
(
x
) \

81 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

82 (
x
)->
¥ev
->
√xt
 = (x)->
	)
next

87 
	#ngx_queue_•lô
(
h
, 
q
, 
n
) \

88 (
n
)->
¥ev
 = (
h
)->prev; \

89 (
n
)->
¥ev
->
√xt
 =Ç; \

90 (
n
)->
√xt
 = 
q
; \

91 (
h
)->
¥ev
 = (
q
)->prev; \

92 (
h
)->
¥ev
->
√xt
 = h; \

93 (
q
)->
¥ev
 = 
n
;

	)

96 
	#ngx_queue_add
(
h
, 
n
) \

97 (
h
)->
¥ev
->
√xt
 = (
n
)->next; \

98 (
n
)->
√xt
->
¥ev
 = (
h
)->prev; \

99 (
h
)->
¥ev
 = (
n
)->prev; \

100 (
h
)->
¥ev
->
√xt
 = h;

	)

103 
	#ngx_queue_d©a
(
q
, 
ty≥
, 
lök
) \

104 (
ty≥
 *Ë((
u_ch¨
 *Ë
q
 - 
	`off£tof
—y≥, 
lök
))

	)

107 
ngx_queue_t
 *
ngx_queue_middÀ
“gx_queue_à*
queue
);

108 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

109 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *));

	@src/core/ngx_radix_tree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
);

15 
ngx_ødix_åì_t
 *

16 
	$ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_öt_t
 
¥óŒoˇã
)

18 
uöt32_t
 
key
, 
mask
, 
öc
;

19 
ngx_ødix_åì_t
 *
åì
;

21 
åì
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_ødix_åì_t
));

22 i‡(
åì
 =
NULL
) {

23  
NULL
;

26 
åì
->
poﬁ
 =Öool;

27 
åì
->
‰ì
 = 
NULL
;

28 
åì
->
°¨t
 = 
NULL
;

29 
åì
->
size
 = 0;

31 
åì
->
roŸ
 = 
	`ngx_ødix_Æloc
(tree);

32 i‡(
åì
->
roŸ
 =
NULL
) {

33  
NULL
;

36 
åì
->
roŸ
->
right
 = 
NULL
;

37 
åì
->
roŸ
->
À·
 = 
NULL
;

38 
åì
->
roŸ
->
∑ª¡
 = 
NULL
;

39 
åì
->
roŸ
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

41 i‡(
¥óŒoˇã
 == 0) {

42  
åì
;

62 i‡(
¥óŒoˇã
 == -1) {

63 
ngx_∑gesize
 / (
ngx_ødix_åì_t
)) {

67 
¥óŒoˇã
 = 6;

72 
¥óŒoˇã
 = 7;

77 
¥óŒoˇã
 = 8;

81 
mask
 = 0;

82 
öc
 = 0x80000000;

84 
¥óŒoˇã
--) {

86 
key
 = 0;

87 
mask
 >>= 1;

88 
mask
 |= 0x80000000;

91 i‡(
	`ngx_ødix32åì_ö£π
(
åì
, 
key
, 
mask
, 
NGX_RADIX_NO_VALUE
)

92 !
NGX_OK
)

94  
NULL
;

97 
key
 +
öc
;

99 } 
key
);

101 
öc
 >>= 1;

104  
åì
;

105 
	}
}

108 
ngx_öt_t


109 
	$ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
,

110 
uöçå_t
 
vÆue
)

112 
uöt32_t
 
bô
;

113 
ngx_ødix_node_t
 *
node
, *
√xt
;

115 
bô
 = 0x80000000;

117 
node
 = 
åì
->
roŸ
;

118 
√xt
 = 
åì
->
roŸ
;

120 
bô
 & 
mask
) {

121 i‡(
key
 & 
bô
) {

122 
√xt
 = 
node
->
right
;

125 
√xt
 = 
node
->
À·
;

128 i‡(
√xt
 =
NULL
) {

132 
bô
 >>= 1;

133 
node
 = 
√xt
;

136 i‡(
√xt
) {

137 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

138  
NGX_BUSY
;

141 
node
->
vÆue
 = value;

142  
NGX_OK
;

145 
bô
 & 
mask
) {

146 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

147 i‡(
√xt
 =
NULL
) {

148  
NGX_ERROR
;

151 
√xt
->
right
 = 
NULL
;

152 
√xt
->
À·
 = 
NULL
;

153 
√xt
->
∑ª¡
 = 
node
;

154 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

156 i‡(
key
 & 
bô
) {

157 
node
->
right
 = 
√xt
;

160 
node
->
À·
 = 
√xt
;

163 
bô
 >>= 1;

164 
node
 = 
√xt
;

167 
node
->
vÆue
 = value;

169  
NGX_OK
;

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
)

176 
uöt32_t
 
bô
;

177 
ngx_ødix_node_t
 *
node
;

179 
bô
 = 0x80000000;

180 
node
 = 
åì
->
roŸ
;

182 
node
 && (
bô
 & 
mask
)) {

183 i‡(
key
 & 
bô
) {

184 
node
 =Çode->
right
;

187 
node
 =Çode->
À·
;

190 
bô
 >>= 1;

193 i‡(
node
 =
NULL
) {

194  
NGX_ERROR
;

197 i‡(
node
->
right
 ||Çode->
À·
) {

198 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

199 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

200  
NGX_OK
;

203  
NGX_ERROR
;

207 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

208 
node
->
∑ª¡
->
right
 = 
NULL
;

211 
node
->
∑ª¡
->
À·
 = 
NULL
;

214 
node
->
right
 = 
åì
->
‰ì
;

215 
åì
->
‰ì
 = 
node
;

217 
node
 =Çode->
∑ª¡
;

219 i‡(
node
->
right
 ||Çode->
À·
) {

223 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

227 i‡(
node
->
∑ª¡
 =
NULL
) {

232  
NGX_OK
;

233 
	}
}

236 
uöçå_t


237 
	$ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
)

239 
uöt32_t
 
bô
;

240 
uöçå_t
 
vÆue
;

241 
ngx_ødix_node_t
 *
node
;

243 
bô
 = 0x80000000;

244 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

245 
node
 = 
åì
->
roŸ
;

247 
node
) {

248 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

249 
vÆue
 = 
node
->value;

252 i‡(
key
 & 
bô
) {

253 
node
 =Çode->
right
;

256 
node
 =Çode->
À·
;

259 
bô
 >>= 1;

262  
vÆue
;

263 
	}
}

267 
	$ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
)

269 *
p
;

271 i‡(
åì
->
‰ì
) {

272 
p
 = (*Ë
åì
->
‰ì
;

273 
åì
->
‰ì
 =Åªe->‰ì->
right
;

274  
p
;

277 i‡(
åì
->
size
 < (
ngx_ødix_node_t
)) {

278 
åì
->
°¨t
 = 
	`ngx_pmemÆign
—ªe->
poﬁ
, 
ngx_∑gesize
,Çgx_pagesize);

279 i‡(
åì
->
°¨t
 =
NULL
) {

280  
NULL
;

283 
åì
->
size
 = 
ngx_∑gesize
;

286 
p
 = 
åì
->
°¨t
;

287 
åì
->
°¨t
 +(
ngx_ødix_node_t
);

288 
åì
->
size
 -(
ngx_ødix_node_t
);

290  
p
;

291 
	}
}

	@src/core/ngx_radix_tree.h

8 #i‚de‡
_NGX_RADIX_TREE_H_INCLUDED_


9 
	#_NGX_RADIX_TREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_RADIX_NO_VALUE
 (
uöçå_t
Ë-1

	)

18 
ngx_ødix_node_s
 
	tngx_ødix_node_t
;

20 
	sngx_ødix_node_s
 {

21 
ngx_ødix_node_t
 *
	mright
;

22 
ngx_ødix_node_t
 *
	mÀ·
;

23 
ngx_ødix_node_t
 *
	m∑ª¡
;

24 
uöçå_t
 
	mvÆue
;

29 
ngx_ødix_node_t
 *
	mroŸ
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 
ngx_ødix_node_t
 *
	m‰ì
;

32 *
	m°¨t
;

33 
size_t
 
	msize
;

34 } 
	tngx_ødix_åì_t
;

37 
ngx_ødix_åì_t
 *
ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
,

38 
ngx_öt_t
 
¥óŒoˇã
);

39 
ngx_öt_t
 
ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

40 
uöt32_t
 
key
, uöt32_à
mask
, 
uöçå_t
 
vÆue
);

41 
ngx_öt_t
 
ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

42 
uöt32_t
 
key
, uöt32_à
mask
);

43 
uöçå_t
 
ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
);

	@src/core/ngx_rbtree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

19 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

20 
ngx_ölöe
 
ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

21 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

25 
	$ngx_rbåì_ö£π
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

26 
ngx_rbåì_node_t
 *
node
)

28 
ngx_rbåì_node_t
 **
roŸ
, *
ãmp
, *
£¡öñ
;

32 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

33 
£¡öñ
 = 
åì
->sentinel;

35 i‡(*
roŸ
 =
£¡öñ
) {

36 
node
->
∑ª¡
 = 
NULL
;

37 
node
->
À·
 = 
£¡öñ
;

38 
node
->
right
 = 
£¡öñ
;

39 
	`ngx_rbt_bœck
(
node
);

40 *
roŸ
 = 
node
;

45 
åì
->
	`ö£π
(*
roŸ
, 
node
, 
£¡öñ
);

49 
node
 !*
roŸ
 && 
	`ngx_rbt_is_ªd
“ode->
∑ª¡
)) {

51 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

52 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

54 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

55 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

56 
	`ngx_rbt_bœck
(
ãmp
);

57 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

58 
node
 =Çode->
∑ª¡
->parent;

61 i‡(
node
 =node->
∑ª¡
->
right
) {

62 
node
 =Çode->
∑ª¡
;

63 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

66 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

67 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

68 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

72 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

74 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

75 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

76 
	`ngx_rbt_bœck
(
ãmp
);

77 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

78 
node
 =Çode->
∑ª¡
->parent;

81 i‡(
node
 =node->
∑ª¡
->
À·
) {

82 
node
 =Çode->
∑ª¡
;

83 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

86 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

87 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

88 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

93 
	`ngx_rbt_bœck
(*
roŸ
);

94 
	}
}

98 
	$ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

99 
ngx_rbåì_node_t
 *
£¡öñ
)

101 
ngx_rbåì_node_t
 **
p
;

105 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

107 i‡(*
p
 =
£¡öñ
) {

111 
ãmp
 = *
p
;

114 *
p
 = 
node
;

115 
node
->
∑ª¡
 = 
ãmp
;

116 
node
->
À·
 = 
£¡öñ
;

117 
node
->
right
 = 
£¡öñ
;

118 
	`ngx_rbt_ªd
(
node
);

119 
	}
}

123 
	$ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

124 
ngx_rbåì_node_t
 *
£¡öñ
)

126 
ngx_rbåì_node_t
 **
p
;

139 
p
 = ((
ngx_rbåì_key_öt_t
Ë
node
->
key
 - (ngx_rbåì_key_öt_tË
ãmp
->key

141 ? &
ãmp
->
À·
 : &ãmp->
right
;

143 i‡(*
p
 =
£¡öñ
) {

147 
ãmp
 = *
p
;

150 *
p
 = 
node
;

151 
node
->
∑ª¡
 = 
ãmp
;

152 
node
->
À·
 = 
£¡öñ
;

153 
node
->
right
 = 
£¡öñ
;

154 
	`ngx_rbt_ªd
(
node
);

155 
	}
}

159 
	$ngx_rbåì_dñëe
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

160 
ngx_rbåì_node_t
 *
node
)

162 
ngx_uöt_t
 
ªd
;

163 
ngx_rbåì_node_t
 **
roŸ
, *
£¡öñ
, *
sub°
, *
ãmp
, *
w
;

167 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

168 
£¡öñ
 = 
åì
->sentinel;

170 i‡(
node
->
À·
 =
£¡öñ
) {

171 
ãmp
 = 
node
->
right
;

172 
sub°
 = 
node
;

174 } i‡(
node
->
right
 =
£¡öñ
) {

175 
ãmp
 = 
node
->
À·
;

176 
sub°
 = 
node
;

179 
sub°
 = 
	`ngx_rbåì_mö
(
node
->
right
, 
£¡öñ
);

181 i‡(
sub°
->
À·
 !
£¡öñ
) {

182 
ãmp
 = 
sub°
->
À·
;

184 
ãmp
 = 
sub°
->
right
;

188 i‡(
sub°
 =*
roŸ
) {

189 *
roŸ
 = 
ãmp
;

190 
	`ngx_rbt_bœck
(
ãmp
);

193 
node
->
À·
 = 
NULL
;

194 
node
->
right
 = 
NULL
;

195 
node
->
∑ª¡
 = 
NULL
;

196 
node
->
key
 = 0;

201 
ªd
 = 
	`ngx_rbt_is_ªd
(
sub°
);

203 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

204 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

207 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

210 i‡(
sub°
 =
node
) {

212 
ãmp
->
∑ª¡
 = 
sub°
->parent;

216 i‡(
sub°
->
∑ª¡
 =
node
) {

217 
ãmp
->
∑ª¡
 = 
sub°
;

220 
ãmp
->
∑ª¡
 = 
sub°
->parent;

223 
sub°
->
À·
 = 
node
->left;

224 
sub°
->
right
 = 
node
->right;

225 
sub°
->
∑ª¡
 = 
node
->parent;

226 
	`ngx_rbt_c›y_cﬁ‹
(
sub°
, 
node
);

228 i‡(
node
 =*
roŸ
) {

229 *
roŸ
 = 
sub°
;

232 i‡(
node
 =node->
∑ª¡
->
À·
) {

233 
node
->
∑ª¡
->
À·
 = 
sub°
;

235 
node
->
∑ª¡
->
right
 = 
sub°
;

239 i‡(
sub°
->
À·
 !
£¡öñ
) {

240 
sub°
->
À·
->
∑ª¡
 = subst;

243 i‡(
sub°
->
right
 !
£¡öñ
) {

244 
sub°
->
right
->
∑ª¡
 = subst;

249 
node
->
À·
 = 
NULL
;

250 
node
->
right
 = 
NULL
;

251 
node
->
∑ª¡
 = 
NULL
;

252 
node
->
key
 = 0;

254 i‡(
ªd
) {

260 
ãmp
 !*
roŸ
 && 
	`ngx_rbt_is_bœck
(temp)) {

262 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

263 
w
 = 
ãmp
->
∑ª¡
->
right
;

265 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

266 
	`ngx_rbt_bœck
(
w
);

267 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

268 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

269 
w
 = 
ãmp
->
∑ª¡
->
right
;

272 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

273 
	`ngx_rbt_ªd
(
w
);

274 
ãmp
 =Åemp->
∑ª¡
;

277 i‡(
	`ngx_rbt_is_bœck
(
w
->
right
)) {

278 
	`ngx_rbt_bœck
(
w
->
À·
);

279 
	`ngx_rbt_ªd
(
w
);

280 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

281 
w
 = 
ãmp
->
∑ª¡
->
right
;

284 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

285 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

286 
	`ngx_rbt_bœck
(
w
->
right
);

287 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

288 
ãmp
 = *
roŸ
;

292 
w
 = 
ãmp
->
∑ª¡
->
À·
;

294 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

295 
	`ngx_rbt_bœck
(
w
);

296 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

297 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

298 
w
 = 
ãmp
->
∑ª¡
->
À·
;

301 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

302 
	`ngx_rbt_ªd
(
w
);

303 
ãmp
 =Åemp->
∑ª¡
;

306 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
)) {

307 
	`ngx_rbt_bœck
(
w
->
right
);

308 
	`ngx_rbt_ªd
(
w
);

309 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

310 
w
 = 
ãmp
->
∑ª¡
->
À·
;

313 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

314 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

315 
	`ngx_rbt_bœck
(
w
->
À·
);

316 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

317 
ãmp
 = *
roŸ
;

322 
	`ngx_rbt_bœck
(
ãmp
);

323 
	}
}

326 
ngx_ölöe
 

327 
	$ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

328 
ngx_rbåì_node_t
 *
node
)

330 
ngx_rbåì_node_t
 *
ãmp
;

332 
ãmp
 = 
node
->
right
;

333 
node
->
right
 = 
ãmp
->
À·
;

335 i‡(
ãmp
->
À·
 !
£¡öñ
) {

336 
ãmp
->
À·
->
∑ª¡
 = 
node
;

339 
ãmp
->
∑ª¡
 = 
node
->parent;

341 i‡(
node
 =*
roŸ
) {

342 *
roŸ
 = 
ãmp
;

344 } i‡(
node
 =node->
∑ª¡
->
À·
) {

345 
node
->
∑ª¡
->
À·
 = 
ãmp
;

348 
node
->
∑ª¡
->
right
 = 
ãmp
;

351 
ãmp
->
À·
 = 
node
;

352 
node
->
∑ª¡
 = 
ãmp
;

353 
	}
}

356 
ngx_ölöe
 

357 
	$ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

358 
ngx_rbåì_node_t
 *
node
)

360 
ngx_rbåì_node_t
 *
ãmp
;

362 
ãmp
 = 
node
->
À·
;

363 
node
->
À·
 = 
ãmp
->
right
;

365 i‡(
ãmp
->
right
 !
£¡öñ
) {

366 
ãmp
->
right
->
∑ª¡
 = 
node
;

369 
ãmp
->
∑ª¡
 = 
node
->parent;

371 i‡(
node
 =*
roŸ
) {

372 *
roŸ
 = 
ãmp
;

374 } i‡(
node
 =node->
∑ª¡
->
right
) {

375 
node
->
∑ª¡
->
right
 = 
ãmp
;

378 
node
->
∑ª¡
->
À·
 = 
ãmp
;

381 
ãmp
->
right
 = 
node
;

382 
node
->
∑ª¡
 = 
ãmp
;

383 
	}
}

	@src/core/ngx_rbtree.h

8 #i‚de‡
_NGX_RBTREE_H_INCLUDED_


9 
	#_NGX_RBTREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_uöt_t
 
	tngx_rbåì_key_t
;

17 
ngx_öt_t
 
	tngx_rbåì_key_öt_t
;

20 
ngx_rbåì_node_s
 
	tngx_rbåì_node_t
;

22 
	sngx_rbåì_node_s
 {

23 
ngx_rbåì_key_t
 
	mkey
;

24 
ngx_rbåì_node_t
 *
	mÀ·
;

25 
ngx_rbåì_node_t
 *
	mright
;

26 
ngx_rbåì_node_t
 *
	m∑ª¡
;

27 
u_ch¨
 
	mcﬁ‹
;

28 
u_ch¨
 
	md©a
;

32 
ngx_rbåì_s
 
	tngx_rbåì_t
;

34 (*
	tngx_rbåì_ö£π_±
Ë(
	tngx_rbåì_node_t
 *
	troŸ
,

35 
	tngx_rbåì_node_t
 *
	tnode
,Çgx_rbåì_node_à*
	t£¡öñ
);

37 
	sngx_rbåì_s
 {

38 
ngx_rbåì_node_t
 *
roŸ
;

39 
ngx_rbåì_node_t
 *
£¡öñ
;

40 
ngx_rbåì_ö£π_±
 
ö£π
;

44 
	#ngx_rbåì_öô
(
åì
, 
s
, 
i
) \

45 
	`ngx_rbåì_£¡öñ_öô
(
s
); \

46 (
åì
)->
roŸ
 = 
s
; \

47 (
åì
)->
£¡öñ
 = 
s
; \

48 (
åì
)->
ö£π
 = 
i


	)

51 
	`ngx_rbåì_ö£π
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

52 
ngx_rbåì_node_t
 *
node
);

53 
	`ngx_rbåì_dñëe
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

54 
ngx_rbåì_node_t
 *
node
);

55 
	`ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,Çgx_rbåì_node_à*
node
,

56 
ngx_rbåì_node_t
 *
£¡öñ
);

57 
	`ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,

58 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

61 
	#ngx_rbt_ªd
(
node
Ë(“ode)->
cﬁ‹
 = 1)

	)

62 
	#ngx_rbt_bœck
(
node
Ë(“ode)->
cﬁ‹
 = 0)

	)

63 
	#ngx_rbt_is_ªd
(
node
Ë(“ode)->
cﬁ‹
)

	)

64 
	#ngx_rbt_is_bœck
(
node
Ë(!
	`ngx_rbt_is_ªd
“ode))

	)

65 
	#ngx_rbt_c›y_cﬁ‹
(
n1
, 
n2
Ë“1->
cﬁ‹
 =Ç2->cﬁ‹)

	)

70 
	#ngx_rbåì_£¡öñ_öô
(
node
Ë
	`ngx_rbt_bœck
“ode)

	)

73 
ngx_ölöe
 
ngx_rbåì_node_t
 *

74 
	$ngx_rbåì_mö
(
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

76 
node
->
À·
 !
£¡öñ
) {

77 
node
 =Çode->
À·
;

80  
node
;

81 
	}
}

	@src/core/ngx_regex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 * 
ngx_libc_cde˛
 
ngx_ªgex_mÆloc
(
size_t
 
size
);

13 
ngx_libc_cde˛
 
ngx_ªgex_‰ì
(*
p
);

16 
ngx_poﬁ_t
 *
	gngx_p¸e_poﬁ
;

20 
	$ngx_ªgex_öô
()

22 
p¸e_mÆloc
 = 
ngx_ªgex_mÆloc
;

23 
p¸e_‰ì
 = 
ngx_ªgex_‰ì
;

24 
	}
}

27 
ngx_ölöe
 

28 
	$ngx_ªgex_mÆloc_öô
(
ngx_poﬁ_t
 *
poﬁ
)

30 #i‡(
NGX_THREADS
)

31 
ngx_c‹e_és_t
 *
és
;

33 i‡(
ngx_thªaded
) {

34 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

35 
és
->
poﬁ
 =Öool;

41 
ngx_p¸e_poﬁ
 = 
poﬁ
;

42 
	}
}

45 
ngx_ölöe
 

46 
	$ngx_ªgex_mÆloc_d⁄e
()

48 #i‡(
NGX_THREADS
)

49 
ngx_c‹e_és_t
 *
és
;

51 i‡(
ngx_thªaded
) {

52 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

53 
és
->
poﬁ
 = 
NULL
;

59 
ngx_p¸e_poﬁ
 = 
NULL
;

60 
	}
}

63 
ngx_öt_t


64 
	$ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
)

66 
n
, 
îroff
;

67 *
p
;

68 c⁄° *
îr°r
;

69 
ngx_ªgex_t
 *
ª
;

71 
	`ngx_ªgex_mÆloc_öô
(
rc
->
poﬁ
);

73 
ª
 = 
	`p¸e_compûe
((c⁄° *Ë
rc
->
∑âîn
.
d©a
, (Ërc->
›ti⁄s
,

74 &
îr°r
, &
îroff
, 
NULL
);

77 
	`ngx_ªgex_mÆloc_d⁄e
();

79 i‡(
ª
 =
NULL
) {

80 i‡((
size_t
Ë
îroff
 =
rc
->
∑âîn
.
Àn
) {

81 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

83 
îr°r
, &
rc
->
∑âîn
)

84 - 
rc
->
îr
.
d©a
;

87 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

89 
îr°r
, &
rc
->
∑âîn
,Ñc->∑âîn.
d©a
 + 
îroff
)

90 - 
rc
->
îr
.
d©a
;

93  
NGX_ERROR
;

96 
rc
->
ªgex
 = 
ª
;

98 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_CAPTURECOUNT
, &
rc
->
ˇ±uªs
);

99 i‡(
n
 < 0) {

100 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_CAPTURECOUNT) failed: %d";

101 
Áûed
;

104 i‡(
rc
->
ˇ±uªs
 == 0) {

105  
NGX_OK
;

108 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMECOUNT
, &
rc
->
«med_ˇ±uªs
);

109 i‡(
n
 < 0) {

110 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMECOUNT) failed: %d";

111 
Áûed
;

114 i‡(
rc
->
«med_ˇ±uªs
 == 0) {

115  
NGX_OK
;

118 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMEENTRYSIZE
, &
rc
->
«me_size
);

119 i‡(
n
 < 0) {

120 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMEENTRYSIZE) failed: %d";

121 
Áûed
;

124 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMETABLE
, &
rc
->
«mes
);

125 i‡(
n
 < 0) {

126 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMETABLE) failed: %d";

127 
Áûed
;

130  
NGX_OK
;

132 
Áûed
:

134 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->îr.Àn, 
p
, &rc->
∑âîn
, 
n
)

135 - 
rc
->
îr
.
d©a
;

136  
NGX_OK
;

137 
	}
}

140 
ngx_öt_t


141 
	$ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
)

143 
ngx_öt_t
 
n
;

144 
ngx_uöt_t
 
i
;

145 
ngx_ªgex_ñt_t
 *
ª
;

147 
ª
 = 
a
->
ñts
;

149 
i
 = 0; i < 
a
->
√…s
; i++) {

151 
n
 = 
	`ngx_ªgex_exec
(
ª
[
i
].
ªgex
, 
s
, 
NULL
, 0);

153 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

157 i‡(
n
 < 0) {

158 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

159 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%s\"",

160 
n
, 
s
, 
ª
[
i
].
«me
);

161  
NGX_ERROR
;

166  
NGX_OK
;

169  
NGX_DECLINED
;

170 
	}
}

173 * 
ngx_libc_cde˛


174 
	$ngx_ªgex_mÆloc
(
size_t
 
size
)

176 
ngx_poﬁ_t
 *
poﬁ
;

177 #i‡(
NGX_THREADS
)

178 
ngx_c‹e_és_t
 *
és
;

180 i‡(
ngx_thªaded
) {

181 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

182 
poﬁ
 = 
és
->pool;

185 
poﬁ
 = 
ngx_p¸e_poﬁ
;

190 
poﬁ
 = 
ngx_p¸e_poﬁ
;

194 i‡(
poﬁ
) {

195  
	`ngx_∑Œoc
(
poﬁ
, 
size
);

198  
NULL
;

199 
	}
}

202 
ngx_libc_cde˛


203 
	$ngx_ªgex_‰ì
(*
p
)

206 
	}
}

	@src/core/ngx_regex.h

8 #i‚de‡
_NGX_REGEX_H_INCLUDED_


9 
	#_NGX_REGEX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<p¸e.h
>

18 
	#NGX_REGEX_NO_MATCHED
 
PCRE_ERROR_NOMATCH


	)

20 
	#NGX_REGEX_CASELESS
 
PCRE_CASELESS


	)

22 
p¸e
 
	tngx_ªgex_t
;

26 
ngx_°r_t
 
	m∑âîn
;

27 
ngx_poﬁ_t
 *
	mpoﬁ
;

28 
ngx_öt_t
 
	m›ti⁄s
;

30 
ngx_ªgex_t
 *
	mªgex
;

31 
	mˇ±uªs
;

32 
	m«med_ˇ±uªs
;

33 
	m«me_size
;

34 
u_ch¨
 *
	m«mes
;

35 
ngx_°r_t
 
	mîr
;

36 } 
	tngx_ªgex_compûe_t
;

40 
ngx_ªgex_t
 *
	mªgex
;

41 
u_ch¨
 *
	m«me
;

42 } 
	tngx_ªgex_ñt_t
;

45 
ngx_ªgex_öô
();

46 
ngx_öt_t
 
ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
);

48 
	#ngx_ªgex_exec
(
ª
, 
s
, 
ˇ±uªs
, 
size
) \

49 
	`p¸e_exec
(
ª
, 
NULL
, (c⁄° *Ë(
s
)->
d©a
, (s)->
Àn
, 0, 0, \

50 
ˇ±uªs
, 
size
)

	)

51 
	#ngx_ªgex_exec_n
 "p¸e_exec()"

	)

53 
ngx_öt_t
 
ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
);

	@src/core/ngx_resolver.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_RESOLVER_UDP_SIZE
 4096

	)

17 
u_ch¨
 
	midít_hi
;

18 
u_ch¨
 
	midít_lo
;

19 
u_ch¨
 
	mÊags_hi
;

20 
u_ch¨
 
	mÊags_lo
;

21 
u_ch¨
 
	mnqs_hi
;

22 
u_ch¨
 
	mnqs_lo
;

23 
u_ch¨
 
	m«n_hi
;

24 
u_ch¨
 
	m«n_lo
;

25 
u_ch¨
 
	m¬s_hi
;

26 
u_ch¨
 
	m¬s_lo
;

27 
u_ch¨
 
	m«r_hi
;

28 
u_ch¨
 
	m«r_lo
;

29 } 
	tngx_ªsﬁvî_quîy_t
;

33 
u_ch¨
 
	mty≥_hi
;

34 
u_ch¨
 
	mty≥_lo
;

35 
u_ch¨
 
	m˛ass_hi
;

36 
u_ch¨
 
	m˛ass_lo
;

37 } 
	tngx_ªsﬁvî_qs_t
;

41 
u_ch¨
 
	mty≥_hi
;

42 
u_ch¨
 
	mty≥_lo
;

43 
u_ch¨
 
	m˛ass_hi
;

44 
u_ch¨
 
	m˛ass_lo
;

45 
u_ch¨
 
	mâl
[4];

46 
u_ch¨
 
	mÀn_hi
;

47 
u_ch¨
 
	mÀn_lo
;

48 } 
	tngx_ªsﬁvî_™_t
;

51 
ngx_öt_t
 
ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
);

54 
ngx_ªsﬁvî_˛ónup
(*
d©a
);

55 
ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
);

56 
ngx_öt_t
 
ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
,

57 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

58 
ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

59 
ngx_queue_t
 *
queue
);

60 
ngx_öt_t
 
ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
,

61 
ngx_ªsﬁvî_node_t
 *
∫
);

62 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

63 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

64 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

65 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

66 
ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
);

67 
time_t
 
ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

68 
ngx_queue_t
 *
queue
);

69 
ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
);

70 
ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
,

71 
size_t
 
n
);

72 
ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

73 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
,Çgx_uöt_à
™s
);

74 
ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

75 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
);

76 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
,

77 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
);

78 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
,

79 
ö_addr_t
 
addr
);

80 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

81 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

82 
ngx_öt_t
 
ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
,

83 
u_ch¨
 *
buf
, u_ch¨ *
§c
, u_ch¨ *
œ°
);

84 
ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
);

85 
ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
);

86 *
ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

87 *
ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

88 
ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

89 
ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

90 *
ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
);

91 
u_ch¨
 *
ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

94 
ngx_ªsﬁvî_t
 *

95 
	$ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_addr_t
 *
addr
)

97 
ngx_ªsﬁvî_t
 *
r
;

98 
ngx_poﬁ_˛ónup_t
 *
˛n
;

99 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

101 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

102 i‡(
˛n
 =
NULL
) {

103  
NULL
;

106 
˛n
->
h™dÀr
 = 
ngx_ªsﬁvî_˛ónup
;

108 
r
 = 
	`ngx_ˇŒoc
((
ngx_ªsﬁvî_t
), 
cf
->
log
);

109 i‡(
r
 =
NULL
) {

110  
NULL
;

113 
˛n
->
d©a
 = 
r
;

115 
r
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
cf
->
log
);

116 i‡(
r
->
evít
 =
NULL
) {

117  
NULL
;

120 
	`ngx_rbåì_öô
(&
r
->
«me_rbåì
, &r->
«me_£¡öñ
,

121 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
);

123 
	`ngx_rbåì_öô
(&
r
->
addr_rbåì
, &r->
addr_£¡öñ
,

124 
ngx_rbåì_ö£π_vÆue
);

126 
	`ngx_queue_öô
(&
r
->
«me_ª£nd_queue
);

127 
	`ngx_queue_öô
(&
r
->
addr_ª£nd_queue
);

129 
	`ngx_queue_öô
(&
r
->
«me_expúe_queue
);

130 
	`ngx_queue_öô
(&
r
->
addr_expúe_queue
);

132 
r
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_ª£nd_h™dÀr
;

133 
r
->
evít
->
d©a
 =Ñ;

134 
r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

135 
r
->
idít
 = -1;

137 
r
->
ª£nd_timeout
 = 5;

138 
r
->
expúe
 = 30;

139 
r
->
vÆid
 = 300;

141 
r
->
log
 = &
cf
->
cy˛e
->
√w_log
;

142 
r
->
log_Àvñ
 = 
NGX_LOG_ERR
;

144 i‡(
addr
) {

145 
uc
 = 
	`ngx_ˇŒoc
((
ngx_udp_c⁄√˘i⁄_t
), 
cf
->
log
);

146 i‡(
uc
 =
NULL
) {

147  
NULL
;

150 
r
->
udp_c⁄√˘i⁄
 = 
uc
;

152 
uc
->
sockaddr
 = 
addr
->sockaddr;

153 
uc
->
sockÀn
 = 
addr
->socklen;

154 
uc
->
£rvî
 = 
addr
->
«me
;

157  
r
;

158 
	}
}

162 
	$ngx_ªsﬁvî_˛ónup
(*
d©a
)

164 
ngx_ªsﬁvî_t
 *
r
 = 
d©a
;

166 i‡(
r
) {

167 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

170 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
«me_rbåì
);

172 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr_rbåì
);

174 i‡(
r
->
evít
) {

175 
	`ngx_‰ì
(
r
->
evít
);

178 i‡(
r
->
udp_c⁄√˘i⁄
) {

179 i‡(
r
->
udp_c⁄√˘i⁄
->
c⁄√˘i⁄
) {

180 
	`ngx_˛o£_c⁄√˘i⁄
(
r
->
udp_c⁄√˘i⁄
->
c⁄√˘i⁄
);

183 
	`ngx_‰ì
(
r
->
udp_c⁄√˘i⁄
);

186 
	`ngx_‰ì
(
r
);

188 
	}
}

192 
	$ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
)

194 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

195 
ngx_ªsﬁvî_node_t
 *
∫
;

197 
åì
->
roŸ
 !åì->
£¡öñ
) {

199 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
	`ngx_rbåì_mö
(
åì
->
roŸ
,Åªe->
£¡öñ
);

201 
	`ngx_queue_ªmove
(&
∫
->
queue
);

203 
˘x
 = 
∫
->
waôög
; ctx; ctx = 
√xt
) {

204 
√xt
 = 
˘x
->next;

206 i‡(
˘x
->
evít
) {

207 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

210 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

213 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

215 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

217 
	}
}

220 
ngx_ªsﬁvî_˘x_t
 *

221 
	$ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
ãmp
)

223 
ö_addr_t
 
addr
;

224 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

226 i‡(
ãmp
) {

227 
addr
 = 
	`ngx_öë_addr
(
ãmp
->
«me
.
d©a
,Åemp->«me.
Àn
);

229 i‡(
addr
 !
INADDR_NONE
) {

230 
ãmp
->
ªsﬁvî
 = 
r
;

231 
ãmp
->
°©e
 = 
NGX_OK
;

232 
ãmp
->
«ddrs
 = 1;

233 
ãmp
->
addrs
 = &ãmp->
addr
;

234 
ãmp
->
addr
 =áddr;

235 
ãmp
->
quick
 = 1;

237  
ãmp
;

241 i‡(
r
->
udp_c⁄√˘i⁄
 =
NULL
) {

242  
NGX_NO_RESOLVER
;

245 
˘x
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_ªsﬁvî_˘x_t
));

247 i‡(
˘x
) {

248 
˘x
->
ªsﬁvî
 = 
r
;

251  
˘x
;

252 
	}
}

255 
ngx_öt_t


256 
	$ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

258 
ngx_öt_t
 
rc
;

259 
ngx_ªsﬁvî_t
 *
r
;

261 
r
 = 
˘x
->
ªsﬁvî
;

263 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

264 "ªsﬁve: \"%V\"", &
˘x
->
«me
);

266 i‡(
˘x
->
quick
) {

267 
˘x
->
	`h™dÀr
(ctx);

268  
NGX_OK
;

273 
rc
 = 
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

275 i‡(
rc
 =
NGX_OK
) {

276  
NGX_OK
;

281 i‡(
rc
 =
NGX_AGAIN
) {

282  
NGX_OK
;

287 i‡(
˘x
->
evít
) {

288 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

291 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

293  
NGX_ERROR
;

294 
	}
}

298 
	$ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

300 
uöt32_t
 
hash
;

301 
ngx_ªsﬁvî_t
 *
r
;

302 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

303 
ngx_ªsﬁvî_node_t
 *
∫
;

305 
r
 = 
˘x
->
ªsﬁvî
;

307 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

308 "ªsﬁvê«mêd⁄e: %i", 
˘x
->
°©e
);

310 i‡(
˘x
->
quick
) {

314 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

315 
	`ngx_dñ_timî
(
˘x
->
evít
);

320 i‡(
˘x
->
°©e
 =
NGX_AGAIN
 || ctx->°©ê=
NGX_RESOLVE_TIMEDOUT
) {

322 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

324 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

326 i‡(
∫
) {

327 
p
 = &
∫
->
waôög
;

328 
w
 = 
∫
->
waôög
;

330 
w
) {

331 i‡(
w
 =
˘x
) {

332 *
p
 = 
w
->
√xt
;

334 
d⁄e
;

337 
p
 = &
w
->
√xt
;

338 
w
 = w->
√xt
;

342 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

343 "couldÇŸ c™˚»%VÑesﬁvög", &
˘x
->
«me
);

346 
d⁄e
:

348 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
«me_rbåì
, &r->
«me_expúe_queue
);

354 i‡(
˘x
->
evít
) {

355 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

358 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

361 
	}
}

366 
ngx_öt_t


367 
	$ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

369 
uöt32_t
 
hash
;

370 
ö_addr_t
 
addr
, *
addrs
;

371 
ngx_öt_t
 
rc
;

372 
ngx_uöt_t
 
«ddrs
;

373 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

374 
ngx_ªsﬁvî_node_t
 *
∫
;

376 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

378 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

380 i‡(
∫
) {

382 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

384 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

386 
	`ngx_queue_ªmove
(&
∫
->
queue
);

388 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

390 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

392 
«ddrs
 = 
∫
->naddrs;

394 i‡(
«ddrs
) {

398 i‡(
«ddrs
 != 1) {

399 
addr
 = 0;

400 
addrs
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->
u
.addrs,

401 
«ddrs
 * (
ö_addr_t
));

402 i‡(
addrs
 =
NULL
) {

403  
NGX_ERROR
;

407 
addr
 = 
∫
->
u
.addr;

408 
addrs
 = 
NULL
;

411 
˘x
->
√xt
 = 
∫
->
waôög
;

412 
∫
->
waôög
 = 
NULL
;

417 
˘x
->
°©e
 = 
NGX_OK
;

418 
˘x
->
«ddrs
 =Çaddrs;

419 
˘x
->
addrs
 = (
«ddrs
 =1Ë? &˘x->
addr
 :áddrs;

420 
˘x
->
addr
 =áddr;

421 
√xt
 = 
˘x
->next;

423 
˘x
->
	`h™dÀr
(ctx);

425 
˘x
 = 
√xt
;

426 } 
˘x
);

428 i‡(
addrs
) {

429 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

432  
NGX_OK
;

437 i‡(
˘x
->
ªcursi⁄
++ < 
NGX_RESOLVER_MAX_RECURSION
) {

439 
˘x
->
«me
.
Àn
 = 
∫
->
˙Àn
;

440 
˘x
->
«me
.
d©a
 = 
∫
->
u
.
˙ame
;

442  
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

445 
˘x
->
√xt
 = 
∫
->
waôög
;

446 
∫
->
waôög
 = 
NULL
;

451 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

452 
√xt
 = 
˘x
->next;

454 
˘x
->
	`h™dÀr
(ctx);

456 
˘x
 = 
√xt
;

457 } 
˘x
);

459  
NGX_OK
;

462 i‡(
∫
->
waôög
) {

464 
˘x
->
√xt
 = 
∫
->
waôög
;

465 
∫
->
waôög
 = 
˘x
;

466 
˘x
->
°©e
 = 
NGX_AGAIN
;

468  
NGX_AGAIN
;

471 
	`ngx_queue_ªmove
(&
∫
->
queue
);

475 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

476 
∫
->
quîy
 = 
NULL
;

478 i‡(
∫
->
˙Àn
) {

479 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

482 i‡(
∫
->
«ddrs
 > 1) {

483 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

490 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

491 i‡(
∫
 =
NULL
) {

492  
NGX_ERROR
;

495 
∫
->
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
˘x
->«me.
d©a
, ctx->«me.
Àn
);

496 i‡(
∫
->
«me
 =
NULL
) {

497 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

498  
NGX_ERROR
;

501 
∫
->
node
.
key
 = 
hash
;

502 
∫
->
∆í
 = (
u_sh‹t
Ë
˘x
->
«me
.
Àn
;

503 
∫
->
quîy
 = 
NULL
;

505 
	`ngx_rbåì_ö£π
(&
r
->
«me_rbåì
, &
∫
->
node
);

508 
rc
 = 
	`ngx_ªsﬁvî_¸óã_«me_quîy
(
∫
, 
˘x
);

510 i‡(
rc
 =
NGX_ERROR
) {

511 
Áûed
;

514 i‡(
rc
 =
NGX_DECLINED
) {

515 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

517 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

518 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

519 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

521 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

522 
˘x
->
	`h™dÀr
(ctx);

524  
NGX_OK
;

527 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

528 
Áûed
;

531 i‡(
˘x
->
evít
 =
NULL
) {

532 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

533 i‡(
˘x
->
evít
 =
NULL
) {

534 
Áûed
;

537 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

538 
˘x
->
evít
->
d©a
 = ctx;

539 
˘x
->
evít
->
log
 = 
r
->log;

540 
˘x
->
idít
 = -1;

542 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

545 i‡(
	`ngx_queue_em±y
(&
r
->
«me_ª£nd_queue
)) {

546 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

549 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

551 
	`ngx_queue_ö£π_hód
(&
r
->
«me_ª£nd_queue
, &
∫
->
queue
);

553 
∫
->
˙Àn
 = 0;

554 
∫
->
«ddrs
 = 0;

555 
∫
->
vÆid
 = 0;

556 
∫
->
waôög
 = 
˘x
;

558 
˘x
->
°©e
 = 
NGX_AGAIN
;

560  
NGX_AGAIN
;

562 
Áûed
:

564 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

566 i‡(
∫
->
quîy
) {

567 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

570 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

572 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

574  
NGX_ERROR
;

575 
	}
}

578 
ngx_öt_t


579 
	$ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

581 
u_ch¨
 *
«me
;

582 
ngx_ªsﬁvî_t
 *
r
;

583 
ngx_ªsﬁvî_node_t
 *
∫
;

585 
r
 = 
˘x
->
ªsﬁvî
;

587 
˘x
->
addr
 = 
	`¡ohl
(ctx->addr);

591 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
˘x
->
addr
);

593 i‡(
∫
) {

595 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

597 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

599 
	`ngx_queue_ªmove
(&
∫
->
queue
);

601 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

603 
	`ngx_queue_ö£π_hód
(&
r
->
addr_expúe_queue
, &
∫
->
queue
);

605 
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Ñn->
∆í
);

606 i‡(
«me
 =
NULL
) {

607 
Áûed
;

610 
˘x
->
«me
.
Àn
 = 
∫
->
∆í
;

611 
˘x
->
«me
.
d©a
 =Çame;

615 
˘x
->
°©e
 = 
NGX_OK
;

617 
˘x
->
	`h™dÀr
(ctx);

619 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
);

621  
NGX_OK
;

624 i‡(
∫
->
waôög
) {

626 
˘x
->
√xt
 = 
∫
->
waôög
;

627 
∫
->
waôög
 = 
˘x
;

628 
˘x
->
°©e
 = 
NGX_AGAIN
;

632  
NGX_OK
;

635 
	`ngx_queue_ªmove
(&
∫
->
queue
);

637 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

638 
∫
->
quîy
 = 
NULL
;

641 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

642 i‡(
∫
 =
NULL
) {

643 
Áûed
;

646 
∫
->
node
.
key
 = 
˘x
->
addr
;

647 
∫
->
quîy
 = 
NULL
;

649 
	`ngx_rbåì_ö£π
(&
r
->
addr_rbåì
, &
∫
->
node
);

652 i‡(
	`ngx_ªsﬁvî_¸óã_addr_quîy
(
∫
, 
˘x
Ë!
NGX_OK
) {

653 
Áûed
;

656 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

657 
Áûed
;

660 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

661 i‡(
˘x
->
evít
 =
NULL
) {

662 
Áûed
;

665 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

666 
˘x
->
evít
->
d©a
 = ctx;

667 
˘x
->
evít
->
log
 = 
r
->log;

668 
˘x
->
idít
 = -1;

670 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

672 i‡(
	`ngx_queue_em±y
(&
r
->
addr_ª£nd_queue
)) {

673 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

676 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

678 
	`ngx_queue_ö£π_hód
(&
r
->
addr_ª£nd_queue
, &
∫
->
queue
);

680 
∫
->
˙Àn
 = 0;

681 
∫
->
«ddrs
 = 0;

682 
∫
->
«me
 = 
NULL
;

683 
∫
->
∆í
 = 0;

684 
∫
->
vÆid
 = 0;

685 
∫
->
waôög
 = 
˘x
;

689 
˘x
->
°©e
 = 
NGX_AGAIN
;

691  
NGX_OK
;

693 
Áûed
:

695 i‡(
∫
) {

696 
	`ngx_rbåì_dñëe
(&
r
->
addr_rbåì
, &
∫
->
node
);

698 i‡(
∫
->
quîy
) {

699 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

702 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

707 i‡(
˘x
->
evít
) {

708 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

711 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

713  
NGX_ERROR
;

714 
	}
}

718 
	$ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

720 
ö_addr_t
 
addr
;

721 
ngx_ªsﬁvî_t
 *
r
;

722 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

723 
ngx_ªsﬁvî_node_t
 *
∫
;

725 
r
 = 
˘x
->
ªsﬁvî
;

727 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

728 "ªsﬁvêadd∏d⁄e: %i", 
˘x
->
°©e
);

730 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

731 
	`ngx_dñ_timî
(
˘x
->
evít
);

736 i‡(
˘x
->
°©e
 =
NGX_AGAIN
 || ctx->°©ê=
NGX_RESOLVE_TIMEDOUT
) {

738 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
˘x
->
addr
);

740 i‡(
∫
) {

741 
p
 = &
∫
->
waôög
;

742 
w
 = 
∫
->
waôög
;

744 
w
) {

745 i‡(
w
 =
˘x
) {

746 *
p
 = 
w
->
√xt
;

748 
d⁄e
;

751 
p
 = &
w
->
√xt
;

752 
w
 = w->
√xt
;

756 
addr
 = 
	`¡ohl
(
˘x
->addr);

758 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

760 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

761 (
addr
 >> 8) & 0xff,áddr & 0xff);

764 
d⁄e
:

766 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
addr_rbåì
, &r->
addr_expúe_queue
);

772 i‡(
˘x
->
evít
) {

773 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

776 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

779 
	}
}

783 
	$ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

785 
time_t
 
now
;

786 
ngx_uöt_t
 
i
;

787 
ngx_queue_t
 *
q
;

788 
ngx_ªsﬁvî_node_t
 *
∫
;

790 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolverÉxpire");

792 
now
 = 
	`ngx_time
();

794 
i
 = 0; i < 2; i++) {

795 i‡(
	`ngx_queue_em±y
(
queue
)) {

799 
q
 = 
	`ngx_queue_œ°
(
queue
);

801 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

803 i‡(
now
 <
∫
->
expúe
) {

807 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

808 "ªsﬁvîÉxpúê\"%*s\"", (
size_t
Ë
∫
->
∆í
,Ñn->
«me
);

810 
	`ngx_queue_ªmove
(
q
);

812 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

814 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

816 
	}
}

819 
ngx_öt_t


820 
	$ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

822 
ssize_t
 
n
;

823 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

825 
uc
 = 
r
->
udp_c⁄√˘i⁄
;

827 i‡(
uc
->
c⁄√˘i⁄
 =
NULL
) {

829 
uc
->
log
 = *
r
->log;

830 
uc
->
log
.
h™dÀr
 = 
ngx_ªsﬁvî_log_îr‹
;

831 
uc
->
log
.
d©a
 = uc;

832 
uc
->
log
.
a˘i⁄
 = "resolving";

834 i‡(
	`ngx_udp_c⁄√˘
(
uc
Ë!
NGX_OK
) {

835  
NGX_ERROR
;

838 
uc
->
c⁄√˘i⁄
->
d©a
 = 
r
;

839 
uc
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_ªsﬁvî_ªad_ª•⁄£
;

840 
uc
->
c⁄√˘i⁄
->
ªad
->
ªsﬁvî
 = 1;

843 
n
 = 
	`ngx_£nd
(
uc
->
c⁄√˘i⁄
, 
∫
->
quîy
,Ñn->
qÀn
);

845 i‡(
n
 == -1) {

846  
NGX_ERROR
;

849 i‡((
size_t
Ë
n
 !(size_tË
∫
->
qÀn
) {

850 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 0, "send() incomplete");

851  
NGX_ERROR
;

854  
NGX_OK
;

855 
	}
}

859 
	$ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
)

861 
time_t
 
timî
, 
©imî
, 
¡imî
;

862 
ngx_ªsﬁvî_t
 *
r
;

864 
r
 = 
ev
->
d©a
;

866 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

871 
¡imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
«me_rbåì
, &r->
«me_ª£nd_queue
);

877 
©imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr_rbåì
, &r->
addr_ª£nd_queue
);

881 i‡(
¡imî
 == 0) {

882 
timî
 = 
©imî
;

884 } i‡(
©imî
 == 0) {

885 
timî
 = 
¡imî
;

888 
timî
 = (
©imî
 < 
¡imî
) ?átimer :Çtimer;

891 i‡(
timî
) {

892 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë(
timî
 * 1000));

894 
	}
}

897 
time_t


898 
	$ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

900 
time_t
 
now
;

901 
ngx_queue_t
 *
q
;

902 
ngx_ªsﬁvî_node_t
 *
∫
;

904 
now
 = 
	`ngx_time
();

907 i‡(
	`ngx_queue_em±y
(
queue
)) {

911 
q
 = 
	`ngx_queue_œ°
(
queue
);

913 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

915 i‡(
now
 < 
∫
->
expúe
) {

916  
∫
->
expúe
 - 
now
;

919 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

921 (
size_t
Ë
∫
->
∆í
,Ñn->
«me
,Ñn->
waôög
);

923 
	`ngx_queue_ªmove
(
q
);

925 i‡(
∫
->
waôög
) {

927 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë=
NGX_OK
) {

929 
∫
->
expúe
 = 
now
 + 
r
->
ª£nd_timeout
;

931 
	`ngx_queue_ö£π_hód
(
queue
, &
∫
->queue);

937 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

939 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

941 
	}
}

945 
	$ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
)

947 
ssize_t
 
n
;

948 
ngx_c⁄√˘i⁄_t
 *
c
;

949 
u_ch¨
 
buf
[
NGX_RESOLVER_UDP_SIZE
];

951 
c
 = 
ªv
->
d©a
;

954 
n
 = 
	`ngx_udp_ªcv
(
c
, 
buf
, 
NGX_RESOLVER_UDP_SIZE
);

956 i‡(
n
 < 0) {

960 
	`ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
c
->
d©a
, 
buf
, 
n
);

962 } 
ªv
->
ªady
);

963 
	}
}

967 
	$ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
)

969 *
îr
;

970 
size_t
 
Àn
;

971 
ngx_uöt_t
 
i
, 
times
, 
idít
, 
qidít
, 
Êags
, 
code
, 
nqs
, 
«n
,

972 
qty≥
, 
q˛ass
;

973 
ngx_queue_t
 *
q
;

974 
ngx_ªsﬁvî_qs_t
 *
qs
;

975 
ngx_ªsﬁvî_node_t
 *
∫
;

976 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

978 i‡((
size_t
Ë
n
 < (
ngx_ªsﬁvî_quîy_t
)) {

979 
sh‹t_ª•⁄£
;

982 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
buf
;

984 
idít
 = (
quîy
->
idít_hi
 << 8Ë+ quîy->
idít_lo
;

985 
Êags
 = (
quîy
->
Êags_hi
 << 8Ë+ quîy->
Êags_lo
;

986 
nqs
 = (
quîy
->
nqs_hi
 << 8Ë+ quîy->
nqs_lo
;

987 
«n
 = (
quîy
->
«n_hi
 << 8Ë+ quîy->
«n_lo
;

989 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

991 
idít
, 
Êags
, 
nqs
, 
«n
,

992 (
quîy
->
¬s_hi
 << 8Ë+ quîy->
¬s_lo
,

993 (
quîy
->
«r_hi
 << 8Ë+ quîy->
«r_lo
);

995 i‡(!(
Êags
 & 0x8000)) {

996 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

997 "övÆid DNSÑe•⁄£ %uòÊ:%04Xui", 
idít
, 
Êags
);

1001 
code
 = 
Êags
 & 0x7f;

1003 i‡(
code
 =
NGX_RESOLVE_FORMERR
) {

1005 
times
 = 0;

1007 
q
 = 
	`ngx_queue_hód
(&
r
->
«me_ª£nd_queue
);

1008 
q
 !
	`ngx_queue_£¡öñ
(&
r
->
«me_ª£nd_queue
Ë|| 
times
++ < 100;

1009 
q
 = 
	`ngx_queue_√xt
(q))

1011 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1012 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1014 i‡(
qidít
 =
idít
) {

1015 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1017 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
,

1018 
∫
->
∆í
,Ñn->
«me
);

1023 
dns_îr‹
;

1026 i‡(
code
 > 
NGX_RESOLVE_REFUSED
) {

1027 
dns_îr‹
;

1030 i‡(
nqs
 != 1) {

1031 
îr
 = "invalidÇumber of questions in DNSÑesponse";

1032 
d⁄e
;

1035 
i
 = (
ngx_ªsﬁvî_quîy_t
);

1037 
i
 < (
ngx_uöt_t
Ë
n
) {

1038 i‡(
buf
[
i
] == '\0') {

1039 
found
;

1042 
Àn
 = 
buf
[
i
];

1043 
i
 +1 + 
Àn
;

1046 
sh‹t_ª•⁄£
;

1048 
found
:

1050 i‡(
i
++ == 0) {

1051 
îr
 = "zero-length domainÇame in DNSÑesponse";

1052 
d⁄e
;

1055 i‡(
i
 + (
ngx_ªsﬁvî_qs_t
Ë+ 
«n
 * (2 + (
ngx_ªsﬁvî_™_t
))

1056 > (
ngx_uöt_t
Ë
n
)

1058 
sh‹t_ª•⁄£
;

1061 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë&
buf
[
i
];

1063 
qty≥
 = (
qs
->
ty≥_hi
 << 8Ë+ qs->
ty≥_lo
;

1064 
q˛ass
 = (
qs
->
˛ass_hi
 << 8Ë+ qs->
˛ass_lo
;

1066 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1067 "ªsﬁvî DNSÑe•⁄£ qt:%uò˛:%ui", 
qty≥
, 
q˛ass
);

1069 i‡(
q˛ass
 != 1) {

1070 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1071 "unknow¿quîy cœs†%uòö DNSÑe•⁄£", 
q˛ass
);

1075 
qty≥
) {

1077 
NGX_RESOLVE_A
:

1079 
	`ngx_ªsﬁvî_¥o˚ss_a
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
,

1080 
i
 + (
ngx_ªsﬁvî_qs_t
));

1084 
NGX_RESOLVE_PTR
:

1086 
	`ngx_ªsﬁvî_¥o˚ss_±r
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
);

1091 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1092 "unknow¿quîyÅy≥ %uòö DNSÑe•⁄£", 
qty≥
);

1098 
sh‹t_ª•⁄£
:

1100 
îr
 = "short dnsÑesponse";

1102 
d⁄e
:

1104 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1108 
dns_îr‹
:

1110 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1112 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
);

1114 
	}
}

1118 
	$ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
œ°
,

1119 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
,Çgx_uöt_à
™s
)

1121 *
îr
;

1122 
u_ch¨
 *
˙ame
;

1123 
size_t
 
Àn
;

1124 
uöt32_t
 
hash
;

1125 
ö_addr_t
 
addr
, *
addrs
;

1126 
ngx_°r_t
 
«me
;

1127 
ngx_uöt_t
 
qty≥
, 
qidít
, 
«ddrs
, 
a
, 
i
, 
n
, 
°¨t
;

1128 
ngx_ªsﬁvî_™_t
 *
™
;

1129 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1130 
ngx_ªsﬁvî_node_t
 *
∫
;

1132 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, &buf[12], &buf[
œ°
]Ë!
NGX_OK
) {

1136 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvî qs:%V", &
«me
);

1138 
hash
 = 
	`ngx_¸c32_sh‹t
(
«me
.
d©a
,Çame.
Àn
);

1142 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
«me
, 
hash
);

1144 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

1145 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1146 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1147 
Áûed
;

1150 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1152 i‡(
idít
 !
qidít
) {

1153 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1155 
idít
, &
«me
, 
qidít
);

1156 
Áûed
;

1159 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1161 i‡(
code
 =0 && 
«n
 == 0) {

1162 
code
 = 3;

1165 i‡(
code
) {

1166 
√xt
 = 
∫
->
waôög
;

1167 
∫
->
waôög
 = 
NULL
;

1169 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1171 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

1173 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1177 
√xt
) {

1178 
˘x
 = 
√xt
;

1179 
˘x
->
°©e
 = 
code
;

1180 
√xt
 = 
˘x
->next;

1182 
˘x
->
	`h™dÀr
(ctx);

1188 
i
 = 
™s
;

1189 
«ddrs
 = 0;

1190 
addr
 = 0;

1191 
addrs
 = 
NULL
;

1192 
˙ame
 = 
NULL
;

1193 
qty≥
 = 0;

1195 
a
 = 0;á < 
«n
;á++) {

1197 
°¨t
 = 
i
;

1199 
i
 < 
œ°
) {

1201 i‡(
buf
[
i
] & 0xc0) {

1202 
i
 += 2;

1203 
found
;

1206 i‡(
buf
[
i
] == 0) {

1207 
i
++;

1208 
ã°_Àngth
;

1211 
i
 +1 + 
buf
[i];

1214 
sh‹t_ª•⁄£
;

1216 
ã°_Àngth
:

1218 i‡(
i
 - 
°¨t
 < 2) {

1219 
îr
 = "invalidÇame in dnsÑesponse";

1220 
övÆid
;

1223 
found
:

1225 i‡(
i
 + (
ngx_ªsﬁvî_™_t
Ë>
œ°
) {

1226 
sh‹t_ª•⁄£
;

1229 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1231 
qty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1232 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1234 i‡(
qty≥
 =
NGX_RESOLVE_A
) {

1236 
i
 +(
ngx_ªsﬁvî_™_t
);

1238 i‡(
i
 + 
Àn
 > 
œ°
) {

1239 
sh‹t_ª•⁄£
;

1242 
addr
 = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

1243 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

1245 
«ddrs
++;

1247 
i
 +
Àn
;

1249 } i‡(
qty≥
 =
NGX_RESOLVE_CNAME
) {

1250 
˙ame
 = &
buf
[
i
] + (
ngx_ªsﬁvî_™_t
);

1251 
i
 +(
ngx_ªsﬁvî_™_t
Ë+ 
Àn
;

1253 } i‡(
qty≥
 =
NGX_RESOLVE_DNAME
) {

1254 
i
 +(
ngx_ªsﬁvî_™_t
Ë+ 
Àn
;

1257 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1258 "u√x≥˘ed qty≥ %ui", 
qty≥
);

1262 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1263 "ªsﬁvîÇaddrs:%uò˙ame:%p", 
«ddrs
, 
˙ame
);

1265 i‡(
«ddrs
) {

1267 i‡(
«ddrs
 == 1) {

1268 
∫
->
u
.
addr
 =áddr;

1272 
addrs
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö_addr_t
));

1273 i‡(
addrs
 =
NULL
) {

1277 
n
 = 0;

1278 
i
 = 
™s
;

1280 
a
 = 0;á < 
«n
;á++) {

1284 i‡(
buf
[
i
] & 0xc0) {

1285 
i
 += 2;

1286 
ok
;

1289 i‡(
buf
[
i
] == 0) {

1290 
i
++;

1291 
ok
;

1294 
i
 +1 + 
buf
[i];

1297 
ok
:

1299 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1301 
qty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1302 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1304 
i
 +(
ngx_ªsﬁvî_™_t
);

1306 i‡(
qty≥
 =
NGX_RESOLVE_A
) {

1308 
addrs
[
n
++] = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

1309 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

1311 i‡(
n
 =
«ddrs
) {

1316 
i
 +
Àn
;

1319 
∫
->
u
.
addrs
 =áddrs;

1321 
addrs
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->
u
.addrs,

1322 
«ddrs
 * (
ö_addr_t
));

1323 i‡(
addrs
 =
NULL
) {

1328 
∫
->
«ddrs
 = (
u_sh‹t
)Çaddrs;

1330 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1332 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ 
r
->valid;

1333 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1335 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1337 
√xt
 = 
∫
->
waôög
;

1338 
∫
->
waôög
 = 
NULL
;

1342 
√xt
) {

1343 
˘x
 = 
√xt
;

1344 
˘x
->
°©e
 = 
NGX_OK
;

1345 
˘x
->
«ddrs
 =Çaddrs;

1346 
˘x
->
addrs
 = (
«ddrs
 =1Ë? &˘x->
addr
 :áddrs;

1347 
˘x
->
addr
 =áddr;

1348 
√xt
 = 
˘x
->next;

1350 
˘x
->
	`h™dÀr
(ctx);

1353 i‡(
«ddrs
 > 1) {

1354 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

1359 } i‡(
˙ame
) {

1363 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, 
˙ame
, &buf[
œ°
]Ë!
NGX_OK
) {

1367 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1368 "ªsﬁvî c«me:\"%V\"", &
«me
);

1370 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1372 
∫
->
˙Àn
 = (
u_sh‹t
Ë
«me
.
Àn
;

1373 
∫
->
u
.
˙ame
 = 
«me
.
d©a
;

1374 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ 
r
->valid;

1375 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1377 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1379 
˘x
 = 
∫
->
waôög
;

1380 
∫
->
waôög
 = 
NULL
;

1382 i‡(
˘x
) {

1383 
˘x
->
«me
 =Çame;

1385 (Ë
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

1391 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1393 
qty≥
);

1396 
sh‹t_ª•⁄£
:

1398 
îr
 = "short dnsÑesponse";

1400 
övÆid
:

1404 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1408 
Áûed
:

1412 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1415 
	}
}

1419 
	$ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

1420 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
)

1422 *
îr
;

1423 
size_t
 
Àn
;

1424 
ö_addr_t
 
addr
;

1425 
ngx_öt_t
 
digô
;

1426 
ngx_°r_t
 
«me
;

1427 
ngx_uöt_t
 
i
, 
mask
, 
qidít
;

1428 
ngx_ªsﬁvî_™_t
 *
™
;

1429 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1430 
ngx_ªsﬁvî_node_t
 *
∫
;

1432 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, 
NULL
, 
buf
, &buf[12], &buf[
n
]Ë!
NGX_OK
) {

1433 
övÆid_ö_addr_¨∑
;

1436 
addr
 = 0;

1437 
i
 = 12;

1439 
mask
 = 0; mask < 32; mask += 8) {

1440 
Àn
 = 
buf
[
i
++];

1442 
digô
 = 
	`ngx_©oi
(&
buf
[
i
], 
Àn
);

1443 i‡(
digô
 =
NGX_ERROR
 || digit > 255) {

1444 
övÆid_ö_addr_¨∑
;

1447 
addr
 +
digô
 << 
mask
;

1448 
i
 +
Àn
;

1451 i‡(
	`ngx_°rcmp
(&
buf
[
i
], "\7in-addr\4arpa") != 0) {

1452 
övÆid_ö_addr_¨∑
;

1457 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

1459 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

1460 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1462 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

1463 (
addr
 >> 8) & 0xff,áddr & 0xff);

1464 
Áûed
;

1467 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1469 i‡(
idít
 !
qidít
) {

1470 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1472 
idít
, (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

1473 (
addr
 >> 8Ë& 0xff,ádd∏& 0xff, 
qidít
);

1474 
Áûed
;

1477 i‡(
code
 =0 && 
«n
 == 0) {

1478 
code
 = 3;

1481 i‡(
code
) {

1482 
√xt
 = 
∫
->
waôög
;

1483 
∫
->
waôög
 = 
NULL
;

1485 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1487 
	`ngx_rbåì_dñëe
(&
r
->
addr_rbåì
, &
∫
->
node
);

1489 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1493 
√xt
) {

1494 
˘x
 = 
√xt
;

1495 
˘x
->
°©e
 = 
code
;

1496 
√xt
 = 
˘x
->next;

1498 
˘x
->
	`h™dÀr
(ctx);

1504 
i
 +("\7ö-addr\4¨∑"Ë+ (
ngx_ªsﬁvî_qs_t
);

1506 i‡(
i
 + 2 + (
ngx_ªsﬁvî_™_t
Ë> (
ngx_uöt_t
Ë
n
) {

1507 
sh‹t_ª•⁄£
;

1512 i‡(
buf
[
i
] != 0xc0 || buf[i + 1] != 0x0c) {

1513 
îr
 = "invalid in-addr.arpaÇame in DNSÑesponse";

1514 
övÆid
;

1517 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
 + 2];

1519 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1521 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1523 (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
,

1524 (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
, 
Àn
);

1526 
i
 +2 + (
ngx_ªsﬁvî_™_t
);

1528 i‡(
i
 + 
Àn
 > (
ngx_uöt_t
Ë
n
) {

1529 
sh‹t_ª•⁄£
;

1532 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, &buf[
i
], &buf[
n
]Ë!
NGX_OK
) {

1536 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvîán:%V", &
«me
);

1538 i‡(
«me
.
Àn
 !(
size_t
Ë
∫
->
∆í


1539 || 
	`ngx_°∫cmp
(
«me
.
d©a
, 
∫
->«me,Çame.
Àn
) != 0)

1541 i‡(
∫
->
∆í
) {

1542 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

1545 
∫
->
∆í
 = (
u_sh‹t
Ë
«me
.
Àn
;

1546 
∫
->
«me
 =Çame.
d©a
;

1548 
«me
.
d©a
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Çame.
Àn
);

1549 i‡(
«me
.
d©a
 =
NULL
) {

1550 
Áûed
;

1554 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1556 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ 
r
->valid;

1557 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1559 
	`ngx_queue_ö£π_hód
(&
r
->
addr_expúe_queue
, &
∫
->
queue
);

1561 
√xt
 = 
∫
->
waôög
;

1562 
∫
->
waôög
 = 
NULL
;

1566 
√xt
) {

1567 
˘x
 = 
√xt
;

1568 
˘x
->
°©e
 = 
NGX_OK
;

1569 
˘x
->
«me
 =Çame;

1570 
√xt
 = 
˘x
->next;

1572 
˘x
->
	`h™dÀr
(ctx);

1575 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1579 
övÆid_ö_addr_¨∑
:

1581 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1585 
sh‹t_ª•⁄£
:

1587 
îr
 = "short DNSÑesponse";

1589 
övÆid
:

1593 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1597 
Áûed
:

1602 
	}
}

1605 
ngx_ªsﬁvî_node_t
 *

1606 
	$ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
)

1608 
ngx_öt_t
 
rc
;

1609 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1610 
ngx_ªsﬁvî_node_t
 *
∫
;

1612 
node
 = 
r
->
«me_rbåì
.
roŸ
;

1613 
£¡öñ
 = 
r
->
«me_rbåì
.sentinel;

1615 
node
 !
£¡öñ
) {

1617 i‡(
hash
 < 
node
->
key
) {

1618 
node
 =Çode->
À·
;

1622 i‡(
hash
 > 
node
->
key
) {

1623 
node
 =Çode->
right
;

1629 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1631 
rc
 = 
	`ngx_memn2cmp
(
«me
->
d©a
, 
∫
->«me,Çame->
Àn
,Ñn->
∆í
);

1633 i‡(
rc
 == 0) {

1634  
∫
;

1637 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1642  
NULL
;

1643 
	}
}

1646 
ngx_ªsﬁvî_node_t
 *

1647 
	$ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
, 
ö_addr_t
 
addr
)

1649 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1651 
node
 = 
r
->
addr_rbåì
.
roŸ
;

1652 
£¡öñ
 = 
r
->
addr_rbåì
.sentinel;

1654 
node
 !
£¡öñ
) {

1656 i‡(
addr
 < 
node
->
key
) {

1657 
node
 =Çode->
À·
;

1661 i‡(
addr
 > 
node
->
key
) {

1662 
node
 =Çode->
right
;

1668  (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1673  
NULL
;

1674 
	}
}

1678 
	$ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1679 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1681 
ngx_rbåì_node_t
 **
p
;

1682 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

1686 i‡(
node
->
key
 < 
ãmp
->key) {

1688 
p
 = &
ãmp
->
À·
;

1690 } i‡(
node
->
key
 > 
ãmp
->key) {

1692 
p
 = &
ãmp
->
right
;

1696 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1697 
∫_ãmp
 = (
ngx_ªsﬁvî_node_t
 *Ë
ãmp
;

1699 
p
 = (
	`ngx_memn2cmp
(
∫
->
«me
, 
∫_ãmp
->«me,Ñn->
∆í
,Ñn_temp->nlen)

1700 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

1703 i‡(*
p
 =
£¡öñ
) {

1707 
ãmp
 = *
p
;

1710 *
p
 = 
node
;

1711 
node
->
∑ª¡
 = 
ãmp
;

1712 
node
->
À·
 = 
£¡öñ
;

1713 
node
->
right
 = 
£¡öñ
;

1714 
	`ngx_rbt_ªd
(
node
);

1715 
	}
}

1718 
ngx_öt_t


1719 
	$ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1721 
u_ch¨
 *
p
, *
s
;

1722 
size_t
 
Àn
, 
∆í
;

1723 
ngx_uöt_t
 
idít
;

1724 
ngx_ªsﬁvî_qs_t
 *
qs
;

1725 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

1727 
∆í
 = 
˘x
->
«me
.
Àn
 ? (1 + ctx->name.len + 1) : 1;

1729 
Àn
 = (
ngx_ªsﬁvî_quîy_t
Ë+ 
∆í
 + (
ngx_ªsﬁvî_qs_t
);

1731 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

1732 i‡(
p
 =
NULL
) {

1733  
NGX_ERROR
;

1736 
∫
->
qÀn
 = (
u_sh‹t
Ë
Àn
;

1737 
∫
->
quîy
 = 
p
;

1739 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
p
;

1741 
idít
 = 
	`ngx_øndom
();

1743 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
ªsﬁvî
->
log
, 0,

1744 "ªsﬁve: \"%V\" %i", &
˘x
->
«me
, 
idít
 & 0xffff);

1746 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

1747 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

1750 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

1753 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

1754 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

1755 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

1756 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

1758 
p
 +(
ngx_ªsﬁvî_quîy_t
Ë+ 
∆í
;

1760 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

1763 
qs
->
ty≥_hi
 = 0; qs->
ty≥_lo
 = (
u_ch¨
Ë
˘x
->
ty≥
;

1766 
qs
->
˛ass_hi
 = 0; qs->
˛ass_lo
 = 1;

1770 
Àn
 = 0;

1771 
p
--;

1772 *
p
-- = '\0';

1774 
s
 = 
˘x
->
«me
.
d©a
 + ctx->«me.
Àn
 - 1; s >= ctx->name.data; s--) {

1775 i‡(*
s
 != '.') {

1776 *
p
 = *
s
;

1777 
Àn
++;

1780 i‡(
Àn
 == 0) {

1781  
NGX_DECLINED
;

1784 *
p
 = (
u_ch¨
Ë
Àn
;

1785 
Àn
 = 0;

1788 
p
--;

1791 *
p
 = (
u_ch¨
Ë
Àn
;

1793  
NGX_OK
;

1794 
	}
}

1799 
ngx_öt_t


1800 
	$ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1802 
u_ch¨
 *
p
, *
d
;

1803 
size_t
 
Àn
;

1804 
ngx_öt_t
 
n
;

1805 
ngx_uöt_t
 
idít
;

1806 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

1808 
Àn
 = (
ngx_ªsﬁvî_quîy_t
)

1810 + (
ngx_ªsﬁvî_qs_t
);

1812 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

1813 i‡(
p
 =
NULL
) {

1814  
NGX_ERROR
;

1817 
∫
->
quîy
 = 
p
;

1818 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
p
;

1820 
idít
 = 
	`ngx_øndom
();

1822 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

1823 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

1826 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

1829 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

1830 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

1831 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

1832 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

1834 
p
 +(
ngx_ªsﬁvî_quîy_t
);

1836 
n
 = 0;Ç < 32;Ç += 8) {

1837 
d
 = 
	`ngx_•rötf
(&
p
[1], "%ud", (
˘x
->
addr
 >> 
n
) & 0xff);

1838 *
p
 = (
u_ch¨
Ë(
d
 - &p[1]);

1839 
p
 = 
d
;

1843 
	`ngx_mem˝y
(
p
, "\7in-addr\4arpa\0\0\14\0\1", 18);

1845 
∫
->
qÀn
 = (
u_sh‹t
)

1846 (
p
 + ("\7ö-addr\4¨∑"Ë+ (
ngx_ªsﬁvî_qs_t
)

1847 - 
∫
->
quîy
);

1849  
NGX_OK
;

1850 
	}
}

1853 
ngx_öt_t


1854 
	$ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
u_ch¨
 *
buf
, u_ch¨ *
§c
,

1855 
u_ch¨
 *
œ°
)

1857 *
îr
;

1858 
u_ch¨
 *
p
, *
d°
;

1859 
ssize_t
 
Àn
;

1860 
ngx_uöt_t
 
i
, 
n
;

1862 
p
 = 
§c
;

1863 
Àn
 = -1;

1870 
i
 = 0; i < 128; i++) {

1871 
n
 = *
p
++;

1873 i‡(
n
 == 0) {

1874 
d⁄e
;

1877 i‡(
n
 & 0xc0) {

1878 
n
 = (“ & 0x3fË<< 8Ë+ *
p
;

1879 
p
 = &
buf
[
n
];

1882 
Àn
 +1 + 
n
;

1883 
p
 = &p[
n
];

1886 i‡(
p
 >
œ°
) {

1887 
îr
 = "name is out ofÑesponse";

1888 
övÆid
;

1892 
îr
 = "compressionÖointersÜoop";

1894 
övÆid
:

1896 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1898  
NGX_ERROR
;

1900 
d⁄e
:

1902 i‡(
«me
 =
NULL
) {

1903  
NGX_OK
;

1906 i‡(
Àn
 == -1) {

1907 
«me
->
Àn
 = 0;

1908 
«me
->
d©a
 = 
NULL
;

1909  
NGX_OK
;

1912 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

1913 i‡(
d°
 =
NULL
) {

1914  
NGX_ERROR
;

1917 
«me
->
d©a
 = 
d°
;

1919 
n
 = *
§c
++;

1922 i‡(
n
 & 0xc0) {

1923 
n
 = (“ & 0x3fË<< 8Ë+ *
§c
;

1924 
§c
 = &
buf
[
n
];

1926 
n
 = *
§c
++;

1929 
	`ngx_mem˝y
(
d°
, 
§c
, 
n
);

1930 
d°
 +
n
;

1931 
§c
 +
n
;

1933 
n
 = *
§c
++;

1935 i‡(
n
 != 0) {

1936 *
d°
++ = '.';

1940 i‡(
n
 == 0) {

1941 
«me
->
Àn
 = 
d°
 -Çame->
d©a
;

1942  
NGX_OK
;

1945 
	}
}

1949 
	$ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
)

1951 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

1953 
˘x
 = 
ev
->
d©a
;

1955 
˘x
->
°©e
 = 
NGX_RESOLVE_TIMEDOUT
;

1957 
˘x
->
	`h™dÀr
(ctx);

1958 
	}
}

1962 
	$ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

1966 i‡(
∫
->
quîy
) {

1967 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

1970 i‡(
∫
->
«me
) {

1971 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
«me
);

1974 i‡(
∫
->
˙Àn
) {

1975 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

1978 i‡(
∫
->
«ddrs
 > 1) {

1979 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

1982 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
);

1985 
	}
}

1989 
	$ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

1991 
u_ch¨
 *
p
;

1995 
p
 = 
	`ngx_Æloc
(
size
, 
r
->
log
);

1999  
p
;

2000 
	}
}

2004 
	$ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2006 
u_ch¨
 *
p
;

2008 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2010 i‡(
p
) {

2011 
	`ngx_memzîo
(
p
, 
size
);

2014  
p
;

2015 
	}
}

2019 
	$ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2023 
	`ngx_‰ì
(
p
);

2026 
	}
}

2030 
	$ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2032 
	`ngx_‰ì
(
p
);

2033 
	}
}

2037 
	$ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
)

2039 *
d°
;

2041 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2043 i‡(
d°
 =
NULL
) {

2044  
d°
;

2047 
	`ngx_mem˝y
(
d°
, 
§c
, 
size
);

2049  
d°
;

2050 
	}
}

2054 
	$ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
)

2056 *
îr‹s
[] = {

2064 i‡(
îr
 > 0 &&Érr < 6) {

2065  
îr‹s
[
îr
 - 1];

2068 i‡(
îr
 =
NGX_RESOLVE_TIMEDOUT
) {

2073 
	}
}

2076 
u_ch¨
 *

2077 
	$ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

2079 
u_ch¨
 *
p
;

2080 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

2082 
p
 = 
buf
;

2084 i‡(
log
->
a˘i⁄
) {

2085 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

2086 
Àn
 -
p
 - 
buf
;

2089 
uc
 = 
log
->
d©a
;

2091 i‡(
uc
) {

2092 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñesﬁvî: %V", &
uc
->
£rvî
);

2095  
p
;

2096 
	}
}

2099 
ngx_öt_t


2100 
	$ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
)

2102 
rc
;

2103 
ngx_öt_t
 
evít
;

2104 
ngx_evít_t
 *
ªv
, *
wev
;

2105 
ngx_sockë_t
 
s
;

2106 
ngx_c⁄√˘i⁄_t
 *
c
;

2108 
s
 = 
	`ngx_sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

2110 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0, "UDP sockë %d", 
s
);

2112 i‡(
s
 == -1) {

2113 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2114 
ngx_sockë_n
 " failed");

2115  
NGX_ERROR
;

2118 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, &
uc
->
log
);

2120 i‡(
c
 =
NULL
) {

2121 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

2122 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2123 
ngx_˛o£_sockë_n
 "failed");

2126  
NGX_ERROR
;

2129 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

2130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2131 
ngx_n⁄blockög_n
 " failed");

2133 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

2135 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

2136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2137 
ngx_˛o£_sockë_n
 " failed");

2140  
NGX_ERROR
;

2143 
ªv
 = 
c
->
ªad
;

2144 
wev
 = 
c
->
wrôe
;

2146 
ªv
->
log
 = &
uc
->log;

2147 
wev
->
log
 = &
uc
->log;

2149 
uc
->
c⁄√˘i⁄
 = 
c
;

2151 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

2153 #i‡(
NGX_THREADS
)

2157 
ªv
->
lock
 = &
c
->lock;

2158 
wev
->
lock
 = &
c
->lock;

2159 
ªv
->
own_lock
 = &
c
->
lock
;

2160 
wev
->
own_lock
 = &
c
->
lock
;

2164 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0,

2165 "c⁄√˘Åÿ%V, fd:%d #%d", &
uc
->
£rvî
, 
s
, 
c
->
numbî
);

2167 
rc
 = 
	`c⁄√˘
(
s
, 
uc
->
sockaddr
, uc->
sockÀn
);

2171 i‡(
rc
 == -1) {

2172 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2175  
NGX_ERROR
;

2179 
wev
->
ªady
 = 1;

2181 i‡(
ngx_add_evít
) {

2183 
evít
 = (
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) ?

2184  
NGX_CLEAR_EVENT
:

2185  
NGX_LEVEL_EVENT
;

2188 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

2189  
NGX_ERROR
;

2195 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

2196  
NGX_ERROR
;

2200  
NGX_OK
;

2201 
	}
}

	@src/core/ngx_resolver.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_RESOLVER_H_INCLUDED_


13 
	#_NGX_RESOLVER_H_INCLUDED_


	)

16 
	#NGX_RESOLVE_A
 1

	)

17 
	#NGX_RESOLVE_CNAME
 5

	)

18 
	#NGX_RESOLVE_PTR
 12

	)

19 
	#NGX_RESOLVE_MX
 15

	)

20 
	#NGX_RESOLVE_TXT
 16

	)

21 
	#NGX_RESOLVE_DNAME
 39

	)

23 
	#NGX_RESOLVE_FORMERR
 1

	)

24 
	#NGX_RESOLVE_SERVFAIL
 2

	)

25 
	#NGX_RESOLVE_NXDOMAIN
 3

	)

26 
	#NGX_RESOLVE_NOTIMP
 4

	)

27 
	#NGX_RESOLVE_REFUSED
 5

	)

28 
	#NGX_RESOLVE_TIMEDOUT
 
NGX_ETIMEDOUT


	)

31 
	#NGX_NO_RESOLVER
 (*Ë-1

	)

33 
	#NGX_RESOLVER_MAX_RECURSION
 50

	)

37 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

38 
sockaddr
 *
	msockaddr
;

39 
sockÀn_t
 
	msockÀn
;

40 
ngx_°r_t
 
	m£rvî
;

41 
ngx_log_t
 
	mlog
;

42 } 
	tngx_udp_c⁄√˘i⁄_t
;

45 
ngx_ªsﬁvî_˘x_s
 
	tngx_ªsﬁvî_˘x_t
;

47 (*
	tngx_ªsﬁvî_h™dÀr_±
)(
	tngx_ªsﬁvî_˘x_t
 *
	t˘x
);

51 
ngx_rbåì_node_t
 
node
;

52 
ngx_queue_t
 
queue
;

55 
u_ch¨
 *
«me
;

57 
u_sh‹t
 
∆í
;

58 
u_sh‹t
 
qÀn
;

60 
u_ch¨
 *
quîy
;

63 
ö_addr_t
 
addr
;

64 
ö_addr_t
 *
addrs
;

65 
u_ch¨
 *
˙ame
;

66 } 
u
;

68 
u_sh‹t
 
«ddrs
;

69 
u_sh‹t
 
˙Àn
;

71 
time_t
 
expúe
;

72 
time_t
 
vÆid
;

74 
ngx_ªsﬁvî_˘x_t
 *
waôög
;

75 } 
	tngx_ªsﬁvî_node_t
;

80 
ngx_evít_t
 *
evít
;

84 
ngx_udp_c⁄√˘i⁄_t
 *
udp_c⁄√˘i⁄
;

86 
ngx_log_t
 *
log
;

89 
ngx_öt_t
 
idít
;

91 
ngx_rbåì_t
 
«me_rbåì
;

92 
ngx_rbåì_node_t
 
«me_£¡öñ
;

94 
ngx_rbåì_t
 
addr_rbåì
;

95 
ngx_rbåì_node_t
 
addr_£¡öñ
;

97 
ngx_queue_t
 
«me_ª£nd_queue
;

98 
ngx_queue_t
 
addr_ª£nd_queue
;

100 
ngx_queue_t
 
«me_expúe_queue
;

101 
ngx_queue_t
 
addr_expúe_queue
;

103 
time_t
 
ª£nd_timeout
;

104 
time_t
 
expúe
;

105 
time_t
 
vÆid
;

107 
ngx_uöt_t
 
log_Àvñ
;

108 } 
	tngx_ªsﬁvî_t
;

111 
	sngx_ªsﬁvî_˘x_s
 {

112 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

113 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

114 
ngx_udp_c⁄√˘i⁄_t
 *
udp_c⁄√˘i⁄
;

117 
ngx_öt_t
 
idít
;

119 
ngx_öt_t
 
°©e
;

120 
ngx_öt_t
 
ty≥
;

121 
ngx_°r_t
 
«me
;

123 
ngx_uöt_t
 
«ddrs
;

124 
ö_addr_t
 *
addrs
;

125 
ö_addr_t
 
addr
;

129 
ngx_ªsﬁvî_h™dÀr_±
 
h™dÀr
;

130 *
d©a
;

131 
ngx_m£c_t
 
timeout
;

133 
ngx_uöt_t
 
quick
;

134 
ngx_uöt_t
 
ªcursi⁄
;

135 
ngx_evít_t
 *
evít
;

139 
ngx_ªsﬁvî_t
 *
	`ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_addr_t
 *
addr
);

140 
ngx_ªsﬁvî_˘x_t
 *
	`ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
,

141 
ngx_ªsﬁvî_˘x_t
 *
ãmp
);

142 
ngx_öt_t
 
	`ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

143 
	`ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

144 
ngx_öt_t
 
	`ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

145 
	`ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

146 *
	`ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
);

	@src/core/ngx_sha1.h

8 #i‚de‡
_NGX_SHA1_H_INCLUDED_


9 
	#_NGX_SHA1_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_OPENSSL_SHA1_H
)

17 
	~<›ís¶/sha.h
>

19 
	~<sha.h
>

23 
SHA_CTX
 
	tngx_sha1_t
;

26 
	#ngx_sha1_öô
 
SHA1_Inô


	)

27 
	#ngx_sha1_upd©e
 
SHA1_Upd©e


	)

28 
	#ngx_sha1_föÆ
 
SHA1_FöÆ


	)

	@src/core/ngx_shmtx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_ATOMIC_OPS
)

15 
ngx_öt_t


16 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, *
addr
, 
u_ch¨
 *
«me
)

18 
mtx
->
lock
 = 
addr
;

20 i‡(
mtx
->
•ö
 =(
ngx_uöt_t
) -1) {

21  
NGX_OK
;

24 
mtx
->
•ö
 = 2048;

26 #i‡(
NGX_HAVE_POSIX_SEM
)

28 i‡(
	`£m_öô
(&
mtx
->
£m
, 1, 0) == -1) {

29 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

32 
mtx
->
£m≠h‹e
 = 1;

37  
NGX_OK
;

38 
	}
}

42 
	$ngx_shmtx_de°‹y
(
ngx_shmtx_t
 *
mtx
)

44 #i‡(
NGX_HAVE_POSIX_SEM
)

46 i‡(
mtx
->
£m≠h‹e
) {

47 i‡(
	`£m_de°roy
(&
mtx
->
£m
) == -1) {

48 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

54 
	}
}

57 
ngx_uöt_t


58 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

60 
ngx_©omic_uöt_t
 
vÆ
;

62 
vÆ
 = *
mtx
->
lock
;

64  ((
vÆ
 & 0x80000000) == 0

65 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
vÆ
, val | 0x80000000));

66 
	}
}

70 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

72 
ngx_uöt_t
 
i
, 
n
;

73 
ngx_©omic_uöt_t
 
vÆ
;

75 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtxÜock");

79 
vÆ
 = *
mtx
->
lock
;

81 i‡((
vÆ
 & 0x80000000) == 0

82 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
vÆ
, val | 0x80000000))

87 i‡(
ngx_n˝u
 > 1) {

89 
n
 = 1;Ç < 
mtx
->
•ö
;Ç <<= 1) {

91 
i
 = 0; i < 
n
; i++) {

92 
	`ngx_˝u_∑u£
();

95 
vÆ
 = *
mtx
->
lock
;

97 i‡((
vÆ
 & 0x80000000) == 0

98 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
vÆ
, val | 0x80000000))

105 #i‡(
NGX_HAVE_POSIX_SEM
)

107 i‡(
mtx
->
£m≠h‹e
) {

108 
vÆ
 = *
mtx
->
lock
;

110 i‡((
vÆ
 & 0x80000000)

111 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
vÆ
, val + 1))

113 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

114 "shmtx waô %XA", 
vÆ
);

116 
	`£m_waô
(&
mtx
->
£m
) == -1) {

117 
ngx_îr_t
 
îr
;

119 
îr
 = 
ngx_î∫o
;

121 i‡(
îr
 !
NGX_EINTR
) {

122 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

128 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

137 
	`ngx_sched_yõld
();

139 
	}
}

143 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

145 
ngx_©omic_uöt_t
 
vÆ
, 
ﬁd
, 
waô
;

147 i‡(
mtx
->
•ö
 !(
ngx_uöt_t
) -1) {

148 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtx unlock");

153 
ﬁd
 = *
mtx
->
lock
;

154 
waô
 = 
ﬁd
 & 0x7fffffff;

155 
vÆ
 = 
waô
 ? wait - 1 : 0;

157 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
ﬁd
, 
vÆ
)) {

162 #i‡(
NGX_HAVE_POSIX_SEM
)

164 i‡(
waô
 =0 || !
mtx
->
£m≠h‹e
) {

168 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

169 "shmtx wakê%XA", 
ﬁd
);

171 i‡(
	`£m_po°
(&
mtx
->
£m
) == -1) {

172 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

177 
	}
}

183 
ngx_öt_t


184 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, *
addr
, 
u_ch¨
 *
«me
)

186 i‡(
mtx
->
«me
) {

188 i‡(
	`ngx_°rcmp
(
«me
, 
mtx
->name) == 0) {

189 
mtx
->
«me
 =Çame;

190  
NGX_OK
;

193 
	`ngx_shmtx_de°‹y
(
mtx
);

196 
mtx
->
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

197 
NGX_FILE_DEFAULT_ACCESS
);

199 i‡(
mtx
->
fd
 =
NGX_INVALID_FILE
) {

200 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

201 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

202  
NGX_ERROR
;

205 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

206 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

207 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

210 
mtx
->
«me
 =Çame;

212  
NGX_OK
;

213 
	}
}

217 
	$ngx_shmtx_de°‹y
(
ngx_shmtx_t
 *
mtx
)

219 i‡(
	`ngx_˛o£_fûe
(
mtx
->
fd
Ë=
NGX_FILE_ERROR
) {

220 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

221 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
mtx
->
«me
);

223 
	}
}

226 
ngx_uöt_t


227 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

229 
ngx_îr_t
 
îr
;

231 
îr
 = 
	`ngx_åylock_fd
(
mtx
->
fd
);

233 i‡(
îr
 == 0) {

237 i‡(
îr
 =
NGX_EAGAIN
) {

241 #i‡
__osf__


243 i‡(
îr
 =
NGX_EACCESS
) {

249 
	`ngx_log_ab‹t
(
îr
, 
ngx_åylock_fd_n
 " %†Áûed", 
mtx
->
«me
);

252 
	}
}

256 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

258 
ngx_îr_t
 
îr
;

260 
îr
 = 
	`ngx_lock_fd
(
mtx
->
fd
);

262 i‡(
îr
 == 0) {

266 
	`ngx_log_ab‹t
(
îr
, 
ngx_lock_fd_n
 " %†Áûed", 
mtx
->
«me
);

267 
	}
}

271 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

273 
ngx_îr_t
 
îr
;

275 
îr
 = 
	`ngx_u∆ock_fd
(
mtx
->
fd
);

277 i‡(
îr
 == 0) {

281 
	`ngx_log_ab‹t
(
îr
, 
ngx_u∆ock_fd_n
 " %†Áûed", 
mtx
->
«me
);

282 
	}
}

	@src/core/ngx_shmtx.h

8 #i‚de‡
_NGX_SHMTX_H_INCLUDED_


9 
	#_NGX_SHMTX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 #i‡(
NGX_HAVE_ATOMIC_OPS
)

18 
ngx_©omic_t
 *
	mlock
;

19 #i‡(
NGX_HAVE_POSIX_SEM
)

20 
ngx_uöt_t
 
	m£m≠h‹e
;

21 
£m_t
 
	m£m
;

24 
ngx_fd_t
 
	mfd
;

25 
u_ch¨
 *
	m«me
;

27 
ngx_uöt_t
 
	m•ö
;

28 } 
	tngx_shmtx_t
;

31 
ngx_öt_t
 
ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, *
addr
, 
u_ch¨
 *
«me
);

32 
ngx_shmtx_de°‹y
(
ngx_shmtx_t
 *
mtx
);

33 
ngx_uöt_t
 
ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
);

34 
ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
);

35 
ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
);

	@src/core/ngx_slab.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
	#NGX_SLAB_PAGE_MASK
 3

	)

12 
	#NGX_SLAB_PAGE
 0

	)

13 
	#NGX_SLAB_BIG
 1

	)

14 
	#NGX_SLAB_EXACT
 2

	)

15 
	#NGX_SLAB_SMALL
 3

	)

17 #i‡(
NGX_PTR_SIZE
 == 4)

19 
	#NGX_SLAB_PAGE_FREE
 0

	)

20 
	#NGX_SLAB_PAGE_BUSY
 0xffffffff

	)

21 
	#NGX_SLAB_PAGE_START
 0x80000000

	)

23 
	#NGX_SLAB_SHIFT_MASK
 0x0000000f

	)

24 
	#NGX_SLAB_MAP_MASK
 0xffff0000

	)

25 
	#NGX_SLAB_MAP_SHIFT
 16

	)

27 
	#NGX_SLAB_BUSY
 0xffffffff

	)

31 
	#NGX_SLAB_PAGE_FREE
 0

	)

32 
	#NGX_SLAB_PAGE_BUSY
 0xffffffffffffffff

	)

33 
	#NGX_SLAB_PAGE_START
 0x8000000000000000

	)

35 
	#NGX_SLAB_SHIFT_MASK
 0x000000000000000f

	)

36 
	#NGX_SLAB_MAP_MASK
 0xffffffff00000000

	)

37 
	#NGX_SLAB_MAP_SHIFT
 32

	)

39 
	#NGX_SLAB_BUSY
 0xffffffffffffffff

	)

44 #i‡(
NGX_DEBUG_MALLOC
)

46 
	#ngx_¶ab_junk
(
p
, 
size
Ë
	`ngx_mem£t
’, 0xD0, size)

	)

50 #i‡(
NGX_FREEBSD
)

52 
	#ngx_¶ab_junk
(
p
, 
size
) \

53 i‡(
ngx_‰ìbsd_debug_mÆloc
Ë
	`ngx_mem£t
(
p
, 0xD0, 
size
)

	)

57 
	#ngx_¶ab_junk
(
p
, 
size
)

	)

63 
ngx_¶ab_∑ge_t
 *
ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
,

64 
ngx_uöt_t
 
∑ges
);

65 
ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

66 
ngx_uöt_t
 
∑ges
);

67 
ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
,

68 *
ãxt
);

71 
ngx_uöt_t
 
	gngx_¶ab_max_size
;

72 
ngx_uöt_t
 
	gngx_¶ab_exa˘_size
;

73 
ngx_uöt_t
 
	gngx_¶ab_exa˘_shi·
;

77 
	$ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
)

79 
u_ch¨
 *
p
;

80 
size_t
 
size
;

81 
ngx_öt_t
 
m
;

82 
ngx_uöt_t
 
i
, 
n
, 
∑ges
;

83 
ngx_¶ab_∑ge_t
 *
¶Ÿs
;

86 i‡(
ngx_¶ab_max_size
 == 0) {

87 
ngx_¶ab_max_size
 = 
ngx_∑gesize
 / 2;

88 
ngx_¶ab_exa˘_size
 = 
ngx_∑gesize
 / (8 * (
uöçå_t
));

89 
n
 = 
ngx_¶ab_exa˘_size
;Ç >>1; 
ngx_¶ab_exa˘_shi·
++) {

95 
poﬁ
->
mö_size
 = 1 <<Öoﬁ->
mö_shi·
;

97 
p
 = (
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
);

98 
size
 = 
poﬁ
->
íd
 - 
p
;

100 
	`ngx_¶ab_junk
(
p
, 
size
);

102 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

103 
n
 = 
ngx_∑gesize_shi·
 - 
poﬁ
->
mö_shi·
;

105 
i
 = 0; i < 
n
; i++) {

106 
¶Ÿs
[
i
].
¶ab
 = 0;

107 
¶Ÿs
[
i
].
√xt
 = &slots[i];

108 
¶Ÿs
[
i
].
¥ev
 = 0;

111 
p
 +
n
 * (
ngx_¶ab_∑ge_t
);

113 
∑ges
 = (
ngx_uöt_t
Ë(
size
 / (
ngx_∑gesize
 + (
ngx_¶ab_∑ge_t
)));

115 
	`ngx_memzîo
(
p
, 
∑ges
 * (
ngx_¶ab_∑ge_t
));

117 
poﬁ
->
∑ges
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

119 
poﬁ
->
‰ì
.
¥ev
 = 0;

120 
poﬁ
->
‰ì
.
√xt
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

122 
poﬁ
->
∑ges
->
¶ab
 =Öages;

123 
poﬁ
->
∑ges
->
√xt
 = &poﬁ->
‰ì
;

124 
poﬁ
->
∑ges
->
¥ev
 = (
uöçå_t
Ë&poﬁ->
‰ì
;

126 
poﬁ
->
°¨t
 = (
u_ch¨
 *)

127 
	`ngx_Æign_±r
((
uöçå_t
Ë
p
 + 
∑ges
 * (
ngx_¶ab_∑ge_t
),

128 
ngx_∑gesize
);

130 
m
 = 
∑ges
 - (
poﬁ
->
íd
 -Öoﬁ->
°¨t
Ë/ 
ngx_∑gesize
;

131 i‡(
m
 > 0) {

132 
∑ges
 -
m
;

133 
poﬁ
->
∑ges
->
¶ab
 =Öages;

136 
poﬁ
->
log_˘x
 = &poﬁ->
zîo
;

137 
poﬁ
->
zîo
 = '\0';

138 
	}
}

142 
	$ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

144 *
p
;

146 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

148 
p
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
size
);

150 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

152  
p
;

153 
	}
}

157 
	$ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

159 
size_t
 
s
;

160 
uöçå_t
 
p
, 
n
, 
m
, 
mask
, *
bôm≠
;

161 
ngx_uöt_t
 
i
, 
¶Ÿ
, 
shi·
, 
m≠
;

162 
ngx_¶ab_∑ge_t
 *
∑ge
, *
¥ev
, *
¶Ÿs
;

164 i‡(
size
 >
ngx_¶ab_max_size
) {

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

167 "¶abáŒoc: %uz", 
size
);

169 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, (
size
 + 
ngx_∑gesize
 - 1)

170 >> 
ngx_∑gesize_shi·
);

171 i‡(
∑ge
) {

172 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

173 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

176 
p
 = 0;

179 
d⁄e
;

182 i‡(
size
 > 
poﬁ
->
mö_size
) {

183 
shi·
 = 1;

184 
s
 = 
size
 - 1; s >>1; 
shi·
++) { }

185 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

188 
size
 = 
poﬁ
->
mö_size
;

189 
shi·
 = 
poﬁ
->
mö_shi·
;

190 
¶Ÿ
 = 0;

193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

194 "¶abáŒoc: %uz slŸ: %ui", 
size
, 
¶Ÿ
);

196 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

197 
∑ge
 = 
¶Ÿs
[
¶Ÿ
].
√xt
;

199 i‡(
∑ge
->
√xt
 !=Öage) {

201 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

204 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

205 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

207 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
))

208 / ((
uöçå_t
) * 8);

210 
n
 = 0;Ç < 
m≠
;Ç++) {

212 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

214 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

215 i‡((
bôm≠
[
n
] & 
m
)) {

219 
bôm≠
[
n
] |
m
;

221 
i
 = ((
n
 * (
uöçå_t
Ë* 8Ë<< 
shi·
)

222 + (
i
 << 
shi·
);

224 i‡(
bôm≠
[
n
] =
NGX_SLAB_BUSY
) {

225 
n
 =Ç + 1;Ç < 
m≠
;Ç++) {

226 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

227 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

229 
d⁄e
;

233 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

234 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

235 
¥ev
->
√xt
 = 
∑ge
->next;

236 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

238 
∑ge
->
√xt
 = 
NULL
;

239 
∑ge
->
¥ev
 = 
NGX_SLAB_SMALL
;

242 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

244 
d⁄e
;

249 
∑ge
 =Öage->
√xt
;

251 } 
∑ge
);

253 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

256 i‡(
∑ge
->
¶ab
 !
NGX_SLAB_BUSY
) {

258 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

259 i‡((
∑ge
->
¶ab
 & 
m
)) {

263 
∑ge
->
¶ab
 |
m
;

265 i‡(
∑ge
->
¶ab
 =
NGX_SLAB_BUSY
) {

266 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

267 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

268 
¥ev
->
√xt
 = 
∑ge
->next;

269 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

271 
∑ge
->
√xt
 = 
NULL
;

272 
∑ge
->
¥ev
 = 
NGX_SLAB_EXACT
;

275 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

276 
p
 +
i
 << 
shi·
;

277 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

279 
d⁄e
;

283 
∑ge
 =Öage->
√xt
;

285 } 
∑ge
);

289 
n
 = 
ngx_∑gesize_shi·
 - (
∑ge
->
¶ab
 & 
NGX_SLAB_SHIFT_MASK
);

290 
n
 = 1 <<Ç;

291 
n
 = ((
uöçå_t
) 1 <<Ç) - 1;

292 
mask
 = 
n
 << 
NGX_SLAB_MAP_SHIFT
;

295 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë!
mask
) {

297 
m
 = (
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
, 
i
 = 0;

298 
m
 & 
mask
;

299 
m
 <<1, 
i
++)

301 i‡((
∑ge
->
¶ab
 & 
m
)) {

305 
∑ge
->
¶ab
 |
m
;

307 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë=
mask
) {

308 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

309 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

310 
¥ev
->
√xt
 = 
∑ge
->next;

311 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

313 
∑ge
->
√xt
 = 
NULL
;

314 
∑ge
->
¥ev
 = 
NGX_SLAB_BIG
;

317 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

318 
p
 +
i
 << 
shi·
;

319 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

321 
d⁄e
;

325 
∑ge
 =Öage->
√xt
;

327 } 
∑ge
);

331 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, 1);

333 i‡(
∑ge
) {

334 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

335 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

336 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

338 
s
 = 1 << 
shi·
;

339 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ 8 / 
s
;

341 i‡(
n
 == 0) {

342 
n
 = 1;

345 
bôm≠
[0] = (2 << 
n
) - 1;

347 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

349 
i
 = 1; i < 
m≠
; i++) {

350 
bôm≠
[
i
] = 0;

353 
∑ge
->
¶ab
 = 
shi·
;

354 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

355 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

357 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

359 
p
 = ((
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
Ë+ 
s
 * 
n
;

360 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

362 
d⁄e
;

364 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

366 
∑ge
->
¶ab
 = 1;

367 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

368 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

370 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

372 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

373 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

375 
d⁄e
;

379 
∑ge
->
¶ab
 = ((
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
Ë| 
shi·
;

380 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

381 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

383 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

385 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

386 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

388 
d⁄e
;

392 
p
 = 0;

394 
d⁄e
:

396 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶abáŒoc: %p", 
p
);

398  (*Ë
p
;

399 
	}
}

403 
	$ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

405 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

407 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
p
);

409 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

410 
	}
}

414 
	$ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

416 
size_t
 
size
;

417 
uöçå_t
 
¶ab
, 
m
, *
bôm≠
;

418 
ngx_uöt_t
 
n
, 
ty≥
, 
¶Ÿ
, 
shi·
, 
m≠
;

419 
ngx_¶ab_∑ge_t
 *
¶Ÿs
, *
∑ge
;

421 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶ab fªe: %p", 
p
);

423 i‡((
u_ch¨
 *Ë
p
 < 
poﬁ
->
°¨t
 || (u_ch¨ *Ë∞>Öoﬁ->
íd
) {

424 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
, "ngx_slab_free(): outside ofÖool");

425 
Áû
;

428 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

429 
∑ge
 = &
poﬁ
->
∑ges
[
n
];

430 
¶ab
 = 
∑ge
->slab;

431 
ty≥
 = 
∑ge
->
¥ev
 & 
NGX_SLAB_PAGE_MASK
;

433 
ty≥
) {

435 
NGX_SLAB_SMALL
:

437 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

438 
size
 = 1 << 
shi·
;

440 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

441 
wr⁄g_chunk
;

444 
n
 = ((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
;

445 
m
 = (
uöçå_t
Ë1 << (
n
 & ((uintptr_t) * 8 - 1));

446 
n
 /((
uöçå_t
) * 8);

447 
bôm≠
 = (
uöçå_t
 *Ë((uöçå_tË
p
 & ~(
ngx_∑gesize
 - 1));

449 i‡(
bôm≠
[
n
] & 
m
) {

451 i‡(
∑ge
->
√xt
 =
NULL
) {

452 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

453 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

454 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

456 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

457 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

459 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

460 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_SMALL
;

463 
bôm≠
[
n
] &~
m
;

465 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)) / 8 / (1 << shift);

467 i‡(
n
 == 0) {

468 
n
 = 1;

471 i‡(
bôm≠
[0] & ~(((
uöçå_t
Ë1 << 
n
) - 1)) {

472 
d⁄e
;

475 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

477 
n
 = 1;Ç < 
m≠
;Ç++) {

478 i‡(
bôm≠
[
n
]) {

479 
d⁄e
;

483 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

485 
d⁄e
;

488 
chunk_Æªady_‰ì
;

490 
NGX_SLAB_EXACT
:

492 
m
 = (
uöçå_t
) 1 <<

493 (((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
ngx_¶ab_exa˘_shi·
);

494 
size
 = 
ngx_¶ab_exa˘_size
;

496 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

497 
wr⁄g_chunk
;

500 i‡(
¶ab
 & 
m
) {

501 i‡(
¶ab
 =
NGX_SLAB_BUSY
) {

502 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

503 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

504 
¶Ÿ
 = 
ngx_¶ab_exa˘_shi·
 - 
poﬁ
->
mö_shi·
;

506 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

507 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

509 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

510 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_EXACT
;

513 
∑ge
->
¶ab
 &~
m
;

515 i‡(
∑ge
->
¶ab
) {

516 
d⁄e
;

519 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

521 
d⁄e
;

524 
chunk_Æªady_‰ì
;

526 
NGX_SLAB_BIG
:

528 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

529 
size
 = 1 << 
shi·
;

531 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

532 
wr⁄g_chunk
;

535 
m
 = (
uöçå_t
Ë1 << ((((uöçå_tË
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
)

536 + 
NGX_SLAB_MAP_SHIFT
);

538 i‡(
¶ab
 & 
m
) {

540 i‡(
∑ge
->
√xt
 =
NULL
) {

541 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

542 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

543 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

545 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

546 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

548 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

549 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_BIG
;

552 
∑ge
->
¶ab
 &~
m
;

554 i‡(
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
) {

555 
d⁄e
;

558 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

560 
d⁄e
;

563 
chunk_Æªady_‰ì
;

565 
NGX_SLAB_PAGE
:

567 i‡((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)) {

568 
wr⁄g_chunk
;

571 i‡(
¶ab
 =
NGX_SLAB_PAGE_FREE
) {

572 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

574 
Áû
;

577 i‡(
¶ab
 =
NGX_SLAB_PAGE_BUSY
) {

578 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

580 
Áû
;

583 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

584 
size
 = 
¶ab
 & ~
NGX_SLAB_PAGE_START
;

586 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, &poﬁ->
∑ges
[
n
], 
size
);

588 
	`ngx_¶ab_junk
(
p
, 
size
 << 
ngx_∑gesize_shi·
);

597 
d⁄e
:

599 
	`ngx_¶ab_junk
(
p
, 
size
);

603 
wr⁄g_chunk
:

605 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

608 
Áû
;

610 
chunk_Æªady_‰ì
:

612 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

615 
Áû
:

618 
	}
}

621 
ngx_¶ab_∑ge_t
 *

622 
	$ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
∑ges
)

624 
ngx_¶ab_∑ge_t
 *
∑ge
, *
p
;

626 
∑ge
 = 
poﬁ
->
‰ì
.
√xt
;Öage != &pool->free;Öage =Öage->next) {

628 i‡(
∑ge
->
¶ab
 >
∑ges
) {

630 i‡(
∑ge
->
¶ab
 > 
∑ges
) {

631 
∑ge
[
∑ges
].
¶ab
 =Öage->slab -Öages;

632 
∑ge
[
∑ges
].
√xt
 =Öage->next;

633 
∑ge
[
∑ges
].
¥ev
 =Öage->prev;

635 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

636 
p
->
√xt
 = &
∑ge
[
∑ges
];

637 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë&∑ge[
∑ges
];

640 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

641 
p
->
√xt
 = 
∑ge
->next;

642 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

645 
∑ge
->
¶ab
 = 
∑ges
 | 
NGX_SLAB_PAGE_START
;

646 
∑ge
->
√xt
 = 
NULL
;

647 
∑ge
->
¥ev
 = 
NGX_SLAB_PAGE
;

649 i‡(--
∑ges
 == 0) {

650  
∑ge
;

653 
p
 = 
∑ge
 + 1; 
∑ges
;Öages--) {

654 
p
->
¶ab
 = 
NGX_SLAB_PAGE_BUSY
;

655 
p
->
√xt
 = 
NULL
;

656 
p
->
¥ev
 = 
NGX_SLAB_PAGE
;

657 
p
++;

660  
∑ge
;

664 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_CRIT
, "ngx_slab_alloc() failed:Ço memory");

666  
NULL
;

667 
	}
}

671 
	$ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

672 
ngx_uöt_t
 
∑ges
)

674 
ngx_¶ab_∑ge_t
 *
¥ev
;

676 
∑ge
->
¶ab
 = 
∑ges
--;

678 i‡(
∑ges
) {

679 
	`ngx_memzîo
(&
∑ge
[1], 
∑ges
 * (
ngx_¶ab_∑ge_t
));

682 i‡(
∑ge
->
√xt
) {

683 
¥ev
 = (
ngx_¶ab_∑ge_t
 *Ë(
∑ge
->¥ev & ~
NGX_SLAB_PAGE_MASK
);

684 
¥ev
->
√xt
 = 
∑ge
->next;

685 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

688 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
poﬁ
->
‰ì
;

689 
∑ge
->
√xt
 = 
poﬁ
->
‰ì
.next;

691 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
)Öage;

693 
poﬁ
->
‰ì
.
√xt
 = 
∑ge
;

694 
	}
}

698 
	$ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
, *
ãxt
)

700 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 0, "%s%s", 
ãxt
, 
poﬁ
->
log_˘x
);

701 
	}
}

	@src/core/ngx_slab.h

8 #i‚de‡
_NGX_SLAB_H_INCLUDED_


9 
	#_NGX_SLAB_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_¶ab_∑ge_s
 
	tngx_¶ab_∑ge_t
;

18 
	sngx_¶ab_∑ge_s
 {

19 
uöçå_t
 
	m¶ab
;

20 
ngx_¶ab_∑ge_t
 *
	m√xt
;

21 
uöçå_t
 
	m¥ev
;

26 
ngx_©omic_t
 
	mlock
;

28 
size_t
 
	mmö_size
;

29 
size_t
 
	mmö_shi·
;

31 
ngx_¶ab_∑ge_t
 *
	m∑ges
;

32 
ngx_¶ab_∑ge_t
 
	m‰ì
;

34 
u_ch¨
 *
	m°¨t
;

35 
u_ch¨
 *
	míd
;

37 
ngx_shmtx_t
 
	mmuãx
;

39 
u_ch¨
 *
	mlog_˘x
;

40 
u_ch¨
 
	mzîo
;

42 *
	md©a
;

43 *
	maddr
;

44 } 
	tngx_¶ab_poﬁ_t
;

47 
ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
);

48 *
ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

49 *
ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

50 
ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

51 
ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

	@src/core/ngx_spinlock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
)

16 #i‡(
NGX_HAVE_ATOMIC_OPS
)

18 
ngx_uöt_t
 
i
, 
n
;

22 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

26 i‡(
ngx_n˝u
 > 1) {

28 
n
 = 1;Ç < 
•ö
;Ç <<= 1) {

30 
i
 = 0; i < 
n
; i++) {

31 
	`ngx_˝u_∑u£
();

34 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

40 
	`ngx_sched_yõld
();

45 #i‡(
NGX_THREADS
)

47 #îr‹ 
	`ngx_•ölock
(Ë
‹
 
	`ngx_©omic_cmp_£t
(Ë
¨e
 
nŸ
 
deföed
 !

53 
	}
}

	@src/core/ngx_string.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 *
ngx_•rötf_num
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
,

13 
u_ch¨
 
zîo
, 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
);

14 
ngx_öt_t
 
ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

15 c⁄° 
u_ch¨
 *
basis
);

19 
	$ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

21 
n
) {

22 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

23 
d°
++;

24 
§c
++;

25 
n
--;

27 
	}
}

30 
u_ch¨
 *

31 
	$ngx_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

33 i‡(
n
 == 0) {

34  
d°
;

37 --
n
) {

38 *
d°
 = *
§c
;

40 i‡(*
d°
 == '\0') {

41  
d°
;

44 
d°
++;

45 
§c
++;

48 *
d°
 = '\0';

50  
d°
;

51 
	}
}

54 
u_ch¨
 *

55 
	$ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
)

57 
u_ch¨
 *
d°
;

59 
d°
 = 
	`ngx_≤Æloc
(
poﬁ
, 
§c
->
Àn
);

60 i‡(
d°
 =
NULL
) {

61  
NULL
;

64 
	`ngx_mem˝y
(
d°
, 
§c
->
d©a
, src->
Àn
);

66  
d°
;

67 
	}
}

102 
u_ch¨
 * 
ngx_cde˛


103 
	$ngx_•rötf
(
u_ch¨
 *
buf
, c⁄° *
fmt
, ...)

105 
u_ch¨
 *
p
;

106 
va_li°
 
¨gs
;

108 
	`va_°¨t
(
¨gs
, 
fmt
);

109 
p
 = 
	`ngx_v¶¥ötf
(
buf
, (*Ë-1, 
fmt
, 
¨gs
);

110 
	`va_íd
(
¨gs
);

112  
p
;

113 
	}
}

116 
u_ch¨
 * 
ngx_cde˛


117 
	$ngx_¢¥ötf
(
u_ch¨
 *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...)

119 
u_ch¨
 *
p
;

120 
va_li°
 
¨gs
;

122 
	`va_°¨t
(
¨gs
, 
fmt
);

123 
p
 = 
	`ngx_v¶¥ötf
(
buf
, bu‡+ 
max
, 
fmt
, 
¨gs
);

124 
	`va_íd
(
¨gs
);

126  
p
;

127 
	}
}

130 
u_ch¨
 * 
ngx_cde˛


131 
	$ngx_¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, ...)

133 
u_ch¨
 *
p
;

134 
va_li°
 
¨gs
;

136 
	`va_°¨t
(
¨gs
, 
fmt
);

137 
p
 = 
	`ngx_v¶¥ötf
(
buf
, 
œ°
, 
fmt
, 
¨gs
);

138 
	`va_íd
(
¨gs
);

140  
p
;

141 
	}
}

144 
u_ch¨
 *

145 
	$ngx_v¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

147 
u_ch¨
 *
p
, 
zîo
;

148 
d
;

149 
f
, 
sˇÀ
;

150 
size_t
 
Àn
, 
¶í
;

151 
öt64_t
 
i64
;

152 
uöt64_t
 
ui64
;

153 
ngx_m£c_t
 
ms
;

154 
ngx_uöt_t
 
width
, 
sign
, 
hex
, 
max_width
, 
‰ac_width
, 
n
;

155 
ngx_°r_t
 *
v
;

156 
ngx_v¨übÀ_vÆue_t
 *
vv
;

158 *
fmt
 && 
buf
 < 
œ°
) {

165 i‡(*
fmt
 == '%') {

167 
i64
 = 0;

168 
ui64
 = 0;

170 
zîo
 = (
u_ch¨
Ë((*++
fmt
 == '0') ? '0' : ' ');

171 
width
 = 0;

172 
sign
 = 1;

173 
hex
 = 0;

174 
max_width
 = 0;

175 
‰ac_width
 = 0;

176 
¶í
 = (
size_t
) -1;

178 *
fmt
 >= '0' && *fmt <= '9') {

179 
width
 = width * 10 + *
fmt
++ - '0';

184 *
fmt
) {

187 
sign
 = 0;

188 
fmt
++;

192 
max_width
 = 1;

193 
fmt
++;

197 
hex
 = 2;

198 
sign
 = 0;

199 
fmt
++;

203 
hex
 = 1;

204 
sign
 = 0;

205 
fmt
++;

209 
fmt
++;

211 *
fmt
 >= '0' && *fmt <= '9') {

212 
‰ac_width
 = føc_width * 10 + *
fmt
++ - '0';

218 
¶í
 = 
	`va_¨g
(
¨gs
, 
size_t
);

219 
fmt
++;

230 *
fmt
) {

233 
v
 = 
	`va_¨g
(
¨gs
, 
ngx_°r_t
 *);

235 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
v
->len);

236 
buf
 = 
	`ngx_˝ymem
(buf, 
v
->
d©a
, 
Àn
);

237 
fmt
++;

242 
vv
 = 
	`va_¨g
(
¨gs
, 
ngx_v¨übÀ_vÆue_t
 *);

244 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
vv
->len);

245 
buf
 = 
	`ngx_˝ymem
(buf, 
vv
->
d©a
, 
Àn
);

246 
fmt
++;

251 
p
 = 
	`va_¨g
(
¨gs
, 
u_ch¨
 *);

253 i‡(
¶í
 =(
size_t
) -1) {

254 *
p
 && 
buf
 < 
œ°
) {

255 *
buf
++ = *
p
++;

259 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
¶í
);

260 
buf
 = 
	`ngx_˝ymem
(buf, 
p
, 
Àn
);

263 
fmt
++;

268 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
off_t
);

269 
sign
 = 1;

273 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_pid_t
);

274 
sign
 = 1;

278 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
time_t
);

279 
sign
 = 1;

283 
ms
 = (
ngx_m£c_t
Ë
	`va_¨g
(
¨gs
,Çgx_msec_t);

284 i‡((
ngx_m£c_öt_t
Ë
ms
 == -1) {

285 
sign
 = 1;

286 
i64
 = -1;

288 
sign
 = 0;

289 
ui64
 = (
uöt64_t
Ë
ms
;

294 i‡(
sign
) {

295 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ssize_t
);

297 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
size_t
);

302 i‡(
sign
) {

303 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_öt_t
);

305 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_uöt_t
);

308 i‡(
max_width
) {

309 
width
 = 
NGX_INT_T_LEN
;

315 i‡(
sign
) {

316 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

318 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_öt
);

323 i‡(
sign
) {

324 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

326 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_l⁄g
);

331 i‡(
sign
) {

332 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
öt32_t
);

334 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
uöt32_t
);

339 i‡(
sign
) {

340 
i64
 = 
	`va_¨g
(
¨gs
, 
öt64_t
);

342 
ui64
 = 
	`va_¨g
(
¨gs
, 
uöt64_t
);

347 i‡(
sign
) {

348 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_öt_t
);

350 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_uöt_t
);

353 i‡(
max_width
) {

354 
width
 = 
NGX_ATOMIC_T_LEN
;

360 
f
 = 
	`va_¨g
(
¨gs
, );

362 i‡(
f
 < 0) {

363 *
buf
++ = '-';

364 
f
 = -f;

367 
ui64
 = (
öt64_t
Ë
f
;

369 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 0, 
width
);

371 i‡(
‰ac_width
) {

373 i‡(
buf
 < 
œ°
) {

374 *
buf
++ = '.';

377 
sˇÀ
 = 1.0;

379 
n
 = 
‰ac_width
;Ç;Ç--) {

380 
sˇÀ
 *= 10.0;

387 
ui64
 = (
uöt64_t
Ë((
f
 - (
öt64_t
Ëui64Ë* 
sˇÀ
 + 0.5);

389 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, '0', 0, 
‰ac_width
);

392 
fmt
++;

396 #i‡!(
NGX_WIN32
)

398 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
æim_t
);

399 
sign
 = 1;

404 
ui64
 = (
uöçå_t
Ë
	`va_¨g
(
¨gs
, *);

405 
hex
 = 2;

406 
sign
 = 0;

407 
zîo
 = '0';

408 
width
 = 
NGX_PTR_SIZE
 * 2;

412 
d
 = 
	`va_¨g
(
¨gs
, );

413 *
buf
++ = (
u_ch¨
Ë(
d
 & 0xff);

414 
fmt
++;

419 *
buf
++ = '\0';

420 
fmt
++;

425 #i‡(
NGX_WIN32
)

426 *
buf
++ = 
CR
;

428 *
buf
++ = 
LF
;

429 
fmt
++;

434 *
buf
++ = '%';

435 
fmt
++;

440 *
buf
++ = *
fmt
++;

445 i‡(
sign
) {

446 i‡(
i64
 < 0) {

447 *
buf
++ = '-';

448 
ui64
 = (
uöt64_t
Ë-
i64
;

451 
ui64
 = (
uöt64_t
Ë
i64
;

455 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 
hex
, 
width
);

457 
fmt
++;

460 *
buf
++ = *
fmt
++;

464  
buf
;

465 
	}
}

468 
u_ch¨
 *

469 
	$ngx_•rötf_num
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
, u_ch¨ 
zîo
,

470 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
)

472 
u_ch¨
 *
p
, 
ãmp
[
NGX_INT64_LEN
 + 1];

477 
size_t
 
Àn
;

478 
uöt32_t
 
ui32
;

479 
u_ch¨
 
hex
[] = "0123456789abcdef";

480 
u_ch¨
 
HEX
[] = "0123456789ABCDEF";

482 
p
 = 
ãmp
 + 
NGX_INT64_LEN
;

484 i‡(
hexadecimÆ
 == 0) {

486 i‡(
ui64
 <
NGX_MAX_UINT32_VALUE
) {

503 
ui32
 = (
uöt32_t
Ë
ui64
;

506 *--
p
 = (
u_ch¨
Ë(
ui32
 % 10 + '0');

507 } 
ui32
 /= 10);

511 *--
p
 = (
u_ch¨
Ë(
ui64
 % 10 + '0');

512 } 
ui64
 /= 10);

515 } i‡(
hexadecimÆ
 == 1) {

520 *--
p
 = 
hex
[(
uöt32_t
Ë(
ui64
 & 0xf)];

522 } 
ui64
 >>= 4);

529 *--
p
 = 
HEX
[(
uöt32_t
Ë(
ui64
 & 0xf)];

531 } 
ui64
 >>= 4);

536 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

538 
Àn
++ < 
width
 && 
buf
 < 
œ°
) {

539 *
buf
++ = 
zîo
;

544 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

546 i‡(
buf
 + 
Àn
 > 
œ°
) {

547 
Àn
 = 
œ°
 - 
buf
;

550  
	`ngx_˝ymem
(
buf
, 
p
, 
Àn
);

551 
	}
}

561 
ngx_öt_t


562 
	$ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

564 
ngx_uöt_t
 
c1
, 
c2
;

567 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

568 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

570 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

571 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

573 i‡(
c1
 =
c2
) {

575 i‡(
c1
) {

582  
c1
 - 
c2
;

584 
	}
}

587 
ngx_öt_t


588 
	$ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

590 
ngx_uöt_t
 
c1
, 
c2
;

592 
n
) {

593 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

594 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

596 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

597 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

599 i‡(
c1
 =
c2
) {

601 i‡(
c1
) {

602 
n
--;

609  
c1
 - 
c2
;

613 
	}
}

616 
u_ch¨
 *

617 
	$ngx_°∫°r
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
Àn
)

619 
u_ch¨
 
c1
, 
c2
;

620 
size_t
 
n
;

622 
c2
 = *(
u_ch¨
 *Ë
s2
++;

624 
n
 = 
	`ngx_°æí
(
s2
);

628 i‡(
Àn
-- == 0) {

629  
NULL
;

632 
c1
 = *
s1
++;

634 i‡(
c1
 == 0) {

635  
NULL
;

638 } 
c1
 !
c2
);

640 i‡(
n
 > 
Àn
) {

641  
NULL
;

644 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

646  --
s1
;

647 
	}
}

656 
u_ch¨
 *

657 
	$ngx_°r°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

659 
u_ch¨
 
c1
, 
c2
;

661 
c2
 = *(
u_ch¨
 *Ë
s2
++;

665 
c1
 = *
s1
++;

667 i‡(
c1
 == 0) {

668  
NULL
;

671 } 
c1
 !
c2
);

673 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

675  --
s1
;

676 
	}
}

679 
u_ch¨
 *

680 
	$ngx_°rˇ£°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

682 
ngx_uöt_t
 
c1
, 
c2
;

684 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

685 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

689 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

691 i‡(
c1
 == 0) {

692  
NULL
;

695 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

697 } 
c1
 !
c2
);

699 } 
	`ngx_°∫ˇ£cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

701  --
s1
;

702 
	}
}

711 
u_ch¨
 *

712 
	$ngx_°æˇ£°∫
(
u_ch¨
 *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
)

714 
ngx_uöt_t
 
c1
, 
c2
;

716 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

717 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

718 
œ°
 -
n
;

722 i‡(
s1
 >
œ°
) {

723  
NULL
;

726 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

728 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

730 } 
c1
 !
c2
);

732 } 
	`ngx_°∫ˇ£cmp
(
s1
, 
s2
, 
n
) != 0);

734  --
s1
;

735 
	}
}

738 
ngx_öt_t


739 
	$ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

741 i‡(
n
 == 0) {

745 
n
--;

748 i‡(
s1
[
n
] !
s2
[n]) {

749  
s1
[
n
] - 
s2
[n];

752 i‡(
n
 == 0) {

756 
n
--;

758 
	}
}

761 
ngx_öt_t


762 
	$ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

764 
u_ch¨
 
c1
, 
c2
;

766 i‡(
n
 == 0) {

770 
n
--;

773 
c1
 = 
s1
[
n
];

774 i‡(
c1
 >= 'a' && c1 <= 'z') {

775 
c1
 -= 'a' - 'A';

778 
c2
 = 
s2
[
n
];

779 i‡(
c2
 >= 'a' && c2 <= 'z') {

780 
c2
 -= 'a' - 'A';

783 i‡(
c1
 !
c2
) {

784  
c1
 - 
c2
;

787 i‡(
n
 == 0) {

791 
n
--;

793 
	}
}

796 
ngx_öt_t


797 
	$ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
)

799 
size_t
 
n
;

800 
ngx_öt_t
 
m
, 
z
;

802 i‡(
n1
 <
n2
) {

803 
n
 = 
n1
;

804 
z
 = -1;

807 
n
 = 
n2
;

808 
z
 = 1;

811 
m
 = 
	`ngx_memcmp
(
s1
, 
s2
, 
n
);

813 i‡(
m
 || 
n1
 =
n2
) {

814  
m
;

817  
z
;

818 
	}
}

821 
ngx_öt_t


822 
	$ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

824 
ngx_uöt_t
 
c1
, 
c2
;

827 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

828 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

830 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

831 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

833 i‡(
c1
 =
c2
) {

835 i‡(
c1
) {

844 
c1
 = (c1 == '.') ? ' ' : c1;

845 
c2
 = (c2 == '.') ? ' ' : c2;

847  
c1
 - 
c2
;

849 
	}
}

852 
ngx_öt_t


853 
	$ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

855 
ngx_öt_t
 
vÆue
;

857 i‡(
n
 == 0) {

858  
NGX_ERROR
;

861 
vÆue
 = 0; 
n
--; 
löe
++) {

862 i‡(*
löe
 < '0' || *line > '9') {

863  
NGX_ERROR
;

866 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

869 i‡(
vÆue
 < 0) {

870  
NGX_ERROR
;

873  
vÆue
;

875 
	}
}

880 
ngx_öt_t


881 
	$ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
)

883 
ngx_öt_t
 
vÆue
;

884 
ngx_uöt_t
 
dŸ
;

886 i‡(
n
 == 0) {

887  
NGX_ERROR
;

890 
dŸ
 = 0;

892 
vÆue
 = 0; 
n
--; 
löe
++) {

894 i‡(
poöt
 == 0) {

895  
NGX_ERROR
;

898 i‡(*
löe
 == '.') {

899 i‡(
dŸ
) {

900  
NGX_ERROR
;

903 
dŸ
 = 1;

907 i‡(*
löe
 < '0' || *line > '9') {

908  
NGX_ERROR
;

911 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

912 
poöt
 -
dŸ
;

915 
poöt
--) {

916 
vÆue
 = value * 10;

919 i‡(
vÆue
 < 0) {

920  
NGX_ERROR
;

923  
vÆue
;

925 
	}
}

928 
ssize_t


929 
	$ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
)

931 
ssize_t
 
vÆue
;

933 i‡(
n
 == 0) {

934  
NGX_ERROR
;

937 
vÆue
 = 0; 
n
--; 
löe
++) {

938 i‡(*
löe
 < '0' || *line > '9') {

939  
NGX_ERROR
;

942 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

945 i‡(
vÆue
 < 0) {

946  
NGX_ERROR
;

949  
vÆue
;

951 
	}
}

954 
off_t


955 
	$ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
)

957 
off_t
 
vÆue
;

959 i‡(
n
 == 0) {

960  
NGX_ERROR
;

963 
vÆue
 = 0; 
n
--; 
löe
++) {

964 i‡(*
löe
 < '0' || *line > '9') {

965  
NGX_ERROR
;

968 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

971 i‡(
vÆue
 < 0) {

972  
NGX_ERROR
;

975  
vÆue
;

977 
	}
}

980 
time_t


981 
	$ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
)

983 
time_t
 
vÆue
;

985 i‡(
n
 == 0) {

986  
NGX_ERROR
;

989 
vÆue
 = 0; 
n
--; 
löe
++) {

990 i‡(*
löe
 < '0' || *line > '9') {

991  
NGX_ERROR
;

994 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

997 i‡(
vÆue
 < 0) {

998  
NGX_ERROR
;

1001  
vÆue
;

1003 
	}
}

1006 
ngx_öt_t


1007 
	$ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1009 
u_ch¨
 
c
, 
ch
;

1010 
ngx_öt_t
 
vÆue
;

1012 i‡(
n
 == 0) {

1013  
NGX_ERROR
;

1016 
vÆue
 = 0; 
n
--; 
löe
++) {

1017 
ch
 = *
löe
;

1019 i‡(
ch
 >= '0' && ch <= '9') {

1020 
vÆue
 = vÆuê* 16 + (
ch
 - '0');

1024 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1026 i‡(
c
 >= 'a' && c <= 'f') {

1027 
vÆue
 = vÆuê* 16 + (
c
 - 'a' + 10);

1031  
NGX_ERROR
;

1034 i‡(
vÆue
 < 0) {

1035  
NGX_ERROR
;

1038  
vÆue
;

1040 
	}
}

1043 
u_ch¨
 *

1044 
	$ngx_hex_dump
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

1046 
u_ch¨
 
hex
[] = "0123456789abcdef";

1048 
Àn
--) {

1049 *
d°
++ = 
hex
[*
§c
 >> 4];

1050 *
d°
++ = 
hex
[*
§c
++ & 0xf];

1053  
d°
;

1054 
	}
}

1058 
	$ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1060 
u_ch¨
 *
d
, *
s
;

1061 
size_t
 
Àn
;

1062 
u_ch¨
 
basis64
[] =

1065 
Àn
 = 
§c
->len;

1066 
s
 = 
§c
->
d©a
;

1067 
d
 = 
d°
->
d©a
;

1069 
Àn
 > 2) {

1070 *
d
++ = 
basis64
[(
s
[0] >> 2) & 0x3f];

1071 *
d
++ = 
basis64
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1072 *
d
++ = 
basis64
[((
s
[1] & 0x0f) << 2) | (s[2] >> 6)];

1073 *
d
++ = 
basis64
[
s
[2] & 0x3f];

1075 
s
 += 3;

1076 
Àn
 -= 3;

1079 i‡(
Àn
) {

1080 *
d
++ = 
basis64
[(
s
[0] >> 2) & 0x3f];

1082 i‡(
Àn
 == 1) {

1083 *
d
++ = 
basis64
[(
s
[0] & 3) << 4];

1084 *
d
++ = '=';

1087 *
d
++ = 
basis64
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1088 *
d
++ = 
basis64
[(
s
[1] & 0x0f) << 2];

1091 *
d
++ = '=';

1094 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1095 
	}
}

1098 
ngx_öt_t


1099 
	$ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1101 
u_ch¨
 
basis64
[] = {

1121  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1122 
	}
}

1125 
ngx_öt_t


1126 
	$ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1128 
u_ch¨
 
basis64
[] = {

1148  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1149 
	}
}

1152 
ngx_öt_t


1153 
	$ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
)

1155 
size_t
 
Àn
;

1156 
u_ch¨
 *
d
, *
s
;

1158 
Àn
 = 0;Üí < 
§c
->len;Üen++) {

1159 i‡(
§c
->
d©a
[
Àn
] == '=') {

1163 i‡(
basis
[
§c
->
d©a
[
Àn
]] == 77) {

1164  
NGX_ERROR
;

1168 i‡(
Àn
 % 4 == 1) {

1169  
NGX_ERROR
;

1172 
s
 = 
§c
->
d©a
;

1173 
d
 = 
d°
->
d©a
;

1175 
Àn
 > 3) {

1176 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1177 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1178 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[2]] << 6 | basis[s[3]]);

1180 
s
 += 4;

1181 
Àn
 -= 4;

1184 i‡(
Àn
 > 1) {

1185 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1188 i‡(
Àn
 > 2) {

1189 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1192 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1194  
NGX_OK
;

1195 
	}
}

1207 
uöt32_t


1208 
	$ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
)

1210 
size_t
 
Àn
;

1211 
uöt32_t
 
u
, 
i
, 
vÆid
;

1213 
u
 = **
p
;

1215 i‡(
u
 >= 0xf0) {

1217 
u
 &= 0x07;

1218 
vÆid
 = 0xffff;

1219 
Àn
 = 3;

1221 } i‡(
u
 >= 0xe0) {

1223 
u
 &= 0x0f;

1224 
vÆid
 = 0x7ff;

1225 
Àn
 = 2;

1227 } i‡(
u
 >= 0xc2) {

1229 
u
 &= 0x1f;

1230 
vÆid
 = 0x7f;

1231 
Àn
 = 1;

1234 (*
p
)++;

1238 i‡(
n
 - 1 < 
Àn
) {

1242 (*
p
)++;

1244 
Àn
) {

1245 
i
 = *(*
p
)++;

1247 i‡(
i
 < 0x80) {

1251 
u
 = (u << 6Ë| (
i
 & 0x3f);

1253 
Àn
--;

1256 i‡(
u
 > 
vÆid
) {

1257  
u
;

1261 
	}
}

1264 
size_t


1265 
	$ngx_utf8_Àngth
(
u_ch¨
 *
p
, 
size_t
 
n
)

1267 
u_ch¨
 
c
, *
œ°
;

1268 
size_t
 
Àn
;

1270 
œ°
 = 
p
 + 
n
;

1272 
Àn
 = 0; 
p
 < 
œ°
;Üen++) {

1274 
c
 = *
p
;

1276 i‡(
c
 < 0x80) {

1277 
p
++;

1281 i‡(
	`ngx_utf8_decode
(&
p
, 
n
) > 0x10ffff) {

1283  
n
;

1287  
Àn
;

1288 
	}
}

1291 
u_ch¨
 *

1292 
	$ngx_utf8_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
)

1294 
u_ch¨
 
c
, *
√xt
;

1296 i‡(
n
 == 0) {

1297  
d°
;

1300 --
n
) {

1302 
c
 = *
§c
;

1303 *
d°
 = 
c
;

1305 i‡(
c
 < 0x80) {

1307 i‡(
c
 != '\0') {

1308 
d°
++;

1309 
§c
++;

1310 
Àn
--;

1315  
d°
;

1318 
√xt
 = 
§c
;

1320 i‡(
	`ngx_utf8_decode
(&
√xt
, 
Àn
) > 0x10ffff) {

1325 
§c
 < 
√xt
) {

1326 *
d°
++ = *
§c
++;

1327 
Àn
--;

1331 *
d°
 = '\0';

1333  
d°
;

1334 
	}
}

1337 
uöçå_t


1338 
	$ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1340 
ngx_uöt_t
 
n
;

1341 
uöt32_t
 *
esˇ≥
;

1342 
u_ch¨
 
hex
[] = "0123456789abcdef";

1346 
uöt32_t
 
uri
[] = {

1366 
uöt32_t
 
¨gs
[] = {

1386 
uöt32_t
 
uri_comp⁄ít
[] = {

1406 
uöt32_t
 
html
[] = {

1426 
uöt32_t
 
ª‰esh
[] = {

1446 
uöt32_t
 
memˇched
[] = {

1466 
uöt32_t
 *
m≠
[] =

1467 { 
uri
, 
¨gs
, 
uri_comp⁄ít
, 
html
, 
ª‰esh
, 
memˇched
, memcached };

1470 
esˇ≥
 = 
m≠
[
ty≥
];

1472 i‡(
d°
 =
NULL
) {

1476 
n
 = 0;

1478 
size
) {

1479 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1480 
n
++;

1482 
§c
++;

1483 
size
--;

1486  (
uöçå_t
Ë
n
;

1489 
size
) {

1490 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1491 *
d°
++ = '%';

1492 *
d°
++ = 
hex
[*
§c
 >> 4];

1493 *
d°
++ = 
hex
[*
§c
 & 0xf];

1494 
§c
++;

1497 *
d°
++ = *
§c
++;

1499 
size
--;

1502  (
uöçå_t
Ë
d°
;

1503 
	}
}

1507 
	$ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1509 
u_ch¨
 *
d
, *
s
, 
ch
, 
c
, 
decoded
;

1511 
sw_usuÆ
 = 0,

1512 
sw_quŸed
,

1513 
sw_quŸed_£c⁄d


1514 } 
°©e
;

1516 
d
 = *
d°
;

1517 
s
 = *
§c
;

1519 
°©e
 = 0;

1520 
decoded
 = 0;

1522 
size
--) {

1524 
ch
 = *
s
++;

1526 
°©e
) {

1527 
sw_usuÆ
:

1528 i‡(
ch
 == '?'

1529 && (
ty≥
 & (
NGX_UNESCAPE_URI
|
NGX_UNESCAPE_REDIRECT
)))

1531 *
d
++ = 
ch
;

1532 
d⁄e
;

1535 i‡(
ch
 == '%') {

1536 
°©e
 = 
sw_quŸed
;

1540 *
d
++ = 
ch
;

1543 
sw_quŸed
:

1545 i‡(
ch
 >= '0' && ch <= '9') {

1546 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1547 
°©e
 = 
sw_quŸed_£c⁄d
;

1551 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1552 i‡(
c
 >= 'a' && c <= 'f') {

1553 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1554 
°©e
 = 
sw_quŸed_£c⁄d
;

1560 
°©e
 = 
sw_usuÆ
;

1562 *
d
++ = 
ch
;

1566 
sw_quŸed_£c⁄d
:

1568 
°©e
 = 
sw_usuÆ
;

1570 i‡(
ch
 >= '0' && ch <= '9') {

1571 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1573 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1574 i‡(
ch
 > '%' && ch < 0x7f) {

1575 *
d
++ = 
ch
;

1579 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1584 *
d
++ = 
ch
;

1589 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1590 i‡(
c
 >= 'a' && c <= 'f') {

1591 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1593 i‡(
ty≥
 & 
NGX_UNESCAPE_URI
) {

1594 i‡(
ch
 == '?') {

1595 *
d
++ = 
ch
;

1596 
d⁄e
;

1599 *
d
++ = 
ch
;

1603 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1604 i‡(
ch
 == '?') {

1605 *
d
++ = 
ch
;

1606 
d⁄e
;

1609 i‡(
ch
 > '%' && ch < 0x7f) {

1610 *
d
++ = 
ch
;

1614 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1618 *
d
++ = 
ch
;

1629 
d⁄e
:

1631 *
d°
 = 
d
;

1632 *
§c
 = 
s
;

1633 
	}
}

1636 
uöçå_t


1637 
	$ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

1639 
u_ch¨
 
ch
;

1640 
ngx_uöt_t
 
Àn
;

1642 i‡(
d°
 =
NULL
) {

1644 
Àn
 = 0;

1646 
size
) {

1647 *
§c
++) {

1650 
Àn
 += ("&lt;") - 2;

1654 
Àn
 += ("&gt;") - 2;

1658 
Àn
 += ("&amp;") - 2;

1662 
Àn
 += ("&quot;") - 2;

1668 
size
--;

1671  (
uöçå_t
Ë
Àn
;

1674 
size
) {

1675 
ch
 = *
§c
++;

1677 
ch
) {

1680 *
d°
++ = '&'; *dst++ = 'l'; *dst++ = 't'; *dst++ = ';';

1684 *
d°
++ = '&'; *dst++ = 'g'; *dst++ = 't'; *dst++ = ';';

1688 *
d°
++ = '&'; *dst++ = 'a'; *dst++ = 'm'; *dst++ = 'p';

1689 *
d°
++ = ';';

1693 *
d°
++ = '&'; *dst++ = 'q'; *dst++ = 'u'; *dst++ = 'o';

1694 *
d°
++ = 't'; *dst++ = ';';

1698 *
d°
++ = 
ch
;

1701 
size
--;

1704  (
uöçå_t
Ë
d°
;

1705 
	}
}

1709 
	$ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1710 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1712 
ngx_°r_node_t
 *
n
, *
t
;

1713 
ngx_rbåì_node_t
 **
p
;

1717 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1718 
t
 = (
ngx_°r_node_t
 *Ë
ãmp
;

1720 i‡(
node
->
key
 !
ãmp
->key) {

1722 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

1724 } i‡(
n
->
°r
.
Àn
 !
t
->str.len) {

1726 
p
 = (
n
->
°r
.
Àn
 < 
t
->°r.ÀnË? &
ãmp
->
À·
 : &ãmp->
right
;

1729 
p
 = (
	`ngx_memcmp
(
n
->
°r
.
d©a
, 
t
->°r.d©a,Ç->°r.
Àn
) < 0)

1730 ? &
ãmp
->
À·
 : &ãmp->
right
;

1733 i‡(*
p
 =
£¡öñ
) {

1737 
ãmp
 = *
p
;

1740 *
p
 = 
node
;

1741 
node
->
∑ª¡
 = 
ãmp
;

1742 
node
->
À·
 = 
£¡öñ
;

1743 
node
->
right
 = 
£¡öñ
;

1744 
	`ngx_rbt_ªd
(
node
);

1745 
	}
}

1748 
ngx_°r_node_t
 *

1749 
	$ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
vÆ
, 
uöt32_t
 
hash
)

1751 
ngx_öt_t
 
rc
;

1752 
ngx_°r_node_t
 *
n
;

1753 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1755 
node
 = 
rbåì
->
roŸ
;

1756 
£¡öñ
 = 
rbåì
->sentinel;

1758 
node
 !
£¡öñ
) {

1760 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1762 i‡(
hash
 !
node
->
key
) {

1763 
node
 = (
hash
 <Çode->
key
Ë?Çode->
À·
 :Çode->
right
;

1767 i‡(
vÆ
->
Àn
 !
n
->
°r
.len) {

1768 
node
 = (
vÆ
->
Àn
 < 
n
->
°r
.ÀnË?Çode->
À·
 :Çode->
right
;

1772 
rc
 = 
	`ngx_memcmp
(
vÆ
->
d©a
, 
n
->
°r
.d©a, vÆ->
Àn
);

1774 i‡(
rc
 < 0) {

1775 
node
 =Çode->
À·
;

1779 i‡(
rc
 > 0) {

1780 
node
 =Çode->
right
;

1784  
n
;

1787  
NULL
;

1788 
	}
}

1794 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

1795 
	$ngx_öt_t
 (*
cmp
)(const *, const *))

1797 
u_ch¨
 *
p1
, *
p2
, *
p
;

1799 
p
 = 
	`ngx_Æloc
(
size
, 
ngx_cy˛e
->
log
);

1800 i‡(
p
 =
NULL
) {

1804 
p1
 = (
u_ch¨
 *Ë
ba£
 + 
size
;

1805 
p1
 < (
u_ch¨
 *Ë
ba£
 + 
n
 * 
size
;

1806 
p1
 +
size
)

1808 
	`ngx_mem˝y
(
p
, 
p1
, 
size
);

1810 
p2
 = 
p1
;

1811 
p2
 > (
u_ch¨
 *Ë
ba£
 && 
	`cmp
’2 - 
size
, 
p
) > 0;

1812 
p2
 -
size
)

1814 
	`ngx_mem˝y
(
p2
,Ö2 - 
size
, size);

1817 
	`ngx_mem˝y
(
p2
, 
p
, 
size
);

1820 
	`ngx_‰ì
(
p
);

1821 
	}
}

1824 #i‡(
NGX_MEMCPY_LIMIT
)

1827 
	$ngx_mem˝y
(*
d°
, *
§c
, 
size_t
 
n
)

1829 i‡(
n
 > 
NGX_MEMCPY_LIMIT
) {

1830 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "mem˝y %uz byãs", 
n
);

1831 
	`ngx_debug_poöt
();

1834  
	`mem˝y
(
d°
, 
§c
, 
n
);

1835 
	}
}

	@src/core/ngx_string.h

8 #i‚de‡
_NGX_STRING_H_INCLUDED_


9 
	#_NGX_STRING_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
size_t
 
	mÀn
;

18 
u_ch¨
 *
	md©a
;

19 } 
	tngx_°r_t
;

23 
ngx_°r_t
 
	mkey
;

24 
ngx_°r_t
 
	mvÆue
;

25 } 
	tngx_keyvÆ_t
;

29 
	mÀn
:28;

31 
	mvÆid
:1;

32 
	mno_ˇchóbÀ
:1;

33 
	mnŸ_found
:1;

34 
	mesˇ≥
:1;

36 
u_ch¨
 *
	md©a
;

37 } 
	tngx_v¨übÀ_vÆue_t
;

40 
	#ngx_°rög
(
°r
Ë{ (°rË- 1, (
u_ch¨
 *Ë°∏}

	)

41 
	#ngx_nuŒ_°rög
 { 0, 
NULL
 }

	)

42 
	#ngx_°r_£t
(
°r
, 
ãxt
) \

43 (
°r
)->
Àn
 = (
ãxt
Ë- 1; (°r)->
d©a
 = (
u_ch¨
 *Ë
	)
text

44 
	#ngx_°r_nuŒ
(
°r
Ë(°r)->
Àn
 = 0; (°r)->
d©a
 = 
NULL


	)

47 
	#ngx_tﬁowî
(
c
Ë(
u_ch¨
Ë((¯>'A' && c <'Z'Ë? (¯| 0x20Ë: c)

	)

48 
	#ngx_touµî
(
c
Ë(
u_ch¨
Ë((¯>'a' && c <'z'Ë? (¯& ~0x20Ë: c)

	)

50 
ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

53 
	#ngx_°∫cmp
(
s1
, 
s2
, 
n
Ë
	`°∫cmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

57 
	#ngx_°rcmp
(
s1
, 
s2
Ë
	`°rcmp
((c⁄° *Ës1, (c⁄° *Ës2)

	)

60 
	#ngx_°r°r
(
s1
, 
s2
Ë
	`°r°r
((c⁄° *Ës1, (c⁄° *Ës2)

	)

61 
	#ngx_°æí
(
s
Ë
	`°æí
((c⁄° *Ës)

	)

63 
	#ngx_°rchr
(
s1
, 
c
Ë
	`°rchr
((c⁄° *Ës1, (Ëc)

	)

65 
ngx_ölöe
 
u_ch¨
 *

66 
	$ngx_°æchr
(
u_ch¨
 *
p
, u_ch¨ *
œ°
, u_ch¨ 
c
)

68 
p
 < 
œ°
) {

70 i‡(*
p
 =
c
) {

71  
p
;

74 
p
++;

77  
NULL
;

78 
	}
}

86 
	#ngx_memzîo
(
buf
, 
n
Ë(Ë
	`mem£t
(buf, 0,Ç)

	)

87 
	#ngx_mem£t
(
buf
, 
c
, 
n
Ë(Ë
	`mem£t
(buf, c,Ç)

	)

90 #i‡(
NGX_MEMCPY_LIMIT
)

92 *
ngx_mem˝y
(*
d°
, *
§c
, 
size_t
 
n
);

93 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`ngx_mem˝y
(d°, src,Ç)Ë+ (n))

	)

102 
	#ngx_mem˝y
(
d°
, 
§c
, 
n
Ë(Ë
	`mem˝y
(d°, src,Ç)

	)

103 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`mem˝y
(d°, src,Ç)Ë+ (n))

	)

108 #i‡–
__INTEL_COMPILER
 >= 800 )

115 
ngx_ölöe
 
u_ch¨
 *

116 
	$ngx_c›y
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

118 i‡(
Àn
 < 17) {

120 
Àn
) {

121 *
d°
++ = *
§c
++;

122 
Àn
--;

125  
d°
;

128  
	`ngx_˝ymem
(
d°
, 
§c
, 
Àn
);

130 
	}
}

134 
	#ngx_c›y
 
ngx_˝ymem


	)

139 
	#ngx_memmove
(
d°
, 
§c
, 
n
Ë(Ë
	`memmove
(d°, src,Ç)

	)

140 
	#ngx_movemem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`memmove
(d°, src,Ç)Ë+ (n))

	)

144 
	#ngx_memcmp
(
s1
, 
s2
, 
n
Ë
	`memcmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

147 
u_ch¨
 *
ngx_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

148 
u_ch¨
 *
ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
);

149 
u_ch¨
 * 
ngx_cde˛
 
ngx_•rötf
(u_ch¨ *
buf
, c⁄° *
fmt
, ...);

150 
u_ch¨
 * 
ngx_cde˛
 
ngx_¢¥ötf
(u_ch¨ *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...);

151 
u_ch¨
 * 
ngx_cde˛
 
ngx_¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
,

153 
u_ch¨
 *
ngx_v¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

154 
	#ngx_v¢¥ötf
(
buf
, 
max
, 
fmt
, 
¨gs
) \

155 
	`ngx_v¶¥ötf
(
buf
, bu‡+ (
max
), 
fmt
, 
¨gs
)

	)

157 
ngx_öt_t
 
ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

158 
ngx_öt_t
 
ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

160 
u_ch¨
 *
ngx_°∫°r
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

162 
u_ch¨
 *
ngx_°r°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

163 
u_ch¨
 *
ngx_°rˇ£°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

164 
u_ch¨
 *
ngx_°æˇ£°∫
(u_ch¨ *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
);

166 
ngx_öt_t
 
ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

167 
ngx_öt_t
 
ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

168 
ngx_öt_t
 
ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
);

169 
ngx_öt_t
 
ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

171 
ngx_öt_t
 
ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

172 
ngx_öt_t
 
ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
);

173 
ssize_t
 
ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
);

174 
off_t
 
ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
);

175 
time_t
 
ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
);

176 
ngx_öt_t
 
ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

178 
u_ch¨
 *
ngx_hex_dump
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
);

181 
	#ngx_ba£64_ícoded_Àngth
(
Àn
Ë((÷í + 2Ë/ 3Ë* 4)

	)

182 
	#ngx_ba£64_decoded_Àngth
(
Àn
Ë((÷í + 3Ë/ 4Ë* 3)

	)

184 
ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

185 
ngx_öt_t
 
ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

186 
ngx_öt_t
 
ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

188 
uöt32_t
 
ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
);

189 
size_t
 
ngx_utf8_Àngth
(
u_ch¨
 *
p
, size_à
n
);

190 
u_ch¨
 *
ngx_utf8_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
);

193 
	#NGX_ESCAPE_URI
 0

	)

194 
	#NGX_ESCAPE_ARGS
 1

	)

195 
	#NGX_ESCAPE_URI_COMPONENT
 2

	)

196 
	#NGX_ESCAPE_HTML
 3

	)

197 
	#NGX_ESCAPE_REFRESH
 4

	)

198 
	#NGX_ESCAPE_MEMCACHED
 5

	)

199 
	#NGX_ESCAPE_MAIL_AUTH
 6

	)

201 
	#NGX_UNESCAPE_URI
 1

	)

202 
	#NGX_UNESCAPE_REDIRECT
 2

	)

204 
uöçå_t
 
ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
,

205 
ngx_uöt_t
 
ty≥
);

206 
ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
);

207 
uöçå_t
 
ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

211 
ngx_rbåì_node_t
 
	mnode
;

212 
ngx_°r_t
 
	m°r
;

213 } 
	tngx_°r_node_t
;

216 
ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

217 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

218 
ngx_°r_node_t
 *
ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
«me
,

219 
uöt32_t
 
hash
);

222 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

223 
	$ngx_öt_t
 (*
cmp
)(const *, const *));

224 
	#ngx_qs‹t
 
qs‹t


	)

227 
	#ngx_vÆue_hñ≥r
(
n
Ë#n

	)

228 
	#ngx_vÆue
(
n
Ë
	`ngx_vÆue_hñ≥r
“)

	)

	@src/core/ngx_times.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

21 
	#NGX_TIME_SLOTS
 64

	)

23 
ngx_uöt_t
 
	g¶Ÿ
;

24 
ngx_©omic_t
 
	gngx_time_lock
;

26 vﬁ©ûê
ngx_m£c_t
 
	gngx_cuºít_m£c
;

27 vﬁ©ûê
ngx_time_t
 *
	gngx_ˇched_time
;

28 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_îr_log_time
;

29 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_time
;

30 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_time
;

31 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_iso8601
;

33 #i‡!(
NGX_WIN32
)

41 
ngx_öt_t
 
	gˇched_gmtoff
;

44 
ngx_time_t
 
	gˇched_time
[
NGX_TIME_SLOTS
];

45 
u_ch¨
 
	gˇched_îr_log_time
[
NGX_TIME_SLOTS
]

47 
u_ch¨
 
	gˇched_hâp_time
[
NGX_TIME_SLOTS
]

49 
u_ch¨
 
	gˇched_hâp_log_time
[
NGX_TIME_SLOTS
]

51 
u_ch¨
 
	gˇched_hâp_log_iso8601
[
NGX_TIME_SLOTS
]

55 *
	gwìk
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

56 *
	gm⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

60 
	$ngx_time_öô
()

62 
ngx_ˇched_îr_log_time
.
Àn
 = ("1970/09/28 12:00:00") - 1;

63 
ngx_ˇched_hâp_time
.
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT") - 1;

64 
ngx_ˇched_hâp_log_time
.
Àn
 = ("28/Sep/1970:12:00:00 +0600") - 1;

65 
ngx_ˇched_hâp_log_iso8601
.
Àn
 = ("1970-09-28T12:00:00+06:00") - 1;

67 
ngx_ˇched_time
 = &
ˇched_time
[0];

69 
	`ngx_time_upd©e
();

70 
	}
}

74 
	$ngx_time_upd©e
()

76 
u_ch¨
 *
p0
, *
p1
, *
p2
, *
p3
;

77 
ngx_tm_t
 
tm
, 
gmt
;

78 
time_t
 
£c
;

79 
ngx_uöt_t
 
m£c
;

80 
ngx_time_t
 *
ç
;

81 
timevÆ
 
tv
;

83 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

87 
	`ngx_gëtimeofday
(&
tv
);

89 
£c
 = 
tv
.
tv_£c
;

90 
m£c
 = 
tv
.
tv_u£c
 / 1000;

92 
ngx_cuºít_m£c
 = (
ngx_m£c_t
Ë
£c
 * 1000 + 
m£c
;

94 
ç
 = &
ˇched_time
[
¶Ÿ
];

96 i‡(
ç
->
£c
 == sec) {

97 
ç
->
m£c
 = msec;

98 
	`ngx_u∆ock
(&
ngx_time_lock
);

102 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

103 
¶Ÿ
 = 0;

105 
¶Ÿ
++;

108 
ç
 = &
ˇched_time
[
¶Ÿ
];

110 
ç
->
£c
 = sec;

111 
ç
->
m£c
 = msec;

113 
	`ngx_gmtime
(
£c
, &
gmt
);

116 
p0
 = &
ˇched_hâp_time
[
¶Ÿ
][0];

118 (Ë
	`ngx_•rötf
(
p0
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

119 
wìk
[
gmt
.
ngx_tm_wday
], gmt.
ngx_tm_mday
,

120 
m⁄ths
[
gmt
.
ngx_tm_m⁄
 - 1], gmt.
ngx_tm_yór
,

121 
gmt
.
ngx_tm_hour
, gmt.
ngx_tm_mö
, gmt.
ngx_tm_£c
);

123 #i‡(
NGX_HAVE_GETTIMEZONE
)

125 
ç
->
gmtoff
 = 
	`ngx_gëtimez⁄e
();

126 
	`ngx_gmtime
(
£c
 + 
ç
->
gmtoff
 * 60, &
tm
);

128 #ñi‡(
NGX_HAVE_GMTOFF
)

130 
	`ngx_loˇ…ime
(
£c
, &
tm
);

131 
ˇched_gmtoff
 = (
ngx_öt_t
Ë(
tm
.
ngx_tm_gmtoff
 / 60);

132 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

136 
	`ngx_loˇ…ime
(
£c
, &
tm
);

137 
ˇched_gmtoff
 = 
	`ngx_timez⁄e
(
tm
.
ngx_tm_isd°
);

138 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

143 
p1
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

145 (Ë
	`ngx_•rötf
(
p1
, "%4d/%02d/%02d %02d:%02d:%02d",

146 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

147 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

148 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

151 
p2
 = &
ˇched_hâp_log_time
[
¶Ÿ
][0];

153 (Ë
	`ngx_•rötf
(
p2
, "%02d/%s/%d:%02d:%02d:%02d %c%02d%02d",

154 
tm
.
ngx_tm_mday
, 
m⁄ths
[tm.
ngx_tm_m⁄
 - 1],

155 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_hour
,

156 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

157 
ç
->
gmtoff
 < 0 ? '-' : '+',

158 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

160 
p3
 = &
ˇched_hâp_log_iso8601
[
¶Ÿ
][0];

162 (Ë
	`ngx_•rötf
(
p3
, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",

163 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

164 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

165 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

166 
ç
->
gmtoff
 < 0 ? '-' : '+',

167 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

170 
	`ngx_mem‹y_b¨rõr
();

172 
ngx_ˇched_time
 = 
ç
;

173 
ngx_ˇched_hâp_time
.
d©a
 = 
p0
;

174 
ngx_ˇched_îr_log_time
.
d©a
 = 
p1
;

175 
ngx_ˇched_hâp_log_time
.
d©a
 = 
p2
;

176 
ngx_ˇched_hâp_log_iso8601
.
d©a
 = 
p3
;

178 
	`ngx_u∆ock
(&
ngx_time_lock
);

179 
	}
}

182 #i‡!(
NGX_WIN32
)

185 
	$ngx_time_sigß„_upd©e
()

187 
u_ch¨
 *
p
;

188 
ngx_tm_t
 
tm
;

189 
time_t
 
£c
;

190 
ngx_time_t
 *
ç
;

191 
timevÆ
 
tv
;

193 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

197 
	`ngx_gëtimeofday
(&
tv
);

199 
£c
 = 
tv
.
tv_£c
;

201 
ç
 = &
ˇched_time
[
¶Ÿ
];

203 i‡(
ç
->
£c
 == sec) {

204 
	`ngx_u∆ock
(&
ngx_time_lock
);

208 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

209 
¶Ÿ
 = 0;

211 
¶Ÿ
++;

214 
	`ngx_gmtime
(
£c
 + 
ˇched_gmtoff
 * 60, &
tm
);

216 
p
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

218 (Ë
	`ngx_•rötf
(
p
, "%4d/%02d/%02d %02d:%02d:%02d",

219 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

220 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

221 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

223 
	`ngx_mem‹y_b¨rõr
();

225 
ngx_ˇched_îr_log_time
.
d©a
 = 
p
;

227 
	`ngx_u∆ock
(&
ngx_time_lock
);

228 
	}
}

233 
u_ch¨
 *

234 
	$ngx_hâp_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

236 
ngx_tm_t
 
tm
;

238 
	`ngx_gmtime
(
t
, &
tm
);

240  
	`ngx_•rötf
(
buf
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

241 
wìk
[
tm
.
ngx_tm_wday
],

242 
tm
.
ngx_tm_mday
,

243 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

244 
tm
.
ngx_tm_yór
,

245 
tm
.
ngx_tm_hour
,

246 
tm
.
ngx_tm_mö
,

247 
tm
.
ngx_tm_£c
);

248 
	}
}

251 
u_ch¨
 *

252 
	$ngx_hâp_cookõ_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

254 
ngx_tm_t
 
tm
;

256 
	`ngx_gmtime
(
t
, &
tm
);

263  
	`ngx_•rötf
(
buf
,

264 (
tm
.
ngx_tm_yór
 > 2037) ?

267 
wìk
[
tm
.
ngx_tm_wday
],

268 
tm
.
ngx_tm_mday
,

269 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

270 (
tm
.
ngx_tm_yór
 > 2037) ?Åm.ngx_tm_year:

271 
tm
.
ngx_tm_yór
 % 100,

272 
tm
.
ngx_tm_hour
,

273 
tm
.
ngx_tm_mö
,

274 
tm
.
ngx_tm_£c
);

275 
	}
}

279 
	$ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
)

281 
ngx_öt_t
 
yday
;

282 
ngx_uöt_t
 
n
, 
£c
, 
mö
, 
hour
, 
mday
, 
m⁄
, 
yór
, 
wday
, 
days
, 
À≠
;

286 
n
 = (
ngx_uöt_t
Ë
t
;

288 
days
 = 
n
 / 86400;

292 
wday
 = (4 + 
days
) % 7;

294 
n
 %= 86400;

295 
hour
 = 
n
 / 3600;

296 
n
 %= 3600;

297 
mö
 = 
n
 / 60;

298 
£c
 = 
n
 % 60;

306 
days
 = days - (31 + 28) + 719527;

315 
yór
 = (
days
 + 2) * 400 / (365 * 400 + 100 - 4 + 1);

317 
yday
 = 
days
 - (365 * 
yór
 + year / 4 - year / 100 + year / 400);

319 i‡(
yday
 < 0) {

320 
À≠
 = (
yór
 % 4 == 0) && (year % 100 || (year % 400 == 0));

321 
yday
 = 365 + 
À≠
 + yday;

322 
yór
--;

333 
m⁄
 = (
yday
 + 31) * 10 / 306;

337 
mday
 = 
yday
 - (367 * 
m⁄
 / 12 - 30) + 1;

339 i‡(
yday
 >= 306) {

341 
yór
++;

342 
m⁄
 -= 10;

352 
m⁄
 += 2;

361 
ç
->
ngx_tm_£c
 = (
ngx_tm_£c_t
Ë
£c
;

362 
ç
->
ngx_tm_mö
 = (
ngx_tm_mö_t
Ë
mö
;

363 
ç
->
ngx_tm_hour
 = (
ngx_tm_hour_t
Ë
hour
;

364 
ç
->
ngx_tm_mday
 = (
ngx_tm_mday_t
Ë
mday
;

365 
ç
->
ngx_tm_m⁄
 = (
ngx_tm_m⁄_t
Ë
m⁄
;

366 
ç
->
ngx_tm_yór
 = (
ngx_tm_yór_t
Ë
yór
;

367 
ç
->
ngx_tm_wday
 = (
ngx_tm_wday_t
Ë
wday
;

368 
	}
}

371 
time_t


372 
	$ngx_√xt_time
(
time_t
 
whí
)

374 
time_t
 
now
, 
√xt
;

375 
tm
Åm;

377 
now
 = 
	`ngx_time
();

379 
	`ngx_libc_loˇ…ime
(
now
, &
tm
);

381 
tm
.
tm_hour
 = (Ë(
whí
 / 3600);

382 
whí
 %= 3600;

383 
tm
.
tm_mö
 = (Ë(
whí
 / 60);

384 
tm
.
tm_£c
 = (Ë(
whí
 % 60);

386 
√xt
 = 
	`mktime
(&
tm
);

388 i‡(
√xt
 == -1) {

392 i‡(
√xt
 - 
now
 > 0) {

393  
√xt
;

396 
tm
.
tm_mday
++;

400 
√xt
 = 
	`mktime
(&
tm
);

402 i‡(
√xt
 != -1) {

403  
√xt
;

407 
	}
}

	@src/core/ngx_times.h

8 #i‚de‡
_NGX_TIMES_H_INCLUDED_


9 
	#_NGX_TIMES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
time_t
 
	m£c
;

18 
ngx_uöt_t
 
	mm£c
;

19 
ngx_öt_t
 
	mgmtoff
;

20 } 
	tngx_time_t
;

23 
ngx_time_öô
();

24 
ngx_time_upd©e
();

25 
ngx_time_sigß„_upd©e
();

26 
u_ch¨
 *
ngx_hâp_time
(u_ch¨ *
buf
, 
time_t
 
t
);

27 
u_ch¨
 *
ngx_hâp_cookõ_time
(u_ch¨ *
buf
, 
time_t
 
t
);

28 
ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
);

30 
time_t
 
ngx_√xt_time
—ime_à
whí
);

31 
	#ngx_√xt_time_n
 "mktime()"

	)

34 vﬁ©ûê
ngx_time_t
 *
ngx_ˇched_time
;

36 
	#ngx_time
(Ë
ngx_ˇched_time
->
£c


	)

37 
	#ngx_timeofday
(Ë(
ngx_time_t
 *Ë
ngx_ˇched_time


	)

39 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_îr_log_time
;

40 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_time
;

41 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_time
;

42 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_iso8601
;

48 vﬁ©ûê
ngx_m£c_t
 
ngx_cuºít_m£c
;

	@src/event/modules/ngx_aio_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evít_moduÀ_t
 
ngx_kqueue_moduÀ_˘x
;

16 
ngx_öt_t
 
ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

17 
ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_öt_t
 
ngx_aio_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

19 
ngx_uöt_t
 
Êags
);

20 
ngx_öt_t
 
ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

21 
ngx_uöt_t
 
Êags
);

22 
ngx_öt_t
 
ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

24 
ngx_uöt_t
 
Êags
);

27 
ngx_os_io_t
 
	gngx_os_aio
 = {

28 
ngx_aio_ªad
,

29 
ngx_aio_ªad_chaö
,

30 
NULL
,

31 
ngx_aio_wrôe
,

32 
ngx_aio_wrôe_chaö
,

37 
ngx_°r_t
 
	gaio_«me
 = 
ngx_°rög
("aio");

39 
ngx_evít_moduÀ_t
 
	gngx_aio_moduÀ_˘x
 = {

40 &
aio_«me
,

41 
NULL
,

42 
NULL
,

45 
ngx_aio_add_evít
,

46 
ngx_aio_dñ_evít
,

47 
NULL
,

48 
NULL
,

49 
NULL
,

50 
ngx_aio_dñ_c⁄√˘i⁄
,

51 
NULL
,

52 
ngx_aio_¥o˚ss_evíts
,

53 
ngx_aio_öô
,

54 
ngx_aio_d⁄e


59 
ngx_moduÀ_t
 
	gngx_aio_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_aio_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 #i‡(
NGX_HAVE_KQUEUE
)

77 
ngx_öt_t


78 
	$ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

80 i‡(
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`öô
(
cy˛e
, 
timî
Ë=
NGX_ERROR
) {

81  
NGX_ERROR
;

84 
ngx_io
 = 
ngx_os_aio
;

86 
ngx_evít_Êags
 = 
NGX_USE_AIO_EVENT
;

87 
ngx_evít_a˘i⁄s
 = 
ngx_aio_moduÀ_˘x
.
a˘i⁄s
;

90  
NGX_OK
;

91 
	}
}

95 
	$ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

97 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`d⁄e
(
cy˛e
);

98 
	}
}

103 
ngx_öt_t


104 
	$ngx_aio_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

106  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`add
(
ev
, 
evít
, 
Êags
);

107 
	}
}

110 
ngx_öt_t


111 
	$ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

113  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`dñ
(
ev
, 
evít
, 
Êags
);

114 
	}
}

117 
ngx_öt_t


118 
	$ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

120 
rc
;

122 i‡(
c
->
ªad
->
a˘ive
 =0 && c->
wrôe
->active == 0) {

123  
NGX_OK
;

126 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

127  
NGX_OK
;

130 
rc
 = 
	`aio_ˇn˚l
(
c
->
fd
, 
NULL
);

132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ˇn˚l: %d", 
rc
);

134 i‡(
rc
 =
AIO_CANCELED
) {

135 
c
->
ªad
->
a˘ive
 = 0;

136 
c
->
wrôe
->
a˘ive
 = 0;

137  
NGX_OK
;

140 i‡(
rc
 =
AIO_ALLDONE
) {

141 
c
->
ªad
->
a˘ive
 = 0;

142 
c
->
wrôe
->
a˘ive
 = 0;

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

145  
NGX_OK
;

148 i‡(
rc
 == -1) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

151  
NGX_ERROR
;

154 i‡(
rc
 =
AIO_NOTCANCELED
) {

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

158  
NGX_ERROR
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

168  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

169 
	}
}

	@src/event/modules/ngx_devpoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_DEVPOLL
)

17 
	#POLLREMOVE
 0x0800

	)

18 
	#DP_POLL
 0xD001

	)

19 
	#DP_ISPOLLED
 0xD002

	)

21 
	sdvpﬁl
 {

22 
pﬁlfd
 *
	mdp_fds
;

23 
	mdp_nfds
;

24 
	mdp_timeout
;

31 
ngx_uöt_t
 
	mch™ges
;

32 
ngx_uöt_t
 
	mevíts
;

33 } 
	tngx_devpﬁl_c⁄f_t
;

36 
ngx_öt_t
 
ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

37 
ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_öt_t
 
ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

39 
ngx_uöt_t
 
Êags
);

40 
ngx_öt_t
 
ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

41 
ngx_uöt_t
 
Êags
);

42 
ngx_öt_t
 
ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

43 
ngx_uöt_t
 
Êags
);

44 
ngx_öt_t
 
ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

45 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

47 *
ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

48 *
ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

50 
	gdp
 = -1;

51 
pﬁlfd
 *
	gch™ge_li°
, *
	gevít_li°
;

52 
ngx_uöt_t
 
	gnch™ges
, 
	gmax_ch™ges
, 
	g√víts
;

54 
ngx_evít_t
 **
	gch™ge_ödex
;

57 
ngx_°r_t
 
	gdevpﬁl_«me
 = 
ngx_°rög
("/dev/poll");

59 
ngx_comm™d_t
 
	gngx_devpﬁl_comm™ds
[] = {

61 { 
ngx_°rög
("devpoll_changes"),

62 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

65 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
ch™ges
),

66 
NULL
 },

68 { 
ngx_°rög
("devpoll_events"),

69 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

72 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
evíts
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_evít_moduÀ_t
 
	gngx_devpﬁl_moduÀ_˘x
 = {

80 &
devpﬁl_«me
,

81 
ngx_devpﬁl_¸óã_c⁄f
,

82 
ngx_devpﬁl_öô_c⁄f
,

85 
ngx_devpﬁl_add_evít
,

86 
ngx_devpﬁl_dñ_evít
,

87 
ngx_devpﬁl_add_evít
,

88 
ngx_devpﬁl_dñ_evít
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
ngx_devpﬁl_¥o˚ss_evíts
,

93 
ngx_devpﬁl_öô
,

94 
ngx_devpﬁl_d⁄e
,

99 
ngx_moduÀ_t
 
	gngx_devpﬁl_moduÀ
 = {

100 
NGX_MODULE_V1
,

101 &
ngx_devpﬁl_moduÀ_˘x
,

102 
ngx_devpﬁl_comm™ds
,

103 
NGX_EVENT_MODULE
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NGX_MODULE_V1_PADDING


115 
ngx_öt_t


116 
	$ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

118 
size_t
 
n
;

119 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

121 
dpcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_devpﬁl_moduÀ
);

123 i‡(
dp
 == -1) {

124 
dp
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
);

126 i‡(
dp
 == -1) {

127 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

129  
NGX_ERROR
;

133 i‡(
max_ch™ges
 < 
dpcf
->
ch™ges
) {

134 i‡(
nch™ges
) {

135 
n
 = 
nch™ges
 * (
pﬁlfd
);

136 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
nch™ges
 = 0;

145 i‡(
ch™ge_li°
) {

146 
	`ngx_‰ì
(
ch™ge_li°
);

149 
ch™ge_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
ch™ges
,

150 
cy˛e
->
log
);

151 i‡(
ch™ge_li°
 =
NULL
) {

152  
NGX_ERROR
;

155 i‡(
ch™ge_ödex
) {

156 
	`ngx_‰ì
(
ch™ge_ödex
);

159 
ch™ge_ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 
dpcf
->
ch™ges
,

160 
cy˛e
->
log
);

161 i‡(
ch™ge_ödex
 =
NULL
) {

162  
NGX_ERROR
;

166 
max_ch™ges
 = 
dpcf
->
ch™ges
;

168 i‡(
√víts
 < 
dpcf
->
evíts
) {

169 i‡(
evít_li°
) {

170 
	`ngx_‰ì
(
evít_li°
);

173 
evít_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
evíts
,

174 
cy˛e
->
log
);

175 i‡(
evít_li°
 =
NULL
) {

176  
NGX_ERROR
;

180 
√víts
 = 
dpcf
->
evíts
;

182 
ngx_io
 = 
ngx_os_io
;

184 
ngx_evít_a˘i⁄s
 = 
ngx_devpﬁl_moduÀ_˘x
.
a˘i⁄s
;

186 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

188  
NGX_OK
;

189 
	}
}

193 
	$ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

195 i‡(
	`˛o£
(
dp
) == -1) {

196 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

200 
dp
 = -1;

202 
	`ngx_‰ì
(
ch™ge_li°
);

203 
	`ngx_‰ì
(
evít_li°
);

204 
	`ngx_‰ì
(
ch™ge_ödex
);

206 
ch™ge_li°
 = 
NULL
;

207 
evít_li°
 = 
NULL
;

208 
ch™ge_ödex
 = 
NULL
;

209 
max_ch™ges
 = 0;

210 
nch™ges
 = 0;

211 
√víts
 = 0;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

218 #i‡(
NGX_DEBUG
)

219 
ngx_c⁄√˘i⁄_t
 *
c
;

222 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

223 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

226 #i‡(
NGX_DEBUG
)

227 
c
 = 
ev
->
d©a
;

228 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

229 "devpﬁ»addÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

232 
ev
->
a˘ive
 = 1;

234  
	`ngx_devpﬁl_£t_evít
(
ev
, 
evít
, 0);

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

241 
ngx_evít_t
 *
e
;

242 
ngx_c⁄√˘i⁄_t
 *
c
;

244 
c
 = 
ev
->
d©a
;

246 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

247 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

250 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

251 "devpﬁ»dñÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

253 i‡(
	`ngx_devpﬁl_£t_evít
(
ev
, 
POLLREMOVE
, 
Êags
Ë=
NGX_ERROR
) {

254  
NGX_ERROR
;

257 
ev
->
a˘ive
 = 0;

259 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

260 
e
 = (
evít
 =
POLLIN
Ë? 
c
->
wrôe
 : c->
ªad
;

262 i‡(
e
) {

263 
e
->
a˘ive
 = 0;

266  
NGX_OK
;

271 i‡(
evít
 =
POLLIN
) {

272 
e
 = 
c
->
wrôe
;

273 
evít
 = 
POLLOUT
;

276 
e
 = 
c
->
ªad
;

277 
evít
 = 
POLLIN
;

280 i‡(
e
 &&É->
a˘ive
) {

281  
	`ngx_devpﬁl_£t_evít
(
e
, 
evít
, 0);

284  
NGX_OK
;

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

291 
size_t
 
n
;

292 
ngx_c⁄√˘i⁄_t
 *
c
;

294 
c
 = 
ev
->
d©a
;

296 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

297 "devpﬁ»fd:%dÉv:%04XòÊ:%04Xi", 
c
->
fd
, 
evít
, 
Êags
);

299 i‡(
nch™ges
 >
max_ch™ges
) {

300 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

303 
n
 = 
nch™ges
 * (
pﬁlfd
);

304 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

307  
NGX_ERROR
;

310 
nch™ges
 = 0;

313 
ch™ge_li°
[
nch™ges
].
fd
 = 
c
->fd;

314 
ch™ge_li°
[
nch™ges
].
evíts
 = (Ë
evít
;

315 
ch™ge_li°
[
nch™ges
].
ªvíts
 = 0;

317 
ch™ge_ödex
[
nch™ges
] = 
ev
;

318 
ev
->
ödex
 = 
nch™ges
;

320 
nch™ges
++;

322 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

323 
n
 = 
nch™ges
 * (
pﬁlfd
);

324 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

327  
NGX_ERROR
;

330 
nch™ges
 = 0;

333  
NGX_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

339 
ngx_uöt_t
 
Êags
)

341 
evíts
, 
ªvíts
, 
rc
;

342 
size_t
 
n
;

343 
ngx_fd_t
 
fd
;

344 
ngx_îr_t
 
îr
;

345 
ngx_öt_t
 
i
;

346 
ngx_uöt_t
 
Àvñ
;

347 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

348 
ngx_c⁄√˘i⁄_t
 *
c
;

349 
pﬁlfd
 
pfd
;

350 
dvpﬁl
 
dvp
;

354 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

355 "devpﬁ»timî: %M", 
timî
);

357 i‡(
nch™ges
) {

358 
n
 = 
nch™ges
 * (
pﬁlfd
);

359 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

362  
NGX_ERROR
;

365 
nch™ges
 = 0;

368 
dvp
.
dp_fds
 = 
evít_li°
;

369 
dvp
.
dp_nfds
 = (Ë
√víts
;

370 
dvp
.
dp_timeout
 = 
timî
;

371 
evíts
 = 
	`io˘l
(
dp
, 
DP_POLL
, &
dvp
);

373 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

375 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

376 
	`ngx_time_upd©e
();

379 i‡(
îr
) {

380 i‡(
îr
 =
NGX_EINTR
) {

382 i‡(
ngx_evít_timî_Æ¨m
) {

383 
ngx_evít_timî_Æ¨m
 = 0;

384  
NGX_OK
;

387 
Àvñ
 = 
NGX_LOG_INFO
;

390 
Àvñ
 = 
NGX_LOG_ALERT
;

393 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "ioctl(DP_POLL) failed");

394  
NGX_ERROR
;

397 i‡(
evíts
 == 0) {

398 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

399  
NGX_OK
;

402 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

404  
NGX_ERROR
;

407 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

409 
i
 = 0; i < 
evíts
; i++) {

411 
fd
 = 
evít_li°
[
i
].fd;

412 
ªvíts
 = 
evít_li°
[
i
].revents;

414 
c
 = 
ngx_cy˛e
->
fûes
[
fd
];

416 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

418 
pfd
.
fd
 = fd;

419 
pfd
.
evíts
 = 0;

420 
pfd
.
ªvíts
 = 0;

422 
rc
 = 
	`io˘l
(
dp
, 
DP_ISPOLLED
, &
pfd
);

424 
rc
) {

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

429 
fd
, 
ªvíts
);

433 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

435 
ªvíts
, 
fd
);

439 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

442 
ªvíts
, 
fd
, 
rc
, 
pfd
.fd,Öfd.revents);

444 
pfd
.
fd
 = fd;

445 
pfd
.
evíts
 = 
POLLREMOVE
;

446 
pfd
.
ªvíts
 = 0;

448 i‡(
	`wrôe
(
dp
, &
pfd
, (
pﬁlfd
))

449 !(
ssize_t
Ë(
pﬁlfd
))

451 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

455 i‡(
	`˛o£
(
fd
) == -1) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

457 "˛o£(%dËÁûed", 
fd
);

466 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

468 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

470 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

471 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

473 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

476 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

477 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

480 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

483 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

484 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

492 
ªvíts
 |
POLLIN
|
POLLOUT
;

495 
ªv
 = 
c
->
ªad
;

497 i‡((
ªvíts
 & 
POLLIN
Ë&& 
ªv
->
a˘ive
) {

499 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

500 
ªv
->
po°ed_ªady
 = 1;

503 
ªv
->
ªady
 = 1;

506 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

507 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

508 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

510 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

513 
ªv
->
	`h™dÀr
(rev);

517 
wev
 = 
c
->
wrôe
;

519 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
wev
->
a˘ive
) {

521 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

522 
wev
->
po°ed_ªady
 = 1;

525 
wev
->
ªady
 = 1;

528 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

529 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

532 
wev
->
	`h™dÀr
(wev);

537 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

539  
NGX_OK
;

540 
	}
}

544 
	$ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

546 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

548 
dpcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_devpﬁl_c⁄f_t
));

549 i‡(
dpcf
 =
NULL
) {

550  
NULL
;

553 
dpcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

554 
dpcf
->
evíts
 = 
NGX_CONF_UNSET
;

556  
dpcf
;

557 
	}
}

561 
	$ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

563 
ngx_devpﬁl_c⁄f_t
 *
dpcf
 = 
c⁄f
;

565 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
ch™ges
, 32);

566 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
evíts
, 32);

568  
NGX_CONF_OK
;

569 
	}
}

	@src/event/modules/ngx_epoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EPOLL
)

17 
	#EPOLLIN
 0x001

	)

18 
	#EPOLLPRI
 0x002

	)

19 
	#EPOLLOUT
 0x004

	)

20 
	#EPOLLRDNORM
 0x040

	)

21 
	#EPOLLRDBAND
 0x080

	)

22 
	#EPOLLWRNORM
 0x100

	)

23 
	#EPOLLWRBAND
 0x200

	)

24 
	#EPOLLMSG
 0x400

	)

25 
	#EPOLLERR
 0x008

	)

26 
	#EPOLLHUP
 0x010

	)

28 
	#EPOLLET
 0x80000000

	)

29 
	#EPOLLONESHOT
 0x40000000

	)

31 
	#EPOLL_CTL_ADD
 1

	)

32 
	#EPOLL_CTL_DEL
 2

	)

33 
	#EPOLL_CTL_MOD
 3

	)

35 
	uïﬁl_d©a
 {

36 *
	m±r
;

37 
	mfd
;

38 
uöt32_t
 
	mu32
;

39 
uöt64_t
 
	mu64
;

40 } 
	tïﬁl_d©a_t
;

42 
	sïﬁl_evít
 {

43 
uöt32_t
 
	mevíts
;

44 
ïﬁl_d©a_t
 
	md©a
;

47 
	$ïﬁl_¸óã
(
size
)

50 
	}
}

52 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

55 
	}
}

57 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
)

60 
	}
}

62 #i‡(
NGX_HAVE_FILE_AIO
)

64 
	#SYS_io_£tup
 245

	)

65 
	#SYS_io_de°roy
 246

	)

66 
	#SYS_io_gëevíts
 247

	)

67 
	#SYS_evítfd
 323

	)

69 
u_öt
 
	taio_c⁄ãxt_t
;

71 
	sio_evít
 {

72 
uöt64_t
 
	md©a
;

73 
uöt64_t
 
	mobj
;

74 
öt64_t
 
	mªs
;

75 
öt64_t
 
	mªs2
;

79 
	$evítfd
(
u_öt
 
öôvÆ
)

82 
	}
}

89 
ngx_uöt_t
 
	mevíts
;

90 
ngx_uöt_t
 
	maio_ªque°s
;

91 } 
	tngx_ïﬁl_c⁄f_t
;

94 
ngx_öt_t
 
ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

95 
ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

96 
ngx_öt_t
 
ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

97 
ngx_uöt_t
 
Êags
);

98 
ngx_öt_t
 
ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

99 
ngx_uöt_t
 
Êags
);

100 
ngx_öt_t
 
ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

101 
ngx_öt_t
 
ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

102 
ngx_uöt_t
 
Êags
);

103 
ngx_öt_t
 
ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

104 
ngx_uöt_t
 
Êags
);

106 #i‡(
NGX_HAVE_FILE_AIO
)

107 
ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
);

110 *
ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

111 *
ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

113 
	gï
 = -1;

114 
ïﬁl_evít
 *
	gevít_li°
;

115 
ngx_uöt_t
 
	g√víts
;

117 #i‡(
NGX_HAVE_FILE_AIO
)

119 
	gngx_evítfd
 = -1;

120 
aio_c⁄ãxt_t
 
	gngx_aio_˘x
 = 0;

122 
ngx_evít_t
 
	gngx_evítfd_evít
;

123 
ngx_c⁄√˘i⁄_t
 
	gngx_evítfd_c⁄n
;

127 
ngx_°r_t
 
	gïﬁl_«me
 = 
ngx_°rög
("epoll");

129 
ngx_comm™d_t
 
	gngx_ïﬁl_comm™ds
[] = {

131 { 
ngx_°rög
("epoll_events"),

132 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

133 
ngx_c⁄f_£t_num_¶Ÿ
,

135 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
evíts
),

136 
NULL
 },

138 { 
ngx_°rög
("worker_aio_requests"),

139 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

140 
ngx_c⁄f_£t_num_¶Ÿ
,

142 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
aio_ªque°s
),

143 
NULL
 },

145 
ngx_nuŒ_comm™d


149 
ngx_evít_moduÀ_t
 
	gngx_ïﬁl_moduÀ_˘x
 = {

150 &
ïﬁl_«me
,

151 
ngx_ïﬁl_¸óã_c⁄f
,

152 
ngx_ïﬁl_öô_c⁄f
,

155 
ngx_ïﬁl_add_evít
,

156 
ngx_ïﬁl_dñ_evít
,

157 
ngx_ïﬁl_add_evít
,

158 
ngx_ïﬁl_dñ_evít
,

159 
ngx_ïﬁl_add_c⁄√˘i⁄
,

160 
ngx_ïﬁl_dñ_c⁄√˘i⁄
,

161 
NULL
,

162 
ngx_ïﬁl_¥o˚ss_evíts
,

163 
ngx_ïﬁl_öô
,

164 
ngx_ïﬁl_d⁄e
,

168 
ngx_moduÀ_t
 
	gngx_ïﬁl_moduÀ
 = {

169 
NGX_MODULE_V1
,

170 &
ngx_ïﬁl_moduÀ_˘x
,

171 
ngx_ïﬁl_comm™ds
,

172 
NGX_EVENT_MODULE
,

173 
NULL
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NGX_MODULE_V1_PADDING


184 #i‡(
NGX_HAVE_FILE_AIO
)

197 
	$io_£tup
(
u_öt
 
ƒ_ªqs
, 
aio_c⁄ãxt_t
 *
˘x
)

199  
	`sysˇŒ
(
SYS_io_£tup
, 
ƒ_ªqs
, 
˘x
);

200 
	}
}

204 
	$io_de°roy
(
aio_c⁄ãxt_t
 
˘x
)

206  
	`sysˇŒ
(
SYS_io_de°roy
, 
˘x
);

207 
	}
}

211 
	$io_gëevíts
(
aio_c⁄ãxt_t
 
˘x
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
,

212 
time•ec
 *
tmo
)

214  
	`sysˇŒ
(
SYS_io_gëevíts
, 
˘x
, 
mö_ƒ
, 
ƒ
, 
evíts
, 
tmo
);

215 
	}
}

219 
	$ngx_ïﬁl_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ïﬁl_c⁄f_t
 *
ïcf
)

221 
n
;

222 
ïﬁl_evít
 
ì
;

224 
ngx_evítfd
 = 
	`sysˇŒ
(
SYS_evítfd
, 0);

226 i‡(
ngx_evítfd
 == -1) {

227 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

229 
ngx_fûe_aio
 = 0;

233 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

234 "evítfd: %d", 
ngx_evítfd
);

236 
n
 = 1;

238 i‡(
	`io˘l
(
ngx_evítfd
, 
FIONBIO
, &
n
) == -1) {

239 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

241 
Áûed
;

244 i‡(
	`io_£tup
(
ïcf
->
aio_ªque°s
, &
ngx_aio_˘x
) == -1) {

245 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

247 
Áûed
;

250 
ngx_evítfd_evít
.
d©a
 = &
ngx_evítfd_c⁄n
;

251 
ngx_evítfd_evít
.
h™dÀr
 = 
ngx_ïﬁl_evítfd_h™dÀr
;

252 
ngx_evítfd_evít
.
log
 = 
cy˛e
->log;

253 
ngx_evítfd_evít
.
a˘ive
 = 1;

254 
ngx_evítfd_c⁄n
.
fd
 = 
ngx_evítfd
;

255 
ngx_evítfd_c⁄n
.
ªad
 = &
ngx_evítfd_evít
;

256 
ngx_evítfd_c⁄n
.
log
 = 
cy˛e
->log;

258 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLET
;

259 
ì
.
d©a
.
±r
 = &
ngx_evítfd_c⁄n
;

261 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
ngx_evítfd
, &
ì
) != -1) {

265 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

268 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

269 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

273 
Áûed
:

275 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

276 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

280 
ngx_evítfd
 = -1;

281 
ngx_aio_˘x
 = 0;

282 
ngx_fûe_aio
 = 0;

283 
	}
}

288 
ngx_öt_t


289 
	$ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

291 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

293 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ïﬁl_moduÀ
);

295 i‡(
ï
 == -1) {

296 
ï
 = 
	`ïﬁl_¸óã
(
cy˛e
->
c⁄√˘i⁄_n
 / 2);

298 i‡(
ï
 == -1) {

299 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

301  
NGX_ERROR
;

304 #i‡(
NGX_HAVE_FILE_AIO
)

306 
	`ngx_ïﬁl_aio_öô
(
cy˛e
, 
ïcf
);

311 i‡(
√víts
 < 
ïcf
->
evíts
) {

312 i‡(
evít_li°
) {

313 
	`ngx_‰ì
(
evít_li°
);

316 
evít_li°
 = 
	`ngx_Æloc
((
ïﬁl_evít
Ë* 
ïcf
->
evíts
,

317 
cy˛e
->
log
);

318 i‡(
evít_li°
 =
NULL
) {

319  
NGX_ERROR
;

323 
√víts
 = 
ïcf
->
evíts
;

325 
ngx_io
 = 
ngx_os_io
;

327 
ngx_evít_a˘i⁄s
 = 
ngx_ïﬁl_moduÀ_˘x
.
a˘i⁄s
;

329 #i‡(
NGX_HAVE_CLEAR_EVENT
)

330 
ngx_evít_Êags
 = 
NGX_USE_CLEAR_EVENT


332 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT


334 |
NGX_USE_GREEDY_EVENT


335 |
NGX_USE_EPOLL_EVENT
;

337  
NGX_OK
;

338 
	}
}

342 
	$ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

344 i‡(
	`˛o£
(
ï
) == -1) {

345 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

349 
ï
 = -1;

351 #i‡(
NGX_HAVE_FILE_AIO
)

353 i‡(
ngx_evítfd
 != -1) {

355 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

356 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

360 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

361 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

365 
ngx_evítfd
 = -1;

368 
ngx_aio_˘x
 = 0;

372 
	`ngx_‰ì
(
evít_li°
);

374 
evít_li°
 = 
NULL
;

375 
√víts
 = 0;

376 
	}
}

379 
ngx_öt_t


380 
	$ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

382 
›
;

383 
uöt32_t
 
evíts
, 
¥ev
;

384 
ngx_evít_t
 *
e
;

385 
ngx_c⁄√˘i⁄_t
 *
c
;

386 
ïﬁl_evít
 
ì
;

388 
c
 = 
ev
->
d©a
;

390 
evíts
 = (
uöt32_t
Ë
evít
;

392 i‡(
evít
 =
NGX_READ_EVENT
) {

393 
e
 = 
c
->
wrôe
;

394 
¥ev
 = 
EPOLLOUT
;

395 #i‡(
NGX_READ_EVENT
 !
EPOLLIN
)

396 
evíts
 = 
EPOLLIN
;

400 
e
 = 
c
->
ªad
;

401 
¥ev
 = 
EPOLLIN
;

402 #i‡(
NGX_WRITE_EVENT
 !
EPOLLOUT
)

403 
evíts
 = 
EPOLLOUT
;

407 i‡(
e
->
a˘ive
) {

408 
›
 = 
EPOLL_CTL_MOD
;

409 
evíts
 |
¥ev
;

412 
›
 = 
EPOLL_CTL_ADD
;

415 
ì
.
evíts
 =Évít†| (
uöt32_t
Ë
Êags
;

416 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

418 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

420 
c
->
fd
, 
›
, 
ì
.
evíts
);

422 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

423 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

424 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

425  
NGX_ERROR
;

428 
ev
->
a˘ive
 = 1;

430 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

433  
NGX_OK
;

434 
	}
}

437 
ngx_öt_t


438 
	$ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

440 
›
;

441 
uöt32_t
 
¥ev
;

442 
ngx_evít_t
 *
e
;

443 
ngx_c⁄√˘i⁄_t
 *
c
;

444 
ïﬁl_evít
 
ì
;

452 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

453 
ev
->
a˘ive
 = 0;

454  
NGX_OK
;

457 
c
 = 
ev
->
d©a
;

459 i‡(
evít
 =
NGX_READ_EVENT
) {

460 
e
 = 
c
->
wrôe
;

461 
¥ev
 = 
EPOLLOUT
;

464 
e
 = 
c
->
ªad
;

465 
¥ev
 = 
EPOLLIN
;

468 i‡(
e
->
a˘ive
) {

469 
›
 = 
EPOLL_CTL_MOD
;

470 
ì
.
evíts
 = 
¥ev
 | (
uöt32_t
Ë
Êags
;

471 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

474 
›
 = 
EPOLL_CTL_DEL
;

475 
ì
.
evíts
 = 0;

476 
ì
.
d©a
.
±r
 = 
NULL
;

479 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

481 
c
->
fd
, 
›
, 
ì
.
evíts
);

483 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

484 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

485 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

486  
NGX_ERROR
;

489 
ev
->
a˘ive
 = 0;

491  
NGX_OK
;

492 
	}
}

495 
ngx_öt_t


496 
	$ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

498 
ïﬁl_evít
 
ì
;

500 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLOUT
|
EPOLLET
;

501 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | c->
ªad
->
ö°™˚
);

503 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

504 "ïﬁ»add c⁄√˘i⁄: fd:%dÉv:%08XD", 
c
->
fd
, 
ì
.
evíts
);

506 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
c
->
fd
, &
ì
) == -1) {

507 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

508 "ïﬁl_˘l(EPOLL_CTL_ADD, %dËÁûed", 
c
->
fd
);

509  
NGX_ERROR
;

512 
c
->
ªad
->
a˘ive
 = 1;

513 
c
->
wrôe
->
a˘ive
 = 1;

515  
NGX_OK
;

516 
	}
}

519 
ngx_öt_t


520 
	$ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

522 
›
;

523 
ïﬁl_evít
 
ì
;

531 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

532 
c
->
ªad
->
a˘ive
 = 0;

533 
c
->
wrôe
->
a˘ive
 = 0;

534  
NGX_OK
;

537 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

538 "ïﬁ»dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

540 
›
 = 
EPOLL_CTL_DEL
;

541 
ì
.
evíts
 = 0;

542 
ì
.
d©a
.
±r
 = 
NULL
;

544 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

545 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

546 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

547  
NGX_ERROR
;

550 
c
->
ªad
->
a˘ive
 = 0;

551 
c
->
wrôe
->
a˘ive
 = 0;

553  
NGX_OK
;

554 
	}
}

557 
ngx_öt_t


558 
	$ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

560 
evíts
;

561 
uöt32_t
 
ªvíts
;

562 
ngx_öt_t
 
ö°™˚
, 
i
;

563 
ngx_uöt_t
 
Àvñ
;

564 
ngx_îr_t
 
îr
;

565 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

566 
ngx_c⁄√˘i⁄_t
 *
c
;

570 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

571 "ïﬁ»timî: %M", 
timî
);

573 
evíts
 = 
	`ïﬁl_waô
(
ï
, 
evít_li°
, (Ë
√víts
, 
timî
);

575 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

577 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

578 
	`ngx_time_upd©e
();

581 i‡(
îr
) {

582 i‡(
îr
 =
NGX_EINTR
) {

584 i‡(
ngx_evít_timî_Æ¨m
) {

585 
ngx_evít_timî_Æ¨m
 = 0;

586  
NGX_OK
;

589 
Àvñ
 = 
NGX_LOG_INFO
;

592 
Àvñ
 = 
NGX_LOG_ALERT
;

595 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "epoll_wait() failed");

596  
NGX_ERROR
;

599 i‡(
evíts
 == 0) {

600 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

601  
NGX_OK
;

604 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

606  
NGX_ERROR
;

609 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

611 
i
 = 0; i < 
evíts
; i++) {

612 
c
 = 
evít_li°
[
i
].
d©a
.
±r
;

614 
ö°™˚
 = (
uöçå_t
Ë
c
 & 1;

615 
c
 = (
ngx_c⁄√˘i⁄_t
 *Ë((
uöçå_t
) c & (uintptr_t) ~1);

617 
ªv
 = 
c
->
ªad
;

619 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

626 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

627 "ïﬁl: sèÀÉvíà%p", 
c
);

631 
ªvíts
 = 
evít_li°
[
i
].
evíts
;

633 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

635 
c
->
fd
, 
ªvíts
, 
evít_li°
[
i
].
d©a
.
±r
);

637 i‡(
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
)) {

638 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

640 
c
->
fd
, 
ªvíts
);

644 i‡(
ªvíts
 & ~(
EPOLLIN
|
EPOLLOUT
|
EPOLLERR
|
EPOLLHUP
)) {

645 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

647 
c
->
fd
, 
ªvíts
);

651 i‡((
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
))

652 && (
ªvíts
 & (
EPOLLIN
|
EPOLLOUT
)) == 0)

660 
ªvíts
 |
EPOLLIN
|
EPOLLOUT
;

663 i‡((
ªvíts
 & 
EPOLLIN
Ë&& 
ªv
->
a˘ive
) {

665 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

666 
ªv
->
po°ed_ªady
 = 1;

669 
ªv
->
ªady
 = 1;

672 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

673 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

674 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

676 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

679 
ªv
->
	`h™dÀr
(rev);

683 
wev
 = 
c
->
wrôe
;

685 i‡((
ªvíts
 & 
EPOLLOUT
Ë&& 
wev
->
a˘ive
) {

687 i‡(
c
->
fd
 =-1 || 
wev
->
ö°™˚
 != instance) {

694 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

695 "ïﬁl: sèÀÉvíà%p", 
c
);

699 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

700 
wev
->
po°ed_ªady
 = 1;

703 
wev
->
ªady
 = 1;

706 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

707 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

710 
wev
->
	`h™dÀr
(wev);

715 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

717  
NGX_OK
;

718 
	}
}

721 #i‡(
NGX_HAVE_FILE_AIO
)

724 
	$ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
)

726 
n
, 
evíts
;

727 
i
;

728 
uöt64_t
 
ªady
;

729 
ngx_îr_t
 
îr
;

730 
ngx_evít_t
 *
e
;

731 
ngx_evít_aio_t
 *
aio
;

732 
io_evít
 
evít
[64];

733 
time•ec
 
ts
;

735 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "eventfd handler");

737 
n
 = 
	`ªad
(
ngx_evítfd
, &
ªady
, 8);

739 
îr
 = 
ngx_î∫o
;

741 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "evítfd: %d", 
n
);

743 i‡(
n
 != 8) {

744 i‡(
n
 == -1) {

745 i‡(
îr
 =
NGX_EAGAIN
) {

749 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
, "read(eventfd) failed");

753 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

754 "ªad”vítfdËªtu∫ed o∆y %d byãs", 
n
);

758 
ts
.
tv_£c
 = 0;

759 
ts
.
tv_n£c
 = 0;

761 
ªady
) {

763 
evíts
 = 
	`io_gëevíts
(
ngx_aio_˘x
, 1, 64, 
evít
, &
ts
);

765 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

766 "io_gëevíts: %l", 
evíts
);

768 i‡(
evíts
 > 0) {

769 
ªady
 -
evíts
;

771 
i
 = 0; i < 
evíts
; i++) {

773 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

775 
evít
[
i
].
d©a
,Évít[i].
obj
,

776 
evít
[
i
].
ªs
,Évít[i].
ªs2
);

778 
e
 = (
ngx_evít_t
 *Ë(
uöçå_t
Ë
evít
[
i
].
d©a
;

780 
e
->
com∂ëe
 = 1;

781 
e
->
a˘ive
 = 0;

782 
e
->
ªady
 = 1;

784 
aio
 = 
e
->
d©a
;

785 
aio
->
ªs
 = 
evít
[
i
].res;

787 
	`ngx_po°_evít
(
e
, &
ngx_po°ed_evíts
);

793 i‡(
evíts
 == 0) {

798 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

802 
	}
}

808 
	$ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

810 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

812 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_ïﬁl_c⁄f_t
));

813 i‡(
ïcf
 =
NULL
) {

814  
NULL
;

817 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

818 
ïcf
->
aio_ªque°s
 = 
NGX_CONF_UNSET
;

820  
ïcf
;

821 
	}
}

825 
	$ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

827 
ngx_ïﬁl_c⁄f_t
 *
ïcf
 = 
c⁄f
;

829 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 512);

830 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
aio_ªque°s
, 32);

832  
NGX_CONF_OK
;

833 
	}
}

	@src/event/modules/ngx_eventport_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EVENTPORT
)

15 
	#ush‹t_t
 
u_sh‹t


	)

16 
	#uöt_t
 
u_öt


	)

20 
	#PORT_SOURCE_AIO
 1

	)

21 
	#PORT_SOURCE_TIMER
 2

	)

22 
	#PORT_SOURCE_USER
 3

	)

23 
	#PORT_SOURCE_FD
 4

	)

24 
	#PORT_SOURCE_ALERT
 5

	)

25 
	#PORT_SOURCE_MQ
 6

	)

27 
	#ETIME
 64

	)

29 
	#SIGEV_PORT
 4

	)

32 
	mp‹ãv_evíts
;

33 
ush‹t_t
 
	mp‹ãv_sour˚
;

34 
ush‹t_t
 
	mp‹ãv_∑d
;

35 
uöçå_t
 
	mp‹ãv_obje˘
;

36 *
	mp‹ãv_u£r
;

37 } 
	tp‹t_evít_t
;

39 
	sp‹t_nŸify
 {

40 
	mp‹äfy_p‹t
;

41 *
	mp‹äfy_u£r
;

42 } 
	tp‹t_nŸify_t
;

44 #i‡(
__FªeBSD_vîsi⁄
 < 700005)

46 
	sôimî•ec
 {

47 
time•ec
 
	mô_öãrvÆ
;

48 
time•ec
 
	mô_vÆue
;

49 } 
	tôimî•ec_t
;

53 
	$p‹t_¸óã
()

56 
	}
}

58 
	$p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

59 *
u£r
)

62 
	}
}

64 
	$p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
)

67 
	}
}

69 
	$p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

70 
time•ec
 *
timeout
)

73 
	}
}

75 
	$timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
)

78 
	}
}

80 
	$timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

81 
ôimî•ec
 *
ovÆue
)

84 
	}
}

86 
	$timî_dñëe
(
timî_t
 
timîid
)

89 
	}
}

95 
ngx_uöt_t
 
	mevíts
;

96 } 
	tngx_evíç‹t_c⁄f_t
;

99 
ngx_öt_t
 
ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

100 
ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

101 
ngx_öt_t
 
ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

102 
ngx_uöt_t
 
Êags
);

103 
ngx_öt_t
 
ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

104 
ngx_uöt_t
 
Êags
);

105 
ngx_öt_t
 
ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

106 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

108 *
ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

109 *
ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

111 
	gï
 = -1;

112 
p‹t_evít_t
 *
	gevít_li°
;

113 
ngx_uöt_t
 
	g√víts
;

114 
timî_t
 
	gevít_timî
 = (timer_t) -1;

116 
ngx_°r_t
 
	gevíç‹t_«me
 = 
ngx_°rög
("eventport");

119 
ngx_comm™d_t
 
	gngx_evíç‹t_comm™ds
[] = {

121 { 
ngx_°rög
("eventport_events"),

122 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

123 
ngx_c⁄f_£t_num_¶Ÿ
,

125 
off£tof
(
ngx_evíç‹t_c⁄f_t
, 
evíts
),

126 
NULL
 },

128 
ngx_nuŒ_comm™d


132 
ngx_evít_moduÀ_t
 
	gngx_evíç‹t_moduÀ_˘x
 = {

133 &
evíç‹t_«me
,

134 
ngx_evíç‹t_¸óã_c⁄f
,

135 
ngx_evíç‹t_öô_c⁄f
,

138 
ngx_evíç‹t_add_evít
,

139 
ngx_evíç‹t_dñ_evít
,

140 
ngx_evíç‹t_add_evít
,

141 
ngx_evíç‹t_dñ_evít
,

142 
NULL
,

143 
NULL
,

144 
NULL
,

145 
ngx_evíç‹t_¥o˚ss_evíts
,

146 
ngx_evíç‹t_öô
,

147 
ngx_evíç‹t_d⁄e
,

152 
ngx_moduÀ_t
 
	gngx_evíç‹t_moduÀ
 = {

153 
NGX_MODULE_V1
,

154 &
ngx_evíç‹t_moduÀ_˘x
,

155 
ngx_evíç‹t_comm™ds
,

156 
NGX_EVENT_MODULE
,

157 
NULL
,

158 
NULL
,

159 
NULL
,

160 
NULL
,

161 
NULL
,

162 
NULL
,

163 
NULL
,

164 
NGX_MODULE_V1_PADDING


168 
ngx_öt_t


169 
	$ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

171 
p‹t_nŸify_t
 
≤
;

172 
ôimî•ec
 
ôs
;

173 
sigevít
 
£v
;

174 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

176 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíç‹t_moduÀ
);

178 i‡(
ï
 == -1) {

179 
ï
 = 
	`p‹t_¸óã
();

181 i‡(
ï
 == -1) {

182 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

184  
NGX_ERROR
;

188 i‡(
√víts
 < 
ïcf
->
evíts
) {

189 i‡(
evít_li°
) {

190 
	`ngx_‰ì
(
evít_li°
);

193 
evít_li°
 = 
	`ngx_Æloc
((
p‹t_evít_t
Ë* 
ïcf
->
evíts
,

194 
cy˛e
->
log
);

195 i‡(
evít_li°
 =
NULL
) {

196  
NGX_ERROR
;

200 
ngx_evít_Êags
 = 
NGX_USE_EVENTPORT_EVENT
;

202 i‡(
timî
) {

203 
	`ngx_memzîo
(&
≤
, (
p‹t_nŸify_t
));

204 
≤
.
p‹äfy_p‹t
 = 
ï
;

206 
	`ngx_memzîo
(&
£v
, (
sigevít
));

207 
£v
.
sigev_nŸify
 = 
SIGEV_PORT
;

208 #i‡!(
NGX_TEST_BUILD_EVENTPORT
)

209 
£v
.
sigev_vÆue
.
sivÆ_±r
 = &
≤
;

212 i‡(
	`timî_¸óã
(
CLOCK_REALTIME
, &
£v
, &
evít_timî
) == -1) {

213 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

215  
NGX_ERROR
;

218 
ôs
.
ô_öãrvÆ
.
tv_£c
 = 
timî
 / 1000;

219 
ôs
.
ô_öãrvÆ
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

220 
ôs
.
ô_vÆue
.
tv_£c
 = 
timî
 / 1000;

221 
ôs
.
ô_vÆue
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

223 i‡(
	`timî_£âime
(
evít_timî
, 0, &
ôs
, 
NULL
) == -1) {

224 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

226  
NGX_ERROR
;

229 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

232 
√víts
 = 
ïcf
->
evíts
;

234 
ngx_io
 = 
ngx_os_io
;

236 
ngx_evít_a˘i⁄s
 = 
ngx_evíç‹t_moduÀ_˘x
.
a˘i⁄s
;

238  
NGX_OK
;

239 
	}
}

243 
	$ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

245 i‡(
evít_timî
 !(
timî_t
) -1) {

246 i‡(
	`timî_dñëe
(
evít_timî
) == -1) {

247 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

251 
evít_timî
 = (
timî_t
) -1;

254 i‡(
	`˛o£
(
ï
) == -1) {

255 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

259 
ï
 = -1;

261 
	`ngx_‰ì
(
evít_li°
);

263 
evít_li°
 = 
NULL
;

264 
√víts
 = 0;

265 
	}
}

268 
ngx_öt_t


269 
	$ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

271 
ngx_öt_t
 
evíts
, 
¥ev
;

272 
ngx_evít_t
 *
e
;

273 
ngx_c⁄√˘i⁄_t
 *
c
;

275 
c
 = 
ev
->
d©a
;

277 
evíts
 = 
evít
;

279 i‡(
evít
 =
NGX_READ_EVENT
) {

280 
e
 = 
c
->
wrôe
;

281 
¥ev
 = 
POLLOUT
;

282 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

283 
evíts
 = 
POLLIN
;

287 
e
 = 
c
->
ªad
;

288 
¥ev
 = 
POLLIN
;

289 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

290 
evíts
 = 
POLLOUT
;

294 i‡(
e
->
⁄eshŸ
) {

295 
evíts
 |
¥ev
;

298 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

299 "evíç‹àaddÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evíts
);

301 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evíts
,

302 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

307  
NGX_ERROR
;

310 
ev
->
a˘ive
 = 1;

311 
ev
->
⁄eshŸ
 = 1;

313  
NGX_OK
;

314 
	}
}

317 
ngx_öt_t


318 
	$ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

320 
ngx_evít_t
 *
e
;

321 
ngx_c⁄√˘i⁄_t
 *
c
;

329 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

330 
ev
->
a˘ive
 = 0;

331 
ev
->
⁄eshŸ
 = 0;

332  
NGX_OK
;

335 
c
 = 
ev
->
d©a
;

337 i‡(
evít
 =
NGX_READ_EVENT
) {

338 
e
 = 
c
->
wrôe
;

339 
evít
 = 
POLLOUT
;

342 
e
 = 
c
->
ªad
;

343 
evít
 = 
POLLIN
;

346 i‡(
e
->
⁄eshŸ
) {

347 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

348 "evíç‹àch™gêevít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

350 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evít
,

351 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

354 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

356  
NGX_ERROR
;

360 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

361 "evíç‹àdñÉvít: fd:%d", 
c
->
fd
);

363 i‡(
	`p‹t_dissocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
) == -1) {

364 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

366  
NGX_ERROR
;

370 
ev
->
a˘ive
 = 0;

371 
ev
->
⁄eshŸ
 = 0;

373  
NGX_OK
;

374 
	}
}

377 
ngx_öt_t


378 
	$ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

379 
ngx_uöt_t
 
Êags
)

381 
n
, 
ªvíts
;

382 
u_öt
 
evíts
;

383 
ngx_îr_t
 
îr
;

384 
ngx_öt_t
 
ö°™˚
;

385 
ngx_uöt_t
 
i
, 
Àvñ
;

386 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
, **
queue
;

387 
ngx_c⁄√˘i⁄_t
 *
c
;

388 
time•ec
 
ts
, *
ç
;

390 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

391 
ç
 = 
NULL
;

394 
ts
.
tv_£c
 = 
timî
 / 1000;

395 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

396 
ç
 = &
ts
;

399 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

400 "evíç‹àtimî: %M", 
timî
);

402 
evíts
 = 1;

404 
n
 = 
	`p‹t_gën
(
ï
, 
evít_li°
, (
u_öt
Ë
√víts
, &
evíts
, 
ç
);

406 
îr
 = 
ngx_î∫o
;

408 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

409 
	`ngx_time_upd©e
();

412 i‡(
n
 == -1) {

413 i‡(
îr
 =
ETIME
) {

414 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

415  
NGX_OK
;

418 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

420  
NGX_ERROR
;

423 
Àvñ
 = (
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
;

424 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "port_getn() failed");

425  
NGX_ERROR
;

428 i‡(
evíts
 == 0) {

429 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

430  
NGX_OK
;

433 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

435  
NGX_ERROR
;

438 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

440 
i
 = 0; i < 
evíts
; i++) {

442 i‡(
evít_li°
[
i
].
p‹ãv_sour˚
 =
PORT_SOURCE_TIMER
) {

443 
	`ngx_time_upd©e
();

447 
ev
 = 
evít_li°
[
i
].
p‹ãv_u£r
;

449 
evít_li°
[
i
].
p‹ãv_sour˚
) {

451 
PORT_SOURCE_FD
:

453 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

454 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

456 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

463 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

464 "evíç‹t: sèÀÉvíà%p", 
ev
);

468 
ªvíts
 = 
evít_li°
[
i
].
p‹ãv_evíts
;

470 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

472 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

474 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

475 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

477 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

480 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

481 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

483 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

486 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

487 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

495 
ªvíts
 |
POLLIN
|
POLLOUT
;

498 
c
 = 
ev
->
d©a
;

499 
ªv
 = 
c
->
ªad
;

500 
wev
 = 
c
->
wrôe
;

502 
ªv
->
a˘ive
 = 0;

503 
wev
->
a˘ive
 = 0;

505 i‡(
ªvíts
 & 
POLLIN
) {

507 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

508 
ªv
->
po°ed_ªady
 = 1;

511 
ªv
->
ªady
 = 1;

514 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

515 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

516 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

518 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

521 
ªv
->
	`h™dÀr
(rev);

523 i‡(
ev
->
˛o£d
) {

528 i‡(
ªv
->
ac˚±
) {

529 i‡(
ngx_u£_ac˚±_muãx
) {

530 
ngx_ac˚±_evíts
 = 1;

534 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
POLLIN
,

535 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

538 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

540  
NGX_ERROR
;

545 i‡(
ªvíts
 & 
POLLOUT
) {

547 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

548 
wev
->
po°ed_ªady
 = 1;

551 
wev
->
ªady
 = 1;

554 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

555 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

558 
wev
->
	`h™dÀr
(wev);

565 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

567 
evít_li°
[
i
].
p‹ãv_obje˘
);

572 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

574  
NGX_OK
;

575 
	}
}

579 
	$ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

581 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

583 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evíç‹t_c⁄f_t
));

584 i‡(
ïcf
 =
NULL
) {

585  
NULL
;

588 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

590  
ïcf
;

591 
	}
}

595 
	$ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

597 
ngx_evíç‹t_c⁄f_t
 *
ïcf
 = 
c⁄f
;

599 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 32);

601  
NGX_CONF_OK
;

602 
	}
}

	@src/event/modules/ngx_kqueue_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mch™ges
;

15 
ngx_uöt_t
 
	mevíts
;

16 } 
	tngx_kqueue_c⁄f_t
;

19 
ngx_öt_t
 
ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

20 
ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_öt_t
 
ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

22 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

24 
ngx_uöt_t
 
Êags
);

25 
ngx_öt_t
 
ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
fûãr
,

26 
ngx_uöt_t
 
Êags
);

27 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_ch™ges
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
åy
);

28 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

29 
ngx_uöt_t
 
Êags
);

30 
ngx_ölöe
 
ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
,

31 
kevít
 *
kev
);

33 *
ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

34 *
ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

37 
	gngx_kqueue
 = -1;

47 
kevít
 *
	gch™ge_li°
, *
	gch™ge_li°0
, *
	gch™ge_li°1
;

48 
kevít
 *
	gevít_li°
;

49 
ngx_uöt_t
 
	gmax_ch™ges
, 
	gnch™ges
, 
	g√víts
;

51 #i‡(
NGX_THREADS
)

52 
ngx_muãx_t
 *
	gli°_muãx
;

53 
ngx_muãx_t
 *
	gkevít_muãx
;

58 
ngx_°r_t
 
	gkqueue_«me
 = 
ngx_°rög
("kqueue");

60 
ngx_comm™d_t
 
	gngx_kqueue_comm™ds
[] = {

62 { 
ngx_°rög
("kqueue_changes"),

63 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_c⁄f_£t_num_¶Ÿ
,

66 
off£tof
(
ngx_kqueue_c⁄f_t
, 
ch™ges
),

67 
NULL
 },

69 { 
ngx_°rög
("kqueue_events"),

70 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

71 
ngx_c⁄f_£t_num_¶Ÿ
,

73 
off£tof
(
ngx_kqueue_c⁄f_t
, 
evíts
),

74 
NULL
 },

76 
ngx_nuŒ_comm™d


80 
ngx_evít_moduÀ_t
 
	gngx_kqueue_moduÀ_˘x
 = {

81 &
kqueue_«me
,

82 
ngx_kqueue_¸óã_c⁄f
,

83 
ngx_kqueue_öô_c⁄f
,

86 
ngx_kqueue_add_evít
,

87 
ngx_kqueue_dñ_evít
,

88 
ngx_kqueue_add_evít
,

89 
ngx_kqueue_dñ_evít
,

90 
NULL
,

91 
NULL
,

92 
ngx_kqueue_¥o˚ss_ch™ges
,

93 
ngx_kqueue_¥o˚ss_evíts
,

94 
ngx_kqueue_öô
,

95 
ngx_kqueue_d⁄e


100 
ngx_moduÀ_t
 
	gngx_kqueue_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_kqueue_moduÀ_˘x
,

103 
ngx_kqueue_comm™ds
,

104 
NGX_EVENT_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_öt_t


117 
	$ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

119 
ngx_kqueue_c⁄f_t
 *
kcf
;

120 
time•ec
 
ts
;

121 #i‡(
NGX_HAVE_TIMER_EVENT
)

122 
kevít
 
kev
;

125 
kcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_kqueue_moduÀ
);

127 i‡(
ngx_kqueue
 == -1) {

128 
ngx_kqueue
 = 
	`kqueue
();

130 i‡(
ngx_kqueue
 == -1) {

131 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

133  
NGX_ERROR
;

136 #i‡(
NGX_THREADS
)

138 
li°_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

139 i‡(
li°_muãx
 =
NULL
) {

140  
NGX_ERROR
;

143 
kevít_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

144 i‡(
kevít_muãx
 =
NULL
) {

145  
NGX_ERROR
;

151 i‡(
max_ch™ges
 < 
kcf
->
ch™ges
) {

152 i‡(
nch™ges
) {

153 
ts
.
tv_£c
 = 0;

154 
ts
.
tv_n£c
 = 0;

156 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

161  
NGX_ERROR
;

163 
nch™ges
 = 0;

166 i‡(
ch™ge_li°0
) {

167 
	`ngx_‰ì
(
ch™ge_li°0
);

170 
ch™ge_li°0
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

171 
cy˛e
->
log
);

172 i‡(
ch™ge_li°0
 =
NULL
) {

173  
NGX_ERROR
;

176 i‡(
ch™ge_li°1
) {

177 
	`ngx_‰ì
(
ch™ge_li°1
);

180 
ch™ge_li°1
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

181 
cy˛e
->
log
);

182 i‡(
ch™ge_li°1
 =
NULL
) {

183  
NGX_ERROR
;

186 
ch™ge_li°
 = 
ch™ge_li°0
;

189 
max_ch™ges
 = 
kcf
->
ch™ges
;

191 i‡(
√víts
 < 
kcf
->
evíts
) {

192 i‡(
evít_li°
) {

193 
	`ngx_‰ì
(
evít_li°
);

196 
evít_li°
 = 
	`ngx_Æloc
(
kcf
->
evíts
 * (
kevít
), 
cy˛e
->
log
);

197 i‡(
evít_li°
 =
NULL
) {

198  
NGX_ERROR
;

202 
ngx_evít_Êags
 = 
NGX_USE_ONESHOT_EVENT


203 |
NGX_USE_KQUEUE_EVENT


204 |
NGX_USE_VNODE_EVENT
;

206 #i‡(
NGX_HAVE_TIMER_EVENT
)

208 i‡(
timî
) {

209 
kev
.
idít
 = 0;

210 
kev
.
fûãr
 = 
EVFILT_TIMER
;

211 
kev
.
Êags
 = 
EV_ADD
|
EV_ENABLE
;

212 
kev
.
fÊags
 = 0;

213 
kev
.
d©a
 = 
timî
;

214 
kev
.
ud©a
 = 0;

216 
ts
.
tv_£c
 = 0;

217 
ts
.
tv_n£c
 = 0;

219 i‡(
	`kevít
(
ngx_kqueue
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

220 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

222  
NGX_ERROR
;

225 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

230 #i‡(
NGX_HAVE_CLEAR_EVENT
)

231 
ngx_evít_Êags
 |
NGX_USE_CLEAR_EVENT
;

233 
ngx_evít_Êags
 |
NGX_USE_LEVEL_EVENT
;

236 #i‡(
NGX_HAVE_LOWAT_EVENT
)

237 
ngx_evít_Êags
 |
NGX_USE_LOWAT_EVENT
;

240 
√víts
 = 
kcf
->
evíts
;

242 
ngx_io
 = 
ngx_os_io
;

244 
ngx_evít_a˘i⁄s
 = 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
;

246  
NGX_OK
;

247 
	}
}

251 
	$ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

253 i‡(
	`˛o£
(
ngx_kqueue
) == -1) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

258 
ngx_kqueue
 = -1;

260 #i‡(
NGX_THREADS
)

261 
	`ngx_muãx_de°roy
(
kevít_muãx
);

262 
	`ngx_muãx_de°roy
(
li°_muãx
);

265 
	`ngx_‰ì
(
ch™ge_li°1
);

266 
	`ngx_‰ì
(
ch™ge_li°0
);

267 
	`ngx_‰ì
(
evít_li°
);

269 
ch™ge_li°1
 = 
NULL
;

270 
ch™ge_li°0
 = 
NULL
;

271 
ch™ge_li°
 = 
NULL
;

272 
evít_li°
 = 
NULL
;

273 
max_ch™ges
 = 0;

274 
nch™ges
 = 0;

275 
√víts
 = 0;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

282 
ngx_öt_t
 
rc
;

284 
ngx_evít_t
 *
e
;

285 
ngx_c⁄√˘i⁄_t
 *
c
;

288 
ev
->
a˘ive
 = 1;

289 
ev
->
dißbÀd
 = 0;

290 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

292 
	`ngx_muãx_lock
(
li°_muãx
);

296 i‡(
ev
->
ödex
 < 
nch™ges


297 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

298 =(
uöçå_t
Ë
ev
)

300 i‡(
ch™ge_li°
[
ev
->
ödex
].
Êags
 =
EV_DISABLE
) {

307 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

309 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

311 i‡(
ev
->
ödex
 < --
nch™ges
) {

312 
e
 = (
ngx_evít_t
 *)

313 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

314 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

315 
e
->
ödex
 = 
ev
->index;

318 
	`ngx_muãx_u∆ock
(
li°_muãx
);

320  
NGX_OK
;

323 
c
 = 
ev
->
d©a
;

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

326 "¥eviou†evíà⁄ #%d wîênŸÖas£d i¿kî√l", 
c
->
fd
);

328 
	`ngx_muãx_u∆ock
(
li°_muãx
);

330  
NGX_ERROR
;

335 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
EV_ADD
|
EV_ENABLE
|
Êags
);

337 
	`ngx_muãx_u∆ock
(
li°_muãx
);

339  
rc
;

340 
	}
}

343 
ngx_öt_t


344 
	$ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

346 
ngx_öt_t
 
rc
;

347 
ngx_evít_t
 *
e
;

349 
ev
->
a˘ive
 = 0;

350 
ev
->
dißbÀd
 = 0;

352 
	`ngx_muãx_lock
(
li°_muãx
);

354 i‡(
ev
->
ödex
 < 
nch™ges


355 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

356 =(
uöçå_t
Ë
ev
)

358 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

360 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

364 
nch™ges
--;

366 i‡(
ev
->
ödex
 < 
nch™ges
) {

367 
e
 = (
ngx_evít_t
 *)

368 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

369 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

370 
e
->
ödex
 = 
ev
->index;

373 
	`ngx_muãx_u∆ock
(
li°_muãx
);

375  
NGX_OK
;

384 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

385 
	`ngx_muãx_u∆ock
(
li°_muãx
);

386  
NGX_OK
;

389 i‡(
Êags
 & 
NGX_DISABLE_EVENT
) {

390 
ev
->
dißbÀd
 = 1;

393 
Êags
 |
EV_DELETE
;

396 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
Êags
);

398 
	`ngx_muãx_u∆ock
(
li°_muãx
);

400  
rc
;

401 
	}
}

404 
ngx_öt_t


405 
	$ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
fûãr
, 
ngx_uöt_t
 
Êags
)

407 
kevít
 *
kev
;

408 
time•ec
 
ts
;

409 
ngx_c⁄√˘i⁄_t
 *
c
;

411 
c
 = 
ev
->
d©a
;

413 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

415 
c
->
fd
, 
fûãr
, 
Êags
);

417 i‡(
nch™ges
 >
max_ch™ges
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

421 
ts
.
tv_£c
 = 0;

422 
ts
.
tv_n£c
 = 0;

424 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

428  
NGX_ERROR
;

431 
nch™ges
 = 0;

434 
kev
 = &
ch™ge_li°
[
nch™ges
];

436 
kev
->
idít
 = 
c
->
fd
;

437 
kev
->
fûãr
 = () filter;

438 
kev
->
Êags
 = (
u_sh‹t
) flags;

439 
kev
->
ud©a
 = 
	`NGX_KQUEUE_UDATA_T
 ((
uöçå_t
Ë
ev
 |Év->
ö°™˚
);

441 i‡(
fûãr
 =
EVFILT_VNODE
) {

442 
kev
->
fÊags
 = 
NOTE_DELETE
|
NOTE_WRITE
|
NOTE_EXTEND


443 |
NOTE_ATTRIB
|
NOTE_RENAME


444 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 430000) \

445 || 
__FªeBSD_vîsi⁄
 >= 500018

446 |
NOTE_REVOKE


449 
kev
->
d©a
 = 0;

452 #i‡(
NGX_HAVE_LOWAT_EVENT
)

453 i‡(
Êags
 & 
NGX_LOWAT_EVENT
) {

454 
kev
->
fÊags
 = 
NOTE_LOWAT
;

455 
kev
->
d©a
 = 
ev
->
avaûabÀ
;

458 
kev
->
fÊags
 = 0;

459 
kev
->
d©a
 = 0;

462 
kev
->
fÊags
 = 0;

463 
kev
->
d©a
 = 0;

467 
ev
->
ödex
 = 
nch™ges
;

468 
nch™ges
++;

470 i‡(
Êags
 & 
NGX_FLUSH_EVENT
) {

471 
ts
.
tv_£c
 = 0;

472 
ts
.
tv_n£c
 = 0;

474 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "kevent flush");

476 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

479 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

480  
NGX_ERROR
;

483 
nch™ges
 = 0;

486  
NGX_OK
;

487 
	}
}

490 
ngx_öt_t


491 
	$ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

492 
ngx_uöt_t
 
Êags
)

494 
evíts
, 
n
;

495 
ngx_öt_t
 
i
, 
ö°™˚
;

496 
ngx_uöt_t
 
Àvñ
;

497 
ngx_îr_t
 
îr
;

498 
ngx_evít_t
 *
ev
, **
queue
;

499 
time•ec
 
ts
, *
ç
;

501 i‡(
ngx_thªaded
) {

502 i‡(
	`ngx_kqueue_¥o˚ss_ch™ges
(
cy˛e
, 0Ë=
NGX_ERROR
) {

503  
NGX_ERROR
;

506 
n
 = 0;

509 
n
 = (Ë
nch™ges
;

510 
nch™ges
 = 0;

513 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

514 
ç
 = 
NULL
;

518 
ts
.
tv_£c
 = 
timî
 / 1000;

519 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

527 #i‡(
NGX_DARWIN_KEVENT_BUG
)

528 
ts
.
tv_n£c
 <<= 32;

531 
ç
 = &
ts
;

534 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

535 "kevíàtimî: %M, ch™ges: %d", 
timî
, 
n
);

537 
evíts
 = 
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, 
n
, 
evít_li°
, (Ë
√víts
, 
ç
);

539 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

541 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

542 
	`ngx_time_upd©e
();

545 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

546 "kevíàevíts: %d", 
evíts
);

548 i‡(
îr
) {

549 i‡(
îr
 =
NGX_EINTR
) {

551 i‡(
ngx_evít_timî_Æ¨m
) {

552 
ngx_evít_timî_Æ¨m
 = 0;

553  
NGX_OK
;

556 
Àvñ
 = 
NGX_LOG_INFO
;

559 
Àvñ
 = 
NGX_LOG_ALERT
;

562 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "kevent() failed");

563  
NGX_ERROR
;

566 i‡(
evíts
 == 0) {

567 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

568  
NGX_OK
;

571 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

573  
NGX_ERROR
;

576 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

578 
i
 = 0; i < 
evíts
; i++) {

580 
	`ngx_kqueue_dump_evít
(
cy˛e
->
log
, &
evít_li°
[
i
]);

582 i‡(
evít_li°
[
i
].
Êags
 & 
EV_ERROR
) {

583 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
evít_li°
[
i
].
d©a
,

585 
evít_li°
[
i
].
idít
,Évít_li°[i].
fûãr
,

586 
evít_li°
[
i
].
Êags
);

590 #i‡(
NGX_HAVE_TIMER_EVENT
)

592 i‡(
evít_li°
[
i
].
fûãr
 =
EVFILT_TIMER
) {

593 
	`ngx_time_upd©e
();

599 
ev
 = (
ngx_evít_t
 *Ë
evít_li°
[
i
].
ud©a
;

601 
evít_li°
[
i
].
fûãr
) {

603 
EVFILT_READ
:

604 
EVFILT_WRITE
:

606 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

607 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

609 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

616 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

617 "kevít: sèÀÉvíà%p", 
ev
);

621 i‡(
ev
->
log
 && (ev->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

622 
	`ngx_kqueue_dump_evít
(
ev
->
log
, &
evít_li°
[
i
]);

625 i‡(
ev
->
⁄eshŸ
) {

626 
ev
->
a˘ive
 = 0;

629 #i‡(
NGX_THREADS
)

631 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ev
->
ac˚±
) {

632 
ev
->
po°ed_ªady
 = 1;

633 
ev
->
po°ed_avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

635 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

636 
ev
->
po°ed_eof
 = 1;

637 
ev
->
po°ed_î∫o
 = 
evít_li°
[
i
].
fÊags
;

640 
	`ngx_locked_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

647 
ev
->
avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

649 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

650 
ev
->
≥ndög_eof
 = 1;

651 
ev
->
kq_î∫o
 = 
evít_li°
[
i
].
fÊags
;

654 
ev
->
ªady
 = 1;

658 
EVFILT_VNODE
:

659 
ev
->
kq_vnode
 = 1;

663 
EVFILT_AIO
:

664 
ev
->
com∂ëe
 = 1;

665 
ev
->
ªady
 = 1;

670 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

672 
evít_li°
[
i
].
fûãr
);

676 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

677 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

678 &
ngx_po°ed_evíts
);

679 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

684 
ev
->
	`h™dÀr
(ev);

687 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

689  
NGX_OK
;

690 
	}
}

693 
ngx_öt_t


694 
	$ngx_kqueue_¥o˚ss_ch™ges
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
åy
)

696 
n
;

697 
ngx_öt_t
 
rc
;

698 
ngx_îr_t
 
îr
;

699 
time•ec
 
ts
;

700 
kevít
 *
ch™ges
;

702 
	`ngx_muãx_lock
(
kevít_muãx
);

704 
	`ngx_muãx_lock
(
li°_muãx
);

706 i‡(
nch™ges
 == 0) {

707 
	`ngx_muãx_u∆ock
(
li°_muãx
);

708 
	`ngx_muãx_u∆ock
(
kevít_muãx
);

709  
NGX_OK
;

712 
ch™ges
 = 
ch™ge_li°
;

713 i‡(
ch™ge_li°
 =
ch™ge_li°0
) {

714 
ch™ge_li°
 = 
ch™ge_li°1
;

716 
ch™ge_li°
 = 
ch™ge_li°0
;

719 
n
 = (Ë
nch™ges
;

720 
nch™ges
 = 0;

722 
	`ngx_muãx_u∆ock
(
li°_muãx
);

724 
ts
.
tv_£c
 = 0;

725 
ts
.
tv_n£c
 = 0;

727 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

728 "kevíàch™ges: %d", 
n
);

730 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ges
, 
n
, 
NULL
, 0, &
ts
) == -1) {

731 
îr
 = 
ngx_î∫o
;

732 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

733 
cy˛e
->
log
, 
îr
, "kevent() failed");

734 
rc
 = 
NGX_ERROR
;

737 
rc
 = 
NGX_OK
;

740 
	`ngx_muãx_u∆ock
(
kevít_muãx
);

742  
rc
;

743 
	}
}

746 
ngx_ölöe
 

747 
	$ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
, 
kevít
 *
kev
)

749 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

750 (
kev
->
idít
 > 0x8000000 && kev->ident != () -1) ?

753 
kev
->
idít
, kev->
fûãr
,

754 
kev
->
Êags
, kev->
fÊags
,

755 
kev
->
d©a
, kev->
ud©a
);

756 
	}
}

760 
	$ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

762 
ngx_kqueue_c⁄f_t
 *
kcf
;

764 
kcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_kqueue_c⁄f_t
));

765 i‡(
kcf
 =
NULL
) {

766  
NULL
;

769 
kcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

770 
kcf
->
evíts
 = 
NGX_CONF_UNSET
;

772  
kcf
;

773 
	}
}

777 
	$ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

779 
ngx_kqueue_c⁄f_t
 *
kcf
 = 
c⁄f
;

781 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
ch™ges
, 512);

782 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
evíts
, 512);

784  
NGX_CONF_OK
;

785 
	}
}

	@src/event/modules/ngx_poll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 *
ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

24 
pﬁlfd
 *
	gevít_li°
;

25 
ngx_öt_t
 
	g√víts
;

28 
ngx_°r_t
 
	gpﬁl_«me
 = 
ngx_°rög
("poll");

30 
ngx_evít_moduÀ_t
 
	gngx_pﬁl_moduÀ_˘x
 = {

31 &
pﬁl_«me
,

32 
NULL
,

33 
ngx_pﬁl_öô_c⁄f
,

36 
ngx_pﬁl_add_evít
,

37 
ngx_pﬁl_dñ_evít
,

38 
ngx_pﬁl_add_evít
,

39 
ngx_pﬁl_dñ_evít
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
ngx_pﬁl_¥o˚ss_evíts
,

44 
ngx_pﬁl_öô
,

45 
ngx_pﬁl_d⁄e


50 
ngx_moduÀ_t
 
	gngx_pﬁl_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_pﬁl_moduÀ_˘x
,

53 
NULL
,

54 
NGX_EVENT_MODULE
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
ngx_öt_t


68 
	$ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

70 
pﬁlfd
 *
li°
;

72 i‡(
evít_li°
 =
NULL
) {

73 
√víts
 = 0;

76 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


77 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


78 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

80 
li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
cy˛e
->
c⁄√˘i⁄_n
,

81 
cy˛e
->
log
);

82 i‡(
li°
 =
NULL
) {

83  
NGX_ERROR
;

86 i‡(
evít_li°
) {

87 
	`ngx_mem˝y
(
li°
, 
evít_li°
, (
ngx_evít_t
 *Ë* 
√víts
);

88 
	`ngx_‰ì
(
evít_li°
);

91 
evít_li°
 = 
li°
;

94 
ngx_io
 = 
ngx_os_io
;

96 
ngx_evít_a˘i⁄s
 = 
ngx_pﬁl_moduÀ_˘x
.
a˘i⁄s
;

98 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

100  
NGX_OK
;

101 
	}
}

105 
	$ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

107 
	`ngx_‰ì
(
evít_li°
);

109 
evít_li°
 = 
NULL
;

110 
	}
}

113 
ngx_öt_t


114 
	$ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

116 
ngx_evít_t
 *
e
;

117 
ngx_c⁄√˘i⁄_t
 *
c
;

119 
c
 = 
ev
->
d©a
;

121 
ev
->
a˘ive
 = 1;

123 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

125 "pﬁ»evíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

126  
NGX_OK
;

129 i‡(
evít
 =
NGX_READ_EVENT
) {

130 
e
 = 
c
->
wrôe
;

131 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

132 
evít
 = 
POLLIN
;

136 
e
 = 
c
->
ªad
;

137 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

138 
evít
 = 
POLLOUT
;

142 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

143 "pﬁ»addÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

145 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

146 
evít_li°
[
√víts
].
fd
 = 
c
->fd;

147 
evít_li°
[
√víts
].
evíts
 = (Ë
evít
;

148 
evít_li°
[
√víts
].
ªvíts
 = 0;

150 
ev
->
ödex
 = 
√víts
;

151 
√víts
++;

154 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

155 "pﬁ»add index: %i", 
e
->
ödex
);

157 
evít_li°
[
e
->
ödex
].
evíts
 |(Ë
evít
;

158 
ev
->
ödex
 = 
e
->index;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

168 
ngx_evít_t
 *
e
;

169 
ngx_c⁄√˘i⁄_t
 *
c
;

171 
c
 = 
ev
->
d©a
;

173 
ev
->
a˘ive
 = 0;

175 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

178 
c
->
fd
, 
evít
);

179  
NGX_OK
;

182 i‡(
evít
 =
NGX_READ_EVENT
) {

183 
e
 = 
c
->
wrôe
;

184 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

185 
evít
 = 
POLLIN
;

189 
e
 = 
c
->
ªad
;

190 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

191 
evít
 = 
POLLOUT
;

195 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

196 "pﬁ»dñÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

198 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

199 
√víts
--;

201 i‡(
ev
->
ödex
 < (
ngx_uöt_t
Ë
√víts
) {

203 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

204 "ödex: c›yÉvíà%uòtÿ%i", 
√víts
, 
ev
->
ödex
);

206 
evít_li°
[
ev
->
ödex
] =Évít_li°[
√víts
];

208 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
√víts
].
fd
];

210 i‡(
c
->
fd
 == -1) {

211 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

215 i‡(
c
->
ªad
->
ödex
 =(
ngx_uöt_t
Ë
√víts
) {

216 
c
->
ªad
->
ödex
 = 
ev
->index;

219 i‡(
c
->
wrôe
->
ödex
 =(
ngx_uöt_t
Ë
√víts
) {

220 
c
->
wrôe
->
ödex
 = 
ev
->index;

226 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

227 "pﬁ»dñ index: %i", 
e
->
ödex
);

229 
evít_li°
[
e
->
ödex
].
evíts
 &(Ë~
evít
;

232 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

234  
NGX_OK
;

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

241 
ªady
, 
ªvíts
;

242 
ngx_îr_t
 
îr
;

243 
ngx_öt_t
 
i
, 
ƒódy
;

244 
ngx_uöt_t
 
found
, 
Àvñ
;

245 
ngx_evít_t
 *
ev
, **
queue
;

246 
ngx_c⁄√˘i⁄_t
 *
c
;

250 #i‡(
NGX_DEBUG0
)

251 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

252 
i
 = 0; i < 
√víts
; i++) {

253 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

255 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
);

260 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "pﬁ»timî: %M", 
timî
);

262 
ªady
 = 
	`pﬁl
(
evít_li°
, (
u_öt
Ë
√víts
, (Ë
timî
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "pﬁ»ªady %d o‡%d", 
ªady
, 
√víts
);

273 i‡(
îr
) {

274 i‡(
îr
 =
NGX_EINTR
) {

276 i‡(
ngx_evít_timî_Æ¨m
) {

277 
ngx_evít_timî_Æ¨m
 = 0;

278  
NGX_OK
;

281 
Àvñ
 = 
NGX_LOG_INFO
;

284 
Àvñ
 = 
NGX_LOG_ALERT
;

287 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "poll() failed");

288  
NGX_ERROR
;

291 i‡(
ªady
 == 0) {

292 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

293  
NGX_OK
;

296 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

298  
NGX_ERROR
;

301 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

303 
ƒódy
 = 0;

305 
i
 = 0; i < 
√víts
 && 
ªady
; i++) {

307 
ªvíts
 = 
evít_li°
[
i
].revents;

310 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

312 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

314 i‡(
ªvíts
) {

315 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

317 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

321 i‡(
ªvíts
 & 
POLLNVAL
) {

322 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

324 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

327 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

328 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

330 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

333 i‡(
evít_li°
[
i
].
fd
 == -1) {

341 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
i
].
fd
];

343 i‡(
c
->
fd
 == -1) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "unexpectedÉvent");

351 i‡(
i
 =
√víts
 - 1) {

352 
√víts
--;

354 
evít_li°
[
i
].
fd
 = -1;

360 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

361 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

369 
ªvíts
 |
POLLIN
|
POLLOUT
;

372 
found
 = 0;

374 i‡(
ªvíts
 & 
POLLIN
) {

375 
found
 = 1;

377 
ev
 = 
c
->
ªad
;

379 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ev
->
ac˚±
) {

380 
ev
->
po°ed_ªady
 = 1;

383 
ev
->
ªady
 = 1;

386 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

387 &
ngx_po°ed_evíts
);

388 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

391 i‡(
ªvíts
 & 
POLLOUT
) {

392 
found
 = 1;

393 
ev
 = 
c
->
wrôe
;

395 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

396 
ev
->
po°ed_ªady
 = 1;

399 
ev
->
ªady
 = 1;

402 
	`ngx_locked_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

405 i‡(
found
) {

406 
ªady
--;

411 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

413 i‡(
ªady
 != 0) {

414 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "pollÑeady !=Évents");

417  
ƒódy
;

418 
	}
}

422 
	$ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

424 
ngx_evít_c⁄f_t
 *
ecf
;

426 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

428 i‡(
ecf
->
u£
 !
ngx_pﬁl_moduÀ
.
˘x_ödex
) {

429  
NGX_CONF_OK
;

432 #i‡(
NGX_THREADS
)

434 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

436  
NGX_CONF_ERROR
;

440  
NGX_CONF_OK
;

443 
	}
}

	@src/event/modules/ngx_rtsig_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_RTSIG
)

15 #ifde‡ 
SIGRTMIN


16 
	#si_fd
 
_ªas⁄
.
__•¨e__
.
__•¨e2__
[0]

	)

18 
	#SIGRTMIN
 33

	)

19 
	#si_fd
 
__•¨e__
[0]

	)

22 
	#F_SETSIG
 10

	)

23 
	#KERN_RTSIGNR
 30

	)

24 
	#KERN_RTSIGMAX
 31

	)

26 
	$sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

27 c⁄° 
time•ec
 *
timeout
)

30 
	}
}

32 
	gngx_löux_πsig_max
;

38 
ngx_uöt_t
 
	msigno
;

39 
ngx_uöt_t
 
	movîÊow_evíts
;

40 
ngx_uöt_t
 
	movîÊow_ã°
;

41 
ngx_uöt_t
 
	movîÊow_thªshﬁd
;

42 } 
	tngx_πsig_c⁄f_t
;

45 
ngx_evít_moduÀ_t
 
ngx_pﬁl_moduÀ_˘x
;

47 
ngx_öt_t
 
ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

48 
ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

49 
ngx_öt_t
 
ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

50 
ngx_öt_t
 
ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

51 
ngx_uöt_t
 
Êags
);

52 
ngx_öt_t
 
ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

53 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

54 
ngx_öt_t
 
ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
,

55 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

57 *
ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

58 *
ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

59 *
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
,

60 *
po°
, *
d©a
);

63 
sig£t_t
 
	g£t
;

64 
ngx_uöt_t
 
	govîÊow
, 
	govîÊow_cuºít
;

65 
pﬁlfd
 *
	govîÊow_li°
;

68 
ngx_°r_t
 
	gπsig_«me
 = 
ngx_°rög
("rtsig");

70 
ngx_c⁄f_num_bounds_t
 
	gngx_ovîÊow_thªshﬁd_bounds
 = {

71 
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
, 2, 10

75 
ngx_comm™d_t
 
	gngx_πsig_comm™ds
[] = {

77 { 
ngx_°rög
("rtsig_signo"),

78 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_num_¶Ÿ
,

81 
off£tof
(
ngx_πsig_c⁄f_t
, 
signo
),

82 
NULL
 },

84 { 
ngx_°rög
("rtsig_overflow_events"),

85 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_num_¶Ÿ
,

88 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_evíts
),

89 
NULL
 },

91 { 
ngx_°rög
("rtsig_overflow_test"),

92 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_num_¶Ÿ
,

95 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_ã°
),

96 
NULL
 },

98 { 
ngx_°rög
("rtsig_overflow_threshold"),

99 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_num_¶Ÿ
,

102 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_thªshﬁd
),

103 &
ngx_ovîÊow_thªshﬁd_bounds
 },

105 
ngx_nuŒ_comm™d


109 
ngx_evít_moduÀ_t
 
	gngx_πsig_moduÀ_˘x
 = {

110 &
πsig_«me
,

111 
ngx_πsig_¸óã_c⁄f
,

112 
ngx_πsig_öô_c⁄f
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
ngx_πsig_add_c⁄√˘i⁄
,

120 
ngx_πsig_dñ_c⁄√˘i⁄
,

121 
NULL
,

122 
ngx_πsig_¥o˚ss_evíts
,

123 
ngx_πsig_öô
,

124 
ngx_πsig_d⁄e
,

129 
ngx_moduÀ_t
 
	gngx_πsig_moduÀ
 = {

130 
NGX_MODULE_V1
,

131 &
ngx_πsig_moduÀ_˘x
,

132 
ngx_πsig_comm™ds
,

133 
NGX_EVENT_MODULE
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NGX_MODULE_V1_PADDING


145 
ngx_öt_t


146 
	$ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

148 
ngx_πsig_c⁄f_t
 *
πscf
;

150 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

152 
	`sigem±y£t
(&
£t
);

153 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
);

154 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
 + 1);

155 
	`sigadd£t
(&
£t
, 
SIGIO
);

156 
	`sigadd£t
(&
£t
, 
SIGALRM
);

158 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

159 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

161  
NGX_ERROR
;

164 i‡(
ovîÊow_li°
) {

165 
	`ngx_‰ì
(
ovîÊow_li°
);

168 
ovîÊow_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
πscf
->
ovîÊow_evíts
,

169 
cy˛e
->
log
);

170 i‡(
ovîÊow_li°
 =
NULL
) {

171  
NGX_ERROR
;

174 
ngx_io
 = 
ngx_os_io
;

176 
ngx_evít_a˘i⁄s
 = 
ngx_πsig_moduÀ_˘x
.
a˘i⁄s
;

178 
ngx_evít_Êags
 = 
NGX_USE_RTSIG_EVENT


179 |
NGX_USE_GREEDY_EVENT


180 |
NGX_USE_FD_EVENT
;

182  
NGX_OK
;

183 
	}
}

187 
	$ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

189 
	`ngx_‰ì
(
ovîÊow_li°
);

191 
ovîÊow_li°
 = 
NULL
;

192 
	}
}

195 
ngx_öt_t


196 
	$ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

198 
ngx_uöt_t
 
signo
;

199 
ngx_πsig_c⁄f_t
 *
πscf
;

201 i‡(
c
->
ªad
->
ac˚±
 && c->ªad->
dißbÀd
) {

203 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

204 "πsigÉ«bÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

206 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

207 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

209  
NGX_ERROR
;

212 
c
->
ªad
->
a˘ive
 = 1;

213 
c
->
ªad
->
dißbÀd
 = 0;

216 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

218 
signo
 = 
πscf
->signÿ+ 
c
->
ªad
->
ö°™˚
;

220 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

221 "πsigádd c⁄√˘i⁄: fd:%d signo:%ui", 
c
->
fd
, 
signo
);

223 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
|
O_ASYNC
) == -1) {

224 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

226  
NGX_ERROR
;

229 i‡(
	`f˙é
(
c
->
fd
, 
F_SETSIG
, (Ë
signo
) == -1) {

230 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

232  
NGX_ERROR
;

235 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

236 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

238  
NGX_ERROR
;

241 #i‡(
NGX_HAVE_ONESIGFD
)

242 i‡(
	`f˙é
(
c
->
fd
, 
F_SETAUXFL
, 
O_ONESIGFD
) == -1) {

243 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

245  
NGX_ERROR
;

249 
c
->
ªad
->
a˘ive
 = 1;

250 
c
->
wrôe
->
a˘ive
 = 1;

252  
NGX_OK
;

253 
	}
}

256 
ngx_öt_t


257 
	$ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

259 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

260 "πsig dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

262 i‡((
Êags
 & 
NGX_DISABLE_EVENT
Ë&& 
c
->
ªad
->
ac˚±
) {

264 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

265 "πsig dißbÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

267 
c
->
ªad
->
a˘ive
 = 0;

268 
c
->
ªad
->
dißbÀd
 = 1;

269  
NGX_OK
;

272 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

273 
c
->
ªad
->
a˘ive
 = 0;

274 
c
->
wrôe
->
a˘ive
 = 0;

275  
NGX_OK
;

278 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
) == -1) {

279 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

281  
NGX_ERROR
;

284 
c
->
ªad
->
a˘ive
 = 0;

285 
c
->
wrôe
->
a˘ive
 = 0;

287  
NGX_OK
;

288 
	}
}

291 
ngx_öt_t


292 
	$ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

294 
signo
;

295 
ngx_öt_t
 
ö°™˚
;

296 
ngx_îr_t
 
îr
;

297 
sigöfo_t
 
si
;

298 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

299 
time•ec
 
ts
, *
ç
;

300 
siga˘i⁄
 
ß
;

301 
ngx_c⁄√˘i⁄_t
 *
c
;

302 
ngx_πsig_c⁄f_t
 *
πscf
;

304 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

305 
ç
 = 
NULL
;

308 
ts
.
tv_£c
 = 
timî
 / 1000;

309 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

310 
ç
 = &
ts
;

313 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

314 "πsigÅimî: %M", 
timî
);

318 
signo
 = 
	`sigtimedwaô
(&
£t
, &
si
, 
ç
);

320 i‡(
signo
 == -1) {

321 
îr
 = 
ngx_î∫o
;

323 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 
îr
,

324 "πsig signo:%d", 
signo
);

326 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

327 
	`ngx_time_upd©e
();

330 i‡(
îr
 =
NGX_EAGAIN
) {

334 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

335  
NGX_AGAIN
;

338 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

340  
NGX_ERROR
;

343 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

344 
cy˛e
->
log
, 
îr
, "sigtimedwait() failed");

345  
NGX_ERROR
;

348 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

350 
signo
, 
si
.
si_fd
, si.
si_b™d
);

352 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

353 
	`ngx_time_upd©e
();

356 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

358 i‡(
signo
 =(Ë
πscf
->signo || signo == ()Ñtscf->signo + 1) {

360 i‡(
ovîÊow
 && (
ngx_uöt_t
Ë
si
.
si_fd
 > 
ovîÊow_cuºít
) {

361  
NGX_OK
;

364 
c
 = 
ngx_cy˛e
->
fûes
[
si
.
si_fd
];

366 i‡(
c
 =
NULL
) {

370  
NGX_OK
;

373 
ö°™˚
 = 
signo
 - (Ë
πscf
->signo;

375 
ªv
 = 
c
->
ªad
;

377 i‡(
ªv
->
ö°™˚
 != instance) {

384 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

385 "πsig: sèÀÉvíà%p", 
c
);

387  
NGX_OK
;

390 i‡((
si
.
si_b™d
 & (
POLLIN
|
POLLHUP
|
POLLERR
)Ë&& 
ªv
->
a˘ive
) {

392 
ªv
->
ªady
 = 1;

394 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

395 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

396 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

398 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

401 
ªv
->
	`h™dÀr
(rev);

405 
wev
 = 
c
->
wrôe
;

407 i‡((
si
.
si_b™d
 & (
POLLOUT
|
POLLHUP
|
POLLERR
)Ë&& 
wev
->
a˘ive
) {

409 
wev
->
ªady
 = 1;

411 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

412 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

415 
wev
->
	`h™dÀr
(wev);

419  
NGX_OK
;

421 } i‡(
signo
 =
SIGALRM
) {

423 
	`ngx_time_upd©e
();

425  
NGX_OK
;

427 } i‡(
signo
 =
SIGIO
) {

429 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

434 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

435 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

436 
	`sigem±y£t
(&
ß
.
ß_mask
);

438 i‡(
	`siga˘i⁄
(
πscf
->
signo
, &
ß
, 
NULL
) == -1) {

439 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

440 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
);

443 i‡(
	`siga˘i⁄
(
πscf
->
signo
 + 1, &
ß
, 
NULL
) == -1) {

444 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

445 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
 + 1);

448 
ovîÊow
 = 1;

449 
ovîÊow_cuºít
 = 0;

450 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_ovîÊow
;

452  
NGX_ERROR
;

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

457 "sigtimedwaô(Ëªtu∫ed u√x≥˘ed sig«l: %d", 
signo
);

459  
NGX_ERROR
;

460 
	}
}

463 
ngx_öt_t


464 
	$ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

465 
ngx_uöt_t
 
Êags
)

467 
«me
[2], 
πsig_max
, 
πsig_ƒ
, 
evíts
, 
ªady
;

468 
size_t
 
Àn
;

469 
ngx_îr_t
 
îr
;

470 
ngx_uöt_t
 
ã°ed
, 
n
, 
i
;

471 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

472 
ngx_c⁄√˘i⁄_t
 *
c
;

473 
ngx_πsig_c⁄f_t
 *
πscf
;

475 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

478 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

480 
ã°ed
 = 0;

484 
n
 = 0;

485 
n
 < 
πscf
->
ovîÊow_evíts
) {

487 i‡(
ovîÊow_cuºít
 =
cy˛e
->
c⁄√˘i⁄_n
) {

491 
c
 = 
cy˛e
->
fûes
[
ovîÊow_cuºít
++];

493 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

497 
evíts
 = 0;

499 i‡(
c
->
ªad
->
a˘ive
 && c->ªad->
h™dÀr
) {

500 
evíts
 |
POLLIN
;

503 i‡(
c
->
wrôe
->
a˘ive
 && c->wrôe->
h™dÀr
) {

504 
evíts
 |
POLLOUT
;

507 i‡(
evíts
 == 0) {

511 
ovîÊow_li°
[
n
].
fd
 = 
c
->fd;

512 
ovîÊow_li°
[
n
].
evíts
 =Évents;

513 
ovîÊow_li°
[
n
].
ªvíts
 = 0;

514 
n
++;

517 i‡(
n
 == 0) {

522 
ªady
 = 
	`pﬁl
(
ovîÊow_li°
, 
n
, 0);

524 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

525 "πsig ovîÊowÖﬁl:%d", 
ªady
);

527 i‡(
ªady
 == -1) {

528 
îr
 = 
ngx_î∫o
;

529 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

530 
cy˛e
->
log
, 0,

533 i‡(
îr
 =
NGX_EINTR
) {

541 i‡(
ªady
 <= 0) {

545 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

547 
i
 = 0; i < 
n
; i++) {

548 
c
 = 
cy˛e
->
fûes
[
ovîÊow_li°
[
i
].
fd
];

550 i‡(
c
 =
NULL
) {

554 
ªv
 = 
c
->
ªad
;

556 i‡(
ªv
->
a˘ive


557 && !
ªv
->
˛o£d


558 && 
ªv
->
h™dÀr


559 && (
ovîÊow_li°
[
i
].
ªvíts


560 & (
POLLIN
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

562 
ã°ed
++;

564 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

565 
ªv
->
po°ed_ªady
 = 1;

568 
ªv
->
ªady
 = 1;

571 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

572 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

573 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

575 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

578 
ªv
->
	`h™dÀr
(rev);

582 
wev
 = 
c
->
wrôe
;

584 i‡(
wev
->
a˘ive


585 && !
wev
->
˛o£d


586 && 
wev
->
h™dÀr


587 && (
ovîÊow_li°
[
i
].
ªvíts


588 & (
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

590 
ã°ed
++;

592 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

593 
wev
->
po°ed_ªady
 = 1;

596 
wev
->
ªady
 = 1;

599 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

600 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

603 
wev
->
	`h™dÀr
(wev);

608 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

610 i‡(
ã°ed
 >
πscf
->
ovîÊow_ã°
) {

612 i‡(
ngx_löux_πsig_max
) {

622 
«me
[0] = 
CTL_KERN
;

623 
«me
[1] = 
KERN_RTSIGMAX
;

624 
Àn
 = (
πsig_max
);

626 i‡(
	`sys˘l
(
«me
, 2, &
πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

627 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

629  
NGX_ERROR
;

633 
«me
[1] = 
KERN_RTSIGNR
;

634 
Àn
 = (
πsig_ƒ
);

636 i‡(
	`sys˘l
(
«me
, 2, &
πsig_ƒ
, &
Àn
, 
NULL
, 0) == -1) {

637 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

639  
NGX_ERROR
;

648 i‡(
πsig_max
 / (Ë
πscf
->
ovîÊow_thªshﬁd
 < 
πsig_ƒ
) {

649 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

651 
πsig_ƒ
, 
πsig_max
);

652 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
)

665 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
) {

670 
ã°ed
 = 0;

674 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

675 
	`ngx_time_upd©e
();

678 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

681 
ovîÊow
 = 0;

682 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_evíts
;

684  
NGX_OK
;

685 
	}
}

689 
	$ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

691 
ngx_πsig_c⁄f_t
 *
πscf
;

693 
πscf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_πsig_c⁄f_t
));

694 i‡(
πscf
 =
NULL
) {

695  
NULL
;

698 
πscf
->
signo
 = 
NGX_CONF_UNSET
;

699 
πscf
->
ovîÊow_evíts
 = 
NGX_CONF_UNSET
;

700 
πscf
->
ovîÊow_ã°
 = 
NGX_CONF_UNSET
;

701 
πscf
->
ovîÊow_thªshﬁd
 = 
NGX_CONF_UNSET
;

703  
πscf
;

704 
	}
}

708 
	$ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

710 
ngx_πsig_c⁄f_t
 *
πscf
 = 
c⁄f
;

713 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
signo
, 
SIGRTMIN
 + 10);

715 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_evíts
, 16);

716 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_ã°
, 32);

717 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_thªshﬁd
, 10);

719  
NGX_CONF_OK
;

720 
	}
}

724 
	$ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

726 i‡(
ngx_löux_πsig_max
) {

727  
	`ngx_c⁄f_check_num_bounds
(
cf
, 
po°
, 
d©a
);

730 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

734  
NGX_CONF_OK
;

735 
	}
}

	@src/event/modules/ngx_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_öt_t
 
	gmax_fd
;

31 
ngx_uöt_t
 
	g√víts
;

33 
ngx_evít_t
 **
	gevít_ödex
;

36 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

38 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

39 &
£À˘_«me
,

40 
NULL
,

41 
ngx_£À˘_öô_c⁄f
,

44 
ngx_£À˘_add_evít
,

45 
ngx_£À˘_dñ_evít
,

46 
ngx_£À˘_add_evít
,

47 
ngx_£À˘_dñ_evít
,

48 
NULL
,

49 
NULL
,

50 
NULL
,

51 
ngx_£À˘_¥o˚ss_evíts
,

52 
ngx_£À˘_öô
,

53 
ngx_£À˘_d⁄e


58 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_£À˘_moduÀ_˘x
,

61 
NULL
,

62 
NGX_EVENT_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

77 
ngx_evít_t
 **
ödex
;

79 i‡(
evít_ödex
 =
NULL
) {

80 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

81 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

82 
√víts
 = 0;

85 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


86 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


87 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

89 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

90 
cy˛e
->
log
);

91 i‡(
ödex
 =
NULL
) {

92  
NGX_ERROR
;

95 i‡(
evít_ödex
) {

96 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

97 
	`ngx_‰ì
(
evít_ödex
);

100 
evít_ödex
 = 
ödex
;

103 
ngx_io
 = 
ngx_os_io
;

105 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

107 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

109 
max_fd
 = -1;

111  
NGX_OK
;

112 
	}
}

116 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

118 
	`ngx_‰ì
(
evít_ödex
);

120 
evít_ödex
 = 
NULL
;

121 
	}
}

124 
ngx_öt_t


125 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

127 
ngx_c⁄√˘i⁄_t
 *
c
;

129 
c
 = 
ev
->
d©a
;

131 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

132 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

134 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

136 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

137  
NGX_OK
;

140 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

141 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

145 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

146  
NGX_ERROR
;

149 i‡(
evít
 =
NGX_READ_EVENT
) {

150 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

152 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

153 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

156 i‡(
max_fd
 !-1 && max_fd < 
c
->
fd
) {

157 
max_fd
 = 
c
->
fd
;

160 
ev
->
a˘ive
 = 1;

162 
evít_ödex
[
√víts
] = 
ev
;

163 
ev
->
ödex
 = 
√víts
;

164 
√víts
++;

166  
NGX_OK
;

167 
	}
}

170 
ngx_öt_t


171 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

173 
ngx_evít_t
 *
e
;

174 
ngx_c⁄√˘i⁄_t
 *
c
;

176 
c
 = 
ev
->
d©a
;

178 
ev
->
a˘ive
 = 0;

180 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

181  
NGX_OK
;

184 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

185 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

187 i‡(
evít
 =
NGX_READ_EVENT
) {

188 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

190 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

191 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

194 i‡(
max_fd
 =
c
->
fd
) {

195 
max_fd
 = -1;

198 i‡(
ev
->
ödex
 < --
√víts
) {

199 
e
 = 
evít_ödex
[
√víts
];

200 
evít_ödex
[
ev
->
ödex
] = 
e
;

201 
e
->
ödex
 = 
ev
->index;

204 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

206  
NGX_OK
;

207 
	}
}

210 
ngx_öt_t


211 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

212 
ngx_uöt_t
 
Êags
)

214 
ªady
, 
ƒódy
;

215 
ngx_îr_t
 
îr
;

216 
ngx_uöt_t
 
i
, 
found
;

217 
ngx_evít_t
 *
ev
, **
queue
;

218 
timevÆ
 
tv
, *
ç
;

219 
ngx_c⁄√˘i⁄_t
 *
c
;

221 i‡(
max_fd
 == -1) {

222 
i
 = 0; i < 
√víts
; i++) {

223 
c
 = 
evít_ödex
[
i
]->
d©a
;

224 i‡(
max_fd
 < 
c
->
fd
) {

225 
max_fd
 = 
c
->
fd
;

229 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

230 "ch™gêmax_fd: %d", 
max_fd
);

233 #i‡(
NGX_DEBUG
)

234 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

235 
i
 = 0; i < 
√víts
; i++) {

236 
ev
 = 
evít_ödex
[
i
];

237 
c
 = 
ev
->
d©a
;

238 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

239 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

243 "max_fd: %d", 
max_fd
);

247 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

248 
ç
 = 
NULL
;

251 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

252 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

253 
ç
 = &
tv
;

256 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

257 "£À˘Åimî: %M", 
timî
);

259 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

260 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

262 
ªady
 = 
	`£À˘
(
max_fd
 + 1, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "£À˘Ñódy %d", 
ªady
);

273 i‡(
îr
) {

274 
ngx_uöt_t
 
Àvñ
;

276 i‡(
îr
 =
NGX_EINTR
) {

278 i‡(
ngx_evít_timî_Æ¨m
) {

279 
ngx_evít_timî_Æ¨m
 = 0;

280  
NGX_OK
;

283 
Àvñ
 = 
NGX_LOG_INFO
;

286 
Àvñ
 = 
NGX_LOG_ALERT
;

289 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "select() failed");

291 i‡(
îr
 =
EBADF
) {

292 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

295  
NGX_ERROR
;

298 i‡(
ªady
 == 0) {

299 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

300  
NGX_OK
;

303 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

305  
NGX_ERROR
;

308 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

310 
ƒódy
 = 0;

312 
i
 = 0; i < 
√víts
; i++) {

313 
ev
 = 
evít_ödex
[
i
];

314 
c
 = 
ev
->
d©a
;

315 
found
 = 0;

317 i‡(
ev
->
wrôe
) {

318 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

319 
found
 = 1;

320 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

321 "£À˘ wrôê%d", 
c
->
fd
);

325 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

326 
found
 = 1;

327 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

328 "£À˘Ñód %d", 
c
->
fd
);

332 i‡(
found
) {

333 
ev
->
ªady
 = 1;

335 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

336 &
ngx_po°ed_evíts
);

337 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

339 
ƒódy
++;

343 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

345 i‡(
ªady
 !
ƒódy
) {

346 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

347 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

349 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

352  
NGX_OK
;

353 
	}
}

357 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

359 
n
;

360 
sockÀn_t
 
Àn
;

361 
ngx_îr_t
 
îr
;

362 
ngx_sockë_t
 
s
;

364 
s
 = 0; s <
max_fd
; s++) {

366 i‡(
	`FD_ISSET
(
s
, &
ma°î_ªad_fd_£t
) == 0) {

370 
Àn
 = ();

372 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

373 
îr
 = 
ngx_sockë_î∫o
;

375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

376 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

378 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

382 
s
 = 0; s <
max_fd
; s++) {

384 i‡(
	`FD_ISSET
(
s
, &
ma°î_wrôe_fd_£t
) == 0) {

388 
Àn
 = ();

390 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

391 
îr
 = 
ngx_sockë_î∫o
;

393 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

394 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

396 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

400 
max_fd
 = -1;

401 
	}
}

405 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

407 
ngx_evít_c⁄f_t
 *
ecf
;

409 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

411 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

412  
NGX_CONF_OK
;

417 i‡(
cy˛e
->
c⁄√˘i⁄_n
 > 
FD_SETSIZE
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

420 "suµ‹ãd by sñe˘(Ëi†%ud", 
FD_SETSIZE
);

421  
NGX_CONF_ERROR
;

424 #i‡(
NGX_THREADS
)

426 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

428  
NGX_CONF_ERROR
;

432  
NGX_CONF_OK
;

435 
	}
}

	@src/event/modules/ngx_win32_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_uöt_t
 
	gmax_ªad
;

31 
ngx_uöt_t
 
	gmax_wrôe
;

32 
ngx_uöt_t
 
	g√víts
;

34 
ngx_evít_t
 **
	gevít_ödex
;

37 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

39 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

40 &
£À˘_«me
,

41 
NULL
,

42 
ngx_£À˘_öô_c⁄f
,

45 
ngx_£À˘_add_evít
,

46 
ngx_£À˘_dñ_evít
,

47 
ngx_£À˘_add_evít
,

48 
ngx_£À˘_dñ_evít
,

49 
NULL
,

50 
NULL
,

51 
NULL
,

52 
ngx_£À˘_¥o˚ss_evíts
,

53 
ngx_£À˘_öô
,

54 
ngx_£À˘_d⁄e


59 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_£À˘_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 
ngx_öt_t


76 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

78 
ngx_evít_t
 **
ödex
;

80 i‡(
evít_ödex
 =
NULL
) {

81 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

82 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

83 
√víts
 = 0;

86 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


87 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


88 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

90 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

91 
cy˛e
->
log
);

92 i‡(
ödex
 =
NULL
) {

93  
NGX_ERROR
;

96 i‡(
evít_ödex
) {

97 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

98 
	`ngx_‰ì
(
evít_ödex
);

101 
evít_ödex
 = 
ödex
;

104 
ngx_io
 = 
ngx_os_io
;

106 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

108 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

110 
max_ªad
 = 0;

111 
max_wrôe
 = 0;

113  
NGX_OK
;

114 
	}
}

118 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

120 
	`ngx_‰ì
(
evít_ödex
);

122 
evít_ödex
 = 
NULL
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

129 
ngx_c⁄√˘i⁄_t
 *
c
;

131 
c
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

134 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

136 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

138 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

139  
NGX_OK
;

142 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

143 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

145 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

147 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

148  
NGX_ERROR
;

151 i‡((
evít
 =
NGX_READ_EVENT
Ë&& (
max_ªad
 >
FD_SETSIZE
)

152 || (
evít
 =
NGX_WRITE_EVENT
Ë&& (
max_wrôe
 >
FD_SETSIZE
))

154 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ev
->
log
, 0,

156 "suµ‹ãd by sñe˘(Ëi†%d", 
FD_SETSIZE
);

157  
NGX_ERROR
;

160 i‡(
evít
 =
NGX_READ_EVENT
) {

161 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

162 
max_ªad
++;

164 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

165 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

166 
max_wrôe
++;

169 
ev
->
a˘ive
 = 1;

171 
evít_ödex
[
√víts
] = 
ev
;

172 
ev
->
ödex
 = 
√víts
;

173 
√víts
++;

175  
NGX_OK
;

176 
	}
}

179 
ngx_öt_t


180 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

182 
ngx_evít_t
 *
e
;

183 
ngx_c⁄√˘i⁄_t
 *
c
;

185 
c
 = 
ev
->
d©a
;

187 
ev
->
a˘ive
 = 0;

189 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

190  
NGX_OK
;

193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

194 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

196 i‡(
evít
 =
NGX_READ_EVENT
) {

197 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

198 
max_ªad
--;

200 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

201 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

202 
max_wrôe
--;

205 i‡(
ev
->
ödex
 < --
√víts
) {

206 
e
 = 
evít_ödex
[
√víts
];

207 
evít_ödex
[
ev
->
ödex
] = 
e
;

208 
e
->
ödex
 = 
ev
->index;

211 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

213  
NGX_OK
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

219 
ngx_uöt_t
 
Êags
)

221 
ªady
, 
ƒódy
;

222 
ngx_îr_t
 
îr
;

223 
ngx_uöt_t
 
i
, 
found
;

224 
ngx_evít_t
 *
ev
, **
queue
;

225 
timevÆ
 
tv
, *
ç
;

226 
ngx_c⁄√˘i⁄_t
 *
c
;

228 #i‡(
NGX_DEBUG
)

229 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

230 
i
 = 0; i < 
√víts
; i++) {

231 
ev
 = 
evít_ödex
[
i
];

232 
c
 = 
ev
->
d©a
;

233 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

234 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

239 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

240 
ç
 = 
NULL
;

243 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

244 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

245 
ç
 = &
tv
;

248 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

249 "£À˘Åimî: %M", 
timî
);

251 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

252 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

254 i‡(
max_ªad
 || 
max_wrôe
) {

255 
ªady
 = 
	`£À˘
(0, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

265 
	`ngx_m¶ìp
(
timî
);

267 
ªady
 = 0;

270 
îr
 = (
ªady
 =-1Ë? 
ngx_sockë_î∫o
 : 0;

272 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

273 
	`ngx_time_upd©e
();

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

277 "£À˘Ñódy %d", 
ªady
);

279 i‡(
îr
) {

280 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
, "select() failed");

282 i‡(
îr
 =
WSAENOTSOCK
) {

283 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

286  
NGX_ERROR
;

289 i‡(
ªady
 == 0) {

290 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

291  
NGX_OK
;

294 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

296  
NGX_ERROR
;

299 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

301 
ƒódy
 = 0;

303 
i
 = 0; i < 
√víts
; i++) {

304 
ev
 = 
evít_ödex
[
i
];

305 
c
 = 
ev
->
d©a
;

306 
found
 = 0;

308 i‡(
ev
->
wrôe
) {

309 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

310 
found
 = 1;

311 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

312 "£À˘ wrôê%d", 
c
->
fd
);

316 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

317 
found
 = 1;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

319 "£À˘Ñód %d", 
c
->
fd
);

323 i‡(
found
) {

324 
ev
->
ªady
 = 1;

326 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

327 &
ngx_po°ed_evíts
);

328 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

330 
ƒódy
++;

334 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

336 i‡(
ªady
 !
ƒódy
) {

337 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

338 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

340 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

343  
NGX_OK
;

344 
	}
}

348 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

350 
n
;

351 
u_öt
 
i
;

352 
sockÀn_t
 
Àn
;

353 
ngx_îr_t
 
îr
;

354 
ngx_sockë_t
 
s
;

356 
i
 = 0; i < 
ma°î_ªad_fd_£t
.
fd_cou¡
; i++) {

358 
s
 = 
ma°î_ªad_fd_£t
.
fd_¨øy
[
i
];

359 
Àn
 = ();

361 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

362 
îr
 = 
ngx_sockë_î∫o
;

364 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

365 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

367 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

371 
i
 = 0; i < 
ma°î_wrôe_fd_£t
.
fd_cou¡
; i++) {

373 
s
 = 
ma°î_wrôe_fd_£t
.
fd_¨øy
[
i
];

374 
Àn
 = ();

376 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

377 
îr
 = 
ngx_sockë_î∫o
;

379 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

380 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

382 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

385 
	}
}

389 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

391 
ngx_evít_c⁄f_t
 *
ecf
;

393 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

395 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

396  
NGX_CONF_OK
;

399  
NGX_CONF_OK
;

400 
	}
}

	@src/event/ngx_event.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#DEFAULT_CONNECTIONS
 512

	)

16 
ngx_moduÀ_t
 
ngx_kqueue_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_evíç‹t_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_devpﬁl_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_πsig_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_£À˘_moduÀ
;

24 
ngx_öt_t
 
ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

25 
ngx_öt_t
 
ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
);

26 *
ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

28 *
ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

31 *
ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

32 *
c⁄f
);

34 *
ngx_evít_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

35 *
ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

38 
ngx_uöt_t
 
	gngx_timî_ªsﬁuti⁄
;

39 
sig_©omic_t
 
	gngx_evít_timî_Æ¨m
;

41 
ngx_uöt_t
 
	gngx_evít_max_moduÀ
;

43 
ngx_uöt_t
 
	gngx_evít_Êags
;

44 
ngx_evít_a˘i⁄s_t
 
	gngx_evít_a˘i⁄s
;

47 
ngx_©omic_t
 
	gc⁄√˘i⁄_cou¡î
 = 1;

48 
ngx_©omic_t
 *
	gngx_c⁄√˘i⁄_cou¡î
 = &
c⁄√˘i⁄_cou¡î
;

51 
ngx_©omic_t
 *
	gngx_ac˚±_muãx_±r
;

52 
ngx_shmtx_t
 
	gngx_ac˚±_muãx
;

53 
ngx_uöt_t
 
	gngx_u£_ac˚±_muãx
;

54 
ngx_uöt_t
 
	gngx_ac˚±_evíts
;

55 
ngx_uöt_t
 
	gngx_ac˚±_muãx_hñd
;

56 
ngx_m£c_t
 
	gngx_ac˚±_muãx_dñay
;

57 
ngx_öt_t
 
	gngx_ac˚±_dißbÀd
;

58 
ngx_fûe_t
 
	gngx_ac˚±_muãx_lock_fûe
;

61 #i‡(
NGX_STAT_STUB
)

63 
ngx_©omic_t
 
	gngx_°©_ac˚±ed0
;

64 
ngx_©omic_t
 *
	gngx_°©_ac˚±ed
 = &
ngx_°©_ac˚±ed0
;

65 
ngx_©omic_t
 
	gngx_°©_h™dÀd0
;

66 
ngx_©omic_t
 *
	gngx_°©_h™dÀd
 = &
ngx_°©_h™dÀd0
;

67 
ngx_©omic_t
 
	gngx_°©_ªque°s0
;

68 
ngx_©omic_t
 *
	gngx_°©_ªque°s
 = &
ngx_°©_ªque°s0
;

69 
ngx_©omic_t
 
	gngx_°©_a˘ive0
;

70 
ngx_©omic_t
 *
	gngx_°©_a˘ive
 = &
ngx_°©_a˘ive0
;

71 
ngx_©omic_t
 
	gngx_°©_ªadög0
;

72 
ngx_©omic_t
 *
	gngx_°©_ªadög
 = &
ngx_°©_ªadög0
;

73 
ngx_©omic_t
 
	gngx_°©_wrôög0
;

74 
ngx_©omic_t
 *
	gngx_°©_wrôög
 = &
ngx_°©_wrôög0
;

80 
ngx_comm™d_t
 
	gngx_evíts_comm™ds
[] = {

82 { 
ngx_°rög
("events"),

83 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

84 
ngx_evíts_block
,

87 
NULL
 },

89 
ngx_nuŒ_comm™d


93 
ngx_c‹e_moduÀ_t
 
	gngx_evíts_moduÀ_˘x
 = {

94 
ngx_°rög
("events"),

95 
NULL
,

96 
NULL


100 
ngx_moduÀ_t
 
	gngx_evíts_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_evíts_moduÀ_˘x
,

103 
ngx_evíts_comm™ds
,

104 
NGX_CORE_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_°r_t
 
	gevít_c‹e_«me
 = 
ngx_°rög
("event_core");

119 
ngx_comm™d_t
 
	gngx_evít_c‹e_comm™ds
[] = {

121 { 
ngx_°rög
("worker_connections"),

122 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

123 
ngx_evít_c⁄√˘i⁄s
,

126 
NULL
 },

128 { 
ngx_°rög
("connections"),

129 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

130 
ngx_evít_c⁄√˘i⁄s
,

133 
NULL
 },

135 { 
ngx_°rög
("use"),

136 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

137 
ngx_evít_u£
,

140 
NULL
 },

142 { 
ngx_°rög
("multi_accept"),

143 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

144 
ngx_c⁄f_£t_Êag_¶Ÿ
,

146 
off£tof
(
ngx_evít_c⁄f_t
, 
mu…i_ac˚±
),

147 
NULL
 },

149 { 
ngx_°rög
("accept_mutex"),

150 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

151 
ngx_c⁄f_£t_Êag_¶Ÿ
,

153 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx
),

154 
NULL
 },

156 { 
ngx_°rög
("accept_mutex_delay"),

157 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

158 
ngx_c⁄f_£t_m£c_¶Ÿ
,

160 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx_dñay
),

161 
NULL
 },

163 { 
ngx_°rög
("debug_connection"),

164 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

165 
ngx_evít_debug_c⁄√˘i⁄
,

168 
NULL
 },

170 
ngx_nuŒ_comm™d


174 
ngx_evít_moduÀ_t
 
	gngx_evít_c‹e_moduÀ_˘x
 = {

175 &
evít_c‹e_«me
,

176 
ngx_evít_¸óã_c⁄f
,

177 
ngx_evít_öô_c⁄f
,

179 { 
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }

183 
ngx_moduÀ_t
 
	gngx_evít_c‹e_moduÀ
 = {

184 
NGX_MODULE_V1
,

185 &
ngx_evít_c‹e_moduÀ_˘x
,

186 
ngx_evít_c‹e_comm™ds
,

187 
NGX_EVENT_MODULE
,

188 
NULL
,

189 
ngx_evít_moduÀ_öô
,

190 
ngx_evít_¥o˚ss_öô
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NGX_MODULE_V1_PADDING


200 
	$ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
)

202 
ngx_uöt_t
 
Êags
;

203 
ngx_m£c_t
 
timî
, 
dñè
;

205 i‡(
ngx_timî_ªsﬁuti⁄
) {

206 
timî
 = 
NGX_TIMER_INFINITE
;

207 
Êags
 = 0;

210 
timî
 = 
	`ngx_evít_föd_timî
();

211 
Êags
 = 
NGX_UPDATE_TIME
;

213 #i‡(
NGX_THREADS
)

215 i‡(
timî
 =
NGX_TIMER_INFINITE
 ||Åimer > 500) {

216 
timî
 = 500;

222 i‡(
ngx_u£_ac˚±_muãx
) {

223 i‡(
ngx_ac˚±_dißbÀd
 > 0) {

224 
ngx_ac˚±_dißbÀd
--;

227 i‡(
	`ngx_åylock_ac˚±_muãx
(
cy˛e
Ë=
NGX_ERROR
) {

231 i‡(
ngx_ac˚±_muãx_hñd
) {

232 
Êags
 |
NGX_POST_EVENTS
;

235 i‡(
timî
 =
NGX_TIMER_INFINITE


236 || 
timî
 > 
ngx_ac˚±_muãx_dñay
)

238 
timî
 = 
ngx_ac˚±_muãx_dñay
;

244 
dñè
 = 
ngx_cuºít_m£c
;

246 (Ë
	`ngx_¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

248 
dñè
 = 
ngx_cuºít_m£c
 - delta;

250 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

251 "timî dñè: %M", 
dñè
);

253 i‡(
ngx_po°ed_ac˚±_evíts
) {

254 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_ac˚±_evíts
);

257 i‡(
ngx_ac˚±_muãx_hñd
) {

258 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

261 i‡(
dñè
) {

262 
	`ngx_evít_expúe_timîs
();

265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

266 "po°edÉvít†%p", 
ngx_po°ed_evíts
);

268 i‡(
ngx_po°ed_evíts
) {

269 i‡(
ngx_thªaded
) {

270 
	`ngx_wakeup_w‹kî_thªad
(
cy˛e
);

273 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_evíts
);

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
)

282 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

286 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

287 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_CLEAR_EVENT
)

288 =
NGX_ERROR
)

290  
NGX_ERROR
;

294  
NGX_OK
;

296 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

300 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

301 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
)

302 =
NGX_ERROR
)

304  
NGX_ERROR
;

307  
NGX_OK
;

310 i‡(
ªv
->
a˘ive
 && (ªv->
ªady
 || (
Êags
 & 
NGX_CLOSE_EVENT
))) {

311 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
 | 
Êags
)

312 =
NGX_ERROR
)

314  
NGX_ERROR
;

317  
NGX_OK
;

320 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

324 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

325 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

326  
NGX_ERROR
;

329  
NGX_OK
;

332 i‡(
ªv
->
⁄eshŸ
 && !ªv->
ªady
) {

333 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

334  
NGX_ERROR
;

337  
NGX_OK
;

343  
NGX_OK
;

344 
	}
}

347 
ngx_öt_t


348 
	$ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
)

350 
ngx_c⁄√˘i⁄_t
 *
c
;

352 i‡(
low©
) {

353 
c
 = 
wev
->
d©a
;

355 i‡(
	`ngx_£nd_low©
(
c
, 
low©
Ë=
NGX_ERROR
) {

356  
NGX_ERROR
;

360 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

364 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

365 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
,

366 
NGX_CLEAR_EVENT
 | (
low©
 ? 
NGX_LOWAT_EVENT
 : 0))

367 =
NGX_ERROR
)

369  
NGX_ERROR
;

373  
NGX_OK
;

375 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

379 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

380 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

381 =
NGX_ERROR
)

383  
NGX_ERROR
;

386  
NGX_OK
;

389 i‡(
wev
->
a˘ive
 && wev->
ªady
) {

390 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

391 =
NGX_ERROR
)

393  
NGX_ERROR
;

396  
NGX_OK
;

399 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

403 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

404 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

405  
NGX_ERROR
;

408  
NGX_OK
;

411 i‡(
wev
->
⁄eshŸ
 && wev->
ªady
) {

412 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

413  
NGX_ERROR
;

416  
NGX_OK
;

422  
NGX_OK
;

423 
	}
}

426 
ngx_öt_t


427 
	$ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

429 ***
cf
;

430 
u_ch¨
 *
sh¨ed
;

431 
size_t
 
size
, 
˛
;

432 
ngx_shm_t
 
shm
;

433 
ngx_time_t
 *
ç
;

434 
ngx_c‹e_c⁄f_t
 *
ccf
;

435 
ngx_evít_c⁄f_t
 *
ecf
;

437 
cf
 = 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
);

439 i‡(
cf
 =
NULL
) {

440 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

442  
NGX_ERROR
;

445 
ecf
 = (*
cf
)[
ngx_evít_c‹e_moduÀ
.
˘x_ödex
];

447 i‡(!
ngx_ã°_c⁄fig
 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER
) {

448 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

449 "usögÅhê\"%s\"Évíàmëhod", 
ecf
->
«me
);

452 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

454 
ngx_timî_ªsﬁuti⁄
 = 
ccf
->
timî_ªsﬁuti⁄
;

456 #i‡!(
NGX_WIN32
)

458 
ngx_öt_t
 
limô
;

459 
æimô
 
æmt
;

461 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

462 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

466 i‡(
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
æmt
.
æim_cur


467 && (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET


468 || 
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
ccf
->
æimô_nofûe
))

470 
limô
 = (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET
) ?

471 (
ngx_öt_t
Ë
æmt
.
æim_cur
 : 
ccf
->
æimô_nofûe
;

473 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

476 
ecf
->
c⁄√˘i⁄s
, 
limô
);

483 i‡(
ccf
->
ma°î
 == 0) {

484  
NGX_OK
;

487 i‡(
ngx_ac˚±_muãx_±r
) {

488  
NGX_OK
;

494 
˛
 = 128;

496 
size
 = 
˛


497 + 
˛


498 + 
˛
;

500 #i‡(
NGX_STAT_STUB
)

502 
size
 +
˛


503 + 
˛


504 + 
˛


505 + 
˛


506 + 
˛


507 + 
˛
;

511 
shm
.
size
 = size;

512 
shm
.
«me
.
Àn
 = ("nginx_shared_zone");

513 
shm
.
«me
.
d©a
 = (
u_ch¨
 *) "nginx_shared_zone";

514 
shm
.
log
 = 
cy˛e
->log;

516 i‡(
	`ngx_shm_Æloc
(&
shm
Ë!
NGX_OK
) {

517  
NGX_ERROR
;

520 
sh¨ed
 = 
shm
.
addr
;

522 
ngx_ac˚±_muãx_±r
 = (
ngx_©omic_t
 *Ë
sh¨ed
;

523 
ngx_ac˚±_muãx
.
•ö
 = (
ngx_uöt_t
) -1;

525 i‡(
	`ngx_shmtx_¸óã
(&
ngx_ac˚±_muãx
, 
sh¨ed
, 
cy˛e
->
lock_fûe
.
d©a
)

526 !
NGX_OK
)

528  
NGX_ERROR
;

531 
ngx_c⁄√˘i⁄_cou¡î
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 1 * 
˛
);

533 (Ë
	`ngx_©omic_cmp_£t
(
ngx_c⁄√˘i⁄_cou¡î
, 0, 1);

535 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

537 
ngx_c⁄√˘i⁄_cou¡î
, *ngx_connection_counter);

539 
ngx_ãmp_numbî
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 2 * 
˛
);

541 
ç
 = 
	`ngx_timeofday
();

543 
ngx_øndom_numbî
 = (
ç
->
m£c
 << 16Ë+ 
ngx_pid
;

545 #i‡(
NGX_STAT_STUB
)

547 
ngx_°©_ac˚±ed
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 3 * 
˛
);

548 
ngx_°©_h™dÀd
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 4 * 
˛
);

549 
ngx_°©_ªque°s
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 5 * 
˛
);

550 
ngx_°©_a˘ive
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 6 * 
˛
);

551 
ngx_°©_ªadög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 7 * 
˛
);

552 
ngx_°©_wrôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 8 * 
˛
);

556  
NGX_OK
;

557 
	}
}

560 #i‡!(
NGX_WIN32
)

563 
	$ngx_timî_sig«l_h™dÀr
(
signo
)

565 
ngx_evít_timî_Æ¨m
 = 1;

568 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0, "timer signal");

570 
	}
}

575 
ngx_öt_t


576 
	$ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
)

578 
ngx_uöt_t
 
m
, 
i
;

579 
ngx_evít_t
 *
ªv
, *
wev
;

580 
ngx_li°íög_t
 *
ls
;

581 
ngx_c⁄√˘i⁄_t
 *
c
, *
√xt
, *
ﬁd
;

582 
ngx_c‹e_c⁄f_t
 *
ccf
;

583 
ngx_evít_c⁄f_t
 *
ecf
;

584 
ngx_evít_moduÀ_t
 *
moduÀ
;

586 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

587 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

589 i‡(
ccf
->
ma°î
 && ccf->
w‹kî_¥o˚s£s
 > 1 && 
ecf
->
ac˚±_muãx
) {

590 
ngx_u£_ac˚±_muãx
 = 1;

591 
ngx_ac˚±_muãx_hñd
 = 0;

592 
ngx_ac˚±_muãx_dñay
 = 
ecf
->
ac˚±_muãx_dñay
;

595 
ngx_u£_ac˚±_muãx
 = 0;

598 #i‡(
NGX_THREADS
)

599 
ngx_po°ed_evíts_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

600 i‡(
ngx_po°ed_evíts_muãx
 =
NULL
) {

601  
NGX_ERROR
;

605 i‡(
	`ngx_evít_timî_öô
(
cy˛e
->
log
Ë=
NGX_ERROR
) {

606  
NGX_ERROR
;

609 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

610 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

614 i‡(
ngx_moduÀs
[
m
]->
˘x_ödex
 !
ecf
->
u£
) {

618 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

620 i‡(
moduÀ
->
a˘i⁄s
.
	`öô
(
cy˛e
, 
ngx_timî_ªsﬁuti⁄
Ë!
NGX_OK
) {

622 
	`exô
(2);

628 #i‡!(
NGX_WIN32
)

630 i‡(
ngx_timî_ªsﬁuti⁄
 && !(
ngx_evít_Êags
 & 
NGX_USE_TIMER_EVENT
)) {

631 
siga˘i⁄
 
ß
;

632 
ôimîvÆ
 
ôv
;

634 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

635 
ß
.
ß_h™dÀr
 = 
ngx_timî_sig«l_h™dÀr
;

636 
	`sigem±y£t
(&
ß
.
ß_mask
);

638 i‡(
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
) == -1) {

639 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

641  
NGX_ERROR
;

644 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

645 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000) * 1000;

646 
ôv
.
ô_vÆue
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

647 
ôv
.
ô_vÆue
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000 ) * 1000;

649 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

650 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

655 i‡(
ngx_evít_Êags
 & 
NGX_USE_FD_EVENT
) {

656 
æimô
 
æmt
;

658 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

659 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

661  
NGX_ERROR
;

664 
cy˛e
->
fûes_n
 = (
ngx_uöt_t
Ë
æmt
.
æim_cur
;

666 
cy˛e
->
fûes
 = 
	`ngx_ˇŒoc
((
ngx_c⁄√˘i⁄_t
 *Ë* cy˛e->
fûes_n
,

667 
cy˛e
->
log
);

668 i‡(
cy˛e
->
fûes
 =
NULL
) {

669  
NGX_ERROR
;

675 
cy˛e
->
c⁄√˘i⁄s
 =

676 
	`ngx_Æloc
((
ngx_c⁄√˘i⁄_t
Ë* 
cy˛e
->
c⁄√˘i⁄_n
, cy˛e->
log
);

677 i‡(
cy˛e
->
c⁄√˘i⁄s
 =
NULL
) {

678  
NGX_ERROR
;

681 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

683 
cy˛e
->
ªad_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

684 
cy˛e
->
log
);

685 i‡(
cy˛e
->
ªad_evíts
 =
NULL
) {

686  
NGX_ERROR
;

689 
ªv
 = 
cy˛e
->
ªad_evíts
;

690 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

691 
ªv
[
i
].
˛o£d
 = 1;

692 
ªv
[
i
].
ö°™˚
 = 1;

693 #i‡(
NGX_THREADS
)

694 
ªv
[
i
].
lock
 = &
c
[i].lock;

695 
ªv
[
i
].
own_lock
 = &
c
[i].
lock
;

699 
cy˛e
->
wrôe_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

700 
cy˛e
->
log
);

701 i‡(
cy˛e
->
wrôe_evíts
 =
NULL
) {

702  
NGX_ERROR
;

705 
wev
 = 
cy˛e
->
wrôe_evíts
;

706 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

707 
wev
[
i
].
˛o£d
 = 1;

708 #i‡(
NGX_THREADS
)

709 
wev
[
i
].
lock
 = &
c
[i].lock;

710 
wev
[
i
].
own_lock
 = &
c
[i].
lock
;

714 
i
 = 
cy˛e
->
c⁄√˘i⁄_n
;

715 
√xt
 = 
NULL
;

718 
i
--;

720 
c
[
i
].
d©a
 = 
√xt
;

721 
c
[
i
].
ªad
 = &
cy˛e
->
ªad_evíts
[i];

722 
c
[
i
].
wrôe
 = &
cy˛e
->
wrôe_evíts
[i];

723 
c
[
i
].
fd
 = (
ngx_sockë_t
) -1;

725 
√xt
 = &
c
[
i
];

727 #i‡(
NGX_THREADS
)

728 
c
[
i
].
lock
 = 0;

730 } 
i
);

732 
cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
√xt
;

733 
cy˛e
->
‰ì_c⁄√˘i⁄_n
 = cy˛e->
c⁄√˘i⁄_n
;

737 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

738 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

740 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
ls
[
i
].
fd
, 
cy˛e
->
log
);

742 i‡(
c
 =
NULL
) {

743  
NGX_ERROR
;

746 
c
->
log
 = &
ls
[
i
].log;

748 
c
->
li°íög
 = &
ls
[
i
];

749 
ls
[
i
].
c⁄√˘i⁄
 = 
c
;

751 
ªv
 = 
c
->
ªad
;

753 
ªv
->
log
 = 
c
->log;

754 
ªv
->
ac˚±
 = 1;

756 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

757 
ªv
->
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

760 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
)) {

761 i‡(
ls
[
i
].
¥evious
) {

768 
ﬁd
 = 
ls
[
i
].
¥evious
->
c⁄√˘i⁄
;

770 i‡(
	`ngx_dñ_evít
(
ﬁd
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
)

771 =
NGX_ERROR
)

773  
NGX_ERROR
;

776 
ﬁd
->
fd
 = (
ngx_sockë_t
) -1;

780 #i‡(
NGX_WIN32
)

782 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

783 
ngx_io˝_c⁄f_t
 *
io˝cf
;

785 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±ex
;

787 i‡(
ngx_u£_ac˚±_muãx
) {

791 i‡(
	`ngx_add_evít
(
ªv
, 0, 
NGX_IOCP_ACCEPT
Ë=
NGX_ERROR
) {

792  
NGX_ERROR
;

795 
ls
[
i
].
log
.
h™dÀr
 = 
ngx_ac˚±ex_log_îr‹
;

797 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

798 i‡(
	`ngx_evít_po°_ac˚±ex
(&
ls
[
i
], 
io˝cf
->
po°_ac˚±ex
)

799 =
NGX_ERROR
)

801  
NGX_ERROR
;

805 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

807 i‡(
ngx_u£_ac˚±_muãx
) {

811 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

812  
NGX_ERROR
;

818 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

820 i‡(
ngx_u£_ac˚±_muãx
) {

824 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

825 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

826  
NGX_ERROR
;

830 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

831  
NGX_ERROR
;

839  
NGX_OK
;

840 
	}
}

843 
ngx_öt_t


844 
	$ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
)

846 
¢dlow©
;

848 #i‡(
NGX_HAVE_LOWAT_EVENT
)

850 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

851 
c
->
wrôe
->
avaûabÀ
 = 
low©
;

852  
NGX_OK
;

857 i‡(
low©
 =0 || 
c
->
¢dlow©
) {

858  
NGX_OK
;

861 
¢dlow©
 = (Ë
low©
;

863 i‡(
	`£tsock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_SNDLOWAT
,

864 (c⁄° *Ë&
¢dlow©
, ())

867 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

869  
NGX_ERROR
;

872 
c
->
¢dlow©
 = 1;

874  
NGX_OK
;

875 
	}
}

879 
	$ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

881 *
rv
;

882 ***
˘x
;

883 
ngx_uöt_t
 
i
;

884 
ngx_c⁄f_t
 
pcf
;

885 
ngx_evít_moduÀ_t
 *
m
;

889 
ngx_evít_max_moduÀ
 = 0;

890 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

891 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

895 
ngx_moduÀs
[
i
]->
˘x_ödex
 = 
ngx_evít_max_moduÀ
++;

898 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*));

899 i‡(
˘x
 =
NULL
) {

900  
NGX_CONF_ERROR
;

903 *
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 
ngx_evít_max_moduÀ
 * (*));

904 i‡(*
˘x
 =
NULL
) {

905  
NGX_CONF_ERROR
;

908 *(**Ë
c⁄f
 = 
˘x
;

910 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

911 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

915 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

917 i‡(
m
->
¸óã_c⁄f
) {

918 (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
m
->
	`¸óã_c⁄f
(
cf
->
cy˛e
);

919 i‡((*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

920  
NGX_CONF_ERROR
;

925 
pcf
 = *
cf
;

926 
cf
->
˘x
 = ctx;

927 
cf
->
moduÀ_ty≥
 = 
NGX_EVENT_MODULE
;

928 
cf
->
cmd_ty≥
 = 
NGX_EVENT_CONF
;

930 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

932 *
cf
 = 
pcf
;

934 i‡(
rv
 !
NGX_CONF_OK
)

935  
rv
;

937 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

938 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

942 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

944 i‡(
m
->
öô_c⁄f
) {

945 
rv
 = 
m
->
	`öô_c⁄f
(
cf
->
cy˛e
, (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
]);

946 i‡(
rv
 !
NGX_CONF_OK
) {

947  
rv
;

952  
NGX_CONF_OK
;

953 
	}
}

957 
	$ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

959 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

961 
ngx_°r_t
 *
vÆue
;

963 i‡(
ecf
->
c⁄√˘i⁄s
 !
NGX_CONF_UNSET_UINT
) {

967 i‡(
	`ngx_°rcmp
(
cmd
->
«me
.
d©a
, "connections") == 0) {

968 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

973 
vÆue
 = 
cf
->
¨gs
->
ñts
;

974 
ecf
->
c⁄√˘i⁄s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

975 i‡(
ecf
->
c⁄√˘i⁄s
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

976 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

977 "övÆidÇumbî \"%V\"", &
vÆue
[1]);

979  
NGX_CONF_ERROR
;

982 
cf
->
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

984  
NGX_CONF_OK
;

985 
	}
}

989 
	$ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

991 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

993 
ngx_öt_t
 
m
;

994 
ngx_°r_t
 *
vÆue
;

995 
ngx_evít_c⁄f_t
 *
ﬁd_ecf
;

996 
ngx_evít_moduÀ_t
 *
moduÀ
;

998 i‡(
ecf
->
u£
 !
NGX_CONF_UNSET_UINT
) {

1002 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1004 i‡(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
) {

1005 
ﬁd_ecf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
,

1006 
ngx_evít_c‹e_moduÀ
);

1008 
ﬁd_ecf
 = 
NULL
;

1012 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

1013 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1017 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

1018 i‡(
moduÀ
->
«me
->
Àn
 =
vÆue
[1].len) {

1019 i‡(
	`ngx_°rcmp
(
moduÀ
->
«me
->
d©a
, 
vÆue
[1].data) == 0) {

1020 
ecf
->
u£
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

1021 
ecf
->
«me
 = 
moduÀ
->«me->
d©a
;

1023 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE


1024 && 
ﬁd_ecf


1025 && 
ﬁd_ecf
->
u£
 !
ecf
->use)

1027 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1034 &
vÆue
[1], 
ﬁd_ecf
->
«me
);

1036  
NGX_CONF_ERROR
;

1039  
NGX_CONF_OK
;

1044 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1045 "övÆidÉvíàty≥ \"%V\"", &
vÆue
[1]);

1047  
NGX_CONF_ERROR
;

1048 
	}
}

1052 
	$ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1054 #i‡(
NGX_DEBUG
)

1055 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1057 
ngx_öt_t
 
rc
;

1058 
ngx_°r_t
 *
vÆue
;

1059 
ngx_evít_debug_t
 *
dc
;

1060 
ho°ít
 *
h
;

1061 
ngx_cidr_t
 
cidr
;

1063 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1065 
dc
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1066 i‡(
dc
 =
NULL
) {

1067  
NGX_CONF_ERROR
;

1070 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

1072 i‡(
rc
 =
NGX_DONE
) {

1073 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1074 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

1075 
rc
 = 
NGX_OK
;

1078 i‡(
rc
 =
NGX_OK
) {

1082 i‡(
cidr
.
Ámûy
 !
AF_INET
) {

1083 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1085  
NGX_CONF_ERROR
;

1088 
dc
->
mask
 = 
cidr
.
u
.
ö
.mask;

1089 
dc
->
addr
 = 
cidr
.
u
.
ö
.addr;

1091  
NGX_CONF_OK
;

1094 
h
 = 
	`gëho°by«me
((*Ë
vÆue
[1].
d©a
);

1096 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

1097 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1098 "ho° \"%s\"ÇŸ found", 
vÆue
[1].
d©a
);

1099  
NGX_CONF_ERROR
;

1102 
dc
->
mask
 = 0xffffffff;

1103 
dc
->
addr
 = *(
ö_addr_t
 *)(
h
->
h_addr_li°
[0]);

1107 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1113  
NGX_CONF_OK
;

1114 
	}
}

1118 
	$ngx_evít_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

1120 
ngx_evít_c⁄f_t
 *
ecf
;

1122 
ecf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evít_c⁄f_t
));

1123 i‡(
ecf
 =
NULL
) {

1124  
NULL
;

1127 
ecf
->
c⁄√˘i⁄s
 = 
NGX_CONF_UNSET_UINT
;

1128 
ecf
->
u£
 = 
NGX_CONF_UNSET_UINT
;

1129 
ecf
->
mu…i_ac˚±
 = 
NGX_CONF_UNSET
;

1130 
ecf
->
ac˚±_muãx
 = 
NGX_CONF_UNSET
;

1131 
ecf
->
ac˚±_muãx_dñay
 = 
NGX_CONF_UNSET_MSEC
;

1132 
ecf
->
«me
 = (*Ë
NGX_CONF_UNSET
;

1134 #i‡(
NGX_DEBUG
)

1136 i‡(
	`ngx_¨øy_öô
(&
ecf
->
debug_c⁄√˘i⁄
, 
cy˛e
->
poﬁ
, 4,

1137 (
ngx_evít_debug_t
)Ë=
NGX_ERROR
)

1139  
NULL
;

1144  
ecf
;

1145 
	}
}

1149 
	$ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

1151 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1153 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1154 
fd
;

1156 #i‡(
NGX_HAVE_RTSIG
)

1157 
ngx_uöt_t
 
πsig
;

1158 
ngx_c‹e_c⁄f_t
 *
ccf
;

1160 
ngx_öt_t
 
i
;

1161 
ngx_moduÀ_t
 *
moduÀ
;

1162 
ngx_evít_moduÀ_t
 *
evít_moduÀ
;

1164 
moduÀ
 = 
NULL
;

1166 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1168 
fd
 = 
	`ïﬁl_¸óã
(100);

1170 i‡(
fd
 != -1) {

1171 
	`˛o£
(
fd
);

1172 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1174 } i‡(
ngx_î∫o
 !
NGX_ENOSYS
) {

1175 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1180 #i‡(
NGX_HAVE_RTSIG
)

1182 i‡(
moduÀ
 =
NULL
) {

1183 
moduÀ
 = &
ngx_πsig_moduÀ
;

1184 
πsig
 = 1;

1187 
πsig
 = 0;

1192 #i‡(
NGX_HAVE_DEVPOLL
)

1194 
moduÀ
 = &
ngx_devpﬁl_moduÀ
;

1198 #i‡(
NGX_HAVE_KQUEUE
)

1200 
moduÀ
 = &
ngx_kqueue_moduÀ
;

1204 #i‡(
NGX_HAVE_SELECT
)

1206 i‡(
moduÀ
 =
NULL
) {

1207 
moduÀ
 = &
ngx_£À˘_moduÀ
;

1212 i‡(
moduÀ
 =
NULL
) {

1213 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1215 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1219 
evít_moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

1221 i‡(
	`ngx_°rcmp
(
evít_moduÀ
->
«me
->
d©a
, 
evít_c‹e_«me
.data) == 0)

1226 
moduÀ
 = 
ngx_moduÀs
[
i
];

1231 i‡(
moduÀ
 =
NULL
) {

1232 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0, "noÉvents module found");

1233  
NGX_CONF_ERROR
;

1236 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
c⁄√˘i⁄s
, 
DEFAULT_CONNECTIONS
);

1237 
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1239 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
u£
, 
moduÀ
->
˘x_ödex
);

1241 
evít_moduÀ
 = 
moduÀ
->
˘x
;

1242 
	`ngx_c⁄f_öô_±r_vÆue
(
ecf
->
«me
, 
evít_moduÀ
->«me->
d©a
);

1244 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
mu…i_ac˚±
, 0);

1245 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
ac˚±_muãx
, 1);

1246 
	`ngx_c⁄f_öô_m£c_vÆue
(
ecf
->
ac˚±_muãx_dñay
, 500);

1249 #i‡(
NGX_HAVE_RTSIG
)

1251 i‡(!
πsig
) {

1252  
NGX_CONF_OK
;

1255 i‡(
ecf
->
ac˚±_muãx
) {

1256  
NGX_CONF_OK
;

1259 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1261 i‡(
ccf
->
w‹kî_¥o˚s£s
 == 0) {

1262  
NGX_CONF_OK
;

1265 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1268  
NGX_CONF_ERROR
;

1272  
NGX_CONF_OK
;

1275 
	}
}

	@src/event/ngx_event.h

8 #i‚de‡
_NGX_EVENT_H_INCLUDED_


9 
	#_NGX_EVENT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_INVALID_INDEX
 0xd0d0d0d0

	)

19 #i‡(
NGX_HAVE_IOCP
)

22 
WSAOVERLAPPED
 
	movÕ
;

23 
ngx_evít_t
 *
	mevít
;

24 
	mîr‹
;

25 } 
	tngx_evít_ovÕ_t
;

31 
ngx_uöt_t
 
	mlock
;

33 
ngx_evít_t
 *
	mevíts
;

34 
ngx_evít_t
 *
	mœ°
;

35 } 
	tngx_evít_muãx_t
;

38 
	sngx_evít_s
 {

39 *
	md©a
;

41 
	mwrôe
:1;

43 
	mac˚±
:1;

46 
	mö°™˚
:1;

52 
	ma˘ive
:1;

54 
	mdißbÀd
:1;

57 
	mªady
:1;

59 
	m⁄eshŸ
:1;

62 
	mcom∂ëe
:1;

64 
	meof
:1;

65 
	mîr‹
:1;

67 
	mtimedout
:1;

68 
	mtimî_£t
:1;

70 
	mdñayed
:1;

72 
	mªad_disˇrded
:1;

74 
	mu√x≥˘ed_eof
:1;

76 
	mde„ºed_ac˚±
:1;

79 
	m≥ndög_eof
:1;

81 #i‡!(
NGX_THREADS
)

82 
	mpo°ed_ªady
:1;

85 #i‡(
NGX_WIN32
)

87 
	mac˚±_c⁄ãxt_upd©ed
:1;

90 #i‡(
NGX_HAVE_KQUEUE
)

91 
	mkq_vnode
:1;

94 
	mkq_î∫o
;

111 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

112 
	mavaûabÀ
;

114 
	mavaûabÀ
:1;

117 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

120 #i‡(
NGX_HAVE_AIO
)

122 #i‡(
NGX_HAVE_IOCP
)

123 
ngx_evít_ovÕ_t
 
	movÕ
;

125 
aiocb
 
	maiocb
;

130 
ngx_uöt_t
 
	mödex
;

132 
ngx_log_t
 *
	mlog
;

134 
ngx_rbåì_node_t
 
	mtimî
;

136 
	m˛o£d
:1;

139 
	mch™√l
:1;

140 
	mªsﬁvî
:1;

142 #i‡(
NGX_THREADS
)

144 
	mlocked
:1;

146 
	mpo°ed_ªady
:1;

147 
	mpo°ed_timedout
:1;

148 
	mpo°ed_eof
:1;

150 #i‡(
NGX_HAVE_KQUEUE
)

152 
	mpo°ed_î∫o
;

155 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

156 
	mpo°ed_avaûabÀ
;

158 
	mpo°ed_avaûabÀ
:1;

161 
ngx_©omic_t
 *
	mlock
;

162 
ngx_©omic_t
 *
	mown_lock
;

167 
ngx_evít_t
 *
	m√xt
;

168 
ngx_evít_t
 **
	m¥ev
;

181 *
	mthr_˘x
;

183 #i‡(
NGX_EVENT_T_PADDING
)

187 
uöt32_t
 
	m∑ddög
[
NGX_EVENT_T_PADDING
];

193 #i‡(
NGX_HAVE_FILE_AIO
)

195 
	sngx_evít_aio_s
 {

196 *
	md©a
;

197 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

198 
ngx_fûe_t
 *
	mfûe
;

200 
ngx_fd_t
 
	mfd
;

202 #i‡(
NGX_HAVE_EVENTFD
)

203 
öt64_t
 
	mªs
;

204 #i‡(
NGX_TEST_BUILD_EPOLL
)

205 
ngx_îr_t
 
	mîr
;

206 
size_t
 
	mnbyãs
;

209 
ngx_îr_t
 
	mîr
;

210 
size_t
 
	mnbyãs
;

213 #i‡(
NGX_HAVE_AIO_SENDFILE
)

214 
off_t
 
	mœ°_off£t
;

217 
ngx_aiocb_t
 
	maiocb
;

218 
ngx_evít_t
 
	mevít
;

225 
ö_addr_t
 
	mmask
;

226 
ö_addr_t
 
	maddr
;

227 } 
	tngx_evít_debug_t
;

231 
ngx_öt_t
 (*
add
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

232 
ngx_öt_t
 (*
dñ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

234 
ngx_öt_t
 (*
íabÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

235 
ngx_öt_t
 (*
dißbÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

237 
ngx_öt_t
 (*
add_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
);

238 
ngx_öt_t
 (*
dñ_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
, 
ngx_uöt_t
 
	mÊags
);

240 
ngx_öt_t
 (*
¥o˚ss_ch™ges
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_uöt_t
 
	mnowaô
);

241 
ngx_öt_t
 (*
¥o˚ss_evíts
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
,

242 
ngx_uöt_t
 
	mÊags
);

244 
ngx_öt_t
 (*
öô
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
);

245 (*
	md⁄e
)(
ngx_cy˛e_t
 *
	mcy˛e
);

246 } 
	tngx_evít_a˘i⁄s_t
;

249 
ngx_evít_a˘i⁄s_t
 
ngx_evít_a˘i⁄s
;

256 
	#NGX_USE_LEVEL_EVENT
 0x00000001

	)

262 
	#NGX_USE_ONESHOT_EVENT
 0x00000002

	)

268 
	#NGX_USE_CLEAR_EVENT
 0x00000004

	)

274 
	#NGX_USE_KQUEUE_EVENT
 0x00000008

	)

280 
	#NGX_USE_LOWAT_EVENT
 0x00000010

	)

285 
	#NGX_USE_GREEDY_EVENT
 0x00000020

	)

290 
	#NGX_USE_EPOLL_EVENT
 0x00000040

	)

295 
	#NGX_USE_RTSIG_EVENT
 0x00000080

	)

301 
	#NGX_USE_AIO_EVENT
 0x00000100

	)

307 
	#NGX_USE_IOCP_EVENT
 0x00000200

	)

313 
	#NGX_USE_FD_EVENT
 0x00000400

	)

319 
	#NGX_USE_TIMER_EVENT
 0x00000800

	)

325 
	#NGX_USE_EVENTPORT_EVENT
 0x00001000

	)

330 
	#NGX_USE_VNODE_EVENT
 0x00002000

	)

343 
	#NGX_CLOSE_EVENT
 1

	)

349 
	#NGX_DISABLE_EVENT
 2

	)

354 
	#NGX_FLUSH_EVENT
 4

	)

358 
	#NGX_LOWAT_EVENT
 0

	)

359 
	#NGX_VNODE_EVENT
 0

	)

362 #i‡(
NGX_HAVE_KQUEUE
)

364 
	#NGX_READ_EVENT
 
EVFILT_READ


	)

365 
	#NGX_WRITE_EVENT
 
EVFILT_WRITE


	)

367 #unde‡
NGX_VNODE_EVENT


368 
	#NGX_VNODE_EVENT
 
EVFILT_VNODE


	)

377 #unde‡
NGX_CLOSE_EVENT


378 
	#NGX_CLOSE_EVENT
 
EV_EOF


	)

380 #unde‡
NGX_LOWAT_EVENT


381 
	#NGX_LOWAT_EVENT
 
EV_FLAG1


	)

383 #unde‡
NGX_FLUSH_EVENT


384 
	#NGX_FLUSH_EVENT
 
EV_ERROR


	)

386 
	#NGX_LEVEL_EVENT
 0

	)

387 
	#NGX_ONESHOT_EVENT
 
EV_ONESHOT


	)

388 
	#NGX_CLEAR_EVENT
 
EV_CLEAR


	)

390 #unde‡
NGX_DISABLE_EVENT


391 
	#NGX_DISABLE_EVENT
 
EV_DISABLE


	)

394 #ñi‡(
NGX_HAVE_DEVPOLL
 || 
NGX_HAVE_EVENTPORT
)

396 
	#NGX_READ_EVENT
 
POLLIN


	)

397 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

399 
	#NGX_LEVEL_EVENT
 0

	)

400 
	#NGX_ONESHOT_EVENT
 1

	)

403 #ñi‡(
NGX_HAVE_EPOLL
)

405 
	#NGX_READ_EVENT
 
EPOLLIN


	)

406 
	#NGX_WRITE_EVENT
 
EPOLLOUT


	)

408 
	#NGX_LEVEL_EVENT
 0

	)

409 
	#NGX_CLEAR_EVENT
 
EPOLLET


	)

410 
	#NGX_ONESHOT_EVENT
 0x70000000

	)

412 
	#NGX_ONESHOT_EVENT
 
EPOLLONESHOT


	)

416 #ñi‡(
NGX_HAVE_POLL
)

418 
	#NGX_READ_EVENT
 
POLLIN


	)

419 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

421 
	#NGX_LEVEL_EVENT
 0

	)

422 
	#NGX_ONESHOT_EVENT
 1

	)

427 
	#NGX_READ_EVENT
 0

	)

428 
	#NGX_WRITE_EVENT
 1

	)

430 
	#NGX_LEVEL_EVENT
 0

	)

431 
	#NGX_ONESHOT_EVENT
 1

	)

436 #i‡(
NGX_HAVE_IOCP
)

437 
	#NGX_IOCP_ACCEPT
 0

	)

438 
	#NGX_IOCP_IO
 1

	)

439 
	#NGX_IOCP_CONNECT
 2

	)

443 #i‚de‡
NGX_CLEAR_EVENT


444 
	#NGX_CLEAR_EVENT
 0

	)

448 
	#ngx_¥o˚ss_ch™ges
 
ngx_evít_a˘i⁄s
.
¥o˚ss_ch™ges


	)

449 
	#ngx_¥o˚ss_evíts
 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts


	)

450 
	#ngx_d⁄e_evíts
 
ngx_evít_a˘i⁄s
.
d⁄e


	)

452 
	#ngx_add_evít
 
ngx_evít_a˘i⁄s
.
add


	)

453 
	#ngx_dñ_evít
 
ngx_evít_a˘i⁄s
.
dñ


	)

454 
	#ngx_add_c⁄n
 
ngx_evít_a˘i⁄s
.
add_c⁄n


	)

455 
	#ngx_dñ_c⁄n
 
ngx_evít_a˘i⁄s
.
dñ_c⁄n


	)

457 
	#ngx_add_timî
 
ngx_evít_add_timî


	)

458 
	#ngx_dñ_timî
 
ngx_evít_dñ_timî


	)

461 
ngx_os_io_t
 
ngx_io
;

463 
	#ngx_ªcv
 
ngx_io
.
ªcv


	)

464 
	#ngx_ªcv_chaö
 
ngx_io
.
ªcv_chaö


	)

465 
	#ngx_udp_ªcv
 
ngx_io
.
udp_ªcv


	)

466 
	#ngx_£nd
 
ngx_io
.
£nd


	)

467 
	#ngx_£nd_chaö
 
ngx_io
.
£nd_chaö


	)

470 
	#NGX_EVENT_MODULE
 0x544E5645

	)

471 
	#NGX_EVENT_CONF
 0x02000000

	)

475 
ngx_uöt_t
 
	mc⁄√˘i⁄s
;

476 
ngx_uöt_t
 
	mu£
;

478 
ngx_Êag_t
 
	mmu…i_ac˚±
;

479 
ngx_Êag_t
 
	mac˚±_muãx
;

481 
ngx_m£c_t
 
	mac˚±_muãx_dñay
;

483 
u_ch¨
 *
	m«me
;

485 #i‡(
NGX_DEBUG
)

486 
ngx_¨øy_t
 
	mdebug_c⁄√˘i⁄
;

488 } 
	tngx_evít_c⁄f_t
;

492 
ngx_°r_t
 *
	m«me
;

494 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

495 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

497 
ngx_evít_a˘i⁄s_t
 
	ma˘i⁄s
;

498 } 
	tngx_evít_moduÀ_t
;

501 
ngx_©omic_t
 *
ngx_c⁄√˘i⁄_cou¡î
;

503 
ngx_©omic_t
 *
ngx_ac˚±_muãx_±r
;

504 
ngx_shmtx_t
 
ngx_ac˚±_muãx
;

505 
ngx_uöt_t
 
ngx_u£_ac˚±_muãx
;

506 
ngx_uöt_t
 
ngx_ac˚±_evíts
;

507 
ngx_uöt_t
 
ngx_ac˚±_muãx_hñd
;

508 
ngx_m£c_t
 
ngx_ac˚±_muãx_dñay
;

509 
ngx_öt_t
 
ngx_ac˚±_dißbÀd
;

512 #i‡(
NGX_STAT_STUB
)

514 
ngx_©omic_t
 *
ngx_°©_ac˚±ed
;

515 
ngx_©omic_t
 *
ngx_°©_h™dÀd
;

516 
ngx_©omic_t
 *
ngx_°©_ªque°s
;

517 
ngx_©omic_t
 *
ngx_°©_a˘ive
;

518 
ngx_©omic_t
 *
ngx_°©_ªadög
;

519 
ngx_©omic_t
 *
ngx_°©_wrôög
;

524 
	#NGX_UPDATE_TIME
 1

	)

525 
	#NGX_POST_EVENTS
 2

	)

526 
	#NGX_POST_THREAD_EVENTS
 4

	)

529 
sig_©omic_t
 
ngx_evít_timî_Æ¨m
;

530 
ngx_uöt_t
 
ngx_evít_Êags
;

531 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

532 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

535 
	#ngx_evít_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
) \

536 (*(
	`ngx_gë_c⁄f
(
c⁄f_˘x
, 
ngx_evíts_moduÀ
))Ë[
moduÀ
.
˘x_ödex
];

	)

540 
ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
);

541 
ngx_öt_t
 
ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
);

542 
u_ch¨
 *
ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

545 
ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
);

546 
ngx_öt_t
 
ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
);

547 
ngx_öt_t
 
ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
);

550 #i‡(
NGX_WIN32
)

551 
ngx_evít_ac˚±ex
(
ngx_evít_t
 *
ev
);

552 
ngx_öt_t
 
ngx_evít_po°_ac˚±ex
(
ngx_li°íög_t
 *
ls
, 
ngx_uöt_t
 
n
);

553 
u_ch¨
 *
ngx_ac˚±ex_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

557 
ngx_öt_t
 
ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
);

561 
	#ngx_evít_idít
(
p
Ë((
ngx_c⁄√˘i⁄_t
 *Ë’))->
fd


	)

564 
	~<ngx_evít_timî.h
>

565 
	~<ngx_evít_po°ed.h
>

566 
	~<ngx_evít_busy_lock.h
>

568 #i‡(
NGX_WIN32
)

569 
	~<ngx_io˝_moduÀ.h
>

	@src/event/ngx_event_accept.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

19 
	$ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
)

21 
sockÀn_t
 
sockÀn
;

22 
ngx_îr_t
 
îr
;

23 
ngx_log_t
 *
log
;

24 
ngx_sockë_t
 
s
;

25 
ngx_evít_t
 *
ªv
, *
wev
;

26 
ngx_li°íög_t
 *
ls
;

27 
ngx_c⁄√˘i⁄_t
 *
c
, *
lc
;

28 
ngx_evít_c⁄f_t
 *
ecf
;

29 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

30 #i‡(
NGX_HAVE_ACCEPT4
)

31 
ngx_uöt_t
 
u£_ac˚±4
 = 1;

34 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

36 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

37 
ev
->
avaûabÀ
 = 1;

39 } i‡(!(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
)) {

40 
ev
->
avaûabÀ
 = 
ecf
->
mu…i_ac˚±
;

43 
lc
 = 
ev
->
d©a
;

44 
ls
 = 
lc
->
li°íög
;

45 
ev
->
ªady
 = 0;

47 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

48 "ac˚± o¿%V,Ñódy: %d", &
ls
->
addr_ãxt
, 
ev
->
avaûabÀ
);

51 
sockÀn
 = 
NGX_SOCKADDRLEN
;

53 #i‡(
NGX_HAVE_ACCEPT4
)

54 i‡(
u£_ac˚±4
) {

55 
s
 = 
	`ac˚±4
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
,

56 
SOCK_NONBLOCK
);

58 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

61 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

64 i‡(
s
 == -1) {

65 
îr
 = 
ngx_sockë_î∫o
;

67 i‡(
îr
 =
NGX_EAGAIN
) {

68 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 
îr
,

73 #i‡(
NGX_HAVE_ACCEPT4
)

74 
	`ngx_log_îr‹
((
ngx_uöt_t
Ë((
îr
 =
NGX_ECONNABORTED
) ?

75 
NGX_LOG_ERR
 : 
NGX_LOG_ALERT
),

76 
ev
->
log
, 
îr
,

77 
u£_ac˚±4
 ? "accept4() failed" : "accept() failed");

79 i‡(
u£_ac˚±4
 && 
îr
 =
NGX_ENOSYS
) {

80 
u£_ac˚±4
 = 0;

81 
ngx_öhîôed_n⁄blockög
 = 0;

85 
	`ngx_log_îr‹
((
ngx_uöt_t
Ë((
îr
 =
NGX_ECONNABORTED
) ?

86 
NGX_LOG_ERR
 : 
NGX_LOG_ALERT
),

87 
ev
->
log
, 
îr
, "accept() failed");

90 i‡(
îr
 =
NGX_ECONNABORTED
) {

91 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

92 
ev
->
avaûabÀ
--;

95 i‡(
ev
->
avaûabÀ
) {

103 #i‡(
NGX_STAT_STUB
)

104 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ac˚±ed
, 1);

107 
ngx_ac˚±_dißbÀd
 = 
ngx_cy˛e
->
c⁄√˘i⁄_n
 / 8

108 - 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
;

110 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
ev
->
log
);

112 i‡(
c
 =
NULL
) {

113 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

114 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

115 
ngx_˛o£_sockë_n
 " failed");

121 #i‡(
NGX_STAT_STUB
)

122 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, 1);

125 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
ls
->
poﬁ_size
, 
ev
->
log
);

126 i‡(
c
->
poﬁ
 =
NULL
) {

127 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

131 
c
->
sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
sockÀn
);

132 i‡(
c
->
sockaddr
 =
NULL
) {

133 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

137 
	`ngx_mem˝y
(
c
->
sockaddr
, 
ß
, 
sockÀn
);

139 
log
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_log_t
));

140 i‡(
log
 =
NULL
) {

141 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

147 i‡(
ngx_öhîôed_n⁄blockög
) {

148 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

149 i‡(
	`ngx_blockög
(
s
) == -1) {

150 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

151 
ngx_blockög_n
 " failed");

152 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

158 i‡(!(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
))) {

159 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

160 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

161 
ngx_n⁄blockög_n
 " failed");

162 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

168 *
log
 = 
ls
->log;

170 
c
->
ªcv
 = 
ngx_ªcv
;

171 
c
->
£nd
 = 
ngx_£nd
;

172 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

173 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

175 
c
->
log
 =Üog;

176 
c
->
poﬁ
->
log
 =Üog;

178 
c
->
sockÀn
 = socklen;

179 
c
->
li°íög
 = 
ls
;

180 
c
->
loˇl_sockaddr
 = 
ls
->
sockaddr
;

182 
c
->
u√x≥˘ed_eof
 = 1;

184 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

185 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

186 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

187 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

188 #i‡(
NGX_SOLARIS
)

190 
c
->
£ndfûe
 = 0;

195 
ªv
 = 
c
->
ªad
;

196 
wev
 = 
c
->
wrôe
;

198 
wev
->
ªady
 = 1;

200 i‡(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
)) {

202 
ªv
->
ªady
 = 1;

205 i‡(
ev
->
de„ºed_ac˚±
) {

206 
ªv
->
ªady
 = 1;

207 #i‡(
NGX_HAVE_KQUEUE
)

208 
ªv
->
avaûabÀ
 = 1;

212 
ªv
->
log
 =Üog;

213 
wev
->
log
 =Üog;

224 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

226 #i‡(
NGX_STAT_STUB
)

227 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_h™dÀd
, 1);

230 #i‡(
NGX_THREADS
)

231 
ªv
->
lock
 = &
c
->lock;

232 
wev
->
lock
 = &
c
->lock;

233 
ªv
->
own_lock
 = &
c
->
lock
;

234 
wev
->
own_lock
 = &
c
->
lock
;

237 i‡(
ls
->
addr_¡›
) {

238 
c
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
ls
->
addr_ãxt_max_Àn
);

239 i‡(
c
->
addr_ãxt
.
d©a
 =
NULL
) {

240 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

244 
c
->
addr_ãxt
.
Àn
 = 
	`ngx_sock_¡›
(c->
sockaddr
, c->addr_ãxt.
d©a
,

245 
ls
->
addr_ãxt_max_Àn
, 0);

246 i‡(
c
->
addr_ãxt
.
Àn
 == 0) {

247 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

252 #i‡(
NGX_DEBUG
)

255 
ö_addr_t
 
i
;

256 
ngx_evít_debug_t
 *
dc
;

257 
sockaddr_ö
 *
sö
;

259 
sö
 = (
sockaddr_ö
 *Ë
ß
;

260 
dc
 = 
ecf
->
debug_c⁄√˘i⁄
.
ñts
;

261 
i
 = 0; i < 
ecf
->
debug_c⁄√˘i⁄
.
√…s
; i++) {

262 i‡((
sö
->
sö_addr
.
s_addr
 & 
dc
[
i
].
mask
Ë=dc[i].
addr
) {

263 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_CONNECTION
|
NGX_LOG_DEBUG_ALL
;

271 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

272 "*%dác˚±: %V fd:%d", 
c
->
numbî
, &c->
addr_ãxt
, 
s
);

274 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

275 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

276 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

281 
log
->
d©a
 = 
NULL
;

282 
log
->
h™dÀr
 = 
NULL
;

284 
ls
->
	`h™dÀr
(
c
);

286 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

287 
ev
->
avaûabÀ
--;

290 } 
ev
->
avaûabÀ
);

291 
	}
}

294 
ngx_öt_t


295 
	$ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
)

297 i‡(
	`ngx_shmtx_åylock
(&
ngx_ac˚±_muãx
)) {

299 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

302 i‡(
ngx_ac˚±_muãx_hñd


303 && 
ngx_ac˚±_evíts
 == 0

304 && !(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
))

306  
NGX_OK
;

309 i‡(
	`ngx_íabÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

310 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

311  
NGX_ERROR
;

314 
ngx_ac˚±_evíts
 = 0;

315 
ngx_ac˚±_muãx_hñd
 = 1;

317  
NGX_OK
;

320 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

321 "ac˚± muãxÜock faûed: %ui", 
ngx_ac˚±_muãx_hñd
);

323 i‡(
ngx_ac˚±_muãx_hñd
) {

324 i‡(
	`ngx_dißbÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

325  
NGX_ERROR
;

328 
ngx_ac˚±_muãx_hñd
 = 0;

331  
NGX_OK
;

332 
	}
}

335 
ngx_öt_t


336 
	$ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

338 
ngx_uöt_t
 
i
;

339 
ngx_li°íög_t
 *
ls
;

340 
ngx_c⁄√˘i⁄_t
 *
c
;

342 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

343 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

345 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

347 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

349 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

350  
NGX_ERROR
;

354 i‡(
	`ngx_add_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

355  
NGX_ERROR
;

360  
NGX_OK
;

361 
	}
}

364 
ngx_öt_t


365 
	$ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

367 
ngx_uöt_t
 
i
;

368 
ngx_li°íög_t
 *
ls
;

369 
ngx_c⁄√˘i⁄_t
 *
c
;

371 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

372 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

374 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

376 i‡(!
c
->
ªad
->
a˘ive
) {

380 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

381 i‡(
	`ngx_dñ_c⁄n
(
c
, 
NGX_DISABLE_EVENT
Ë=
NGX_ERROR
) {

382  
NGX_ERROR
;

386 i‡(
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_DISABLE_EVENT
)

387 =
NGX_ERROR
)

389  
NGX_ERROR
;

394  
NGX_OK
;

395 
	}
}

399 
	$ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

401 
ngx_sockë_t
 
fd
;

403 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

405 
fd
 = 
c
->fd;

406 
c
->
fd
 = (
ngx_sockë_t
) -1;

408 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

409 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_sockë_î∫o
,

410 
ngx_˛o£_sockë_n
 " failed");

413 i‡(
c
->
poﬁ
) {

414 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

417 #i‡(
NGX_STAT_STUB
)

418 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

420 
	}
}

423 
u_ch¨
 *

424 
	$ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

426  
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whileácceptingÇew connection on %V",

427 
log
->
d©a
);

428 
	}
}

	@src/event/ngx_event_busy_lock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_evít_busy_lock_look_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

14 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

15 
ngx_evít_busy_lock_h™dÀr
(
ngx_evít_t
 *
ev
);

16 
ngx_evít_busy_lock_po°ed_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_öt_t


27 
	$ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
, 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

29 
ngx_öt_t
 
rc
;

31 
	`ngx_muãx_lock
(
bl
->
muãx
);

33 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
evít
->
log
, 0,

35 
bl
->
busy
, bl->
max_busy
);

37 i‡(
bl
->
busy
 < bl->
max_busy
) {

38 
bl
->
busy
++;

40 
rc
 = 
NGX_OK
;

42 } i‡(
˘x
->
timî
 && 
bl
->
waôög
 < bl->
max_waôög
) {

43 
bl
->
waôög
++;

44 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timî
);

45 
˘x
->
evít
->
h™dÀr
 = 
ngx_evít_busy_lock_h™dÀr
;

47 i‡(
bl
->
evíts
) {

48 
bl
->
œ°
->
√xt
 = 
˘x
;

51 
bl
->
evíts
 = 
˘x
;

54 
bl
->
œ°
 = 
˘x
;

56 
rc
 = 
NGX_AGAIN
;

59 
rc
 = 
NGX_BUSY
;

62 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

64  
rc
;

65 
	}
}

68 
ngx_öt_t


69 
	$ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

70 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

72 
ngx_öt_t
 
rc
;

74 
	`ngx_muãx_lock
(
bl
->
muãx
);

76 
rc
 = 
	`ngx_evít_busy_lock_look_ˇchóbÀ
(
bl
, 
˘x
);

78 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
evít
->
log
, 0,

80 
rc
, 
bl
->
waôög
, bl->
max_waôög
);

88 i‡(
rc
 =
NGX_AGAIN
) {

90 i‡(
˘x
->
timî
 && 
bl
->
waôög
 < bl->
max_waôög
) {

91 
bl
->
waôög
++;

92 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timî
);

93 
˘x
->
evít
->
h™dÀr
 = 
ngx_evít_busy_lock_h™dÀr
;

95 i‡(
bl
->
evíts
 =
NULL
) {

96 
bl
->
evíts
 = 
˘x
;

98 
bl
->
œ°
->
√xt
 = 
˘x
;

100 
bl
->
œ°
 = 
˘x
;

103 
rc
 = 
NGX_BUSY
;

107 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

109  
rc
;

110 
	}
}

114 
	$ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

115 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

117 
ngx_evít_t
 *
ev
;

118 
ngx_evít_busy_lock_˘x_t
 *
wakeup
;

120 
	`ngx_muãx_lock
(
bl
->
muãx
);

122 i‡(
bl
->
evíts
) {

123 
wakeup
 = 
bl
->
evíts
;

124 
bl
->
evíts
 = bl->evíts->
√xt
;

127 
wakeup
 = 
NULL
;

128 
bl
->
busy
--;

136 i‡(
wakeup
 =
NULL
) {

137 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

141 i‡(
˘x
->
md5
) {

142 
wakeup
 = 
bl
->
evíts
; wakeup; wakeu∞wakeup->
√xt
) {

143 i‡(
wakeup
->
md5
 =
NULL
 || wakeup->
¶Ÿ
 !
˘x
->slot) {

147 
wakeup
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

148 
wakeup
->
ˇche_upd©ed
 = 1;

150 
ev
 = 
wakeup
->
evít
;

152 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

155 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

158 
bl
->
waôög
--;

160 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

162 
wakeup
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

163 
wakeup
->
locked
 = 1;

165 
ev
 = 
wakeup
->
evít
;

167 i‡(
ev
->
timî_£t
) {

168 
	`ngx_dñ_timî
(
ev
);

171 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

173 
	}
}

177 
	$ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

178 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

180 
ngx_evít_busy_lock_˘x_t
 *
c
, *
p
;

182 
	`ngx_muãx_lock
(
bl
->
muãx
);

184 
bl
->
waôög
--;

186 i‡(
˘x
 =
bl
->
evíts
) {

187 
bl
->
evíts
 = 
˘x
->
√xt
;

190 
p
 = 
bl
->
evíts
;

191 
c
 = 
bl
->
evíts
->
√xt
; c; c = c->next) {

192 i‡(
c
 =
˘x
) {

193 
p
->
√xt
 = 
˘x
->next;

196 
p
 = 
c
;

200 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

201 
	}
}

204 
ngx_öt_t


205 
	$ngx_evít_busy_lock_look_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

206 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

208 
ngx_öt_t
 
‰ì
;

209 
ngx_uöt_t
 
i
, 
bô
, 
ˇchóbÀ
, 
mask
;

211 
bô
 = 0;

212 
ˇchóbÀ
 = 0;

213 
‰ì
 = -1;

215 #i‡(
NGX_SUPPRESS_WARN
)

216 
mask
 = 0;

219 
i
 = 0; i < 
bl
->
max_busy
; i++) {

221 i‡((
bô
 & 7) == 0) {

222 
mask
 = 
bl
->
md5_mask
[
i
 / 8];

225 i‡(
mask
 & 1) {

226 i‡(
	`ngx_memcmp
(&
bl
->
md5
[
i
 * 16], 
˘x
->md5, 16) == 0) {

227 
˘x
->
waôög
 = 1;

228 
˘x
->
¶Ÿ
 = 
i
;

229  
NGX_AGAIN
;

231 
ˇchóbÀ
++;

233 } i‡(
‰ì
 == -1) {

234 
‰ì
 = 
i
;

237 i‡(
ˇchóbÀ
 =
bl
->cacheable) {

238 i‡(
‰ì
 =-1 && 
ˇchóbÀ
 < 
bl
->
max_busy
) {

239 
‰ì
 = 
i
 + 1;

245 
mask
 >>= 1;

246 
bô
++;

249 i‡(
‰ì
 == -1) {

250  
NGX_BUSY
;

254 i‡(
bl
->
busy
 =bl->
max_busy
) {

255  
NGX_BUSY
;

259 
	`ngx_mem˝y
(&
bl
->
md5
[
‰ì
 * 16], 
˘x
->md5, 16);

260 
bl
->
md5_mask
[
‰ì
 / 8] |= 1 << (free & 7);

261 
˘x
->
¶Ÿ
 = 
‰ì
;

263 
bl
->
ˇchóbÀ
++;

264 
bl
->
busy
++;

266  
NGX_OK
;

267 
	}
}

271 
	$ngx_evít_busy_lock_h™dÀr
(
ngx_evít_t
 *
ev
)

273 
ev
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

275 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

276 
	}
}

280 
	$ngx_evít_busy_lock_po°ed_h™dÀr
(
ngx_evít_t
 *
ev
)

282 
ngx_evít_busy_lock_˘x_t
 *
˘x
;

284 
˘x
 = 
ev
->
d©a
;

285 
˘x
->
	`h™dÀr
(
ev
);

286 
	}
}

	@src/event/ngx_event_busy_lock.h

8 #i‚de‡
_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

16 
ngx_evít_busy_lock_˘x_s
 
	tngx_evít_busy_lock_˘x_t
;

18 
	sngx_evít_busy_lock_˘x_s
 {

19 
ngx_evít_t
 *
	mevít
;

20 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

21 *
	md©a
;

22 
ngx_m£c_t
 
	mtimî
;

24 
	mlocked
:1;

25 
	mwaôög
:1;

26 
	mˇche_upd©ed
:1;

28 *
	mmd5
;

29 
ngx_öt_t
 
	m¶Ÿ
;

31 
ngx_evít_busy_lock_˘x_t
 *
	m√xt
;

36 
u_ch¨
 *
	mmd5_mask
;

37 *
	mmd5
;

38 
ngx_uöt_t
 
	mˇchóbÀ
;

40 
ngx_uöt_t
 
	mbusy
;

41 
ngx_uöt_t
 
	mmax_busy
;

43 
ngx_uöt_t
 
	mwaôög
;

44 
ngx_uöt_t
 
	mmax_waôög
;

46 
ngx_evít_busy_lock_˘x_t
 *
	mevíts
;

47 
ngx_evít_busy_lock_˘x_t
 *
	mœ°
;

49 #i‡(
NGX_THREADS
)

50 
ngx_muãx_t
 *
	mmuãx
;

52 } 
	tngx_evít_busy_lock_t
;

55 
ngx_öt_t
 
ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
,

56 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

57 
ngx_öt_t
 
ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

58 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

59 
ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

60 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

61 
ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

62 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

	@src/event/ngx_event_connect.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 
ngx_öt_t


15 
	$ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
)

17 
rc
;

18 
ngx_öt_t
 
evít
;

19 
ngx_îr_t
 
îr
;

20 
ngx_uöt_t
 
Àvñ
;

21 
ngx_sockë_t
 
s
;

22 
ngx_evít_t
 *
ªv
, *
wev
;

23 
ngx_c⁄√˘i⁄_t
 *
c
;

25 
rc
 = 
pc
->
	`gë
’c,Öc->
d©a
);

26 i‡(
rc
 !
NGX_OK
) {

27  
rc
;

30 
s
 = 
	`ngx_sockë
(
pc
->
sockaddr
->
ß_Ámûy
, 
SOCK_STREAM
, 0);

32 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "sockë %d", 
s
);

34 i‡(
s
 == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

36 
ngx_sockë_n
 " failed");

37  
NGX_ERROR
;

41 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
pc
->
log
);

43 i‡(
c
 =
NULL
) {

44 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

46 
ngx_˛o£_sockë_n
 "failed");

49  
NGX_ERROR
;

52 i‡(
pc
->
rcvbuf
) {

53 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_RCVBUF
,

54 (c⁄° *Ë&
pc
->
rcvbuf
, ()) == -1)

56 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

58 
Áûed
;

62 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

64 
ngx_n⁄blockög_n
 " failed");

66 
Áûed
;

69 i‡(
pc
->
loˇl
) {

70 i‡(
	`böd
(
s
, 
pc
->
loˇl
->
sockaddr
,Öc->loˇl->
sockÀn
) == -1) {

71 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

72 "böd(%VËÁûed", &
pc
->
loˇl
->
«me
);

74 
Áûed
;

78 
c
->
ªcv
 = 
ngx_ªcv
;

79 
c
->
£nd
 = 
ngx_£nd
;

80 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

81 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

83 
c
->
£ndfûe
 = 1;

85 
c
->
log_îr‹
 = 
pc
->log_error;

87 i‡(
pc
->
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

88 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

89 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

91 #i‡(
NGX_SOLARIS
)

93 
c
->
£ndfûe
 = 0;

97 
ªv
 = 
c
->
ªad
;

98 
wev
 = 
c
->
wrôe
;

100 
ªv
->
log
 = 
pc
->log;

101 
wev
->
log
 = 
pc
->log;

103 
pc
->
c⁄√˘i⁄
 = 
c
;

105 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

107 #i‡(
NGX_THREADS
)

111 
ªv
->
lock
 = 
pc
->lock;

112 
wev
->
lock
 = 
pc
->lock;

113 
ªv
->
own_lock
 = &
c
->
lock
;

114 
wev
->
own_lock
 = &
c
->
lock
;

118 i‡(
ngx_add_c⁄n
) {

119 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

120 
Áûed
;

124 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0,

125 "c⁄√˘Åÿ%V, fd:%d #%d", 
pc
->
«me
, 
s
, 
c
->
numbî
);

127 
rc
 = 
	`c⁄√˘
(
s
, 
pc
->
sockaddr
,Öc->
sockÀn
);

129 i‡(
rc
 == -1) {

130 
îr
 = 
ngx_sockë_î∫o
;

133 i‡(
îr
 !
NGX_EINPROGRESS


134 #i‡(
NGX_WIN32
)

136 && 
îr
 !
NGX_EAGAIN


140 i‡(
îr
 =
NGX_ECONNREFUSED


141 #i‡(
NGX_LINUX
)

146 || 
îr
 =
NGX_EAGAIN


148 || 
îr
 =
NGX_ECONNRESET


149 || 
îr
 =
NGX_ENETDOWN


150 || 
îr
 =
NGX_ENETUNREACH


151 || 
îr
 =
NGX_EHOSTDOWN


152 || 
îr
 =
NGX_EHOSTUNREACH
)

154 
Àvñ
 = 
NGX_LOG_ERR
;

157 
Àvñ
 = 
NGX_LOG_CRIT
;

160 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, "connect()Åo %V failed",

161 
pc
->
«me
);

163 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

164 
pc
->
c⁄√˘i⁄
 = 
NULL
;

166  
NGX_DECLINED
;

170 i‡(
ngx_add_c⁄n
) {

171 i‡(
rc
 == -1) {

175  
NGX_AGAIN
;

178 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

180 
wev
->
ªady
 = 1;

182  
NGX_OK
;

185 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

187 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

188 "c⁄√˘(): %d", 
rc
);

192 i‡(
	`ngx_blockög
(
s
) == -1) {

193 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

194 
ngx_blockög_n
 " failed");

195 
Áûed
;

205 
ªv
->
ªady
 = 1;

206 
wev
->
ªady
 = 1;

208  
NGX_OK
;

211 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

215 
evít
 = 
NGX_CLEAR_EVENT
;

221 
evít
 = 
NGX_LEVEL_EVENT
;

224 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

225 
Áûed
;

228 i‡(
rc
 == -1) {

232 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
evít
Ë!
NGX_OK
) {

233 
Áûed
;

236  
NGX_AGAIN
;

239 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

241 
wev
->
ªady
 = 1;

243  
NGX_OK
;

245 
Áûed
:

247 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

248 
pc
->
c⁄√˘i⁄
 = 
NULL
;

250  
NGX_ERROR
;

251 
	}
}

254 
ngx_öt_t


255 
	$ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

257  
NGX_OK
;

258 
	}
}

	@src/event/ngx_event_connect.h

8 #i‚de‡
_NGX_EVENT_CONNECT_H_INCLUDED_


9 
	#_NGX_EVENT_CONNECT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_PEER_KEEPALIVE
 1

	)

18 
	#NGX_PEER_NEXT
 2

	)

19 
	#NGX_PEER_FAILED
 4

	)

22 
ngx_≥î_c⁄√˘i⁄_s
 
	tngx_≥î_c⁄√˘i⁄_t
;

24 
	$ngx_öt_t
 (*
	tngx_evít_gë_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

25 *
	td©a
);

26 (*
	tngx_evít_‰ì_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
, *
	td©a
,

27 
	tngx_uöt_t
 
	t°©e
);

28 #i‡(
NGX_SSL
)

30 
	$ngx_öt_t
 (*
	tngx_evít_£t_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

31 *
	td©a
);

32 (*
	tngx_evít_ßve_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

33 *
	td©a
);

37 
	sngx_≥î_c⁄√˘i⁄_s
 {

38 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

40 
sockaddr
 *sockaddr;

41 
sockÀn_t
 
sockÀn
;

42 
ngx_°r_t
 *
«me
;

44 
ngx_uöt_t
 
åõs
;

46 
ngx_evít_gë_≥î_±
 
gë
;

47 
ngx_evít_‰ì_≥î_±
 
‰ì
;

48 *
d©a
;

50 #i‡(
NGX_SSL
)

51 
ngx_evít_£t_≥î_£ssi⁄_±
 
£t_£ssi⁄
;

52 
ngx_evít_ßve_≥î_£ssi⁄_±
 
ßve_£ssi⁄
;

55 #i‡(
NGX_THREADS
)

56 
ngx_©omic_t
 *
lock
;

59 
ngx_addr_t
 *
loˇl
;

61 
rcvbuf
;

63 
ngx_log_t
 *
log
;

65 
ˇched
:1;

68 
log_îr‹
:2;

72 
ngx_öt_t
 
	`ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
);

73 
ngx_öt_t
 
	`ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

	@src/event/ngx_event_mutex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
	$ngx_evít_muãx_timedlock
(
ngx_evít_muãx_t
 *
m
, 
ngx_m£c_t
 
timî
,

14 
ngx_evít_t
 *
ev
)

16 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

17 "lockÉvíàmuãx %∞lock:%XD", 
m
, m->
lock
);

19 i‡(
m
->
lock
) {

21 i‡(
m
->
evíts
 =
NULL
) {

22 
m
->
evíts
 = 
ev
;

25 
m
->
œ°
->
√xt
 = 
ev
;

28 
m
->
œ°
 = 
ev
;

29 
ev
->
√xt
 = 
NULL
;

31 #i‡(
NGX_THREADS0
)

32 
ev
->
light
 = 1;

35 
	`ngx_add_timî
(
ev
, 
timî
);

37  
NGX_AGAIN
;

40 
m
->
lock
 = 1;

42  
NGX_OK
;

43 
	}
}

46 
ngx_öt_t
 
	$ngx_evít_muãx_u∆ock
(
ngx_evít_muãx_t
 *
m
, 
ngx_log_t
 *
log
)

48 
ngx_evít_t
 *
ev
;

50 i‡(
m
->
lock
 == 0) {

51 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

52 "åögÅÿu∆ockÅhê‰ìÉvíàmuãx %p", 
m
);

53  
NGX_ERROR
;

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

57 "u∆ockÉvíàmuãx %p,Çexàevít: %p", 
m
, m->
evíts
);

59 
m
->
lock
 = 0;

61 i‡(
m
->
evíts
) {

62 
ev
 = 
m
->
evíts
;

63 
m
->
evíts
 = 
ev
->
√xt
;

65 
ev
->
√xt
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;

66 
ngx_po°ed_evíts
 = 
ev
;

69  
NGX_OK
;

70 
	}
}

	@src/event/ngx_event_openssl.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mígöe
;

15 } 
	tngx_›ís¶_c⁄f_t
;

18 
ngx_hâp_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
);

19 
ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
,

20 
ªt
);

21 
ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
);

22 
ngx_öt_t
 
ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
);

23 
ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

24 
ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

25 
ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
,

27 
ngx_îr_t
 
îr
, *
ãxt
);

28 
ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
);

30 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

31 
ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

32 
ngx_s¶_£ssi⁄_t
 *
£ss
);

33 
ngx_s¶_£ssi⁄_t
 *
ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

34 
u_ch¨
 *
id
, 
Àn
, *
c›y
);

35 
ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

36 
ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

37 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
);

38 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

39 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

41 *
ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

42 *
ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

43 
ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
);

46 
ngx_comm™d_t
 
	gngx_›ís¶_comm™ds
[] = {

48 { 
ngx_°rög
("ssl_engine"),

49 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_›ís¶_ígöe
,

53 
NULL
 },

55 
ngx_nuŒ_comm™d


59 
ngx_c‹e_moduÀ_t
 
	gngx_›ís¶_moduÀ_˘x
 = {

60 
ngx_°rög
("openssl"),

61 
ngx_›ís¶_¸óã_c⁄f
,

62 
NULL


66 
ngx_moduÀ_t
 
	gngx_›ís¶_moduÀ
 = {

67 
NGX_MODULE_V1
,

68 &
ngx_›ís¶_moduÀ_˘x
,

69 
ngx_›ís¶_comm™ds
,

70 
NGX_CORE_MODULE
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
ngx_›ís¶_exô
,

78 
NGX_MODULE_V1_PADDING


82 
	gngx_s¶_c⁄√˘i⁄_ödex
;

83 
	gngx_s¶_£rvî_c⁄f_ödex
;

84 
	gngx_s¶_£ssi⁄_ˇche_ödex
;

87 
ngx_öt_t


88 
	$ngx_s¶_öô
(
ngx_log_t
 *
log
)

90 
	`OPENSSL_c⁄fig
(
NULL
);

92 
	`SSL_libøry_öô
();

93 
	`SSL_lﬂd_îr‹_°rögs
();

95 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

97 
ngx_s¶_c⁄√˘i⁄_ödex
 = 
	`SSL_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL, NULL);

99 i‡(
ngx_s¶_c⁄√˘i⁄_ödex
 == -1) {

100 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "SSL_get_ex_new_index() failed");

101  
NGX_ERROR
;

104 
ngx_s¶_£rvî_c⁄f_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

105 
NULL
);

106 i‡(
ngx_s¶_£rvî_c⁄f_ödex
 == -1) {

107 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

109  
NGX_ERROR
;

112 
ngx_s¶_£ssi⁄_ˇche_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

113 
NULL
);

114 i‡(
ngx_s¶_£ssi⁄_ˇche_ödex
 == -1) {

115 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

117  
NGX_ERROR
;

120  
NGX_OK
;

121 
	}
}

124 
ngx_öt_t


125 
	$ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
)

127 
s¶
->
˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_mëhod
());

129 i‡(
s¶
->
˘x
 =
NULL
) {

130 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "SSL_CTX_new() failed");

131  
NGX_ERROR
;

134 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
, 
d©a
) == 0) {

135 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

137  
NGX_ERROR
;

142 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_SESS_ID_BUG
);

143 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NETSCAPE_CHALLENGE_BUG
);

147 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
);

148 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
);

151 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MSIE_SSLV2_RSA_PADDING
);

153 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLEAY_080_CLIENT_DH_BUG
);

154 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_D5_BUG
);

155 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_BLOCK_PADDING_BUG
);

157 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
);

159 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_DH_USE
);

161 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv2
)) {

162 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv2
);

164 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv3
)) {

165 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv3
);

167 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1
)) {

168 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1
);

170 #ifde‡
SSL_OP_NO_TLSv1_1


171 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_1
)) {

172 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_1
);

175 #ifde‡
SSL_OP_NO_TLSv1_2


176 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_2
)) {

177 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_2
);

181 #ifde‡
SSL_OP_NO_COMPRESSION


182 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_COMPRESSION
);

185 #ifde‡
SSL_MODE_RELEASE_BUFFERS


186 
	`SSL_CTX_£t_mode
(
s¶
->
˘x
, 
SSL_MODE_RELEASE_BUFFERS
);

189 
	`SSL_CTX_£t_ªad_ahód
(
s¶
->
˘x
, 1);

191 
	`SSL_CTX_£t_öfo_ˇŒback
(
s¶
->
˘x
, 
ngx_s¶_öfo_ˇŒback
);

193  
NGX_OK
;

194 
	}
}

197 
ngx_öt_t


198 
	$ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

199 
ngx_°r_t
 *
key
)

201 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

202  
NGX_ERROR
;

205 i‡(
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
)

208 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

210 
˚π
->
d©a
);

211  
NGX_ERROR
;

214 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
key
, 1Ë!
NGX_OK
) {

215  
NGX_ERROR
;

218 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
s¶
->
˘x
, (*Ë
key
->
d©a
,

219 
SSL_FILETYPE_PEM
)

222 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

223 "SSL_CTX_u£_Priv©eKey_fûe(\"%s\"ËÁûed", 
key
->
d©a
);

224  
NGX_ERROR
;

227  
NGX_OK
;

228 
	}
}

231 
ngx_öt_t


232 
	$ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

233 
ngx_öt_t
 
dïth
)

235 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

237 
	`SSL_CTX_£t_vîify
(
s¶
->
˘x
, 
SSL_VERIFY_PEER
, 
ngx_hâp_s¶_vîify_ˇŒback
);

239 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

241 i‡(
˚π
->
Àn
 == 0) {

242  
NGX_OK
;

245 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

246  
NGX_ERROR
;

249 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

252 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

254 
˚π
->
d©a
);

255  
NGX_ERROR
;

258 
li°
 = 
	`SSL_lﬂd_˛õ¡_CA_fûe
((*Ë
˚π
->
d©a
);

260 i‡(
li°
 =
NULL
) {

261 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

262 "SSL_lﬂd_˛õ¡_CA_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

263  
NGX_ERROR
;

271 
	`ERR_˛ór_îr‹
();

273 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
s¶
->
˘x
, 
li°
);

275  
NGX_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
)

282 
X509_STORE
 *
°‹e
;

283 
X509_LOOKUP
 *
lookup
;

285 i‡(
¸l
->
Àn
 == 0) {

286  
NGX_OK
;

289 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
¸l
, 1Ë!
NGX_OK
) {

290  
NGX_ERROR
;

293 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

295 i‡(
°‹e
 =
NULL
) {

296 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

298  
NGX_ERROR
;

301 
lookup
 = 
	`X509_STORE_add_lookup
(
°‹e
, 
	`X509_LOOKUP_fûe
());

303 i‡(
lookup
 =
NULL
) {

304 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

306  
NGX_ERROR
;

309 i‡(
	`X509_LOOKUP_lﬂd_fûe
(
lookup
, (*Ë
¸l
->
d©a
, 
X509_FILETYPE_PEM
)

312 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

313 "X509_LOOKUP_lﬂd_fûe(\"%s\"ËÁûed", 
¸l
->
d©a
);

314  
NGX_ERROR
;

317 
	`X509_STORE_£t_Êags
(
°‹e
,

318 
X509_V_FLAG_CRL_CHECK
|
X509_V_FLAG_CRL_CHECK_ALL
);

320  
NGX_OK
;

321 
	}
}

325 
	$ngx_hâp_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
)

327 #i‡(
NGX_DEBUG
)

328 *
subje˘
, *
issuî
;

329 
îr
, 
dïth
;

330 
X509
 *
˚π
;

331 
X509_NAME
 *
¢ame
, *
öame
;

332 
ngx_c⁄√˘i⁄_t
 *
c
;

333 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
;

335 
s¶_c⁄n
 = 
	`X509_STORE_CTX_gë_ex_d©a
(
x509_°‹e
,

336 
	`SSL_gë_ex_d©a_X509_STORE_CTX_idx
());

338 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

340 
˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
x509_°‹e
);

341 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
x509_°‹e
);

342 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
x509_°‹e
);

344 
¢ame
 = 
	`X509_gë_subje˘_«me
(
˚π
);

345 
subje˘
 = 
¢ame
 ? 
	`X509_NAME_⁄ñöe
(¢ame, 
NULL
, 0) : "(none)";

347 
öame
 = 
	`X509_gë_issuî_«me
(
˚π
);

348 
issuî
 = 
öame
 ? 
	`X509_NAME_⁄ñöe
(öame, 
NULL
, 0) : "(none)";

350 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

353 
ok
, 
îr
, 
dïth
, 
subje˘
, 
issuî
);

355 i‡(
¢ame
) {

356 
	`OPENSSL_‰ì
(
subje˘
);

359 i‡(
öame
) {

360 
	`OPENSSL_‰ì
(
issuî
);

365 
	}
}

369 
	$ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
, 
ªt
)

371 
ngx_c⁄√˘i⁄_t
 *
c
;

373 i‡(
whîe
 & 
SSL_CB_HANDSHAKE_START
) {

374 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

376 i‡(
c
->
s¶
->
h™dshaked
) {

377 
c
->
s¶
->
ª√gŸüti⁄
 = 1;

378 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÑenegotiation");

381 
	}
}

384 
RSA
 *

385 
	$ngx_s¶_rß512_key_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
, 
key_Àngth
)

387 
RSA
 *
key
;

389 i‡(
key_Àngth
 == 512) {

390 i‡(
key
 =
NULL
) {

391 
key
 = 
	`RSA_gíî©e_key
(512, 
RSA_F4
, 
NULL
, NULL);

395  
key
;

396 
	}
}

399 
ngx_öt_t


400 
	$ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

402 
DH
 *
dh
;

403 
BIO
 *
bio
;

413 
dh1024_p
[] = {

427 
dh1024_g
[] = { 0x02 };

430 i‡(
fûe
->
Àn
 == 0) {

432 
dh
 = 
	`DH_√w
();

433 i‡(
dh
 =
NULL
) {

434 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "DH_new() failed");

435  
NGX_ERROR
;

438 
dh
->
p
 = 
	`BN_bö2bn
(
dh1024_p
, (dh1024_p), 
NULL
);

439 
dh
->
g
 = 
	`BN_bö2bn
(
dh1024_g
, (dh1024_g), 
NULL
);

441 i‡(
dh
->
p
 =
NULL
 || dh->
g
 == NULL) {

442 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "BN_bin2bn() failed");

443 
	`DH_‰ì
(
dh
);

444  
NGX_ERROR
;

447 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

449 
	`DH_‰ì
(
dh
);

451  
NGX_OK
;

454 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

455  
NGX_ERROR
;

458 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

459 i‡(
bio
 =
NULL
) {

460 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

461 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

462  
NGX_ERROR
;

465 
dh
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

466 i‡(
dh
 =
NULL
) {

467 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

468 "PEM_ªad_bio_DH∑øms(\"%s\"ËÁûed", 
fûe
->
d©a
);

469 
	`BIO_‰ì
(
bio
);

470  
NGX_ERROR
;

473 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

475 
	`DH_‰ì
(
dh
);

476 
	`BIO_‰ì
(
bio
);

478  
NGX_OK
;

479 
	}
}

481 
ngx_öt_t


482 
	$ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
)

484 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

485 #i‚de‡
OPENSSL_NO_ECDH


486 
nid
;

487 
EC_KEY
 *
ecdh
;

496 
nid
 = 
	`OBJ_¢2nid
((c⁄° *Ë
«me
->
d©a
);

497 i‡(
nid
 == 0) {

498 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

499 "Unknow¿curvê«mê\"%s\"", 
«me
->
d©a
);

500  
NGX_ERROR
;

503 
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
nid
);

504 i‡(
ecdh
 =
NULL
) {

505 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

506 "U«bÀÅÿ¸óã curvê\"%s\"", 
«me
->
d©a
);

507  
NGX_ERROR
;

510 
	`SSL_CTX_£t_tmp_ecdh
(
s¶
->
˘x
, 
ecdh
);

512 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_ECDH_USE
);

514 
	`EC_KEY_‰ì
(
ecdh
);

518  
NGX_OK
;

519 
	}
}

521 
ngx_öt_t


522 
	$ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

524 
ngx_s¶_c⁄√˘i⁄_t
 *
sc
;

526 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_s¶_c⁄√˘i⁄_t
));

527 i‡(
sc
 =
NULL
) {

528  
NGX_ERROR
;

531 
sc
->
buf„r
 = ((
Êags
 & 
NGX_SSL_BUFFER
) != 0);

533 
sc
->
c⁄√˘i⁄
 = 
	`SSL_√w
(
s¶
->
˘x
);

535 i‡(
sc
->
c⁄√˘i⁄
 =
NULL
) {

536 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_new() failed");

537  
NGX_ERROR
;

540 i‡(
	`SSL_£t_fd
(
sc
->
c⁄√˘i⁄
, 
c
->
fd
) == 0) {

541 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_fd() failed");

542  
NGX_ERROR
;

545 i‡(
Êags
 & 
NGX_SSL_CLIENT
) {

546 
	`SSL_£t_c⁄√˘_°©e
(
sc
->
c⁄√˘i⁄
);

549 
	`SSL_£t_ac˚±_°©e
(
sc
->
c⁄√˘i⁄
);

552 i‡(
	`SSL_£t_ex_d©a
(
sc
->
c⁄√˘i⁄
, 
ngx_s¶_c⁄√˘i⁄_ödex
, 
c
) == 0) {

553 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_ex_data() failed");

554  
NGX_ERROR
;

557 
c
->
s¶
 = 
sc
;

559  
NGX_OK
;

560 
	}
}

563 
ngx_öt_t


564 
	$ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
)

566 i‡(
£ssi⁄
) {

567 i‡(
	`SSL_£t_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
, 
£ssi⁄
) == 0) {

568 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_session() failed");

569  
NGX_ERROR
;

573  
NGX_OK
;

574 
	}
}

577 
ngx_öt_t


578 
	$ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

580 
n
, 
s¶îr
;

581 
ngx_îr_t
 
îr
;

583 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

585 
n
 = 
	`SSL_do_h™dshake
(
c
->
s¶
->
c⁄√˘i⁄
);

587 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_do_h™dshake: %d", 
n
);

589 i‡(
n
 == 1) {

591 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

592  
NGX_ERROR
;

595 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

596  
NGX_ERROR
;

599 #i‡(
NGX_DEBUG
)

601 
buf
[129], *
s
, *
d
;

602 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

605 
SSL_CIPHER
 *
cùhî
;

607 
cùhî
 = 
	`SSL_gë_cuºít_cùhî
(
c
->
s¶
->
c⁄√˘i⁄
);

609 i‡(
cùhî
) {

610 
	`SSL_CIPHER_des¸ùti⁄
(
cùhî
, &
buf
[1], 128);

612 
s
 = &
buf
[1], 
d
 = buf; *s; s++) {

613 i‡(*
s
 =' ' && *
d
 == ' ') {

617 i‡(*
s
 =
LF
 || *†=
CR
) {

621 *++
d
 = *
s
;

624 i‡(*
d
 != ' ') {

625 
d
++;

628 *
d
 = '\0';

630 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

632 
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
), &
buf
[1]);

634 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

635 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

640 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

646 
c
->
s¶
->
h™dshaked
 = 1;

648 
c
->
ªcv
 = 
ngx_s¶_ªcv
;

649 
c
->
£nd
 = 
ngx_s¶_wrôe
;

650 
c
->
ªcv_chaö
 = 
ngx_s¶_ªcv_chaö
;

651 
c
->
£nd_chaö
 = 
ngx_s¶_£nd_chaö
;

654 i‡(
c
->
s¶
->
c⁄√˘i⁄
->
s3
) {

655 
c
->
s¶
->
c⁄√˘i⁄
->
s3
->
Êags
 |
SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
;

658  
NGX_OK
;

661 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

663 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

665 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

666 
c
->
ªad
->
ªady
 = 0;

667 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

668 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

670 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

671  
NGX_ERROR
;

674  
NGX_AGAIN
;

677 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

678 
c
->
wrôe
->
ªady
 = 0;

679 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

680 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

682 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

683  
NGX_ERROR
;

686  
NGX_AGAIN
;

689 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

691 
c
->
s¶
->
no_waô_shutdown
 = 1;

692 
c
->
s¶
->
no_£nd_shutdown
 = 1;

693 
c
->
ªad
->
eof
 = 1;

695 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

696 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

699  
NGX_ERROR
;

702 
c
->
ªad
->
îr‹
 = 1;

704 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_do_handshake() failed");

706  
NGX_ERROR
;

707 
	}
}

711 
	$ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
)

713 
ngx_c⁄√˘i⁄_t
 *
c
;

715 
c
 = 
ev
->
d©a
;

717 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

718 "SSL h™dshakêh™dÀr: %d", 
ev
->
wrôe
);

720 i‡(
ev
->
timedout
) {

721 
c
->
s¶
->
	`h™dÀr
(c);

725 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

729 
c
->
s¶
->
	`h™dÀr
(c);

730 
	}
}

733 
ssize_t


734 
	$ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
)

736 
u_ch¨
 *
œ°
;

737 
ssize_t
 
n
, 
byãs
;

738 
ngx_buf_t
 *
b
;

740 
byãs
 = 0;

742 
b
 = 
˛
->
buf
;

743 
œ°
 = 
b
->last;

747 
n
 = 
	`ngx_s¶_ªcv
(
c
, 
œ°
, 
b
->
íd
 -Üast);

749 i‡(
n
 > 0) {

750 
œ°
 +
n
;

751 
byãs
 +
n
;

753 i‡(
œ°
 =
b
->
íd
) {

754 
˛
 = cl->
√xt
;

756 i‡(
˛
 =
NULL
) {

757  
byãs
;

760 
b
 = 
˛
->
buf
;

761 
œ°
 = 
b
->last;

767 i‡(
byãs
) {

769 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

770 
c
->
ªad
->
ªady
 = 1;

773  
byãs
;

776  
n
;

778 
	}
}

781 
ssize_t


782 
	$ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

784 
n
, 
byãs
;

786 i‡(
c
->
s¶
->
œ°
 =
NGX_ERROR
) {

787 
c
->
ªad
->
îr‹
 = 1;

788  
NGX_ERROR
;

791 i‡(
c
->
s¶
->
œ°
 =
NGX_DONE
) {

792 
c
->
ªad
->
ªady
 = 0;

793 
c
->
ªad
->
eof
 = 1;

797 
byãs
 = 0;

799 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

808 
n
 = 
	`SSL_ªad
(
c
->
s¶
->
c⁄√˘i⁄
, 
buf
, 
size
);

810 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_ªad: %d", 
n
);

812 i‡(
n
 > 0) {

813 
byãs
 +
n
;

816 
c
->
s¶
->
œ°
 = 
	`ngx_s¶_h™dÀ_ªcv
(c, 
n
);

818 i‡(
c
->
s¶
->
œ°
 =
NGX_OK
) {

820 
size
 -
n
;

822 i‡(
size
 == 0) {

823  
byãs
;

826 
buf
 +
n
;

831 i‡(
byãs
) {

832  
byãs
;

835 
c
->
s¶
->
œ°
) {

837 
NGX_DONE
:

838 
c
->
ªad
->
ªady
 = 0;

839 
c
->
ªad
->
eof
 = 1;

842 
NGX_ERROR
:

843 
c
->
ªad
->
îr‹
 = 1;

847 
NGX_AGAIN
:

848  
c
->
s¶
->
œ°
;

851 
	}
}

854 
ngx_öt_t


855 
	$ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
)

857 
s¶îr
;

858 
ngx_îr_t
 
îr
;

860 i‡(
c
->
s¶
->
ª√gŸüti⁄
) {

867 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
c
->
log
, 0, "SSLÑenegotiation disabled");

869 
	`ERR_≥ek_îr‹
()) {

870 
	`ngx_s¶_îr‹
(
NGX_LOG_DEBUG
, 
c
->
log
, 0,

874 
	`ERR_˛ór_îr‹
();

876 
c
->
s¶
->
no_waô_shutdown
 = 1;

877 
c
->
s¶
->
no_£nd_shutdown
 = 1;

879  
NGX_ERROR
;

882 i‡(
n
 > 0) {

884 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
) {

886 
c
->
wrôe
->
h™dÀr
 = c->
s¶
->
ßved_wrôe_h™dÀr
;

887 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = 
NULL
;

888 
c
->
wrôe
->
ªady
 = 1;

890 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

891  
NGX_ERROR
;

894 
	`ngx_po°_evít
(
c
->
wrôe
, &
ngx_po°ed_evíts
);

897  
NGX_OK
;

900 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

902 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

904 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

906 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

907 
c
->
ªad
->
ªady
 = 0;

908  
NGX_AGAIN
;

911 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

913 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

916 
c
->
wrôe
->
ªady
 = 0;

918 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

919  
NGX_ERROR
;

926 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
 =
NULL
) {

927 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = c->
wrôe
->
h™dÀr
;

928 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_wrôe_h™dÀr
;

931  
NGX_AGAIN
;

934 
c
->
s¶
->
no_waô_shutdown
 = 1;

935 
c
->
s¶
->
no_£nd_shutdown
 = 1;

937 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

938 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

940  
NGX_DONE
;

943 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_read() failed");

945  
NGX_ERROR
;

946 
	}
}

950 
	$ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

952 
ngx_c⁄√˘i⁄_t
 *
c
;

954 
c
 = 
wev
->
d©a
;

956 
c
->
ªad
->
	`h™dÀr
(c->read);

957 
	}
}

968 
ngx_chaö_t
 *

969 
	$ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

971 
n
;

972 
ngx_uöt_t
 
Êush
;

973 
ssize_t
 
£nd
, 
size
;

974 
ngx_buf_t
 *
buf
;

976 i‡(!
c
->
s¶
->
buf„r
) {

978 
ö
) {

979 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

980 
ö
 = in->
√xt
;

984 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
ö
->
buf
->
pos
, in->buf->
œ°
 - in->buf->pos);

986 i‡(
n
 =
NGX_ERROR
) {

987  
NGX_CHAIN_ERROR
;

990 i‡(
n
 =
NGX_AGAIN
) {

991 
c
->
buf„ªd
 |
NGX_SSL_BUFFERED
;

992  
ö
;

995 
ö
->
buf
->
pos
 +
n
;

997 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

998 
ö
 = in->
√xt
;

1002  
ö
;

1008 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
)) {

1009 
limô
 = 
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
;

1012 
buf
 = 
c
->
s¶
->buf;

1014 i‡(
buf
 =
NULL
) {

1015 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
NGX_SSL_BUFSIZE
);

1016 i‡(
buf
 =
NULL
) {

1017  
NGX_CHAIN_ERROR
;

1020 
c
->
s¶
->
buf
 = buf;

1023 i‡(
buf
->
°¨t
 =
NULL
) {

1024 
buf
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
NGX_SSL_BUFSIZE
);

1025 i‡(
buf
->
°¨t
 =
NULL
) {

1026  
NGX_CHAIN_ERROR
;

1029 
buf
->
pos
 = buf->
°¨t
;

1030 
buf
->
œ°
 = buf->
°¨t
;

1031 
buf
->
íd
 = buf->
°¨t
 + 
NGX_SSL_BUFSIZE
;

1034 
£nd
 = 0;

1035 
Êush
 = (
ö
 =
NULL
) ? 1 : 0;

1039 
ö
 && 
buf
->
œ°
 < buf->
íd
 && 
£nd
 < 
limô
) {

1040 i‡(
ö
->
buf
->
œ°_buf
 || in->buf->
Êush
) {

1041 
Êush
 = 1;

1044 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1045 
ö
 = in->
√xt
;

1049 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

1051 i‡(
size
 > 
buf
->
íd
 - buf->
œ°
) {

1052 
size
 = 
buf
->
íd
 - buf->
œ°
;

1055 i‡(
£nd
 + 
size
 > 
limô
) {

1056 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

1057 
Êush
 = 1;

1060 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1061 "SSL bu‡c›y: %d", 
size
);

1063 
	`ngx_mem˝y
(
buf
->
œ°
, 
ö
->buf->
pos
, 
size
);

1065 
buf
->
œ°
 +
size
;

1066 
ö
->
buf
->
pos
 +
size
;

1067 
£nd
 +
size
;

1069 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1070 
ö
 = in->
√xt
;

1074 
size
 = 
buf
->
œ°
 - buf->
pos
;

1076 i‡(!
Êush
 && 
buf
->
œ°
 < buf->
íd
 && 
c
->
s¶
->
buf„r
) {

1080 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
buf
->
pos
, 
size
);

1082 i‡(
n
 =
NGX_ERROR
) {

1083  
NGX_CHAIN_ERROR
;

1086 i‡(
n
 =
NGX_AGAIN
) {

1087 
c
->
buf„ªd
 |
NGX_SSL_BUFFERED
;

1088  
ö
;

1091 
buf
->
pos
 +
n
;

1092 
c
->
£¡
 +
n
;

1094 i‡(
n
 < 
size
) {

1098 i‡(
buf
->
pos
 =buf->
œ°
) {

1099 
buf
->
pos
 = buf->
°¨t
;

1100 
buf
->
œ°
 = buf->
°¨t
;

1103 i‡(
ö
 =
NULL
 || 
£nd
 =
limô
) {

1108 i‡(
buf
->
pos
 < buf->
œ°
) {

1109 
c
->
buf„ªd
 |
NGX_SSL_BUFFERED
;

1112 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1115  
ö
;

1116 
	}
}

1119 
ssize_t


1120 
	$ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
)

1122 
n
, 
s¶îr
;

1123 
ngx_îr_t
 
îr
;

1125 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1127 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÅÿwrôe: %d", 
size
);

1129 
n
 = 
	`SSL_wrôe
(
c
->
s¶
->
c⁄√˘i⁄
, 
d©a
, 
size
);

1131 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_wrôe: %d", 
n
);

1133 i‡(
n
 > 0) {

1135 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
) {

1137 
c
->
ªad
->
h™dÀr
 = c->
s¶
->
ßved_ªad_h™dÀr
;

1138 
c
->
s¶
->
ßved_ªad_h™dÀr
 = 
NULL
;

1139 
c
->
ªad
->
ªady
 = 1;

1141 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1142  
NGX_ERROR
;

1145 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

1148  
n
;

1151 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1153 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1155 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1157 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1158 
c
->
wrôe
->
ªady
 = 0;

1159  
NGX_AGAIN
;

1162 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1164 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1167 
c
->
ªad
->
ªady
 = 0;

1169 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1170  
NGX_ERROR
;

1178 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
 =
NULL
) {

1179 
c
->
s¶
->
ßved_ªad_h™dÀr
 = c->
ªad
->
h™dÀr
;

1180 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_ªad_h™dÀr
;

1183  
NGX_AGAIN
;

1186 
c
->
s¶
->
no_waô_shutdown
 = 1;

1187 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1188 
c
->
wrôe
->
îr‹
 = 1;

1190 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_write() failed");

1192  
NGX_ERROR
;

1193 
	}
}

1197 
	$ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1199 
ngx_c⁄√˘i⁄_t
 *
c
;

1201 
c
 = 
ªv
->
d©a
;

1203 
c
->
wrôe
->
	`h™dÀr
(c->write);

1204 
	}
}

1208 
	$ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
)

1210 i‡(
c
->
s¶
->
buf
 && c->s¶->buf->
°¨t
) {

1211 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, c->
s¶
->
buf
->
°¨t
Ë=
NGX_OK
) {

1212 
c
->
s¶
->
buf
->
°¨t
 = 
NULL
;

1215 
	}
}

1218 
ngx_öt_t


1219 
	$ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
)

1221 
n
, 
s¶îr
, 
mode
;

1222 
ngx_îr_t
 
îr
;

1224 i‡(
c
->
timedout
) {

1225 
mode
 = 
SSL_RECEIVED_SHUTDOWN
|
SSL_SENT_SHUTDOWN
;

1226 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1229 
mode
 = 
	`SSL_gë_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1231 i‡(
c
->
s¶
->
no_waô_shutdown
) {

1232 
mode
 |
SSL_RECEIVED_SHUTDOWN
;

1235 i‡(
c
->
s¶
->
no_£nd_shutdown
) {

1236 
mode
 |
SSL_SENT_SHUTDOWN
;

1239 i‡(
c
->
s¶
->
no_waô_shutdown
 && c->s¶->
no_£nd_shutdown
) {

1240 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1244 
	`SSL_£t_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 
mode
);

1246 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1248 
n
 = 
	`SSL_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1250 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_shutdown: %d", 
n
);

1252 
s¶îr
 = 0;

1256 i‡(
n
 !1 && 
	`ERR_≥ek_îr‹
()) {

1257 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1259 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1260 "SSL_gë_îr‹: %d", 
s¶îr
);

1263 i‡(
n
 =1 || 
s¶îr
 =0 || s¶î∏=
SSL_ERROR_ZERO_RETURN
) {

1264 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1265 
c
->
s¶
 = 
NULL
;

1267  
NGX_OK
;

1270 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
 || s¶î∏=
SSL_ERROR_WANT_WRITE
) {

1271 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1272 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1274 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1275  
NGX_ERROR
;

1278 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1279  
NGX_ERROR
;

1282 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1283 
	`ngx_add_timî
(
c
->
ªad
, 30000);

1286  
NGX_AGAIN
;

1289 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1291 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_shutdown() failed");

1293 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1294 
c
->
s¶
 = 
NULL
;

1296  
NGX_ERROR
;

1297 
	}
}

1301 
	$ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
)

1303 
ngx_c⁄√˘i⁄_t
 *
c
;

1304 
ngx_c⁄√˘i⁄_h™dÀr_±
 
h™dÀr
;

1306 
c
 = 
ev
->
d©a
;

1307 
h™dÀr
 = 
c
->
s¶
->handler;

1309 i‡(
ev
->
timedout
) {

1310 
c
->
timedout
 = 1;

1313 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "SSL shutdown handler");

1315 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

1319 
	`h™dÀr
(
c
);

1320 
	}
}

1324 
	$ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
, 
ngx_îr_t
 
îr
,

1325 *
ãxt
)

1327 
n
;

1328 
ngx_uöt_t
 
Àvñ
;

1330 
Àvñ
 = 
NGX_LOG_CRIT
;

1332 i‡(
s¶îr
 =
SSL_ERROR_SYSCALL
) {

1334 i‡(
îr
 =
NGX_ECONNRESET


1335 || 
îr
 =
NGX_EPIPE


1336 || 
îr
 =
NGX_ENOTCONN


1337 || 
îr
 =
NGX_ETIMEDOUT


1338 || 
îr
 =
NGX_ECONNREFUSED


1339 || 
îr
 =
NGX_ENETDOWN


1340 || 
îr
 =
NGX_ENETUNREACH


1341 || 
îr
 =
NGX_EHOSTDOWN


1342 || 
îr
 =
NGX_EHOSTUNREACH
)

1344 
c
->
log_îr‹
) {

1346 
NGX_ERROR_IGNORE_ECONNRESET
:

1347 
NGX_ERROR_INFO
:

1348 
Àvñ
 = 
NGX_LOG_INFO
;

1351 
NGX_ERROR_ERR
:

1352 
Àvñ
 = 
NGX_LOG_ERR
;

1360 } i‡(
s¶îr
 =
SSL_ERROR_SSL
) {

1362 
n
 = 
	`ERR_GET_REASON
(
	`ERR_≥ek_îr‹
());

1365 i‡(
n
 =
SSL_R_BAD_CHANGE_CIPHER_SPEC


1366 || 
n
 =
SSL_R_BLOCK_CIPHER_PAD_IS_WRONG


1367 || 
n
 =
SSL_R_DIGEST_CHECK_FAILED


1368 || 
n
 =
SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST


1369 || 
n
 =
SSL_R_EXCESSIVE_MESSAGE_SIZE


1370 || 
n
 =
SSL_R_LENGTH_MISMATCH


1371 || 
n
 =
SSL_R_NO_CIPHERS_PASSED


1372 || 
n
 =
SSL_R_NO_CIPHERS_SPECIFIED


1373 || 
n
 =
SSL_R_NO_COMPRESSION_SPECIFIED


1374 || 
n
 =
SSL_R_NO_SHARED_CIPHER


1375 || 
n
 =
SSL_R_RECORD_LENGTH_MISMATCH


1376 #ifde‡
SSL_R_PARSE_TLSEXT


1377 || 
n
 =
SSL_R_PARSE_TLSEXT


1379 || 
n
 =
SSL_R_UNEXPECTED_MESSAGE


1380 || 
n
 =
SSL_R_UNEXPECTED_RECORD


1381 || 
n
 =
SSL_R_UNKNOWN_ALERT_TYPE


1382 || 
n
 =
SSL_R_UNKNOWN_PROTOCOL


1383 || 
n
 =
SSL_R_WRONG_VERSION_NUMBER


1384 || 
n
 =
SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC


1385 #ifde‡
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1386 || 
n
 =
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1387 || 
n
 =
SSL_R_RENEGOTIATION_ENCODING_ERR


1388 || 
n
 =
SSL_R_RENEGOTIATION_MISMATCH


1390 #ifde‡
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1391 || 
n
 =
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1393 #ifde‡
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1394 || 
n
 =
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1396 || 
n
 == 1000

1397 || 
n
 =
SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE


1398 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_RECORD_MAC


1399 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPTION_FAILED


1400 || 
n
 =
SSL_R_TLSV1_ALERT_RECORD_OVERFLOW


1401 || 
n
 =
SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE


1402 || 
n
 =
SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE


1403 || 
n
 =
SSL_R_SSLV3_ALERT_NO_CERTIFICATE


1404 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_CERTIFICATE


1405 || 
n
 =
SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE


1406 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED


1407 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED


1408 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN


1409 || 
n
 =
SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER


1410 || 
n
 =
SSL_R_TLSV1_ALERT_UNKNOWN_CA


1411 || 
n
 =
SSL_R_TLSV1_ALERT_ACCESS_DENIED


1412 || 
n
 =
SSL_R_TLSV1_ALERT_DECODE_ERROR


1413 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPT_ERROR


1414 || 
n
 =
SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION


1415 || 
n
 =
SSL_R_TLSV1_ALERT_PROTOCOL_VERSION


1416 || 
n
 =
SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY


1417 || 
n
 =
SSL_R_TLSV1_ALERT_INTERNAL_ERROR


1418 || 
n
 =
SSL_R_TLSV1_ALERT_USER_CANCELLED


1419 || 
n
 =
SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
)

1421 
c
->
log_îr‹
) {

1423 
NGX_ERROR_IGNORE_ECONNRESET
:

1424 
NGX_ERROR_INFO
:

1425 
Àvñ
 = 
NGX_LOG_INFO
;

1428 
NGX_ERROR_ERR
:

1429 
Àvñ
 = 
NGX_LOG_ERR
;

1438 
	`ngx_s¶_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1439 
	}
}

1443 
	$ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
)

1445 
	`ERR_≥ek_îr‹
()) {

1446 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "ignoring stale global SSLÉrror");

1449 
	`ERR_˛ór_îr‹
();

1450 
	}
}

1453 
ngx_cde˛


1454 
	$ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, *
fmt
, ...)

1456 
u_l⁄g
 
n
;

1457 
va_li°
 
¨gs
;

1458 
u_ch¨
 *
p
, *
œ°
;

1459 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1461 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

1463 
	`va_°¨t
(
¨gs
, 
fmt
);

1464 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
 - 1, 
fmt
, 
¨gs
);

1465 
	`va_íd
(
¨gs
);

1467 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (SSL:", 
œ°
 -Ö);

1471 
n
 = 
	`ERR_gë_îr‹
();

1473 i‡(
n
 == 0) {

1477 i‡(
p
 >
œ°
) {

1481 *
p
++ = ' ';

1483 
	`ERR_îr‹_°rög_n
(
n
, (*Ë
p
, 
œ°
 -Ö);

1485 
p
 < 
œ°
 && *p) {

1486 
p
++;

1490 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%s)", 
îr°r
);

1491 
	}
}

1494 
ngx_öt_t


1495 
	$ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

1496 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
)

1498 
ˇche_mode
;

1500 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_SCACHE
) {

1501 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
SSL_SESS_CACHE_OFF
);

1502  
NGX_OK
;

1505 
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
s¶
->
˘x
, 
£ss_˘x
->
d©a
, sess_˘x->
Àn
);

1507 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NONE_SCACHE
) {

1520 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
,

1521 
SSL_SESS_CACHE_SERVER


1522 |
SSL_SESS_CACHE_NO_AUTO_CLEAR


1523 |
SSL_SESS_CACHE_NO_INTERNAL_STORE
);

1525 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 1);

1527  
NGX_OK
;

1530 
ˇche_mode
 = 
SSL_SESS_CACHE_SERVER
;

1532 i‡(
shm_z⁄e
 && 
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_BUILTIN_SCACHE
) {

1533 
ˇche_mode
 |
SSL_SESS_CACHE_NO_INTERNAL
;

1536 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
ˇche_mode
);

1538 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_NO_BUILTIN_SCACHE
) {

1540 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_DFLT_BUILTIN_SCACHE
) {

1541 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 
buûtö_£ssi⁄_ˇche
);

1545 
	`SSL_CTX_£t_timeout
(
s¶
->
˘x
, (Ë
timeout
);

1547 i‡(
shm_z⁄e
) {

1548 
	`SSL_CTX_£ss_£t_√w_cb
(
s¶
->
˘x
, 
ngx_s¶_√w_£ssi⁄
);

1549 
	`SSL_CTX_£ss_£t_gë_cb
(
s¶
->
˘x
, 
ngx_s¶_gë_ˇched_£ssi⁄
);

1550 
	`SSL_CTX_£ss_£t_ªmove_cb
(
s¶
->
˘x
, 
ngx_s¶_ªmove_£ssi⁄
);

1552 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
, 
shm_z⁄e
)

1555 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1557  
NGX_ERROR
;

1561  
NGX_OK
;

1562 
	}
}

1565 
ngx_öt_t


1566 
	$ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

1568 
size_t
 
Àn
;

1569 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1570 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1572 i‡(
d©a
) {

1573 
shm_z⁄e
->
d©a
 = data;

1574  
NGX_OK
;

1577 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

1578 
shm_z⁄e
->
d©a
 = data;

1579  
NGX_OK
;

1582 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1584 
ˇche
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_s¶_£ssi⁄_ˇche_t
));

1585 i‡(
ˇche
 =
NULL
) {

1586  
NGX_ERROR
;

1589 
shpoﬁ
->
d©a
 = 
ˇche
;

1590 
shm_z⁄e
->
d©a
 = 
ˇche
;

1592 
	`ngx_rbåì_öô
(&
ˇche
->
£ssi⁄_rbåì
, &ˇche->
£¡öñ
,

1593 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
);

1595 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

1597 
Àn
 = (" i¿SSL sessi⁄ sh¨ed cachê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

1599 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

1600 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

1601  
NGX_ERROR
;

1604 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " in SSL session shared cache \"%V\"%Z",

1605 &
shm_z⁄e
->
shm
.
«me
);

1607  
NGX_OK
;

1608 
	}
}

1629 
	$ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1631 
Àn
;

1632 
u_ch¨
 *
p
, *
id
, *
ˇched_£ss
;

1633 
uöt32_t
 
hash
;

1634 
SSL_CTX
 *
s¶_˘x
;

1635 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1636 
ngx_c⁄√˘i⁄_t
 *
c
;

1637 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1638 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1639 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1640 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

1642 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

1646 i‡(
Àn
 > (Ë
NGX_SSL_MAX_SESSION_SIZE
) {

1650 
p
 = 
buf
;

1651 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

1653 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

1655 
s¶_˘x
 = 
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
);

1656 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1658 
ˇche
 = 
shm_z⁄e
->
d©a
;

1659 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1661 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1664 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 1);

1666 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

1668 i‡(
ˇched_£ss
 =
NULL
) {

1672 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

1674 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

1676 i‡(
ˇched_£ss
 =
NULL
) {

1677 
£ss_id
 = 
NULL
;

1678 
Áûed
;

1682 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

1683 i‡(
£ss_id
 =
NULL
) {

1684 
Áûed
;

1687 #i‡(
NGX_PTR_SIZE
 == 8)

1689 
id
 = 
£ss_id
->sess_id;

1693 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ss
->
£ssi⁄_id_Àngth
);

1694 i‡(
id
 =
NULL
) {

1695 
Áûed
;

1700 
	`ngx_mem˝y
(
ˇched_£ss
, 
buf
, 
Àn
);

1702 
	`ngx_mem˝y
(
id
, 
£ss
->
£ssi⁄_id
, sess->
£ssi⁄_id_Àngth
);

1704 
hash
 = 
	`ngx_¸c32_sh‹t
(
£ss
->
£ssi⁄_id
, sess->
£ssi⁄_id_Àngth
);

1706 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1708 
hash
, 
£ss
->
£ssi⁄_id_Àngth
, 
Àn
);

1710 
£ss_id
->
node
.
key
 = 
hash
;

1711 
£ss_id
->
node
.
d©a
 = (
u_ch¨
Ë
£ss
->
£ssi⁄_id_Àngth
;

1712 
£ss_id
->
id
 = id;

1713 
£ss_id
->
Àn
 =Üen;

1714 
£ss_id
->
£ssi⁄
 = 
ˇched_£ss
;

1716 
£ss_id
->
expúe
 = 
	`ngx_time
(Ë+ 
	`SSL_CTX_gë_timeout
(
s¶_˘x
);

1718 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
£ss_id
->
queue
);

1720 
	`ngx_rbåì_ö£π
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

1722 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1726 
Áûed
:

1728 i‡(
ˇched_£ss
) {

1729 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
ˇched_£ss
);

1732 i‡(
£ss_id
) {

1733 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

1736 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1738 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

1742 
	}
}

1745 
ngx_s¶_£ssi⁄_t
 *

1746 
	$ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
u_ch¨
 *
id
, 
Àn
,

1747 *
c›y
)

1749 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

1752 
u_ch¨
 *
p
;

1753 
uöt32_t
 
hash
;

1754 
ngx_öt_t
 
rc
;

1755 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1756 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1757 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1758 
ngx_s¶_£ssi⁄_t
 *
£ss
;

1759 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1760 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1761 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

1762 #i‡(
NGX_DEBUG
)

1763 
ngx_c⁄√˘i⁄_t
 *
c
;

1766 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, (
size_t
Ë
Àn
);

1767 *
c›y
 = 0;

1769 #i‡(
NGX_DEBUG
)

1770 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

1772 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1773 "s¶ gë sessi⁄: %08XD:%d", 
hash
, 
Àn
);

1776 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
),

1777 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1779 
ˇche
 = 
shm_z⁄e
->
d©a
;

1781 
£ss
 = 
NULL
;

1783 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1785 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1787 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

1788 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

1790 
node
 !
£¡öñ
) {

1792 i‡(
hash
 < 
node
->
key
) {

1793 
node
 =Çode->
À·
;

1797 i‡(
hash
 > 
node
->
key
) {

1798 
node
 =Çode->
right
;

1804 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

1806 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, (
size_t
Ë
Àn
, (size_tË
node
->
d©a
);

1808 i‡(
rc
 == 0) {

1810 i‡(
£ss_id
->
expúe
 > 
	`ngx_time
()) {

1811 
	`ngx_mem˝y
(
buf
, 
£ss_id
->
£ssi⁄
, sess_id->
Àn
);

1813 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1815 
p
 = 
buf
;

1816 
£ss
 = 
	`d2i_SSL_SESSION
(
NULL
, &
p
, 
£ss_id
->
Àn
);

1818  
£ss
;

1821 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

1823 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

1825 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

1826 #i‡(
NGX_PTR_SIZE
 == 4)

1827 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

1829 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

1831 
£ss
 = 
NULL
;

1833 
d⁄e
;

1836 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1839 
d⁄e
:

1841 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1843  
£ss
;

1844 
	}
}

1848 
	$ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1850 
	`SSL_CTX_ªmove_£ssi⁄
(
s¶
, 
£ss
);

1852 
	`ngx_s¶_ªmove_£ssi⁄
(
s¶
, 
£ss
);

1853 
	}
}

1857 
	$ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1859 
size_t
 
Àn
;

1860 
u_ch¨
 *
id
;

1861 
uöt32_t
 
hash
;

1862 
ngx_öt_t
 
rc
;

1863 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1864 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1865 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1866 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1867 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1869 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1871 i‡(
shm_z⁄e
 =
NULL
) {

1875 
ˇche
 = 
shm_z⁄e
->
d©a
;

1877 
id
 = 
£ss
->
£ssi⁄_id
;

1878 
Àn
 = (
size_t
Ë
£ss
->
£ssi⁄_id_Àngth
;

1880 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, 
Àn
);

1882 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

1883 "s¶Ñemovê£ssi⁄: %08XD:%uz", 
hash
, 
Àn
);

1885 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1887 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1889 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

1890 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

1892 
node
 !
£¡öñ
) {

1894 i‡(
hash
 < 
node
->
key
) {

1895 
node
 =Çode->
À·
;

1899 i‡(
hash
 > 
node
->
key
) {

1900 
node
 =Çode->
right
;

1906 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

1908 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, 
Àn
, (
size_t
Ë
node
->
d©a
);

1910 i‡(
rc
 == 0) {

1912 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

1914 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

1916 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

1917 #i‡(
NGX_PTR_SIZE
 == 4)

1918 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

1920 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

1922 
d⁄e
;

1925 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1928 
d⁄e
:

1930 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1931 
	}
}

1935 
	$ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

1936 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
)

1938 
time_t
 
now
;

1939 
ngx_queue_t
 *
q
;

1940 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1942 
now
 = 
	`ngx_time
();

1944 
n
 < 3) {

1946 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

1950 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

1952 
£ss_id
 = 
	`ngx_queue_d©a
(
q
, 
ngx_s¶_£ss_id_t
, 
queue
);

1954 i‡(
n
++ !0 && 
£ss_id
->
expúe
 > 
now
) {

1958 
	`ngx_queue_ªmove
(
q
);

1960 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

1961 "expúê£ssi⁄: %08Xi", 
£ss_id
->
node
.
key
);

1963 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

1965 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

1966 #i‡(
NGX_PTR_SIZE
 == 4)

1967 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

1969 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

1971 
	}
}

1975 
	$ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1976 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1978 
ngx_rbåì_node_t
 **
p
;

1979 
ngx_s¶_£ss_id_t
 *
£ss_id
, *
£ss_id_ãmp
;

1983 i‡(
node
->
key
 < 
ãmp
->key) {

1985 
p
 = &
ãmp
->
À·
;

1987 } i‡(
node
->
key
 > 
ãmp
->key) {

1989 
p
 = &
ãmp
->
right
;

1993 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

1994 
£ss_id_ãmp
 = (
ngx_s¶_£ss_id_t
 *Ë
ãmp
;

1996 
p
 = (
	`ngx_memn2cmp
(
£ss_id
->
id
, 
£ss_id_ãmp
->id,

1997 (
size_t
Ë
node
->
d©a
, (size_tË
ãmp
->data)

1998 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2001 i‡(*
p
 =
£¡öñ
) {

2005 
ãmp
 = *
p
;

2008 *
p
 = 
node
;

2009 
node
->
∑ª¡
 = 
ãmp
;

2010 
node
->
À·
 = 
£¡öñ
;

2011 
node
->
right
 = 
£¡öñ
;

2012 
	`ngx_rbt_ªd
(
node
);

2013 
	}
}

2017 
	$ngx_s¶_˛ónup_˘x
(*
d©a
)

2019 
ngx_s¶_t
 *
s¶
 = 
d©a
;

2021 
	`SSL_CTX_‰ì
(
s¶
->
˘x
);

2022 
	}
}

2025 
ngx_öt_t


2026 
	$ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2028 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

2029  
NGX_OK
;

2030 
	}
}

2033 
ngx_öt_t


2034 
	$ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2036 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_cùhî_«me
(
c
->
s¶
->
c⁄√˘i⁄
);

2037  
NGX_OK
;

2038 
	}
}

2041 
ngx_öt_t


2042 
	$ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2044 
Àn
;

2045 
u_ch¨
 *
p
, *
buf
;

2046 
SSL_SESSION
 *
£ss
;

2048 
£ss
 = 
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

2050 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

2052 
buf
 = 
	`ngx_Æloc
(
Àn
, 
c
->
log
);

2053 i‡(
buf
 =
NULL
) {

2054  
NGX_ERROR
;

2057 
s
->
Àn
 = 2 *Üen;

2058 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 2 * 
Àn
);

2059 i‡(
s
->
d©a
 =
NULL
) {

2060 
	`ngx_‰ì
(
buf
);

2061  
NGX_ERROR
;

2064 
p
 = 
buf
;

2065 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

2067 
	`ngx_hex_dump
(
s
->
d©a
, 
buf
, 
Àn
);

2069 
	`ngx_‰ì
(
buf
);

2071  
NGX_OK
;

2072 
	}
}

2075 
ngx_öt_t


2076 
	$ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2078 
size_t
 
Àn
;

2079 
BIO
 *
bio
;

2080 
X509
 *
˚π
;

2082 
s
->
Àn
 = 0;

2084 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2085 i‡(
˚π
 =
NULL
) {

2086  
NGX_OK
;

2089 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2090 i‡(
bio
 =
NULL
) {

2091 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "BIO_new() failed");

2092 
	`X509_‰ì
(
˚π
);

2093  
NGX_ERROR
;

2096 i‡(
	`PEM_wrôe_bio_X509
(
bio
, 
˚π
) == 0) {

2097 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "PEM_write_bio_X509() failed");

2098 
Áûed
;

2101 
Àn
 = 
	`BIO_≥ndög
(
bio
);

2102 
s
->
Àn
 =Üen;

2104 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2105 i‡(
s
->
d©a
 =
NULL
) {

2106 
Áûed
;

2109 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

2111 
	`BIO_‰ì
(
bio
);

2112 
	`X509_‰ì
(
˚π
);

2114  
NGX_OK
;

2116 
Áûed
:

2118 
	`BIO_‰ì
(
bio
);

2119 
	`X509_‰ì
(
˚π
);

2121  
NGX_ERROR
;

2122 
	}
}

2125 
ngx_öt_t


2126 
	$ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2128 
u_ch¨
 *
p
;

2129 
size_t
 
Àn
;

2130 
ngx_uöt_t
 
i
;

2131 
ngx_°r_t
 
˚π
;

2133 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
˚π
Ë!
NGX_OK
) {

2134  
NGX_ERROR
;

2137 i‡(
˚π
.
Àn
 == 0) {

2138 
s
->
Àn
 = 0;

2139  
NGX_OK
;

2142 
Àn
 = 
˚π
.len - 1;

2144 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

2145 i‡(
˚π
.
d©a
[
i
] =
LF
) {

2146 
Àn
++;

2150 
s
->
Àn
 =Üen;

2151 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2152 i‡(
s
->
d©a
 =
NULL
) {

2153  
NGX_ERROR
;

2156 
p
 = 
s
->
d©a
;

2158 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

2159 *
p
++ = 
˚π
.
d©a
[
i
];

2160 i‡(
˚π
.
d©a
[
i
] =
LF
) {

2161 *
p
++ = '\t';

2165  
NGX_OK
;

2166 
	}
}

2169 
ngx_öt_t


2170 
	$ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2172 *
p
;

2173 
size_t
 
Àn
;

2174 
X509
 *
˚π
;

2175 
X509_NAME
 *
«me
;

2177 
s
->
Àn
 = 0;

2179 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2180 i‡(
˚π
 =
NULL
) {

2181  
NGX_OK
;

2184 
«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

2185 i‡(
«me
 =
NULL
) {

2186 
	`X509_‰ì
(
˚π
);

2187  
NGX_ERROR
;

2190 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

2192 
Àn
 = 0; 
p
[len];Üen++) { }

2194 
s
->
Àn
 =Üen;

2195 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2196 i‡(
s
->
d©a
 =
NULL
) {

2197 
	`OPENSSL_‰ì
(
p
);

2198 
	`X509_‰ì
(
˚π
);

2199  
NGX_ERROR
;

2202 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

2204 
	`OPENSSL_‰ì
(
p
);

2205 
	`X509_‰ì
(
˚π
);

2207  
NGX_OK
;

2208 
	}
}

2211 
ngx_öt_t


2212 
	$ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2214 *
p
;

2215 
size_t
 
Àn
;

2216 
X509
 *
˚π
;

2217 
X509_NAME
 *
«me
;

2219 
s
->
Àn
 = 0;

2221 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2222 i‡(
˚π
 =
NULL
) {

2223  
NGX_OK
;

2226 
«me
 = 
	`X509_gë_issuî_«me
(
˚π
);

2227 i‡(
«me
 =
NULL
) {

2228 
	`X509_‰ì
(
˚π
);

2229  
NGX_ERROR
;

2232 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

2234 
Àn
 = 0; 
p
[len];Üen++) { }

2236 
s
->
Àn
 =Üen;

2237 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2238 i‡(
s
->
d©a
 =
NULL
) {

2239 
	`OPENSSL_‰ì
(
p
);

2240 
	`X509_‰ì
(
˚π
);

2241  
NGX_ERROR
;

2244 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

2246 
	`OPENSSL_‰ì
(
p
);

2247 
	`X509_‰ì
(
˚π
);

2249  
NGX_OK
;

2250 
	}
}

2253 
ngx_öt_t


2254 
	$ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2256 
size_t
 
Àn
;

2257 
X509
 *
˚π
;

2258 
BIO
 *
bio
;

2260 
s
->
Àn
 = 0;

2262 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2263 i‡(
˚π
 =
NULL
) {

2264  
NGX_OK
;

2267 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2268 i‡(
bio
 =
NULL
) {

2269 
	`X509_‰ì
(
˚π
);

2270  
NGX_ERROR
;

2273 
	`i2a_ASN1_INTEGER
(
bio
, 
	`X509_gë_£rülNumbî
(
˚π
));

2274 
Àn
 = 
	`BIO_≥ndög
(
bio
);

2276 
s
->
Àn
 =Üen;

2277 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2278 i‡(
s
->
d©a
 =
NULL
) {

2279 
	`BIO_‰ì
(
bio
);

2280 
	`X509_‰ì
(
˚π
);

2281  
NGX_ERROR
;

2284 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

2285 
	`BIO_‰ì
(
bio
);

2286 
	`X509_‰ì
(
˚π
);

2288  
NGX_OK
;

2289 
	}
}

2292 
ngx_öt_t


2293 
	$ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2295 
X509
 *
˚π
;

2297 i‡(
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
Ë!
X509_V_OK
) {

2298 
	`ngx_°r_£t
(
s
, "FAILED");

2299  
NGX_OK
;

2302 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2304 i‡(
˚π
) {

2305 
	`ngx_°r_£t
(
s
, "SUCCESS");

2308 
	`ngx_°r_£t
(
s
, "NONE");

2311 
	`X509_‰ì
(
˚π
);

2313  
NGX_OK
;

2314 
	}
}

2318 
	$ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

2320 
ngx_›ís¶_c⁄f_t
 *
oscf
;

2322 
oscf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_›ís¶_c⁄f_t
));

2323 i‡(
oscf
 =
NULL
) {

2324  
NULL
;

2333  
oscf
;

2334 
	}
}

2338 
	$ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2340 
ngx_›ís¶_c⁄f_t
 *
oscf
 = 
c⁄f
;

2342 
ENGINE
 *
ígöe
;

2343 
ngx_°r_t
 *
vÆue
;

2345 i‡(
oscf
->
ígöe
) {

2349 
oscf
->
ígöe
 = 1;

2351 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2353 
ígöe
 = 
	`ENGINE_by_id
((c⁄° *Ë
vÆue
[1].
d©a
);

2355 i‡(
ígöe
 =
NULL
) {

2356 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2357 "ENGINE_by_id(\"%V\"ËÁûed", &
vÆue
[1]);

2358  
NGX_CONF_ERROR
;

2361 i‡(
	`ENGINE_£t_deÁu…
(
ígöe
, 
ENGINE_METHOD_ALL
) == 0) {

2362 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2364 &
vÆue
[1]);

2366 
	`ENGINE_‰ì
(
ígöe
);

2368  
NGX_CONF_ERROR
;

2371 
	`ENGINE_‰ì
(
ígöe
);

2373  
NGX_CONF_OK
;

2374 
	}
}

2378 
	$ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
)

2380 
	`EVP_˛ónup
();

2381 
	`ENGINE_˛ónup
();

2382 
	}
}

	@src/event/ngx_event_openssl.h

8 #i‚de‡
_NGX_EVENT_OPENSSL_H_INCLUDED_


9 
	#_NGX_EVENT_OPENSSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<›ís¶/s¶.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/c⁄f.h
>

18 
	~<›ís¶/ígöe.h
>

19 
	~<›ís¶/evp.h
>

21 
	#NGX_SSL_NAME
 "O≥nSSL"

	)

24 
	#ngx_s¶_£ssi⁄_t
 
SSL_SESSION


	)

25 
	#ngx_s¶_c⁄n_t
 
SSL


	)

29 
SSL_CTX
 *
	m˘x
;

30 
ngx_log_t
 *
	mlog
;

31 } 
	tngx_s¶_t
;

35 
ngx_s¶_c⁄n_t
 *
	mc⁄√˘i⁄
;

37 
ngx_öt_t
 
	mœ°
;

38 
ngx_buf_t
 *
	mbuf
;

40 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

42 
ngx_evít_h™dÀr_±
 
	mßved_ªad_h™dÀr
;

43 
ngx_evít_h™dÀr_±
 
	mßved_wrôe_h™dÀr
;

45 
	mh™dshaked
:1;

46 
	mª√gŸüti⁄
:1;

47 
	mbuf„r
:1;

48 
	mno_waô_shutdown
:1;

49 
	mno_£nd_shutdown
:1;

50 } 
	tngx_s¶_c⁄√˘i⁄_t
;

53 
	#NGX_SSL_NO_SCACHE
 -2

	)

54 
	#NGX_SSL_NONE_SCACHE
 -3

	)

55 
	#NGX_SSL_NO_BUILTIN_SCACHE
 -4

	)

56 
	#NGX_SSL_DFLT_BUILTIN_SCACHE
 -5

	)

59 
	#NGX_SSL_MAX_SESSION_SIZE
 4096

	)

61 
ngx_s¶_£ss_id_s
 
	tngx_s¶_£ss_id_t
;

63 
	sngx_s¶_£ss_id_s
 {

64 
ngx_rbåì_node_t
 
	mnode
;

65 
u_ch¨
 *
	mid
;

66 
size_t
 
	mÀn
;

67 
u_ch¨
 *
	m£ssi⁄
;

68 
ngx_queue_t
 
	mqueue
;

69 
time_t
 
	mexpúe
;

70 #i‡(
NGX_PTR_SIZE
 == 8)

71 *
	m°ub
;

72 
u_ch¨
 
	m£ss_id
[32];

78 
ngx_rbåì_t
 
	m£ssi⁄_rbåì
;

79 
ngx_rbåì_node_t
 
	m£¡öñ
;

80 
ngx_queue_t
 
	mexpúe_queue
;

81 } 
	tngx_s¶_£ssi⁄_ˇche_t
;

85 
	#NGX_SSL_SSLv2
 0x0002

	)

86 
	#NGX_SSL_SSLv3
 0x0004

	)

87 
	#NGX_SSL_TLSv1
 0x0008

	)

88 
	#NGX_SSL_TLSv1_1
 0x0010

	)

89 
	#NGX_SSL_TLSv1_2
 0x0020

	)

92 
	#NGX_SSL_BUFFER
 1

	)

93 
	#NGX_SSL_CLIENT
 2

	)

95 
	#NGX_SSL_BUFSIZE
 16384

	)

98 
ngx_öt_t
 
ngx_s¶_öô
(
ngx_log_t
 *
log
);

99 
ngx_öt_t
 
ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
);

100 
ngx_öt_t
 
ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

101 
ngx_°r_t
 *
˚π
,Çgx_°r_à*
key
);

102 
ngx_öt_t
 
ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

103 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

104 
ngx_öt_t
 
ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
);

105 
RSA
 *
ngx_s¶_rß512_key_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
, 
key_Àngth
);

106 
ngx_öt_t
 
ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
);

107 
ngx_öt_t
 
ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
);

108 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

109 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
);

110 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

111 
ngx_öt_t
 
ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
,

112 
ngx_uöt_t
 
Êags
);

114 
ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

115 
ngx_öt_t
 
ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
);

116 
	#ngx_s¶_gë_£ssi⁄
(
c
Ë
	`SSL_gë1_£ssi⁄
(c->
s¶
->
c⁄√˘i⁄
)

	)

117 
	#ngx_s¶_‰ì_£ssi⁄
 
SSL_SESSION_‰ì


	)

118 
	#ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
) \

119 
	`SSL_gë_ex_d©a
(
s¶_c⁄n
, 
ngx_s¶_c⁄√˘i⁄_ödex
)

	)

120 
	#ngx_s¶_gë_£rvî_c⁄f
(
s¶_˘x
) \

121 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
)

	)

124 
ngx_öt_t
 
ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

125 
ngx_°r_t
 *
s
);

126 
ngx_öt_t
 
ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

127 
ngx_°r_t
 *
s
);

128 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

129 
ngx_°r_t
 *
s
);

130 
ngx_öt_t
 
ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

131 
ngx_°r_t
 *
s
);

132 
ngx_öt_t
 
ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

133 
ngx_°r_t
 *
s
);

134 
ngx_öt_t
 
ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

135 
ngx_°r_t
 *
s
);

136 
ngx_öt_t
 
ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

137 
ngx_°r_t
 *
s
);

138 
ngx_öt_t
 
ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

139 
ngx_°r_t
 *
s
);

140 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

141 
ngx_°r_t
 *
s
);

144 
ngx_öt_t
 
ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

145 
ssize_t
 
ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

146 
ssize_t
 
ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
);

147 
ssize_t
 
ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
);

148 
ngx_chaö_t
 *
ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

149 
off_t
 
limô
);

150 
ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
);

151 
ngx_öt_t
 
ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
);

152 
ngx_cde˛
 
ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

153 *
fmt
, ...);

154 
ngx_s¶_˛ónup_˘x
(*
d©a
);

157 
ngx_s¶_c⁄√˘i⁄_ödex
;

158 
ngx_s¶_£rvî_c⁄f_ödex
;

159 
ngx_s¶_£ssi⁄_ˇche_ödex
;

	@src/event/ngx_event_pipe.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_pùe.h
>

14 
ngx_öt_t
 
ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
);

15 
ngx_öt_t
 
ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
);

17 
ngx_öt_t
 
ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
);

18 
ngx_ölöe
 
ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
);

19 
ngx_ölöe
 
ngx_evít_pùe_‰ì_shadow_øw_buf
(
ngx_chaö_t
 **
‰ì
,

20 
ngx_buf_t
 *
buf
);

21 
ngx_öt_t
 
ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
);

24 
ngx_öt_t


25 
	$ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
, 
ngx_öt_t
 
do_wrôe
)

27 
u_öt
 
Êags
;

28 
ngx_öt_t
 
rc
;

29 
ngx_evít_t
 *
ªv
, *
wev
;

32 i‡(
do_wrôe
) {

33 
p
->
log
->
a˘i⁄
 = "sendingÅo client";

35 
rc
 = 
	`ngx_evít_pùe_wrôe_to_down°ªam
(
p
);

37 i‡(
rc
 =
NGX_ABORT
) {

38  
NGX_ABORT
;

41 i‡(
rc
 =
NGX_BUSY
) {

42  
NGX_OK
;

46 
p
->
ªad
 = 0;

47 
p
->
up°ªam_blocked
 = 0;

49 
p
->
log
->
a˘i⁄
 = "reading upstream";

51 i‡(
	`ngx_evít_pùe_ªad_up°ªam
(
p
Ë=
NGX_ABORT
) {

52  
NGX_ABORT
;

55 i‡(!
p
->
ªad
 && !p->
up°ªam_blocked
) {

59 
do_wrôe
 = 1;

62 i‡(
p
->
up°ªam
->
fd
 != -1) {

63 
ªv
 = 
p
->
up°ªam
->
ªad
;

65 
Êags
 = (
ªv
->
eof
 ||Ñev->
îr‹
Ë? 
NGX_CLOSE_EVENT
 : 0;

67 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 
Êags
Ë!
NGX_OK
) {

68  
NGX_ABORT
;

71 i‡(
ªv
->
a˘ive
 && !ªv->
ªady
) {

72 
	`ngx_add_timî
(
ªv
, 
p
->
ªad_timeout
);

74 } i‡(
ªv
->
timî_£t
) {

75 
	`ngx_dñ_timî
(
ªv
);

79 i‡(
p
->
down°ªam
->
fd
 !-1 &&Ö->down°ªam->
d©a
 =p->
ouçut_˘x
) {

80 
wev
 = 
p
->
down°ªam
->
wrôe
;

81 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

82  
NGX_ABORT
;

85 i‡(!
wev
->
dñayed
) {

86 i‡(
wev
->
a˘ive
 && !wev->
ªady
) {

87 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

89 } i‡(
wev
->
timî_£t
) {

90 
	`ngx_dñ_timî
(
wev
);

95  
NGX_OK
;

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
)

102 
ssize_t
 
n
, 
size
;

103 
ngx_öt_t
 
rc
;

104 
ngx_buf_t
 *
b
;

105 
ngx_chaö_t
 *
chaö
, *
˛
, *
 
;

107 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

108  
NGX_OK
;

111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

112 "pùêªad up°ªam: %d", 
p
->
up°ªam
->
ªad
->
ªady
);

116 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

120 i‡(
p
->
¥îód_bufs
 =
NULL
 && !p->
up°ªam
->
ªad
->
ªady
) {

124 i‡(
p
->
¥îód_bufs
) {

128 
chaö
 = 
p
->
¥îód_bufs
;

129 
p
->
¥îód_bufs
 = 
NULL
;

130 
n
 = 
p
->
¥îód_size
;

132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

133 "pùê¥îód: %z", 
n
);

135 i‡(
n
) {

136 
p
->
ªad
 = 1;

141 #i‡(
NGX_HAVE_KQUEUE
)

149 i‡(
p
->
up°ªam
->
ªad
->
avaûabÀ
 == 0

150 && 
p
->
up°ªam
->
ªad
->
≥ndög_eof
)

152 
p
->
up°ªam
->
ªad
->
ªady
 = 0;

153 
p
->
up°ªam
->
ªad
->
eof
 = 0;

154 
p
->
up°ªam_eof
 = 1;

155 
p
->
ªad
 = 1;

157 i‡(
p
->
up°ªam
->
ªad
->
kq_î∫o
) {

158 
p
->
up°ªam
->
ªad
->
îr‹
 = 1;

159 
p
->
up°ªam_îr‹
 = 1;

160 
p
->
up°ªam_eof
 = 0;

162 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
,

163 
p
->
up°ªam
->
ªad
->
kq_î∫o
,

172 i‡(
p
->
‰ì_øw_bufs
) {

176 
chaö
 = 
p
->
‰ì_øw_bufs
;

177 i‡(
p
->
sögÀ_buf
) {

178 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

179 
chaö
->
√xt
 = 
NULL
;

181 
p
->
‰ì_øw_bufs
 = 
NULL
;

184 } i‡(
p
->
Æloˇãd
 <Ö->
bufs
.
num
) {

188 
b
 = 
	`ngx_¸óã_ãmp_buf
(
p
->
poﬁ
,Ö->
bufs
.
size
);

189 i‡(
b
 =
NULL
) {

190  
NGX_ABORT
;

193 
p
->
Æloˇãd
++;

195 
chaö
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

196 i‡(
chaö
 =
NULL
) {

197  
NGX_ABORT
;

200 
chaö
->
buf
 = 
b
;

201 
chaö
->
√xt
 = 
NULL
;

203 } i‡(!
p
->
ˇchóbÀ


204 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x


205 && 
p
->
down°ªam
->
wrôe
->
ªady


206 && !
p
->
down°ªam
->
wrôe
->
dñayed
)

213 
p
->
up°ªam_blocked
 = 1;

215 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

220 } i‡(
p
->
ˇchóbÀ


221 || 
p
->
ãmp_fûe
->
off£t
 <Ö->
max_ãmp_fûe_size
)

229 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

231 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

232 "pùêãm∞off£t: %O", 
p
->
ãmp_fûe
->
off£t
);

234 i‡(
rc
 =
NGX_BUSY
) {

238 i‡(
rc
 =
NGX_AGAIN
) {

239 i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT


240 && 
p
->
up°ªam
->
ªad
->
a˘ive


241 && 
p
->
up°ªam
->
ªad
->
ªady
)

243 i‡(
	`ngx_dñ_evít
(
p
->
up°ªam
->
ªad
, 
NGX_READ_EVENT
, 0)

244 =
NGX_ERROR
)

246  
NGX_ABORT
;

251 i‡(
rc
 !
NGX_OK
) {

252  
rc
;

255 
chaö
 = 
p
->
‰ì_øw_bufs
;

256 i‡(
p
->
sögÀ_buf
) {

257 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

258 
chaö
->
√xt
 = 
NULL
;

260 
p
->
‰ì_øw_bufs
 = 
NULL
;

267 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

273 
n
 = 
p
->
up°ªam
->
	`ªcv_chaö
’->up°ªam, 
chaö
);

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

276 "pùêªcv chaö: %z", 
n
);

278 i‡(
p
->
‰ì_øw_bufs
) {

279 
chaö
->
√xt
 = 
p
->
‰ì_øw_bufs
;

281 
p
->
‰ì_øw_bufs
 = 
chaö
;

283 i‡(
n
 =
NGX_ERROR
) {

284 
p
->
up°ªam_îr‹
 = 1;

285  
NGX_ERROR
;

288 i‡(
n
 =
NGX_AGAIN
) {

289 i‡(
p
->
sögÀ_buf
) {

290 
	`ngx_evít_pùe_ªmove_shadow_löks
(
chaö
->
buf
);

296 
p
->
ªad
 = 1;

298 i‡(
n
 == 0) {

299 
p
->
up°ªam_eof
 = 1;

304 
p
->
ªad_Àngth
 +
n
;

305 
˛
 = 
chaö
;

306 
p
->
‰ì_øw_bufs
 = 
NULL
;

308 
˛
 && 
n
 > 0) {

310 
	`ngx_evít_pùe_ªmove_shadow_löks
(
˛
->
buf
);

312 
size
 = 
˛
->
buf
->
íd
 - cl->buf->
œ°
;

314 i‡(
n
 >
size
) {

315 
˛
->
buf
->
œ°
 = cl->buf->
íd
;

317  
˛
->
buf
->
num
 = 
p
->num++;

319 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

320  
NGX_ABORT
;

323 
n
 -
size
;

324 
 
 = 
˛
;

325 
˛
 = cl->
√xt
;

326 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
 
);

329 
˛
->
buf
->
œ°
 +
n
;

330 
n
 = 0;

334 i‡(
˛
) {

335 
 
 = 
˛
;Ün->
√xt
;Ün =Ün->next) { }

337 
 
->
√xt
 = 
p
->
‰ì_øw_bufs
;

338 
p
->
‰ì_øw_bufs
 = 
˛
;

342 #i‡(
NGX_DEBUG
)

344 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

345 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

349 (
˛
->
buf
->
shadow
 ? 1 : 0),

350 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

351 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

352 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

353 
˛
->
buf
->
fûe_pos
,

354 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

357 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

358 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

362 (
˛
->
buf
->
shadow
 ? 1 : 0),

363 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

364 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

365 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

366 
˛
->
buf
->
fûe_pos
,

367 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

370 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

371 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

375 (
˛
->
buf
->
shadow
 ? 1 : 0),

376 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

377 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

378 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

379 
˛
->
buf
->
fûe_pos
,

380 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

383 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

384 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

388 (
˛
->
buf
->
shadow
 ? 1 : 0),

389 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

390 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

391 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

392 
˛
->
buf
->
fûe_pos
,

393 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

398 i‡((
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
Ë&&Ö->
‰ì_øw_bufs
) {

400  
p
->
‰ì_øw_bufs
->
buf
->
num
 =Ö->num++;

402 i‡(
p
->
	`öput_fûãr
’,Ö->
‰ì_øw_bufs
->
buf
Ë=
NGX_ERROR
) {

403  
NGX_ABORT
;

406 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

408 i‡(
p
->
‰ì_bufs
 &&Ö->
buf_to_fûe
 =
NULL
) {

409 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

410 i‡(
˛
->
buf
->
shadow
 =
NULL
) {

411 
	`ngx_p‰ì
(
p
->
poﬁ
, 
˛
->
buf
->
°¨t
);

417 i‡(
p
->
ˇchóbÀ
 &&Ö->
ö
) {

418 i‡(
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
Ë=
NGX_ABORT
) {

419  
NGX_ABORT
;

423  
NGX_OK
;

424 
	}
}

427 
ngx_öt_t


428 
	$ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
)

430 
u_ch¨
 *
¥ev
;

431 
size_t
 
bsize
;

432 
ngx_öt_t
 
rc
;

433 
ngx_uöt_t
 
Êush
, 
Êushed
, 
¥ev_œ°_shadow
;

434 
ngx_chaö_t
 *
out
, **
Œ
, *
˛
, 
fûe
;

435 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

437 
down°ªam
 = 
p
->downstream;

439 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

440 "pùêwrôêdown°ªam: %d", 
down°ªam
->
wrôe
->
ªady
);

442 
Êushed
 = 0;

445 i‡(
p
->
down°ªam_îr‹
) {

446  
	`ngx_evít_pùe_døö_chaös
(
p
);

449 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

453 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

454 
˛
->
buf
->
ªcy˛ed
 = 0;

457 i‡(
p
->
out
) {

458 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

461 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

462 
˛
->
buf
->
ªcy˛ed
 = 0;

465 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
out
);

467 i‡(
rc
 =
NGX_ERROR
) {

468 
p
->
down°ªam_îr‹
 = 1;

469  
	`ngx_evít_pùe_døö_chaös
(
p
);

472 
p
->
out
 = 
NULL
;

475 i‡(
p
->
ö
) {

476 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

479 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

480 
˛
->
buf
->
ªcy˛ed
 = 0;

483 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
ö
);

485 i‡(
rc
 =
NGX_ERROR
) {

486 
p
->
down°ªam_îr‹
 = 1;

487  
	`ngx_evít_pùe_døö_chaös
(
p
);

490 
p
->
ö
 = 
NULL
;

493 i‡(
p
->
ˇchóbÀ
 &&Ö->
buf_to_fûe
) {

495 
fûe
.
buf
 = 
p
->
buf_to_fûe
;

496 
fûe
.
√xt
 = 
NULL
;

498 i‡(
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, &
fûe
)

499 =
NGX_ERROR
)

501  
NGX_ABORT
;

505 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

510 
p
->
down°ªam_d⁄e
 = 1;

514 i‡(
down°ªam
->
d©a
 !
p
->
ouçut_˘x


515 || !
down°ªam
->
wrôe
->
ªady


516 || 
down°ªam
->
wrôe
->
dñayed
)

523 
¥ev
 = 
NULL
;

524 
bsize
 = 0;

526 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

528 i‡(
˛
->
buf
->
ªcy˛ed
) {

529 i‡(
¥ev
 =
˛
->
buf
->
°¨t
) {

533 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

534 
¥ev
 = 
˛
->
buf
->
°¨t
;

538 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

539 "pùêwrôêbusy: %uz", 
bsize
);

541 
out
 = 
NULL
;

543 i‡(
bsize
 >(
size_t
Ë
p
->
busy_size
) {

544 
Êush
 = 1;

545 
Êush
;

548 
Êush
 = 0;

549 
Œ
 = 
NULL
;

550 
¥ev_œ°_shadow
 = 1;

553 i‡(
p
->
out
) {

554 
˛
 = 
p
->
out
;

556 i‡(
˛
->
buf
->
ªcy˛ed


557 && 
bsize
 + 
˛
->
buf
->
œ°
 - cl->buf->
pos
 > 
p
->
busy_size
)

559 
Êush
 = 1;

563 
p
->
out
 =Ö->out->
√xt
;

565 
	`ngx_evít_pùe_‰ì_shadow_øw_buf
(&
p
->
‰ì_øw_bufs
, 
˛
->
buf
);

567 } i‡(!
p
->
ˇchóbÀ
 &&Ö->
ö
) {

568 
˛
 = 
p
->
ö
;

570 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

572 
˛
->
buf
->
œ°_shadow
,

573 
˛
->
buf
->
pos
,

574 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

576 i‡(
˛
->
buf
->
ªcy˛ed


577 && 
˛
->
buf
->
œ°_shadow


578 && 
bsize
 + 
˛
->
buf
->
œ°
 - cl->buf->
pos
 > 
p
->
busy_size
)

580 i‡(!
¥ev_œ°_shadow
) {

581 
p
->
ö
 =Ö->ö->
√xt
;

583 
˛
->
√xt
 = 
NULL
;

585 i‡(
out
) {

586 *
Œ
 = 
˛
;

588 
out
 = 
˛
;

592 
Êush
 = 1;

596 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

598 
p
->
ö
 =Ö->ö->
√xt
;

604 i‡(
˛
->
buf
->
ªcy˛ed
) {

605 
bsize
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

608 
˛
->
√xt
 = 
NULL
;

610 i‡(
out
) {

611 *
Œ
 = 
˛
;

613 
out
 = 
˛
;

615 
Œ
 = &
˛
->
√xt
;

618 
Êush
:

620 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

621 "pùêwrôe: out:%p, f:%d", 
out
, 
Êush
);

623 i‡(
out
 =
NULL
) {

625 i‡(!
Êush
) {

630 i‡(
Êushed
++ > 10) {

631  
NGX_BUSY
;

635 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
, 
out
);

637 
	`ngx_chaö_upd©e_chaös
(&
p
->
‰ì
, &p->
busy
, &
out
,Ö->
èg
);

639 i‡(
rc
 =
NGX_ERROR
) {

640 
p
->
down°ªam_îr‹
 = 1;

641  
	`ngx_evít_pùe_døö_chaös
(
p
);

644 
˛
 = 
p
->
‰ì
; cl; c»˛->
√xt
) {

646 i‡(
˛
->
buf
->
ãmp_fûe
) {

647 i‡(
p
->
ˇchóbÀ
 || !p->
cy˛ic_ãmp_fûe
) {

653 i‡(
˛
->
buf
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

654 
p
->
ãmp_fûe
->
off£t
 = 0;

662 i‡(
˛
->
buf
->
œ°_shadow
) {

663 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

664  
NGX_ABORT
;

667 
˛
->
buf
->
œ°_shadow
 = 0;

670 
˛
->
buf
->
shadow
 = 
NULL
;

674  
NGX_OK
;

675 
	}
}

678 
ngx_öt_t


679 
	$ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
)

681 
ssize_t
 
size
, 
bsize
;

682 
ngx_buf_t
 *
b
;

683 
ngx_chaö_t
 *
˛
, *
é
, *
√xt
, *
out
, **
Œ
, **
œ°_‰ì
, 
Ê
;

685 i‡(
p
->
buf_to_fûe
) {

686 
Ê
.
buf
 = 
p
->
buf_to_fûe
;

687 
Ê
.
√xt
 = 
p
->
ö
;

688 
out
 = &
Ê
;

691 
out
 = 
p
->
ö
;

694 i‡(!
p
->
ˇchóbÀ
) {

696 
size
 = 0;

697 
˛
 = 
out
;

698 
Œ
 = 
NULL
;

700 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

701 "pùêoff£t: %O", 
p
->
ãmp_fûe
->
off£t
);

704 
bsize
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

706 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

708 
˛
->
buf
->
°¨t
, cl->buf->
pos
, 
bsize
);

710 i‡((
size
 + 
bsize
 > 
p
->
ãmp_fûe_wrôe_size
)

711 || (
p
->
ãmp_fûe
->
off£t
 + 
size
 + 
bsize
 >Ö->
max_ãmp_fûe_size
))

716 
size
 +
bsize
;

717 
Œ
 = &
˛
->
√xt
;

718 
˛
 = cl->
√xt
;

720 } 
˛
);

722 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "size: %z", 
size
);

724 i‡(
Œ
 =
NULL
) {

725  
NGX_BUSY
;

728 i‡(
˛
) {

729 
p
->
ö
 = 
˛
;

730 *
Œ
 = 
NULL
;

733 
p
->
ö
 = 
NULL
;

734 
p
->
œ°_ö
 = &p->
ö
;

738 
p
->
ö
 = 
NULL
;

739 
p
->
œ°_ö
 = &p->
ö
;

742 i‡(
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, 
out
Ë=
NGX_ERROR
) {

743  
NGX_ABORT
;

746 
œ°_‰ì
 = &
p
->
‰ì_øw_bufs
;

747 *
œ°_‰ì
 !
NULL
;

748 
œ°_‰ì
 = &(*œ°_‰ì)->
√xt
)

753 i‡(
p
->
buf_to_fûe
) {

754 
p
->
ãmp_fûe
->
off£t
 =Ö->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

755 
p
->
buf_to_fûe
 = 
NULL
;

756 
out
 = out->
√xt
;

759 
˛
 = 
out
; cl; c»
√xt
) {

760 
√xt
 = 
˛
->next;

761 
˛
->
√xt
 = 
NULL
;

763 
b
 = 
˛
->
buf
;

764 
b
->
fûe
 = &
p
->
ãmp_fûe
->file;

765 
b
->
fûe_pos
 = 
p
->
ãmp_fûe
->
off£t
;

766 
p
->
ãmp_fûe
->
off£t
 +
b
->
œ°
 - b->
pos
;

767 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

769 
b
->
ö_fûe
 = 1;

770 
b
->
ãmp_fûe
 = 1;

772 i‡(
p
->
out
) {

773 *
p
->
œ°_out
 = 
˛
;

775 
p
->
out
 = 
˛
;

777 
p
->
œ°_out
 = &
˛
->
√xt
;

779 i‡(
b
->
œ°_shadow
) {

781 
é
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

782 i‡(
é
 =
NULL
) {

783  
NGX_ABORT
;

786 
é
->
buf
 = 
b
->
shadow
;

787 
é
->
√xt
 = 
NULL
;

789 *
œ°_‰ì
 = 
é
;

790 
œ°_‰ì
 = &
é
->
√xt
;

792 
b
->
shadow
->
pos
 = b->shadow->
°¨t
;

793 
b
->
shadow
->
œ°
 = b->shadow->
°¨t
;

795 
	`ngx_evít_pùe_ªmove_shadow_löks
(
b
->
shadow
);

799  
NGX_OK
;

800 
	}
}

805 
ngx_öt_t


806 
	$ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

808 
ngx_buf_t
 *
b
;

809 
ngx_chaö_t
 *
˛
;

811 i‡(
buf
->
pos
 =buf->
œ°
) {

812  
NGX_OK
;

815 i‡(
p
->
‰ì
) {

816 
˛
 = 
p
->
‰ì
;

817 
b
 = 
˛
->
buf
;

818 
p
->
‰ì
 = 
˛
->
√xt
;

819 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

822 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

823 i‡(
b
 =
NULL
) {

824  
NGX_ERROR
;

828 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

829 
b
->
shadow
 = 
buf
;

830 
b
->
èg
 = 
p
->tag;

831 
b
->
œ°_shadow
 = 1;

832 
b
->
ªcy˛ed
 = 1;

833 
buf
->
shadow
 = 
b
;

835 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

836 i‡(
˛
 =
NULL
) {

837  
NGX_ERROR
;

840 
˛
->
buf
 = 
b
;

841 
˛
->
√xt
 = 
NULL
;

843 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

845 i‡(
p
->
ö
) {

846 *
p
->
œ°_ö
 = 
˛
;

848 
p
->
ö
 = 
˛
;

850 
p
->
œ°_ö
 = &
˛
->
√xt
;

852  
NGX_OK
;

853 
	}
}

856 
ngx_ölöe
 

857 
	$ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
)

859 
ngx_buf_t
 *
b
, *
√xt
;

861 
b
 = 
buf
->
shadow
;

863 i‡(
b
 =
NULL
) {

867 !
b
->
œ°_shadow
) {

868 
√xt
 = 
b
->
shadow
;

870 
b
->
ãmp‹¨y
 = 0;

871 
b
->
ªcy˛ed
 = 0;

873 
b
->
shadow
 = 
NULL
;

874 
b
 = 
√xt
;

877 
b
->
ãmp‹¨y
 = 0;

878 
b
->
ªcy˛ed
 = 0;

879 
b
->
œ°_shadow
 = 0;

881 
b
->
shadow
 = 
NULL
;

883 
buf
->
shadow
 = 
NULL
;

884 
	}
}

887 
ngx_ölöe
 

888 
	$ngx_evít_pùe_‰ì_shadow_øw_buf
(
ngx_chaö_t
 **
‰ì
, 
ngx_buf_t
 *
buf
)

890 
ngx_buf_t
 *
s
;

891 
ngx_chaö_t
 *
˛
, **
Œ
;

893 i‡(
buf
->
shadow
 =
NULL
) {

897 
s
 = 
buf
->
shadow
; !s->
œ°_shadow
; s = s->shadow) { }

899 
Œ
 = 
‰ì
;

901 
˛
 = *
‰ì
; cl; c»˛->
√xt
) {

902 i‡(
˛
->
buf
 =
s
) {

903 *
Œ
 = 
˛
->
√xt
;

907 i‡(
˛
->
buf
->
shadow
) {

911 
Œ
 = &
˛
->
√xt
;

913 
	}
}

916 
ngx_öt_t


917 
	$ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
)

919 
ngx_chaö_t
 *
˛
;

921 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

922 i‡(
˛
 =
NULL
) {

923  
NGX_ERROR
;

926 
b
->
pos
 = b->
°¨t
;

927 
b
->
œ°
 = b->
°¨t
;

928 
b
->
shadow
 = 
NULL
;

930 
˛
->
buf
 = 
b
;

932 i‡(
p
->
‰ì_øw_bufs
 =
NULL
) {

933 
p
->
‰ì_øw_bufs
 = 
˛
;

934 
˛
->
√xt
 = 
NULL
;

936  
NGX_OK
;

939 i‡(
p
->
‰ì_øw_bufs
->
buf
->
pos
 =p->‰ì_øw_bufs->buf->
œ°
) {

943 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
;

944 
p
->
‰ì_øw_bufs
 = 
˛
;

946  
NGX_OK
;

951 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
->next;

952 
p
->
‰ì_øw_bufs
->
√xt
 = 
˛
;

954  
NGX_OK
;

955 
	}
}

958 
ngx_öt_t


959 
	$ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
)

961 
ngx_chaö_t
 *
˛
, *
é
;

964 i‡(
p
->
busy
) {

965 
˛
 = 
p
->
busy
;

966 
p
->
busy
 = 
NULL
;

968 } i‡(
p
->
out
) {

969 
˛
 = 
p
->
out
;

970 
p
->
out
 = 
NULL
;

972 } i‡(
p
->
ö
) {

973 
˛
 = 
p
->
ö
;

974 
p
->
ö
 = 
NULL
;

977  
NGX_OK
;

980 
˛
) {

981 i‡(
˛
->
buf
->
œ°_shadow
) {

982 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

983  
NGX_ABORT
;

986 
˛
->
buf
->
œ°_shadow
 = 0;

989 
˛
->
buf
->
shadow
 = 
NULL
;

990 
é
 = 
˛
->
√xt
;

991 
˛
->
√xt
 = 
p
->
‰ì
;

992 
p
->
‰ì
 = 
˛
;

993 
˛
 = 
é
;

996 
	}
}

	@src/event/ngx_event_pipe.h

8 #i‚de‡
_NGX_EVENT_PIPE_H_INCLUDED_


9 
	#_NGX_EVENT_PIPE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
ngx_evít_pùe_s
 
	tngx_evít_pùe_t
;

19 
	$ngx_öt_t
 (*
	tngx_evít_pùe_öput_fûãr_±
)(
	tngx_evít_pùe_t
 *
	tp
,

20 
	tngx_buf_t
 *
	tbuf
);

21 
	$ngx_öt_t
 (*
	tngx_evít_pùe_ouçut_fûãr_±
)(*
	td©a
,

22 
	tngx_chaö_t
 *
	tchaö
);

25 
	sngx_evít_pùe_s
 {

26 
ngx_c⁄√˘i⁄_t
 *
up°ªam
;

27 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

29 
ngx_chaö_t
 *
‰ì_øw_bufs
;

30 
ngx_chaö_t
 *
ö
;

31 
ngx_chaö_t
 **
œ°_ö
;

33 
ngx_chaö_t
 *
out
;

34 
ngx_chaö_t
 **
œ°_out
;

36 
ngx_chaö_t
 *
‰ì
;

37 
ngx_chaö_t
 *
busy
;

44 
ngx_evít_pùe_öput_fûãr_±
 
öput_fûãr
;

45 *
öput_˘x
;

47 
ngx_evít_pùe_ouçut_fûãr_±
 
ouçut_fûãr
;

48 *
ouçut_˘x
;

50 
ªad
:1;

51 
ˇchóbÀ
:1;

52 
sögÀ_buf
:1;

53 
‰ì_bufs
:1;

54 
up°ªam_d⁄e
:1;

55 
up°ªam_îr‹
:1;

56 
up°ªam_eof
:1;

57 
up°ªam_blocked
:1;

58 
down°ªam_d⁄e
:1;

59 
down°ªam_îr‹
:1;

60 
cy˛ic_ãmp_fûe
:1;

62 
ngx_öt_t
 
Æloˇãd
;

63 
ngx_bufs_t
 
bufs
;

64 
ngx_buf_èg_t
 
èg
;

66 
ssize_t
 
busy_size
;

68 
off_t
 
ªad_Àngth
;

70 
off_t
 
max_ãmp_fûe_size
;

71 
ssize_t
 
ãmp_fûe_wrôe_size
;

73 
ngx_m£c_t
 
ªad_timeout
;

74 
ngx_m£c_t
 
£nd_timeout
;

75 
ssize_t
 
£nd_low©
;

77 
ngx_poﬁ_t
 *
poﬁ
;

78 
ngx_log_t
 *
log
;

80 
ngx_chaö_t
 *
¥îód_bufs
;

81 
size_t
 
¥îód_size
;

82 
ngx_buf_t
 *
buf_to_fûe
;

84 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

86  
num
;

90 
ngx_öt_t
 
	`ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
,Çgx_öt_à
do_wrôe
);

91 
ngx_öt_t
 
	`ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
);

92 
ngx_öt_t
 
	`ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
);

	@src/event/ngx_event_posted.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_po°ed_ac˚±_evíts
;

14 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_po°ed_evíts
;

16 #i‡(
NGX_THREADS
)

17 
ngx_muãx_t
 *
	gngx_po°ed_evíts_muãx
;

22 
	$ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
,

23 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 **
po°ed
)

25 
ngx_evít_t
 *
ev
;

29 
ev
 = (
ngx_evít_t
 *Ë*
po°ed
;

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

32 "po°edÉvíà%p", 
ev
);

34 i‡(
ev
 =
NULL
) {

38 
	`ngx_dñëe_po°ed_evít
(
ev
);

40 
ev
->
	`h™dÀr
(ev);

42 
	}
}

45 #i‡(
NGX_THREADS
Ë&& !(
NGX_WIN32
)

48 
	$ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
)

50 
ngx_öt_t
 
i
;

52 
ngx_uöt_t
 
busy
;

53 
ngx_evít_t
 *
ev
;

55 
busy
 = 1;

57 i‡(
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
Ë=
NGX_ERROR
) {

61 
ev
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;Év;Év =Év->
√xt
) {

62 i‡(*(
ev
->
lock
) == 0) {

63 
busy
 = 0;

68 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

70 i‡(
busy
) {

75 
i
 = 0; i < 
ngx_thªads_n
; i++) {

76 i‡(
ngx_thªads
[
i
].
°©e
 =
NGX_THREAD_FREE
) {

77 
	`ngx_c⁄d_sig«l
(
ngx_thªads
[
i
].
cv
);

81 
	}
}

84 
ngx_öt_t


85 
	$ngx_evít_thªad_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
)

87 
ngx_evít_t
 *
ev
;

91 
ev
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;

95 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

96 "po°edÉvíà%p", 
ev
);

98 i‡(
ev
 =
NULL
) {

99  
NGX_OK
;

102 i‡(
	`ngx_åylock
(
ev
->
lock
) == 0) {

104 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

105 "po°edÉvíà%∞i†busy", 
ev
);

107 
ev
 =Év->
√xt
;

111 i‡(
ev
->
lock
 !ev->
own_lock
) {

112 i‡(*(
ev
->
own_lock
)) {

113 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

114 "thêow¿lock o‡thêpo°edÉvíà%∞i†busy", 
ev
);

115 
	`ngx_u∆ock
(
ev
->
lock
);

116 
ev
 =Év->
√xt
;

119 *(
ev
->
own_lock
) = 1;

122 
	`ngx_dñëe_po°ed_evít
(
ev
);

124 
ev
->
locked
 = 1;

126 
ev
->
ªady
 |ev->
po°ed_ªady
;

127 
ev
->
timedout
 |ev->
po°ed_timedout
;

128 
ev
->
≥ndög_eof
 |ev->
po°ed_eof
;

129 #i‡(
NGX_HAVE_KQUEUE
)

130 
ev
->
kq_î∫o
 |ev->
po°ed_î∫o
;

132 i‡(
ev
->
po°ed_avaûabÀ
) {

133 
ev
->
avaûabÀ
 =Év->
po°ed_avaûabÀ
;

136 
ev
->
po°ed_ªady
 = 0;

137 
ev
->
po°ed_timedout
 = 0;

138 
ev
->
po°ed_eof
 = 0;

139 #i‡(
NGX_HAVE_KQUEUE
)

140 
ev
->
po°ed_î∫o
 = 0;

142 
ev
->
po°ed_avaûabÀ
 = 0;

144 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

146 
ev
->
	`h™dÀr
(ev);

148 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

150 i‡(
ev
->
locked
) {

151 
	`ngx_u∆ock
(
ev
->
lock
);

153 i‡(
ev
->
lock
 !ev->
own_lock
) {

154 
	`ngx_u∆ock
(
ev
->
own_lock
);

158 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

159 "po°edÉvíà%∞i†d⁄e", 
ev
);

164 
	}
}

169 
	$ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
)

171 
	}
}

	@src/event/ngx_event_posted.h

8 #i‚de‡
_NGX_EVENT_POSTED_H_INCLUDED_


9 
	#_NGX_EVENT_POSTED_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 #i‡(
NGX_THREADS
)

18 
ngx_muãx_t
 *
ngx_po°ed_evíts_muãx
;

22 
	#ngx_locked_po°_evít
(
ev
, 
queue
) \

24 i‡(
ev
->
¥ev
 =
NULL
) { \

25 
ev
->
√xt
 = (
ngx_evít_t
 *Ë*
queue
; \

26 
ev
->
¥ev
 = (
ngx_evít_t
 **Ë
queue
; \

27 *
queue
 = 
ev
; \

29 i‡(
ev
->
√xt
) { \

30 
ev
->
√xt
->
¥ev
 = &ev->next; \

33 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "postÉvent %p",Év); \

36 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

37 "upd©êpo°edÉvíà%p", 
ev
); \

38 }

	)

41 
	#ngx_po°_evít
(
ev
, 
queue
) \

43 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
); \

44 
	`ngx_locked_po°_evít
(
ev
, 
queue
); \

45 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

	)

48 
	#ngx_dñëe_po°ed_evít
(
ev
) \

50 *(
ev
->
¥ev
Ëev->
√xt
; \

52 i‡(
ev
->
√xt
) { \

53 
ev
->
√xt
->
¥ev
 =Év->prev; \

56 
ev
->
¥ev
 = 
NULL
; \

57 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

58 "dñëêpo°edÉvíà%p", 
ev
);

	)

62 
ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
,

63 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 **
po°ed
);

64 
ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
);

66 #i‡(
NGX_THREADS
)

67 
ngx_öt_t
 
ngx_evít_thªad_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
);

71 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_po°ed_ac˚±_evíts
;

72 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_po°ed_evíts
;

	@src/event/ngx_event_timer.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_THREADS
)

14 
ngx_muãx_t
 *
	gngx_evít_timî_muãx
;

18 
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 
	gngx_evít_timî_rbåì
;

19 
ngx_rbåì_node_t
 
	gngx_evít_timî_£¡öñ
;

27 
ngx_öt_t


28 
	$ngx_evít_timî_öô
(
ngx_log_t
 *
log
)

30 
	`ngx_rbåì_öô
(&
ngx_evít_timî_rbåì
, &
ngx_evít_timî_£¡öñ
,

31 
ngx_rbåì_ö£π_timî_vÆue
);

33 #i‡(
NGX_THREADS
)

35 i‡(
ngx_evít_timî_muãx
) {

36 
ngx_evít_timî_muãx
->
log
 =Üog;

37  
NGX_OK
;

40 
ngx_evít_timî_muãx
 = 
	`ngx_muãx_öô
(
log
, 0);

41 i‡(
ngx_evít_timî_muãx
 =
NULL
) {

42  
NGX_ERROR
;

47  
NGX_OK
;

48 
	}
}

51 
ngx_m£c_t


52 
	$ngx_evít_föd_timî
()

54 
ngx_m£c_öt_t
 
timî
;

55 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

57 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =&
ngx_evít_timî_£¡öñ
) {

58  
NGX_TIMER_INFINITE
;

61 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

63 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

64 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

66 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

68 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

70 
timî
 = (
ngx_m£c_öt_t
Ë
node
->
key
 - (ngx_m£c_öt_tË
ngx_cuºít_m£c
;

72  (
ngx_m£c_t
Ë(
timî
 > 0 ?Åimer : 0);

73 
	}
}

77 
	$ngx_evít_expúe_timîs
()

79 
ngx_evít_t
 *
ev
;

80 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

82 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

86 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

88 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

90 i‡(
roŸ
 =
£¡öñ
) {

94 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

98 i‡((
ngx_m£c_öt_t
Ë
node
->
key
 - (ngx_m£c_öt_tË
ngx_cuºít_m£c
 <= 0)

100 
ev
 = (
ngx_evít_t
 *Ë((*Ë
node
 - 
	`off£tof
“gx_evít_t, 
timî
));

102 #i‡(
NGX_THREADS
)

104 i‡(
ngx_thªaded
 && 
	`ngx_åylock
(
ev
->
lock
) == 0) {

114 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

115 "evíà%∞i†busy i¿expúêtimîs", 
ev
);

120 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

122 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

124 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

126 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

128 #i‡(
NGX_DEBUG
)

129 
ev
->
timî
.
À·
 = 
NULL
;

130 
ev
->
timî
.
right
 = 
NULL
;

131 
ev
->
timî
.
∑ª¡
 = 
NULL
;

134 
ev
->
timî_£t
 = 0;

136 #i‡(
NGX_THREADS
)

137 i‡(
ngx_thªaded
) {

138 
ev
->
po°ed_timedout
 = 1;

140 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

142 
	`ngx_u∆ock
(
ev
->
lock
);

148 
ev
->
timedout
 = 1;

150 
ev
->
	`h™dÀr
(ev);

158 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

159 
	}
}

	@src/event/ngx_event_timer.h

8 #i‚de‡
_NGX_EVENT_TIMER_H_INCLUDED_


9 
	#_NGX_EVENT_TIMER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_TIMER_INFINITE
 (
ngx_m£c_t
Ë-1

	)

19 
	#NGX_TIMER_LAZY_DELAY
 300

	)

22 
ngx_öt_t
 
ngx_evít_timî_öô
(
ngx_log_t
 *
log
);

23 
ngx_m£c_t
 
ngx_evít_föd_timî
();

24 
ngx_evít_expúe_timîs
();

27 #i‡(
NGX_THREADS
)

28 
ngx_muãx_t
 *
ngx_evít_timî_muãx
;

32 
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 
ngx_evít_timî_rbåì
;

35 
ngx_ölöe
 

36 
	$ngx_evít_dñ_timî
(
ngx_evít_t
 *
ev
)

38 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

40 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

42 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

44 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

46 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

48 #i‡(
NGX_DEBUG
)

49 
ev
->
timî
.
À·
 = 
NULL
;

50 
ev
->
timî
.
right
 = 
NULL
;

51 
ev
->
timî
.
∑ª¡
 = 
NULL
;

54 
ev
->
timî_£t
 = 0;

55 
	}
}

58 
ngx_ölöe
 

59 
	$ngx_evít_add_timî
(
ngx_evít_t
 *
ev
, 
ngx_m£c_t
 
timî
)

61 
ngx_m£c_t
 
key
;

62 
ngx_m£c_öt_t
 
diff
;

64 
key
 = 
ngx_cuºít_m£c
 + 
timî
;

66 i‡(
ev
->
timî_£t
) {

74 
diff
 = (
ngx_m£c_öt_t
Ë(
key
 - 
ev
->
timî
.key);

76 i‡(
	`ngx_abs
(
diff
Ë< 
NGX_TIMER_LAZY_DELAY
) {

77 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

79 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
, key);

83 
	`ngx_dñ_timî
(
ev
);

86 
ev
->
timî
.
key
 = key;

88 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

90 
	`ngx_evít_idít
(
ev
->
d©a
), 
timî
,Év->timî.
key
);

92 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

94 
	`ngx_rbåì_ö£π
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

96 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

98 
ev
->
timî_£t
 = 1;

99 
	}
}

	@src/http/modules/ngx_http_access_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ö_addr_t
 
	mmask
;

15 
ö_addr_t
 
	maddr
;

16 
ngx_uöt_t
 
	mdíy
;

17 } 
	tngx_hâp_ac˚ss_ruÀ_t
;

19 #i‡(
NGX_HAVE_INET6
)

22 
ö6_addr
 
	maddr
;

23 
ö6_addr
 
	mmask
;

24 
ngx_uöt_t
 
	mdíy
;

25 } 
	tngx_hâp_ac˚ss_ruÀ6_t
;

30 
ngx_¨øy_t
 *
	mruÀs
;

31 #i‡(
NGX_HAVE_INET6
)

32 
ngx_¨øy_t
 *
	mruÀs6
;

34 } 
	tngx_hâp_ac˚ss_loc_c⁄f_t
;

37 
ngx_öt_t
 
ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

38 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
ö_addr_t
 
addr
);

40 #i‡(
NGX_HAVE_INET6
)

41 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
,

42 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
u_ch¨
 *
p
);

44 
ngx_öt_t
 
ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
);

45 *
ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

46 *
c⁄f
);

47 *
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

48 *
ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

49 *
∑ª¡
, *
chûd
);

50 
ngx_öt_t
 
ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
);

53 
ngx_comm™d_t
 
	gngx_hâp_ac˚ss_comm™ds
[] = {

55 { 
ngx_°rög
("allow"),

56 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


57 |
NGX_CONF_TAKE1
,

58 
ngx_hâp_ac˚ss_ruÀ
,

59 
NGX_HTTP_LOC_CONF_OFFSET
,

61 
NULL
 },

63 { 
ngx_°rög
("deny"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


65 |
NGX_CONF_TAKE1
,

66 
ngx_hâp_ac˚ss_ruÀ
,

67 
NGX_HTTP_LOC_CONF_OFFSET
,

69 
NULL
 },

71 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ_˘x
 = {

77 
NULL
,

78 
ngx_hâp_ac˚ss_öô
,

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
,

87 
ngx_hâp_ac˚ss_mîge_loc_c⁄f


91 
ngx_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_ac˚ss_moduÀ_˘x
,

94 
ngx_hâp_ac˚ss_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

110 
sockaddr_ö
 *
sö
;

111 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
;

112 #i‡(
NGX_HAVE_INET6
)

113 
u_ch¨
 *
p
;

114 
ö_addr_t
 
addr
;

115 
sockaddr_ö6
 *
sö6
;

118 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ac˚ss_moduÀ
);

120 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

122 
AF_INET
:

123 i‡(
Æcf
->
ruÀs
) {

124 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

125  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
sö
->
sö_addr
.
s_addr
);

129 #i‡(
NGX_HAVE_INET6
)

131 
AF_INET6
:

132 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

133 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

135 i‡(
Æcf
->
ruÀs
 && 
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

136 
addr
 = 
p
[12] << 24;

137 
addr
 +
p
[13] << 16;

138 
addr
 +
p
[14] << 8;

139 
addr
 +
p
[15];

140  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
	`ht⁄l
(
addr
));

143 i‡(
Æcf
->
ruÀs6
) {

144  
	`ngx_hâp_ac˚ss_öë6
(
r
, 
Æcf
, 
p
);

150  
NGX_DECLINED
;

151 
	}
}

154 
ngx_öt_t


155 
	$ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

156 
ö_addr_t
 
addr
)

158 
ngx_uöt_t
 
i
;

159 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

161 
ruÀ
 = 
Æcf
->
ruÀs
->
ñts
;

162 
i
 = 0; i < 
Æcf
->
ruÀs
->
√…s
; i++) {

164 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

166 
addr
, 
ruÀ
[
i
].
mask
,Ñule[i].addr);

168 i‡((
addr
 & 
ruÀ
[
i
].
mask
) ==Ñule[i].addr) {

169  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ
[
i
].
díy
);

173  
NGX_DECLINED
;

174 
	}
}

177 #i‡(
NGX_HAVE_INET6
)

179 
ngx_öt_t


180 
	$ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

181 
u_ch¨
 *
p
)

183 
ngx_uöt_t
 
n
;

184 
ngx_uöt_t
 
i
;

185 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

187 
ruÀ6
 = 
Æcf
->
ruÀs6
->
ñts
;

188 
i
 = 0; i < 
Æcf
->
ruÀs6
->
√…s
; i++) {

190 #i‡(
NGX_DEBUG
)

192 
size_t
 
˛
, 
ml
, 
Æ
;

193 
u_ch¨
 
˘
[
NGX_INET6_ADDRSTRLEN
];

194 
u_ch¨
 
mt
[
NGX_INET6_ADDRSTRLEN
];

195 
u_ch¨
 
©
[
NGX_INET6_ADDRSTRLEN
];

197 
˛
 = 
	`ngx_öë6_¡›
(
p
, 
˘
, 
NGX_INET6_ADDRSTRLEN
);

198 
ml
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
mask
.
s6_addr
, 
mt
, 
NGX_INET6_ADDRSTRLEN
);

199 
Æ
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
addr
.
s6_addr
, 
©
, 
NGX_INET6_ADDRSTRLEN
);

201 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

202 "ac˚ss: %*†%*†%*s", 
˛
, 
˘
, 
ml
, 
mt
, 
Æ
, 
©
);

206 
n
 = 0;Ç < 16;Ç++) {

207 i‡((
p
[
n
] & 
ruÀ6
[
i
].
mask
.
s6_addr
[n]Ë!ruÀ6[i].
addr
.s6_addr[n]) {

208 
√xt
;

212  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ6
[
i
].
díy
);

214 
√xt
:

218  
NGX_DECLINED
;

219 
	}
}

224 
ngx_öt_t


225 
	$ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
)

227 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

229 i‡(
díy
) {

230 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

232 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

233 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

237  
NGX_HTTP_FORBIDDEN
;

240  
NGX_OK
;

241 
	}
}

245 
	$ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

247 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

249 
ngx_öt_t
 
rc
;

250 
ngx_uöt_t
 
Æl
;

251 
ngx_°r_t
 *
vÆue
;

252 
ngx_cidr_t
 
cidr
;

253 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

254 #i‡(
NGX_HAVE_INET6
)

255 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

258 
	`ngx_memzîo
(&
cidr
, (
ngx_cidr_t
));

260 
vÆue
 = 
cf
->
¨gs
->
ñts
;

262 
Æl
 = (
vÆue
[1].
Àn
 =3 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "all") == 0);

264 i‡(!
Æl
) {

266 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

268 i‡(
rc
 =
NGX_ERROR
) {

269 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

270 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

271  
NGX_CONF_ERROR
;

274 i‡(
rc
 =
NGX_DONE
) {

275 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

276 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

280 
cidr
.
Ámûy
) {

282 #i‡(
NGX_HAVE_INET6
)

283 
AF_INET6
:

286 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

287 
Æcf
->
ruÀs6
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

288 (
ngx_hâp_ac˚ss_ruÀ6_t
));

289 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
ruÀ6
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs6
);

295 i‡(
ruÀ6
 =
NULL
) {

296  
NGX_CONF_ERROR
;

299 
ruÀ6
->
mask
 = 
cidr
.
u
.
ö6
.mask;

300 
ruÀ6
->
addr
 = 
cidr
.
u
.
ö6
.addr;

301 
ruÀ6
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

303 i‡(!
Æl
) {

312 i‡(
Æcf
->
ruÀs
 =
NULL
) {

313 
Æcf
->
ruÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

314 (
ngx_hâp_ac˚ss_ruÀ_t
));

315 i‡(
Æcf
->
ruÀs
 =
NULL
) {

316  
NGX_CONF_ERROR
;

320 
ruÀ
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs
);

321 i‡(
ruÀ
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
ruÀ
->
mask
 = 
cidr
.
u
.
ö
.mask;

326 
ruÀ
->
addr
 = 
cidr
.
u
.
ö
.addr;

327 
ruÀ
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

330  
NGX_CONF_OK
;

331 
	}
}

335 
	$ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

337 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
;

339 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ac˚ss_loc_c⁄f_t
));

340 i‡(
c⁄f
 =
NULL
) {

341  
NULL
;

344  
c⁄f
;

345 
	}
}

349 
	$ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

351 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

352 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

354 i‡(
c⁄f
->
ruÀs
 =
NULL
) {

355 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

358 #i‡(
NGX_HAVE_INET6
)

359 i‡(
c⁄f
->
ruÀs6
 =
NULL
) {

360 
c⁄f
->
ruÀs6
 = 
¥ev
->rules6;

364  
NGX_CONF_OK
;

365 
	}
}

368 
ngx_öt_t


369 
	$ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
)

371 
ngx_hâp_h™dÀr_±
 *
h
;

372 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

374 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

376 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

377 i‡(
h
 =
NULL
) {

378  
NGX_ERROR
;

381 *
h
 = 
ngx_hâp_ac˚ss_h™dÀr
;

383  
NGX_OK
;

384 
	}
}

	@src/http/modules/ngx_http_addition_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mbef‹e_body
;

15 
ngx_°r_t
 
	ma·î_body
;

17 
ngx_hash_t
 
	mty≥s
;

18 
ngx_¨øy_t
 *
	mty≥s_keys
;

19 } 
	tngx_hâp_addôi⁄_c⁄f_t
;

23 
ngx_uöt_t
 
	mbef‹e_body_£¡
;

24 } 
	tngx_hâp_addôi⁄_˘x_t
;

27 *
ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

29 *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_addôi⁄_comm™ds
[] = {

35 { 
ngx_°rög
("add_before_body"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

37 
ngx_c⁄f_£t_°r_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
bef‹e_body
),

40 
NULL
 },

42 { 
ngx_°rög
("add_after_body"),

43 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

44 
ngx_c⁄f_£t_°r_¶Ÿ
,

45 
NGX_HTTP_LOC_CONF_OFFSET
,

46 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
a·î_body
),

47 
NULL
 },

49 { 
ngx_°rög
("addition_types"),

50 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

51 
ngx_hâp_ty≥s_¶Ÿ
,

52 
NGX_HTTP_LOC_CONF_OFFSET
,

53 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
ty≥s_keys
),

54 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

56 
ngx_nuŒ_comm™d


60 
ngx_hâp_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ_˘x
 = {

61 
NULL
,

62 
ngx_hâp_addôi⁄_fûãr_öô
,

64 
NULL
,

65 
NULL
,

67 
NULL
,

68 
NULL
,

70 
ngx_hâp_addôi⁄_¸óã_c⁄f
,

71 
ngx_hâp_addôi⁄_mîge_c⁄f


75 
ngx_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ
 = {

76 
NGX_MODULE_V1
,

77 &
ngx_hâp_addôi⁄_fûãr_moduÀ_˘x
,

78 
ngx_hâp_addôi⁄_comm™ds
,

79 
NGX_HTTP_MODULE
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NGX_MODULE_V1_PADDING


91 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

92 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

95 
ngx_öt_t


96 
	$ngx_hâp_addôi⁄_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

98 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

99 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

101 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK
 ||Ñ !r->
maö
) {

102  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

105 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

107 i‡(
c⁄f
->
bef‹e_body
.
Àn
 =0 && c⁄f->
a·î_body
.len == 0) {

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

111 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
) {

112  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

115 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_addôi⁄_˘x_t
));

116 i‡(
˘x
 =
NULL
) {

117  
NGX_ERROR
;

120 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

122 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

123 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

125  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

126 
	}
}

129 
ngx_öt_t


130 
	$ngx_hâp_addôi⁄_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

132 
ngx_öt_t
 
rc
;

133 
ngx_uöt_t
 
œ°
;

134 
ngx_chaö_t
 *
˛
;

135 
ngx_hâp_ªque°_t
 *
§
;

136 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

137 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

139 i‡(
ö
 =
NULL
 || 
r
->
hódî_⁄ly
) {

140  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

143 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

145 i‡(
˘x
 =
NULL
) {

146  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

149 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

151 i‡(!
˘x
->
bef‹e_body_£¡
) {

152 
˘x
->
bef‹e_body_£¡
 = 1;

154 i‡(
c⁄f
->
bef‹e_body
.
Àn
) {

155 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
bef‹e_body
, 
NULL
, &
§
, NULL, 0)

156 !
NGX_OK
)

158  
NGX_ERROR
;

163 i‡(
c⁄f
->
a·î_body
.
Àn
 == 0) {

164 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

165  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

168 
œ°
 = 0;

170 
˛
 = 
ö
; cl; c»˛->
√xt
) {

171 i‡(
˛
->
buf
->
œ°_buf
) {

172 
˛
->
buf
->
œ°_buf
 = 0;

173 
˛
->
buf
->
sync
 = 1;

174 
œ°
 = 1;

178 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

180 i‡(
rc
 =
NGX_ERROR
 || !
œ°
 || 
c⁄f
->
a·î_body
.
Àn
 == 0) {

181  
rc
;

184 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
a·î_body
, 
NULL
, &
§
, NULL, 0)

185 !
NGX_OK
)

187  
NGX_ERROR
;

190 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

192  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

193 
	}
}

196 
ngx_öt_t


197 
	$ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

199 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

200 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_addôi⁄_hódî_fûãr
;

202 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

203 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_addôi⁄_body_fûãr
;

205  
NGX_OK
;

206 
	}
}

210 
	$ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

212 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

214 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_addôi⁄_c⁄f_t
));

215 i‡(
c⁄f
 =
NULL
) {

216  
NULL
;

228  
c⁄f
;

229 
	}
}

233 
	$ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

235 
ngx_hâp_addôi⁄_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

236 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
 = 
chûd
;

238 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
bef‹e_body
, 
¥ev
->before_body, "");

239 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
a·î_body
, 
¥ev
->after_body, "");

241 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

242 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

243 
ngx_hâp_html_deÁu…_ty≥s
)

244 !
NGX_OK
)

246  
NGX_CONF_ERROR
;

249  
NGX_CONF_OK
;

250 
	}
}

	@src/http/modules/ngx_http_auth_basic_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_¸y±.h
>

14 
	#NGX_HTTP_AUTH_BUF_SIZE
 2048

	)

18 
ngx_°r_t
 
	m∑sswd
;

19 } 
	tngx_hâp_auth_basic_˘x_t
;

23 
ngx_°r_t
 
	mªÆm
;

24 
ngx_hâp_com∂ex_vÆue_t
 
	mu£r_fûe
;

25 } 
	tngx_hâp_auth_basic_loc_c⁄f_t
;

28 
ngx_öt_t
 
ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
);

31 
ngx_öt_t
 
ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_°r_t
 *
ªÆm
);

33 
ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
);

34 *
ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

37 
ngx_öt_t
 
ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
);

38 *
ngx_hâp_auth_basic
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

39 *
ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
c⁄f
);

43 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_auth_basic_p
 = 
ngx_hâp_auth_basic
;

45 
ngx_comm™d_t
 
	gngx_hâp_auth_basic_comm™ds
[] = {

47 { 
ngx_°rög
("auth_basic"),

48 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


49 |
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_°r_¶Ÿ
,

51 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
ªÆm
),

53 &
ngx_hâp_auth_basic_p
 },

55 { 
ngx_°rög
("auth_basic_user_file"),

56 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


57 |
NGX_CONF_TAKE1
,

58 
ngx_hâp_auth_basic_u£r_fûe
,

59 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
u£r_fûe
),

61 
NULL
 },

63 
ngx_nuŒ_comm™d


67 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ_˘x
 = {

68 
NULL
,

69 
ngx_hâp_auth_basic_öô
,

71 
NULL
,

72 
NULL
,

74 
NULL
,

75 
NULL
,

77 
ngx_hâp_auth_basic_¸óã_loc_c⁄f
,

78 
ngx_hâp_auth_basic_mîge_loc_c⁄f


82 
ngx_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ
 = {

83 
NGX_MODULE_V1
,

84 &
ngx_hâp_auth_basic_moduÀ_˘x
,

85 
ngx_hâp_auth_basic_comm™ds
,

86 
NGX_HTTP_MODULE
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
NULL
,

93 
NULL
,

94 
NGX_MODULE_V1_PADDING


98 
ngx_öt_t


99 
	$ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

101 
off_t
 
off£t
;

102 
ssize_t
 
n
;

103 
ngx_fd_t
 
fd
;

104 
ngx_öt_t
 
rc
;

105 
ngx_îr_t
 
îr
;

106 
ngx_°r_t
 
pwd
, 
u£r_fûe
;

107 
ngx_uöt_t
 
i
, 
Àvñ
, 
logö
, 
À·
, 
∑sswd
;

108 
ngx_fûe_t
 
fûe
;

109 
ngx_hâp_auth_basic_˘x_t
 *
˘x
;

110 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
;

111 
u_ch¨
 
buf
[
NGX_HTTP_AUTH_BUF_SIZE
];

113 
sw_logö
,

114 
sw_∑sswd
,

115 
sw_skù


116 } 
°©e
;

118 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

120 i‡(
Æcf
->
ªÆm
.
Àn
 =0 ||álcf->
u£r_fûe
.
vÆue
.len == 0) {

121  
NGX_DECLINED
;

124 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

126 i‡(
˘x
) {

127  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
˘x
, &˘x->
∑sswd
,

128 &
Æcf
->
ªÆm
);

131 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

133 i‡(
rc
 =
NGX_DECLINED
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

138  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
Æcf
->
ªÆm
);

141 i‡(
rc
 =
NGX_ERROR
) {

142  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

145 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Æcf
->
u£r_fûe
, &u£r_fûeË!
NGX_OK
) {

146  
NGX_ERROR
;

149 
fd
 = 
	`ngx_›í_fûe
(
u£r_fûe
.
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

151 i‡(
fd
 =
NGX_INVALID_FILE
) {

152 
îr
 = 
ngx_î∫o
;

154 i‡(
îr
 =
NGX_ENOENT
) {

155 
Àvñ
 = 
NGX_LOG_ERR
;

156 
rc
 = 
NGX_HTTP_FORBIDDEN
;

159 
Àvñ
 = 
NGX_LOG_CRIT
;

160 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

163 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

164 
ngx_›í_fûe_n
 " \"%s\" faûed", 
u£r_fûe
.
d©a
);

166  
rc
;

169 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

171 
fûe
.
fd
 = fd;

172 
fûe
.
«me
 = 
u£r_fûe
;

173 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

175 
°©e
 = 
sw_logö
;

176 
∑sswd
 = 0;

177 
logö
 = 0;

178 
À·
 = 0;

179 
off£t
 = 0;

182 
i
 = 
À·
;

184 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
 + 
À·
, 
NGX_HTTP_AUTH_BUF_SIZE
 -Üeft,

185 
off£t
);

187 i‡(
n
 =
NGX_ERROR
) {

188 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

189  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

192 i‡(
n
 == 0) {

196 
i
 = 
À·
; i <Üe· + 
n
; i++) {

197 
°©e
) {

199 
sw_logö
:

200 i‡(
logö
 == 0) {

202 i‡(
buf
[
i
] ='#' || buf[i] =
CR
) {

203 
°©e
 = 
sw_skù
;

207 i‡(
buf
[
i
] =
LF
) {

212 i‡(
buf
[
i
] !
r
->
hódîs_ö
.
u£r
.
d©a
[
logö
]) {

213 
°©e
 = 
sw_skù
;

217 i‡(
logö
 =
r
->
hódîs_ö
.
u£r
.
Àn
) {

218 
°©e
 = 
sw_∑sswd
;

219 
∑sswd
 = 
i
 + 1;

222 
logö
++;

226 
sw_∑sswd
:

227 i‡(
buf
[
i
] =
LF
 || buf[i] =
CR
 || buf[i] == ':') {

228 
buf
[
i
] = '\0';

230 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

232 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

233 
pwd
.
d©a
 = &
buf
[
∑sswd
];

235  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
,

236 &
Æcf
->
ªÆm
);

241 
sw_skù
:

242 i‡(
buf
[
i
] =
LF
) {

243 
°©e
 = 
sw_logö
;

244 
logö
 = 0;

251 i‡(
°©e
 =
sw_∑sswd
) {

252 
À·
 =Üe· + 
n
 - 
∑sswd
;

253 
	`ngx_memmove
(
buf
, &buf[
∑sswd
], 
À·
);

254 
∑sswd
 = 0;

257 
À·
 = 0;

260 
off£t
 +
n
;

263 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

265 i‡(
°©e
 =
sw_∑sswd
) {

266 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

267 
pwd
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Öwd.
Àn
 + 1);

268 i‡(
pwd
.
d©a
 =
NULL
) {

269  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

272 
	`ngx_˝y°∫
(
pwd
.
d©a
, &
buf
[
∑sswd
],Öwd.
Àn
 + 1);

274  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
, &
Æcf
->
ªÆm
);

277 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

279 &
r
->
hódîs_ö
.
u£r
, &
u£r_fûe
);

281  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
Æcf
->
ªÆm
);

282 
	}
}

285 
ngx_öt_t


286 
	$ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

287 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
)

289 
ngx_öt_t
 
rc
;

290 
u_ch¨
 *
í¸y±ed
;

292 
rc
 = 
	`ngx_¸y±
(
r
->
poﬁ
,Ñ->
hódîs_ö
.
∑sswd
.
d©a
,Öasswd->data,

293 &
í¸y±ed
);

295 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

297 
rc
, &
r
->
hódîs_ö
.
u£r
, 
∑sswd
->
d©a
);

299 i‡(
rc
 =
NGX_OK
) {

300 i‡(
	`ngx_°rcmp
(
í¸y±ed
, 
∑sswd
->
d©a
) == 0) {

301  
NGX_OK
;

304 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

305 "í¸y±ed: \"%s\"", 
í¸y±ed
);

307 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

309 &
r
->
hódîs_ö
.
u£r
);

311  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, 
ªÆm
);

314 i‡(
rc
 =
NGX_ERROR
) {

315  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

320 i‡(
˘x
 =
NULL
) {

321 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_auth_basic_˘x_t
));

322 i‡(
˘x
 =
NULL
) {

323  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

326 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_auth_basic_moduÀ
);

328 
˘x
->
∑sswd
.
Àn
 =Öasswd->len;

329 
∑sswd
->
Àn
++;

331 
˘x
->
∑sswd
.
d©a
 = 
	`ngx_p°rdup
(
r
->
poﬁ
,Öasswd);

332 i‡(
˘x
->
∑sswd
.
d©a
 =
NULL
) {

333  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

340  
rc
;

341 
	}
}

344 
ngx_öt_t


345 
	$ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ªÆm
)

347 
r
->
hódîs_out
.
www_authítiˇã
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

348 i‡(
r
->
hódîs_out
.
www_authítiˇã
 =
NULL
) {

349  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

352 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 1;

353 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
www_authítiˇã
->
key
, "WWW-Authenticate");

354 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
 = *
ªÆm
;

356  
NGX_HTTP_UNAUTHORIZED
;

357 
	}
}

360 
	$ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
)

362 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

363 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
ngx_î∫o
,

364 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
.
d©a
);

366 
	}
}

370 
	$ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

372 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
;

374 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_basic_loc_c⁄f_t
));

375 i‡(
c⁄f
 =
NULL
) {

376  
NULL
;

379  
c⁄f
;

380 
	}
}

384 
	$ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

386 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

387 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

389 i‡(
c⁄f
->
ªÆm
.
d©a
 =
NULL
) {

390 
c⁄f
->
ªÆm
 = 
¥ev
->realm;

393 i‡(
c⁄f
->
u£r_fûe
.
vÆue
.
Àn
 == 0) {

394 
c⁄f
->
u£r_fûe
 = 
¥ev
->user_file;

397  
NGX_CONF_OK
;

398 
	}
}

401 
ngx_öt_t


402 
	$ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
)

404 
ngx_hâp_h™dÀr_±
 *
h
;

405 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

407 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

409 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

410 i‡(
h
 =
NULL
) {

411  
NGX_ERROR
;

414 *
h
 = 
ngx_hâp_auth_basic_h™dÀr
;

416  
NGX_OK
;

417 
	}
}

421 
	$ngx_hâp_auth_basic
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

423 
ngx_°r_t
 *
ªÆm
 = 
d©a
;

425 
size_t
 
Àn
;

426 
u_ch¨
 *
basic
, *
p
;

428 i‡(
	`ngx_°rcmp
(
ªÆm
->
d©a
, "off") == 0) {

429 
	`ngx_°r_£t
(
ªÆm
, "");

430  
NGX_CONF_OK
;

433 
Àn
 = ("Basi¯ªÆm=\""Ë- 1 + 
ªÆm
->len + 1;

435 
basic
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

436 i‡(
basic
 =
NULL
) {

437  
NGX_CONF_ERROR
;

440 
p
 = 
	`ngx_˝ymem
(
basic
, "BasicÑealm=\"", ("BasicÑealm=\"") - 1);

441 
p
 = 
	`ngx_˝ymem
’, 
ªÆm
->
d©a
,Ñólm->
Àn
);

442 *
p
 = '"';

444 
ªÆm
->
Àn
 =Üen;

445 
ªÆm
->
d©a
 = 
basic
;

447  
NGX_CONF_OK
;

448 
	}
}

452 
	$ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

454 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

456 
ngx_°r_t
 *
vÆue
;

457 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

459 i‡(
Æcf
->
u£r_fûe
.
vÆue
.
Àn
) {

463 
vÆue
 = 
cf
->
¨gs
->
ñts
;

465 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

467 
ccv
.
cf
 = cf;

468 
ccv
.
vÆue
 = &value[1];

469 
ccv
.
com∂ex_vÆue
 = &
Æcf
->
u£r_fûe
;

470 
ccv
.
zîo
 = 1;

471 
ccv
.
c⁄f_¥efix
 = 1;

473 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

474  
NGX_CONF_ERROR
;

477  
NGX_CONF_OK
;

478 
	}
}

	@src/http/modules/ngx_http_autoindex_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

16 
ngx_buf_t
 *
	mbuf
;

17 
size_t
 
	msize
;

18 
ngx_poﬁ_t
 *
	mpoﬁ
;

19 
size_t
 
	mÆloc_size
;

20 
ngx_chaö_t
 **
	mœ°_out
;

21 } 
	tngx_hâp_autoödex_˘x_t
;

27 
ngx_°r_t
 
	m«me
;

28 
size_t
 
	mutf_Àn
;

29 
size_t
 
	mesˇ≥
;

30 
size_t
 
	mesˇ≥_html
;

32 
	mdú
:1;

34 
time_t
 
	mmtime
;

35 
off_t
 
	msize
;

36 } 
	tngx_hâp_autoödex_íåy_t
;

40 
ngx_Êag_t
 
	míabÀ
;

41 
ngx_Êag_t
 
	mloˇ…ime
;

42 
ngx_Êag_t
 
	mexa˘_size
;

43 } 
	tngx_hâp_autoödex_loc_c⁄f_t
;

46 
	#NGX_HTTP_AUTOINDEX_PREALLOCATE
 50

	)

48 
	#NGX_HTTP_AUTOINDEX_NAME_LEN
 50

	)

51 
ngx_libc_cde˛
 
ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
,

52 c⁄° *
two
);

53 
ngx_öt_t
 
ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

55 
ngx_öt_t
 
ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
);

56 *
ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

58 *
∑ª¡
, *
chûd
);

61 
ngx_comm™d_t
 
	gngx_hâp_autoödex_comm™ds
[] = {

63 { 
ngx_°rög
("autoindex"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
íabÀ
),

68 
NULL
 },

70 { 
ngx_°rög
("autoindex_localtime"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
loˇ…ime
),

75 
NULL
 },

77 { 
ngx_°rög
("autoindex_exact_size"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

79 
ngx_c⁄f_£t_Êag_¶Ÿ
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
exa˘_size
),

82 
NULL
 },

84 
ngx_nuŒ_comm™d


88 
ngx_hâp_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ_˘x
 = {

89 
NULL
,

90 
ngx_hâp_autoödex_öô
,

92 
NULL
,

93 
NULL
,

95 
NULL
,

96 
NULL
,

98 
ngx_hâp_autoödex_¸óã_loc_c⁄f
,

99 
ngx_hâp_autoödex_mîge_loc_c⁄f


103 
ngx_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ
 = {

104 
NGX_MODULE_V1
,

105 &
ngx_hâp_autoödex_moduÀ_˘x
,

106 
ngx_hâp_autoödex_comm™ds
,

107 
NGX_HTTP_MODULE
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NGX_MODULE_V1_PADDING


119 
u_ch¨
 
	gtôÀ
[] =

120 "<html>" 
CRLF


125 
u_ch¨
 
	ghódî
[] =

126 "</tôÀ></hód>" 
CRLF


127 "<body bgcﬁ‹=\"whôe\">" 
CRLF


131 
u_ch¨
 
	gèû
[] =

132 "</body>" 
CRLF


133 "</html>" 
CRLF


137 
ngx_öt_t


138 
	$ngx_hâp_autoödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

140 
u_ch¨
 *
œ°
, *
fûíame
, 
sˇÀ
;

141 
off_t
 
Àngth
;

142 
size_t
 
Àn
, 
ch¨_Àn
, 
esˇ≥_html
, 
Æloˇãd
, 
roŸ
;

143 
ngx_tm_t
 
tm
;

144 
ngx_îr_t
 
îr
;

145 
ngx_buf_t
 *
b
;

146 
ngx_öt_t
 
rc
, 
size
;

147 
ngx_°r_t
 
∑th
;

148 
ngx_dú_t
 
dú
;

149 
ngx_uöt_t
 
i
, 
Àvñ
, 
utf8
;

150 
ngx_poﬁ_t
 *
poﬁ
;

151 
ngx_time_t
 *
ç
;

152 
ngx_chaö_t
 
out
;

153 
ngx_¨øy_t
 
íåõs
;

154 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

155 
ngx_hâp_autoödex_loc_c⁄f_t
 *
Æcf
;

157 *
m⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

160 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

161  
NGX_DECLINED
;

164 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

165  
NGX_DECLINED
;

168 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_autoödex_moduÀ
);

170 i‡(!
Æcf
->
íabÀ
) {

171  
NGX_DECLINED
;

176 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
,

177 
NGX_HTTP_AUTOINDEX_PREALLOCATE
);

178 i‡(
œ°
 =
NULL
) {

179  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

182 
Æloˇãd
 = 
∑th
.
Àn
;

183 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

184 i‡(
∑th
.
Àn
 > 1) {

185 
∑th
.
Àn
--;

187 
∑th
.
d©a
[∑th.
Àn
] = '\0';

189 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

190 "hâ∞autoödex: \"%s\"", 
∑th
.
d©a
);

192 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

193 
îr
 = 
ngx_î∫o
;

195 i‡(
îr
 =
NGX_ENOENT


196 || 
îr
 =
NGX_ENOTDIR


197 || 
îr
 =
NGX_ENAMETOOLONG
)

199 
Àvñ
 = 
NGX_LOG_ERR
;

200 
rc
 = 
NGX_HTTP_NOT_FOUND
;

202 } i‡(
îr
 =
NGX_EACCES
) {

203 
Àvñ
 = 
NGX_LOG_ERR
;

204 
rc
 = 
NGX_HTTP_FORBIDDEN
;

207 
Àvñ
 = 
NGX_LOG_CRIT
;

208 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

212 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

214  
rc
;

217 #i‡(
NGX_SUPPRESS_WARN
)

220 
	`ngx_memzîo
(&
íåõs
, (
ngx_¨øy_t
));

225 
poﬁ
 = 
r
->pool;

227 i‡(
	`ngx_¨øy_öô
(&
íåõs
, 
poﬁ
, 40, (
ngx_hâp_autoödex_íåy_t
))

228 !
NGX_OK
)

230  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

233 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

234 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

235 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

237 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

239 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

240 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

241 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

242 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

245  
rc
;

248 
fûíame
 = 
∑th
.
d©a
;

249 
fûíame
[
∑th
.
Àn
] = '/';

251 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
 == 5

252 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
ch¨£t
.
d©a
, (
u_ch¨
 *) "utf-8", 5)

255 
utf8
 = 1;

258 
utf8
 = 0;

262 
	`ngx_£t_î∫o
(0);

264 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

265 
îr
 = 
ngx_î∫o
;

267 i‡(
îr
 !
NGX_ENOMOREFILES
) {

268 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

269 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

270  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

277 "hâ∞autoödex fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

279 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

281 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

285 i‡(!
dú
.
vÆid_öfo
) {

289 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

290 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

291 + 
NGX_HTTP_AUTOINDEX_PREALLOCATE
;

293 
fûíame
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Æloˇãd
);

294 i‡(
fûíame
 =
NULL
) {

295  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

298 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

299 *
œ°
++ = '/';

302 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

304 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

305 
îr
 = 
ngx_î∫o
;

307 i‡(
îr
 !
NGX_ENOENT
) {

308 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

309 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

311 i‡(
îr
 =
NGX_EACCES
) {

315  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

318 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

319 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

320 
ngx_de_lök_öfo_n
 " \"%s\" failed",

321 
fûíame
);

322  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

327 
íåy
 = 
	`ngx_¨øy_push
(&
íåõs
);

328 i‡(
íåy
 =
NULL
) {

329  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

332 
íåy
->
«me
.
Àn
 =Üen;

334 
íåy
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 1);

335 i‡(
íåy
->
«me
.
d©a
 =
NULL
) {

336  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

339 
	`ngx_˝y°∫
(
íåy
->
«me
.
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

341 
íåy
->
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
	`ngx_de_«me
(&
dú
), 
Àn
,

342 
NGX_ESCAPE_URI_COMPONENT
);

344 
íåy
->
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
,É¡ry->
«me
.
d©a
,

345 
íåy
->
«me
.
Àn
);

347 i‡(
utf8
) {

348 
íåy
->
utf_Àn
 = 
	`ngx_utf8_Àngth
”¡ry->
«me
.
d©a
,É¡ry->«me.
Àn
);

350 
íåy
->
utf_Àn
 = 
Àn
;

353 
íåy
->
dú
 = 
	`ngx_de_is_dú
(&dir);

354 
íåy
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

355 
íåy
->
size
 = 
	`ngx_de_size
(&
dú
);

358 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

359 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

360 
ngx_˛o£_dú_n
 " \"%s\" faûed", &
∑th
);

363 
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

365 
Àn
 = (
tôÀ
) - 1

366 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


367 + (
hódî
) - 1

368 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


370 + ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1

372 + (
èû
) - 1;

374 
íåy
 = 
íåõs
.
ñts
;

375 
i
 = 0; i < 
íåõs
.
√…s
; i++) {

376 
Àn
 += ("<a href=\"") - 1

377 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


380 + 
íåy
[
i
].
«me
.
Àn
 -É¡ry[i].
utf_Àn


381 + 
íåy
[
i
].
esˇ≥_html


382 + 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + ("&gt;") - 2

389 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

390 i‡(
b
 =
NULL
) {

391  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

394 i‡(
íåõs
.
√…s
 > 1) {

395 
	`ngx_qs‹t
(
íåy
, (
size_t
Ë
íåõs
.
√…s
,

396 (
ngx_hâp_autoödex_íåy_t
),

397 
ngx_hâp_autoödex_cmp_íåõs
);

400 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
tôÀ
, (title) - 1);

402 i‡(
esˇ≥_html
) {

403 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

404 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

405 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

408 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

409 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

410 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

413 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</h1>", ("</h1>") - 1);

415 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
,

416 ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1);

418 
ç
 = 
	`ngx_timeofday
();

420 
i
 = 0; i < 
íåõs
.
√…s
; i++) {

421 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "<a href=\"", ("<a href=\"") - 1);

423 i‡(
íåy
[
i
].
esˇ≥
) {

424 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
íåy
[
i
].
«me
.
d©a
,É¡ry[i].«me.
Àn
,

425 
NGX_ESCAPE_URI_COMPONENT
);

427 
b
->
œ°
 +
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥
;

430 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

431 
íåy
[
i
].
«me
.
Àn
);

434 i‡(
íåy
[
i
].
dú
) {

435 *
b
->
œ°
++ = '/';

438 *
b
->
œ°
++ = '"';

439 *
b
->
œ°
++ = '>';

441 
Àn
 = 
íåy
[
i
].
utf_Àn
;

443 i‡(
íåy
[
i
].
«me
.
Àn
 !=Üen) {

444 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

445 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3 + 1;

448 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1;

451 
œ°
 = 
b
->last;

452 
b
->
œ°
 = 
	`ngx_utf8_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

453 
ch¨_Àn
, 
íåy
[
i
].
«me
.
Àn
 + 1);

455 i‡(
íåy
[
i
].
esˇ≥_html
) {

456 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
÷a°, 
íåy
[
i
].
«me
.
d©a
,

457 
b
->
œ°
 -Üast);

460 
œ°
 = 
b
->last;

463 i‡(
íåy
[
i
].
esˇ≥_html
) {

464 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

465 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3;

468 
ch¨_Àn
 = 
Àn
;

471 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->last,

472 
íåy
[
i
].
«me
.
d©a
, 
ch¨_Àn
);

473 
œ°
 = 
b
->last;

476 
b
->
œ°
 = 
	`ngx_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

477 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1);

478 
œ°
 = 
b
->last - 3;

482 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

483 
b
->
œ°
 = 
	`ngx_˝ymem
(last, "..&gt;</a>", ("..&gt;</a>") - 1);

486 i‡(
íåy
[
i
].
dú
 && 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

487 *
b
->
œ°
++ = '/';

488 
Àn
++;

491 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</a>", ("</a>") - 1);

492 
	`ngx_mem£t
(
b
->
œ°
, ' ', 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
);

493 
b
->
œ°
 +
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
;

496 *
b
->
œ°
++ = ' ';

498 
	`ngx_gmtime
(
íåy
[
i
].
mtime
 + 
ç
->
gmtoff
 * 60 * 
Æcf
->
loˇ…ime
, &
tm
);

500 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%02d-%s-%d %02d:%02d ",

501 
tm
.
ngx_tm_mday
,

502 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

503 
tm
.
ngx_tm_yór
,

504 
tm
.
ngx_tm_hour
,

505 
tm
.
ngx_tm_mö
);

507 i‡(
Æcf
->
exa˘_size
) {

508 i‡(
íåy
[
i
].
dú
) {

509 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

512 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%19O", 
íåy
[
i
].
size
);

516 i‡(
íåy
[
i
].
dú
) {

517 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

521 
Àngth
 = 
íåy
[
i
].
size
;

523 i‡(
Àngth
 > 1024 * 1024 * 1024 - 1) {

524 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024 * 1024));

525 i‡((
Àngth
 % (1024 * 1024 * 1024))

528 
size
++;

530 
sˇÀ
 = 'G';

532 } i‡(
Àngth
 > 1024 * 1024 - 1) {

533 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024));

534 i‡((
Àngth
 % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {

535 
size
++;

537 
sˇÀ
 = 'M';

539 } i‡(
Àngth
 > 9999) {

540 
size
 = (
ngx_öt_t
Ë(
Àngth
 / 1024);

541 i‡(
Àngth
 % 1024 > 511) {

542 
size
++;

544 
sˇÀ
 = 'K';

547 
size
 = (
ngx_öt_t
Ë
Àngth
;

548 
sˇÀ
 = '\0';

551 i‡(
sˇÀ
) {

552 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%6i%c", 
size
, 
sˇÀ
);

555 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %6i", 
size
);

560 *
b
->
œ°
++ = 
CR
;

561 *
b
->
œ°
++ = 
LF
;

566 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</pre><hr>", ("</pre><hr>") - 1);

568 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
èû
, (tail) - 1);

570 i‡(
r
 =r->
maö
) {

571 
b
->
œ°_buf
 = 1;

574 
b
->
œ°_ö_chaö
 = 1;

576 
out
.
buf
 = 
b
;

577 
out
.
√xt
 = 
NULL
;

579  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

580 
	}
}

583 
ngx_libc_cde˛


584 
	$ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
, c⁄° *
two
)

586 
ngx_hâp_autoödex_íåy_t
 *
fú°
 = (ngx_hâp_autoödex_íåy_à*Ë
⁄e
;

587 
ngx_hâp_autoödex_íåy_t
 *
£c⁄d
 = (ngx_hâp_autoödex_íåy_à*Ë
two
;

589 i‡(
fú°
->
dú
 && !
£c⁄d
->dir) {

594 i‡(!
fú°
->
dú
 && 
£c⁄d
->dir) {

599  (Ë
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

600 
	}
}

605 
ngx_buf_t
 *

606 
	$ngx_hâp_autoödex_Æloc
(
ngx_hâp_autoödex_˘x_t
 *
˘x
, 
size_t
 
size
)

608 
ngx_chaö_t
 *
˛
;

610 i‡(
˘x
->
buf
) {

612 i‡((
size_t
Ë(
˘x
->
buf
->
íd
 - ctx->buf->
œ°
Ë>
size
) {

613  
˘x
->
buf
;

616 
˘x
->
size
 +˘x->
buf
->
œ°
 - ctx->buf->
pos
;

619 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, ctx->
Æloc_size
);

620 i‡(
˘x
->
buf
 =
NULL
) {

621  
NULL
;

624 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

625 i‡(
˛
 =
NULL
) {

626  
NULL
;

629 
˛
->
buf
 = 
˘x
->buf;

630 
˛
->
√xt
 = 
NULL
;

632 *
˘x
->
œ°_out
 = 
˛
;

633 
˘x
->
œ°_out
 = &
˛
->
√xt
;

635  
˘x
->
buf
;

636 
	}
}

641 
ngx_öt_t


642 
	$ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
)

644 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

645 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

646 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

649  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

650 
	}
}

654 
	$ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

656 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
;

658 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_autoödex_loc_c⁄f_t
));

659 i‡(
c⁄f
 =
NULL
) {

660  
NULL
;

663 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

664 
c⁄f
->
loˇ…ime
 = 
NGX_CONF_UNSET
;

665 
c⁄f
->
exa˘_size
 = 
NGX_CONF_UNSET
;

667  
c⁄f
;

668 
	}
}

672 
	$ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

674 
ngx_hâp_autoödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

675 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

677 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

678 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
loˇ…ime
, 
¥ev
->localtime, 0);

679 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
exa˘_size
, 
¥ev
->exact_size, 1);

681  
NGX_CONF_OK
;

682 
	}
}

685 
ngx_öt_t


686 
	$ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
)

688 
ngx_hâp_h™dÀr_±
 *
h
;

689 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

691 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

693 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

694 i‡(
h
 =
NULL
) {

695  
NGX_ERROR
;

698 *
h
 = 
ngx_hâp_autoödex_h™dÀr
;

700  
NGX_OK
;

701 
	}
}

	@src/http/modules/ngx_http_browser_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_MODERN_BROWSER
 0

	)

21 
	#NGX_HTTP_ANCIENT_BROWSER
 1

	)

25 
u_ch¨
 
	mbrow£r
[12];

26 
size_t
 
	mskù
;

27 
size_t
 
	madd
;

28 
u_ch¨
 
	m«me
[12];

29 } 
	tngx_hâp_modîn_brow£r_mask_t
;

33 
ngx_uöt_t
 
	mvîsi⁄
;

34 
size_t
 
	mskù
;

35 
size_t
 
	madd
;

36 
u_ch¨
 
	m«me
[12];

37 } 
	tngx_hâp_modîn_brow£r_t
;

41 
ngx_°r_t
 
	m«me
;

42 
ngx_hâp_gë_v¨übÀ_±
 
	mh™dÀr
;

43 
uöçå_t
 
	md©a
;

44 } 
	tngx_hâp_brow£r_v¨übÀ_t
;

48 
ngx_¨øy_t
 *
	mmodîn_brow£rs
;

49 
ngx_¨øy_t
 *
	m™cõ¡_brow£rs
;

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mmodîn_brow£r_vÆue
;

51 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m™cõ¡_brow£r_vÆue
;

53 
	mmodîn_u∆i°ed_brow£rs
:1;

54 
	m√tsˇ≥4
:1;

55 } 
	tngx_hâp_brow£r_c⁄f_t
;

58 
ngx_öt_t
 
ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

60 
ngx_öt_t
 
ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

63 
ngx_uöt_t
 
ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_brow£r_c⁄f_t
 *
cf
);

66 
ngx_öt_t
 
ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
);

67 *
ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

68 *
ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

69 *
chûd
);

70 
ngx_libc_cde˛
 
ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
,

71 c⁄° *
two
);

72 *
ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

76 *
ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

78 *
ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

79 *
c⁄f
);

82 
ngx_comm™d_t
 
	gngx_hâp_brow£r_comm™ds
[] = {

84 { 
ngx_°rög
("modern_browser"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

86 
ngx_hâp_modîn_brow£r
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
NULL
 },

91 { 
ngx_°rög
("ancient_browser"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

93 
ngx_hâp_™cõ¡_brow£r
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

96 
NULL
 },

98 { 
ngx_°rög
("modern_browser_value"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_hâp_modîn_brow£r_vÆue
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
NULL
 },

105 { 
ngx_°rög
("ancient_browser_value"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_hâp_™cõ¡_brow£r_vÆue
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
NULL
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ_˘x
 = {

117 
ngx_hâp_brow£r_add_v¨übÀ
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
NULL
,

124 
NULL
,

126 
ngx_hâp_brow£r_¸óã_c⁄f
,

127 
ngx_hâp_brow£r_mîge_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_brow£r_moduÀ_˘x
,

134 
ngx_hâp_brow£r_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_hâp_modîn_brow£r_mask_t
 
	gngx_hâp_modîn_brow£r_masks
[] = {

221 
ngx_hâp_brow£r_v¨übÀ_t
 
	gngx_hâp_brow£rs
[] = {

222 { 
ngx_°rög
("msõ"), 
ngx_hâp_msõ_v¨übÀ
, 0 },

223 { 
ngx_°rög
("modîn_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

224 
NGX_HTTP_MODERN_BROWSER
 },

225 { 
ngx_°rög
("™cõ¡_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

226 
NGX_HTTP_ANCIENT_BROWSER
 },

227 { 
ngx_nuŒ_°rög
, 
NULL
, 0 }

231 
ngx_öt_t


232 
	$ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

233 
uöçå_t
 
d©a
)

235 
ngx_uöt_t
 
rc
;

236 
ngx_hâp_brow£r_c⁄f_t
 *
cf
;

238 
cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_brow£r_moduÀ
);

240 
rc
 = 
	`ngx_hâp_brow£r
(
r
, 
cf
);

242 i‡(
d©a
 =
NGX_HTTP_MODERN_BROWSER
 && 
rc
 == NGX_HTTP_MODERN_BROWSER) {

243 *
v
 = *
cf
->
modîn_brow£r_vÆue
;

244  
NGX_OK
;

247 i‡(
d©a
 =
NGX_HTTP_ANCIENT_BROWSER
 && 
rc
 == NGX_HTTP_ANCIENT_BROWSER) {

248 *
v
 = *
cf
->
™cõ¡_brow£r_vÆue
;

249  
NGX_OK
;

252 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

253  
NGX_OK
;

254 
	}
}

257 
ngx_uöt_t


258 
	$ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_brow£r_c⁄f_t
 *
cf
)

260 
size_t
 
Àn
;

261 
u_ch¨
 *
«me
, *
ua
, *
œ°
, 
c
;

262 
ngx_°r_t
 *
™cõ¡
;

263 
ngx_uöt_t
 
i
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

264 
ngx_hâp_modîn_brow£r_t
 *
modîn
;

266 i‡(
r
->
hódîs_ö
.
u£r_agít
 =
NULL
) {

267 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

268  
NGX_HTTP_MODERN_BROWSER
;

271  
NGX_HTTP_ANCIENT_BROWSER
;

274 
ua
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.
d©a
;

275 
Àn
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.len;

276 
œ°
 = 
ua
 + 
Àn
;

278 i‡(
cf
->
modîn_brow£rs
) {

279 
modîn
 = 
cf
->
modîn_brow£rs
->
ñts
;

281 
i
 = 0; i < 
cf
->
modîn_brow£rs
->
√…s
; i++) {

282 
«me
 = 
ua
 + 
modîn
[
i
].
skù
;

284 i‡(
«me
 >
œ°
) {

288 
«me
 = (
u_ch¨
 *Ë
	`ngx_°r°r
“ame, 
modîn
[
i
].name);

290 i‡(
«me
 =
NULL
) {

294 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

295 "brow£r: \"%s\"", 
«me
);

297 
«me
 +
modîn
[
i
].
add
;

299 i‡(
«me
 >
œ°
) {

303 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

304 "vîsi⁄: \"%ui\" \"%s\"", 
modîn
[
i
].
vîsi⁄
, 
«me
);

306 
vîsi⁄
 = 0;

307 
vî
 = 0;

308 
sˇÀ
 = 1000000;

310 
«me
 < 
œ°
) {

312 
c
 = *
«me
++;

314 i‡(
c
 >= '0' && c <= '9') {

315 
vî
 = vî * 10 + (
c
 - '0');

319 i‡(
c
 == '.') {

320 
vîsi⁄
 +
vî
 * 
sˇÀ
;

322 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

324 
modîn
[
i
].
vîsi⁄
, version);

326 i‡(
vîsi⁄
 > 
modîn
[
i
].version) {

327  
NGX_HTTP_MODERN_BROWSER
;

330 
vî
 = 0;

331 
sˇÀ
 /= 100;

338 
vîsi⁄
 +
vî
 * 
sˇÀ
;

340 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 
modîn
[
i
].
vîsi⁄
, version);

344 i‡(
vîsi⁄
 >
modîn
[
i
].version) {

345  
NGX_HTTP_MODERN_BROWSER
;

348  
NGX_HTTP_ANCIENT_BROWSER
;

351 i‡(!
cf
->
modîn_u∆i°ed_brow£rs
) {

352  
NGX_HTTP_ANCIENT_BROWSER
;

356 i‡(
cf
->
√tsˇ≥4
) {

357 i‡(
Àn
 > ("Mozilla/4.72 ") - 1

358 && 
	`ngx_°∫cmp
(
ua
, "Mozilla/", ("Mozilla/") - 1) == 0

359 && 
ua
[8] > '0' && ua[8] < '5')

361  
NGX_HTTP_ANCIENT_BROWSER
;

365 i‡(
cf
->
™cõ¡_brow£rs
) {

366 
™cõ¡
 = 
cf
->
™cõ¡_brow£rs
->
ñts
;

368 
i
 = 0; i < 
cf
->
™cõ¡_brow£rs
->
√…s
; i++) {

369 i‡(
Àn
 >
™cõ¡
[
i
].len

370 && 
	`ngx_°r°r
(
ua
, 
™cõ¡
[
i
].
d©a
Ë!
NULL
)

372  
NGX_HTTP_ANCIENT_BROWSER
;

377 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

378  
NGX_HTTP_MODERN_BROWSER
;

381  
NGX_HTTP_ANCIENT_BROWSER
;

382 
	}
}

385 
ngx_öt_t


386 
	$ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

387 
uöçå_t
 
d©a
)

389 i‡(
r
->
hódîs_ö
.
msõ
) {

390 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

391  
NGX_OK
;

394 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

395  
NGX_OK
;

396 
	}
}

399 
ngx_öt_t


400 
	$ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
)

402 
ngx_hâp_brow£r_v¨übÀ_t
 *
v¨
;

403 
ngx_hâp_v¨übÀ_t
 *
v
;

405 
v¨
 = 
ngx_hâp_brow£rs
; v¨->
«me
.
Àn
; var++) {

407 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v¨
->
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

408 i‡(
v
 =
NULL
) {

409  
NGX_ERROR
;

412 
v
->
gë_h™dÀr
 = 
v¨
->
h™dÀr
;

413 
v
->
d©a
 = 
v¨
->data;

416  
NGX_OK
;

417 
	}
}

421 
	$ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

423 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
;

425 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_brow£r_c⁄f_t
));

426 i‡(
c⁄f
 =
NULL
) {

427  
NULL
;

442  
c⁄f
;

443 
	}
}

447 
	$ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

449 
ngx_hâp_brow£r_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

450 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
 = 
chûd
;

452 
ngx_uöt_t
 
i
, 
n
;

453 
ngx_hâp_modîn_brow£r_t
 *
brow£rs
, *
›îa
;

461 i‡(
c⁄f
->
modîn_brow£rs
 =
NULL
) {

462 
c⁄f
->
modîn_brow£rs
 = 
¥ev
->modern_browsers;

465 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

467 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

468 i‡(
brow£rs
[
i
].
skù
 == 0) {

469 
found
;

478 
›îa
 = 
	`ngx_¨øy_push
(
c⁄f
->
modîn_brow£rs
);

479 i‡(
›îa
 =
NULL
) {

480  
NGX_CONF_ERROR
;

483 
›îa
->
skù
 = 0;

484 
›îa
->
vîsi⁄
 = 4001000000U;

486 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

488 
found
:

490 
	`ngx_qs‹t
(
brow£rs
, (
size_t
Ë
c⁄f
->
modîn_brow£rs
->
√…s
,

491 (
ngx_hâp_modîn_brow£r_t
),

492 
ngx_hâp_modîn_brow£r_s‹t
);

494 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

495 
n
 = 
brow£rs
[
i
].
skù
;

497 
brow£rs
[
i
].
skù
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].skip;

498 
brow£rs
[
i
].
add
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].add;

499 (Ë
	`ngx_˝y°∫
(
brow£rs
[
i
].
«me
,

500 
ngx_hâp_modîn_brow£r_masks
[
n
].
«me
, 12);

504 i‡(
c⁄f
->
™cõ¡_brow£rs
 =
NULL
) {

505 
c⁄f
->
™cõ¡_brow£rs
 = 
¥ev
->ancient_browsers;

508 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

509 
c⁄f
->
modîn_brow£r_vÆue
 = 
¥ev
->modern_browser_value;

512 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

513 
c⁄f
->
modîn_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

516 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

517 
c⁄f
->
™cõ¡_brow£r_vÆue
 = 
¥ev
->ancient_browser_value;

520 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

521 
c⁄f
->
™cõ¡_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

524  
NGX_CONF_OK
;

525 
	}
}

528 
ngx_libc_cde˛


529 
	$ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
, c⁄° *
two
)

531 
ngx_hâp_modîn_brow£r_t
 *
fú°
 = (ngx_hâp_modîn_brow£r_à*Ë
⁄e
;

532 
ngx_hâp_modîn_brow£r_t
 *
£c⁄d
 = (ngx_hâp_modîn_brow£r_à*Ë
two
;

534  (
fú°
->
skù
 - 
£c⁄d
->skip);

535 
	}
}

539 
	$ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

541 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

543 
u_ch¨
 
c
;

544 
ngx_°r_t
 *
vÆue
;

545 
ngx_uöt_t
 
i
, 
n
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

546 
ngx_hâp_modîn_brow£r_t
 *
brow£r
;

547 
ngx_hâp_modîn_brow£r_mask_t
 *
mask
;

549 
vÆue
 = 
cf
->
¨gs
->
ñts
;

551 i‡(
cf
->
¨gs
->
√…s
 == 2) {

552 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unlisted") == 0) {

553 
bcf
->
modîn_u∆i°ed_brow£rs
 = 1;

554  
NGX_CONF_OK
;

557  
NGX_CONF_ERROR
;

560 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

561 
bcf
->
modîn_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 5,

562 (
ngx_hâp_modîn_brow£r_t
));

563 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

564  
NGX_CONF_ERROR
;

568 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
modîn_brow£rs
);

569 i‡(
brow£r
 =
NULL
) {

570  
NGX_CONF_ERROR
;

573 
mask
 = 
ngx_hâp_modîn_brow£r_masks
;

575 
n
 = 0; 
mask
[n].
brow£r
[0] != '\0';Ç++) {

576 i‡(
	`ngx_°rˇ£cmp
(
mask
[
n
].
brow£r
, 
vÆue
[1].
d©a
) == 0) {

577 
found
;

581 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

582 "unknow¿brow£∏«mê\"%V\"", &
vÆue
[1]);

584  
NGX_CONF_ERROR
;

586 
found
:

594 
brow£r
->
skù
 = 
n
;

596 
vîsi⁄
 = 0;

597 
vî
 = 0;

598 
sˇÀ
 = 1000000;

600 
i
 = 0; i < 
vÆue
[2].
Àn
; i++) {

602 
c
 = 
vÆue
[2].
d©a
[
i
];

604 i‡(
c
 >= '0' && c <= '9') {

605 
vî
 = vî * 10 + (
c
 - '0');

609 i‡(
c
 == '.') {

610 
vîsi⁄
 +
vî
 * 
sˇÀ
;

611 
vî
 = 0;

612 
sˇÀ
 /= 100;

616 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

617 "övÆid brow£∏vîsi⁄ \"%V\"", &
vÆue
[2]);

619  
NGX_CONF_ERROR
;

622 
vîsi⁄
 +
vî
 * 
sˇÀ
;

624 
brow£r
->
vîsi⁄
 = version;

626  
NGX_CONF_OK
;

627 
	}
}

631 
	$ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

633 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

635 
ngx_°r_t
 *
vÆue
, *
brow£r
;

636 
ngx_uöt_t
 
i
;

638 
vÆue
 = 
cf
->
¨gs
->
ñts
;

640 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

641 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "netscape4") == 0) {

642 
bcf
->
√tsˇ≥4
 = 1;

646 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

647 
bcf
->
™cõ¡_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

648 (
ngx_°r_t
));

649 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

650  
NGX_CONF_ERROR
;

654 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
™cõ¡_brow£rs
);

655 i‡(
brow£r
 =
NULL
) {

656  
NGX_CONF_ERROR
;

659 *
brow£r
 = 
vÆue
[
i
];

662  
NGX_CONF_OK
;

663 
	}
}

667 
	$ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

669 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

671 
ngx_°r_t
 *
vÆue
;

673 
bcf
->
modîn_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

674 (
ngx_hâp_v¨übÀ_vÆue_t
));

675 i‡(
bcf
->
modîn_brow£r_vÆue
 =
NULL
) {

676  
NGX_CONF_ERROR
;

679 
vÆue
 = 
cf
->
¨gs
->
ñts
;

681 
bcf
->
modîn_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

682 
bcf
->
modîn_brow£r_vÆue
->
vÆid
 = 1;

683 
bcf
->
modîn_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

684 
bcf
->
modîn_brow£r_vÆue
->
nŸ_found
 = 0;

685 
bcf
->
modîn_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

687  
NGX_CONF_OK
;

688 
	}
}

692 
	$ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

694 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

696 
ngx_°r_t
 *
vÆue
;

698 
bcf
->
™cõ¡_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

699 (
ngx_hâp_v¨übÀ_vÆue_t
));

700 i‡(
bcf
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

701  
NGX_CONF_ERROR
;

704 
vÆue
 = 
cf
->
¨gs
->
ñts
;

706 
bcf
->
™cõ¡_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

707 
bcf
->
™cõ¡_brow£r_vÆue
->
vÆid
 = 1;

708 
bcf
->
™cõ¡_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

709 
bcf
->
™cõ¡_brow£r_vÆue
->
nŸ_found
 = 0;

710 
bcf
->
™cõ¡_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

712  
NGX_CONF_OK
;

713 
	}
}

	@src/http/modules/ngx_http_charset_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_CHARSET_OFF
 -2

	)

14 
	#NGX_HTTP_NO_CHARSET
 -3

	)

15 
	#NGX_HTTP_CHARSET_VAR
 0x10000

	)

18 
	#NGX_UTF_LEN
 4

	)

20 
	#NGX_HTML_ENTITY_LEN
 (("&#1114111;"Ë- 1)

	)

24 
u_ch¨
 **
	mèbÀs
;

25 
ngx_°r_t
 
	m«me
;

27 
	mÀngth
:16;

28 
	mutf8
:1;

29 } 
	tngx_hâp_ch¨£t_t
;

33 
ngx_öt_t
 
	m§c
;

34 
ngx_öt_t
 
	md°
;

35 } 
	tngx_hâp_ch¨£t_ªcode_t
;

39 
ngx_öt_t
 
	m§c
;

40 
ngx_öt_t
 
	md°
;

41 
u_ch¨
 *
	m§c2d°
;

42 
u_ch¨
 *
	md°2§c
;

43 } 
	tngx_hâp_ch¨£t_èbÀs_t
;

47 
ngx_¨øy_t
 
	mch¨£ts
;

48 
ngx_¨øy_t
 
	mèbÀs
;

49 
ngx_¨øy_t
 
	mªcodes
;

50 } 
	tngx_hâp_ch¨£t_maö_c⁄f_t
;

54 
ngx_öt_t
 
	mch¨£t
;

55 
ngx_öt_t
 
	msour˚_ch¨£t
;

56 
ngx_Êag_t
 
	movîride_ch¨£t
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 } 
	tngx_hâp_ch¨£t_loc_c⁄f_t
;

64 
u_ch¨
 *
	mèbÀ
;

65 
ngx_öt_t
 
	mch¨£t
;

66 
ngx_°r_t
 
	mch¨£t_«me
;

68 
ngx_chaö_t
 *
	mbusy
;

69 
ngx_chaö_t
 *
	m‰ì_bufs
;

70 
ngx_chaö_t
 *
	m‰ì_buf„rs
;

72 
size_t
 
	mßved_Àn
;

73 
u_ch¨
 
	mßved
[
NGX_UTF_LEN
];

75 
	mÀngth
:16;

76 
	m‰om_utf8
:1;

77 
	mto_utf8
:1;

78 } 
	tngx_hâp_ch¨£t_˘x_t
;

82 
ngx_hâp_ch¨£t_èbÀs_t
 *
	mèbÀ
;

83 
ngx_hâp_ch¨£t_t
 *
	mch¨£t
;

84 
ngx_uöt_t
 
	mch¨a˘îs
;

85 } 
	tngx_hâp_ch¨£t_c⁄f_˘x_t
;

88 
ngx_öt_t
 
ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_°r_t
 *
«me
);

90 
ngx_öt_t
 
ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_°r_t
 *
«me
);

92 
ngx_öt_t
 
ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_°r_t
 *
«me
);

94 
ngx_öt_t
 
ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

95 
ngx_ölöe
 
ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_°r_t
 *
ch¨£t
);

97 
ngx_öt_t
 
ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
, 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
);

99 
ngx_uöt_t
 
ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
);

100 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

101 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

102 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

103 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

105 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
,

106 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

107 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
,

108 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
, 
size_t
 
size
);

110 *
ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

111 *
c⁄f
);

112 *
ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

113 *
c⁄f
);

115 *
ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

116 *
c⁄f
);

117 
ngx_öt_t
 
ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
);

119 *
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

120 *
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

121 *
ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

122 *
∑ª¡
, *
chûd
);

123 
ngx_öt_t
 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

126 
ngx_°r_t
 
	gngx_hâp_ch¨£t_deÁu…_ty≥s
[] = {

127 
ngx_°rög
("text/html"),

128 
ngx_°rög
("text/xml"),

129 
ngx_°rög
("text/plain"),

130 
ngx_°rög
("text/vnd.wap.wml"),

131 
ngx_°rög
("application/x-javascript"),

132 
ngx_°rög
("application/rss+xml"),

133 
ngx_nuŒ_°rög


137 
ngx_comm™d_t
 
	gngx_hâp_ch¨£t_fûãr_comm™ds
[] = {

139 { 
ngx_°rög
("charset"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


141 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

142 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
),

145 
NULL
 },

147 { 
ngx_°rög
("source_charset"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


149 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
sour˚_ch¨£t
),

153 
NULL
 },

155 { 
ngx_°rög
("override_charset"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


157 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

158 
ngx_c⁄f_£t_Êag_¶Ÿ
,

159 
NGX_HTTP_LOC_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ovîride_ch¨£t
),

161 
NULL
 },

163 { 
ngx_°rög
("charset_types"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

165 
ngx_hâp_ty≥s_¶Ÿ
,

166 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ty≥s_keys
),

168 &
ngx_hâp_ch¨£t_deÁu…_ty≥s
[0] },

170 { 
ngx_°rög
("charset_map"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

172 
ngx_hâp_ch¨£t_m≠_block
,

173 
NGX_HTTP_MAIN_CONF_OFFSET
,

175 
NULL
 },

177 
ngx_nuŒ_comm™d


181 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ_˘x
 = {

182 
NULL
,

183 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
,

185 
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
,

186 
NULL
,

188 
NULL
,

189 
NULL
,

191 
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
,

192 
ngx_hâp_ch¨£t_mîge_loc_c⁄f


196 
ngx_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ
 = {

197 
NGX_MODULE_V1
,

198 &
ngx_hâp_ch¨£t_fûãr_moduÀ_˘x
,

199 
ngx_hâp_ch¨£t_fûãr_comm™ds
,

200 
NGX_HTTP_MODULE
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NGX_MODULE_V1_PADDING


212 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

213 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

216 
ngx_öt_t


217 
	$ngx_hâp_ch¨£t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

219 
ngx_öt_t
 
ch¨£t
, 
sour˚_ch¨£t
;

220 
ngx_°r_t
 
d°
, 
§c
;

221 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

222 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

224 i‡(
r
 =r->
maö
) {

225 
ch¨£t
 = 
	`ngx_hâp_de°ö©i⁄_ch¨£t
(
r
, &
d°
);

228 
ch¨£t
 = 
	`ngx_hâp_maö_ªque°_ch¨£t
(
r
, &
d°
);

231 i‡(
ch¨£t
 =
NGX_ERROR
) {

232  
NGX_ERROR
;

235 i‡(
ch¨£t
 =
NGX_DECLINED
) {

236  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

241 
sour˚_ch¨£t
 = 
	`ngx_hâp_sour˚_ch¨£t
(
r
, &
§c
);

243 i‡(
sour˚_ch¨£t
 =
NGX_ERROR
) {

244  
NGX_ERROR
;

252 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

253 "ch¨£t: \"%V\" > \"%V\"", &
§c
, &
d°
);

255 i‡(
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

256 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

258  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

261 i‡(
ch¨£t
 =
NGX_HTTP_NO_CHARSET


262 || 
sour˚_ch¨£t
 =
NGX_HTTP_NO_CHARSET
)

264 i‡(
sour˚_ch¨£t
 !
ch¨£t


265 || 
	`ngx_°∫ˇ£cmp
(
d°
.
d©a
, 
§c
.d©a, d°.
Àn
) != 0)

267 
no_ch¨£t_m≠
;

270 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

272  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

275 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

276 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

278 i‡(
sour˚_ch¨£t
 !
ch¨£t


279 && (
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
 =
NULL


280 || 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
] =
NULL
))

282 
no_ch¨£t_m≠
;

285 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥_Àn
;

287 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

289 i‡(
sour˚_ch¨£t
 !
ch¨£t
) {

290  
	`ngx_hâp_ch¨£t_˘x
(
r
, 
ch¨£ts
, 
ch¨£t
, 
sour˚_ch¨£t
);

293  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

295 
no_ch¨£t_m≠
:

297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

299 &
§c
, &
d°
);

301  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

302 
	}
}

305 
ngx_öt_t


306 
	$ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

308 
ngx_öt_t
 
ch¨£t
;

309 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

310 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

311 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
mlcf
;

312 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

314 i‡(!
r
->
ign‹e_c⁄ã¡_ícodög


315 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög


316 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

318  
NGX_DECLINED
;

321 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

322  
NGX_DECLINED
;

325 i‡(
r
->
hódîs_out
.
ovîride_ch¨£t


326 && 
r
->
hódîs_out
.
ovîride_ch¨£t
->
Àn
)

328 *
«me
 = *
r
->
hódîs_out
.
ovîride_ch¨£t
;

330 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

332 i‡(
ch¨£t
 !
NGX_HTTP_NO_CHARSET
) {

333  
ch¨£t
;

336 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

337 "unknow¿ch¨£à\"%V\"Åÿovîride", 
«me
);

339  
NGX_DECLINED
;

342 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

343 
ch¨£t
 = 
mlcf
->charset;

345 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

346  
NGX_DECLINED
;

349 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

350 i‡(
mlcf
->
ovîride_ch¨£t
 == 0) {

351  
NGX_DECLINED
;

355 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
mlcf
->
ty≥s
Ë=
NULL
) {

356  
NGX_DECLINED
;

360 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

361 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

362 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

363 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

364  
ch¨£t
;

367 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

369 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

370  
NGX_ERROR
;

373 
«me
->
Àn
 = 
vv
->len;

374 
«me
->
d©a
 = 
vv
->data;

376  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

377 
	}
}

380 
ngx_öt_t


381 
	$ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
§c
)

383 
ngx_öt_t
 
ch¨£t
;

384 
ngx_°r_t
 *
maö_ch¨£t
;

385 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

387 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

389 i‡(
˘x
) {

390 *
§c
 = 
˘x
->
ch¨£t_«me
;

391  
˘x
->
ch¨£t
;

394 
maö_ch¨£t
 = &
r
->
maö
->
hódîs_out
.
ch¨£t
;

396 i‡(
maö_ch¨£t
->
Àn
 == 0) {

397  
NGX_DECLINED
;

400 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

401 i‡(
˘x
 =
NULL
) {

402  
NGX_ERROR
;

405 
	`ngx_hâp_£t_˘x
(
r
->
maö
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

407 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
maö_ch¨£t
);

409 
˘x
->
ch¨£t
 = charset;

410 
˘x
->
ch¨£t_«me
 = *
maö_ch¨£t
;

411 *
§c
 = *
maö_ch¨£t
;

413  
ch¨£t
;

414 
	}
}

417 
ngx_öt_t


418 
	$ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

420 
ngx_öt_t
 
ch¨£t
;

421 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

422 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

423 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

424 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

426 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

427 *
«me
 = 
r
->
hódîs_out
.
ch¨£t
;

428  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

431 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

433 
ch¨£t
 = 
lcf
->
sour˚_ch¨£t
;

435 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

436 
«me
->
Àn
 = 0;

437  
ch¨£t
;

440 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

441 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

442 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

443 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

444  
ch¨£t
;

447 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

449 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

450  
NGX_ERROR
;

453 
«me
->
Àn
 = 
vv
->len;

454 
«me
->
d©a
 = 
vv
->data;

456  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

457 
	}
}

460 
ngx_öt_t


461 
	$ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

463 
ngx_uöt_t
 
i
, 
n
;

464 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

465 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

467 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

469 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

470 
n
 = 
mcf
->
ch¨£ts
.
√…s
;

472 
i
 = 0; i < 
n
; i++) {

473 i‡(
ch¨£t
[
i
].
«me
.
Àn
 !=Çame->len) {

477 i‡(
	`ngx_°∫ˇ£cmp
(
ch¨£t
[
i
].
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0) {

478  
i
;

482  
NGX_HTTP_NO_CHARSET
;

483 
	}
}

486 
ngx_ölöe
 

487 
	$ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ch¨£t
)

489 i‡(
r
 !r->
maö
) {

493 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


494 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY
)

501 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

505 
r
->
hódîs_out
.
ch¨£t
 = *charset;

506 
	}
}

509 
ngx_öt_t


510 
	$ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
,

511 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
)

513 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

515 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

516 i‡(
˘x
 =
NULL
) {

517  
NGX_ERROR
;

520 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

522 
˘x
->
èbÀ
 = 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
];

523 
˘x
->
ch¨£t
 = charset;

524 
˘x
->
ch¨£t_«me
 = 
ch¨£ts
[
ch¨£t
].
«me
;

525 
˘x
->
Àngth
 = 
ch¨£ts
[
ch¨£t
].length;

526 
˘x
->
‰om_utf8
 = 
ch¨£ts
[
sour˚_ch¨£t
].
utf8
;

527 
˘x
->
to_utf8
 = 
ch¨£ts
[
ch¨£t
].
utf8
;

529 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

531 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë&& 
r
 =r->
maö
) {

532 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

535 
r
->
fûãr_√ed_ãmp‹¨y
 = 1;

538  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

539 
	}
}

542 
ngx_öt_t


543 
	$ngx_hâp_ch¨£t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

545 
ngx_öt_t
 
rc
;

546 
ngx_buf_t
 *
b
;

547 
ngx_chaö_t
 *
˛
, *
out
, **
Œ
;

548 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

550 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

552 i‡(
˘x
 =
NULL
 || ctx->
èbÀ
 == NULL) {

553  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

556 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë|| ctx->
busy
) {

558 
out
 = 
NULL
;

559 
Œ
 = &
out
;

561 
˛
 = 
ö
; cl; c»˛->
√xt
) {

562 
b
 = 
˛
->
buf
;

564 i‡(
	`ngx_buf_size
(
b
) == 0) {

566 *
Œ
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

567 i‡(*
Œ
 =
NULL
) {

568  
NGX_ERROR
;

571 (*
Œ
)->
buf
 = 
b
;

572 (*
Œ
)->
√xt
 = 
NULL
;

574 
Œ
 = &(*Œ)->
√xt
;

579 i‡(
˘x
->
to_utf8
) {

580 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_to_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

583 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

586 i‡(*
Œ
 =
NULL
) {

587  
NGX_ERROR
;

590 *
Œ
) {

591 
Œ
 = &(*Œ)->
√xt
;

595 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

597 i‡(
out
) {

598 i‡(
˘x
->
busy
 =
NULL
) {

599 
˘x
->
busy
 = 
out
;

602 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

603 
˛
->
√xt
 = 
out
;

607 
˘x
->
busy
) {

609 
˛
 = 
˘x
->
busy
;

610 
b
 = 
˛
->
buf
;

612 i‡(
	`ngx_buf_size
(
b
) != 0) {

616 
˘x
->
busy
 = 
˛
->
√xt
;

618 i‡(
b
->
èg
 !(
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
) {

622 i‡(
b
->
shadow
) {

623 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

626 i‡(
b
->
pos
) {

627 
˛
->
√xt
 = 
˘x
->
‰ì_buf„rs
;

628 
˘x
->
‰ì_buf„rs
 = 
˛
;

632 
˛
->
√xt
 = 
˘x
->
‰ì_bufs
;

633 
˘x
->
‰ì_bufs
 = 
˛
;

636  
rc
;

639 
˛
 = 
ö
; cl; c»˛->
√xt
) {

640 (Ë
	`ngx_hâp_ch¨£t_ªcode
(
˛
->
buf
, 
˘x
->
èbÀ
);

643  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

644 
	}
}

647 
ngx_uöt_t


648 
	$ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
)

650 
u_ch¨
 *
p
, *
œ°
;

652 
œ°
 = 
b
->last;

654 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

656 i‡(*
p
 !
èbÀ
[*p]) {

657 
ªcode
;

663 
ªcode
:

666 i‡(*
p
 !
èbÀ
[*p]) {

667 *
p
 = 
èbÀ
[*p];

670 
p
++;

672 } 
p
 < 
œ°
);

674 
b
->
ö_fûe
 = 0;

677 
	}
}

680 
ngx_chaö_t
 *

681 
	$ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

682 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

684 
size_t
 
Àn
, 
size
;

685 
u_ch¨
 
c
, *
p
, *
§c
, *
d°
, *
ßved
, **
èbÀ
;

686 
uöt32_t
 
n
;

687 
ngx_buf_t
 *
b
;

688 
ngx_uöt_t
 
i
;

689 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

691 
§c
 = 
buf
->
pos
;

693 i‡(
˘x
->
ßved_Àn
 == 0) {

695  ; 
§c
 < 
buf
->
œ°
; src++) {

697 i‡(*
§c
 < 0x80) {

701 
Àn
 = 
§c
 - 
buf
->
pos
;

703 i‡(
Àn
 > 512) {

704 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

705 i‡(
out
 =
NULL
) {

706  
NULL
;

709 
b
 = 
out
->
buf
;

711 
b
->
ãmp‹¨y
 = 
buf
->temporary;

712 
b
->
mem‹y
 = 
buf
->memory;

713 
b
->
mm≠
 = 
buf
->mmap;

714 
b
->
Êush
 = 
buf
->flush;

716 
b
->
pos
 = 
buf
->pos;

717 
b
->
œ°
 = 
§c
;

719 
out
->
buf
 = 
b
;

720 
out
->
√xt
 = 
NULL
;

722 
size
 = 
buf
->
œ°
 - 
§c
;

724 
ßved
 = 
§c
;

725 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
size
);

727 i‡(
n
 == 0xfffffffe) {

730 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
size
);

731 
˘x
->
ßved_Àn
 = 
size
;

733 
b
->
shadow
 = 
buf
;

735  
out
;

739 
out
 = 
NULL
;

740 
size
 = 
Àn
 + 
buf
->
œ°
 - 
§c
;

741 
§c
 = 
buf
->
pos
;

744 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

745 
size
 +
NGX_HTML_ENTITY_LEN
;

748 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

749 i‡(
˛
 =
NULL
) {

750  
NULL
;

753 i‡(
out
) {

754 
out
->
√xt
 = 
˛
;

757 
out
 = 
˛
;

760 
b
 = 
˛
->
buf
;

761 
d°
 = 
b
->
pos
;

763 
ªcode
;

766 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

767 i‡(
out
 =
NULL
) {

768  
NULL
;

771 
out
->
buf
 = buf;

772 
out
->
√xt
 = 
NULL
;

774  
out
;

779 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

780 "hâ∞ch¨£àut‡ßved: %z", 
˘x
->
ßved_Àn
);

782 
p
 = 
§c
;

784 
i
 = 
˘x
->
ßved_Àn
; i < 
NGX_UTF_LEN
; i++) {

785 
˘x
->
ßved
[
i
] = *
p
++;

787 i‡(
p
 =
buf
->
œ°
) {

792 
ßved
 = 
˘x
->saved;

793 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
i
);

795 
c
 = '\0';

797 i‡(
n
 < 0x10000) {

798 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

799 
p
 = 
èbÀ
[
n
 >> 8];

801 i‡(
p
) {

802 
c
 = 
p
[
n
 & 0xff];

805 } i‡(
n
 == 0xfffffffe) {

809 i‡(
i
 < 
NGX_UTF_LEN
) {

810 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

811 i‡(
out
 =
NULL
) {

812  
NULL
;

815 
b
 = 
out
->
buf
;

817 
b
->
pos
 = 
buf
->pos;

818 
b
->
œ°
 = 
buf
->last;

819 
b
->
sync
 = 1;

820 
b
->
shadow
 = 
buf
;

822 
	`ngx_mem˝y
(&
˘x
->
ßved
[˘x->
ßved_Àn
], 
§c
, 
i
);

823 
˘x
->
ßved_Àn
 +
i
;

825  
out
;

829 
size
 = 
buf
->
œ°
 - buf->
pos
;

831 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

832 
size
 +
NGX_HTML_ENTITY_LEN
;

835 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

836 i‡(
˛
 =
NULL
) {

837  
NULL
;

840 
out
 = 
˛
;

842 
b
 = 
˛
->
buf
;

843 
d°
 = 
b
->
pos
;

845 i‡(
c
) {

846 *
d°
++ = 
c
;

848 } i‡(
n
 == 0xfffffffe) {

849 *
d°
++ = '?';

851 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

854 
ßved
 = &
˘x
->ßved[
NGX_UTF_LEN
];

856 } i‡(
n
 > 0x10ffff) {

857 *
d°
++ = '?';

859 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

863 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

866 
§c
 +(
ßved
 - 
˘x
->ßvedË- ctx->
ßved_Àn
;

867 
˘x
->
ßved_Àn
 = 0;

869 
ªcode
:

871 
Œ
 = &
˛
->
√xt
;

873 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

875 
§c
 < 
buf
->
œ°
) {

877 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
NGX_HTML_ENTITY_LEN
) {

878 
b
->
œ°
 = 
d°
;

880 
size
 = 
buf
->
œ°
 - 
§c
 + 
NGX_HTML_ENTITY_LEN
;

882 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

883 i‡(
˛
 =
NULL
) {

884  
NULL
;

887 *
Œ
 = 
˛
;

888 
Œ
 = &
˛
->
√xt
;

890 
b
 = 
˛
->
buf
;

891 
d°
 = 
b
->
pos
;

894 i‡(*
§c
 < 0x80) {

895 *
d°
++ = *
§c
++;

899 
Àn
 = 
buf
->
œ°
 - 
§c
;

901 
n
 = 
	`ngx_utf8_decode
(&
§c
, 
Àn
);

903 i‡(
n
 < 0x10000) {

905 
p
 = 
èbÀ
[
n
 >> 8];

907 i‡(
p
) {

908 
c
 = 
p
[
n
 & 0xff];

910 i‡(
c
) {

911 *
d°
++ = 
c
;

916 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

921 i‡(
n
 == 0xfffffffe) {

924 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
Àn
);

925 
˘x
->
ßved_Àn
 = 
Àn
;

927 i‡(
b
->
pos
 =
d°
) {

928 
b
->
sync
 = 1;

929 
b
->
ãmp‹¨y
 = 0;

935 i‡(
n
 > 0x10ffff) {

936 *
d°
++ = '?';

938 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

946 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

949 
b
->
œ°
 = 
d°
;

951 
b
->
œ°_buf
 = 
buf
->last_buf;

952 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

953 
b
->
Êush
 = 
buf
->flush;

955 
b
->
shadow
 = 
buf
;

957  
out
;

958 
	}
}

961 
ngx_chaö_t
 *

962 
	$ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

963 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

965 
size_t
 
Àn
, 
size
;

966 
u_ch¨
 *
p
, *
§c
, *
d°
, *
èbÀ
;

967 
ngx_buf_t
 *
b
;

968 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

970 
èbÀ
 = 
˘x
->table;

972 
§c
 = 
buf
->
pos
; sr¯< buf->
œ°
; src++) {

973 i‡(
èbÀ
[*
§c
 * 
NGX_UTF_LEN
] == '\1') {

977 
ªcode
;

980 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

981 i‡(
out
 =
NULL
) {

982  
NULL
;

985 
out
->
buf
 = buf;

986 
out
->
√xt
 = 
NULL
;

988  
out
;

990 
ªcode
:

997 
Àn
 = 
§c
 - 
buf
->
pos
;

999 i‡(
Àn
 > 512) {

1000 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

1001 i‡(
out
 =
NULL
) {

1002  
NULL
;

1005 
b
 = 
out
->
buf
;

1007 
b
->
ãmp‹¨y
 = 
buf
->temporary;

1008 
b
->
mem‹y
 = 
buf
->memory;

1009 
b
->
mm≠
 = 
buf
->mmap;

1010 
b
->
Êush
 = 
buf
->flush;

1012 
b
->
pos
 = 
buf
->pos;

1013 
b
->
œ°
 = 
§c
;

1015 
out
->
buf
 = 
b
;

1016 
out
->
√xt
 = 
NULL
;

1018 
size
 = 
buf
->
œ°
 - 
§c
;

1019 
size
 = sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1022 
out
 = 
NULL
;

1024 
size
 = 
buf
->
œ°
 - 
§c
;

1025 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1027 
§c
 = 
buf
->
pos
;

1030 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1031 i‡(
˛
 =
NULL
) {

1032  
NULL
;

1035 i‡(
out
) {

1036 
out
->
√xt
 = 
˛
;

1039 
out
 = 
˛
;

1042 
Œ
 = &
˛
->
√xt
;

1044 
b
 = 
˛
->
buf
;

1045 
d°
 = 
b
->
pos
;

1047 
§c
 < 
buf
->
œ°
) {

1049 
p
 = &
èbÀ
[*
§c
++ * 
NGX_UTF_LEN
];

1050 
Àn
 = *
p
++;

1052 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
Àn
) {

1053 
b
->
œ°
 = 
d°
;

1055 
size
 = 
buf
->
œ°
 - 
§c
;

1056 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1058 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1059 i‡(
˛
 =
NULL
) {

1060  
NULL
;

1063 *
Œ
 = 
˛
;

1064 
Œ
 = &
˛
->
√xt
;

1066 
b
 = 
˛
->
buf
;

1067 
d°
 = 
b
->
pos
;

1070 
Àn
) {

1071 *
d°
++ = *
p
++;

1072 
Àn
--;

1076 
b
->
œ°
 = 
d°
;

1078 
b
->
œ°_buf
 = 
buf
->last_buf;

1079 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

1080 
b
->
Êush
 = 
buf
->flush;

1082 
b
->
shadow
 = 
buf
;

1084  
out
;

1085 
	}
}

1088 
ngx_chaö_t
 *

1089 
	$ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

1091 
ngx_chaö_t
 *
˛
;

1093 
˛
 = 
˘x
->
‰ì_bufs
;

1095 i‡(
˛
) {

1096 
˘x
->
‰ì_bufs
 = 
˛
->
√xt
;

1098 
˛
->
buf
->
shadow
 = 
NULL
;

1099 
˛
->
√xt
 = 
NULL
;

1101  
˛
;

1104 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1105 i‡(
˛
 =
NULL
) {

1106  
NULL
;

1109 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

1110 i‡(
˛
->
buf
 =
NULL
) {

1111  
NULL
;

1114 
˛
->
√xt
 = 
NULL
;

1116 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1118  
˛
;

1119 
	}
}

1122 
ngx_chaö_t
 *

1123 
	$ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
,

1124 
size_t
 
size
)

1126 
ngx_buf_t
 *
b
;

1127 
ngx_chaö_t
 *
˛
, **
Œ
;

1129 
Œ
 = &
˘x
->
‰ì_buf„rs
, 
˛
 = ctx->free_buffers;

1130 
˛
;

1131 
Œ
 = &
˛
->
√xt
, cl = cl->next)

1133 
b
 = 
˛
->
buf
;

1135 i‡((
size_t
Ë(
b
->
íd
 - b->
°¨t
Ë>
size
) {

1136 *
Œ
 = 
˛
->
√xt
;

1137 
˛
->
√xt
 = 
NULL
;

1139 
b
->
pos
 = b->
°¨t
;

1140 
b
->
ãmp‹¨y
 = 1;

1141 
b
->
shadow
 = 
NULL
;

1143  
˛
;

1147 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1148 i‡(
˛
 =
NULL
) {

1149  
NULL
;

1152 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
size
);

1153 i‡(
˛
->
buf
 =
NULL
) {

1154  
NULL
;

1157 
˛
->
√xt
 = 
NULL
;

1159 
˛
->
buf
->
ãmp‹¨y
 = 1;

1160 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1162  
˛
;

1163 
	}
}

1167 
	$ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1169 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
 = 
c⁄f
;

1171 *
rv
;

1172 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1173 
ngx_öt_t
 
§c
, 
d°
;

1174 
ngx_uöt_t
 
i
, 
n
;

1175 
ngx_°r_t
 *
vÆue
;

1176 
ngx_c⁄f_t
 
pvcf
;

1177 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1178 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1179 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 
˘x
;

1181 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1183 
§c
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1184 i‡(
§c
 =
NGX_ERROR
) {

1185  
NGX_CONF_ERROR
;

1188 
d°
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[2]);

1189 i‡(
d°
 =
NGX_ERROR
) {

1190  
NGX_CONF_ERROR
;

1193 i‡(
§c
 =
d°
) {

1194 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1196 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1197  
NGX_CONF_ERROR
;

1200 
èbÀ
 = 
mcf
->
èbÀs
.
ñts
;

1201 
i
 = 0; i < 
mcf
->
èbÀs
.
√…s
; i++) {

1202 i‡((
§c
 =
èbÀ
->§¯&& 
d°
 ==Åable->dst)

1203 || (
§c
 =
èbÀ
->
d°
 && dst ==Åable->src))

1205 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1207 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1208  
NGX_CONF_ERROR
;

1212 
èbÀ
 = 
	`ngx_¨øy_push
(&
mcf
->
èbÀs
);

1213 i‡(
èbÀ
 =
NULL
) {

1214  
NGX_CONF_ERROR
;

1217 
èbÀ
->
§c
 = src;

1218 
èbÀ
->
d°
 = dst;

1220 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[2].
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1221 
èbÀ
->
§c2d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * 
NGX_UTF_LEN
);

1222 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1223  
NGX_CONF_ERROR
;

1226 
èbÀ
->
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * (*));

1227 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1228  
NGX_CONF_ERROR
;

1231 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1232 i‡(
d°2§c
 =
NULL
) {

1233  
NGX_CONF_ERROR
;

1236 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1237 
µ
[0] = 
d°2§c
;

1239 
i
 = 0; i < 128; i++) {

1240 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1241 
p
[0] = '\1';

1242 
p
[1] = (
u_ch¨
Ë
i
;

1243 
d°2§c
[
i
] = (
u_ch¨
) i;

1246  ; 
i
 < 256; i++) {

1247 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1248 
p
[0] = '\1';

1249 
p
[1] = '?';

1253 
èbÀ
->
§c2d°
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1254 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1255  
NGX_CONF_ERROR
;

1258 
èbÀ
->
d°2§c
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1259 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1260  
NGX_CONF_ERROR
;

1263 
i
 = 0; i < 128; i++) {

1264 
èbÀ
->
§c2d°
[
i
] = (
u_ch¨
) i;

1265 
èbÀ
->
d°2§c
[
i
] = (
u_ch¨
) i;

1268  ; 
i
 < 256; i++) {

1269 
èbÀ
->
§c2d°
[
i
] = '?';

1270 
èbÀ
->
d°2§c
[
i
] = '?';

1274 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1276 
˘x
.
èbÀ
 =Åable;

1277 
˘x
.
ch¨£t
 = &ch¨£t[
d°
];

1278 
˘x
.
ch¨a˘îs
 = 0;

1280 
pvcf
 = *
cf
;

1281 
cf
->
˘x
 = &ctx;

1282 
cf
->
h™dÀr
 = 
ngx_hâp_ch¨£t_m≠
;

1283 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

1285 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

1287 *
cf
 = 
pvcf
;

1289 i‡(
˘x
.
ch¨a˘îs
) {

1290 
n
 = 
˘x
.
ch¨£t
->
Àngth
;

1291 
˘x
.
ch¨£t
->
Àngth
 /˘x.
ch¨a˘îs
;

1293 i‡(((
n
 * 10Ë/ 
˘x
.
ch¨a˘îs
) % 10 > 4) {

1294 
˘x
.
ch¨£t
->
Àngth
++;

1298  
rv
;

1299 
	}
}

1303 
	$ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

1305 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1306 
uöt32_t
 
n
;

1307 
ngx_öt_t
 
§c
, 
d°
;

1308 
ngx_°r_t
 *
vÆue
;

1309 
ngx_uöt_t
 
i
;

1310 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1311 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 *
˘x
;

1313 i‡(
cf
->
¨gs
->
√…s
 != 2) {

1314 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarametersÇumber");

1315  
NGX_CONF_ERROR
;

1318 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1320 
§c
 = 
	`ngx_hextoi
(
vÆue
[0].
d©a
, vÆue[0].
Àn
);

1321 i‡(
§c
 =
NGX_ERROR
 || src > 255) {

1322 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1323 "övÆid vÆuê\"%V\"", &
vÆue
[0]);

1324  
NGX_CONF_ERROR
;

1327 
˘x
 = 
cf
->ctx;

1328 
èbÀ
 = 
˘x
->table;

1330 i‡(
˘x
->
ch¨£t
->
utf8
) {

1331 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
];

1333 *
p
++ = (
u_ch¨
Ë(
vÆue
[1].
Àn
 / 2);

1335 
i
 = 0; i < 
vÆue
[1].
Àn
; i += 2) {

1336 
d°
 = 
	`ngx_hextoi
(&
vÆue
[1].
d©a
[
i
], 2);

1337 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1338 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1339 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1340  
NGX_CONF_ERROR
;

1343 *
p
++ = (
u_ch¨
Ë
d°
;

1346 
i
 /= 2;

1348 
˘x
->
ch¨£t
->
Àngth
 +
i
;

1349 
˘x
->
ch¨a˘îs
++;

1351 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
] + 1;

1353 
n
 = 
	`ngx_utf8_decode
(&
p
, 
i
);

1355 i‡(
n
 > 0xffff) {

1356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1357 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1358  
NGX_CONF_ERROR
;

1361 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1363 
d°2§c
 = 
µ
[
n
 >> 8];

1365 i‡(
d°2§c
 =
NULL
) {

1366 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1367 i‡(
d°2§c
 =
NULL
) {

1368  
NGX_CONF_ERROR
;

1371 
µ
[
n
 >> 8] = 
d°2§c
;

1374 
d°2§c
[
n
 & 0xff] = (
u_ch¨
Ë
§c
;

1377 
d°
 = 
	`ngx_hextoi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1378 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1379 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1380 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1381  
NGX_CONF_ERROR
;

1384 
èbÀ
->
§c2d°
[
§c
] = (
u_ch¨
Ë
d°
;

1385 
èbÀ
->
d°2§c
[
d°
] = (
u_ch¨
Ë
§c
;

1388  
NGX_CONF_OK
;

1389 
	}
}

1393 
	$ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1395 *
p
 = 
c⁄f
;

1397 
ngx_öt_t
 *
˝
;

1398 
ngx_°r_t
 *
vÆue
, 
v¨
;

1399 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1401 
˝
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1403 i‡(*
˝
 !
NGX_CONF_UNSET
) {

1407 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1409 i‡(
cmd
->
off£t
 =
	`off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
)

1410 && 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0)

1412 *
˝
 = 
NGX_HTTP_CHARSET_OFF
;

1413  
NGX_CONF_OK
;

1417 i‡(
vÆue
[1].
d©a
[0] == '$') {

1418 
v¨
.
Àn
 = 
vÆue
[1].len - 1;

1419 
v¨
.
d©a
 = 
vÆue
[1].data + 1;

1421 *
˝
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
v¨
);

1423 i‡(*
˝
 =
NGX_ERROR
) {

1424  
NGX_CONF_ERROR
;

1427 *
˝
 +
NGX_HTTP_CHARSET_VAR
;

1429  
NGX_CONF_OK
;

1432 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1433 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1435 *
˝
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1436 i‡(*
˝
 =
NGX_ERROR
) {

1437  
NGX_CONF_ERROR
;

1440  
NGX_CONF_OK
;

1441 
	}
}

1444 
ngx_öt_t


1445 
	$ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
)

1447 
ngx_uöt_t
 
i
;

1448 
ngx_hâp_ch¨£t_t
 *
c
;

1450 
c
 = 
ch¨£ts
->
ñts
;

1451 
i
 = 0; i < 
ch¨£ts
->
√…s
; i++) {

1452 i‡(
«me
->
Àn
 !
c
[
i
].name.len) {

1456 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, 
c
[
i
].name.data) == 0) {

1461 i‡(
i
 < 
ch¨£ts
->
√…s
) {

1462  
i
;

1465 
c
 = 
	`ngx_¨øy_push
(
ch¨£ts
);

1466 i‡(
c
 =
NULL
) {

1467  
NGX_ERROR
;

1470 
c
->
èbÀs
 = 
NULL
;

1471 
c
->
«me
 = *name;

1472 
c
->
Àngth
 = 0;

1474 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1475 
c
->
utf8
 = 1;

1478 
c
->
utf8
 = 0;

1481  
i
;

1482 
	}
}

1486 
	$ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1488 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1490 
mcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_maö_c⁄f_t
));

1491 i‡(
mcf
 =
NULL
) {

1492  
NULL
;

1495 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ch¨£ts
, 
cf
->
poﬁ
, 2, (
ngx_hâp_ch¨£t_t
))

1496 !
NGX_OK
)

1498  
NULL
;

1501 i‡(
	`ngx_¨øy_öô
(&
mcf
->
èbÀs
, 
cf
->
poﬁ
, 1,

1502 (
ngx_hâp_ch¨£t_èbÀs_t
))

1503 !
NGX_OK
)

1505  
NULL
;

1508 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ªcodes
, 
cf
->
poﬁ
, 2,

1509 (
ngx_hâp_ch¨£t_ªcode_t
))

1510 !
NGX_OK
)

1512  
NULL
;

1515  
mcf
;

1516 
	}
}

1520 
	$ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1522 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

1524 
lcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_loc_c⁄f_t
));

1525 i‡(
lcf
 =
NULL
) {

1526  
NULL
;

1536 
lcf
->
ch¨£t
 = 
NGX_CONF_UNSET
;

1537 
lcf
->
sour˚_ch¨£t
 = 
NGX_CONF_UNSET
;

1538 
lcf
->
ovîride_ch¨£t
 = 
NGX_CONF_UNSET
;

1540  
lcf
;

1541 
	}
}

1545 
	$ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1547 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1548 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1550 
ngx_uöt_t
 
i
;

1551 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1552 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1554 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1555 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1556 
ngx_hâp_ch¨£t_deÁu…_ty≥s
)

1557 !
NGX_OK
)

1559  
NGX_CONF_ERROR
;

1562 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ovîride_ch¨£t
, 
¥ev
->override_charset, 0);

1563 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ch¨£t
, 
¥ev
->ch¨£t, 
NGX_HTTP_CHARSET_OFF
);

1564 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sour˚_ch¨£t
, 
¥ev
->source_charset,

1565 
NGX_HTTP_CHARSET_OFF
);

1567 i‡(
c⁄f
->
ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1568 || 
c⁄f
->
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1569 || 
c⁄f
->
ch¨£t
 =c⁄f->
sour˚_ch¨£t
)

1571  
NGX_CONF_OK
;

1574 i‡(
c⁄f
->
sour˚_ch¨£t
 >
NGX_HTTP_CHARSET_VAR


1575 || 
c⁄f
->
ch¨£t
 >
NGX_HTTP_CHARSET_VAR
)

1577  
NGX_CONF_OK
;

1580 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1581 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1582 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1583 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1584 i‡(
c⁄f
->
sour˚_ch¨£t
 =
ªcode
[
i
].
§c


1585 && 
c⁄f
->
ch¨£t
 =
ªcode
[
i
].
d°
)

1587  
NGX_CONF_OK
;

1591 
ªcode
 = 
	`ngx_¨øy_push
(&
mcf
->
ªcodes
);

1592 i‡(
ªcode
 =
NULL
) {

1593  
NGX_CONF_ERROR
;

1596 
ªcode
->
§c
 = 
c⁄f
->
sour˚_ch¨£t
;

1597 
ªcode
->
d°
 = 
c⁄f
->
ch¨£t
;

1599  
NGX_CONF_OK
;

1600 
	}
}

1603 
ngx_öt_t


1604 
	$ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1606 
u_ch¨
 **
§c
, **
d°
;

1607 
ngx_öt_t
 
c
;

1608 
ngx_uöt_t
 
i
, 
t
;

1609 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1610 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1611 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀs
;

1612 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1614 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1615 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1617 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1618 
èbÀs
 = 
mcf
->èbÀs.
ñts
;

1619 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1621 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1623 
c
 = 
ªcode
[
i
].
§c
;

1625 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1627 i‡(
c
 =
èbÀs
[
t
].
§c
 && 
ªcode
[
i
].
d°
 ==Åables[t].dst) {

1628 
√xt
;

1631 i‡(
c
 =
èbÀs
[
t
].
d°
 && 
ªcode
[
i
].d° =èbÀs[t].
§c
) {

1632 
√xt
;

1636 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1638 &
ch¨£t
[
c
].
«me
, &ch¨£t[
ªcode
[
i
].
d°
].name);

1639  
NGX_ERROR
;

1641 
√xt
:

1646 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1648 
§c
 = 
ch¨£t
[
èbÀs
[
t
].src].tables;

1650 i‡(
§c
 =
NULL
) {

1651 
§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1652 i‡(
§c
 =
NULL
) {

1653  
NGX_ERROR
;

1656 
ch¨£t
[
èbÀs
[
t
].
§c
].tables = src;

1659 
d°
 = 
ch¨£t
[
èbÀs
[
t
].dst].tables;

1661 i‡(
d°
 =
NULL
) {

1662 
d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1663 i‡(
d°
 =
NULL
) {

1664  
NGX_ERROR
;

1667 
ch¨£t
[
èbÀs
[
t
].
d°
].tables = dst;

1670 
§c
[
èbÀs
[
t
].
d°
] =ÅabÀs[t].
§c2d°
;

1671 
d°
[
èbÀs
[
t
].
§c
] =ÅabÀs[t].
d°2§c
;

1674 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1675 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ch¨£t_hódî_fûãr
;

1677 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1678 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ch¨£t_body_fûãr
;

1680  
NGX_OK
;

1681 
	}
}

	@src/http/modules/ngx_http_chunked_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_chaö_t
 *
	m‰ì
;

15 
ngx_chaö_t
 *
	mbusy
;

16 } 
	tngx_hâp_chunked_fûãr_˘x_t
;

19 
ngx_öt_t
 
ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

22 
ngx_hâp_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ_˘x
 = {

23 
NULL
,

24 
ngx_hâp_chunked_fûãr_öô
,

26 
NULL
,

27 
NULL
,

29 
NULL
,

30 
NULL
,

32 
NULL
,

33 
NULL


37 
ngx_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ
 = {

38 
NGX_MODULE_V1
,

39 &
ngx_hâp_chunked_fûãr_moduÀ_˘x
,

40 
NULL
,

41 
NGX_HTTP_MODULE
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NULL
,

48 
NULL
,

49 
NGX_MODULE_V1_PADDING


53 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

57 
ngx_öt_t


58 
	$ngx_hâp_chunked_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

61 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

63 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED


64 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NO_CONTENT


65 || 
r
 !r->
maö


66 || (
r
->
mëhod
 & 
NGX_HTTP_HEAD
))

68  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

71 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1) {

72 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

73 
r
->
kì∑live
 = 0;

76 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

78 i‡(
˛cf
->
chunked_å™s„r_ícodög
) {

79 
r
->
chunked
 = 1;

81 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

82 (
ngx_hâp_chunked_fûãr_˘x_t
));

83 i‡(
˘x
 =
NULL
) {

84  
NGX_ERROR
;

87 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_chunked_fûãr_moduÀ
);

90 
r
->
kì∑live
 = 0;

95  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_hâp_chunked_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

102 
u_ch¨
 *
chunk
;

103 
off_t
 
size
;

104 
ngx_öt_t
 
rc
;

105 
ngx_buf_t
 *
b
;

106 
ngx_chaö_t
 *
out
, *
˛
, *
é
, **
Œ
;

107 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

109 i‡(
ö
 =
NULL
 || !
r
->
chunked
 ||Ñ->
hódî_⁄ly
) {

110  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

113 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_chunked_fûãr_moduÀ
);

115 
out
 = 
NULL
;

116 
Œ
 = &
out
;

118 
size
 = 0;

119 
˛
 = 
ö
;

122 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

123 "hâ∞chunk: %d", 
	`ngx_buf_size
(
˛
->
buf
));

125 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

127 i‡(
˛
->
buf
->
Êush


128 || 
˛
->
buf
->
sync


129 || 
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)

130 || 
˛
->
buf
->
ö_fûe
)

132 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

133 i‡(
é
 =
NULL
) {

134  
NGX_ERROR
;

137 
é
->
buf
 = 
˛
->buf;

138 *
Œ
 = 
é
;

139 
Œ
 = &
é
->
√xt
;

142 i‡(
˛
->
√xt
 =
NULL
) {

146 
˛
 = cl->
√xt
;

149 i‡(
size
) {

150 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

151 i‡(
é
 =
NULL
) {

152  
NGX_ERROR
;

155 
b
 = 
é
->
buf
;

156 
chunk
 = 
b
->
°¨t
;

158 i‡(
chunk
 =
NULL
) {

161 
chunk
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ("0000000000000000" 
CRLF
) - 1);

162 i‡(
chunk
 =
NULL
) {

163  
NGX_ERROR
;

166 
b
->
°¨t
 = 
chunk
;

167 
b
->
íd
 = 
chunk
 + ("0000000000000000" 
CRLF
) - 1;

170 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

171 
b
->
mem‹y
 = 0;

172 
b
->
ãmp‹¨y
 = 1;

173 
b
->
pos
 = 
chunk
;

174 
b
->
œ°
 = 
	`ngx_•rötf
(
chunk
, "%xO" 
CRLF
, 
size
);

176 
é
->
√xt
 = 
out
;

177 
out
 = 
é
;

180 i‡(
˛
->
buf
->
œ°_buf
) {

181 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

182 i‡(
é
 =
NULL
) {

183  
NGX_ERROR
;

186 
b
 = 
é
->
buf
;

188 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

189 
b
->
ãmp‹¨y
 = 0;

190 
b
->
mem‹y
 = 1;

191 
b
->
œ°_buf
 = 1;

192 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
 "0" CRLF CRLF;

193 
b
->
œ°
 = b->
pos
 + 7;

195 
˛
->
buf
->
œ°_buf
 = 0;

197 *
Œ
 = 
é
;

199 i‡(
size
 == 0) {

200 
b
->
pos
 += 2;

203 } i‡(
size
 > 0) {

204 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

205 i‡(
é
 =
NULL
) {

206  
NGX_ERROR
;

209 
b
 = 
é
->
buf
;

211 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

212 
b
->
ãmp‹¨y
 = 0;

213 
b
->
mem‹y
 = 1;

214 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
;

215 
b
->
œ°
 = b->
pos
 + 2;

217 *
Œ
 = 
é
;

220 *
Œ
 = 
NULL
;

223 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

225 
	`ngx_chaö_upd©e_chaös
(&
˘x
->
‰ì
, &˘x->
busy
, &
out
,

226 (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
);

228  
rc
;

229 
	}
}

232 
ngx_öt_t


233 
	$ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

235 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

236 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_chunked_hódî_fûãr
;

238 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

239 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_chunked_body_fûãr
;

241  
NGX_OK
;

242 
	}
}

	@src/http/modules/ngx_http_dav_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_DAV_COPY_BLOCK
 65536

	)

15 
	#NGX_HTTP_DAV_OFF
 2

	)

18 
	#NGX_HTTP_DAV_NO_DEPTH
 -3

	)

19 
	#NGX_HTTP_DAV_INVALID_DEPTH
 -2

	)

20 
	#NGX_HTTP_DAV_INFINITY_DEPTH
 -1

	)

24 
ngx_uöt_t
 
	mmëhods
;

25 
ngx_uöt_t
 
	mac˚ss
;

26 
ngx_uöt_t
 
	mmö_dñëe_dïth
;

27 
ngx_Êag_t
 
	m¸óã_fuŒ_put_∑th
;

28 } 
	tngx_hâp_dav_loc_c⁄f_t
;

32 
ngx_°r_t
 
	m∑th
;

33 
size_t
 
	mÀn
;

34 } 
	tngx_hâp_dav_c›y_˘x_t
;

37 
ngx_öt_t
 
ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

41 
ngx_öt_t
 
ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

42 
ngx_öt_t
 
ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
);

44 
ngx_öt_t
 
ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

45 
ngx_öt_t
 
ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

46 
ngx_öt_t
 
ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

48 
ngx_öt_t
 
ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
);

51 
ngx_öt_t
 
ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

53 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
,

54 
ngx_°r_t
 *
∑th
);

55 
ngx_öt_t
 
ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
,

56 
ngx_°r_t
 *
∑th
);

58 
ngx_öt_t
 
ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
,Çgx_öt_à
dÊt
);

59 
ngx_öt_t
 
ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

60 
ngx_öt_t
 
nŸ_found
, *
Áûed
, 
u_ch¨
 *
∑th
);

61 
ngx_öt_t
 
ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
);

62 *
ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

63 *
ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

64 *
∑ª¡
, *
chûd
);

65 
ngx_öt_t
 
ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
);

68 
ngx_c⁄f_bômask_t
 
	gngx_hâp_dav_mëhods_mask
[] = {

69 { 
ngx_°rög
("off"), 
NGX_HTTP_DAV_OFF
 },

70 { 
ngx_°rög
("put"), 
NGX_HTTP_PUT
 },

71 { 
ngx_°rög
("dñëe"), 
NGX_HTTP_DELETE
 },

72 { 
ngx_°rög
("mkcﬁ"), 
NGX_HTTP_MKCOL
 },

73 { 
ngx_°rög
("c›y"), 
NGX_HTTP_COPY
 },

74 { 
ngx_°rög
("move"), 
NGX_HTTP_MOVE
 },

75 { 
ngx_nuŒ_°rög
, 0 }

79 
ngx_comm™d_t
 
	gngx_hâp_dav_comm™ds
[] = {

81 { 
ngx_°rög
("dav_methods"),

82 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

83 
ngx_c⁄f_£t_bômask_¶Ÿ
,

84 
NGX_HTTP_LOC_CONF_OFFSET
,

85 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mëhods
),

86 &
ngx_hâp_dav_mëhods_mask
 },

88 { 
ngx_°rög
("create_full_put_path"),

89 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

90 
ngx_c⁄f_£t_Êag_¶Ÿ
,

91 
NGX_HTTP_LOC_CONF_OFFSET
,

92 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
¸óã_fuŒ_put_∑th
),

93 
NULL
 },

95 { 
ngx_°rög
("min_delete_depth"),

96 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_num_¶Ÿ
,

98 
NGX_HTTP_LOC_CONF_OFFSET
,

99 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mö_dñëe_dïth
),

100 
NULL
 },

102 { 
ngx_°rög
("dav_access"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

104 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

105 
NGX_HTTP_LOC_CONF_OFFSET
,

106 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
ac˚ss
),

107 
NULL
 },

109 
ngx_nuŒ_comm™d


113 
ngx_hâp_moduÀ_t
 
	gngx_hâp_dav_moduÀ_˘x
 = {

114 
NULL
,

115 
ngx_hâp_dav_öô
,

117 
NULL
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
ngx_hâp_dav_¸óã_loc_c⁄f
,

124 
ngx_hâp_dav_mîge_loc_c⁄f


128 
ngx_moduÀ_t
 
	gngx_hâp_dav_moduÀ
 = {

129 
NGX_MODULE_V1
,

130 &
ngx_hâp_dav_moduÀ_˘x
,

131 
ngx_hâp_dav_comm™ds
,

132 
NGX_HTTP_MODULE
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NGX_MODULE_V1_PADDING


144 
ngx_öt_t


145 
	$ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

147 
ngx_öt_t
 
rc
;

148 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

150 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

152 i‡(!(
r
->
mëhod
 & 
dlcf
->
mëhods
)) {

153  
NGX_DECLINED
;

156 
r
->
mëhod
) {

158 
NGX_HTTP_PUT
:

160 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

161 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

163  
NGX_HTTP_CONFLICT
;

166 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

167 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

168 
r
->
ªque°_body_ö_˛ón_fûe
 = 1;

169 
r
->
ªque°_body_fûe_group_ac˚ss
 = 1;

170 
r
->
ªque°_body_fûe_log_Àvñ
 = 0;

172 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_dav_put_h™dÀr
);

174 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

175  
rc
;

178  
NGX_DONE
;

180 
NGX_HTTP_DELETE
:

182  
	`ngx_hâp_dav_dñëe_h™dÀr
(
r
);

184 
NGX_HTTP_MKCOL
:

186  
	`ngx_hâp_dav_mkcﬁ_h™dÀr
(
r
, 
dlcf
);

188 
NGX_HTTP_COPY
:

190  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

192 
NGX_HTTP_MOVE
:

194  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

197  
NGX_DECLINED
;

198 
	}
}

202 
	$ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

204 
size_t
 
roŸ
;

205 
time_t
 
d©e
;

206 
ngx_°r_t
 *
ãmp
, 
∑th
;

207 
ngx_uöt_t
 
°©us
;

208 
ngx_fûe_öfo_t
 
fi
;

209 
ngx_ext_ª«me_fûe_t
 
ext
;

210 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

212 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

214 
∑th
.
Àn
--;

216 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

217 "hâ∞puàfûíame: \"%s\"", 
∑th
.
d©a
);

219 
ãmp
 = &
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
;

221 i‡(
	`ngx_fûe_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

222 
°©us
 = 
NGX_HTTP_CREATED
;

225 
°©us
 = 
NGX_HTTP_NO_CONTENT
;

227 i‡(
	`ngx_is_dú
(&
fi
)) {

228 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

229 "\"%s\" couldÇŸ bê¸óãd", 
∑th
.
d©a
);

231 i‡(
	`ngx_dñëe_fûe
(
ãmp
->
d©a
Ë=
NGX_FILE_ERROR
) {

232 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

233 
ngx_dñëe_fûe_n
 " \"%s\" failed",

234 
ãmp
->
d©a
);

237 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CONFLICT
);

242 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

244 
ext
.
ac˚ss
 = 
dlcf
->access;

245 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

246 
ext
.
time
 = -1;

247 
ext
.
¸óã_∑th
 = 
dlcf
->
¸óã_fuŒ_put_∑th
;

248 
ext
.
dñëe_fûe
 = 1;

249 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

251 i‡(
r
->
hódîs_ö
.
d©e
) {

252 
d©e
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.d©e->
vÆue
.
d©a
,

253 
r
->
hódîs_ö
.
d©e
->
vÆue
.
Àn
);

255 i‡(
d©e
 !
NGX_ERROR
) {

256 
ext
.
time
 = 
d©e
;

257 
ext
.
fd
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.fd;

261 i‡(
	`ngx_ext_ª«me_fûe
(
ãmp
, &
∑th
, &
ext
Ë!
NGX_OK
) {

262 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

266 i‡(
°©us
 =
NGX_HTTP_CREATED
) {

267 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

268 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

272 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

275 
r
->
hódîs_out
.
°©us
 = status;

276 
r
->
hódî_⁄ly
 = 1;

278 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_£nd_hódî
(r));

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

286 
size_t
 
roŸ
;

287 
ngx_îr_t
 
îr
;

288 
ngx_öt_t
 
rc
, 
dïth
;

289 
ngx_uöt_t
 
i
, 
d
, 
dú
;

290 
ngx_°r_t
 
∑th
;

291 
ngx_fûe_öfo_t
 
fi
;

292 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

294 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

295 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

297  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

300 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

302 i‡(
dlcf
->
mö_dñëe_dïth
) {

303 
d
 = 0;

305 
i
 = 0; i < 
r
->
uri
.
Àn
; ) {

306 i‡(
r
->
uri
.
d©a
[
i
++] == '/') {

307 i‡(++
d
 >
dlcf
->
mö_dñëe_dïth
 && 
i
 < 
r
->
uri
.
Àn
) {

308 
ok
;

313 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

314 "ösufficõ¡ URI dïth:%òtÿDELETE", 
d
);

315  
NGX_HTTP_CONFLICT
;

318 
ok
:

320 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

322 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

323 "hâ∞dñëêfûíame: \"%s\"", 
∑th
.
d©a
);

325 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

326 
îr
 = 
ngx_î∫o
;

328 
rc
 = (
îr
 =
NGX_ENOTDIR
Ë? 
NGX_HTTP_CONFLICT
 : 
NGX_HTTP_NOT_FOUND
;

330  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

331 
rc
, 
ngx_lök_öfo_n
, 
∑th
.
d©a
);

334 i‡(
	`ngx_is_dú
(&
fi
)) {

336 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

337 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

338 "DELETE \"%s\" faûed", 
∑th
.
d©a
);

339  
NGX_HTTP_CONFLICT
;

342 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

344 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

345 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

347  
NGX_HTTP_BAD_REQUEST
;

350 
∑th
.
Àn
 -= 2;

352 
dú
 = 1;

361 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 0);

363 i‡(
dïth
 !0 && dïth !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

364 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

366  
NGX_HTTP_BAD_REQUEST
;

369 
dú
 = 0;

372 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 
dú
);

374 i‡(
rc
 =
NGX_OK
) {

375  
NGX_HTTP_NO_CONTENT
;

378  
rc
;

379 
	}
}

382 
ngx_öt_t


383 
	$ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
)

385 *
Áûed
;

386 
ngx_åì_˘x_t
 
åì
;

388 i‡(
dú
) {

390 
åì
.
öô_h™dÀr
 = 
NULL
;

391 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

392 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_no›
;

393 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_dñëe_dú
;

394 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

395 
åì
.
d©a
 = 
NULL
;

396 
åì
.
Æloc
 = 0;

397 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

401 i‡(
	`ngx_wÆk_åì
(&
åì
, 
∑th
Ë!
NGX_OK
) {

402  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

405 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

406  
NGX_OK
;

409 
Áûed
 = 
ngx_dñëe_dú_n
;

413 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

414  
NGX_OK
;

417 
Áûed
 = 
ngx_dñëe_fûe_n
;

420  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

421 
NGX_HTTP_NOT_FOUND
, 
Áûed
, 
∑th
->
d©a
);

422 
	}
}

425 
ngx_öt_t


426 
	$ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

428 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

429 "hâ∞dñëêdú: \"%s\"", 
∑th
->
d©a
);

431 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

435 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_dú_n
,

436 
∑th
->
d©a
);

439  
NGX_OK
;

440 
	}
}

443 
ngx_öt_t


444 
	$ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

446 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

447 "hâ∞dñëêfûe: \"%s\"", 
∑th
->
d©a
);

449 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

453 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_fûe_n
,

454 
∑th
->
d©a
);

457  
NGX_OK
;

458 
	}
}

461 
ngx_öt_t


462 
	$ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

464  
NGX_OK
;

465 
	}
}

468 
ngx_öt_t


469 
	$ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
)

471 
u_ch¨
 *
p
;

472 
size_t
 
roŸ
;

473 
ngx_°r_t
 
∑th
;

475 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

476 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

478  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

481 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

484  
NGX_HTTP_CONFLICT
;

487 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

489 *(
p
 - 1) = '\0';

490 
r
->
uri
.
Àn
--;

492 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

493 "hâ∞mkcﬁÖ©h: \"%s\"", 
∑th
.
d©a
);

495 i‡(
	`ngx_¸óã_dú
(
∑th
.
d©a
, 
	`ngx_dú_ac˚ss
(
dlcf
->
ac˚ss
))

496 !
NGX_FILE_ERROR
)

498 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

499  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

502  
NGX_HTTP_CREATED
;

505  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

506 
NGX_HTTP_CONFLICT
, 
ngx_¸óã_dú_n
, 
∑th
.
d©a
);

507 
	}
}

510 
ngx_öt_t


511 
	$ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

513 
u_ch¨
 *
p
, *
ho°
, *
œ°
, 
ch
;

514 
size_t
 
Àn
, 
roŸ
;

515 
ngx_îr_t
 
îr
;

516 
ngx_öt_t
 
rc
, 
dïth
;

517 
ngx_uöt_t
 
ovîwrôe
, 
¶ash
, 
dú
, 
Êags
;

518 
ngx_°r_t
 
∑th
, 
uri
, 
duri
, 
¨gs
;

519 
ngx_åì_˘x_t
 
åì
;

520 
ngx_c›y_fûe_t
 
cf
;

521 
ngx_fûe_öfo_t
 
fi
;

522 
ngx_èbÀ_ñt_t
 *
de°
, *
ovî
;

523 
ngx_ext_ª«me_fûe_t
 
ext
;

524 
ngx_hâp_dav_c›y_˘x_t
 
c›y
;

525 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

527 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

528  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

531 
de°
 = 
r
->
hódîs_ö
.
de°ö©i⁄
;

533 i‡(
de°
 =
NULL
) {

534 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

536  
NGX_HTTP_BAD_REQUEST
;

539 
p
 = 
de°
->
vÆue
.
d©a
;

541 i‡(
p
[0] == '/') {

542 
œ°
 = 
p
 + 
de°
->
vÆue
.
Àn
;

543 
de°ö©i⁄_d⁄e
;

546 
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

548 i‡(
Àn
 == 0) {

549 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

551  
NGX_HTTP_BAD_REQUEST
;

554 #i‡(
NGX_HTTP_SSL
)

556 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

557 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "https://", ("https://") - 1)

560 
övÆid_de°ö©i⁄
;

563 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("https://") - 1;

568 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "http://", ("http://") - 1)

571 
övÆid_de°ö©i⁄
;

574 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("http://") - 1;

577 i‡(
	`ngx_°∫cmp
(
ho°
, 
r
->
hódîs_ö
.
£rvî
.
d©a
, 
Àn
) != 0) {

578 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

581 &
de°
->
vÆue
);

582  
NGX_HTTP_BAD_REQUEST
;

585 
œ°
 = 
de°
->
vÆue
.
d©a
 + de°->vÆue.
Àn
;

587 
p
 = 
ho°
 + 
Àn
;Ö < 
œ°
;Ö++) {

588 i‡(*
p
 == '/') {

589 
de°ö©i⁄_d⁄e
;

593 
övÆid_de°ö©i⁄
:

595 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

597 &
de°
->
vÆue
);

598  
NGX_HTTP_BAD_REQUEST
;

600 
de°ö©i⁄_d⁄e
:

602 
duri
.
Àn
 = 
œ°
 - 
p
;

603 
duri
.
d©a
 = 
p
;

604 
Êags
 = 0;

606 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
duri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

607 
övÆid_de°ö©i⁄
;

610 i‡((
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] ='/' && *(
œ°
 - 1) != '/')

611 || (
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] !'/' && *(
œ°
 - 1) == '/'))

613 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

616 &
r
->
uri
, &
de°
->
vÆue
);

617  
NGX_HTTP_CONFLICT
;

620 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

622 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

624 i‡(
r
->
mëhod
 =
NGX_HTTP_COPY
) {

625 i‡(
dïth
 != 0) {

626 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

628  
NGX_HTTP_BAD_REQUEST
;

632 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

634  
NGX_HTTP_BAD_REQUEST
;

638 
ovî
 = 
r
->
hódîs_ö
.
ovîwrôe
;

640 i‡(
ovî
) {

641 i‡(
ovî
->
vÆue
.
Àn
 == 1) {

642 
ch
 = 
ovî
->
vÆue
.
d©a
[0];

644 i‡(
ch
 == 'T' || ch == 't') {

645 
ovîwrôe
 = 1;

646 
ovîwrôe_d⁄e
;

649 i‡(
ch
 == 'F' || ch == 'f') {

650 
ovîwrôe
 = 0;

651 
ovîwrôe_d⁄e
;

656 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

658 &
ovî
->
vÆue
);

659  
NGX_HTTP_BAD_REQUEST
;

662 
ovîwrôe
 = 1;

664 
ovîwrôe_d⁄e
:

666 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

668 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

669 "hâ∞c›y from: \"%s\"", 
∑th
.
d©a
);

671 
uri
 = 
r
->uri;

672 
r
->
uri
 = 
duri
;

674 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
c›y
.
∑th
, &
roŸ
, 0);

676 
r
->
uri
 = uri;

678 
c›y
.
∑th
.
Àn
--;

680 i‡(
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
 - 1] == '/') {

681 
¶ash
 = 1;

682 
c›y
.
∑th
.
Àn
--;

683 
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
] = '\0';

686 
¶ash
 = 0;

689 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

690 "hâ∞c›yÅo: \"%s\"", 
c›y
.
∑th
.
d©a
);

692 i‡(
	`ngx_lök_öfo
(
c›y
.
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

693 
îr
 = 
ngx_î∫o
;

695 i‡(
îr
 !
NGX_ENOENT
) {

696  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

697 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

698 
c›y
.
∑th
.
d©a
);

703 
ovîwrôe
 = 0;

704 
dú
 = 0;

710 i‡(
	`ngx_is_dú
(&
fi
Ë&& !
¶ash
) {

711 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

713 &
r
->
uri
, &r->
mëhod_«me
, &
de°
->
vÆue
);

714  
NGX_HTTP_CONFLICT
;

717 i‡(!
ovîwrôe
) {

718 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EEXIST
,

719 "\"%s\" couldÇŸ bê¸óãd", 
c›y
.
∑th
.
d©a
);

720  
NGX_HTTP_PRECONDITION_FAILED
;

723 
dú
 = 
	`ngx_is_dú
(&
fi
);

726 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

727  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

728 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

729 
∑th
.
d©a
);

732 i‡(
	`ngx_is_dú
(&
fi
)) {

734 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

735 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

736 "\"%V\" i†cﬁÀ˘i⁄", &
r
->
uri
);

737  
NGX_HTTP_BAD_REQUEST
;

740 i‡(
ovîwrôe
) {

741 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

742 "hâ∞dñëe: \"%s\"", 
c›y
.
∑th
.
d©a
);

744 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
c›y
.
∑th
, 
dú
);

746 i‡(
rc
 !
NGX_OK
) {

747  
rc
;

752 i‡(
	`ngx_is_dú
(&
fi
)) {

754 
∑th
.
Àn
 -= 2;

756 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

757 i‡(
	`ngx_ª«me_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©aË!
NGX_FILE_ERROR
) {

758  
NGX_HTTP_CREATED
;

762 i‡(
	`ngx_¸óã_dú
(
c›y
.
∑th
.
d©a
, 
	`ngx_fûe_ac˚ss
(&
fi
))

763 =
NGX_FILE_ERROR
)

765  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

766 
NGX_HTTP_NOT_FOUND
,

767 
ngx_¸óã_dú_n
, 
c›y
.
∑th
.
d©a
);

770 
c›y
.
Àn
 = 
∑th
.len;

772 
åì
.
öô_h™dÀr
 = 
NULL
;

773 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_c›y_åì_fûe
;

774 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú
;

775 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú_time
;

776 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_no›
;

777 
åì
.
d©a
 = &
c›y
;

778 
åì
.
Æloc
 = 0;

779 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

781 i‡(
	`ngx_wÆk_åì
(&
åì
, &
∑th
Ë=
NGX_OK
) {

783 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

784 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 1);

786 i‡(
rc
 !
NGX_OK
) {

787  
rc
;

791  
NGX_HTTP_CREATED
;

796 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

798 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

800 
ext
.
ac˚ss
 = 0;

801 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

802 
ext
.
time
 = -1;

803 
ext
.
¸óã_∑th
 = 1;

804 
ext
.
dñëe_fûe
 = 0;

805 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

807 i‡(
	`ngx_ext_ª«me_fûe
(&
∑th
, &
c›y
.∑th, &
ext
Ë=
NGX_OK
) {

808  
NGX_HTTP_NO_CONTENT
;

811  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

814 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

816 
cf
.
size
 = 
	`ngx_fûe_size
(&
fi
);

817 
cf
.
buf_size
 = 0;

818 
cf
.
ac˚ss
 = 
dlcf
->access;

819 
cf
.
time
 = 
	`ngx_fûe_mtime
(&
fi
);

820 
cf
.
log
 = 
r
->
c⁄√˘i⁄
->log;

822 i‡(
	`ngx_c›y_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©a, &
cf
Ë=
NGX_OK
) {

823  
NGX_HTTP_NO_CONTENT
;

827  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

828 
	}
}

831 
ngx_öt_t


832 
	$ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

834 
u_ch¨
 *
p
, *
dú
;

835 
size_t
 
Àn
;

836 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

838 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

839 "hâ∞c›y dú: \"%s\"", 
∑th
->
d©a
);

841 
c›y
 = 
˘x
->
d©a
;

843 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

845 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

846 i‡(
dú
 =
NULL
) {

847  
NGX_ABORT
;

850 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

851 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

853 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

854 "hâ∞c›y dúÅo: \"%s\"", 
dú
);

856 i‡(
	`ngx_¸óã_dú
(
dú
, 
	`ngx_dú_ac˚ss
(
˘x
->
ac˚ss
)Ë=
NGX_FILE_ERROR
) {

857 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_¸óã_dú_n
,

858 
dú
);

861 
	`ngx_‰ì
(
dú
);

863  
NGX_OK
;

864 
	}
}

867 
ngx_öt_t


868 
	$ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

870 
u_ch¨
 *
p
, *
dú
;

871 
size_t
 
Àn
;

872 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

874 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

875 "hâ∞c›y dúÅime: \"%s\"", 
∑th
->
d©a
);

877 
c›y
 = 
˘x
->
d©a
;

879 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

881 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

882 i‡(
dú
 =
NULL
) {

883  
NGX_ABORT
;

886 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

887 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

889 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

890 "hâ∞c›y dúÅimêto: \"%s\"", 
dú
);

892 #i‡(
NGX_WIN32
)

894 
ngx_fd_t
 
fd
;

896 
fd
 = 
	`ngx_›í_fûe
(
dú
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

898 i‡(
fd
 =
NGX_INVALID_FILE
) {

899 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_›í_fûe_n
, 
dú
);

900 
Áûed
;

903 i‡(
	`ngx_£t_fûe_time
(
NULL
, 
fd
, 
˘x
->
mtime
Ë!
NGX_OK
) {

904 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

905 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

908 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

909 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

910 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
dú
);

914 
Áûed
:

918 i‡(
	`ngx_£t_fûe_time
(
dú
, 0, 
˘x
->
mtime
Ë!
NGX_OK
) {

919 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

920 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

925 
	`ngx_‰ì
(
dú
);

927  
NGX_OK
;

928 
	}
}

931 
ngx_öt_t


932 
	$ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

934 
u_ch¨
 *
p
, *
fûe
;

935 
size_t
 
Àn
;

936 
ngx_c›y_fûe_t
 
cf
;

937 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

939 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

940 "hâ∞c›y fûe: \"%s\"", 
∑th
->
d©a
);

942 
c›y
 = 
˘x
->
d©a
;

944 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

946 
fûe
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

947 i‡(
fûe
 =
NULL
) {

948  
NGX_ABORT
;

951 
p
 = 
	`ngx_˝ymem
(
fûe
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

952 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

954 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

955 "hâ∞c›y fûêto: \"%s\"", 
fûe
);

957 
cf
.
size
 = 
˘x
->size;

958 
cf
.
buf_size
 = 0;

959 
cf
.
ac˚ss
 = 
˘x
->access;

960 
cf
.
time
 = 
˘x
->
mtime
;

961 
cf
.
log
 = 
˘x
->log;

963 (Ë
	`ngx_c›y_fûe
(
∑th
->
d©a
, 
fûe
, &
cf
);

965 
	`ngx_‰ì
(
fûe
);

967  
NGX_OK
;

968 
	}
}

971 
ngx_öt_t


972 
	$ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
dÊt
)

974 
ngx_èbÀ_ñt_t
 *
dïth
;

976 
dïth
 = 
r
->
hódîs_ö
.depth;

978 i‡(
dïth
 =
NULL
) {

979  
dÊt
;

982 i‡(
dïth
->
vÆue
.
Àn
 == 1) {

984 i‡(
dïth
->
vÆue
.
d©a
[0] == '0') {

988 i‡(
dïth
->
vÆue
.
d©a
[0] == '1') {

994 i‡(
dïth
->
vÆue
.
Àn
 == ("infinity") - 1

995 && 
	`ngx_°rcmp
(
dïth
->
vÆue
.
d©a
, "infinity") == 0)

997  
NGX_HTTP_DAV_INFINITY_DEPTH
;

1001 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1003 &
dïth
->
vÆue
);

1005  
NGX_HTTP_DAV_INVALID_DEPTH
;

1006 
	}
}

1009 
ngx_öt_t


1010 
	$ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, 
ngx_öt_t
 
nŸ_found
,

1011 *
Áûed
, 
u_ch¨
 *
∑th
)

1013 
ngx_öt_t
 
rc
;

1014 
ngx_uöt_t
 
Àvñ
;

1016 i‡(
îr
 =
NGX_ENOENT
 ||Éº =
NGX_ENOTDIR
 ||Éº =
NGX_ENAMETOOLONG
) {

1017 
Àvñ
 = 
NGX_LOG_ERR
;

1018 
rc
 = 
nŸ_found
;

1020 } i‡(
îr
 =
NGX_EACCES
 ||Éº =
NGX_EPERM
) {

1021 
Àvñ
 = 
NGX_LOG_ERR
;

1022 
rc
 = 
NGX_HTTP_FORBIDDEN
;

1024 } i‡(
îr
 =
NGX_EEXIST
) {

1025 
Àvñ
 = 
NGX_LOG_ERR
;

1026 
rc
 = 
NGX_HTTP_NOT_ALLOWED
;

1028 } i‡(
îr
 =
NGX_ENOSPC
) {

1029 
Àvñ
 = 
NGX_LOG_CRIT
;

1030 
rc
 = 
NGX_HTTP_INSUFFICIENT_STORAGE
;

1033 
Àvñ
 = 
NGX_LOG_CRIT
;

1034 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1037 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%†\"%s\" faûed", 
Áûed
, 
∑th
);

1039  
rc
;

1040 
	}
}

1043 
ngx_öt_t


1044 
	$ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
)

1046 
u_ch¨
 *
loˇti⁄
;

1047 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1049 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

1050 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1051  
NGX_ERROR
;

1054 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1056 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
) {

1057 
loˇti⁄
 = 
∑th
 + 
˛cf
->
roŸ
.
Àn
;

1060 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
uri
.
Àn
);

1061 i‡(
loˇti⁄
 =
NULL
) {

1062  
NGX_ERROR
;

1065 
	`ngx_mem˝y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

1073 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Ñ->
uri
.len;

1074 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

1076  
NGX_OK
;

1077 
	}
}

1081 
	$ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1083 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
;

1085 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_dav_loc_c⁄f_t
));

1086 i‡(
c⁄f
 =
NULL
) {

1087  
NULL
;

1096 
c⁄f
->
mö_dñëe_dïth
 = 
NGX_CONF_UNSET_UINT
;

1097 
c⁄f
->
ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1098 
c⁄f
->
¸óã_fuŒ_put_∑th
 = 
NGX_CONF_UNSET
;

1100  
c⁄f
;

1101 
	}
}

1105 
	$ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1107 
ngx_hâp_dav_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1108 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1110 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
mëhods
, 
¥ev
->methods,

1111 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_DAV_OFF
));

1113 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mö_dñëe_dïth
,

1114 
¥ev
->
mö_dñëe_dïth
, 0);

1116 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ac˚ss
, 
¥ev
->access, 0600);

1118 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¸óã_fuŒ_put_∑th
,

1119 
¥ev
->
¸óã_fuŒ_put_∑th
, 0);

1121  
NGX_CONF_OK
;

1122 
	}
}

1125 
ngx_öt_t


1126 
	$ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
)

1128 
ngx_hâp_h™dÀr_±
 *
h
;

1129 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1131 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1133 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

1134 i‡(
h
 =
NULL
) {

1135  
NGX_ERROR
;

1138 *
h
 = 
ngx_hâp_dav_h™dÀr
;

1140  
NGX_OK
;

1141 
	}
}

	@src/http/modules/ngx_http_degradation_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
size_t
 
	msbrk_size
;

15 } 
	tngx_hâp_degød©i⁄_maö_c⁄f_t
;

19 
ngx_uöt_t
 
	mdegøde
;

20 } 
	tngx_hâp_degød©i⁄_loc_c⁄f_t
;

23 
ngx_c⁄f_íum_t
 
	gngx_hâp_degøde
[] = {

24 { 
ngx_°rög
("204"), 204 },

25 { 
ngx_°rög
("444"), 444 },

26 { 
ngx_nuŒ_°rög
, 0 }

30 *
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 *
ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

35 *
c⁄f
);

36 
ngx_öt_t
 
ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
);

39 
ngx_comm™d_t
 
	gngx_hâp_degød©i⁄_comm™ds
[] = {

41 { 
ngx_°rög
("degradation"),

42 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

43 
ngx_hâp_degød©i⁄
,

44 
NGX_HTTP_MAIN_CONF_OFFSET
,

46 
NULL
 },

48 { 
ngx_°rög
("degrade"),

49 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_íum_¶Ÿ
,

51 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
off£tof
(
ngx_hâp_degød©i⁄_loc_c⁄f_t
, 
degøde
),

53 &
ngx_hâp_degøde
 },

55 
ngx_nuŒ_comm™d


59 
ngx_hâp_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ_˘x
 = {

60 
NULL
,

61 
ngx_hâp_degød©i⁄_öô
,

63 
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
,

64 
NULL
,

66 
NULL
,

67 
NULL
,

69 
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
,

70 
ngx_hâp_degød©i⁄_mîge_loc_c⁄f


74 
ngx_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_hâp_degød©i⁄_moduÀ_˘x
,

77 
ngx_hâp_degød©i⁄_comm™ds
,

78 
NGX_HTTP_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NGX_MODULE_V1_PADDING


90 
ngx_öt_t


91 
	$ngx_hâp_degød©i⁄_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

93 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
dlcf
;

95 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

97 i‡(
dlcf
->
degøde
 && 
	`ngx_hâp_degøded
(
r
)) {

98  
dlcf
->
degøde
;

101  
NGX_DECLINED
;

102 
	}
}

105 
ngx_uöt_t


106 
	$ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *
r
)

108 
time_t
 
now
;

109 
ngx_uöt_t
 
log
;

110 
size_t
 
sbrk_size
;

111 
time_t
 
sbrk_time
;

112 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

114 
dmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

116 i‡(
dmcf
->
sbrk_size
) {

118 
log
 = 0;

119 
now
 = 
	`ngx_time
();

123 i‡(
now
 !
sbrk_time
) {

132 
sbrk_size
 = (
size_t
Ë
	`sbrk
(0Ë- ((
uöçå_t
Ë
ngx_∑Œoc
 & ~0x3FFFFF);

133 
sbrk_time
 = 
now
;

134 
log
 = 1;

139 i‡(
sbrk_size
 >
dmcf
->sbrk_size) {

140 i‡(
log
) {

141 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143 
sbrk_size
 / (1024 * 1024));

151 
	}
}

155 
	$ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

157 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

159 
dmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_maö_c⁄f_t
));

160 i‡(
dmcf
 =
NULL
) {

161  
NULL
;

164  
dmcf
;

165 
	}
}

169 
	$ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

171 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
;

173 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_loc_c⁄f_t
));

174 i‡(
c⁄f
 =
NULL
) {

175  
NULL
;

178 
c⁄f
->
degøde
 = 
NGX_CONF_UNSET_UINT
;

180  
c⁄f
;

181 
	}
}

185 
	$ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

187 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

188 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

190 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
degøde
, 
¥ev
->degrade, 0);

192  
NGX_CONF_OK
;

193 
	}
}

197 
	$ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

199 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
 = 
c⁄f
;

201 
ngx_°r_t
 *
vÆue
, 
s
;

203 
vÆue
 = 
cf
->
¨gs
->
ñts
;

205 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "sbrk=", 5) == 0) {

207 
s
.
Àn
 = 
vÆue
[1].len - 5;

208 
s
.
d©a
 = 
vÆue
[1].data + 5;

210 
dmcf
->
sbrk_size
 = 
	`ngx_∑r£_size
(&
s
);

211 i‡(
dmcf
->
sbrk_size
 =(
size_t
Ë
NGX_ERROR
) {

212 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

213 "övÆid sbrk sizê\"%V\"", &
vÆue
[1]);

214  
NGX_CONF_ERROR
;

217  
NGX_CONF_OK
;

220 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

221 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

223  
NGX_CONF_ERROR
;

224 
	}
}

227 
ngx_öt_t


228 
	$ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
)

230 
ngx_hâp_h™dÀr_±
 *
h
;

231 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

233 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

235 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

236 i‡(
h
 =
NULL
) {

237  
NGX_ERROR
;

240 *
h
 = 
ngx_hâp_degød©i⁄_h™dÀr
;

242  
NGX_OK
;

243 
	}
}

	@src/http/modules/ngx_http_empty_gif_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

13 *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_hâp_em±y_gif_comm™ds
[] = {

17 { 
ngx_°rög
("empty_gif"),

18 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

19 
ngx_hâp_em±y_gif
,

22 
NULL
 },

24 
ngx_nuŒ_comm™d


30 
u_ch¨
 
	gngx_em±y_gif
[] = {

78 
ngx_hâp_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ_˘x
 = {

79 
NULL
,

80 
NULL
,

82 
NULL
,

83 
NULL
,

85 
NULL
,

86 
NULL
,

88 
NULL
,

89 
NULL


93 
ngx_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ
 = {

94 
NGX_MODULE_V1
,

95 &
ngx_hâp_em±y_gif_moduÀ_˘x
,

96 
ngx_hâp_em±y_gif_comm™ds
,

97 
NGX_HTTP_MODULE
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NGX_MODULE_V1_PADDING


109 
ngx_°r_t
 
	gngx_hâp_gif_ty≥
 = 
ngx_°rög
("image/gif");

112 
ngx_öt_t


113 
	$ngx_hâp_em±y_gif_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

115 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

117 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

118  
NGX_HTTP_NOT_ALLOWED
;

121 
	`ngx_memzîo
(&
cv
, (
ngx_hâp_com∂ex_vÆue_t
));

123 
cv
.
vÆue
.
Àn
 = (
ngx_em±y_gif
);

124 
cv
.
vÆue
.
d©a
 = 
ngx_em±y_gif
;

125 
r
->
hódîs_out
.
œ°_modifõd_time
 = 23349600;

127  
	`ngx_hâp_£nd_ª•⁄£
(
r
, 
NGX_HTTP_OK
, &
ngx_hâp_gif_ty≥
, &
cv
);

128 
	}
}

132 
	$ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

134 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

136 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

137 
˛cf
->
h™dÀr
 = 
ngx_hâp_em±y_gif_h™dÀr
;

139  
NGX_CONF_OK
;

140 
	}
}

	@src/http/modules/ngx_http_fastcgi_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

16 
ngx_°r_t
 
	mödex
;

18 
ngx_¨øy_t
 *
	mÊushes
;

19 
ngx_¨øy_t
 *
	m∑øms_Àn
;

20 
ngx_¨øy_t
 *
	m∑øms
;

21 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

22 
ngx_¨øy_t
 *
	mˇtch_°dîr
;

24 
ngx_¨øy_t
 *
	mÁ°cgi_Àngths
;

25 
ngx_¨øy_t
 *
	mÁ°cgi_vÆues
;

27 
ngx_hash_t
 
	mhódîs_hash
;

28 
ngx_uöt_t
 
	mhódî_∑øms
;

30 #i‡(
NGX_HTTP_CACHE
)

31 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

34 #i‡(
NGX_PCRE
)

35 
ngx_ªgex_t
 *
	m•lô_ªgex
;

36 
ngx_°r_t
 
	m•lô_«me
;

38 } 
	tngx_hâp_Á°cgi_loc_c⁄f_t
;

42 
	mngx_hâp_Á°cgi_°_vîsi⁄
 = 0,

43 
	mngx_hâp_Á°cgi_°_ty≥
,

44 
	mngx_hâp_Á°cgi_°_ªque°_id_hi
,

45 
	mngx_hâp_Á°cgi_°_ªque°_id_lo
,

46 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
,

47 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
,

48 
	mngx_hâp_Á°cgi_°_∑ddög_Àngth
,

49 
	mngx_hâp_Á°cgi_°_ª£rved
,

50 
	mngx_hâp_Á°cgi_°_d©a
,

51 
	mngx_hâp_Á°cgi_°_∑ddög


52 } 
	tngx_hâp_Á°cgi_°©e_e
;

56 
u_ch¨
 *
	m°¨t
;

57 
u_ch¨
 *
	míd
;

58 } 
	tngx_hâp_Á°cgi_•lô_∑π_t
;

62 
ngx_hâp_Á°cgi_°©e_e
 
	m°©e
;

63 
u_ch¨
 *
	mpos
;

64 
u_ch¨
 *
	mœ°
;

65 
ngx_uöt_t
 
	mty≥
;

66 
size_t
 
	mÀngth
;

67 
size_t
 
	m∑ddög
;

69 
	mÁ°cgi_°dout
:1;

70 
	mœrge_°dîr
:1;

72 
ngx_¨øy_t
 *
	m•lô_∑πs
;

74 
ngx_°r_t
 
	ms¸ùt_«me
;

75 
ngx_°r_t
 
	m∑th_öfo
;

76 } 
	tngx_hâp_Á°cgi_˘x_t
;

79 
	#NGX_HTTP_FASTCGI_RESPONDER
 1

	)

81 
	#NGX_HTTP_FASTCGI_BEGIN_REQUEST
 1

	)

82 
	#NGX_HTTP_FASTCGI_ABORT_REQUEST
 2

	)

83 
	#NGX_HTTP_FASTCGI_END_REQUEST
 3

	)

84 
	#NGX_HTTP_FASTCGI_PARAMS
 4

	)

85 
	#NGX_HTTP_FASTCGI_STDIN
 5

	)

86 
	#NGX_HTTP_FASTCGI_STDOUT
 6

	)

87 
	#NGX_HTTP_FASTCGI_STDERR
 7

	)

88 
	#NGX_HTTP_FASTCGI_DATA
 8

	)

92 
u_ch¨
 
	mvîsi⁄
;

93 
u_ch¨
 
	mty≥
;

94 
u_ch¨
 
	mªque°_id_hi
;

95 
u_ch¨
 
	mªque°_id_lo
;

96 
u_ch¨
 
	mc⁄ã¡_Àngth_hi
;

97 
u_ch¨
 
	mc⁄ã¡_Àngth_lo
;

98 
u_ch¨
 
	m∑ddög_Àngth
;

99 
u_ch¨
 
	mª£rved
;

100 } 
	tngx_hâp_Á°cgi_hódî_t
;

104 
u_ch¨
 
	mrﬁe_hi
;

105 
u_ch¨
 
	mrﬁe_lo
;

106 
u_ch¨
 
	mÊags
;

107 
u_ch¨
 
	mª£rved
[5];

108 } 
	tngx_hâp_Á°cgi_begö_ªque°_t
;

112 
u_ch¨
 
	mvîsi⁄
;

113 
u_ch¨
 
	mty≥
;

114 
u_ch¨
 
	mªque°_id_hi
;

115 
u_ch¨
 
	mªque°_id_lo
;

116 } 
	tngx_hâp_Á°cgi_hódî_smÆl_t
;

120 
ngx_hâp_Á°cgi_hódî_t
 
	mh0
;

121 
ngx_hâp_Á°cgi_begö_ªque°_t
 
	mbr
;

122 
ngx_hâp_Á°cgi_hódî_smÆl_t
 
	mh1
;

123 } 
	tngx_hâp_Á°cgi_ªque°_°¨t_t
;

126 
ngx_öt_t
 
ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

127 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

128 #i‡(
NGX_HTTP_CACHE
)

129 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

131 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

132 
ngx_öt_t
 
ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

133 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

134 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
,

135 
ngx_buf_t
 *
buf
);

136 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

137 
ngx_hâp_Á°cgi_˘x_t
 *
f
);

138 
ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

139 
ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

140 
ngx_öt_t
 
rc
);

142 
ngx_öt_t
 
ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

143 *
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

144 *
ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

145 *
∑ª¡
, *
chûd
);

146 
ngx_öt_t
 
ngx_hâp_Á°cgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

147 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_Á°cgi_loc_c⁄f_à*
¥ev
);

149 
ngx_öt_t
 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

150 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

151 
ngx_öt_t
 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

152 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

153 
ngx_hâp_Á°cgi_˘x_t
 *
ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
,

154 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

156 *
ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

157 *
c⁄f
);

158 *
ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
,

159 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

160 *
ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

161 *
c⁄f
);

162 #i‡(
NGX_HTTP_CACHE
)

163 *
ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

164 *
c⁄f
);

165 *
ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

166 *
c⁄f
);

169 *
ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
,

170 *
d©a
);

173 
ngx_c⁄f_po°_t
 
	gngx_hâp_Á°cgi_low©_po°
 =

174 { 
ngx_hâp_Á°cgi_low©_check
 };

177 
ngx_c⁄f_bômask_t
 
	gngx_hâp_Á°cgi_√xt_up°ªam_masks
[] = {

178 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

179 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

180 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

181 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

182 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

183 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

184 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

185 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

186 { 
ngx_nuŒ_°rög
, 0 }

190 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
;

193 
ngx_comm™d_t
 
	gngx_hâp_Á°cgi_comm™ds
[] = {

195 { 
ngx_°rög
("fastcgi_pass"),

196 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

197 
ngx_hâp_Á°cgi_∑ss
,

198 
NGX_HTTP_LOC_CONF_OFFSET
,

200 
NULL
 },

202 { 
ngx_°rög
("fastcgi_index"),

203 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

204 
ngx_c⁄f_£t_°r_¶Ÿ
,

205 
NGX_HTTP_LOC_CONF_OFFSET
,

206 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ödex
),

207 
NULL
 },

209 { 
ngx_°rög
("fastcgi_split_path_info"),

210 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

211 
ngx_hâp_Á°cgi_•lô_∑th_öfo
,

212 
NGX_HTTP_LOC_CONF_OFFSET
,

214 
NULL
 },

216 { 
ngx_°rög
("fastcgi_store"),

217 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

218 
ngx_hâp_Á°cgi_°‹e
,

219 
NGX_HTTP_LOC_CONF_OFFSET
,

221 
NULL
 },

223 { 
ngx_°rög
("fastcgi_store_access"),

224 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

225 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

226 
NGX_HTTP_LOC_CONF_OFFSET
,

227 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

228 
NULL
 },

230 { 
ngx_°rög
("fastcgi_ignore_client_abort"),

231 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

232 
ngx_c⁄f_£t_Êag_¶Ÿ
,

233 
NGX_HTTP_LOC_CONF_OFFSET
,

234 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

235 
NULL
 },

237 { 
ngx_°rög
("fastcgi_bind"),

238 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

239 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

240 
NGX_HTTP_LOC_CONF_OFFSET
,

241 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

242 
NULL
 },

244 { 
ngx_°rög
("fastcgi_connect_timeout"),

245 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

246 
ngx_c⁄f_£t_m£c_¶Ÿ
,

247 
NGX_HTTP_LOC_CONF_OFFSET
,

248 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

249 
NULL
 },

251 { 
ngx_°rög
("fastcgi_send_timeout"),

252 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

253 
ngx_c⁄f_£t_m£c_¶Ÿ
,

254 
NGX_HTTP_LOC_CONF_OFFSET
,

255 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

256 
NULL
 },

258 { 
ngx_°rög
("fastcgi_send_lowat"),

259 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

260 
ngx_c⁄f_£t_size_¶Ÿ
,

261 
NGX_HTTP_LOC_CONF_OFFSET
,

262 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

263 &
ngx_hâp_Á°cgi_low©_po°
 },

265 { 
ngx_°rög
("fastcgi_buffer_size"),

266 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

267 
ngx_c⁄f_£t_size_¶Ÿ
,

268 
NGX_HTTP_LOC_CONF_OFFSET
,

269 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

270 
NULL
 },

272 { 
ngx_°rög
("fastcgi_pass_request_headers"),

273 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

274 
ngx_c⁄f_£t_Êag_¶Ÿ
,

275 
NGX_HTTP_LOC_CONF_OFFSET
,

276 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

277 
NULL
 },

279 { 
ngx_°rög
("fastcgi_pass_request_body"),

280 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

281 
ngx_c⁄f_£t_Êag_¶Ÿ
,

282 
NGX_HTTP_LOC_CONF_OFFSET
,

283 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

284 
NULL
 },

286 { 
ngx_°rög
("fastcgi_intercept_errors"),

287 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

288 
ngx_c⁄f_£t_Êag_¶Ÿ
,

289 
NGX_HTTP_LOC_CONF_OFFSET
,

290 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

291 
NULL
 },

293 { 
ngx_°rög
("fastcgi_read_timeout"),

294 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

295 
ngx_c⁄f_£t_m£c_¶Ÿ
,

296 
NGX_HTTP_LOC_CONF_OFFSET
,

297 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

298 
NULL
 },

300 { 
ngx_°rög
("fastcgi_buffers"),

301 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

302 
ngx_c⁄f_£t_bufs_¶Ÿ
,

303 
NGX_HTTP_LOC_CONF_OFFSET
,

304 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

305 
NULL
 },

307 { 
ngx_°rög
("fastcgi_busy_buffers_size"),

308 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

309 
ngx_c⁄f_£t_size_¶Ÿ
,

310 
NGX_HTTP_LOC_CONF_OFFSET
,

311 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

312 
NULL
 },

314 #i‡(
NGX_HTTP_CACHE
)

316 { 
ngx_°rög
("fastcgi_cache"),

317 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

318 
ngx_hâp_Á°cgi_ˇche
,

319 
NGX_HTTP_LOC_CONF_OFFSET
,

321 
NULL
 },

323 { 
ngx_°rög
("fastcgi_cache_key"),

324 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

325 
ngx_hâp_Á°cgi_ˇche_key
,

326 
NGX_HTTP_LOC_CONF_OFFSET
,

328 
NULL
 },

330 { 
ngx_°rög
("fastcgi_cache_path"),

331 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

332 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

335 &
ngx_hâp_Á°cgi_moduÀ
 },

337 { 
ngx_°rög
("fastcgi_cache_bypass"),

338 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

339 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

340 
NGX_HTTP_LOC_CONF_OFFSET
,

341 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

342 
NULL
 },

344 { 
ngx_°rög
("fastcgi_no_cache"),

345 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

346 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

347 
NGX_HTTP_LOC_CONF_OFFSET
,

348 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

349 
NULL
 },

351 { 
ngx_°rög
("fastcgi_cache_valid"),

352 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

353 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

354 
NGX_HTTP_LOC_CONF_OFFSET
,

355 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

356 
NULL
 },

358 { 
ngx_°rög
("fastcgi_cache_min_uses"),

359 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

360 
ngx_c⁄f_£t_num_¶Ÿ
,

361 
NGX_HTTP_LOC_CONF_OFFSET
,

362 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

363 
NULL
 },

365 { 
ngx_°rög
("fastcgi_cache_use_stale"),

366 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

367 
ngx_c⁄f_£t_bômask_¶Ÿ
,

368 
NGX_HTTP_LOC_CONF_OFFSET
,

369 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

370 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

372 { 
ngx_°rög
("fastcgi_cache_methods"),

373 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

374 
ngx_c⁄f_£t_bômask_¶Ÿ
,

375 
NGX_HTTP_LOC_CONF_OFFSET
,

376 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

377 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

381 { 
ngx_°rög
("fastcgi_temp_path"),

382 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

383 
ngx_c⁄f_£t_∑th_¶Ÿ
,

384 
NGX_HTTP_LOC_CONF_OFFSET
,

385 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

386 
NULL
 },

388 { 
ngx_°rög
("fastcgi_max_temp_file_size"),

389 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

390 
ngx_c⁄f_£t_size_¶Ÿ
,

391 
NGX_HTTP_LOC_CONF_OFFSET
,

392 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

393 
NULL
 },

395 { 
ngx_°rög
("fastcgi_temp_file_write_size"),

396 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

397 
ngx_c⁄f_£t_size_¶Ÿ
,

398 
NGX_HTTP_LOC_CONF_OFFSET
,

399 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

400 
NULL
 },

402 { 
ngx_°rög
("fastcgi_next_upstream"),

403 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

404 
ngx_c⁄f_£t_bômask_¶Ÿ
,

405 
NGX_HTTP_LOC_CONF_OFFSET
,

406 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

407 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

409 { 
ngx_°rög
("fastcgi_param"),

410 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

411 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

412 
NGX_HTTP_LOC_CONF_OFFSET
,

413 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
∑øms_sour˚
),

414 
NULL
 },

416 { 
ngx_°rög
("fastcgi_pass_header"),

417 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

418 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

419 
NGX_HTTP_LOC_CONF_OFFSET
,

420 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

421 
NULL
 },

423 { 
ngx_°rög
("fastcgi_hide_header"),

424 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

425 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

426 
NGX_HTTP_LOC_CONF_OFFSET
,

427 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

428 
NULL
 },

430 { 
ngx_°rög
("fastcgi_ignore_headers"),

431 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

432 
ngx_c⁄f_£t_bômask_¶Ÿ
,

433 
NGX_HTTP_LOC_CONF_OFFSET
,

434 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

435 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

437 { 
ngx_°rög
("fastcgi_catch_stderr"),

438 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

439 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

440 
NGX_HTTP_LOC_CONF_OFFSET
,

441 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ˇtch_°dîr
),

442 
NULL
 },

444 
ngx_nuŒ_comm™d


448 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ_˘x
 = {

449 
ngx_hâp_Á°cgi_add_v¨übÀs
,

450 
NULL
,

452 
NULL
,

453 
NULL
,

455 
NULL
,

456 
NULL
,

458 
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
,

459 
ngx_hâp_Á°cgi_mîge_loc_c⁄f


463 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
 = {

464 
NGX_MODULE_V1
,

465 &
ngx_hâp_Á°cgi_moduÀ_˘x
,

466 
ngx_hâp_Á°cgi_comm™ds
,

467 
NGX_HTTP_MODULE
,

468 
NULL
,

469 
NULL
,

470 
NULL
,

471 
NULL
,

472 
NULL
,

473 
NULL
,

474 
NULL
,

475 
NGX_MODULE_V1_PADDING


479 
ngx_hâp_Á°cgi_ªque°_°¨t_t
 
	gngx_hâp_Á°cgi_ªque°_°¨t
 = {

481 
NGX_HTTP_FASTCGI_BEGIN_REQUEST
,

485 (
ngx_hâp_Á°cgi_begö_ªque°_t
),

490 
NGX_HTTP_FASTCGI_RESPONDER
,

495 
NGX_HTTP_FASTCGI_PARAMS
,

502 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_Á°cgi_v¨s
[] = {

504 { 
ngx_°rög
("Á°cgi_s¸ùt_«me"), 
NULL
,

505 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
, 0,

506 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

508 { 
ngx_°rög
("Á°cgi_∑th_öfo"), 
NULL
,

509 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
, 0,

510 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

512 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

516 
ngx_°r_t
 
	gngx_hâp_Á°cgi_hide_hódîs
[] = {

517 
ngx_°rög
("Status"),

518 
ngx_°rög
("X-Accel-Expires"),

519 
ngx_°rög
("X-Accel-Redirect"),

520 
ngx_°rög
("X-Accel-Limit-Rate"),

521 
ngx_°rög
("X-Accel-Buffering"),

522 
ngx_°rög
("X-Accel-Charset"),

523 
ngx_nuŒ_°rög


527 #i‡(
NGX_HTTP_CACHE
)

529 
ngx_keyvÆ_t
 
	gngx_hâp_Á°cgi_ˇche_hódîs
[] = {

530 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

531 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

532 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

533 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

534 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

535 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

536 { 
ngx_nuŒ_°rög
,Çgx_null_string }

542 
ngx_∑th_öô_t
 
	gngx_hâp_Á°cgi_ãmp_∑th
 = {

543 
ngx_°rög
(
NGX_HTTP_FASTCGI_TEMP_PATH
), { 1, 2, 0 }

547 
ngx_öt_t


548 
	$ngx_hâp_Á°cgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

550 
ngx_öt_t
 
rc
;

551 
ngx_hâp_up°ªam_t
 *
u
;

552 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

553 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

555 i‡(
r
->
subªque°_ö_mem‹y
) {

556 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

559  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

562 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

563  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

566 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

567 i‡(
f
 =
NULL
) {

568  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

571 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

573 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

575 i‡(
Êcf
->
Á°cgi_Àngths
) {

576 i‡(
	`ngx_hâp_Á°cgi_evÆ
(
r
, 
Êcf
Ë!
NGX_OK
) {

577  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

581 
u
 = 
r
->
up°ªam
;

583 
	`ngx_°r_£t
(&
u
->
schema
, "fastcgi://");

584 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_moduÀ
;

586 
u
->
c⁄f
 = &
Êcf
->
up°ªam
;

588 #i‡(
NGX_HTTP_CACHE
)

589 
u
->
¸óã_key
 = 
ngx_hâp_Á°cgi_¸óã_key
;

591 
u
->
¸óã_ªque°
 = 
ngx_hâp_Á°cgi_¸óã_ªque°
;

592 
u
->
ªöô_ªque°
 = 
ngx_hâp_Á°cgi_ªöô_ªque°
;

593 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_Á°cgi_¥o˚ss_hódî
;

594 
u
->
ab‹t_ªque°
 = 
ngx_hâp_Á°cgi_ab‹t_ªque°
;

595 
u
->
föÆize_ªque°
 = 
ngx_hâp_Á°cgi_föÆize_ªque°
;

597 
u
->
buf„rög
 = 1;

599 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

600 i‡(
u
->
pùe
 =
NULL
) {

601  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

604 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_öput_fûãr
;

605 
u
->
pùe
->
öput_˘x
 = 
r
;

607 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

609 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

610  
rc
;

613  
NGX_DONE
;

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

620 
ngx_uæ_t
 
uæ
;

621 
ngx_hâp_up°ªam_t
 *
u
;

623 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

625 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
Êcf
->
Á°cgi_Àngths
->
ñts
, 0,

626 
Êcf
->
Á°cgi_vÆues
->
ñts
)

627 =
NULL
)

629  
NGX_ERROR
;

632 
uæ
.
no_ªsﬁve
 = 1;

634 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

635 i‡(
uæ
.
îr
) {

636 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

637 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

640  
NGX_ERROR
;

643 
u
 = 
r
->
up°ªam
;

645 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

646 i‡(
u
->
ªsﬁved
 =
NULL
) {

647  
NGX_ERROR
;

650 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

651 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

652 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

653 
u
->
ªsﬁved
->
«ddrs
 = 1;

654 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

657 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

658 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

659 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

662  
NGX_OK
;

663 
	}
}

666 #i‡(
NGX_HTTP_CACHE
)

668 
ngx_öt_t


669 
	$ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

671 
ngx_°r_t
 *
key
;

672 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

674 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

675 i‡(
key
 =
NULL
) {

676  
NGX_ERROR
;

679 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

681 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Êcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

682  
NGX_ERROR
;

685  
NGX_OK
;

686 
	}
}

691 
ngx_öt_t


692 
	$ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

694 
off_t
 
fûe_pos
;

695 
u_ch¨
 
ch
, *
pos
, *
lowˇ£_key
;

696 
size_t
 
size
, 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
∑ddög
,

697 
Æloˇãd
;

698 
ngx_uöt_t
 
i
, 
n
, 
√xt
, 
hash
, 
hódî_∑øms
;

699 
ngx_buf_t
 *
b
;

700 
ngx_chaö_t
 *
˛
, *
body
;

701 
ngx_li°_∑π_t
 *
∑π
;

702 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

703 
ngx_hâp_s¸ùt_code_±
 
code
;

704 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

705 
ngx_hâp_Á°cgi_hódî_t
 *
h
;

706 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

707 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

709 
Àn
 = 0;

710 
hódî_∑øms
 = 0;

711 
ign‹ed
 = 
NULL
;

713 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

715 i‡(
Êcf
->
∑øms_Àn
) {

716 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

718 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
Êcf
->
Êushes
);

719 
À
.
Êushed
 = 1;

721 
À
.
ù
 = 
Êcf
->
∑øms_Àn
->
ñts
;

722 
À
.
ªque°
 = 
r
;

724 *(
uöçå_t
 *Ë
À
.
ù
) {

726 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

727 
key_Àn
 = 
	`lcode
(&
À
);

729 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

730 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

732 
À
.
ù
 +(
uöçå_t
);

734 
Àn
 +1 + 
key_Àn
 + ((
vÆ_Àn
 > 127) ? 4 : 1) + val_len;

738 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

740 
Æloˇãd
 = 0;

741 
lowˇ£_key
 = 
NULL
;

743 i‡(
Êcf
->
hódî_∑øms
) {

744 
n
 = 0;

745 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

747 
∑π
) {

748 
n
 +
∑π
->
√…s
;

749 
∑π
 =Ö¨t->
√xt
;

752 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

753 i‡(
ign‹ed
 =
NULL
) {

754  
NGX_ERROR
;

758 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

759 
hódî
 = 
∑π
->
ñts
;

761 
i
 = 0; ; i++) {

763 i‡(
i
 >
∑π
->
√…s
) {

764 i‡(
∑π
->
√xt
 =
NULL
) {

768 
∑π
 =Ö¨t->
√xt
;

769 
hódî
 = 
∑π
->
ñts
;

770 
i
 = 0;

773 i‡(
Êcf
->
hódî_∑øms
) {

774 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

775 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

776 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

777 i‡(
lowˇ£_key
 =
NULL
) {

778  
NGX_ERROR
;

782 
hash
 = 0;

784 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

785 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

787 i‡(
ch
 >= 'A' && ch <= 'Z') {

788 
ch
 |= 0x20;

790 } i‡(
ch
 == '-') {

791 
ch
 = '_';

794 
hash
 = 
	`ngx_hash
(hash, 
ch
);

795 
lowˇ£_key
[
n
] = 
ch
;

798 i‡(
	`ngx_hash_föd
(&
Êcf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

799 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

803 
n
 += ("HTTP_") - 1;

806 
n
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

809 
Àn
 +((
n
 > 127Ë? 4 : 1Ë+ ((
hódî
[
i
].
vÆue
.len > 127) ? 4 : 1)

810 + 
n
 + 
hódî
[
i
].
vÆue
.
Àn
;

815 i‡(
Àn
 > 65535) {

816 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

817 "Á°cgòªque°Ñec‹d i†toÿbig: %uz", 
Àn
);

818  
NGX_ERROR
;

822 
∑ddög
 = 8 - 
Àn
 % 8;

823 
∑ddög
 = (padding == 8) ? 0 :Öadding;

826 
size
 = (
ngx_hâp_Á°cgi_hódî_t
)

827 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

829 + (
ngx_hâp_Á°cgi_hódî_t
)

830 + 
Àn
 + 
∑ddög


831 + (
ngx_hâp_Á°cgi_hódî_t
)

833 + (
ngx_hâp_Á°cgi_hódî_t
);

836 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

837 i‡(
b
 =
NULL
) {

838  
NGX_ERROR
;

841 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

842 i‡(
˛
 =
NULL
) {

843  
NGX_ERROR
;

846 
˛
->
buf
 = 
b
;

848 
	`ngx_mem˝y
(
b
->
pos
, &
ngx_hâp_Á°cgi_ªque°_°¨t
,

849 (
ngx_hâp_Á°cgi_ªque°_°¨t_t
));

851 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *)

852 (
b
->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

853 + (
ngx_hâp_Á°cgi_begö_ªque°_t
));

855 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

856 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

857 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

858 
h
->
ª£rved
 = 0;

860 
b
->
œ°
 = b->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

861 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

862 + (
ngx_hâp_Á°cgi_hódî_t
);

865 i‡(
Êcf
->
∑øms_Àn
) {

866 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

868 
e
.
ù
 = 
Êcf
->
∑øms
->
ñts
;

869 
e
.
pos
 = 
b
->
œ°
;

870 
e
.
ªque°
 = 
r
;

871 
e
.
Êushed
 = 1;

873 
À
.
ù
 = 
Êcf
->
∑øms_Àn
->
ñts
;

875 *(
uöçå_t
 *Ë
À
.
ù
) {

877 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

878 
key_Àn
 = (
u_ch¨
Ë
	`lcode
(&
À
);

880 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

881 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

883 
À
.
ù
 +(
uöçå_t
);

885 *
e
.
pos
++ = (
u_ch¨
Ë
key_Àn
;

887 i‡(
vÆ_Àn
 > 127) {

888 *
e
.
pos
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

889 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

890 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

891 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

894 *
e
.
pos
++ = (
u_ch¨
Ë
vÆ_Àn
;

897 *(
uöçå_t
 *Ë
e
.
ù
) {

898 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

899 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

901 
e
.
ù
 +(
uöçå_t
);

903 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

905 
key_Àn
, 
e
.
pos
 - (key_À¿+ 
vÆ_Àn
),

906 
vÆ_Àn
, 
e
.
pos
 - val_len);

909 
b
->
œ°
 = 
e
.
pos
;

913 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

915 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

916 
hódî
 = 
∑π
->
ñts
;

918 
i
 = 0; ; i++) {

920 i‡(
i
 >
∑π
->
√…s
) {

921 i‡(
∑π
->
√xt
 =
NULL
) {

925 
∑π
 =Ö¨t->
√xt
;

926 
hódî
 = 
∑π
->
ñts
;

927 
i
 = 0;

930 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

931 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

932 
√xt
;

936 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

937 i‡(
key_Àn
 > 127) {

938 *
b
->
œ°
++ = (
u_ch¨
Ë(((
key_Àn
 >> 24) & 0x7f) | 0x80);

939 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 16) & 0xff);

940 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

941 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

944 *
b
->
œ°
++ = (
u_ch¨
Ë
key_Àn
;

947 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

948 i‡(
vÆ_Àn
 > 127) {

949 *
b
->
œ°
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

950 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

951 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

952 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

955 *
b
->
œ°
++ = (
u_ch¨
Ë
vÆ_Àn
;

958 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

960 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

961 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

963 i‡(
ch
 >= 'a' && ch <= 'z') {

964 
ch
 &= ~0x20;

966 } i‡(
ch
 == '-') {

967 
ch
 = '_';

970 *
b
->
œ°
++ = 
ch
;

973 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

975 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

977 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 
vÆ_Àn
),

978 
vÆ_Àn
, 
b
->
œ°
 - val_len);

979 
√xt
:

986 i‡(
∑ddög
) {

987 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

988 
b
->
œ°
 +
∑ddög
;

992 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

993 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

995 
h
->
vîsi⁄
 = 1;

996 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_PARAMS
;

997 
h
->
ªque°_id_hi
 = 0;

998 
h
->
ªque°_id_lo
 = 1;

999 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1000 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1001 
h
->
∑ddög_Àngth
 = 0;

1002 
h
->
ª£rved
 = 0;

1004 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1005 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1007 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_body
) {

1008 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

1009 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1011 #i‡(
NGX_SUPPRESS_WARN
)

1012 
fûe_pos
 = 0;

1013 
pos
 = 
NULL
;

1016 
body
) {

1018 i‡(
body
->
buf
->
ö_fûe
) {

1019 
fûe_pos
 = 
body
->
buf
->file_pos;

1022 
pos
 = 
body
->
buf
->pos;

1025 
√xt
 = 0;

1028 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1029 i‡(
b
 =
NULL
) {

1030  
NGX_ERROR
;

1033 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1035 i‡(
body
->
buf
->
ö_fûe
) {

1036 
b
->
fûe_pos
 = file_pos;

1037 
fûe_pos
 += 32 * 1024;

1039 i‡(
fûe_pos
 >
body
->
buf
->
fûe_œ°
) {

1040 
fûe_pos
 = 
body
->
buf
->
fûe_œ°
;

1041 
√xt
 = 1;

1044 
b
->
fûe_œ°
 = 
fûe_pos
;

1045 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1048 
b
->
pos
 =Öos;

1049 
pos
 += 32 * 1024;

1051 i‡(
pos
 >
body
->
buf
->
œ°
) {

1052 
pos
 = 
body
->
buf
->
œ°
;

1053 
√xt
 = 1;

1056 
b
->
œ°
 = 
pos
;

1057 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1060 
∑ddög
 = 8 - 
Àn
 % 8;

1061 
∑ddög
 = (padding == 8) ? 0 :Öadding;

1063 
h
->
vîsi⁄
 = 1;

1064 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1065 
h
->
ªque°_id_hi
 = 0;

1066 
h
->
ªque°_id_lo
 = 1;

1067 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1068 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1069 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1070 
h
->
ª£rved
 = 0;

1072 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1073 i‡(
˛
->
√xt
 =
NULL
) {

1074  
NGX_ERROR
;

1077 
˛
 = cl->
√xt
;

1078 
˛
->
buf
 = 
b
;

1080 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

1081 (
ngx_hâp_Á°cgi_hódî_t
)

1082 + 
∑ddög
);

1083 i‡(
b
 =
NULL
) {

1084  
NGX_ERROR
;

1087 i‡(
∑ddög
) {

1088 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1089 
b
->
œ°
 +
∑ddög
;

1092 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1093 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1095 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1096 i‡(
˛
->
√xt
 =
NULL
) {

1097  
NGX_ERROR
;

1100 
˛
 = cl->
√xt
;

1101 
˛
->
buf
 = 
b
;

1103 } !
√xt
);

1105 
body
 = body->
√xt
;

1109 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1112 
h
->
vîsi⁄
 = 1;

1113 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1114 
h
->
ªque°_id_hi
 = 0;

1115 
h
->
ªque°_id_lo
 = 1;

1116 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1117 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1118 
h
->
∑ddög_Àngth
 = 0;

1119 
h
->
ª£rved
 = 0;

1121 
˛
->
√xt
 = 
NULL
;

1123  
NGX_OK
;

1124 
	}
}

1127 
ngx_öt_t


1128 
	$ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1130 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1132 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1134 i‡(
f
 =
NULL
) {

1135  
NGX_OK
;

1138 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1139 
f
->
Á°cgi_°dout
 = 0;

1140 
f
->
œrge_°dîr
 = 0;

1142  
NGX_OK
;

1143 
	}
}

1146 
ngx_öt_t


1147 
	$ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1149 
u_ch¨
 *
p
, *
msg
, *
°¨t
, *
œ°
,

1150 *
∑π_°¨t
, *
∑π_íd
;

1151 
size_t
 
size
;

1152 
ngx_°r_t
 *
°©us_löe
, *
∑âîn
;

1153 
ngx_öt_t
 
rc
, 
°©us
;

1154 
ngx_buf_t
 
buf
;

1155 
ngx_uöt_t
 
i
;

1156 
ngx_èbÀ_ñt_t
 *
h
;

1157 
ngx_hâp_up°ªam_t
 *
u
;

1158 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1159 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1160 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1161 
ngx_hâp_Á°cgi_•lô_∑π_t
 *
∑π
;

1162 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1164 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1166 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1168 
u
 = 
r
->
up°ªam
;

1172 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1174 
f
->
pos
 = 
u
->
buf„r
.pos;

1175 
f
->
œ°
 = 
u
->
buf„r
.last;

1177 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1179 
u
->
buf„r
.
pos
 = 
f
->pos;

1180 
u
->
buf„r
.
œ°
 = 
f
->last;

1182 i‡(
rc
 =
NGX_AGAIN
) {

1183  
NGX_AGAIN
;

1186 i‡(
rc
 =
NGX_ERROR
) {

1187  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1190 i‡(
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDOUT


1191 && 
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDERR
)

1193 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1195 
f
->
ty≥
);

1197  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1200 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1201 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1204  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1208 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1210 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 < u->buf„r.
œ°
) {

1211 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1212 
u
->
buf„r
.
pos
 +
f
->
∑ddög
;

1217 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 =u->buf„r.
œ°
) {

1218 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1219 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1221  
NGX_AGAIN
;

1224 
f
->
∑ddög
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1225 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1227  
NGX_AGAIN
;

1233 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1235 i‡(
f
->
Àngth
) {

1236 
msg
 = 
u
->
buf„r
.
pos
;

1238 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 <u->buf„r.
œ°
) {

1239 
u
->
buf„r
.
pos
 +
f
->
Àngth
;

1240 
f
->
Àngth
 = 0;

1241 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1244 
f
->
Àngth
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1245 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1248 
p
 = 
u
->
buf„r
.
pos
 - 1; 
msg
 <Ö;Ö--) {

1249 i‡(*
p
 !
LF
 && *∞!
CR
 && *p != '.' && *p != ' ') {

1254 
p
++;

1256 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1257 "Fa°CGI síàö stdîr: \"%*s\"", 
p
 - 
msg
, msg);

1259 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1261 i‡(
Êcf
->
ˇtch_°dîr
) {

1262 
∑âîn
 = 
Êcf
->
ˇtch_°dîr
->
ñts
;

1264 
i
 = 0; i < 
Êcf
->
ˇtch_°dîr
->
√…s
; i++) {

1265 i‡(
	`ngx_°∫°r
(
msg
, (*Ë
∑âîn
[
i
].
d©a
,

1266 
p
 - 
msg
)

1267 !
NULL
)

1269  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1274 i‡(
u
->
buf„r
.
pos
 =u->buf„r.
œ°
) {

1276 i‡(!
f
->
Á°cgi_°dout
) {

1283 #i‡(
NGX_HTTP_CACHE
)

1284 i‡(
r
->
ˇche
) {

1285 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t


1286 + 
r
->
ˇche
->
hódî_°¨t
;

1288 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1291 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1293 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1294 
f
->
œrge_°dîr
 = 1;

1297  
NGX_AGAIN
;

1301 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1310 #i‡(
NGX_HTTP_CACHE
)

1312 i‡(
f
->
œrge_°dîr
 && 
r
->
ˇche
) {

1313 
u_ch¨
 *
°¨t
;

1314 
ssize_t
 
Àn
;

1315 
ngx_hâp_Á°cgi_hódî_t
 *
fh
;

1317 
°¨t
 = 
u
->
buf„r
.°¨à+ 
r
->
ˇche
->
hódî_°¨t
;

1319 
Àn
 = 
u
->
buf„r
.
pos
 - 
°¨t
 - 2 * (
ngx_hâp_Á°cgi_hódî_t
);

1329 i‡(
Àn
 >= 0) {

1330 
fh
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
°¨t
;

1331 
fh
->
vîsi⁄
 = 1;

1332 
fh
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDERR
;

1333 
fh
->
ªque°_id_hi
 = 0;

1334 
fh
->
ªque°_id_lo
 = 1;

1335 
fh
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1336 
fh
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1337 
fh
->
∑ddög_Àngth
 = 0;

1338 
fh
->
ª£rved
 = 0;

1341 
r
->
ˇche
->
hódî_°¨t
 +
u
->
buf„r
.
pos
 - 
°¨t


1342 - (
ngx_hâp_Á°cgi_hódî_t
);

1345 
f
->
œrge_°dîr
 = 0;

1350 
f
->
Á°cgi_°dout
 = 1;

1352 
°¨t
 = 
u
->
buf„r
.
pos
;

1354 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 < u->buf„r.
œ°
) {

1361 
œ°
 = 
u
->
buf„r
.last;

1362 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
 + 
f
->
Àngth
;

1365 
œ°
 = 
NULL
;

1370 
∑π_°¨t
 = 
u
->
buf„r
.
pos
;

1371 
∑π_íd
 = 
u
->
buf„r
.
œ°
;

1373 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
u
->
buf„r
, 1);

1375 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1376 "hâ∞Á°cgò∑r£r: %d", 
rc
);

1378 i‡(
rc
 =
NGX_AGAIN
) {

1382 i‡(
rc
 =
NGX_OK
) {

1386 
h
 = 
	`ngx_li°_push
(&
u
->
hódîs_ö
.
hódîs
);

1387 i‡(
h
 =
NULL
) {

1388  
NGX_ERROR
;

1391 i‡(
f
->
•lô_∑πs
 && f->•lô_∑πs->
√…s
) {

1393 
∑π
 = 
f
->
•lô_∑πs
->
ñts
;

1394 
size
 = 
u
->
buf„r
.
pos
 - 
∑π_°¨t
;

1396 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1397 
size
 +
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
;

1400 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
size
);

1401 i‡(
p
 =
NULL
) {

1402  
NGX_ERROR
;

1405 
buf
.
pos
 = 
p
;

1407 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1408 
p
 = 
	`ngx_˝ymem
’, 
∑π
[
i
].
°¨t
,

1409 
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
);

1412 
p
 = 
	`ngx_˝ymem
’, 
∑π_°¨t
, 
u
->
buf„r
.
pos
 -Öart_start);

1414 
buf
.
œ°
 = 
p
;

1416 
f
->
•lô_∑πs
->
√…s
 = 0;

1418 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
buf
, 1);

1420 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1421 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1422 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1424 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1425 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1426 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1428 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1429 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1430  
NGX_ERROR
;

1435 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1436 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1438 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1439 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1440 + 
h
->
key
.
Àn
);

1441 i‡(
h
->
key
.
d©a
 =
NULL
) {

1442  
NGX_ERROR
;

1445 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1446 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1

1447 + 
h
->
vÆue
.
Àn
 + 1;

1449 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1450 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1451 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1452 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1455 
h
->
hash
 = 
r
->
hódî_hash
;

1457 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1458 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1461 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1464 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1465 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1467 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1468  
NGX_ERROR
;

1471 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1473 &
h
->
key
, &h->
vÆue
);

1475 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1484 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1488 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1491 i‡(
u
->
hódîs_ö
.
°©us
) {

1492 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1494 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1496 i‡(
°©us
 =
NGX_ERROR
) {

1497 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1499 
°©us_löe
);

1500  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1503 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1504 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1506 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1507 
u
->
hódîs_ö
.
°©us_n
 = 302;

1508 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1512 
u
->
hódîs_ö
.
°©us_n
 = 200;

1513 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1516 i‡(
u
->
°©e
) {

1517 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1525 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1528  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1531 i‡(
œ°
) {

1532 
u
->
buf„r
.
œ°
 =Üast;

1535 
f
->
Àngth
 -
u
->
buf„r
.
pos
 - 
°¨t
;

1537 i‡(
f
->
Àngth
 == 0) {

1538 i‡(
f
->
∑ddög
) {

1539 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1541 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1545 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1546  
NGX_OK
;

1549 i‡(
rc
 =
NGX_OK
) {

1555 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1558 i‡(
f
->
•lô_∑πs
 =
NULL
) {

1559 
f
->
•lô_∑πs
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 1,

1560 (
ngx_hâp_Á°cgi_•lô_∑π_t
));

1561 i‡(
f
->
•lô_∑πs
 =
NULL
) {

1562  
NGX_ERROR
;

1566 
∑π
 = 
	`ngx_¨øy_push
(
f
->
•lô_∑πs
);

1568 
∑π
->
°¨t
 = 
∑π_°¨t
;

1569 
∑π
->
íd
 = 
∑π_íd
;

1571 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1575  
NGX_AGAIN
;

1577 
	}
}

1580 
ngx_öt_t


1581 
	$ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1583 
u_ch¨
 *
m
, *
msg
;

1584 
ngx_öt_t
 
rc
;

1585 
ngx_buf_t
 *
b
, **
¥ev
;

1586 
ngx_chaö_t
 *
˛
;

1587 
ngx_hâp_ªque°_t
 *
r
;

1588 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1590 i‡(
buf
->
pos
 =buf->
œ°
) {

1591  
NGX_OK
;

1594 
r
 = 
p
->
öput_˘x
;

1595 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1597 
b
 = 
NULL
;

1598 
¥ev
 = &
buf
->
shadow
;

1600 
f
->
pos
 = 
buf
->pos;

1601 
f
->
œ°
 = 
buf
->last;

1604 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1606 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1608 i‡(
rc
 =
NGX_AGAIN
) {

1612 i‡(
rc
 =
NGX_ERROR
) {

1613  
NGX_ERROR
;

1616 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1617 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1618 
p
->
up°ªam_d⁄e
 = 1;

1620 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

1626 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1627 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1628 
p
->
up°ªam_d⁄e
 = 1;

1630 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

1638 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1640 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1641 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1642 
f
->
pos
 +f->
∑ddög
;

1647 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

1648 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1653 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

1661 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1663 i‡(
f
->
Àngth
) {

1665 i‡(
f
->
pos
 =f->
œ°
) {

1669 
msg
 = 
f
->
pos
;

1671 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1672 
f
->
pos
 +f->
Àngth
;

1673 
f
->
Àngth
 = 0;

1674 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1677 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1678 
f
->
pos
 = f->
œ°
;

1681 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

1682 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

1687 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
, 0,

1689 
m
 + 1 - 
msg
, msg);

1691 i‡(
f
->
pos
 =f->
œ°
) {

1696 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1705 i‡(
f
->
pos
 =f->
œ°
) {

1709 i‡(
p
->
‰ì
) {

1710 
˛
 = 
p
->
‰ì
;

1711 
b
 = 
˛
->
buf
;

1712 
p
->
‰ì
 = 
˛
->
√xt
;

1713 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

1716 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

1717 i‡(
b
 =
NULL
) {

1718  
NGX_ERROR
;

1722 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1724 
b
->
pos
 = 
f
->pos;

1725 
b
->
°¨t
 = 
buf
->start;

1726 
b
->
íd
 = 
buf
->end;

1727 
b
->
èg
 = 
p
->tag;

1728 
b
->
ãmp‹¨y
 = 1;

1729 
b
->
ªcy˛ed
 = 1;

1731 *
¥ev
 = 
b
;

1732 
¥ev
 = &
b
->
shadow
;

1734 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

1735 i‡(
˛
 =
NULL
) {

1736  
NGX_ERROR
;

1739 
˛
->
buf
 = 
b
;

1740 
˛
->
√xt
 = 
NULL
;

1742 i‡(
p
->
ö
) {

1743 *
p
->
œ°_ö
 = 
˛
;

1745 
p
->
ö
 = 
˛
;

1747 
p
->
œ°_ö
 = &
˛
->
√xt
;

1750  
b
->
num
 = 
buf
->num;

1752 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1753 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

1755 i‡(
f
->
pos
 + f->
Àngth
 < f->
œ°
) {

1757 i‡(
f
->
∑ddög
) {

1758 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1760 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1763 
f
->
pos
 +f->
Àngth
;

1764 
b
->
œ°
 = 
f
->
pos
;

1769 i‡(
f
->
pos
 + f->
Àngth
 =f->
œ°
) {

1771 i‡(
f
->
∑ddög
) {

1772 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1774 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1777 
b
->
œ°
 = 
f
->last;

1782 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1784 
b
->
œ°
 = 
f
->last;

1790 i‡(
b
) {

1791 
b
->
shadow
 = 
buf
;

1792 
b
->
œ°_shadow
 = 1;

1794 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1795 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

1797  
NGX_OK
;

1802 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

1803  
NGX_ERROR
;

1806  
NGX_OK
;

1807 
	}
}

1810 
ngx_öt_t


1811 
	$ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

1812 
ngx_hâp_Á°cgi_˘x_t
 *
f
)

1814 
u_ch¨
 
ch
, *
p
;

1815 
ngx_hâp_Á°cgi_°©e_e
 
°©e
;

1817 
°©e
 = 
f
->state;

1819 
p
 = 
f
->
pos
;Ö < f->
œ°
;Ö++) {

1821 
ch
 = *
p
;

1823 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1824 "hâ∞Á°cgòªc‹d byã: %02Xd", 
ch
);

1826 
°©e
) {

1828 
ngx_hâp_Á°cgi_°_vîsi⁄
:

1829 i‡(
ch
 != 1) {

1830 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1832 "¥Ÿocﬁ vîsi⁄: %d", 
ch
);

1833  
NGX_ERROR
;

1835 
°©e
 = 
ngx_hâp_Á°cgi_°_ty≥
;

1838 
ngx_hâp_Á°cgi_°_ty≥
:

1839 
ch
) {

1840 
NGX_HTTP_FASTCGI_STDOUT
:

1841 
NGX_HTTP_FASTCGI_STDERR
:

1842 
NGX_HTTP_FASTCGI_END_REQUEST
:

1843 
f
->
ty≥
 = (
ngx_uöt_t
Ë
ch
;

1846 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1848 "ªc‹dÅy≥: %d", 
ch
);

1849  
NGX_ERROR
;

1852 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_hi
;

1857 
ngx_hâp_Á°cgi_°_ªque°_id_hi
:

1858 i‡(
ch
 != 0) {

1859 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1861 "ªque° id high byã: %d", 
ch
);

1862  
NGX_ERROR
;

1864 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_lo
;

1867 
ngx_hâp_Á°cgi_°_ªque°_id_lo
:

1868 i‡(
ch
 != 1) {

1869 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1871 "ªque° idÜow byã: %d", 
ch
);

1872  
NGX_ERROR
;

1874 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
;

1877 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
:

1878 
f
->
Àngth
 = 
ch
 << 8;

1879 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
;

1882 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
:

1883 
f
->
Àngth
 |(
size_t
Ë
ch
;

1884 
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
;

1887 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
:

1888 
f
->
∑ddög
 = (
size_t
Ë
ch
;

1889 
°©e
 = 
ngx_hâp_Á°cgi_°_ª£rved
;

1892 
ngx_hâp_Á°cgi_°_ª£rved
:

1893 
°©e
 = 
ngx_hâp_Á°cgi_°_d©a
;

1895 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1896 "hâ∞Á°cgòªc‹dÜígth: %z", 
f
->
Àngth
);

1898 
f
->
pos
 = 
p
 + 1;

1899 
f
->
°©e
 = state;

1901  
NGX_OK
;

1904 
ngx_hâp_Á°cgi_°_d©a
:

1905 
ngx_hâp_Á°cgi_°_∑ddög
:

1910 
f
->
°©e
 = state;

1912  
NGX_AGAIN
;

1913 
	}
}

1917 
	$ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1919 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1923 
	}
}

1927 
	$ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1929 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1933 
	}
}

1936 
ngx_öt_t


1937 
	$ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

1939 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

1941 
v
 = 
ngx_hâp_Á°cgi_v¨s
; v->
«me
.
Àn
; v++) {

1942 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

1943 i‡(
v¨
 =
NULL
) {

1944  
NGX_ERROR
;

1947 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

1948 
v¨
->
d©a
 = 
v
->data;

1951  
NGX_OK
;

1952 
	}
}

1956 
	$ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1958 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
;

1960 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_Á°cgi_loc_c⁄f_t
));

1961 i‡(
c⁄f
 =
NULL
) {

1962  
NULL
;

1983 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1984 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1985 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1986 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1988 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1989 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1990 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1992 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1993 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1995 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1996 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1997 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1999 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2000 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2002 #i‡(
NGX_HTTP_CACHE
)

2003 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

2004 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2005 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2006 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2007 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2010 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2011 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2013 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2016 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2018 
c⁄f
->
ˇtch_°dîr
 = 
NGX_CONF_UNSET_PTR
;

2020 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "fastcgi");

2022  
c⁄f
;

2023 
	}
}

2027 
	$ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2029 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2030 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2032 
size_t
 
size
;

2033 
ngx_hash_öô_t
 
hash
;

2034 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2036 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

2037 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2038 
¥ev
->
up°ªam
.
°‹e
, 0);

2040 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

2041 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2042 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2046 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2047 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2049 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2050 
¥ev
->
up°ªam
.
buf„rög
, 1);

2052 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2053 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2055 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2056 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2058 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2059 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2061 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2062 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2064 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2065 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2067 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2068 
¥ev
->
up°ªam
.
buf„r_size
,

2069 (
size_t
Ë
ngx_∑gesize
);

2072 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2073 8, 
ngx_∑gesize
);

2075 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2076 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2078  
NGX_CONF_ERROR
;

2082 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2083 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2084 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2088 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2089 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2090 
NGX_CONF_UNSET_SIZE
);

2092 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2093 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2095 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2096 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2099 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2100 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2105  
NGX_CONF_ERROR
;

2108 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2109 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2111 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2115  
NGX_CONF_ERROR
;

2119 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2120 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2121 
NGX_CONF_UNSET_SIZE
);

2123 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2124 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2126 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2127 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2130 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2131 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2136  
NGX_CONF_ERROR
;

2140 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2141 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2142 
NGX_CONF_UNSET_SIZE
);

2144 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2145 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2147 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2148 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2151 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2152 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2154 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2160  
NGX_CONF_ERROR
;

2164 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2165 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2166 
NGX_CONF_BITMASK_SET
);

2169 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2170 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2171 (
NGX_CONF_BITMASK_SET


2172 |
NGX_HTTP_UPSTREAM_FT_ERROR


2173 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2175 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2176 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2177 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2180 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2181 
¥ev
->
up°ªam
.
ãmp_∑th
,

2182 &
ngx_hâp_Á°cgi_ãmp_∑th
)

2183 !
NGX_OK
)

2185  
NGX_CONF_ERROR
;

2188 #i‡(
NGX_HTTP_CACHE
)

2190 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2191 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

2193 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

2194 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2196 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

2198 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2200 &
shm_z⁄e
->
shm
.
«me
);

2202  
NGX_CONF_ERROR
;

2205 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2206 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2208 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2209 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

2210 (
NGX_CONF_BITMASK_SET


2211 |
NGX_HTTP_UPSTREAM_FT_OFF
));

2213 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2214 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


2215 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2218 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2219 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

2222 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

2223 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

2226 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

2228 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

2229 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

2231 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

2232 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

2234 i‡(
c⁄f
->
up°ªam
.
no_ˇche
 && c⁄f->up°ªam.
ˇche_by∑ss
 =
NULL
) {

2235 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2240 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

2241 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

2243 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

2244 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

2249 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

2250 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

2251 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

2252 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

2254 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

2255 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

2257 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ˇtch_°dîr
, 
¥ev
->ˇtch_°dîr, 
NULL
);

2260 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ödex
, 
¥ev
->index, "");

2262 
hash
.
max_size
 = 512;

2263 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

2264 
hash
.
«me
 = "fastcgi_hide_headers_hash";

2266 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

2267 &
¥ev
->
up°ªam
, 
ngx_hâp_Á°cgi_hide_hódîs
, &
hash
)

2268 !
NGX_OK
)

2270  
NGX_CONF_ERROR
;

2273 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

2274 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

2277 i‡(
c⁄f
->
Á°cgi_Àngths
 =
NULL
) {

2278 
c⁄f
->
Á°cgi_Àngths
 = 
¥ev
->fastcgi_lengths;

2279 
c⁄f
->
Á°cgi_vÆues
 = 
¥ev
->fastcgi_values;

2282 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
Á°cgi_Àngths
) {

2283 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2284 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

2285 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

2289 #i‡(
NGX_PCRE
)

2290 i‡(
c⁄f
->
•lô_ªgex
 =
NULL
) {

2291 
c⁄f
->
•lô_ªgex
 = 
¥ev
->split_regex;

2292 
c⁄f
->
•lô_«me
 = 
¥ev
->split_name;

2296 i‡(
	`ngx_hâp_Á°cgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

2297  
NGX_CONF_ERROR
;

2300  
NGX_CONF_OK
;

2301 
	}
}

2304 
ngx_öt_t


2305 
	$ngx_hâp_Á°cgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

2306 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_Á°cgi_loc_c⁄f_à*
¥ev
)

2308 
u_ch¨
 *
p
;

2309 
size_t
 
size
;

2310 
uöçå_t
 *
code
;

2311 
ngx_uöt_t
 
i
, 
n§c
;

2312 
ngx_¨øy_t
 
hódîs_«mes
;

2313 #i‡(
NGX_HTTP_CACHE
)

2314 
ngx_¨øy_t
 
∑øms_mîged
;

2316 
ngx_keyvÆ_t
 *
§c
;

2317 
ngx_hash_key_t
 *
hk
;

2318 
ngx_hash_öô_t
 
hash
;

2319 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2320 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

2322 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

2323 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

2325 i‡(
¥ev
->
hódîs_hash
.
buckës


2326 #i‡(
NGX_HTTP_CACHE
)

2327 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
Ë=(
¥ev
->upstream.cache == NULL))

2331 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

2332 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

2333 
c⁄f
->
∑øms
 = 
¥ev
->params;

2334 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

2335 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

2337  
NGX_OK
;

2341 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


2342 #i‡(
NGX_HTTP_CACHE
)

2343 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

2347 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

2348  
NGX_OK
;

2351 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

2352 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

2353  
NGX_ERROR
;

2356 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

2357 i‡(
c⁄f
->
∑øms
 =
NULL
) {

2358  
NGX_ERROR
;

2361 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

2362 !
NGX_OK
)

2364  
NGX_ERROR
;

2367 i‡(
c⁄f
->
∑øms_sour˚
) {

2368 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

2369 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

2372 
§c
 = 
NULL
;

2373 
n§c
 = 0;

2376 #i‡(
NGX_HTTP_CACHE
)

2378 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

2379 
ngx_keyvÆ_t
 *
h
, *
s
;

2381 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

2382 !
NGX_OK
)

2384  
NGX_ERROR
;

2387 
i
 = 0; i < 
n§c
; i++) {

2389 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

2390 i‡(
s
 =
NULL
) {

2391  
NGX_ERROR
;

2394 *
s
 = 
§c
[
i
];

2397 
h
 = 
ngx_hâp_Á°cgi_ˇche_hódîs
;

2399 
h
->
key
.
Àn
) {

2401 
§c
 = 
∑øms_mîged
.
ñts
;

2402 
n§c
 = 
∑øms_mîged
.
√…s
;

2404 
i
 = 0; i < 
n§c
; i++) {

2405 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

2406 
√xt
;

2410 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

2411 i‡(
s
 =
NULL
) {

2412  
NGX_ERROR
;

2415 *
s
 = *
h
;

2417 
√xt
:

2419 
h
++;

2422 
§c
 = 
∑øms_mîged
.
ñts
;

2423 
n§c
 = 
∑øms_mîged
.
√…s
;

2428 
i
 = 0; i < 
n§c
; i++) {

2430 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

2431 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

2433 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

2434 i‡(
hk
 =
NULL
) {

2435  
NGX_ERROR
;

2438 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

2439 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

2440 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

2441 
hk
->
vÆue
 = (*) 1;

2443 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

2448 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

2449 (
ngx_hâp_s¸ùt_c›y_code_t
));

2450 i‡(
c›y
 =
NULL
) {

2451  
NGX_ERROR
;

2454 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

2455 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2458 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2459 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

2460 & ~((
uöçå_t
) - 1);

2462 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

2463 i‡(
c›y
 =
NULL
) {

2464  
NGX_ERROR
;

2467 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2468 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2470 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2471 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2474 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2476 
sc
.
cf
 = cf;

2477 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

2478 
sc
.
Êushes
 = &
c⁄f
->flushes;

2479 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

2480 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

2482 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2483  
NGX_ERROR
;

2486 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

2487 i‡(
code
 =
NULL
) {

2488  
NGX_ERROR
;

2491 *
code
 = (
uöçå_t
Ë
NULL
;

2494 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

2495 i‡(
code
 =
NULL
) {

2496  
NGX_ERROR
;

2499 *
code
 = (
uöçå_t
Ë
NULL
;

2502 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

2503 i‡(
code
 =
NULL
) {

2504  
NGX_ERROR
;

2507 *
code
 = (
uöçå_t
Ë
NULL
;

2509 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

2511 
hash
.hash = &
c⁄f
->
hódîs_hash
;

2512 
hash
.
key
 = 
ngx_hash_key_lc
;

2513 
hash
.
max_size
 = 512;

2514 
hash
.
buckë_size
 = 64;

2515 
hash
.
«me
 = "fastcgi_params_hash";

2516 
hash
.
poﬁ
 = 
cf
->pool;

2517 
hash
.
ãmp_poﬁ
 = 
NULL
;

2519  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

2520 
	}
}

2523 
ngx_öt_t


2524 
	$ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2525 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2527 
u_ch¨
 *
p
;

2528 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2529 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2531 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2533 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

2535 i‡(
f
 =
NULL
) {

2536  
NGX_ERROR
;

2539 i‡(
f
->
s¸ùt_«me
.
Àn
 == 0

2540 || 
f
->
s¸ùt_«me
.
d©a
[f->s¸ùt_«me.
Àn
 - 1] != '/')

2542 
v
->
Àn
 = 
f
->
s¸ùt_«me
.len;

2543 
v
->
vÆid
 = 1;

2544 
v
->
no_ˇchóbÀ
 = 0;

2545 
v
->
nŸ_found
 = 0;

2546 
v
->
d©a
 = 
f
->
s¸ùt_«me
.data;

2548  
NGX_OK
;

2551 
v
->
Àn
 = 
f
->
s¸ùt_«me
.À¿+ 
Êcf
->
ödex
.len;

2553 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2554 i‡(
v
->
d©a
 =
NULL
) {

2555  
NGX_ERROR
;

2558 
p
 = 
	`ngx_c›y
(
v
->
d©a
, 
f
->
s¸ùt_«me
.d©a, f->s¸ùt_«me.
Àn
);

2559 
	`ngx_mem˝y
(
p
, 
Êcf
->
ödex
.
d©a
, flcf->ödex.
Àn
);

2561  
NGX_OK
;

2562 
	}
}

2565 
ngx_öt_t


2566 
	$ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2567 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2569 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2570 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2572 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2574 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

2576 i‡(
f
 =
NULL
) {

2577  
NGX_ERROR
;

2580 
v
->
Àn
 = 
f
->
∑th_öfo
.len;

2581 
v
->
vÆid
 = 1;

2582 
v
->
no_ˇchóbÀ
 = 0;

2583 
v
->
nŸ_found
 = 0;

2584 
v
->
d©a
 = 
f
->
∑th_öfo
.data;

2586  
NGX_OK
;

2587 
	}
}

2590 
ngx_hâp_Á°cgi_˘x_t
 *

2591 
	$ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

2593 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2594 #i‡(
NGX_PCRE
)

2595 
ngx_öt_t
 
n
;

2596 
ˇ±uªs
[(1 + 2) * 3];

2598 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2600 i‡(
f
 =
NULL
) {

2601 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

2602 i‡(
f
 =
NULL
) {

2603  
NULL
;

2606 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

2609 i‡(
f
->
s¸ùt_«me
.
Àn
) {

2610  
f
;

2613 i‡(
Êcf
->
•lô_ªgex
 =
NULL
) {

2614 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2615  
f
;

2618 
n
 = 
	`ngx_ªgex_exec
(
Êcf
->
•lô_ªgex
, &
r
->
uri
, 
ˇ±uªs
, (1 + 2) * 3);

2620 i‡(
n
 >= 0) {

2621 
f
->
s¸ùt_«me
.
Àn
 = 
ˇ±uªs
[3] - captures[2];

2622 
f
->
s¸ùt_«me
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[2];

2624 
f
->
∑th_öfo
.
Àn
 = 
ˇ±uªs
[5] - captures[4];

2625 
f
->
∑th_öfo
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[4];

2627  
f
;

2630 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

2631 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2632  
f
;

2635 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2636 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

2637 
n
, &
r
->
uri
, &
Êcf
->
•lô_«me
);

2638  
NULL
;

2642 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2644 i‡(
f
 =
NULL
) {

2645 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

2646 i‡(
f
 =
NULL
) {

2647  
NULL
;

2650 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

2653 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2655  
f
;

2658 
	}
}

2662 
	$ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2664 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2666 
ngx_uæ_t
 
u
;

2667 
ngx_°r_t
 *
vÆue
, *
uæ
;

2668 
ngx_uöt_t
 
n
;

2669 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2670 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2672 i‡(
Êcf
->
up°ªam
.up°ªam || flcf->
Á°cgi_Àngths
) {

2676 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2678 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

2680 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

2681 
˛cf
->
auto_ªdúe˘
 = 1;

2684 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2686 
uæ
 = &
vÆue
[1];

2688 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

2690 i‡(
n
) {

2692 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2694 
sc
.
cf
 = cf;

2695 
sc
.
sour˚
 = 
uæ
;

2696 
sc
.
Àngths
 = &
Êcf
->
Á°cgi_Àngths
;

2697 
sc
.
vÆues
 = &
Êcf
->
Á°cgi_vÆues
;

2698 
sc
.
v¨übÀs
 = 
n
;

2699 
sc
.
com∂ëe_Àngths
 = 1;

2700 
sc
.
com∂ëe_vÆues
 = 1;

2702 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2703  
NGX_CONF_ERROR
;

2706  
NGX_CONF_OK
;

2709 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

2711 
u
.
uæ
 = 
vÆue
[1];

2712 
u
.
no_ªsﬁve
 = 1;

2714 
Êcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

2715 i‡(
Êcf
->
up°ªam
.up°ªam =
NULL
) {

2716  
NGX_CONF_ERROR
;

2719  
NGX_CONF_OK
;

2720 
	}
}

2724 
	$ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2726 #i‡(
NGX_PCRE
)

2727 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2729 
ngx_°r_t
 *
vÆue
;

2730 
ngx_ªgex_compûe_t
 
rc
;

2731 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

2733 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2735 
Êcf
->
•lô_«me
 = 
vÆue
[1];

2737 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

2739 
rc
.
∑âîn
 = 
vÆue
[1];

2740 
rc
.
poﬁ
 = 
cf
->pool;

2741 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

2742 
rc
.
îr
.
d©a
 = 
îr°r
;

2744 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

2745 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

2746  
NGX_CONF_ERROR
;

2749 i‡(
rc
.
ˇ±uªs
 != 2) {

2750 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2751 "∑âî¿\"%V\" mu° havê2 c≠tuªs", &
vÆue
[1]);

2752  
NGX_CONF_ERROR
;

2755 
Êcf
->
•lô_ªgex
 = 
rc
.
ªgex
;

2757  
NGX_CONF_OK
;

2761 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2762 "\"%V\"Ñequúe†PCREÜibøry", &
cmd
->
«me
);

2763  
NGX_CONF_ERROR
;

2766 
	}
}

2770 
	$ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2772 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2774 
ngx_°r_t
 *
vÆue
;

2775 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2777 i‡(
Êcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET


2778 || 
Êcf
->
up°ªam
.
°‹e_Àngths
)

2783 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2785 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2786 
Êcf
->
up°ªam
.
°‹e
 = 0;

2787  
NGX_CONF_OK
;

2790 #i‡(
NGX_HTTP_CACHE
)

2792 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


2793 && 
Êcf
->
up°ªam
.
ˇche
 !
NULL
)

2800 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

2801 
Êcf
->
up°ªam
.
°‹e
 = 1;

2802  
NGX_CONF_OK
;

2806 
vÆue
[1].
Àn
++;

2808 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2810 
sc
.
cf
 = cf;

2811 
sc
.
sour˚
 = &
vÆue
[1];

2812 
sc
.
Àngths
 = &
Êcf
->
up°ªam
.
°‹e_Àngths
;

2813 
sc
.
vÆues
 = &
Êcf
->
up°ªam
.
°‹e_vÆues
;

2814 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

2815 
sc
.
com∂ëe_Àngths
 = 1;

2816 
sc
.
com∂ëe_vÆues
 = 1;

2818 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2819  
NGX_CONF_ERROR
;

2822  
NGX_CONF_OK
;

2823 
	}
}

2826 #i‡(
NGX_HTTP_CACHE
)

2829 
	$ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2831 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2833 
ngx_°r_t
 *
vÆue
;

2835 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2837 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

2841 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2842 
Êcf
->
up°ªam
.
ˇche
 = 
NULL
;

2843  
NGX_CONF_OK
;

2846 i‡(
Êcf
->
up°ªam
.
°‹e
 > 0 || flcf->up°ªam.
°‹e_Àngths
) {

2850 
Êcf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

2851 &
ngx_hâp_Á°cgi_moduÀ
);

2852 i‡(
Êcf
->
up°ªam
.
ˇche
 =
NULL
) {

2853  
NGX_CONF_ERROR
;

2856  
NGX_CONF_OK
;

2857 
	}
}

2861 
	$ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2863 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2865 
ngx_°r_t
 *
vÆue
;

2866 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

2868 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2870 i‡(
Êcf
->
ˇche_key
.
vÆue
.
Àn
) {

2874 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

2876 
ccv
.
cf
 = cf;

2877 
ccv
.
vÆue
 = &value[1];

2878 
ccv
.
com∂ex_vÆue
 = &
Êcf
->
ˇche_key
;

2880 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2881  
NGX_CONF_ERROR
;

2884  
NGX_CONF_OK
;

2885 
	}
}

2891 
	$ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

2893 #i‡(
NGX_FREEBSD
)

2894 
ssize_t
 *
≈
 = 
d©a
;

2896 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

2897 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2900 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

2902  
NGX_CONF_ERROR
;

2905 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

2906 
ssize_t
 *
≈
 = 
d©a
;

2908 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

2911 *
≈
 = 0;

2915  
NGX_CONF_OK
;

2916 
	}
}

	@src/http/modules/ngx_http_flv_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_comm™d_t
 
	gngx_hâp_Êv_comm™ds
[] = {

16 { 
ngx_°rög
("flv"),

17 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

18 
ngx_hâp_Êv
,

21 
NULL
 },

23 
ngx_nuŒ_comm™d


27 
u_ch¨
 
	gngx_Êv_hódî
[] = "FLV\x1\x5\0\0\0\x9\0\0\0\0";

30 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Êv_moduÀ_˘x
 = {

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL
,

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL


45 
ngx_moduÀ_t
 
	gngx_hâp_Êv_moduÀ
 = {

46 
NGX_MODULE_V1
,

47 &
ngx_hâp_Êv_moduÀ_˘x
,

48 
ngx_hâp_Êv_comm™ds
,

49 
NGX_HTTP_MODULE
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NGX_MODULE_V1_PADDING


61 
ngx_öt_t


62 
	$ngx_hâp_Êv_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

64 
u_ch¨
 *
œ°
;

65 
off_t
 
°¨t
, 
Àn
;

66 
size_t
 
roŸ
;

67 
ngx_öt_t
 
rc
;

68 
ngx_uöt_t
 
Àvñ
, 
i
;

69 
ngx_°r_t
 
∑th
, 
vÆue
;

70 
ngx_log_t
 *
log
;

71 
ngx_buf_t
 *
b
;

72 
ngx_chaö_t
 
out
[2];

73 
ngx_›í_fûe_öfo_t
 
of
;

74 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

76 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

77  
NGX_HTTP_NOT_ALLOWED
;

80 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

81  
NGX_DECLINED
;

84 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

86 i‡(
rc
 !
NGX_OK
) {

87  
rc
;

90 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

91 i‡(
œ°
 =
NULL
) {

92  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

95 
log
 = 
r
->
c⁄√˘i⁄
->log;

97 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

99 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

100 "hâ∞Êv fûíame: \"%V\"", &
∑th
);

102 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

104 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

106 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

107 
of
.
dúe˘io
 = 
˛cf
->directio;

108 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

109 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

110 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

111 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

113 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

114 !
NGX_OK
)

116 
of
.
îr
) {

119  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

121 
NGX_ENOENT
:

122 
NGX_ENOTDIR
:

123 
NGX_ENAMETOOLONG
:

125 
Àvñ
 = 
NGX_LOG_ERR
;

126 
rc
 = 
NGX_HTTP_NOT_FOUND
;

129 
NGX_EACCES
:

131 
Àvñ
 = 
NGX_LOG_ERR
;

132 
rc
 = 
NGX_HTTP_FORBIDDEN
;

137 
Àvñ
 = 
NGX_LOG_CRIT
;

138 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

142 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

143 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

144 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

147  
rc
;

150 i‡(!
of
.
is_fûe
) {

152 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

154 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

157  
NGX_DECLINED
;

160 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

162 
°¨t
 = 0;

163 
Àn
 = 
of
.
size
;

164 
i
 = 1;

166 i‡(
r
->
¨gs
.
Àn
) {

168 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

170 
°¨t
 = 
	`ngx_©oof
(
vÆue
.
d©a
, vÆue.
Àn
);

172 i‡(
°¨t
 =
NGX_ERROR
 || sèπ >
Àn
) {

173 
°¨t
 = 0;

176 i‡(
°¨t
) {

177 
Àn
 = (
ngx_Êv_hódî
Ë- 1 +Üí - 
°¨t
;

178 
i
 = 0;

183 
log
->
a˘i⁄
 = "sending flvÅo client";

185 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

186 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

187 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

189 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

190  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

193 i‡(
i
 == 0) {

194 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

195 i‡(
b
 =
NULL
) {

196  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

199 
b
->
pos
 = 
ngx_Êv_hódî
;

200 
b
->
œ°
 = 
ngx_Êv_hódî
 + (ngx_flv_header) - 1;

201 
b
->
mem‹y
 = 1;

203 
out
[0].
buf
 = 
b
;

204 
out
[0].
√xt
 = &out[1];

208 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

209 i‡(
b
 =
NULL
) {

210  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

213 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

214 i‡(
b
->
fûe
 =
NULL
) {

215  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

218 
r
->
Ælow_ønges
 = 1;

220 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

222 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

223  
rc
;

226 
b
->
fûe_pos
 = 
°¨t
;

227 
b
->
fûe_œ°
 = 
of
.
size
;

229 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

230 
b
->
œ°_buf
 = 1;

231 
b
->
œ°_ö_chaö
 = 1;

233 
b
->
fûe
->
fd
 = 
of
.fd;

234 
b
->
fûe
->
«me
 = 
∑th
;

235 
b
->
fûe
->
log
 =Üog;

236 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

238 
out
[1].
buf
 = 
b
;

239 
out
[1].
√xt
 = 
NULL
;

241  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[
i
]);

242 
	}
}

246 
	$ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

248 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

250 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

251 
˛cf
->
h™dÀr
 = 
ngx_hâp_Êv_h™dÀr
;

253  
NGX_CONF_OK
;

254 
	}
}

	@src/http/modules/ngx_http_geo_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

15 
u_sh‹t
 
	m°¨t
;

16 
u_sh‹t
 
	míd
;

17 } 
	tngx_hâp_geo_ønge_t
;

21 
ngx_hâp_geo_ønge_t
 **
	mlow
;

22 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

23 } 
	tngx_hâp_geo_high_ønges_t
;

27 
ngx_°r_node_t
 
	m¢
;

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

29 
size_t
 
	moff£t
;

30 } 
	tngx_hâp_geo_v¨übÀ_vÆue_node_t
;

34 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

35 
ngx_°r_t
 *
	m√t
;

36 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

37 
ngx_ødix_åì_t
 *
	måì
;

38 
ngx_rbåì_t
 
	mrbåì
;

39 
ngx_rbåì_node_t
 
	m£¡öñ
;

40 
ngx_¨øy_t
 *
	m¥oxõs
;

41 
ngx_poﬁ_t
 *
	mpoﬁ
;

42 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

44 
size_t
 
	md©a_size
;

46 
ngx_°r_t
 
	mö˛ude_«me
;

47 
ngx_uöt_t
 
	mö˛udes
;

48 
ngx_uöt_t
 
	míåõs
;

50 
	mønges
:1;

51 
	moutside_íåõs
:1;

52 
	mÆlow_bö¨y_ö˛ude
:1;

53 
	mbö¨y_ö˛ude
:1;

54 } 
	tngx_hâp_geo_c⁄f_˘x_t
;

59 
ngx_ødix_åì_t
 *
	måì
;

60 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

61 } 
	mu
;

63 
ngx_¨øy_t
 *
	m¥oxõs
;

65 
ngx_öt_t
 
	mödex
;

66 } 
	tngx_hâp_geo_˘x_t
;

69 
ö_addr_t
 
ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_geo_˘x_t
 *
˘x
);

71 
ö_addr_t
 
ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_geo_˘x_t
 *
˘x
);

73 *
ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

74 *
ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

75 *
ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

76 
ngx_°r_t
 *
vÆue
);

77 *
ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
,

78 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

79 
ngx_uöt_t
 
ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
,

80 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

81 *
ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

82 
ngx_°r_t
 *
vÆue
);

83 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
,

84 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

85 *
ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
,

86 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_cidr_t
 *
cidr
);

87 
ngx_öt_t
 
ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

88 
ngx_cidr_t
 *
cidr
);

89 *
ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

90 
ngx_°r_t
 *
«me
);

91 
ngx_öt_t
 
ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
,

92 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

93 
ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
);

94 
u_ch¨
 *
ngx_hâp_geo_c›y_vÆues
(u_ch¨ *
ba£
, u_ch¨ *
p
,

95 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

98 
ngx_comm™d_t
 
	gngx_hâp_geo_comm™ds
[] = {

100 { 
ngx_°rög
("geo"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

102 
ngx_hâp_geo_block
,

103 
NGX_HTTP_MAIN_CONF_OFFSET
,

105 
NULL
 },

107 
ngx_nuŒ_comm™d


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geo_moduÀ_˘x
 = {

112 
NULL
,

113 
NULL
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
NULL
,

122 
NULL


126 
ngx_moduÀ_t
 
	gngx_hâp_geo_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_geo_moduÀ_˘x
,

129 
ngx_hâp_geo_comm™ds
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


143 
u_ch¨
 
	mGEORNG
[6];

144 
u_ch¨
 
	mvîsi⁄
;

145 
u_ch¨
 
	m±r_size
;

146 
uöt32_t
 
	mídü√ss
;

147 
uöt32_t
 
	m¸c32
;

148 } 
	tngx_hâp_geo_hódî_t
;

151 
ngx_hâp_geo_hódî_t
 
	gngx_hâp_geo_hódî
 = {

158 
ngx_öt_t


159 
	$ngx_hâp_geo_cidr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

160 
uöçå_t
 
d©a
)

162 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

164 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

166 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

167 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åì
, 
	`ngx_hâp_geo_addr
(
r
, ctx));

169 *
v
 = *
vv
;

171 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

172 "hâ∞geo: %v", 
v
);

174  
NGX_OK
;

175 
	}
}

178 
ngx_öt_t


179 
	$ngx_hâp_geo_ønge_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

180 
uöçå_t
 
d©a
)

182 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

184 
ö_addr_t
 
addr
;

185 
ngx_uöt_t
 
n
;

186 
ngx_hâp_geo_ønge_t
 *
ønge
;

188 *
v
 = *
˘x
->
u
.
high
.
deÁu…_vÆue
;

190 
addr
 = 
	`ngx_hâp_geo_addr
(
r
, 
˘x
);

192 
ønge
 = 
˘x
->
u
.
high
.
low
[
addr
 >> 16];

194 i‡(
ønge
) {

195 
n
 = 
addr
 & 0xffff;

197 i‡(
n
 >(
ngx_uöt_t
Ë
ønge
->
°¨t
 &&Ç <“gx_uöt_tËønge->
íd
)

199 *
v
 = *
ønge
->
vÆue
;

202 } (++
ønge
)->
vÆue
);

205 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

206 "hâ∞geo: %v", 
v
);

208  
NGX_OK
;

209 
	}
}

212 
ö_addr_t


213 
	$ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
)

215 
u_ch¨
 *
p
, *
ù
;

216 
size_t
 
Àn
;

217 
ö_addr_t
 
addr
;

218 
ngx_uöt_t
 
i
, 
n
;

219 
ngx_ö_cidr_t
 *
¥oxõs
;

220 
ngx_èbÀ_ñt_t
 *
xfwd
;

222 
addr
 = 
	`ngx_hâp_geo_ªÆ_addr
(
r
, 
˘x
);

224 
xfwd
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

226 i‡(
xfwd
 =
NULL
 || 
˘x
->
¥oxõs
 == NULL) {

227  
addr
;

230 
¥oxõs
 = 
˘x
->¥oxõs->
ñts
;

231 
n
 = 
˘x
->
¥oxõs
->
√…s
;

233 
i
 = 0; i < 
n
; i++) {

234 i‡((
addr
 & 
¥oxõs
[
i
].
mask
) ==Öroxies[i].addr) {

236 
Àn
 = 
xfwd
->
vÆue
.len;

237 
ù
 = 
xfwd
->
vÆue
.
d©a
;

239 
p
 = 
ù
 + 
Àn
 - 1;Ö > ip;Ö--) {

240 i‡(*
p
 == ' ' || *p == ',') {

241 
p
++;

242 
Àn
 -
p
 - 
ù
;

243 
ù
 = 
p
;

248  
	`¡ohl
(
	`ngx_öë_addr
(
ù
, 
Àn
));

252  
addr
;

253 
	}
}

256 
ö_addr_t


257 
	$ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
)

259 
sockaddr_ö
 *
sö
;

260 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

261 #i‡(
NGX_HAVE_INET6
)

262 
u_ch¨
 *
p
;

263 
ö_addr_t
 
addr
;

264 
sockaddr_ö6
 *
sö6
;

267 i‡(
˘x
->
ödex
 == -1) {

268 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

269 "hâ∞geÿ°¨ãd: %V", &
r
->
c⁄√˘i⁄
->
addr_ãxt
);

271 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

273 
AF_INET
:

274 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

275  
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

277 #i‡(
NGX_HAVE_INET6
)

279 
AF_INET6
:

280 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

282 i‡(
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

283 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

284 
addr
 = 
p
[12] << 24;

285 
addr
 +
p
[13] << 16;

286 
addr
 +
p
[14] << 8;

287 
addr
 +
p
[15];

289  
addr
;

295  
INADDR_NONE
;

298 
v
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
˘x
->
ödex
);

300 i‡(
v
 =
NULL
 || v->
nŸ_found
) {

301 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

307 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

308 "hâ∞geÿ°¨ãd: %v", 
v
);

310  
	`¡ohl
(
	`ngx_öë_addr
(
v
->
d©a
, v->
Àn
));

311 
	}
}

315 
	$ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

317 *
rv
;

318 **
p
;

319 
size_t
 
Àn
;

320 
ngx_°r_t
 *
vÆue
, 
«me
;

321 
ngx_uöt_t
 
i
;

322 
ngx_c⁄f_t
 
ßve
;

323 
ngx_poﬁ_t
 *
poﬁ
;

324 
ngx_¨øy_t
 *
a
;

325 
ngx_hâp_v¨übÀ_t
 *
v¨
;

326 
ngx_hâp_geo_˘x_t
 *
geo
;

327 
ngx_hâp_geo_c⁄f_˘x_t
 
˘x
;

329 
vÆue
 = 
cf
->
¨gs
->
ñts
;

331 
geo
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_geo_˘x_t
));

332 i‡(
geo
 =
NULL
) {

333  
NGX_CONF_ERROR
;

336 
«me
 = 
vÆue
[1];

337 
«me
.
Àn
--;

338 
«me
.
d©a
++;

340 i‡(
cf
->
¨gs
->
√…s
 == 3) {

342 
geo
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

343 i‡(
geo
->
ödex
 =
NGX_ERROR
) {

344  
NGX_CONF_ERROR
;

347 
«me
 = 
vÆue
[2];

348 
«me
.
Àn
--;

349 
«me
.
d©a
++;

352 
geo
->
ödex
 = -1;

355 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

356 i‡(
v¨
 =
NULL
) {

357  
NGX_CONF_ERROR
;

360 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(16384, 
cf
->
log
);

361 i‡(
poﬁ
 =
NULL
) {

362  
NGX_CONF_ERROR
;

365 
	`ngx_memzîo
(&
˘x
, (
ngx_hâp_geo_c⁄f_˘x_t
));

367 
˘x
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(16384, 
cf
->
log
);

368 i‡(
˘x
.
ãmp_poﬁ
 =
NULL
) {

369  
NGX_CONF_ERROR
;

372 
	`ngx_rbåì_öô
(&
˘x
.
rbåì
, &˘x.
£¡öñ
, 
ngx_°r_rbåì_ö£π_vÆue
);

374 
˘x
.
poﬁ
 = 
cf
->pool;

375 
˘x
.
d©a_size
 = (
ngx_hâp_geo_hódî_t
)

376 + (
ngx_hâp_v¨übÀ_vÆue_t
)

377 + 0x10000 * (
ngx_hâp_geo_ønge_t
 *);

378 
˘x
.
Ælow_bö¨y_ö˛ude
 = 1;

380 
ßve
 = *
cf
;

381 
cf
->
poﬁ
 =Öool;

382 
cf
->
˘x
 = &ctx;

383 
cf
->
h™dÀr
 = 
ngx_hâp_geo
;

384 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

386 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

388 *
cf
 = 
ßve
;

390 
geo
->
¥oxõs
 = 
˘x
.proxies;

392 i‡(
˘x
.
high
.
low
) {

394 i‡(!
˘x
.
bö¨y_ö˛ude
) {

395 
i
 = 0; i < 0x10000; i++) {

396 
a
 = (
ngx_¨øy_t
 *Ë
˘x
.
high
.
low
[
i
];

398 i‡(
a
 =
NULL
 ||á->
√…s
 == 0) {

402 
Àn
 = 
a
->
√…s
 * (
ngx_hâp_geo_ønge_t
);

404 
˘x
.
high
.
low
[
i
] = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
Àn
 + (*));

405 i‡(
˘x
.
high
.
low
[
i
] =
NULL
) {

406  
NGX_CONF_ERROR
;

409 
p
 = (**Ë
	`ngx_˝ymem
(
˘x
.
high
.
low
[
i
], 
a
->
ñts
, 
Àn
);

410 *
p
 = 
NULL
;

411 
˘x
.
d©a_size
 +
Àn
 + (*);

414 i‡(
˘x
.
Ælow_bö¨y_ö˛ude


415 && !
˘x
.
outside_íåõs


416 && 
˘x
.
íåõs
 > 100000

417 && 
˘x
.
ö˛udes
 == 1)

419 
	`ngx_hâp_geo_¸óã_bö¨y_ba£
(&
˘x
);

423 
geo
->
u
.
high
 = 
˘x
.high;

425 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_ønge_v¨übÀ
;

426 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

428 i‡(
˘x
.
high
.
deÁu…_vÆue
 =
NULL
) {

429 
˘x
.
high
.
deÁu…_vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

432 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

433 
	`ngx_de°roy_poﬁ
(
poﬁ
);

436 i‡(
˘x
.
åì
 =
NULL
) {

437 
˘x
.
åì
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

438 i‡(
˘x
.
åì
 =
NULL
) {

439  
NGX_CONF_ERROR
;

443 
geo
->
u
.
åì
 = 
˘x
.tree;

445 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_cidr_v¨übÀ
;

446 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

448 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

449 
	`ngx_de°roy_poﬁ
(
poﬁ
);

451 i‡(
	`ngx_ødix32åì_föd
(
˘x
.
åì
, 0Ë!
NGX_RADIX_NO_VALUE
) {

452  
rv
;

455 i‡(
	`ngx_ødix32åì_ö£π
(
˘x
.
åì
, 0, 0,

456 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

457 =
NGX_ERROR
)

459  
NGX_CONF_ERROR
;

463  
rv
;

464 
	}
}

468 
	$ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

470 *
rv
;

471 
ngx_°r_t
 *
vÆue
;

472 
ngx_cidr_t
 
cidr
;

473 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
;

475 
˘x
 = 
cf
->ctx;

477 
vÆue
 = 
cf
->
¨gs
->
ñts
;

479 i‡(
cf
->
¨gs
->
√…s
 == 1) {

481 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "ranges") == 0) {

483 i‡(
˘x
->
åì
) {

484 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

487 
Áûed
;

490 
˘x
->
ønges
 = 1;

492 
rv
 = 
NGX_CONF_OK
;

494 
d⁄e
;

498 i‡(
cf
->
¨gs
->
√…s
 != 2) {

499 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

501 
Áûed
;

504 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

506 
rv
 = 
	`ngx_hâp_geo_ö˛ude
(
cf
, 
˘x
, &
vÆue
[1]);

508 
d⁄e
;

510 } i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy") == 0) {

512 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

513 
Áûed
;

516 
rv
 = 
	`ngx_hâp_geo_add_¥oxy
(
cf
, 
˘x
, &
cidr
);

518 
d⁄e
;

521 i‡(
˘x
->
ønges
) {

522 
rv
 = 
	`ngx_hâp_geo_ønge
(
cf
, 
˘x
, 
vÆue
);

525 
rv
 = 
	`ngx_hâp_geo_cidr
(
cf
, 
˘x
, 
vÆue
);

528 
d⁄e
:

530 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

532  
rv
;

534 
Áûed
:

536 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

538  
NGX_CONF_ERROR
;

539 
	}
}

543 
	$ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

544 
ngx_°r_t
 *
vÆue
)

546 
u_ch¨
 *
p
, *
œ°
;

547 
ö_addr_t
 
°¨t
, 
íd
;

548 
ngx_°r_t
 *
√t
;

549 
ngx_uöt_t
 
dñ
;

551 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

553 i‡(
˘x
->
high
.
deÁu…_vÆue
) {

554 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

556 &
vÆue
[1], 
˘x
->
high
.
deÁu…_vÆue
);

559 
˘x
->
high
.
deÁu…_vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &
vÆue
[1]);

560 i‡(
˘x
->
high
.
deÁu…_vÆue
 =
NULL
) {

561  
NGX_CONF_ERROR
;

564  
NGX_CONF_OK
;

567 i‡(
˘x
->
bö¨y_ö˛ude
) {

568 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

570 
˘x
->
ö˛ude_«me
.
d©a
);

571  
NGX_CONF_ERROR
;

574 i‡(
˘x
->
high
.
low
 =
NULL
) {

575 
˘x
->
high
.
low
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
,

576 0x10000 * (
ngx_hâp_geo_ønge_t
 *));

577 i‡(
˘x
->
high
.
low
 =
NULL
) {

578  
NGX_CONF_ERROR
;

582 
˘x
->
íåõs
++;

583 
˘x
->
outside_íåõs
 = 1;

585 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

586 
√t
 = &
vÆue
[1];

587 
dñ
 = 1;

590 
√t
 = &
vÆue
[0];

591 
dñ
 = 0;

594 
œ°
 = 
√t
->
d©a
 +Çë->
Àn
;

596 
p
 = 
	`ngx_°æchr
(
√t
->
d©a
, 
œ°
, '-');

598 i‡(
p
 =
NULL
) {

599 
övÆid
;

602 
°¨t
 = 
	`ngx_öë_addr
(
√t
->
d©a
, 
p
 -Çet->data);

604 i‡(
°¨t
 =
INADDR_NONE
) {

605 
övÆid
;

608 
°¨t
 = 
	`¡ohl
(start);

610 
p
++;

612 
íd
 = 
	`ngx_öë_addr
(
p
, 
œ°
 -Ö);

614 i‡(
íd
 =
INADDR_NONE
) {

615 
övÆid
;

618 
íd
 = 
	`¡ohl
(end);

620 i‡(
°¨t
 > 
íd
) {

621 
övÆid
;

624 i‡(
dñ
) {

625 i‡(
	`ngx_hâp_geo_dñëe_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
)) {

626 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

627 "nÿaddªs†øngê\"%V\"Åÿdñëe", 
√t
);

630  
NGX_CONF_OK
;

633 
˘x
->
vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &value[1]);

635 i‡(
˘x
->
vÆue
 =
NULL
) {

636  
NGX_CONF_ERROR
;

639 
˘x
->
√t
 =Çet;

641  
	`ngx_hâp_geo_add_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
);

643 
övÆid
:

645 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÑ™gê\"%V\"", 
√t
);

647  
NGX_CONF_ERROR
;

648 
	}
}

654 
	$ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

655 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

657 
ö_addr_t
 
n
;

658 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
;

659 
ngx_¨øy_t
 *
a
;

660 
ngx_hâp_geo_ønge_t
 *
ønge
;

662 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

664 
h
 = 
n
 >> 16;

666 i‡(
n
 =
°¨t
) {

667 
s
 = 
n
 & 0xffff;

669 
s
 = 0;

672 i‡((
n
 | 0xffffË> 
íd
) {

673 
e
 = 
íd
 & 0xffff;

676 
e
 = 0xffff;

679 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

681 i‡(
a
 =
NULL
) {

682 
a
 = 
	`ngx_¨øy_¸óã
(
˘x
->
ãmp_poﬁ
, 64,

683 (
ngx_hâp_geo_ønge_t
));

684 i‡(
a
 =
NULL
) {

685  
NGX_CONF_ERROR
;

688 
˘x
->
high
.
low
[
h
] = (
ngx_hâp_geo_ønge_t
 *Ë
a
;

691 
i
 = 
a
->
√…s
;

692 
ønge
 = 
a
->
ñts
;

694 
i
) {

696 
i
--;

698 i‡(
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
) {

702 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
íd
) {

706 
ønge
 = 
	`ngx_¨øy_push
(
a
);

707 i‡(
ønge
 =
NULL
) {

708  
NGX_CONF_ERROR
;

711 
ønge
 = 
a
->
ñts
;

713 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

714 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

716 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

717 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

718 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

720 
√xt
;

723 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


724 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

726 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

728 
˘x
->
√t
, ctx->
vÆue
, 
ønge
[
i
].value);

730 
ønge
[
i
].
vÆue
 = 
˘x
->value;

732 
√xt
;

735 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


736 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

740 
ønge
 = 
	`ngx_¨øy_push
(
a
);

741 i‡(
ønge
 =
NULL
) {

742  
NGX_CONF_ERROR
;

745 
ønge
 = 
	`ngx_¨øy_push
(
a
);

746 i‡(
ønge
 =
NULL
) {

747  
NGX_CONF_ERROR
;

750 
ønge
 = 
a
->
ñts
;

752 
	`ngx_memmove
(&
ønge
[
i
 + 3], &range[i + 1],

753 (
a
->
√…s
 - 3 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

755 
ønge
[
i
 + 2].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

756 
ønge
[
i
 + 2].
íd
 =Ñange[i].end;

757 
ønge
[
i
 + 2].
vÆue
 =Ñange[i].value;

759 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

760 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

761 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

763 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

765 
√xt
;

768 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


769 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

773 
ønge
 = 
	`ngx_¨øy_push
(
a
);

774 i‡(
ønge
 =
NULL
) {

775  
NGX_CONF_ERROR
;

778 
ønge
 = 
a
->
ñts
;

780 
	`ngx_memmove
(&
ønge
[
i
 + 1], &range[i],

781 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

783 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

785 
ønge
[
i
].
°¨t
 = (
u_sh‹t
Ë
s
;

786 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë
e
;

787 
ønge
[
i
].
vÆue
 = 
˘x
->value;

789 
√xt
;

792 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


793 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

797 
ønge
 = 
	`ngx_¨øy_push
(
a
);

798 i‡(
ønge
 =
NULL
) {

799  
NGX_CONF_ERROR
;

802 
ønge
 = 
a
->
ñts
;

804 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

805 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

807 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

808 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

809 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

811 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

813 
√xt
;

816 
s
 = (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
;

817 
e
 = (
ngx_uöt_t
Ë
ønge
[
i
].
íd
;

819 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

821 
˘x
->
√t
,

822 
h
 >> 8, h & 0xff, 
s
 >> 8, s & 0xff,

823 
h
 >> 8, h & 0xff, 
e
 >> 8,É & 0xff);

825  
NGX_CONF_ERROR
;

830 
ønge
 = 
	`ngx_¨øy_push
(
a
);

831 i‡(
ønge
 =
NULL
) {

832  
NGX_CONF_ERROR
;

835 
ønge
->
°¨t
 = (
u_sh‹t
Ë
s
;

836 
ønge
->
íd
 = (
u_sh‹t
Ë
e
;

837 
ønge
->
vÆue
 = 
˘x
->value;

839 
√xt
:

844  
NGX_CONF_OK
;

845 
	}
}

848 
ngx_uöt_t


849 
	$ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

850 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

852 
ö_addr_t
 
n
;

853 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
, 
w¨n
;

854 
ngx_¨øy_t
 *
a
;

855 
ngx_hâp_geo_ønge_t
 *
ønge
;

857 
w¨n
 = 0;

859 
n
 = 
°¨t
;Ç <
íd
;Ç += 0x10000) {

861 
h
 = 
n
 >> 16;

863 i‡(
n
 =
°¨t
) {

864 
s
 = 
n
 & 0xffff;

866 
s
 = 0;

869 i‡((
n
 | 0xffffË> 
íd
) {

870 
e
 = 
íd
 & 0xffff;

873 
e
 = 0xffff;

876 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

878 i‡(
a
 =
NULL
) {

879 
w¨n
 = 1;

883 
ønge
 = 
a
->
ñts
;

884 
i
 = 0; i < 
a
->
√…s
; i++) {

886 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


887 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

889 
	`ngx_memmove
(&
ønge
[
i
], &range[i + 1],

890 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

892 
a
->
√…s
--;

897 i‡(
s
 !(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


898 && 
e
 !(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

903 
w¨n
 = 1;

907  
w¨n
;

908 
	}
}

912 
	$ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

913 
ngx_°r_t
 *
vÆue
)

915 
ngx_öt_t
 
rc
, 
dñ
;

916 
ngx_°r_t
 *
√t
;

917 
ngx_uöt_t
 
i
;

918 
ngx_cidr_t
 
cidr
;

919 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ﬁd
;

921 i‡(
˘x
->
åì
 =
NULL
) {

922 
˘x
->
åì
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

923 i‡(
˘x
->
åì
 =
NULL
) {

924  
NGX_CONF_ERROR
;

928 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

929 
cidr
.
u
.
ö
.
addr
 = 0;

930 
cidr
.
u
.
ö
.
mask
 = 0;

931 
√t
 = &
vÆue
[0];

934 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

935 
√t
 = &
vÆue
[1];

936 
dñ
 = 1;

939 
√t
 = &
vÆue
[0];

940 
dñ
 = 0;

943 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, 
√t
, &
cidr
Ë!
NGX_OK
) {

944  
NGX_CONF_ERROR
;

947 i‡(
dñ
) {

948 i‡(
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
,

949 
cidr
.
u
.
ö
.
mask
)

950 !
NGX_OK
)

952 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

953 "nÿ√tw‹k \"%V\"Åÿdñëe", 
√t
);

956  
NGX_CONF_OK
;

960 
vÆ
 = 
	`ngx_hâp_geo_vÆue
(
cf
, 
˘x
, &
vÆue
[1]);

962 i‡(
vÆ
 =
NULL
) {

963  
NGX_CONF_ERROR
;

966 
i
 = 2; i; i--) {

967 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
, cidr.u.ö.
mask
,

968 (
uöçå_t
Ë
vÆ
);

969 i‡(
rc
 =
NGX_OK
) {

970  
NGX_CONF_OK
;

973 i‡(
rc
 =
NGX_ERROR
) {

974  
NGX_CONF_ERROR
;

979 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

980 
	`ngx_ødix32åì_föd
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
 & cidr.u.ö.
mask
);

982 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

984 
√t
, 
vÆ
, 
ﬁd
);

986 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
, cidr.u.ö.
mask
);

988 i‡(
rc
 =
NGX_ERROR
) {

989 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

990  
NGX_CONF_ERROR
;

994  
NGX_CONF_ERROR
;

995 
	}
}

998 
ngx_hâp_v¨übÀ_vÆue_t
 *

999 
	$ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1000 
ngx_°r_t
 *
vÆue
)

1002 
uöt32_t
 
hash
;

1003 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
;

1004 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1006 
hash
 = 
	`ngx_¸c32_l⁄g
(
vÆue
->
d©a
, vÆue->
Àn
);

1008 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1009 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, 
vÆue
, 
hash
);

1011 i‡(
gvvn
) {

1012  
gvvn
->
vÆue
;

1015 
vÆ
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1016 i‡(
vÆ
 =
NULL
) {

1017  
NULL
;

1020 
vÆ
->
Àn
 = 
vÆue
->len;

1021 
vÆ
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
poﬁ
, 
vÆue
);

1022 i‡(
vÆ
->
d©a
 =
NULL
) {

1023  
NULL
;

1026 
vÆ
->
vÆid
 = 1;

1027 
vÆ
->
no_ˇchóbÀ
 = 0;

1028 
vÆ
->
nŸ_found
 = 0;

1030 
gvvn
 = 
	`ngx_∑Œoc
(
˘x
->
ãmp_poﬁ
,

1031 (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
));

1032 i‡(
gvvn
 =
NULL
) {

1033  
NULL
;

1036 
gvvn
->
¢
.
node
.
key
 = 
hash
;

1037 
gvvn
->
¢
.
°r
.
Àn
 = 
vÆ
->len;

1038 
gvvn
->
¢
.
°r
.
d©a
 = 
vÆ
->data;

1039 
gvvn
->
vÆue
 = 
vÆ
;

1040 
gvvn
->
off£t
 = 0;

1042 
	`ngx_rbåì_ö£π
(&
˘x
->
rbåì
, &
gvvn
->
¢
.
node
);

1044 
˘x
->
d©a_size
 +
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vÆue
->
Àn
,

1047  
vÆ
;

1048 
	}
}

1052 
	$ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1053 
ngx_cidr_t
 *
cidr
)

1055 
ngx_ö_cidr_t
 *
c
;

1057 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1058 
˘x
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(˘x->
poﬁ
, 4, (
ngx_ö_cidr_t
));

1059 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1060  
NGX_CONF_ERROR
;

1064 
c
 = 
	`ngx_¨øy_push
(
˘x
->
¥oxõs
);

1065 i‡(
c
 =
NULL
) {

1066  
NGX_CONF_ERROR
;

1069 
c
->
addr
 = 
cidr
->
u
.
ö
.addr;

1070 
c
->
mask
 = 
cidr
->
u
.
ö
.mask;

1072  
NGX_CONF_OK
;

1073 
	}
}

1076 
ngx_öt_t


1077 
	$ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

1079 
ngx_öt_t
 
rc
;

1081 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

1082 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

1083 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

1085  
NGX_OK
;

1088 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

1090 i‡(
rc
 =
NGX_ERROR
) {

1091 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

1092  
NGX_ERROR
;

1095 i‡(
cidr
->
Ámûy
 !
AF_INET
) {

1096 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "\"geo\" supports IPv4 only");

1097  
NGX_ERROR
;

1100 i‡(
rc
 =
NGX_DONE
) {

1101 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1102 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

1105 
cidr
->
u
.
ö
.
addr
 = 
	`¡ohl
(cidr->u.in.addr);

1106 
cidr
->
u
.
ö
.
mask
 = 
	`¡ohl
(cidr->u.in.mask);

1108  
NGX_OK
;

1109 
	}
}

1113 
	$ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1114 
ngx_°r_t
 *
«me
)

1116 *
rv
;

1117 
ngx_°r_t
 
fûe
;

1119 
fûe
.
Àn
 = 
«me
->len + 4;

1120 
fûe
.
d©a
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, 
«me
->
Àn
 + 5);

1121 i‡(
fûe
.
d©a
 =
NULL
) {

1122  
NGX_CONF_ERROR
;

1125 
	`ngx_•rötf
(
fûe
.
d©a
, "%V.bö%Z", 
«me
);

1127 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

1128  
NGX_CONF_ERROR
;

1131 i‡(
˘x
->
ønges
) {

1132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1134 
	`ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
cf
, 
˘x
, &
fûe
)) {

1135 
NGX_OK
:

1136  
NGX_CONF_OK
;

1137 
NGX_ERROR
:

1138  
NGX_CONF_ERROR
;

1144 
fûe
.
Àn
 -= 4;

1145 
fûe
.
d©a
[fûe.
Àn
] = '\0';

1147 
˘x
->
ö˛ude_«me
 = 
fûe
;

1149 i‡(
˘x
->
outside_íåõs
) {

1150 
˘x
->
Ælow_bö¨y_ö˛ude
 = 0;

1153 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1155 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

1157 
˘x
->
ö˛udes
++;

1158 
˘x
->
outside_íåõs
 = 0;

1160  
rv
;

1161 
	}
}

1164 
ngx_öt_t


1165 
	$ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1166 
ngx_°r_t
 *
«me
)

1168 
u_ch¨
 *
ba£
, 
ch
;

1169 
time_t
 
mtime
;

1170 
size_t
 
size
, 
Àn
;

1171 
ssize_t
 
n
;

1172 
uöt32_t
 
¸c32
;

1173 
ngx_îr_t
 
îr
;

1174 
ngx_öt_t
 
rc
;

1175 
ngx_uöt_t
 
i
;

1176 
ngx_fûe_t
 
fûe
;

1177 
ngx_fûe_öfo_t
 
fi
;

1178 
ngx_hâp_geo_ønge_t
 *
ønge
, **
ønges
;

1179 
ngx_hâp_geo_hódî_t
 *
hódî
;

1180 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1182 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1183 
fûe
.
«me
 = *name;

1184 
fûe
.
log
 = 
cf
->log;

1186 
fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
NGX_FILE_RDONLY
, 0, 0);

1187 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1188 
îr
 = 
ngx_î∫o
;

1189 i‡(
îr
 !
NGX_ENOENT
) {

1190 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
îr
,

1191 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1193  
NGX_DECLINED
;

1196 i‡(
˘x
->
outside_íåõs
) {

1197 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1199 
«me
->
d©a
);

1200 
rc
 = 
NGX_ERROR
;

1201 
d⁄e
;

1204 i‡(
˘x
->
bö¨y_ö˛ude
) {

1205 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1207 
«me
->
d©a
, 
˘x
->
ö˛ude_«me
.data);

1208 
rc
 = 
NGX_ERROR
;

1209 
d⁄e
;

1212 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1213 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1214 
ngx_fd_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1215 
Áûed
;

1218 
size
 = (
size_t
Ë
	`ngx_fûe_size
(&
fi
);

1219 
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

1221 
ch
 = 
«me
->
d©a
[«me->
Àn
 - 4];

1222 
«me
->
d©a
[«me->
Àn
 - 4] = '\0';

1224 i‡(
	`ngx_fûe_öfo
(
«me
->
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

1225 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1226 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1227 
Áûed
;

1230 
«me
->
d©a
[«me->
Àn
 - 4] = 
ch
;

1232 i‡(
mtime
 < 
	`ngx_fûe_mtime
(&
fi
)) {

1233 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1234 "°Æêbö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1235 
Áûed
;

1238 
ba£
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

1239 i‡(
ba£
 =
NULL
) {

1240 
Áûed
;

1243 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
ba£
, 
size
, 0);

1245 i‡(
n
 =
NGX_ERROR
) {

1246 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1247 
ngx_ªad_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1248 
Áûed
;

1251 i‡((
size_t
Ë
n
 !
size
) {

1252 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

1253 
ngx_ªad_fûe_n
 " \"%s\"Ñeturned only %z bytes instead of %z",

1254 
«me
->
d©a
, 
n
, 
size
);

1255 
Áûed
;

1258 
hódî
 = (
ngx_hâp_geo_hódî_t
 *Ë
ba£
;

1260 i‡(
size
 < 16 || 
	`ngx_memcmp
(&
ngx_hâp_geo_hódî
, 
hódî
, 12) != 0) {

1261 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1262 "öcom∑tibÀ bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1263 
Áûed
;

1266 
	`ngx_¸c32_öô
(
¸c32
);

1268 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë(
ba£
 + (
ngx_hâp_geo_hódî_t
));

1270 
vv
->
d©a
) {

1271 
Àn
 = 
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vv
->len,

1273 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, 
Àn
);

1274 
vv
->
d©a
 +(
size_t
Ë
ba£
;

1275 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë((
u_ch¨
 *Ëvv + 
Àn
);

1277 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1278 
vv
++;

1280 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
vv
;

1282 
i
 = 0; i < 0x10000; i++) {

1283 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë&
ønges
[
i
], (*));

1284 i‡(
ønges
[
i
]) {

1285 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *)

1286 ((
u_ch¨
 *Ë
ønges
[
i
] + (
size_t
Ë
ba£
);

1290 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë&
ønges
[0x10000];

1292 (
u_ch¨
 *Ë
ønge
 < 
ba£
 + 
size
) {

1293 
ønge
->
vÆue
) {

1294 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
,

1295 (
ngx_hâp_geo_ønge_t
));

1296 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1297 ((
u_ch¨
 *Ë
ønge
->
vÆue
 + (
size_t
Ë
ba£
);

1298 
ønge
++;

1300 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
, (*));

1301 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë((
u_ch¨
 *)Ñange + (*));

1304 
	`ngx_¸c32_föÆ
(
¸c32
);

1306 i‡(
¸c32
 !
hódî
->crc32) {

1307 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1308 "CRC32 mism©ch i¿bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1309 
Áûed
;

1312 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
, 0,

1313 "usög bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1315 
˘x
->
ö˛ude_«me
 = *
«me
;

1316 
˘x
->
bö¨y_ö˛ude
 = 1;

1317 
˘x
->
high
.
low
 = 
ønges
;

1318 
rc
 = 
NGX_OK
;

1320 
d⁄e
;

1322 
Áûed
:

1324 
rc
 = 
NGX_DECLINED
;

1326 
d⁄e
:

1328 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1329 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

1330 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1333  
rc
;

1334 
	}
}

1338 
	$ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
)

1340 
u_ch¨
 *
p
;

1341 
uöt32_t
 
hash
;

1342 
ngx_°r_t
 
s
;

1343 
ngx_uöt_t
 
i
;

1344 
ngx_fûe_m≠pög_t
 
fm
;

1345 
ngx_hâp_geo_ønge_t
 *
r
, *
ønge
, **
ønges
;

1346 
ngx_hâp_geo_hódî_t
 *
hódî
;

1347 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1349 
fm
.
«me
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, ctx->
ö˛ude_«me
.
Àn
 + 5);

1350 i‡(
fm
.
«me
 =
NULL
) {

1354 
	`ngx_•rötf
(
fm
.
«me
, "%V.bö%Z", &
˘x
->
ö˛ude_«me
);

1356 
fm
.
size
 = 
˘x
->
d©a_size
;

1357 
fm
.
log
 = 
˘x
->
poﬁ
->log;

1359 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
fm
.
log
, 0,

1360 "¸ótög bö¨y geÿøngêba£ \"%s\"", 
fm
.
«me
);

1362 i‡(
	`ngx_¸óã_fûe_m≠pög
(&
fm
Ë!
NGX_OK
) {

1366 
p
 = 
	`ngx_˝ymem
(
fm
.
addr
, &
ngx_hâp_geo_hódî
,

1367 (
ngx_hâp_geo_hódî_t
));

1369 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
fm
.
addr
,Ö, 
˘x
->
rbåì
.
roŸ
,

1370 
˘x
->
rbåì
.
£¡öñ
);

1372 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1374 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
p
;

1376 
p
 +0x10000 * (
ngx_hâp_geo_ønge_t
 *);

1378 
i
 = 0; i < 0x10000; i++) {

1379 
r
 = 
˘x
->
high
.
low
[
i
];

1380 i‡(
r
 =
NULL
) {

1384 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë
p
;

1385 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *Ë(
p
 - (
u_ch¨
 *Ë
fm
.
addr
);

1388 
s
.
Àn
 = 
r
->
vÆue
->len;

1389 
s
.
d©a
 = 
r
->
vÆue
->data;

1390 
hash
 = 
	`ngx_¸c32_l⁄g
(
s
.
d©a
, s.
Àn
);

1391 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1392 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, &
s
, 
hash
);

1394 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
gvvn
->
off£t
;

1395 
ønge
->
°¨t
 = 
r
->start;

1396 
ønge
->
íd
 = 
r
->end;

1397 
ønge
++;

1399 } (++
r
)->
vÆue
);

1401 
ønge
->
vÆue
 = 
NULL
;

1403 
p
 = (
u_ch¨
 *Ë
ønge
 + (*);

1406 
hódî
 = 
fm
.
addr
;

1407 
hódî
->
¸c32
 = 
	`ngx_¸c32_l⁄g
((
u_ch¨
 *Ë
fm
.
addr


1408 + (
ngx_hâp_geo_hódî_t
),

1409 
fm
.
size
 - (
ngx_hâp_geo_hódî_t
));

1411 
	`ngx_˛o£_fûe_m≠pög
(&
fm
);

1412 
	}
}

1415 
u_ch¨
 *

1416 
	$ngx_hâp_geo_c›y_vÆues
(
u_ch¨
 *
ba£
, u_ch¨ *
p
, 
ngx_rbåì_node_t
 *
node
,

1417 
ngx_rbåì_node_t
 *
£¡öñ
)

1419 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1420 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1422 i‡(
node
 =
£¡öñ
) {

1423  
p
;

1426 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *Ë
node
;

1427 
gvvn
->
off£t
 = 
p
 - 
ba£
;

1429 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
p
;

1430 *
vv
 = *
gvvn
->
vÆue
;

1431 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1432 
vv
->
d©a
 = (
u_ch¨
 *Ë(
p
 - 
ba£
);

1434 
p
 = 
	`ngx_˝ymem
’, 
gvvn
->
¢
.
°r
.
d©a
, gvvn->¢.°r.
Àn
);

1436 
p
 = 
	`ngx_Æign_±r
(p, (*));

1438 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
ba£
,Ö, 
node
->
À·
, 
£¡öñ
);

1440  
	`ngx_hâp_geo_c›y_vÆues
(
ba£
, 
p
, 
node
->
right
, 
£¡öñ
);

1441 
	}
}

	@src/http/modules/ngx_http_geoip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<GeoIP.h
>

13 
	~<GeoIPCôy.h
>

17 
GeoIP
 *
	mcou¡ry
;

18 
GeoIP
 *
	m‹g
;

19 
GeoIP
 *
	mcôy
;

20 } 
	tngx_hâp_geoù_c⁄f_t
;

24 
ngx_°r_t
 *
	m«me
;

25 
uöçå_t
 
	md©a
;

26 } 
	tngx_hâp_geoù_v¨_t
;

29 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_±
)(
	tGeoIP
 *, 
	tu_l⁄g
 
	taddr
);

31 
ngx_öt_t
 
ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

33 
ngx_öt_t
 
ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

35 
ngx_öt_t
 
ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

37 
ngx_öt_t
 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

38 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

39 
ngx_öt_t
 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

40 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

41 
ngx_öt_t
 
ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

42 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

43 
GeoIPRec‹d
 *
ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_öt_t
 
ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

46 *
ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

47 *
ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

48 *
c⁄f
);

49 *
ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

50 *
c⁄f
);

51 *
ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

52 *
c⁄f
);

53 
ngx_hâp_geoù_˛ónup
(*
d©a
);

56 
ngx_comm™d_t
 
	gngx_hâp_geoù_comm™ds
[] = {

58 { 
ngx_°rög
("geoip_country"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

60 
ngx_hâp_geoù_cou¡ry
,

61 
NGX_HTTP_MAIN_CONF_OFFSET
,

63 
NULL
 },

65 { 
ngx_°rög
("geoip_org"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

67 
ngx_hâp_geoù_‹g
,

68 
NGX_HTTP_MAIN_CONF_OFFSET
,

70 
NULL
 },

72 { 
ngx_°rög
("geoip_city"),

73 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

74 
ngx_hâp_geoù_côy
,

75 
NGX_HTTP_MAIN_CONF_OFFSET
,

77 
NULL
 },

79 
ngx_nuŒ_comm™d


83 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geoù_moduÀ_˘x
 = {

84 
ngx_hâp_geoù_add_v¨übÀs
,

85 
NULL
,

87 
ngx_hâp_geoù_¸óã_c⁄f
,

88 
NULL
,

90 
NULL
,

91 
NULL
,

93 
NULL
,

94 
NULL


98 
ngx_moduÀ_t
 
	gngx_hâp_geoù_moduÀ
 = {

99 
NGX_MODULE_V1
,

100 &
ngx_hâp_geoù_moduÀ_˘x
,

101 
ngx_hâp_geoù_comm™ds
,

102 
NGX_HTTP_MODULE
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NGX_MODULE_V1_PADDING


114 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_geoù_v¨s
[] = {

116 { 
ngx_°rög
("geoù_cou¡ry_code"), 
NULL
,

117 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

118 (
uöçå_t
Ë
GeoIP_cou¡ry_code_by_ùnum
, 0, 0 },

120 { 
ngx_°rög
("geoù_cou¡ry_code3"), 
NULL
,

121 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

122 (
uöçå_t
Ë
GeoIP_cou¡ry_code3_by_ùnum
, 0, 0 },

124 { 
ngx_°rög
("geoù_cou¡ry_«me"), 
NULL
,

125 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

126 (
uöçå_t
Ë
GeoIP_cou¡ry_«me_by_ùnum
, 0, 0 },

128 { 
ngx_°rög
("geoù_‹g"), 
NULL
,

129 
ngx_hâp_geoù_‹g_v¨übÀ
,

130 (
uöçå_t
Ë
GeoIP_«me_by_ùnum
, 0, 0 },

132 { 
ngx_°rög
("geoù_côy_c⁄töít_code"), 
NULL
,

133 
ngx_hâp_geoù_côy_v¨übÀ
,

134 
off£tof
(
GeoIPRec‹d
, 
c⁄töít_code
), 0, 0 },

136 { 
ngx_°rög
("geoù_côy_cou¡ry_code"), 
NULL
,

137 
ngx_hâp_geoù_côy_v¨übÀ
,

138 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code
), 0, 0 },

140 { 
ngx_°rög
("geoù_côy_cou¡ry_code3"), 
NULL
,

141 
ngx_hâp_geoù_côy_v¨übÀ
,

142 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code3
), 0, 0 },

144 { 
ngx_°rög
("geoù_côy_cou¡ry_«me"), 
NULL
,

145 
ngx_hâp_geoù_côy_v¨übÀ
,

146 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_«me
), 0, 0 },

148 { 
ngx_°rög
("geoù_ªgi⁄"), 
NULL
,

149 
ngx_hâp_geoù_côy_v¨übÀ
,

150 
off£tof
(
GeoIPRec‹d
, 
ªgi⁄
), 0, 0 },

152 { 
ngx_°rög
("geoù_ªgi⁄_«me"), 
NULL
,

153 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
,

156 { 
ngx_°rög
("geoù_côy"), 
NULL
,

157 
ngx_hâp_geoù_côy_v¨übÀ
,

158 
off£tof
(
GeoIPRec‹d
, 
côy
), 0, 0 },

160 { 
ngx_°rög
("geoù_po°Æ_code"), 
NULL
,

161 
ngx_hâp_geoù_côy_v¨übÀ
,

162 
off£tof
(
GeoIPRec‹d
, 
po°Æ_code
), 0, 0 },

164 { 
ngx_°rög
("geoù_œtôude"), 
NULL
,

165 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

166 
off£tof
(
GeoIPRec‹d
, 
œtôude
), 0, 0 },

168 { 
ngx_°rög
("geoù_l⁄gôude"), 
NULL
,

169 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

170 
off£tof
(
GeoIPRec‹d
, 
l⁄gôude
), 0, 0 },

172 { 
ngx_°rög
("geoù_dma_code"), 
NULL
,

173 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

174 
off£tof
(
GeoIPRec‹d
, 
dma_code
), 0, 0 },

176 { 
ngx_°rög
("geoù_¨ó_code"), 
NULL
,

177 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

178 
off£tof
(
GeoIPRec‹d
, 
¨ó_code
), 0, 0 },

180 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

184 
u_l⁄g


185 
	$ngx_hâp_geoù_addr
(
ngx_hâp_ªque°_t
 *
r
)

187 
sockaddr_ö
 *
sö
;

188 #i‡(
NGX_HAVE_INET6
)

189 
u_ch¨
 *
p
;

190 
u_l⁄g
 
addr
;

191 
sockaddr_ö6
 *
sö6
;

194 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

196 
AF_INET
:

197 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

198  
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

200 #i‡(
NGX_HAVE_INET6
)

202 
AF_INET6
:

203 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

205 i‡(
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

206 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

207 
addr
 = 
p
[12] << 24;

208 
addr
 +
p
[13] << 16;

209 
addr
 +
p
[14] << 8;

210 
addr
 +
p
[15];

212  
addr
;

218  
INADDR_NONE
;

219 
	}
}

222 
ngx_öt_t


223 
	$ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

224 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

226 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
h™dÀr
 =

227 (
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
Ë
d©a
;

229 c⁄° *
vÆ
;

230 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

232 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

234 i‡(
gcf
->
cou¡ry
 =
NULL
) {

235 
nŸ_found
;

238 
vÆ
 = 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
));

240 i‡(
vÆ
 =
NULL
) {

241 
nŸ_found
;

244 
v
->
Àn
 = 
	`ngx_°æí
(
vÆ
);

245 
v
->
vÆid
 = 1;

246 
v
->
no_ˇchóbÀ
 = 0;

247 
v
->
nŸ_found
 = 0;

248 
v
->
d©a
 = (
u_ch¨
 *Ë
vÆ
;

250  
NGX_OK
;

252 
nŸ_found
:

254 
v
->
nŸ_found
 = 1;

256  
NGX_OK
;

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

262 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

264 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
h™dÀr
 =

265 (
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
Ë
d©a
;

267 c⁄° *
vÆ
;

268 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

270 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

272 i‡(
gcf
->
‹g
 =
NULL
) {

273 
nŸ_found
;

276 
vÆ
 = 
	`h™dÀr
(
gcf
->
‹g
, 
	`ngx_hâp_geoù_addr
(
r
));

278 i‡(
vÆ
 =
NULL
) {

279 
nŸ_found
;

282 
v
->
Àn
 = 
	`ngx_°æí
(
vÆ
);

283 
v
->
vÆid
 = 1;

284 
v
->
no_ˇchóbÀ
 = 0;

285 
v
->
nŸ_found
 = 0;

286 
v
->
d©a
 = (
u_ch¨
 *Ë
vÆ
;

288  
NGX_OK
;

290 
nŸ_found
:

292 
v
->
nŸ_found
 = 1;

294  
NGX_OK
;

295 
	}
}

298 
ngx_öt_t


299 
	$ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

300 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

302 *
vÆ
;

303 
size_t
 
Àn
;

304 
GeoIPRec‹d
 *
gr
;

306 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

307 i‡(
gr
 =
NULL
) {

308 
nŸ_found
;

311 
vÆ
 = *(**Ë((*Ë
gr
 + 
d©a
);

312 i‡(
vÆ
 =
NULL
) {

313 
no_vÆue
;

316 
Àn
 = 
	`ngx_°æí
(
vÆ
);

317 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

318 i‡(
v
->
d©a
 =
NULL
) {

319 
	`GeoIPRec‹d_dñëe
(
gr
);

320  
NGX_ERROR
;

323 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

325 
v
->
Àn
 =Üen;

326 
v
->
vÆid
 = 1;

327 
v
->
no_ˇchóbÀ
 = 0;

328 
v
->
nŸ_found
 = 0;

330 
	`GeoIPRec‹d_dñëe
(
gr
);

332  
NGX_OK
;

334 
no_vÆue
:

336 
	`GeoIPRec‹d_dñëe
(
gr
);

338 
nŸ_found
:

340 
v
->
nŸ_found
 = 1;

342  
NGX_OK
;

343 
	}
}

346 
ngx_öt_t


347 
	$ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

348 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

350 
size_t
 
Àn
;

351 c⁄° *
vÆ
;

352 
GeoIPRec‹d
 *
gr
;

354 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

355 i‡(
gr
 =
NULL
) {

356 
nŸ_found
;

359 
vÆ
 = 
	`GeoIP_ªgi⁄_«me_by_code
(
gr
->
cou¡ry_code
, gr->
ªgi⁄
);

361 
	`GeoIPRec‹d_dñëe
(
gr
);

363 i‡(
vÆ
 =
NULL
) {

364 
nŸ_found
;

367 
Àn
 = 
	`ngx_°æí
(
vÆ
);

368 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

369 i‡(
v
->
d©a
 =
NULL
) {

370  
NGX_ERROR
;

373 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

375 
v
->
Àn
 =Üen;

376 
v
->
vÆid
 = 1;

377 
v
->
no_ˇchóbÀ
 = 0;

378 
v
->
nŸ_found
 = 0;

380  
NGX_OK
;

382 
nŸ_found
:

384 
v
->
nŸ_found
 = 1;

386  
NGX_OK
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

392 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

394 
vÆ
;

395 
GeoIPRec‹d
 *
gr
;

397 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

398 i‡(
gr
 =
NULL
) {

399 
v
->
nŸ_found
 = 1;

400  
NGX_OK
;

403 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
 + 5);

404 i‡(
v
->
d©a
 =
NULL
) {

405 
	`GeoIPRec‹d_dñëe
(
gr
);

406  
NGX_ERROR
;

409 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

411 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%.4f", 
vÆ
) - v->data;

413 
	`GeoIPRec‹d_dñëe
(
gr
);

415  
NGX_OK
;

416 
	}
}

419 
ngx_öt_t


420 
	$ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

421 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

423 
vÆ
;

424 
GeoIPRec‹d
 *
gr
;

426 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

427 i‡(
gr
 =
NULL
) {

428 
v
->
nŸ_found
 = 1;

429  
NGX_OK
;

432 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

433 i‡(
v
->
d©a
 =
NULL
) {

434 
	`GeoIPRec‹d_dñëe
(
gr
);

435  
NGX_ERROR
;

438 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

440 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%d", 
vÆ
) - v->data;

442 
	`GeoIPRec‹d_dñëe
(
gr
);

444  
NGX_OK
;

445 
	}
}

448 
GeoIPRec‹d
 *

449 
	$ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
)

451 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

453 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

455 i‡(
gcf
->
côy
) {

456  
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
, 
	`ngx_hâp_geoù_addr
(
r
));

459  
NULL
;

460 
	}
}

463 
ngx_öt_t


464 
	$ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

466 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

468 
v
 = 
ngx_hâp_geoù_v¨s
; v->
«me
.
Àn
; v++) {

469 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

470 i‡(
v¨
 =
NULL
) {

471  
NGX_ERROR
;

474 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

475 
v¨
->
d©a
 = 
v
->data;

478  
NGX_OK
;

479 
	}
}

483 
	$ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

485 
ngx_poﬁ_˛ónup_t
 *
˛n
;

486 
ngx_hâp_geoù_c⁄f_t
 *
c⁄f
;

488 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_geoù_c⁄f_t
));

489 i‡(
c⁄f
 =
NULL
) {

490  
NULL
;

493 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

494 i‡(
˛n
 =
NULL
) {

495  
NULL
;

498 
˛n
->
h™dÀr
 = 
ngx_hâp_geoù_˛ónup
;

499 
˛n
->
d©a
 = 
c⁄f
;

501  
c⁄f
;

502 
	}
}

506 
	$ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

508 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

510 
ngx_°r_t
 *
vÆue
;

512 i‡(
gcf
->
cou¡ry
) {

516 
vÆue
 = 
cf
->
¨gs
->
ñts
;

518 
gcf
->
cou¡ry
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

520 i‡(
gcf
->
cou¡ry
 =
NULL
) {

521 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

522 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

524  
NGX_CONF_ERROR
;

527 i‡(
cf
->
¨gs
->
√…s
 == 3) {

528 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

529 
	`GeoIP_£t_ch¨£t
 (
gcf
->
cou¡ry
, 
GEOIP_CHARSET_UTF8
);

532 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

533 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

534  
NGX_CONF_ERROR
;

538 
gcf
->
cou¡ry
->
d©aba£Ty≥
) {

540 
GEOIP_COUNTRY_EDITION
:

541 
GEOIP_PROXY_EDITION
:

542 
GEOIP_NETSPEED_EDITION
:

544  
NGX_CONF_OK
;

547 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

549 &
vÆue
[1], 
gcf
->
cou¡ry
->
d©aba£Ty≥
);

550  
NGX_CONF_ERROR
;

552 
	}
}

556 
	$ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

558 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

560 
ngx_°r_t
 *
vÆue
;

562 i‡(
gcf
->
‹g
) {

566 
vÆue
 = 
cf
->
¨gs
->
ñts
;

568 
gcf
->
‹g
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

570 i‡(
gcf
->
‹g
 =
NULL
) {

571 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

572 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

574  
NGX_CONF_ERROR
;

577 i‡(
cf
->
¨gs
->
√…s
 == 3) {

578 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

579 
	`GeoIP_£t_ch¨£t
 (
gcf
->
‹g
, 
GEOIP_CHARSET_UTF8
);

582 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

583 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

584  
NGX_CONF_ERROR
;

588 
gcf
->
‹g
->
d©aba£Ty≥
) {

590 
GEOIP_ISP_EDITION
:

591 
GEOIP_ORG_EDITION
:

592 
GEOIP_DOMAIN_EDITION
:

593 
GEOIP_ASNUM_EDITION
:

595  
NGX_CONF_OK
;

598 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

600 &
vÆue
[1], 
gcf
->
‹g
->
d©aba£Ty≥
);

601  
NGX_CONF_ERROR
;

603 
	}
}

607 
	$ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

609 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

611 
ngx_°r_t
 *
vÆue
;

613 i‡(
gcf
->
côy
) {

617 
vÆue
 = 
cf
->
¨gs
->
ñts
;

619 
gcf
->
côy
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

621 i‡(
gcf
->
côy
 =
NULL
) {

622 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

623 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

625  
NGX_CONF_ERROR
;

628 i‡(
cf
->
¨gs
->
√…s
 == 3) {

629 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

630 
	`GeoIP_£t_ch¨£t
 (
gcf
->
côy
, 
GEOIP_CHARSET_UTF8
);

633 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

634 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

635  
NGX_CONF_ERROR
;

639 
gcf
->
côy
->
d©aba£Ty≥
) {

641 
GEOIP_CITY_EDITION_REV0
:

642 
GEOIP_CITY_EDITION_REV1
:

644  
NGX_CONF_OK
;

647 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

649 &
vÆue
[1], 
gcf
->
côy
->
d©aba£Ty≥
);

650  
NGX_CONF_ERROR
;

652 
	}
}

656 
	$ngx_hâp_geoù_˛ónup
(*
d©a
)

658 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
d©a
;

660 i‡(
gcf
->
cou¡ry
) {

661 
	`GeoIP_dñëe
(
gcf
->
cou¡ry
);

664 i‡(
gcf
->
‹g
) {

665 
	`GeoIP_dñëe
(
gcf
->
‹g
);

668 i‡(
gcf
->
côy
) {

669 
	`GeoIP_dñëe
(
gcf
->
côy
);

671 
	}
}

	@src/http/modules/ngx_http_gzip_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<zlib.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	mno_buf„r
;

19 
ngx_hash_t
 
	mty≥s
;

21 
ngx_bufs_t
 
	mbufs
;

23 
size_t
 
	mpo°p⁄e_gzùpög
;

24 
ngx_öt_t
 
	mÀvñ
;

25 
size_t
 
	mwbôs
;

26 
size_t
 
	mmemÀvñ
;

27 
ssize_t
 
	mmö_Àngth
;

29 
ngx_¨øy_t
 *
	mty≥s_keys
;

30 } 
	tngx_hâp_gzù_c⁄f_t
;

34 
ngx_chaö_t
 *
	mö
;

35 
ngx_chaö_t
 *
	m‰ì
;

36 
ngx_chaö_t
 *
	mbusy
;

37 
ngx_chaö_t
 *
	mout
;

38 
ngx_chaö_t
 **
	mœ°_out
;

40 
ngx_chaö_t
 *
	mc›õd
;

41 
ngx_chaö_t
 *
	mc›y_buf
;

43 
ngx_buf_t
 *
	mö_buf
;

44 
ngx_buf_t
 *
	mout_buf
;

45 
ngx_öt_t
 
	mbufs
;

47 *
	m¥óŒoˇãd
;

48 *
	m‰ì_mem
;

49 
ngx_uöt_t
 
	mÆloˇãd
;

51 
	mwbôs
;

52 
	mmemÀvñ
;

54 
	mÊush
:4;

55 
	mªdo
:1;

56 
	md⁄e
:1;

57 
	mnomem
:1;

58 
	mgzhódî
:1;

59 
	mbuf„rög
:1;

61 
size_t
 
	mzö
;

62 
size_t
 
	mzout
;

64 
uöt32_t
 
	m¸c32
;

65 
z_°ªam
 
	mz°ªam
;

66 
ngx_hâp_ªque°_t
 *
	mªque°
;

67 } 
	tngx_hâp_gzù_˘x_t
;

70 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

72 
	sgzåaûî
 {

73 
uöt32_t
 
	m¸c32
;

74 
uöt32_t
 
	mzÀn
;

79 
	sgzåaûî
 {

80 
u_ch¨
 
	m¸c32
[4];

81 
u_ch¨
 
	mzÀn
[4];

87 
ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_gzù_˘x_t
 *
˘x
);

89 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
,

90 
ngx_chaö_t
 *
ö
);

91 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_gzù_˘x_t
 *
˘x
);

93 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_gzù_˘x_t
 *
˘x
);

95 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_gzù_˘x_t
 *
˘x
);

97 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_gzù_˘x_t
 *
˘x
);

99 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_gzù_˘x_t
 *
˘x
);

101 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_gzù_˘x_t
 *
˘x
);

104 *
ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

105 
u_öt
 
size
);

106 
ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
);

107 
ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_hâp_gzù_˘x_t
 *
˘x
);

110 
ngx_öt_t
 
ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

111 
ngx_öt_t
 
ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

114 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

115 *
ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

117 *
∑ª¡
, *
chûd
);

118 *
ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

119 *
ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

122 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_gzù_comp_Àvñ_bounds
 = {

123 
ngx_c⁄f_check_num_bounds
, 1, 9

126 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_wödow_p
 = 
ngx_hâp_gzù_wödow
;

127 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_hash_p
 = 
ngx_hâp_gzù_hash
;

130 
ngx_comm™d_t
 
	gngx_hâp_gzù_fûãr_comm™ds
[] = {

132 { 
ngx_°rög
("gzip"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


134 |
NGX_CONF_FLAG
,

135 
ngx_c⁄f_£t_Êag_¶Ÿ
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
íabÀ
),

138 
NULL
 },

140 { 
ngx_°rög
("gzip_buffers"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

142 
ngx_c⁄f_£t_bufs_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
bufs
),

145 
NULL
 },

147 { 
ngx_°rög
("gzip_types"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

149 
ngx_hâp_ty≥s_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
ty≥s_keys
),

152 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

154 { 
ngx_°rög
("gzip_comp_level"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

156 
ngx_c⁄f_£t_num_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
Àvñ
),

159 &
ngx_hâp_gzù_comp_Àvñ_bounds
 },

161 { 
ngx_°rög
("gzip_window"),

162 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

163 
ngx_c⁄f_£t_size_¶Ÿ
,

164 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
wbôs
),

166 &
ngx_hâp_gzù_wödow_p
 },

168 { 
ngx_°rög
("gzip_hash"),

169 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

170 
ngx_c⁄f_£t_size_¶Ÿ
,

171 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
memÀvñ
),

173 &
ngx_hâp_gzù_hash_p
 },

175 { 
ngx_°rög
("postpone_gzipping"),

176 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

177 
ngx_c⁄f_£t_size_¶Ÿ
,

178 
NGX_HTTP_LOC_CONF_OFFSET
,

179 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
po°p⁄e_gzùpög
),

180 
NULL
 },

182 { 
ngx_°rög
("gzip_no_buffer"),

183 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

184 
ngx_c⁄f_£t_Êag_¶Ÿ
,

185 
NGX_HTTP_LOC_CONF_OFFSET
,

186 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
no_buf„r
),

187 
NULL
 },

189 { 
ngx_°rög
("gzip_min_length"),

190 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

191 
ngx_c⁄f_£t_size_¶Ÿ
,

192 
NGX_HTTP_LOC_CONF_OFFSET
,

193 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
mö_Àngth
),

194 
NULL
 },

196 
ngx_nuŒ_comm™d


200 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ_˘x
 = {

201 
ngx_hâp_gzù_add_v¨übÀs
,

202 
ngx_hâp_gzù_fûãr_öô
,

204 
NULL
,

205 
NULL
,

207 
NULL
,

208 
NULL
,

210 
ngx_hâp_gzù_¸óã_c⁄f
,

211 
ngx_hâp_gzù_mîge_c⁄f


215 
ngx_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ
 = {

216 
NGX_MODULE_V1
,

217 &
ngx_hâp_gzù_fûãr_moduÀ_˘x
,

218 
ngx_hâp_gzù_fûãr_comm™ds
,

219 
NGX_HTTP_MODULE
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NGX_MODULE_V1_PADDING


231 
ngx_°r_t
 
	gngx_hâp_gzù_øtio
 = 
ngx_°rög
("gzip_ratio");

233 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

234 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

237 
ngx_öt_t


238 
	$ngx_hâp_gzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

240 
ngx_èbÀ_ñt_t
 *
h
;

241 
ngx_hâp_gzù_˘x_t
 *
˘x
;

242 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

244 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

246 i‡(!
c⁄f
->
íabÀ


247 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


248 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_FORBIDDEN


249 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_FOUND
)

250 || (
r
->
hódîs_out
.
c⁄ã¡_ícodög


251 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

252 || (
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 != -1

253 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < 
c⁄f
->
mö_Àngth
)

254 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL


255 || 
r
->
hódî_⁄ly
)

257  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

260 
r
->
gzù_v¨y
 = 1;

262 #i‡(
NGX_HTTP_DEGRADATION
)

264 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

266 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

268 i‡(
˛cf
->
gzù_dißbÀ_degød©i⁄
 && 
	`ngx_hâp_degøded
(
r
)) {

269  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

274 i‡(!
r
->
gzù_ã°ed
) {

275 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë!
NGX_OK
) {

276  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

279 } i‡(!
r
->
gzù_ok
) {

280  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

283 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gzù_˘x_t
));

284 i‡(
˘x
 =
NULL
) {

285  
NGX_ERROR
;

288 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gzù_fûãr_moduÀ
);

290 
˘x
->
ªque°
 = 
r
;

291 
˘x
->
buf„rög
 = (
c⁄f
->
po°p⁄e_gzùpög
 != 0);

293 
	`ngx_hâp_gzù_fûãr_mem‹y
(
r
, 
˘x
);

295 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

296 i‡(
h
 =
NULL
) {

297  
NGX_ERROR
;

300 
h
->
hash
 = 1;

301 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

302 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

303 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

305 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

307 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

308 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

310  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

311 
	}
}

314 
ngx_öt_t


315 
	$ngx_hâp_gzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

317 
rc
;

318 
ngx_chaö_t
 *
˛
;

319 
ngx_hâp_gzù_˘x_t
 *
˘x
;

321 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

323 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

324  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

327 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

330 i‡(
˘x
->
buf„rög
) {

341 i‡(
ö
) {

342 
	`ngx_hâp_gzù_fûãr_buf„r
(
˘x
, 
ö
)) {

344 
NGX_OK
:

345  
NGX_OK
;

347 
NGX_DONE
:

348 
ö
 = 
NULL
;

352 
Áûed
;

356 
˘x
->
buf„rög
 = 0;

360 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

361 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

362 
Áûed
;

366 i‡(
ö
) {

367 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

368 
Áûed
;

372 i‡(
˘x
->
nomem
) {

376 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

377 
Áûed
;

380 
˛
 = 
NULL
;

382 
	`ngx_chaö_upd©e_chaös
(&
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

383 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

384 
˘x
->
nomem
 = 0;

395 
rc
 = 
	`ngx_hâp_gzù_fûãr_add_d©a
(
r
, 
˘x
);

397 i‡(
rc
 =
NGX_DECLINED
) {

401 i‡(
rc
 =
NGX_AGAIN
) {

408 
rc
 = 
	`ngx_hâp_gzù_fûãr_gë_buf
(
r
, 
˘x
);

410 i‡(
rc
 =
NGX_DECLINED
) {

414 i‡(
rc
 =
NGX_ERROR
) {

415 
Áûed
;

419 
rc
 = 
	`ngx_hâp_gzù_fûãr_deÊ©e
(
r
, 
˘x
);

421 i‡(
rc
 =
NGX_OK
) {

425 i‡(
rc
 =
NGX_ERROR
) {

426 
Áûed
;

432 i‡(
˘x
->
out
 =
NULL
) {

433 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

435  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

438 i‡(!
˘x
->
gzhódî
) {

439 i‡(
	`ngx_hâp_gzù_fûãr_gzhódî
(
r
, 
˘x
Ë!
NGX_OK
) {

440 
Áûed
;

444 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

446 i‡(
rc
 =
NGX_ERROR
) {

447 
Áûed
;

450 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

452 
	`ngx_chaö_upd©e_chaös
(&
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

453 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

454 
˘x
->
œ°_out
 = &˘x->
out
;

456 
˘x
->
nomem
 = 0;

458 i‡(
˘x
->
d⁄e
) {

459  
rc
;

465 
Áûed
:

467 
˘x
->
d⁄e
 = 1;

469 i‡(
˘x
->
¥óŒoˇãd
) {

470 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

472 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

475 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

477  
NGX_ERROR
;

478 
	}
}

482 
	$ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

484 
wbôs
, 
memÀvñ
;

485 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

487 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

489 
wbôs
 = 
c⁄f
->wbits;

490 
memÀvñ
 = 
c⁄f
->memlevel;

492 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 > 0) {

496 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < ((1 << (
wbôs
 - 1)) - 262)) {

497 
wbôs
--;

498 
memÀvñ
--;

502 
˘x
->
wbôs
 = wbits;

503 
˘x
->
memÀvñ
 = memlevel;

517 
˘x
->
Æloˇãd
 = 8192 + (1 << (
wbôs
 + 2)Ë+ (1 << (
memÀvñ
 + 9));

518 
	}
}

521 
ngx_öt_t


522 
	$ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

524 
size_t
 
size
, 
buf„ªd
;

525 
ngx_buf_t
 *
b
, *
buf
;

526 
ngx_chaö_t
 *
˛
, **
Œ
;

527 
ngx_hâp_ªque°_t
 *
r
;

528 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

530 
r
 = 
˘x
->
ªque°
;

532 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

534 
buf„ªd
 = 0;

535 
Œ
 = &
˘x
->
ö
;

537 
˛
 = 
˘x
->
ö
; cl; c»˛->
√xt
) {

538 
buf„ªd
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

539 
Œ
 = &
˛
->
√xt
;

542 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

544 
ö
) {

545 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

546 i‡(
˛
 =
NULL
) {

547  
NGX_ERROR
;

550 
b
 = 
ö
->
buf
;

552 
size
 = 
b
->
œ°
 - b->
pos
;

553 
buf„ªd
 +
size
;

555 i‡(
b
->
Êush
 || b->
œ°_buf
 || 
buf„ªd
 > 
c⁄f
->
po°p⁄e_gzùpög
) {

556 
˘x
->
buf„rög
 = 0;

559 i‡(
˘x
->
buf„rög
 && 
size
) {

561 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

562 i‡(
buf
 =
NULL
) {

563  
NGX_ERROR
;

566 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->
pos
, 
b
->pos, 
size
);

567 
b
->
pos
 = b->
œ°
;

569 
buf
->
œ°_buf
 = 
b
->last_buf;

570 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

572 
˛
->
buf
 = buf;

575 
˛
->
buf
 = 
b
;

578 *
Œ
 = 
˛
;

579 
Œ
 = &
˛
->
√xt
;

580 
ö
 = in->
√xt
;

583 *
Œ
 = 
NULL
;

585  
˘x
->
buf„rög
 ? 
NGX_OK
 : 
NGX_DONE
;

586 
	}
}

589 
ngx_öt_t


590 
	$ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

591 
ngx_hâp_gzù_˘x_t
 *
˘x
)

593 
rc
;

594 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

596 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

598 
˘x
->
¥óŒoˇãd
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Æloˇãd
);

599 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

600  
NGX_ERROR
;

603 
˘x
->
‰ì_mem
 = ctx->
¥óŒoˇãd
;

605 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gzù_fûãr_Æloc
;

606 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gzù_fûãr_‰ì
;

607 
˘x
->
z°ªam
.
›aque
 = ctx;

609 
rc
 = 
	`deÊ©eInô2
(&
˘x
->
z°ªam
, (Ë
c⁄f
->
Àvñ
, 
Z_DEFLATED
,

610 - 
˘x
->
wbôs
, ctx->
memÀvñ
, 
Z_DEFAULT_STRATEGY
);

612 i‡(
rc
 !
Z_OK
) {

613 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

614 "deÊ©eInô2(ËÁûed: %d", 
rc
);

615  
NGX_ERROR
;

618 
˘x
->
œ°_out
 = &˘x->
out
;

619 
˘x
->
¸c32
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

620 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

622  
NGX_OK
;

623 
	}
}

626 
ngx_öt_t


627 
	$ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

629 
ngx_buf_t
 *
b
;

630 
ngx_chaö_t
 *
˛
;

631 
u_ch¨
 
gzhódî
[10] =

632 { 0x1f, 0x8b, 
Z_DEFLATED
, 0, 0, 0, 0, 0, 0, 3 };

634 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

635 i‡(
b
 =
NULL
) {

636  
NGX_ERROR
;

639 
b
->
mem‹y
 = 1;

640 
b
->
pos
 = 
gzhódî
;

641 
b
->
œ°
 = b->
pos
 + 10;

643 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

644 i‡(
˛
 =
NULL
) {

645  
NGX_ERROR
;

648 
˛
->
buf
 = 
b
;

649 
˛
->
√xt
 = 
˘x
->
out
;

650 
˘x
->
out
 = 
˛
;

652 
˘x
->
gzhódî
 = 1;

654  
NGX_OK
;

655 
	}
}

658 
ngx_öt_t


659 
	$ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

661 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

662  
NGX_OK
;

665 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

666 "gzù in: %p", 
˘x
->
ö
);

668 i‡(
˘x
->
ö
 =
NULL
) {

669  
NGX_DECLINED
;

672 i‡(
˘x
->
c›y_buf
) {

679 
˘x
->
c›y_buf
->
√xt
 = ctx->
c›õd
;

680 
˘x
->
c›õd
 = ctx->
c›y_buf
;

681 
˘x
->
c›y_buf
 = 
NULL
;

684 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

686 i‡(
˘x
->
ö_buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
) {

687 
˘x
->
c›y_buf
 = ctx->
ö
;

690 
˘x
->
ö
 = ctx->ö->
√xt
;

692 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

693 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

695 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

697 
˘x
->
ö_buf
,

698 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

700 i‡(
˘x
->
ö_buf
->
œ°_buf
) {

701 
˘x
->
Êush
 = 
Z_FINISH
;

703 } i‡(
˘x
->
ö_buf
->
Êush
) {

704 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

707 i‡(
˘x
->
z°ªam
.
avaû_ö
) {

709 
˘x
->
¸c32
 = 
	`¸c32
(˘x->¸c32, ctx->
z°ªam
.
√xt_ö
,

710 
˘x
->
z°ªam
.
avaû_ö
);

712 } i‡(
˘x
->
Êush
 =
Z_NO_FLUSH
) {

713  
NGX_AGAIN
;

716  
NGX_OK
;

717 
	}
}

720 
ngx_öt_t


721 
	$ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

723 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

725 i‡(
˘x
->
z°ªam
.
avaû_out
) {

726  
NGX_OK
;

729 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

731 i‡(
˘x
->
‰ì
) {

732 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

733 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

735 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

737 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

738 i‡(
˘x
->
out_buf
 =
NULL
) {

739  
NGX_ERROR
;

742 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

743 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

744 
˘x
->
bufs
++;

747 
˘x
->
nomem
 = 1;

748  
NGX_DECLINED
;

751 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

752 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

754  
NGX_OK
;

755 
	}
}

758 
ngx_öt_t


759 
	$ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

761 
rc
;

762 
ngx_chaö_t
 *
˛
;

763 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

765 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

767 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

768 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

769 
˘x
->
Êush
, ctx->
ªdo
);

771 
rc
 = 
	`deÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

773 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
) {

774 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

775 "deÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

776  
NGX_ERROR
;

779 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

781 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

782 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

783 
rc
);

785 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

787 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

789 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

790 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

792 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

793 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

797 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

799 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

803 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

804 i‡(
˛
 =
NULL
) {

805  
NGX_ERROR
;

808 
˛
->
buf
 = 
˘x
->
out_buf
;

809 
˛
->
√xt
 = 
NULL
;

810 *
˘x
->
œ°_out
 = 
˛
;

811 
˘x
->
œ°_out
 = &
˛
->
√xt
;

813 
˘x
->
ªdo
 = 1;

815  
NGX_AGAIN
;

818 
˘x
->
ªdo
 = 0;

820 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

822 
˘x
->
z°ªam
.
avaû_out
 = 0;

823 
˘x
->
out_buf
->
Êush
 = 1;

824 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

826 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

827 i‡(
˛
 =
NULL
) {

828  
NGX_ERROR
;

831 
˛
->
buf
 = 
˘x
->
out_buf
;

832 
˛
->
√xt
 = 
NULL
;

833 *
˘x
->
œ°_out
 = 
˛
;

834 
˘x
->
œ°_out
 = &
˛
->
√xt
;

836  
NGX_OK
;

839 i‡(
rc
 =
Z_STREAM_END
) {

841 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

842  
NGX_ERROR
;

845  
NGX_OK
;

848 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

850 i‡(
c⁄f
->
no_buf„r
 && 
˘x
->
ö
 =
NULL
) {

852 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

853 i‡(
˛
 =
NULL
) {

854  
NGX_ERROR
;

857 
˛
->
buf
 = 
˘x
->
out_buf
;

858 
˛
->
√xt
 = 
NULL
;

859 *
˘x
->
œ°_out
 = 
˛
;

860 
˘x
->
œ°_out
 = &
˛
->
√xt
;

862  
NGX_OK
;

865  
NGX_AGAIN
;

866 
	}
}

869 
ngx_öt_t


870 
	$ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

871 
ngx_hâp_gzù_˘x_t
 *
˘x
)

873 
rc
;

874 
ngx_buf_t
 *
b
;

875 
ngx_chaö_t
 *
˛
;

876 
gzåaûî
 *
åaûî
;

878 
˘x
->
zö
 = ctx->
z°ªam
.
tŸÆ_ö
;

879 
˘x
->
zout
 = 10 + ctx->
z°ªam
.
tŸÆ_out
 + 8;

881 
rc
 = 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

883 i‡(
rc
 !
Z_OK
) {

884 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

885 "deÊ©eEnd(ËÁûed: %d", 
rc
);

886  
NGX_ERROR
;

889 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

891 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

892 i‡(
˛
 =
NULL
) {

893  
NGX_ERROR
;

896 
˛
->
buf
 = 
˘x
->
out_buf
;

897 
˛
->
√xt
 = 
NULL
;

898 *
˘x
->
œ°_out
 = 
˛
;

899 
˘x
->
œ°_out
 = &
˛
->
√xt
;

901 i‡(
˘x
->
z°ªam
.
avaû_out
 >= 8) {

902 
åaûî
 = (
gzåaûî
 *Ë
˘x
->
out_buf
->
œ°
;

903 
˘x
->
out_buf
->
œ°
 += 8;

904 
˘x
->
out_buf
->
œ°_buf
 = 1;

907 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 8);

908 i‡(
b
 =
NULL
) {

909  
NGX_ERROR
;

912 
b
->
œ°_buf
 = 1;

914 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

915 i‡(
˛
 =
NULL
) {

916  
NGX_ERROR
;

919 
˛
->
buf
 = 
b
;

920 
˛
->
√xt
 = 
NULL
;

921 *
˘x
->
œ°_out
 = 
˛
;

922 
˘x
->
œ°_out
 = &
˛
->
√xt
;

923 
åaûî
 = (
gzåaûî
 *Ë
b
->
pos
;

924 
b
->
œ°
 += 8;

927 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

929 
åaûî
->
¸c32
 = 
˘x
->crc32;

930 
åaûî
->
zÀn
 = 
˘x
->
zö
;

934 
åaûî
->
¸c32
[0] = (
u_ch¨
Ë(
˘x
->crc32 & 0xff);

935 
åaûî
->
¸c32
[1] = (
u_ch¨
Ë((
˘x
->crc32 >> 8) & 0xff);

936 
åaûî
->
¸c32
[2] = (
u_ch¨
Ë((
˘x
->crc32 >> 16) & 0xff);

937 
åaûî
->
¸c32
[3] = (
u_ch¨
Ë((
˘x
->crc32 >> 24) & 0xff);

939 
åaûî
->
zÀn
[0] = (
u_ch¨
Ë(
˘x
->
zö
 & 0xff);

940 
åaûî
->
zÀn
[1] = (
u_ch¨
Ë((
˘x
->
zö
 >> 8) & 0xff);

941 
åaûî
->
zÀn
[2] = (
u_ch¨
Ë((
˘x
->
zö
 >> 16) & 0xff);

942 
åaûî
->
zÀn
[3] = (
u_ch¨
Ë((
˘x
->
zö
 >> 24) & 0xff);

946 
˘x
->
z°ªam
.
avaû_ö
 = 0;

947 
˘x
->
z°ªam
.
avaû_out
 = 0;

949 
˘x
->
d⁄e
 = 1;

951 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

953  
NGX_OK
;

954 
	}
}

958 
	$ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

960 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

962 *
p
;

963 
ngx_uöt_t
 
Æloc
;

965 
Æloc
 = 
ôems
 * 
size
;

967 i‡(
Æloc
 % 512 != 0 &&álloc < 8192) {

974 
Æloc
 = 8192;

977 i‡(
Æloc
 <
˘x
->
Æloˇãd
) {

978 
p
 = 
˘x
->
‰ì_mem
;

979 
˘x
->
‰ì_mem
 +
Æloc
;

980 
˘x
->
Æloˇãd
 -
Æloc
;

982 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

984 
ôems
, 
size
, 
Æloc
, 
p
);

986  
p
;

989 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

991 
ôems
 * 
size
, 
˘x
->
Æloˇãd
);

993 
p
 = 
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

995  
p
;

996 
	}
}

1000 
	$ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
)

1003 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

1005 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1006 "gzù fªe: %p", 
addªss
);

1008 
	}
}

1012 
	$ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

1013 
ngx_hâp_gzù_˘x_t
 *
˘x
)

1015 
ngx_chaö_t
 *
˛
;

1017 
˛
 = 
˘x
->
c›õd
; cl; c»˛->
√xt
) {

1018 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˛
->
buf
->
°¨t
);

1021 
˘x
->
c›õd
 = 
NULL
;

1022 
	}
}

1025 
ngx_öt_t


1026 
	$ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

1028 
ngx_hâp_v¨übÀ_t
 *
v¨
;

1030 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_gzù_øtio
, 
NGX_HTTP_VAR_NOHASH
);

1031 i‡(
v¨
 =
NULL
) {

1032  
NGX_ERROR
;

1035 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_gzù_øtio_v¨übÀ
;

1037  
NGX_OK
;

1038 
	}
}

1041 
ngx_öt_t


1042 
	$ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1043 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1045 
ngx_uöt_t
 
zöt
, 
z‰ac
;

1046 
ngx_hâp_gzù_˘x_t
 *
˘x
;

1048 
v
->
vÆid
 = 1;

1049 
v
->
no_ˇchóbÀ
 = 0;

1050 
v
->
nŸ_found
 = 0;

1052 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

1054 i‡(
˘x
 =
NULL
 || ctx->
zout
 == 0) {

1055 
v
->
nŸ_found
 = 1;

1056  
NGX_OK
;

1059 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
 + 3);

1060 i‡(
v
->
d©a
 =
NULL
) {

1061  
NGX_ERROR
;

1064 
zöt
 = (
ngx_uöt_t
Ë(
˘x
->
zö
 / ctx->
zout
);

1065 
z‰ac
 = (
ngx_uöt_t
Ë((
˘x
->
zö
 * 100 / ctx->
zout
) % 100);

1067 i‡((
˘x
->
zö
 * 1000 / ctx->
zout
) % 10 > 4) {

1071 
z‰ac
++;

1073 i‡(
z‰ac
 > 99) {

1074 
zöt
++;

1075 
z‰ac
 = 0;

1079 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui.%02ui", 
zöt
, 
z‰ac
) - v->data;

1081  
NGX_OK
;

1082 
	}
}

1086 
	$ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1088 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

1090 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_c⁄f_t
));

1091 i‡(
c⁄f
 =
NULL
) {

1092  
NULL
;

1103 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

1104 
c⁄f
->
no_buf„r
 = 
NGX_CONF_UNSET
;

1106 
c⁄f
->
po°p⁄e_gzùpög
 = 
NGX_CONF_UNSET_SIZE
;

1107 
c⁄f
->
Àvñ
 = 
NGX_CONF_UNSET
;

1108 
c⁄f
->
wbôs
 = 
NGX_CONF_UNSET_SIZE
;

1109 
c⁄f
->
memÀvñ
 = 
NGX_CONF_UNSET_SIZE
;

1110 
c⁄f
->
mö_Àngth
 = 
NGX_CONF_UNSET
;

1112  
c⁄f
;

1113 
	}
}

1117 
	$ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1119 
ngx_hâp_gzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1120 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

1122 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1123 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_buf„r
, 
¥ev
->no_buffer, 0);

1125 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

1126 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

1128 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_gzùpög
, 
¥ev
->postpone_gzipping,

1130 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
Àvñ
, 
¥ev
->level, 1);

1131 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
wbôs
, 
¥ev
->wbôs, 
MAX_WBITS
);

1132 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
memÀvñ
, 
¥ev
->memlevel,

1133 
MAX_MEM_LEVEL
 - 1);

1134 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mö_Àngth
, 
¥ev
->min_length, 20);

1136 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1137 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1138 
ngx_hâp_html_deÁu…_ty≥s
)

1139 !
NGX_OK
)

1141  
NGX_CONF_ERROR
;

1144  
NGX_CONF_OK
;

1145 
	}
}

1148 
ngx_öt_t


1149 
	$ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1151 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1152 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gzù_hódî_fûãr
;

1154 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1155 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gzù_body_fûãr
;

1157  
NGX_OK
;

1158 
	}
}

1162 
	$ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1164 
size_t
 *
≈
 = 
d©a
;

1166 
size_t
 
wbôs
, 
wsize
;

1168 
wbôs
 = 15;

1170 
wsize
 = 32 * 1024; wsize > 256; wsize >>= 1) {

1172 i‡(
wsize
 =*
≈
) {

1173 *
≈
 = 
wbôs
;

1175  
NGX_CONF_OK
;

1178 
wbôs
--;

1182 
	}
}

1186 
	$ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1188 
size_t
 *
≈
 = 
d©a
;

1190 
size_t
 
memÀvñ
, 
hsize
;

1192 
memÀvñ
 = 9;

1194 
hsize
 = 128 * 1024; hsize > 256; hsize >>= 1) {

1196 i‡(
hsize
 =*
≈
) {

1197 *
≈
 = 
memÀvñ
;

1199  
NGX_CONF_OK
;

1202 
memÀvñ
--;

1206 
	}
}

	@src/http/modules/ngx_http_gzip_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_Êag_t
 
	míabÀ
;

15 } 
	tngx_hâp_gzù_°©ic_c⁄f_t
;

18 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

19 *
ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

20 *
ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

21 *
chûd
);

22 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

25 
ngx_comm™d_t
 
	gngx_hâp_gzù_°©ic_comm™ds
[] = {

27 { 
ngx_°rög
("gzip_static"),

28 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

29 
ngx_c⁄f_£t_Êag_¶Ÿ
,

30 
NGX_HTTP_LOC_CONF_OFFSET
,

31 
off£tof
(
ngx_hâp_gzù_°©ic_c⁄f_t
, 
íabÀ
),

32 
NULL
 },

34 
ngx_nuŒ_comm™d


38 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ_˘x
 = {

39 
NULL
,

40 
ngx_hâp_gzù_°©ic_öô
,

42 
NULL
,

43 
NULL
,

45 
NULL
,

46 
NULL
,

48 
ngx_hâp_gzù_°©ic_¸óã_c⁄f
,

49 
ngx_hâp_gzù_°©ic_mîge_c⁄f


53 
ngx_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ
 = {

54 
NGX_MODULE_V1
,

55 &
ngx_hâp_gzù_°©ic_moduÀ_˘x
,

56 
ngx_hâp_gzù_°©ic_comm™ds
,

57 
NGX_HTTP_MODULE
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NGX_MODULE_V1_PADDING


69 
ngx_öt_t


70 
	$ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

72 
u_ch¨
 *
p
;

73 
size_t
 
roŸ
;

74 
ngx_°r_t
 
∑th
;

75 
ngx_öt_t
 
rc
;

76 
ngx_uöt_t
 
Àvñ
;

77 
ngx_log_t
 *
log
;

78 
ngx_buf_t
 *
b
;

79 
ngx_chaö_t
 
out
;

80 
ngx_èbÀ_ñt_t
 *
h
;

81 
ngx_›í_fûe_öfo_t
 
of
;

82 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

83 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
gzcf
;

85 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

86  
NGX_DECLINED
;

89 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

90  
NGX_DECLINED
;

93 
gzcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_°©ic_moduÀ
);

95 i‡(!
gzcf
->
íabÀ
) {

96  
NGX_DECLINED
;

99 
rc
 = 
	`ngx_hâp_gzù_ok
(
r
);

101 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

103 i‡(!
˛cf
->
gzù_v¨y
 && 
rc
 !
NGX_OK
) {

104  
NGX_DECLINED
;

107 
log
 = 
r
->
c⁄√˘i⁄
->log;

109 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, (".gz") - 1);

110 i‡(
p
 =
NULL
) {

111  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

114 *
p
++ = '.';

115 *
p
++ = 'g';

116 *
p
++ = 'z';

117 *
p
 = '\0';

119 
∑th
.
Àn
 = 
p
 -Ö©h.
d©a
;

121 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

122 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

124 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

126 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

127 
of
.
dúe˘io
 = 
˛cf
->directio;

128 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

129 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

130 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

131 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

133 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

134 !
NGX_OK
)

136 
of
.
îr
) {

139  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

141 
NGX_ENOENT
:

142 
NGX_ENOTDIR
:

143 
NGX_ENAMETOOLONG
:

145  
NGX_DECLINED
;

147 
NGX_EACCES
:

149 
Àvñ
 = 
NGX_LOG_ERR
;

154 
Àvñ
 = 
NGX_LOG_CRIT
;

158 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

159 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

161  
NGX_DECLINED
;

164 
r
->
gzù_v¨y
 = 1;

166 i‡(
rc
 !
NGX_OK
) {

167  
NGX_DECLINED
;

170 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

172 i‡(
of
.
is_dú
) {

173 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

174  
NGX_DECLINED
;

177 #i‡!(
NGX_WIN32
)

179 i‡(!
of
.
is_fûe
) {

180 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

181 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

183  
NGX_HTTP_NOT_FOUND
;

188 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

190 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

192 i‡(
rc
 !
NGX_OK
) {

193  
rc
;

196 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

198 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

199 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

200 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

202 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

203  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

206 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

207 i‡(
h
 =
NULL
) {

208  
NGX_ERROR
;

211 
h
->
hash
 = 1;

212 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

213 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

214 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

216 
r
->
ign‹e_c⁄ã¡_ícodög
 = 1;

220 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

221 i‡(
b
 =
NULL
) {

222  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

225 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

226 i‡(
b
->
fûe
 =
NULL
) {

227  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

230 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

232 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

233  
rc
;

236 
b
->
fûe_pos
 = 0;

237 
b
->
fûe_œ°
 = 
of
.
size
;

239 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

240 
b
->
œ°_buf
 = 1;

241 
b
->
œ°_ö_chaö
 = 1;

243 
b
->
fûe
->
fd
 = 
of
.fd;

244 
b
->
fûe
->
«me
 = 
∑th
;

245 
b
->
fûe
->
log
 =Üog;

246 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

248 
out
.
buf
 = 
b
;

249 
out
.
√xt
 = 
NULL
;

251  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

252 
	}
}

256 
	$ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

258 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
;

260 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_°©ic_c⁄f_t
));

261 i‡(
c⁄f
 =
NULL
) {

262  
NULL
;

265 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

267  
c⁄f
;

268 
	}
}

272 
	$ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

274 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

275 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
 = 
chûd
;

277 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

279  
NGX_CONF_OK
;

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

286 
ngx_hâp_h™dÀr_±
 *
h
;

287 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

289 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

291 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

292 i‡(
h
 =
NULL
) {

293  
NGX_ERROR
;

296 *
h
 = 
ngx_hâp_gzù_°©ic_h™dÀr
;

298  
NGX_OK
;

299 
	}
}

	@src/http/modules/ngx_http_headers_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_hódî_vÆ_s
 
	tngx_hâp_hódî_vÆ_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_£t_hódî_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_hâp_hódî_vÆ_t
 *
	thv
, 
	tngx_°r_t
 *
	tvÆue
);

20 
ngx_°r_t
 
«me
;

21 
ngx_uöt_t
 
off£t
;

22 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

23 } 
	tngx_hâp_£t_hódî_t
;

26 
	sngx_hâp_hódî_vÆ_s
 {

27 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

28 
ngx_uöt_t
 
hash
;

29 
ngx_°r_t
 
key
;

30 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

31 
ngx_uöt_t
 
off£t
;

35 
	#NGX_HTTP_EXPIRES_OFF
 0

	)

36 
	#NGX_HTTP_EXPIRES_EPOCH
 1

	)

37 
	#NGX_HTTP_EXPIRES_MAX
 2

	)

38 
	#NGX_HTTP_EXPIRES_ACCESS
 3

	)

39 
	#NGX_HTTP_EXPIRES_MODIFIED
 4

	)

40 
	#NGX_HTTP_EXPIRES_DAILY
 5

	)

44 
ngx_uöt_t
 
expúes
;

45 
time_t
 
expúes_time
;

46 
ngx_¨øy_t
 *
hódîs
;

47 } 
	tngx_hâp_hódîs_c⁄f_t
;

50 
ngx_öt_t
 
	`ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
);

52 
ngx_öt_t
 
	`ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

54 
ngx_öt_t
 
	`ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

57 *
	`ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

58 *
	`ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

59 *
∑ª¡
, *
chûd
);

60 
ngx_öt_t
 
	`ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

61 *
	`ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
	`ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

64 *
c⁄f
);

67 
ngx_hâp_£t_hódî_t
 
ngx_hâp_£t_hódîs
[] = {

69 { 
	`ngx_°rög
("Cache-C⁄åﬁ"), 0, 
ngx_hâp_add_ˇche_c⁄åﬁ
 },

71 { 
	`ngx_°rög
("Last-Modified"),

72 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
),

73 
ngx_hâp_£t_œ°_modifõd
 },

75 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

76 
	}
};

79 
ngx_comm™d_t
 
	gngx_hâp_hódîs_fûãr_comm™ds
[] = {

81 { 
ngx_°rög
("expires"),

82 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


83 |
NGX_CONF_TAKE12
,

84 
ngx_hâp_hódîs_expúes
,

85 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
NULL
},

89 { 
ngx_°rög
("add_header"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


91 |
NGX_CONF_TAKE2
,

92 
ngx_hâp_hódîs_add
,

93 
NGX_HTTP_LOC_CONF_OFFSET
,

95 
NULL
},

97 
ngx_nuŒ_comm™d


101 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ_˘x
 = {

102 
NULL
,

103 
ngx_hâp_hódîs_fûãr_öô
,

105 
NULL
,

106 
NULL
,

108 
NULL
,

109 
NULL
,

111 
ngx_hâp_hódîs_¸óã_c⁄f
,

112 
ngx_hâp_hódîs_mîge_c⁄f


116 
ngx_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ
 = {

117 
NGX_MODULE_V1
,

118 &
ngx_hâp_hódîs_fûãr_moduÀ_˘x
,

119 
ngx_hâp_hódîs_fûãr_comm™ds
,

120 
NGX_HTTP_MODULE
,

121 
NULL
,

122 
NULL
,

123 
NULL
,

124 
NULL
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NGX_MODULE_V1_PADDING


132 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

135 
ngx_öt_t


136 
	$ngx_hâp_hódîs_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

138 
ngx_°r_t
 
vÆue
;

139 
ngx_uöt_t
 
i
;

140 
ngx_hâp_hódî_vÆ_t
 *
h
;

141 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

143 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_hódîs_fûãr_moduÀ
);

145 i‡((
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_OFF
 && c⁄f->
hódîs
 =
NULL
)

146 || 
r
 !r->
maö


147 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


148 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NO_CONTENT


149 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


150 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_MOVED_PERMANENTLY


151 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_MOVED_TEMPORARILY


152 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_SEE_OTHER


153 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED


154 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_TEMPORARY_REDIRECT
))

156  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

159 i‡(
c⁄f
->
expúes
 !
NGX_HTTP_EXPIRES_OFF
) {

160 i‡(
	`ngx_hâp_£t_expúes
(
r
, 
c⁄f
Ë!
NGX_OK
) {

161  
NGX_ERROR
;

165 i‡(
c⁄f
->
hódîs
) {

166 
h
 = 
c⁄f
->
hódîs
->
ñts
;

167 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

169 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
h
[
i
].
vÆue
, &vÆueË!
NGX_OK
) {

170  
NGX_ERROR
;

173 i‡(
h
[
i
].
	`h™dÀr
(
r
, &h[i], &
vÆue
Ë!
NGX_OK
) {

174  
NGX_ERROR
;

179  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

180 
	}
}

183 
ngx_öt_t


184 
	$ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
)

186 
size_t
 
Àn
;

187 
time_t
 
now
, 
expúes_time
, 
max_age
;

188 
ngx_uöt_t
 
i
;

189 
ngx_èbÀ_ñt_t
 *
expúes
, *
cc
, **
c˝
;

191 
expúes
 = 
r
->
hódîs_out
.expires;

193 i‡(
expúes
 =
NULL
) {

195 
expúes
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

196 i‡(
expúes
 =
NULL
) {

197  
NGX_ERROR
;

200 
r
->
hódîs_out
.
expúes
 =Éxpires;

202 
expúes
->
hash
 = 1;

203 
	`ngx_°r_£t
(&
expúes
->
key
, "Expires");

206 
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT");

207 
expúes
->
vÆue
.
Àn
 =Üen - 1;

209 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

211 i‡(
c˝
 =
NULL
) {

213 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

214 1, (
ngx_èbÀ_ñt_t
 *))

215 !
NGX_OK
)

217  
NGX_ERROR
;

220 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

221 i‡(
c˝
 =
NULL
) {

222  
NGX_ERROR
;

225 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

226 i‡(
cc
 =
NULL
) {

227  
NGX_ERROR
;

230 
cc
->
hash
 = 1;

231 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

232 *
c˝
 = 
cc
;

235 
i
 = 1; i < 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
√…s
; i++) {

236 
c˝
[
i
]->
hash
 = 0;

239 
cc
 = 
c˝
[0];

242 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_EPOCH
) {

243 
expúes
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 01 Jan 1970 00:00:01 GMT";

244 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

245  
NGX_OK
;

248 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_MAX
) {

249 
expúes
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 31 Dec 2037 23:55:55 GMT";

251 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=315360000");

252  
NGX_OK
;

255 
expúes
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

256 i‡(
expúes
->
vÆue
.
d©a
 =
NULL
) {

257  
NGX_ERROR
;

260 i‡(
c⁄f
->
expúes_time
 =0 && c⁄f->
expúes
 !
NGX_HTTP_EXPIRES_DAILY
) {

261 
	`ngx_mem˝y
(
expúes
->
vÆue
.
d©a
, 
ngx_ˇched_hâp_time
.data,

262 
ngx_ˇched_hâp_time
.
Àn
 + 1);

263 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=0");

264  
NGX_OK
;

267 
now
 = 
	`ngx_time
();

269 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_DAILY
) {

270 
expúes_time
 = 
	`ngx_√xt_time
(
c⁄f
->expires_time);

271 
max_age
 = 
expúes_time
 - 
now
;

273 } i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_ACCESS


274 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

276 
expúes_time
 = 
now
 + 
c⁄f
->expires_time;

277 
max_age
 = 
c⁄f
->
expúes_time
;

280 
expúes_time
 = 
r
->
hódîs_out
.
œ°_modifõd_time
 + 
c⁄f
->expires_time;

281 
max_age
 = 
expúes_time
 - 
now
;

284 
	`ngx_hâp_time
(
expúes
->
vÆue
.
d©a
, 
expúes_time
);

286 i‡(
c⁄f
->
expúes_time
 < 0 || 
max_age
 < 0) {

287 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

288  
NGX_OK
;

291 
cc
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

292 ("max-age="Ë+ 
NGX_TIME_T_LEN
 + 1);

293 i‡(
cc
->
vÆue
.
d©a
 =
NULL
) {

294  
NGX_ERROR
;

297 
cc
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(cc->vÆue.
d©a
, "max-age=%T", 
max_age
)

298 - 
cc
->
vÆue
.
d©a
;

300  
NGX_OK
;

301 
	}
}

304 
ngx_öt_t


305 
	$ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

306 
ngx_°r_t
 *
vÆue
)

308 
ngx_èbÀ_ñt_t
 *
h
;

310 i‡(
vÆue
->
Àn
) {

311 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

312 i‡(
h
 =
NULL
) {

313  
NGX_ERROR
;

316 
h
->
hash
 = 
hv
->hash;

317 
h
->
key
 = 
hv
->key;

318 
h
->
vÆue
 = *value;

321  
NGX_OK
;

322 
	}
}

325 
ngx_öt_t


326 
	$ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

327 
ngx_°r_t
 *
vÆue
)

329 
ngx_èbÀ_ñt_t
 *
cc
, **
c˝
;

331 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

333 i‡(
c˝
 =
NULL
) {

335 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

336 1, (
ngx_èbÀ_ñt_t
 *))

337 !
NGX_OK
)

339  
NGX_ERROR
;

343 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

344 i‡(
c˝
 =
NULL
) {

345  
NGX_ERROR
;

348 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

349 i‡(
cc
 =
NULL
) {

350  
NGX_ERROR
;

353 
cc
->
hash
 = 1;

354 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

355 
cc
->
vÆue
 = *value;

357 *
c˝
 = 
cc
;

359  
NGX_OK
;

360 
	}
}

363 
ngx_öt_t


364 
	$ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

365 
ngx_°r_t
 *
vÆue
)

367 
ngx_èbÀ_ñt_t
 *
h
, **
ﬁd
;

369 i‡(
hv
->
off£t
) {

370 
ﬁd
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
hv
->
off£t
);

373 
ﬁd
 = 
NULL
;

376 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

378 i‡(
ﬁd
 =
NULL
 || *old == NULL) {

380 i‡(
vÆue
->
Àn
 == 0) {

381  
NGX_OK
;

384 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

385 i‡(
h
 =
NULL
) {

386  
NGX_ERROR
;

390 
h
 = *
ﬁd
;

392 i‡(
vÆue
->
Àn
 == 0) {

393 
h
->
hash
 = 0;

394  
NGX_OK
;

398 
h
->
hash
 = 
hv
->hash;

399 
h
->
key
 = 
hv
->key;

400 
h
->
vÆue
 = *value;

402  
NGX_OK
;

403 
	}
}

407 
	$ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

409 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

411 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_hódîs_c⁄f_t
));

412 i‡(
c⁄f
 =
NULL
) {

413  
NULL
;

423 
c⁄f
->
expúes
 = 
NGX_CONF_UNSET_UINT
;

425  
c⁄f
;

426 
	}
}

430 
	$ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

432 
ngx_hâp_hódîs_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

433 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
 = 
chûd
;

435 i‡(
c⁄f
->
expúes
 =
NGX_CONF_UNSET_UINT
) {

436 
c⁄f
->
expúes
 = 
¥ev
->expires;

437 
c⁄f
->
expúes_time
 = 
¥ev
->expires_time;

439 i‡(
c⁄f
->
expúes
 =
NGX_CONF_UNSET_UINT
) {

440 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

444 i‡(
c⁄f
->
hódîs
 =
NULL
) {

445 
c⁄f
->
hódîs
 = 
¥ev
->headers;

448  
NGX_CONF_OK
;

449 
	}
}

452 
ngx_öt_t


453 
	$ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

455 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

456 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódîs_fûãr
;

458  
NGX_OK
;

459 
	}
}

463 
	$ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

465 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

467 
ngx_uöt_t
 
möus
, 
n
;

468 
ngx_°r_t
 *
vÆue
;

470 i‡(
hcf
->
expúes
 !
NGX_CONF_UNSET_UINT
) {

474 
vÆue
 = 
cf
->
¨gs
->
ñts
;

476 i‡(
cf
->
¨gs
->
√…s
 == 2) {

478 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "epoch") == 0) {

479 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_EPOCH
;

480  
NGX_CONF_OK
;

483 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

484 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MAX
;

485  
NGX_CONF_OK
;

488 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

489 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

490  
NGX_CONF_OK
;

493 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_ACCESS
;

495 
n
 = 1;

499 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "modified") != 0) {

503 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MODIFIED
;

505 
n
 = 2;

508 i‡(
vÆue
[
n
].
d©a
[0] == '@') {

509 
vÆue
[
n
].
d©a
++;

510 
vÆue
[
n
].
Àn
--;

511 
möus
 = 0;

513 i‡(
hcf
->
expúes
 =
NGX_HTTP_EXPIRES_MODIFIED
) {

517 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_DAILY
;

519 } i‡(
vÆue
[
n
].
d©a
[0] == '+') {

520 
vÆue
[
n
].
d©a
++;

521 
vÆue
[
n
].
Àn
--;

522 
möus
 = 0;

524 } i‡(
vÆue
[
n
].
d©a
[0] == '-') {

525 
vÆue
[
n
].
d©a
++;

526 
vÆue
[
n
].
Àn
--;

527 
möus
 = 1;

530 
möus
 = 0;

533 
hcf
->
expúes_time
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

535 i‡(
hcf
->
expúes_time
 =
NGX_ERROR
) {

539 i‡(
hcf
->
expúes
 =
NGX_HTTP_EXPIRES_DAILY


540 && 
hcf
->
expúes_time
 > 24 * 60 * 60)

545 i‡(
hcf
->
expúes_time
 =
NGX_PARSE_LARGE_TIME
) {

549 i‡(
möus
) {

550 
hcf
->
expúes_time
 = - hcf->expires_time;

553  
NGX_CONF_OK
;

554 
	}
}

558 
	$ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

560 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

562 
ngx_°r_t
 *
vÆue
;

563 
ngx_uöt_t
 
i
;

564 
ngx_hâp_hódî_vÆ_t
 *
hv
;

565 
ngx_hâp_£t_hódî_t
 *
£t
;

566 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

568 
vÆue
 = 
cf
->
¨gs
->
ñts
;

570 i‡(
hcf
->
hódîs
 =
NULL
) {

571 
hcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

572 (
ngx_hâp_hódî_vÆ_t
));

573 i‡(
hcf
->
hódîs
 =
NULL
) {

574  
NGX_CONF_ERROR
;

578 
hv
 = 
	`ngx_¨øy_push
(
hcf
->
hódîs
);

579 i‡(
hv
 =
NULL
) {

580  
NGX_CONF_ERROR
;

583 
hv
->
hash
 = 1;

584 
hv
->
key
 = 
vÆue
[1];

585 
hv
->
h™dÀr
 = 
ngx_hâp_add_hódî
;

586 
hv
->
off£t
 = 0;

588 
£t
 = 
ngx_hâp_£t_hódîs
;

589 
i
 = 0; 
£t
[i].
«me
.
Àn
; i++) {

590 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, 
£t
[
i
].
«me
.data) != 0) {

594 
hv
->
off£t
 = 
£t
[
i
].offset;

595 
hv
->
h™dÀr
 = 
£t
[
i
].handler;

600 i‡(
vÆue
[2].
Àn
 == 0) {

601 
	`ngx_memzîo
(&
hv
->
vÆue
, (
ngx_hâp_com∂ex_vÆue_t
));

602  
NGX_CONF_OK
;

605 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

607 
ccv
.
cf
 = cf;

608 
ccv
.
vÆue
 = &value[2];

609 
ccv
.
com∂ex_vÆue
 = &
hv
->
vÆue
;

611 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

612  
NGX_CONF_ERROR
;

615  
NGX_CONF_OK
;

616 
	}
}

	@src/http/modules/ngx_http_image_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<gd.h
>

15 
	#NGX_HTTP_IMAGE_OFF
 0

	)

16 
	#NGX_HTTP_IMAGE_TEST
 1

	)

17 
	#NGX_HTTP_IMAGE_SIZE
 2

	)

18 
	#NGX_HTTP_IMAGE_RESIZE
 3

	)

19 
	#NGX_HTTP_IMAGE_CROP
 4

	)

20 
	#NGX_HTTP_IMAGE_ROTATE
 5

	)

23 
	#NGX_HTTP_IMAGE_START
 0

	)

24 
	#NGX_HTTP_IMAGE_READ
 1

	)

25 
	#NGX_HTTP_IMAGE_PROCESS
 2

	)

26 
	#NGX_HTTP_IMAGE_PASS
 3

	)

27 
	#NGX_HTTP_IMAGE_DONE
 4

	)

30 
	#NGX_HTTP_IMAGE_NONE
 0

	)

31 
	#NGX_HTTP_IMAGE_JPEG
 1

	)

32 
	#NGX_HTTP_IMAGE_GIF
 2

	)

33 
	#NGX_HTTP_IMAGE_PNG
 3

	)

36 
	#NGX_HTTP_IMAGE_BUFFERED
 0x08

	)

40 
ngx_uöt_t
 
	mfûãr
;

41 
ngx_uöt_t
 
	mwidth
;

42 
ngx_uöt_t
 
	mheight
;

43 
ngx_uöt_t
 
	m™gÀ
;

44 
ngx_uöt_t
 
	mj≥g_quÆôy
;

45 
ngx_uöt_t
 
	msh¨≥n
;

47 
ngx_Êag_t
 
	må™•¨ícy
;

49 
ngx_hâp_com∂ex_vÆue_t
 *
	mwcv
;

50 
ngx_hâp_com∂ex_vÆue_t
 *
	mhcv
;

51 
ngx_hâp_com∂ex_vÆue_t
 *
	macv
;

52 
ngx_hâp_com∂ex_vÆue_t
 *
	mjqcv
;

53 
ngx_hâp_com∂ex_vÆue_t
 *
	mshcv
;

55 
size_t
 
	mbuf„r_size
;

56 } 
	tngx_hâp_image_fûãr_c⁄f_t
;

60 
u_ch¨
 *
	mimage
;

61 
u_ch¨
 *
	mœ°
;

63 
size_t
 
	mÀngth
;

65 
ngx_uöt_t
 
	mwidth
;

66 
ngx_uöt_t
 
	mheight
;

67 
ngx_uöt_t
 
	mmax_width
;

68 
ngx_uöt_t
 
	mmax_height
;

69 
ngx_uöt_t
 
	m™gÀ
;

71 
ngx_uöt_t
 
	mpha£
;

72 
ngx_uöt_t
 
	mty≥
;

73 
ngx_uöt_t
 
	mf‹˚
;

74 } 
	tngx_hâp_image_fûãr_˘x_t
;

77 
ngx_öt_t
 
ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

79 
ngx_uöt_t
 
ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

80 
ngx_öt_t
 
ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

81 
ngx_buf_t
 *
ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
);

82 
ngx_buf_t
 *
ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

84 
ngx_buf_t
 *
ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

86 
ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

87 
ngx_öt_t
 
ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

90 
ngx_buf_t
 *
ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

92 
gdImagePå
 
ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

94 
gdImagePå
 
ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
,

95 
cﬁ‹s
);

96 
u_ch¨
 *
ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
,

97 
gdImagePå
 
img
, *
size
);

98 
ngx_hâp_image_˛ónup
(*
d©a
);

99 
ngx_uöt_t
 
ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
);

101 
ngx_uöt_t
 
ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
);

104 *
ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

105 *
ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

106 *
chûd
);

107 *
ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

108 *
c⁄f
);

109 *
ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
,

110 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

111 *
ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

112 *
c⁄f
);

113 
ngx_öt_t
 
ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

116 
ngx_comm™d_t
 
	gngx_hâp_image_fûãr_comm™ds
[] = {

118 { 
ngx_°rög
("image_filter"),

119 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

120 
ngx_hâp_image_fûãr
,

121 
NGX_HTTP_LOC_CONF_OFFSET
,

123 
NULL
 },

125 { 
ngx_°rög
("image_filter_jpeg_quality"),

126 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

127 
ngx_hâp_image_fûãr_j≥g_quÆôy
,

128 
NGX_HTTP_LOC_CONF_OFFSET
,

130 
NULL
 },

132 { 
ngx_°rög
("image_filter_sharpen"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

134 
ngx_hâp_image_fûãr_sh¨≥n
,

135 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
NULL
 },

139 { 
ngx_°rög
("image_filter_transparency"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

141 
ngx_c⁄f_£t_Êag_¶Ÿ
,

142 
NGX_HTTP_LOC_CONF_OFFSET
,

143 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
å™•¨ícy
),

144 
NULL
 },

146 { 
ngx_°rög
("image_filter_buffer"),

147 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

148 
ngx_c⁄f_£t_size_¶Ÿ
,

149 
NGX_HTTP_LOC_CONF_OFFSET
,

150 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
buf„r_size
),

151 
NULL
 },

153 
ngx_nuŒ_comm™d


157 
ngx_hâp_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ_˘x
 = {

158 
NULL
,

159 
ngx_hâp_image_fûãr_öô
,

161 
NULL
,

162 
NULL
,

164 
NULL
,

165 
NULL
,

167 
ngx_hâp_image_fûãr_¸óã_c⁄f
,

168 
ngx_hâp_image_fûãr_mîge_c⁄f


172 
ngx_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ
 = {

173 
NGX_MODULE_V1
,

174 &
ngx_hâp_image_fûãr_moduÀ_˘x
,

175 
ngx_hâp_image_fûãr_comm™ds
,

176 
NGX_HTTP_MODULE
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NGX_MODULE_V1_PADDING


188 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

189 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

192 
ngx_°r_t
 
	gngx_hâp_image_ty≥s
[] = {

193 
ngx_°rög
("image/jpeg"),

194 
ngx_°rög
("image/gif"),

195 
ngx_°rög
("image/png")

199 
ngx_öt_t


200 
	$ngx_hâp_image_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

202 
off_t
 
Àn
;

203 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

204 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

206 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

207  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

210 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

212 i‡(
˘x
) {

213 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_image_fûãr_moduÀ
);

214  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

217 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

219 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_OFF
) {

220  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

223 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


225 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

226 (
u_ch¨
 *) "multipart/x-mixed-replace",

230 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

233  
NGX_ERROR
;

236 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_image_fûãr_˘x_t
));

237 i‡(
˘x
 =
NULL
) {

238  
NGX_ERROR
;

241 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_image_fûãr_moduÀ
);

243 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

245 i‡(
Àn
 !-1 &&Üí > (
off_t
Ë
c⁄f
->
buf„r_size
) {

246 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

247 "imagêfûãr:ÅoÿbigÑe•⁄£: %O", 
Àn
);

249  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

252 i‡(
Àn
 == -1) {

253 
˘x
->
Àngth
 = 
c⁄f
->
buf„r_size
;

256 
˘x
->
Àngth
 = (
size_t
Ë
Àn
;

259 i‡(
r
->
hódîs_out
.
ª‰esh
) {

260 
r
->
hódîs_out
.
ª‰esh
->
hash
 = 0;

263 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

264 
r
->
Ælow_ønges
 = 0;

266  
NGX_OK
;

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_image_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

273 
ngx_öt_t
 
rc
;

274 
ngx_°r_t
 *
˘
;

275 
ngx_chaö_t
 
out
;

276 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

277 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

279 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "image filter");

281 i‡(
ö
 =
NULL
) {

282  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

285 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

287 i‡(
˘x
 =
NULL
) {

288  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

291 
˘x
->
pha£
) {

293 
NGX_HTTP_IMAGE_START
:

295 
˘x
->
ty≥
 = 
	`ngx_hâp_image_ã°
(
r
, 
ö
);

297 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

299 i‡(
˘x
->
ty≥
 =
NGX_HTTP_IMAGE_NONE
) {

301 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

302 
out
.
buf
 = 
	`ngx_hâp_image_js⁄
(
r
, 
NULL
);

304 i‡(
out
.
buf
) {

305 
out
.
√xt
 = 
NULL
;

306 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_DONE
;

308  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

312  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

313 &
ngx_hâp_image_fûãr_moduÀ
,

314 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

319 
˘
 = &
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1];

320 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

321 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

322 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

324 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_TEST
) {

325 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

327  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, 
ö
);

330 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_READ
;

334 
NGX_HTTP_IMAGE_READ
:

336 
rc
 = 
	`ngx_hâp_image_ªad
(
r
, 
ö
);

338 i‡(
rc
 =
NGX_AGAIN
) {

339  
NGX_OK
;

342 i‡(
rc
 =
NGX_ERROR
) {

343  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

344 &
ngx_hâp_image_fûãr_moduÀ
,

345 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

350 
NGX_HTTP_IMAGE_PROCESS
:

352 
out
.
buf
 = 
	`ngx_hâp_image_¥o˚ss
(
r
);

354 i‡(
out
.
buf
 =
NULL
) {

355  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

356 &
ngx_hâp_image_fûãr_moduÀ
,

357 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

360 
out
.
√xt
 = 
NULL
;

361 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

363  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

365 
NGX_HTTP_IMAGE_PASS
:

367  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

371 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

374  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

376 
	}
}

379 
ngx_öt_t


380 
	$ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
,

381 
ngx_chaö_t
 *
ö
)

383 
ngx_öt_t
 
rc
;

385 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

387 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

388  
NGX_ERROR
;

391 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

393 i‡(
˘x
->
pha£
 =
NGX_HTTP_IMAGE_DONE
) {

395  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

398  
rc
;

399 
	}
}

402 
ngx_uöt_t


403 
	$ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

405 
u_ch¨
 *
p
;

407 
p
 = 
ö
->
buf
->
pos
;

409 i‡(
ö
->
buf
->
œ°
 - 
p
 < 16) {

410  
NGX_HTTP_IMAGE_NONE
;

413 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

414 "imagêfûãr: \"%c%c\"", 
p
[0],Ö[1]);

416 i‡(
p
[0] == 0xff &&Ö[1] == 0xd8) {

420  
NGX_HTTP_IMAGE_JPEG
;

422 } i‡(
p
[0] == 'G' &&Ö[1] == 'I' &&Ö[2] == 'F' &&Ö[3] == '8'

423 && 
p
[5] == 'a')

425 i‡(
p
[4] == '9' ||Ö[4] == '7') {

427  
NGX_HTTP_IMAGE_GIF
;

430 } i‡(
p
[0] == 0x89 &&Ö[1] == 'P' &&Ö[2] == 'N' &&Ö[3] == 'G'

431 && 
p
[4] == 0x0d &&Ö[5] == 0x0a &&Ö[6] == 0x1a &&Ö[7] == 0x0a)

435  
NGX_HTTP_IMAGE_PNG
;

438  
NGX_HTTP_IMAGE_NONE
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

445 
u_ch¨
 *
p
;

446 
size_t
 
size
, 
ª°
;

447 
ngx_buf_t
 *
b
;

448 
ngx_chaö_t
 *
˛
;

449 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

451 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

453 i‡(
˘x
->
image
 =
NULL
) {

454 
˘x
->
image
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Àngth
);

455 i‡(
˘x
->
image
 =
NULL
) {

456  
NGX_ERROR
;

459 
˘x
->
œ°
 = ctx->
image
;

462 
p
 = 
˘x
->
œ°
;

464 
˛
 = 
ö
; cl; c»˛->
√xt
) {

466 
b
 = 
˛
->
buf
;

467 
size
 = 
b
->
œ°
 - b->
pos
;

469 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

470 "imagêbuf: %uz", 
size
);

472 
ª°
 = 
˘x
->
image
 + ctx->
Àngth
 - 
p
;

473 
size
 = (
ª°
 < size) ?Ñest : size;

475 
p
 = 
	`ngx_˝ymem
’, 
b
->
pos
, 
size
);

476 
b
->
pos
 +
size
;

478 i‡(
b
->
œ°_buf
) {

479 
˘x
->
œ°
 = 
p
;

480  
NGX_OK
;

484 
˘x
->
œ°
 = 
p
;

485 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_IMAGE_BUFFERED
;

487  
NGX_AGAIN
;

488 
	}
}

491 
ngx_buf_t
 *

492 
	$ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
)

494 
ngx_öt_t
 
rc
;

495 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

496 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

498 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_IMAGE_BUFFERED
;

500 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

502 
rc
 = 
	`ngx_hâp_image_size
(
r
, 
˘x
);

504 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

506 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

507  
	`ngx_hâp_image_js⁄
(
r
, 
rc
 =
NGX_OK
 ? 
˘x
 : 
NULL
);

510 
˘x
->
™gÀ
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
acv
, conf->angle);

512 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

514 i‡(
˘x
->
™gÀ
 != 90 && ctx->angle != 180 && ctx->angle != 270) {

515  
NULL
;

518  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

521 
˘x
->
max_width
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
wcv
, c⁄f->
width
);

522 i‡(
˘x
->
max_width
 == 0) {

523  
NULL
;

526 
˘x
->
max_height
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
hcv
,

527 
c⁄f
->
height
);

528 i‡(
˘x
->
max_height
 == 0) {

529  
NULL
;

532 i‡(
rc
 =
NGX_OK


533 && 
˘x
->
width
 <˘x->
max_width


534 && 
˘x
->
height
 <˘x->
max_height


535 && 
˘x
->
™gÀ
 == 0

536 && !
˘x
->
f‹˚
)

538  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

541  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

542 
	}
}

545 
ngx_buf_t
 *

546 
	$ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

548 
size_t
 
Àn
;

549 
ngx_buf_t
 *
b
;

551 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

552 i‡(
b
 =
NULL
) {

553  
NULL
;

556 
b
->
mem‹y
 = 1;

557 
b
->
œ°_buf
 = 1;

559 
	`ngx_hâp_˛ón_hódî
(
r
);

561 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

562 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

563 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

565 i‡(
˘x
 =
NULL
) {

566 
b
->
pos
 = (
u_ch¨
 *Ë"{}" 
CRLF
;

567 
b
->
œ°
 = b->
pos
 + ("{}" 
CRLF
) - 1;

569 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

571  
b
;

574 
Àn
 = ("{ \"img\" : "

575 "{ \"width\": , \"height\": , \"ty≥\": \"j≥g\" } }" 
CRLF
) - 1

576 + 2 * 
NGX_SIZE_T_LEN
;

578 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

579 i‡(
b
->
pos
 =
NULL
) {

580  
NULL
;

583 
b
->
œ°
 = 
	`ngx_•rötf
(b->
pos
,

587 " \"ty≥\": \"%s\" } }" 
CRLF
,

588 
˘x
->
width
, ctx->
height
,

589 
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1].
d©a
 + 6);

591 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

593  
b
;

594 
	}
}

597 
ngx_buf_t
 *

598 
	$ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

600 
ngx_buf_t
 *
b
;

602 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

603 i‡(
b
 =
NULL
) {

604  
NULL
;

607 
b
->
pos
 = 
˘x
->
image
;

608 
b
->
œ°
 = 
˘x
->last;

609 
b
->
mem‹y
 = 1;

610 
b
->
œ°_buf
 = 1;

612 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

614  
b
;

615 
	}
}

619 
	$ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

621 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

623 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

624 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

627 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

628 
	}
}

631 
ngx_öt_t


632 
	$ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

634 
u_ch¨
 *
p
, *
œ°
;

635 
size_t
 
Àn
, 
≠p
;

636 
ngx_uöt_t
 
width
, 
height
;

638 
p
 = 
˘x
->
image
;

640 
˘x
->
ty≥
) {

642 
NGX_HTTP_IMAGE_JPEG
:

644 
p
 += 2;

645 
œ°
 = 
˘x
->
image
 + ctx->
Àngth
 - 10;

646 
width
 = 0;

647 
height
 = 0;

648 
≠p
 = 0;

650 
p
 < 
œ°
) {

652 i‡(
p
[0] == 0xff &&Ö[1] != 0xff) {

654 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

655 "JPEG: %02xd %02xd", 
p
[0],Ö[1]);

657 
p
++;

659 i‡((*
p
 == 0xc0 || *p == 0xc1 || *p == 0xc2 || *p == 0xc3

660 || *
p
 == 0xc9 || *p == 0xca || *p == 0xcb)

661 && (
width
 =0 || 
height
 == 0))

663 
width
 = 
p
[6] * 256 +Ö[7];

664 
height
 = 
p
[4] * 256 +Ö[5];

667 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

668 "JPEG: %02xd %02xd", 
p
[1],Ö[2]);

670 
Àn
 = 
p
[1] * 256 +Ö[2];

672 i‡(*
p
 >= 0xe1 && *p <= 0xef) {

674 
≠p
 +
Àn
;

677 
p
 +
Àn
;

682 
p
++;

685 i‡(
width
 =0 || 
height
 == 0) {

686  
NGX_DECLINED
;

689 i‡(
˘x
->
Àngth
 / 20 < 
≠p
) {

691 
˘x
->
f‹˚
 = 1;

692 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

693 "≠∞d©®size: %uz", 
≠p
);

698 
NGX_HTTP_IMAGE_GIF
:

700 i‡(
˘x
->
Àngth
 < 10) {

701  
NGX_DECLINED
;

704 
width
 = 
p
[7] * 256 +Ö[6];

705 
height
 = 
p
[9] * 256 +Ö[8];

709 
NGX_HTTP_IMAGE_PNG
:

711 i‡(
˘x
->
Àngth
 < 24) {

712  
NGX_DECLINED
;

715 
width
 = 
p
[18] * 256 +Ö[19];

716 
height
 = 
p
[22] * 256 +Ö[23];

722  
NGX_DECLINED
;

725 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

726 "imagêsize: %d x %d", 
width
, 
height
);

728 
˘x
->
width
 = width;

729 
˘x
->
height
 = height;

731  
NGX_OK
;

732 
	}
}

735 
ngx_buf_t
 *

736 
	$ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

738 
sx
, 
sy
, 
dx
, 
dy
, 
ox
, 
oy
, 
ax
, 
ay
, 
size
,

739 
cﬁ‹s
, 
∑Àâe
, 
å™•¨ít
, 
sh¨≥n
,

740 
ªd
, 
gªí
, 
blue
, 
t
;

741 
u_ch¨
 *
out
;

742 
ngx_buf_t
 *
b
;

743 
ngx_uöt_t
 
ªsize
;

744 
gdImagePå
 
§c
, 
d°
;

745 
ngx_poﬁ_˛ónup_t
 *
˛n
;

746 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

748 
§c
 = 
	`ngx_hâp_image_sour˚
(
r
, 
˘x
);

750 i‡(
§c
 =
NULL
) {

751  
NULL
;

754 
sx
 = 
	`gdImageSX
(
§c
);

755 
sy
 = 
	`gdImageSY
(
§c
);

757 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

759 i‡(!
˘x
->
f‹˚


760 && 
˘x
->
™gÀ
 == 0

761 && (
ngx_uöt_t
Ë
sx
 <
˘x
->
max_width


762 && (
ngx_uöt_t
Ë
sy
 <
˘x
->
max_height
)

764 
	`gdImageDe°roy
(
§c
);

765  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

768 
cﬁ‹s
 = 
	`gdImageCﬁ‹sTŸÆ
(
§c
);

770 i‡(
cﬁ‹s
 && 
c⁄f
->
å™•¨ícy
) {

771 
å™•¨ít
 = 
	`gdImageGëTøn•¨ít
(
§c
);

773 i‡(
å™•¨ít
 != -1) {

774 
∑Àâe
 = 
cﬁ‹s
;

775 
ªd
 = 
	`gdImageRed
(
§c
, 
å™•¨ít
);

776 
gªí
 = 
	`gdImageGªí
(
§c
, 
å™•¨ít
);

777 
blue
 = 
	`gdImageBlue
(
§c
, 
å™•¨ít
);

779 
å™•¨ít
;

783 
∑Àâe
 = 0;

784 
å™•¨ít
 = -1;

785 
ªd
 = 0;

786 
gªí
 = 0;

787 
blue
 = 0;

789 
å™•¨ít
:

791 
	`gdImageCﬁ‹Tøn•¨ít
(
§c
, -1);

793 
dx
 = 
sx
;

794 
dy
 = 
sy
;

796 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_RESIZE
) {

798 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

799 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

800 
dy
 = dy ? dy : 1;

801 
dx
 = 
˘x
->
max_width
;

804 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

805 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

806 
dx
 = dx ? dx : 1;

807 
dy
 = 
˘x
->
max_height
;

810 
ªsize
 = 1;

812 } i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

814 
ªsize
 = 0;

818 
ªsize
 = 0;

820 i‡((
ngx_uöt_t
Ë(
dx
 * 100 / 
dy
)

821 < 
˘x
->
max_width
 * 100 / ctx->
max_height
)

823 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

824 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

825 
dy
 = dy ? dy : 1;

826 
dx
 = 
˘x
->
max_width
;

827 
ªsize
 = 1;

831 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

832 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

833 
dx
 = dx ? dx : 1;

834 
dy
 = 
˘x
->
max_height
;

835 
ªsize
 = 1;

840 i‡(
ªsize
) {

841 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

842 i‡(
d°
 =
NULL
) {

843 
	`gdImageDe°roy
(
§c
);

844  
NULL
;

847 i‡(
cﬁ‹s
 == 0) {

848 
	`gdImageSaveAÕha
(
d°
, 1);

849 
	`gdImageAÕhaBÀndög
(
d°
, 0);

852 
	`gdImageC›yReßm∂ed
(
d°
, 
§c
, 0, 0, 0, 0, 
dx
, 
dy
, 
sx
, 
sy
);

854 i‡(
cﬁ‹s
) {

855 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

858 
	`gdImageDe°roy
(
§c
);

861 
d°
 = 
§c
;

864 i‡(
˘x
->
™gÀ
) {

865 
§c
 = 
d°
;

867 
ax
 = (
dx
 % 2 == 0) ? 1 : 0;

868 
ay
 = (
dy
 % 2 == 0) ? 1 : 0;

870 
˘x
->
™gÀ
) {

874 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dy
, 
dx
, 
∑Àâe
);

875 i‡(
d°
 =
NULL
) {

876 
	`gdImageDe°roy
(
§c
);

877  
NULL
;

879 i‡(
˘x
->
™gÀ
 == 90) {

880 
ox
 = 
dy
 / 2 + 
ay
;

881 
oy
 = 
dx
 / 2 - 
ax
;

884 
ox
 = 
dy
 / 2 - 
ay
;

885 
oy
 = 
dx
 / 2 + 
ax
;

888 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
ox
, 
oy
, 0, 0,

889 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

890 
	`gdImageDe°roy
(
§c
);

892 
t
 = 
dx
;

893 
dx
 = 
dy
;

894 
dy
 = 
t
;

898 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

899 i‡(
d°
 =
NULL
) {

900 
	`gdImageDe°roy
(
§c
);

901  
NULL
;

903 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
dx
 / 2 - 
ax
, 
dy
 / 2 - 
ay
, 0, 0,

904 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

905 
	`gdImageDe°roy
(
§c
);

910 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_CROP
) {

912 
§c
 = 
d°
;

914 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

915 
ox
 = 
dx
 - 
˘x
->
max_width
;

918 
ox
 = 0;

921 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

922 
oy
 = 
dy
 - 
˘x
->
max_height
;

925 
oy
 = 0;

928 i‡(
ox
 || 
oy
) {

930 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
 - 
ox
, 
dy
 - 
oy
, 
cﬁ‹s
);

932 i‡(
d°
 =
NULL
) {

933 
	`gdImageDe°roy
(
§c
);

934  
NULL
;

937 
ox
 /= 2;

938 
oy
 /= 2;

940 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

942 
dx
, 
dy
, 
ox
, 
oy
);

944 i‡(
cﬁ‹s
 == 0) {

945 
	`gdImageSaveAÕha
(
d°
, 1);

946 
	`gdImageAÕhaBÀndög
(
d°
, 0);

949 
	`gdImageC›y
(
d°
, 
§c
, 0, 0, 
ox
, 
oy
, 
dx
 - ox, 
dy
 - oy);

951 i‡(
cﬁ‹s
) {

952 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

955 
	`gdImageDe°roy
(
§c
);

959 i‡(
å™•¨ít
 !-1 && 
cﬁ‹s
) {

960 
	`gdImageCﬁ‹Tøn•¨ít
(
d°
, 
	`gdImageCﬁ‹Exa˘
(d°, 
ªd
, 
gªí
, 
blue
));

963 
sh¨≥n
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
shcv
, conf->sharpen);

964 i‡(
sh¨≥n
 > 0) {

965 
	`gdImageSh¨≥n
(
d°
, 
sh¨≥n
);

968 
out
 = 
	`ngx_hâp_image_out
(
r
, 
˘x
->
ty≥
, 
d°
, &
size
);

970 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

971 "image: %d x %d %d", 
sx
, 
sy
, 
cﬁ‹s
);

973 
	`gdImageDe°roy
(
d°
);

974 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
image
);

976 i‡(
out
 =
NULL
) {

977  
NULL
;

980 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

981 i‡(
˛n
 =
NULL
) {

982 
	`gdFªe
(
out
);

983  
NULL
;

986 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

987 i‡(
b
 =
NULL
) {

988 
	`gdFªe
(
out
);

989  
NULL
;

992 
˛n
->
h™dÀr
 = 
ngx_hâp_image_˛ónup
;

993 
˛n
->
d©a
 = 
out
;

995 
b
->
pos
 = 
out
;

996 
b
->
œ°
 = 
out
 + 
size
;

997 
b
->
mem‹y
 = 1;

998 
b
->
œ°_buf
 = 1;

1000 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

1002  
b
;

1003 
	}
}

1006 
gdImagePå


1007 
	$ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

1009 *
Áûed
;

1010 
gdImagePå
 
img
;

1012 
img
 = 
NULL
;

1014 
˘x
->
ty≥
) {

1016 
NGX_HTTP_IMAGE_JPEG
:

1017 
img
 = 
	`gdImageCª©eFromJ≥gPå
(
˘x
->
Àngth
, ctx->
image
);

1018 
Áûed
 = "gdImageCreateFromJpegPtr() failed";

1021 
NGX_HTTP_IMAGE_GIF
:

1022 
img
 = 
	`gdImageCª©eFromGifPå
(
˘x
->
Àngth
, ctx->
image
);

1023 
Áûed
 = "gdImageCreateFromGifPtr() failed";

1026 
NGX_HTTP_IMAGE_PNG
:

1027 
img
 = 
	`gdImageCª©eFromPngPå
(
˘x
->
Àngth
, ctx->
image
);

1028 
Áûed
 = "gdImageCreateFromPngPtr() failed";

1032 
Áûed
 = "unknown imageÅype";

1036 i‡(
img
 =
NULL
) {

1037 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1040  
img
;

1041 
	}
}

1044 
gdImagePå


1045 
	$ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
, 
cﬁ‹s
)

1047 
gdImagePå
 
img
;

1049 i‡(
cﬁ‹s
 == 0) {

1050 
img
 = 
	`gdImageCª©eTrueCﬁ‹
(
w
, 
h
);

1052 i‡(
img
 =
NULL
) {

1053 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1055  
NULL
;

1059 
img
 = 
	`gdImageCª©e
(
w
, 
h
);

1061 i‡(
img
 =
NULL
) {

1062 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1064  
NULL
;

1068  
img
;

1069 
	}
}

1072 
u_ch¨
 *

1073 
	$ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
, 
gdImagePå
 
img
,

1074 *
size
)

1076 *
Áûed
;

1077 
u_ch¨
 *
out
;

1078 
ngx_öt_t
 
jq
;

1079 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1081 
out
 = 
NULL
;

1083 
ty≥
) {

1085 
NGX_HTTP_IMAGE_JPEG
:

1086 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

1088 
jq
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
jqcv
, c⁄f->
j≥g_quÆôy
);

1089 i‡(
jq
 <= 0) {

1090  
NULL
;

1093 
out
 = 
	`gdImageJ≥gPå
(
img
, 
size
, 
jq
);

1094 
Áûed
 = "gdImageJpegPtr() failed";

1097 
NGX_HTTP_IMAGE_GIF
:

1098 
out
 = 
	`gdImageGifPå
(
img
, 
size
);

1099 
Áûed
 = "gdImageGifPtr() failed";

1102 
NGX_HTTP_IMAGE_PNG
:

1103 
out
 = 
	`gdImagePngPå
(
img
, 
size
);

1104 
Áûed
 = "gdImagePngPtr() failed";

1108 
Áûed
 = "unknown imageÅype";

1112 i‡(
out
 =
NULL
) {

1113 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1116  
out
;

1117 
	}
}

1121 
	$ngx_hâp_image_˛ónup
(*
d©a
)

1123 
	`gdFªe
(
d©a
);

1124 
	}
}

1127 
ngx_uöt_t


1128 
	$ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

1129 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
)

1131 
ngx_°r_t
 
vÆ
;

1133 i‡(
cv
 =
NULL
) {

1134  
v
;

1137 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1141  
	`ngx_hâp_image_fûãr_vÆue
(&
vÆ
);

1142 
	}
}

1145 
ngx_uöt_t


1146 
	$ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
)

1148 
ngx_öt_t
 
n
;

1150 i‡(
vÆue
->
Àn
 =1 && vÆue->
d©a
[0] == '-') {

1151  (
ngx_uöt_t
) -1;

1154 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

1156 i‡(
n
 > 0) {

1157  (
ngx_uöt_t
Ë
n
;

1161 
	}
}

1165 
	$ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1167 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1169 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_image_fûãr_c⁄f_t
));

1170 i‡(
c⁄f
 =
NULL
) {

1171  
NULL
;

1174 
c⁄f
->
fûãr
 = 
NGX_CONF_UNSET_UINT
;

1175 
c⁄f
->
j≥g_quÆôy
 = 
NGX_CONF_UNSET_UINT
;

1176 
c⁄f
->
sh¨≥n
 = 
NGX_CONF_UNSET_UINT
;

1177 
c⁄f
->
™gÀ
 = 
NGX_CONF_UNSET_UINT
;

1178 
c⁄f
->
å™•¨ícy
 = 
NGX_CONF_UNSET
;

1179 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1181  
c⁄f
;

1182 
	}
}

1186 
	$ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1188 
ngx_hâp_image_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1189 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

1191 i‡(
c⁄f
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1193 i‡(
¥ev
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1194 
c⁄f
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1197 
c⁄f
->
fûãr
 = 
¥ev
->filter;

1198 
c⁄f
->
width
 = 
¥ev
->width;

1199 
c⁄f
->
height
 = 
¥ev
->height;

1200 
c⁄f
->
wcv
 = 
¥ev
->wcv;

1201 
c⁄f
->
hcv
 = 
¥ev
->hcv;

1206 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
j≥g_quÆôy
, 
¥ev
->jpeg_quality, 75);

1208 i‡(
c⁄f
->
jqcv
 =
NULL
) {

1209 
c⁄f
->
jqcv
 = 
¥ev
->jqcv;

1212 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
sh¨≥n
, 
¥ev
->sharpen, 0);

1214 i‡(
c⁄f
->
shcv
 =
NULL
) {

1215 
c⁄f
->
shcv
 = 
¥ev
->shcv;

1218 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
™gÀ
, 
¥ev
->angle, 0);

1219 i‡(
c⁄f
->
acv
 =
NULL
) {

1220 
c⁄f
->
acv
 = 
¥ev
->acv;

1223 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
å™•¨ícy
, 
¥ev
->transparency, 1);

1225 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1228  
NGX_CONF_OK
;

1229 
	}
}

1233 
	$ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1235 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1237 
ngx_°r_t
 *
vÆue
;

1238 
ngx_öt_t
 
n
;

1239 
ngx_uöt_t
 
i
;

1240 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1241 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1243 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1245 
i
 = 1;

1247 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1248 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1249 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1251 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "test") == 0) {

1252 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_TEST
;

1254 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "size") == 0) {

1255 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_SIZE
;

1258 
Áûed
;

1261  
NGX_CONF_OK
;

1263 } i‡(
cf
->
¨gs
->
√…s
 == 3) {

1265 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "rotate") == 0) {

1266 i‡(
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_RESIZE


1267 && 
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_CROP
)

1269 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_ROTATE
;

1272 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1274 
ccv
.
cf
 = cf;

1275 
ccv
.
vÆue
 = &vÆue[++
i
];

1276 
ccv
.
com∂ex_vÆue
 = &
cv
;

1278 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1279  
NGX_CONF_ERROR
;

1282 i‡(
cv
.
Àngths
 =
NULL
) {

1283 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1285 i‡(
n
 != 90 &&Ç != 180 &&Ç != 270) {

1286 
Áûed
;

1289 
imcf
->
™gÀ
 = (
ngx_uöt_t
Ë
n
;

1292 
imcf
->
acv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1293 (
ngx_hâp_com∂ex_vÆue_t
));

1294 i‡(
imcf
->
acv
 =
NULL
) {

1295  
NGX_CONF_ERROR
;

1298 *
imcf
->
acv
 = 
cv
;

1301  
NGX_CONF_OK
;

1304 
Áûed
;

1308 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "resize") == 0) {

1309 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_RESIZE
;

1311 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "crop") == 0) {

1312 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_CROP
;

1315 
Áûed
;

1318 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1320 
ccv
.
cf
 = cf;

1321 
ccv
.
vÆue
 = &vÆue[++
i
];

1322 
ccv
.
com∂ex_vÆue
 = &
cv
;

1324 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1325  
NGX_CONF_ERROR
;

1328 i‡(
cv
.
Àngths
 =
NULL
) {

1329 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1331 i‡(
n
 == 0) {

1332 
Áûed
;

1335 
imcf
->
width
 = (
ngx_uöt_t
Ë
n
;

1338 
imcf
->
wcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1339 i‡(
imcf
->
wcv
 =
NULL
) {

1340  
NGX_CONF_ERROR
;

1343 *
imcf
->
wcv
 = 
cv
;

1346 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1348 
ccv
.
cf
 = cf;

1349 
ccv
.
vÆue
 = &vÆue[++
i
];

1350 
ccv
.
com∂ex_vÆue
 = &
cv
;

1352 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1353  
NGX_CONF_ERROR
;

1356 i‡(
cv
.
Àngths
 =
NULL
) {

1357 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1359 i‡(
n
 == 0) {

1360 
Áûed
;

1363 
imcf
->
height
 = (
ngx_uöt_t
Ë
n
;

1366 
imcf
->
hcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1367 i‡(
imcf
->
hcv
 =
NULL
) {

1368  
NGX_CONF_ERROR
;

1371 *
imcf
->
hcv
 = 
cv
;

1374  
NGX_CONF_OK
;

1376 
Áûed
:

1378 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

1379 &
vÆue
[
i
]);

1381  
NGX_CONF_ERROR
;

1382 
	}
}

1386 
	$ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1387 *
c⁄f
)

1389 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1391 
ngx_°r_t
 *
vÆue
;

1392 
ngx_öt_t
 
n
;

1393 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1394 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1396 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1398 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1400 
ccv
.
cf
 = cf;

1401 
ccv
.
vÆue
 = &value[1];

1402 
ccv
.
com∂ex_vÆue
 = &
cv
;

1404 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1405  
NGX_CONF_ERROR
;

1408 i‡(
cv
.
Àngths
 =
NULL
) {

1409 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1411 i‡(
n
 <= 0) {

1412 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1413 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1414  
NGX_CONF_ERROR
;

1417 
imcf
->
j≥g_quÆôy
 = (
ngx_uöt_t
Ë
n
;

1420 
imcf
->
jqcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1421 i‡(
imcf
->
jqcv
 =
NULL
) {

1422  
NGX_CONF_ERROR
;

1425 *
imcf
->
jqcv
 = 
cv
;

1428  
NGX_CONF_OK
;

1429 
	}
}

1433 
	$ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1434 *
c⁄f
)

1436 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1438 
ngx_°r_t
 *
vÆue
;

1439 
ngx_öt_t
 
n
;

1440 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1441 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1443 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1445 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1447 
ccv
.
cf
 = cf;

1448 
ccv
.
vÆue
 = &value[1];

1449 
ccv
.
com∂ex_vÆue
 = &
cv
;

1451 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1452  
NGX_CONF_ERROR
;

1455 i‡(
cv
.
Àngths
 =
NULL
) {

1456 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1458 i‡(
n
 < 0) {

1459 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1460 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1461  
NGX_CONF_ERROR
;

1464 
imcf
->
sh¨≥n
 = (
ngx_uöt_t
Ë
n
;

1467 
imcf
->
shcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1468 i‡(
imcf
->
shcv
 =
NULL
) {

1469  
NGX_CONF_ERROR
;

1472 *
imcf
->
shcv
 = 
cv
;

1475  
NGX_CONF_OK
;

1476 
	}
}

1479 
ngx_öt_t


1480 
	$ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1482 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1483 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_image_hódî_fûãr
;

1485 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1486 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_image_body_fûãr
;

1488  
NGX_OK
;

1489 
	}
}

	@src/http/modules/ngx_http_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	m«me
;

15 
ngx_¨øy_t
 *
	mÀngths
;

16 
ngx_¨øy_t
 *
	mvÆues
;

17 } 
	tngx_hâp_ödex_t
;

21 
ngx_¨øy_t
 *
	mödi˚s
;

22 
size_t
 
	mmax_ödex_Àn
;

23 } 
	tngx_hâp_ödex_loc_c⁄f_t
;

26 
	#NGX_HTTP_DEFAULT_INDEX
 "ödex.html"

	)

29 
ngx_öt_t
 
ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
);

31 
ngx_öt_t
 
ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
);

34 
ngx_öt_t
 
ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_ödex_comm™ds
[] = {

44 { 
ngx_°rög
("index"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

46 
ngx_hâp_ödex_£t_ödex
,

47 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
NULL
 },

51 
ngx_nuŒ_comm™d


55 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ödex_moduÀ_˘x
 = {

56 
NULL
,

57 
ngx_hâp_ödex_öô
,

59 
NULL
,

60 
NULL
,

62 
NULL
,

63 
NULL
,

65 
ngx_hâp_ödex_¸óã_loc_c⁄f
,

66 
ngx_hâp_ödex_mîge_loc_c⁄f


70 
ngx_moduÀ_t
 
	gngx_hâp_ödex_moduÀ
 = {

71 
NGX_MODULE_V1
,

72 &
ngx_hâp_ödex_moduÀ_˘x
,

73 
ngx_hâp_ödex_comm™ds
,

74 
NGX_HTTP_MODULE
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NGX_MODULE_V1_PADDING


96 
ngx_öt_t


97 
	$ngx_hâp_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

99 
u_ch¨
 *
p
, *
«me
;

100 
size_t
 
Àn
, 
roŸ
, 
ª£rve
, 
Æloˇãd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_°r_t
 
∑th
, 
uri
;

103 
ngx_uöt_t
 
i
, 
dú_ã°ed
;

104 
ngx_hâp_ödex_t
 *
ödex
;

105 
ngx_›í_fûe_öfo_t
 
of
;

106 
ngx_hâp_s¸ùt_code_±
 
code
;

107 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

108 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

109 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
;

110 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

112 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

113  
NGX_DECLINED
;

116 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

117  
NGX_DECLINED
;

120 
ûcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ödex_moduÀ
);

121 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

123 
Æloˇãd
 = 0;

124 
roŸ
 = 0;

125 
dú_ã°ed
 = 0;

126 
«me
 = 
NULL
;

128 
∑th
.
d©a
 = 
NULL
;

130 
ödex
 = 
ûcf
->
ödi˚s
->
ñts
;

131 
i
 = 0; i < 
ûcf
->
ödi˚s
->
√…s
; i++) {

133 i‡(
ödex
[
i
].
Àngths
 =
NULL
) {

135 i‡(
ödex
[
i
].
«me
.
d©a
[0] == '/') {

136  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
ödex
[
i
].
«me
, &r->
¨gs
);

139 
ª£rve
 = 
ûcf
->
max_ödex_Àn
;

140 
Àn
 = 
ödex
[
i
].
«me
.len;

143 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

145 
e
.
ù
 = 
ödex
[
i
].
Àngths
->
ñts
;

146 
e
.
ªque°
 = 
r
;

147 
e
.
Êushed
 = 1;

150 
Àn
 = 1;

152 *(
uöçå_t
 *Ë
e
.
ù
) {

153 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

154 
Àn
 +
	`lcode
(&
e
);

159 
ª£rve
 = 
Àn
 + 16;

162 i‡(
ª£rve
 > 
Æloˇãd
) {

164 
«me
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
ª£rve
);

165 i‡(
«me
 =
NULL
) {

166  
NGX_ERROR
;

169 
Æloˇãd
 = 
∑th
.
d©a
 +Ö©h.
Àn
 - 
«me
;

172 i‡(
ödex
[
i
].
vÆues
 =
NULL
) {

176 
	`ngx_mem˝y
(
«me
, 
ödex
[
i
].«me.
d©a
, index[i].«me.
Àn
);

178 
∑th
.
Àn
 = (
«me
 + 
ödex
[
i
].«me.À¿- 1Ë-Ö©h.
d©a
;

181 
e
.
ù
 = 
ödex
[
i
].
vÆues
->
ñts
;

182 
e
.
pos
 = 
«me
;

184 *(
uöçå_t
 *Ë
e
.
ù
) {

185 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

186 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

189 i‡(*
«me
 == '/') {

190 
uri
.
Àn
 =Üen - 1;

191 
uri
.
d©a
 = 
«me
;

192  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

195 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

197 *
e
.
pos
 = '\0';

200 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 "›í index \"%V\"", &
∑th
);

203 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

205 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

206 
of
.
dúe˘io
 = 
˛cf
->directio;

207 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

208 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

209 
of
.
ã°_⁄ly
 = 1;

210 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

211 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

213 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

214 !
NGX_OK
)

216 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

217 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

219 i‡(
of
.
îr
 == 0) {

220  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

223 i‡(
of
.
îr
 =
NGX_ENOTDIR


224 || 
of
.
îr
 =
NGX_ENAMETOOLONG


225 || 
of
.
îr
 =
NGX_EACCES
)

227  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
∑th
.
d©a
, 
of
.
îr
);

230 i‡(!
dú_ã°ed
) {

231 
rc
 = 
	`ngx_hâp_ödex_ã°_dú
(
r
, 
˛cf
, 
∑th
.
d©a
, 
«me
 - 1);

233 i‡(
rc
 !
NGX_OK
) {

234  
rc
;

237 
dú_ã°ed
 = 1;

240 i‡(
of
.
îr
 =
NGX_ENOENT
) {

244 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

245 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

247  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

250 
uri
.
Àn
 = 
r
->uri.len +Üen - 1;

252 i‡(!
˛cf
->
Æüs
) {

253 
uri
.
d©a
 = 
∑th
.d©®+ 
roŸ
;

256 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

257 i‡(
uri
.
d©a
 =
NULL
) {

258  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

261 
p
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

262 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 - 1);

265  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

268  
NGX_DECLINED
;

269 
	}
}

272 
ngx_öt_t


273 
	$ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

274 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
)

276 
u_ch¨
 
c
;

277 
ngx_°r_t
 
dú
;

278 
ngx_›í_fûe_öfo_t
 
of
;

280 
c
 = *
œ°
;

281 i‡(
c
 !'/' || 
∑th
 =
œ°
) {

283 
c
 = *(++
œ°
);

285 *
œ°
 = '\0';

287 
dú
.
Àn
 = 
œ°
 - 
∑th
;

288 
dú
.
d©a
 = 
∑th
;

290 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

291 "hâ∞ödex check dú: \"%V\"", &
dú
);

293 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

295 
of
.
ã°_dú
 = 1;

296 
of
.
ã°_⁄ly
 = 1;

297 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

298 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

300 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
dú
, &
of
, 
r
->
poﬁ
)

301 !
NGX_OK
)

303 i‡(
of
.
îr
) {

305 i‡(
of
.
îr
 =
NGX_ENOENT
) {

306 *
œ°
 = 
c
;

307  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
dú
.
d©a
, 
NGX_ENOENT
);

310 i‡(
of
.
îr
 =
NGX_EACCES
) {

312 *
œ°
 = 
c
;

320  
NGX_OK
;

323 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

324 "%†\"%s\" faûed", 
of
.
Áûed
, 
dú
.
d©a
);

327  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

330 *
œ°
 = 
c
;

332 i‡(
of
.
is_dú
) {

333  
NGX_OK
;

336 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

337 "\"%s\" i†nŸá dúe˘‹y", 
dú
.
d©a
);

339  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

340 
	}
}

343 
ngx_öt_t


344 
	$ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

345 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
)

347 i‡(
îr
 =
NGX_EACCES
) {

348 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

349 "\"%s\" i†f‹biddí", 
fûe
);

351  
NGX_HTTP_FORBIDDEN
;

354 i‡(
˛cf
->
log_nŸ_found
) {

355 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

356 "\"%s\" i†nŸ found", 
fûe
);

359  
NGX_HTTP_NOT_FOUND
;

360 
	}
}

364 
	$ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

366 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
;

368 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_ödex_loc_c⁄f_t
));

369 i‡(
c⁄f
 =
NULL
) {

370  
NULL
;

373 
c⁄f
->
ödi˚s
 = 
NULL
;

374 
c⁄f
->
max_ödex_Àn
 = 0;

376  
c⁄f
;

377 
	}
}

381 
	$ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

383 
ngx_hâp_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

384 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

386 
ngx_hâp_ödex_t
 *
ödex
;

388 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

389 
c⁄f
->
ödi˚s
 = 
¥ev
->indices;

390 
c⁄f
->
max_ödex_Àn
 = 
¥ev
->max_index_len;

393 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

394 
c⁄f
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ödex_t
));

395 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

396  
NGX_CONF_ERROR
;

399 
ödex
 = 
	`ngx_¨øy_push
(
c⁄f
->
ödi˚s
);

400 i‡(
ödex
 =
NULL
) {

401  
NGX_CONF_ERROR
;

404 
ödex
->
«me
.
Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

405 
ödex
->
«me
.
d©a
 = (
u_ch¨
 *Ë
NGX_HTTP_DEFAULT_INDEX
;

406 
ödex
->
Àngths
 = 
NULL
;

407 
ödex
->
vÆues
 = 
NULL
;

409 
c⁄f
->
max_ödex_Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

411  
NGX_CONF_OK
;

414  
NGX_CONF_OK
;

415 
	}
}

418 
ngx_öt_t


419 
	$ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

421 
ngx_hâp_h™dÀr_±
 *
h
;

422 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

424 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

426 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

427 i‡(
h
 =
NULL
) {

428  
NGX_ERROR
;

431 *
h
 = 
ngx_hâp_ödex_h™dÀr
;

433  
NGX_OK
;

434 
	}
}

440 
	$ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

442 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
 = 
c⁄f
;

444 
ngx_°r_t
 *
vÆue
;

445 
ngx_uöt_t
 
i
, 
n
;

446 
ngx_hâp_ödex_t
 *
ödex
;

447 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

449 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

450 
ûcf
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_ödex_t
));

451 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

452  
NGX_CONF_ERROR
;

456 
vÆue
 = 
cf
->
¨gs
->
ñts
;

458 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

460 i‡(
vÆue
[
i
].
d©a
[0] ='/' && i !
cf
->
¨gs
->
√…s
 - 1) {

461 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

466 i‡(
vÆue
[
i
].
Àn
 == 0) {

467 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

469 &
vÆue
[1]);

470  
NGX_CONF_ERROR
;

473 
ödex
 = 
	`ngx_¨øy_push
(
ûcf
->
ödi˚s
);

474 i‡(
ödex
 =
NULL
) {

475  
NGX_CONF_ERROR
;

478 
ödex
->
«me
.
Àn
 = 
vÆue
[
i
].len;

479 
ödex
->
«me
.
d©a
 = 
vÆue
[
i
].data;

480 
ödex
->
Àngths
 = 
NULL
;

481 
ödex
->
vÆues
 = 
NULL
;

483 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[
i
]);

485 i‡(
n
 == 0) {

486 i‡(
ûcf
->
max_ödex_Àn
 < 
ödex
->
«me
.
Àn
) {

487 
ûcf
->
max_ödex_Àn
 = 
ödex
->
«me
.
Àn
;

490 i‡(
ödex
->
«me
.
d©a
[0] == '/') {

495 
ödex
->
«me
.
Àn
++;

500 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

502 
sc
.
cf
 = cf;

503 
sc
.
sour˚
 = &
vÆue
[
i
];

504 
sc
.
Àngths
 = &
ödex
->lengths;

505 
sc
.
vÆues
 = &
ödex
->values;

506 
sc
.
v¨übÀs
 = 
n
;

507 
sc
.
com∂ëe_Àngths
 = 1;

508 
sc
.
com∂ëe_vÆues
 = 1;

510 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

511  
NGX_CONF_ERROR
;

515  
NGX_CONF_OK
;

516 
	}
}

	@src/http/modules/ngx_http_limit_req_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mdummy
;

16 
u_sh‹t
 
	mÀn
;

17 
ngx_queue_t
 
	mqueue
;

18 
ngx_m£c_t
 
	mœ°
;

20 
ngx_uöt_t
 
	mex˚ss
;

21 
u_ch¨
 
	md©a
[1];

22 } 
	tngx_hâp_limô_ªq_node_t
;

26 
ngx_rbåì_t
 
	mrbåì
;

27 
ngx_rbåì_node_t
 
	m£¡öñ
;

28 
ngx_queue_t
 
	mqueue
;

29 } 
	tngx_hâp_limô_ªq_sh˘x_t
;

33 
ngx_hâp_limô_ªq_sh˘x_t
 *
	msh
;

34 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

36 
ngx_uöt_t
 
	møã
;

37 
ngx_öt_t
 
	mödex
;

38 
ngx_°r_t
 
	mv¨
;

39 } 
	tngx_hâp_limô_ªq_˘x_t
;

43 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

45 
ngx_uöt_t
 
	mbur°
;

46 
ngx_uöt_t
 
	mlimô_log_Àvñ
;

47 
ngx_uöt_t
 
	mdñay_log_Àvñ
;

49 
ngx_uöt_t
 
	mnodñay
;

50 } 
	tngx_hâp_limô_ªq_c⁄f_t
;

53 
ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
);

54 
ngx_öt_t
 
ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
,

55 
ngx_uöt_t
 
hash
, 
u_ch¨
 *
d©a
, 
size_t
 
Àn
,Çgx_uöt_à*
ï
);

56 
ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
,

57 
ngx_uöt_t
 
n
);

59 *
ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

60 *
ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

61 *
chûd
);

62 *
ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

65 *
c⁄f
);

66 
ngx_öt_t
 
ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
);

69 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_ªq_log_Àvñs
[] = {

70 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

71 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

72 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

73 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

74 { 
ngx_nuŒ_°rög
, 0 }

78 
ngx_comm™d_t
 
	gngx_hâp_limô_ªq_comm™ds
[] = {

80 { 
ngx_°rög
("limit_req_zone"),

81 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

82 
ngx_hâp_limô_ªq_z⁄e
,

85 
NULL
 },

87 { 
ngx_°rög
("limit_req"),

88 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

89 
ngx_hâp_limô_ªq
,

90 
NGX_HTTP_LOC_CONF_OFFSET
,

92 
NULL
 },

94 { 
ngx_°rög
("limit_req_log_level"),

95 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

96 
ngx_c⁄f_£t_íum_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
limô_log_Àvñ
),

99 &
ngx_hâp_limô_ªq_log_Àvñs
 },

101 
ngx_nuŒ_comm™d


105 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ_˘x
 = {

106 
NULL
,

107 
ngx_hâp_limô_ªq_öô
,

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
ngx_hâp_limô_ªq_¸óã_c⁄f
,

116 
ngx_hâp_limô_ªq_mîge_c⁄f


120 
ngx_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ
 = {

121 
NGX_MODULE_V1
,

122 &
ngx_hâp_limô_ªq_moduÀ_˘x
,

123 
ngx_hâp_limô_ªq_comm™ds
,

124 
NGX_HTTP_MODULE
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NGX_MODULE_V1_PADDING


136 
ngx_öt_t


137 
	$ngx_hâp_limô_ªq_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

139 
size_t
 
Àn
, 
n
;

140 
uöt32_t
 
hash
;

141 
ngx_öt_t
 
rc
;

142 
ngx_uöt_t
 
ex˚ss
;

143 
ngx_time_t
 *
ç
;

144 
ngx_rbåì_node_t
 *
node
;

145 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

146 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

147 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

148 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
;

150 i‡(
r
->
maö
->
limô_ªq_£t
) {

151  
NGX_DECLINED
;

154 
Ãcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_ªq_moduÀ
);

156 i‡(
Ãcf
->
shm_z⁄e
 =
NULL
) {

157  
NGX_DECLINED
;

160 
˘x
 = 
Ãcf
->
shm_z⁄e
->
d©a
;

162 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
˘x
->
ödex
);

164 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

165  
NGX_DECLINED
;

168 
Àn
 = 
vv
->len;

170 i‡(
Àn
 == 0) {

171  
NGX_DECLINED
;

174 i‡(
Àn
 > 65535) {

175 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

178 &
˘x
->
v¨
, 
vv
);

179  
NGX_DECLINED
;

182 
r
->
maö
->
limô_ªq_£t
 = 1;

184 
hash
 = 
	`ngx_¸c32_sh‹t
(
vv
->
d©a
, 
Àn
);

186 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

188 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 1);

190 
rc
 = 
	`ngx_hâp_limô_ªq_lookup
(
Ãcf
, 
hash
, 
vv
->
d©a
, 
Àn
, &
ex˚ss
);

192 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

193 "limô_ªq: %ò%ui.%03ui", 
rc
, 
ex˚ss
 / 1000,Éxcess % 1000);

195 i‡(
rc
 =
NGX_DECLINED
) {

197 
n
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

198 + 
	`off£tof
(
ngx_hâp_limô_ªq_node_t
, 
d©a
)

199 + 
Àn
;

201 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
n
);

202 i‡(
node
 =
NULL
) {

204 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 0);

206 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
n
);

207 i‡(
node
 =
NULL
) {

208 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

209  
NGX_HTTP_SERVICE_UNAVAILABLE
;

213 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

215 
node
->
key
 = 
hash
;

216 
Ã
->
Àn
 = (
u_ch¨
)Üen;

218 
ç
 = 
	`ngx_timeofday
();

219 
Ã
->
œ°
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

221 
Ã
->
ex˚ss
 = 0;

222 
	`ngx_mem˝y
(
Ã
->
d©a
, 
vv
->d©a, 
Àn
);

224 
	`ngx_rbåì_ö£π
(&
˘x
->
sh
->
rbåì
, 
node
);

226 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

228 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

230  
NGX_DECLINED
;

233 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

235 i‡(
rc
 =
NGX_OK
) {

236  
NGX_DECLINED
;

239 i‡(
rc
 =
NGX_BUSY
) {

240 
	`ngx_log_îr‹
(
Ãcf
->
limô_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

242 
ex˚ss
 / 1000,Éx˚s†% 1000, &
Ãcf
->
shm_z⁄e
->
shm
.
«me
);

244  
NGX_HTTP_SERVICE_UNAVAILABLE
;

249 i‡(
Ãcf
->
nodñay
) {

250  
NGX_DECLINED
;

253 
	`ngx_log_îr‹
(
Ãcf
->
dñay_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

255 
ex˚ss
 / 1000,Éx˚s†% 1000, &
Ãcf
->
shm_z⁄e
->
shm
.
«me
);

257 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

258  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

261 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ã°_ªadög
;

262 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_limô_ªq_dñay
;

263 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
wrôe
,

264 (
ngx_m£c_t
Ë
ex˚ss
 * 1000 / 
˘x
->
øã
);

266  
NGX_AGAIN
;

267 
	}
}

271 
	$ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
)

273 
ngx_evít_t
 *
wev
;

275 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

280 i‡(!
wev
->
timedout
) {

282 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

283 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

289 
wev
->
timedout
 = 0;

291 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

292 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

296 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

297 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

299 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

300 
	}
}

304 
	$ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

305 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

307 
ngx_rbåì_node_t
 **
p
;

308 
ngx_hâp_limô_ªq_node_t
 *
Ãn
, *
Ã¡
;

312 i‡(
node
->
key
 < 
ãmp
->key) {

314 
p
 = &
ãmp
->
À·
;

316 } i‡(
node
->
key
 > 
ãmp
->key) {

318 
p
 = &
ãmp
->
right
;

322 
Ãn
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

323 
Ã¡
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
ãmp
->
cﬁ‹
;

325 
p
 = (
	`ngx_memn2cmp
(
Ãn
->
d©a
, 
Ã¡
->d©a,Ü∫->
Àn
,Ürnt->len) < 0)

326 ? &
ãmp
->
À·
 : &ãmp->
right
;

329 i‡(*
p
 =
£¡öñ
) {

333 
ãmp
 = *
p
;

336 *
p
 = 
node
;

337 
node
->
∑ª¡
 = 
ãmp
;

338 
node
->
À·
 = 
£¡öñ
;

339 
node
->
right
 = 
£¡öñ
;

340 
	`ngx_rbt_ªd
(
node
);

341 
	}
}

344 
ngx_öt_t


345 
	$ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
, 
ngx_uöt_t
 
hash
,

346 
u_ch¨
 *
d©a
, 
size_t
 
Àn
, 
ngx_uöt_t
 *
ï
)

348 
ngx_öt_t
 
rc
, 
ex˚ss
;

349 
ngx_time_t
 *
ç
;

350 
ngx_m£c_t
 
now
;

351 
ngx_m£c_öt_t
 
ms
;

352 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

353 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

354 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

356 
˘x
 = 
Ãcf
->
shm_z⁄e
->
d©a
;

358 
node
 = 
˘x
->
sh
->
rbåì
.
roŸ
;

359 
£¡öñ
 = 
˘x
->
sh
->
rbåì
.sentinel;

361 
node
 !
£¡öñ
) {

363 i‡(
hash
 < 
node
->
key
) {

364 
node
 =Çode->
À·
;

368 i‡(
hash
 > 
node
->
key
) {

369 
node
 =Çode->
right
;

375 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

377 
rc
 = 
	`ngx_memn2cmp
(
d©a
, 
Ã
->d©a, 
Àn
, (
size_t
)Ür->len);

379 i‡(
rc
 == 0) {

380 
	`ngx_queue_ªmove
(&
Ã
->
queue
);

381 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

383 
ç
 = 
	`ngx_timeofday
();

385 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

386 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

388 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

390 i‡(
ex˚ss
 < 0) {

391 
ex˚ss
 = 0;

394 *
ï
 = 
ex˚ss
;

396 i‡((
ngx_uöt_t
Ë
ex˚ss
 > 
Ãcf
->
bur°
) {

397  
NGX_BUSY
;

400 
Ã
->
ex˚ss
 =Éxcess;

401 
Ã
->
œ°
 = 
now
;

403 i‡(
ex˚ss
) {

404  
NGX_AGAIN
;

407  
NGX_OK
;

410 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

413 *
ï
 = 0;

415  
NGX_DECLINED
;

416 
	}
}

420 
	$ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
, 
ngx_uöt_t
 
n
)

422 
ngx_öt_t
 
ex˚ss
;

423 
ngx_time_t
 *
ç
;

424 
ngx_m£c_t
 
now
;

425 
ngx_queue_t
 *
q
;

426 
ngx_m£c_öt_t
 
ms
;

427 
ngx_rbåì_node_t
 *
node
;

428 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

430 
ç
 = 
	`ngx_timeofday
();

432 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

440 
n
 < 3) {

442 i‡(
	`ngx_queue_em±y
(&
˘x
->
sh
->
queue
)) {

446 
q
 = 
	`ngx_queue_œ°
(&
˘x
->
sh
->
queue
);

448 
Ã
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_limô_ªq_node_t
, 
queue
);

450 i‡(
n
++ != 0) {

452 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

453 
ms
 = 
	`ngx_abs
(ms);

455 i‡(
ms
 < 60000) {

459 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
ms
 / 1000;

461 i‡(
ex˚ss
 > 0) {

466 
	`ngx_queue_ªmove
(
q
);

468 
node
 = (
ngx_rbåì_node_t
 *)

469 ((
u_ch¨
 *Ë
Ã
 - 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
));

471 
	`ngx_rbåì_dñëe
(&
˘x
->
sh
->
rbåì
, 
node
);

473 
	`ngx_¶ab_‰ì_locked
(
˘x
->
shpoﬁ
, 
node
);

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_limô_ªq_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

481 
ngx_hâp_limô_ªq_˘x_t
 *
o˘x
 = 
d©a
;

483 
size_t
 
Àn
;

484 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

486 
˘x
 = 
shm_z⁄e
->
d©a
;

488 i‡(
o˘x
) {

489 i‡(
	`ngx_°rcmp
(
˘x
->
v¨
.
d©a
, 
o˘x
->var.data) != 0) {

490 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

493 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
v¨
, &
o˘x
->var);

494  
NGX_ERROR
;

497 
˘x
->
sh
 = 
o˘x
->sh;

498 
˘x
->
shpoﬁ
 = 
o˘x
->shpool;

500  
NGX_OK
;

503 
˘x
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

505 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

506 
˘x
->
sh
 = ctx->
shpoﬁ
->
d©a
;

508  
NGX_OK
;

511 
˘x
->
sh
 = 
	`ngx_¶ab_Æloc
(˘x->
shpoﬁ
, (
ngx_hâp_limô_ªq_sh˘x_t
));

512 i‡(
˘x
->
sh
 =
NULL
) {

513  
NGX_ERROR
;

516 
˘x
->
shpoﬁ
->
d©a
 = ctx->
sh
;

518 
	`ngx_rbåì_öô
(&
˘x
->
sh
->
rbåì
, &˘x->sh->
£¡öñ
,

519 
ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
);

521 
	`ngx_queue_öô
(&
˘x
->
sh
->
queue
);

523 
Àn
 = (" i¿limô_ªq z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

525 
˘x
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(˘x->shpoﬁ, 
Àn
);

526 i‡(
˘x
->
shpoﬁ
->
log_˘x
 =
NULL
) {

527  
NGX_ERROR
;

530 
	`ngx_•rötf
(
˘x
->
shpoﬁ
->
log_˘x
, " inÜimit_req zone \"%V\"%Z",

531 &
shm_z⁄e
->
shm
.
«me
);

533  
NGX_OK
;

534 
	}
}

538 
	$ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

540 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
;

542 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_c⁄f_t
));

543 i‡(
c⁄f
 =
NULL
) {

544  
NULL
;

555 
c⁄f
->
limô_log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

557  
c⁄f
;

558 
	}
}

562 
	$ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

564 
ngx_hâp_limô_ªq_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

565 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
 = 
chûd
;

567 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

568 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

569 
c⁄f
->
bur°
 = 
¥ev
->burst;

570 
c⁄f
->
nodñay
 = 
¥ev
->nodelay;

573 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
limô_log_Àvñ
, 
¥ev
->limit_log_level,

574 
NGX_LOG_ERR
);

576 
c⁄f
->
dñay_log_Àvñ
 = (c⁄f->
limô_log_Àvñ
 =
NGX_LOG_INFO
) ?

577 
NGX_LOG_INFO
 : 
c⁄f
->
limô_log_Àvñ
 + 1;

579  
NGX_CONF_OK
;

580 
	}
}

584 
	$ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

586 
u_ch¨
 *
p
;

587 
size_t
 
size
, 
Àn
;

588 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

589 
ngx_öt_t
 
øã
, 
sˇÀ
;

590 
ngx_uöt_t
 
i
;

591 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

592 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

594 
vÆue
 = 
cf
->
¨gs
->
ñts
;

596 
˘x
 = 
NULL
;

597 
size
 = 0;

598 
øã
 = 1;

599 
sˇÀ
 = 1;

600 
«me
.
Àn
 = 0;

602 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

604 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

606 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

608 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

610 i‡(
p
) {

611 *
p
 = '\0';

613 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

615 
p
++;

617 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + vÆue[i].À¿- 
p
;

618 
s
.
d©a
 = 
p
;

620 
size
 = 
	`ngx_∑r£_size
(&
s
);

621 i‡(
size
 > 8191) {

626 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

627 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

628  
NGX_CONF_ERROR
;

631 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "rate=", 5) == 0) {

633 
Àn
 = 
vÆue
[
i
].len;

634 
p
 = 
vÆue
[
i
].
d©a
 + 
Àn
 - 3;

636 i‡(
	`ngx_°∫cmp
(
p
, "r/s", 3) == 0) {

637 
sˇÀ
 = 1;

638 
Àn
 -= 3;

640 } i‡(
	`ngx_°∫cmp
(
p
, "r/m", 3) == 0) {

641 
sˇÀ
 = 60;

642 
Àn
 -= 3;

645 
øã
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 5, 
Àn
 - 5);

646 i‡(
øã
 <
NGX_ERROR
) {

647 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

648 "övÆidÑ©ê\"%V\"", &
vÆue
[
i
]);

649  
NGX_CONF_ERROR
;

655 i‡(
vÆue
[
i
].
d©a
[0] == '$') {

657 
vÆue
[
i
].
Àn
--;

658 
vÆue
[
i
].
d©a
++;

660 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_˘x_t
));

661 i‡(
˘x
 =
NULL
) {

662  
NGX_CONF_ERROR
;

665 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[
i
]);

666 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

667  
NGX_CONF_ERROR
;

670 
˘x
->
v¨
 = 
vÆue
[
i
];

675 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

676 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

677  
NGX_CONF_ERROR
;

680 i‡(
«me
.
Àn
 =0 || 
size
 == 0) {

681 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

683 &
cmd
->
«me
);

684  
NGX_CONF_ERROR
;

687 i‡(
˘x
 =
NULL
) {

688 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

690 &
cmd
->
«me
);

691  
NGX_CONF_ERROR
;

694 
˘x
->
øã
 =Ñ©ê* 1000 / 
sˇÀ
;

696 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

697 &
ngx_hâp_limô_ªq_moduÀ
);

698 i‡(
shm_z⁄e
 =
NULL
) {

699  
NGX_CONF_ERROR
;

702 i‡(
shm_z⁄e
->
d©a
) {

703 
˘x
 = 
shm_z⁄e
->
d©a
;

705 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

707 &
vÆue
[1], &
˘x
->
v¨
);

708  
NGX_CONF_ERROR
;

711 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_ªq_öô_z⁄e
;

712 
shm_z⁄e
->
d©a
 = 
˘x
;

714  
NGX_CONF_OK
;

715 
	}
}

719 
	$ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

721 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
 = 
c⁄f
;

723 
ngx_öt_t
 
bur°
;

724 
ngx_°r_t
 *
vÆue
, 
s
;

725 
ngx_uöt_t
 
i
;

727 i‡(
Ãcf
->
shm_z⁄e
) {

731 
vÆue
 = 
cf
->
¨gs
->
ñts
;

733 
bur°
 = 0;

735 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

737 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

739 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

740 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

742 
Ãcf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
s
, 0,

743 &
ngx_hâp_limô_ªq_moduÀ
);

744 i‡(
Ãcf
->
shm_z⁄e
 =
NULL
) {

745  
NGX_CONF_ERROR
;

751 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "burst=", 6) == 0) {

753 
bur°
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 6, vÆue[i].
Àn
 - 6);

754 i‡(
bur°
 <= 0) {

755 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

756 "övÆid bur°Ñ©ê\"%V\"", &
vÆue
[
i
]);

757  
NGX_CONF_ERROR
;

763 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "nodelay", 7) == 0) {

764 
Ãcf
->
nodñay
 = 1;

768 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

769 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

770  
NGX_CONF_ERROR
;

773 i‡(
Ãcf
->
shm_z⁄e
 =
NULL
) {

774 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

776 &
cmd
->
«me
);

777  
NGX_CONF_ERROR
;

780 i‡(
Ãcf
->
shm_z⁄e
->
d©a
 =
NULL
) {

781 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

783 &
Ãcf
->
shm_z⁄e
->
shm
.
«me
);

784  
NGX_CONF_ERROR
;

787 
Ãcf
->
bur°
 = burst * 1000;

789  
NGX_CONF_OK
;

790 
	}
}

793 
ngx_öt_t


794 
	$ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
)

796 
ngx_hâp_h™dÀr_±
 *
h
;

797 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

799 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

801 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

802 i‡(
h
 =
NULL
) {

803  
NGX_ERROR
;

806 *
h
 = 
ngx_hâp_limô_ªq_h™dÀr
;

808  
NGX_OK
;

809 
	}
}

	@src/http/modules/ngx_http_limit_zone_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mÀn
;

16 
u_sh‹t
 
	mc⁄n
;

17 
u_ch¨
 
	md©a
[1];

18 } 
	tngx_hâp_limô_z⁄e_node_t
;

22 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

23 
ngx_rbåì_node_t
 *
	mnode
;

24 } 
	tngx_hâp_limô_z⁄e_˛ónup_t
;

28 
ngx_rbåì_t
 *
	mrbåì
;

29 
ngx_öt_t
 
	mödex
;

30 
ngx_°r_t
 
	mv¨
;

31 } 
	tngx_hâp_limô_z⁄e_˘x_t
;

35 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

36 
ngx_uöt_t
 
	mc⁄n
;

37 
ngx_uöt_t
 
	mlog_Àvñ
;

38 } 
	tngx_hâp_limô_z⁄e_c⁄f_t
;

41 
ngx_hâp_limô_z⁄e_˛ónup
(*
d©a
);

43 *
ngx_hâp_limô_z⁄e_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_limô_z⁄e_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

45 *
chûd
);

46 *
ngx_hâp_limô_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

48 *
ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

49 *
c⁄f
);

50 
ngx_öt_t
 
ngx_hâp_limô_z⁄e_öô
(
ngx_c⁄f_t
 *
cf
);

53 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_c⁄n_log_Àvñs
[] = {

54 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

55 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

56 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

57 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

58 { 
ngx_nuŒ_°rög
, 0 }

62 
ngx_comm™d_t
 
	gngx_hâp_limô_z⁄e_comm™ds
[] = {

64 { 
ngx_°rög
("limit_zone"),

65 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

66 
ngx_hâp_limô_z⁄e
,

69 
NULL
 },

71 { 
ngx_°rög
("limit_conn"),

72 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

73 
ngx_hâp_limô_c⁄n
,

74 
NGX_HTTP_LOC_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("limit_conn_log_level"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

80 
ngx_c⁄f_£t_íum_¶Ÿ
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

82 
off£tof
(
ngx_hâp_limô_z⁄e_c⁄f_t
, 
log_Àvñ
),

83 &
ngx_hâp_limô_c⁄n_log_Àvñs
 },

85 
ngx_nuŒ_comm™d


89 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_z⁄e_moduÀ_˘x
 = {

90 
NULL
,

91 
ngx_hâp_limô_z⁄e_öô
,

93 
NULL
,

94 
NULL
,

96 
NULL
,

97 
NULL
,

99 
ngx_hâp_limô_z⁄e_¸óã_c⁄f
,

100 
ngx_hâp_limô_z⁄e_mîge_c⁄f


104 
ngx_moduÀ_t
 
	gngx_hâp_limô_z⁄e_moduÀ
 = {

105 
NGX_MODULE_V1
,

106 &
ngx_hâp_limô_z⁄e_moduÀ_˘x
,

107 
ngx_hâp_limô_z⁄e_comm™ds
,

108 
NGX_HTTP_MODULE
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NGX_MODULE_V1_PADDING


120 
ngx_öt_t


121 
	$ngx_hâp_limô_z⁄e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

123 
size_t
 
Àn
, 
n
;

124 
uöt32_t
 
hash
;

125 
ngx_öt_t
 
rc
;

126 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

127 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

128 
ngx_poﬁ_˛ónup_t
 *
˛n
;

129 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

130 
ngx_hâp_limô_z⁄e_˘x_t
 *
˘x
;

131 
ngx_hâp_limô_z⁄e_node_t
 *
lz
;

132 
ngx_hâp_limô_z⁄e_c⁄f_t
 *
lzcf
;

133 
ngx_hâp_limô_z⁄e_˛ónup_t
 *
lz˛n
;

135 i‡(
r
->
maö
->
limô_z⁄e_£t
) {

136  
NGX_DECLINED
;

139 
lzcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_z⁄e_moduÀ
);

141 i‡(
lzcf
->
shm_z⁄e
 =
NULL
) {

142  
NGX_DECLINED
;

145 
˘x
 = 
lzcf
->
shm_z⁄e
->
d©a
;

147 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
˘x
->
ödex
);

149 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

150  
NGX_DECLINED
;

153 
Àn
 = 
vv
->len;

155 i‡(
Àn
 == 0) {

156  
NGX_DECLINED
;

159 i‡(
Àn
 > 255) {

160 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

163 &
˘x
->
v¨
, 
vv
);

164  
NGX_DECLINED
;

167 
r
->
maö
->
limô_z⁄e_£t
 = 1;

169 
hash
 = 
	`ngx_¸c32_sh‹t
(
vv
->
d©a
, 
Àn
);

171 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, (
ngx_hâp_limô_z⁄e_˛ónup_t
));

172 i‡(
˛n
 =
NULL
) {

173  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

176 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
lzcf
->
shm_z⁄e
->
shm
.
addr
;

178 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

180 
node
 = 
˘x
->
rbåì
->
roŸ
;

181 
£¡öñ
 = 
˘x
->
rbåì
->sentinel;

183 
node
 !
£¡öñ
) {

185 i‡(
hash
 < 
node
->
key
) {

186 
node
 =Çode->
À·
;

190 i‡(
hash
 > 
node
->
key
) {

191 
node
 =Çode->
right
;

197 
lz
 = (
ngx_hâp_limô_z⁄e_node_t
 *Ë&
node
->
cﬁ‹
;

199 
rc
 = 
	`ngx_memn2cmp
(
vv
->
d©a
, 
lz
->d©a, 
Àn
, (
size_t
)Üz->len);

201 i‡(
rc
 == 0) {

202 i‡((
ngx_uöt_t
Ë
lz
->
c⁄n
 < 
lzcf
->conn) {

203 
lz
->
c⁄n
++;

204 
d⁄e
;

207 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

209 
	`ngx_log_îr‹
(
lzcf
->
log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

211 &
lzcf
->
shm_z⁄e
->
shm
.
«me
);

213  
NGX_HTTP_SERVICE_UNAVAILABLE
;

216 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

219 
n
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

220 + 
	`off£tof
(
ngx_hâp_limô_z⁄e_node_t
, 
d©a
)

221 + 
Àn
;

223 
node
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
n
);

224 i‡(
node
 =
NULL
) {

225 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

226  
NGX_HTTP_SERVICE_UNAVAILABLE
;

229 
lz
 = (
ngx_hâp_limô_z⁄e_node_t
 *Ë&
node
->
cﬁ‹
;

231 
node
->
key
 = 
hash
;

232 
lz
->
Àn
 = (
u_ch¨
)Üen;

233 
lz
->
c⁄n
 = 1;

234 
	`ngx_mem˝y
(
lz
->
d©a
, 
vv
->d©a, 
Àn
);

236 
	`ngx_rbåì_ö£π
(
˘x
->
rbåì
, 
node
);

238 
d⁄e
:

240 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

241 "limô z⁄e: %08XD %d", 
node
->
key
, 
lz
->
c⁄n
);

243 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

245 
˛n
->
h™dÀr
 = 
ngx_hâp_limô_z⁄e_˛ónup
;

246 
lz˛n
 = 
˛n
->
d©a
;

248 
lz˛n
->
shm_z⁄e
 = 
lzcf
->shm_zone;

249 
lz˛n
->
node
 =Çode;

251  
NGX_DECLINED
;

252 
	}
}

256 
	$ngx_hâp_limô_z⁄e_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

257 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

259 
ngx_rbåì_node_t
 **
p
;

260 
ngx_hâp_limô_z⁄e_node_t
 *
lzn
, *
lz¡
;

264 i‡(
node
->
key
 < 
ãmp
->key) {

266 
p
 = &
ãmp
->
À·
;

268 } i‡(
node
->
key
 > 
ãmp
->key) {

270 
p
 = &
ãmp
->
right
;

274 
lzn
 = (
ngx_hâp_limô_z⁄e_node_t
 *Ë&
node
->
cﬁ‹
;

275 
lz¡
 = (
ngx_hâp_limô_z⁄e_node_t
 *Ë&
ãmp
->
cﬁ‹
;

277 
p
 = (
	`ngx_memn2cmp
(
lzn
->
d©a
, 
lz¡
->d©a,Üzn->
Àn
,Üznt->len) < 0)

278 ? &
ãmp
->
À·
 : &ãmp->
right
;

281 i‡(*
p
 =
£¡öñ
) {

285 
ãmp
 = *
p
;

288 *
p
 = 
node
;

289 
node
->
∑ª¡
 = 
ãmp
;

290 
node
->
À·
 = 
£¡öñ
;

291 
node
->
right
 = 
£¡öñ
;

292 
	`ngx_rbt_ªd
(
node
);

293 
	}
}

297 
	$ngx_hâp_limô_z⁄e_˛ónup
(*
d©a
)

299 
ngx_hâp_limô_z⁄e_˛ónup_t
 *
lz˛n
 = 
d©a
;

301 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

302 
ngx_rbåì_node_t
 *
node
;

303 
ngx_hâp_limô_z⁄e_˘x_t
 *
˘x
;

304 
ngx_hâp_limô_z⁄e_node_t
 *
lz
;

306 
˘x
 = 
lz˛n
->
shm_z⁄e
->
d©a
;

307 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
lz˛n
->
shm_z⁄e
->
shm
.
addr
;

308 
node
 = 
lz˛n
->node;

309 
lz
 = (
ngx_hâp_limô_z⁄e_node_t
 *Ë&
node
->
cﬁ‹
;

311 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

313 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
lz˛n
->
shm_z⁄e
->
shm
.
log
, 0,

314 "limô z⁄ê˛ónup: %08XD %d", 
node
->
key
, 
lz
->
c⁄n
);

316 
lz
->
c⁄n
--;

318 i‡(
lz
->
c⁄n
 == 0) {

319 
	`ngx_rbåì_dñëe
(
˘x
->
rbåì
, 
node
);

320 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
node
);

323 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

324 
	}
}

327 
ngx_öt_t


328 
	$ngx_hâp_limô_z⁄e_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

330 
ngx_hâp_limô_z⁄e_˘x_t
 *
o˘x
 = 
d©a
;

332 
size_t
 
Àn
;

333 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

334 
ngx_rbåì_node_t
 *
£¡öñ
;

335 
ngx_hâp_limô_z⁄e_˘x_t
 *
˘x
;

337 
˘x
 = 
shm_z⁄e
->
d©a
;

339 i‡(
o˘x
) {

340 i‡(
	`ngx_°rcmp
(
˘x
->
v¨
.
d©a
, 
o˘x
->var.data) != 0) {

341 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

344 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
v¨
, &
o˘x
->var);

345  
NGX_ERROR
;

348 
˘x
->
rbåì
 = 
o˘x
->rbtree;

350  
NGX_OK
;

353 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

355 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

356 
˘x
->
rbåì
 = 
shpoﬁ
->
d©a
;

358  
NGX_OK
;

361 
˘x
->
rbåì
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_t
));

362 i‡(
˘x
->
rbåì
 =
NULL
) {

363  
NGX_ERROR
;

366 
shpoﬁ
->
d©a
 = 
˘x
->
rbåì
;

368 
£¡öñ
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_node_t
));

369 i‡(
£¡öñ
 =
NULL
) {

370  
NGX_ERROR
;

373 
	`ngx_rbåì_öô
(
˘x
->
rbåì
, 
£¡öñ
,

374 
ngx_hâp_limô_z⁄e_rbåì_ö£π_vÆue
);

376 
Àn
 = (" i¿limô_z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

378 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

379 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

380  
NGX_ERROR
;

383 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " inÜimit_zone \"%V\"%Z",

384 &
shm_z⁄e
->
shm
.
«me
);

386  
NGX_OK
;

387 
	}
}

391 
	$ngx_hâp_limô_z⁄e_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

393 
ngx_hâp_limô_z⁄e_c⁄f_t
 *
c⁄f
;

395 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_z⁄e_c⁄f_t
));

396 i‡(
c⁄f
 =
NULL
) {

397  
NULL
;

407 
c⁄f
->
log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

409  
c⁄f
;

410 
	}
}

414 
	$ngx_hâp_limô_z⁄e_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

416 
ngx_hâp_limô_z⁄e_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

417 
ngx_hâp_limô_z⁄e_c⁄f_t
 *
c⁄f
 = 
chûd
;

419 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

420 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

421 
c⁄f
->
c⁄n
 = 
¥ev
->conn;

424 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
log_Àvñ
, 
¥ev
->log_Àvñ, 
NGX_LOG_ERR
);

426  
NGX_CONF_OK
;

427 
	}
}

431 
	$ngx_hâp_limô_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

433 
ssize_t
 
n
;

434 
ngx_°r_t
 *
vÆue
;

435 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

436 
ngx_hâp_limô_z⁄e_˘x_t
 *
˘x
;

438 
vÆue
 = 
cf
->
¨gs
->
ñts
;

440 i‡(
vÆue
[2].
d©a
[0] != '$') {

441 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

442 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[2]);

443  
NGX_CONF_ERROR
;

446 
vÆue
[2].
Àn
--;

447 
vÆue
[2].
d©a
++;

449 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_z⁄e_˘x_t
));

450 i‡(
˘x
 =
NULL
) {

451  
NGX_CONF_ERROR
;

454 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[2]);

455 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

456  
NGX_CONF_ERROR
;

459 
˘x
->
v¨
 = 
vÆue
[2];

461 
n
 = 
	`ngx_∑r£_size
(&
vÆue
[3]);

463 i‡(
n
 =
NGX_ERROR
) {

464 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

465 "övÆid sizêo‡limô_z⁄ê\"%V\"", &
vÆue
[3]);

466  
NGX_CONF_ERROR
;

469 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

470 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

471 "limô_z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[1]);

472  
NGX_CONF_ERROR
;

476 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 
n
,

477 &
ngx_hâp_limô_z⁄e_moduÀ
);

478 i‡(
shm_z⁄e
 =
NULL
) {

479  
NGX_CONF_ERROR
;

482 i‡(
shm_z⁄e
->
d©a
) {

483 
˘x
 = 
shm_z⁄e
->
d©a
;

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

487 &
vÆue
[1], &
˘x
->
v¨
);

488  
NGX_CONF_ERROR
;

491 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_z⁄e_öô_z⁄e
;

492 
shm_z⁄e
->
d©a
 = 
˘x
;

494  
NGX_CONF_OK
;

495 
	}
}

499 
	$ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

501 
ngx_hâp_limô_z⁄e_c⁄f_t
 *
lzcf
 = 
c⁄f
;

503 
ngx_öt_t
 
n
;

504 
ngx_°r_t
 *
vÆue
;

506 i‡(
lzcf
->
shm_z⁄e
) {

510 
vÆue
 = 
cf
->
¨gs
->
ñts
;

512 
lzcf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

513 &
ngx_hâp_limô_z⁄e_moduÀ
);

514 i‡(
lzcf
->
shm_z⁄e
 =
NULL
) {

515  
NGX_CONF_ERROR
;

518 
n
 = 
	`ngx_©oi
(
vÆue
[2].
d©a
, vÆue[2].
Àn
);

519 i‡(
n
 <= 0) {

520 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

521 "övÆidÇumbî o‡c⁄√˘i⁄†\"%V\"", &
vÆue
[2]);

522  
NGX_CONF_ERROR
;

525 i‡(
n
 > 65535) {

526 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

528  
NGX_CONF_ERROR
;

531 
lzcf
->
c⁄n
 = 
n
;

533  
NGX_CONF_OK
;

534 
	}
}

537 
ngx_öt_t


538 
	$ngx_hâp_limô_z⁄e_öô
(
ngx_c⁄f_t
 *
cf
)

540 
ngx_hâp_h™dÀr_±
 *
h
;

541 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

543 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

545 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

546 i‡(
h
 =
NULL
) {

547  
NGX_ERROR
;

550 *
h
 = 
ngx_hâp_limô_z⁄e_h™dÀr
;

552  
NGX_OK
;

553 
	}
}

	@src/http/modules/ngx_http_log_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_log_›_s
 
	tngx_hâp_log_›_t
;

15 
	gu_ch¨
 *(*
	tngx_hâp_log_›_run_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
, 
	tu_ch¨
 *
	tbuf
,

16 
	tngx_hâp_log_›_t
 *
	t›
);

18 
	$size_t
 (*
	tngx_hâp_log_›_gëÀn_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

19 
	tuöçå_t
 
	td©a
);

22 
	sngx_hâp_log_›_s
 {

23 
size_t
 
Àn
;

24 
ngx_hâp_log_›_gëÀn_±
 
gëÀn
;

25 
ngx_hâp_log_›_run_±
 
run
;

26 
uöçå_t
 
d©a
;

31 
ngx_°r_t
 
«me
;

32 
ngx_¨øy_t
 *
Êushes
;

33 
ngx_¨øy_t
 *
›s
;

34 } 
	tngx_hâp_log_fmt_t
;

38 
ngx_¨øy_t
 
f‹m©s
;

39 
ngx_uöt_t
 
comböed_u£d
;

40 } 
	tngx_hâp_log_maö_c⁄f_t
;

44 
ngx_¨øy_t
 *
Àngths
;

45 
ngx_¨øy_t
 *
vÆues
;

46 } 
	tngx_hâp_log_s¸ùt_t
;

50 
ngx_›í_fûe_t
 *
fûe
;

51 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
;

52 
time_t
 
disk_fuŒ_time
;

53 
time_t
 
îr‹_log_time
;

54 
ngx_hâp_log_fmt_t
 *
f‹m©
;

55 } 
	tngx_hâp_log_t
;

59 
ngx_¨øy_t
 *
logs
;

61 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

62 
time_t
 
›í_fûe_ˇche_vÆid
;

63 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

65 
ngx_uöt_t
 
off
;

66 } 
	tngx_hâp_log_loc_c⁄f_t
;

70 
ngx_°r_t
 
«me
;

71 
size_t
 
Àn
;

72 
ngx_hâp_log_›_run_±
 
run
;

73 } 
	tngx_hâp_log_v¨_t
;

76 
	`ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
,

77 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

78 
ssize_t
 
	`ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
, 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
);

81 
u_ch¨
 *
	`ngx_hâp_log_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

82 
ngx_hâp_log_›_t
 *
›
);

83 
u_ch¨
 *
	`ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

84 
ngx_hâp_log_›_t
 *
›
);

85 
u_ch¨
 *
	`ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

86 
ngx_hâp_log_›_t
 *
›
);

87 
u_ch¨
 *
	`ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

88 
ngx_hâp_log_›_t
 *
›
);

89 
u_ch¨
 *
	`ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

90 
ngx_hâp_log_›_t
 *
›
);

91 
u_ch¨
 *
	`ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

92 
ngx_hâp_log_›_t
 *
›
);

93 
u_ch¨
 *
	`ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

94 
ngx_hâp_log_›_t
 *
›
);

95 
u_ch¨
 *
	`ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

96 
ngx_hâp_log_›_t
 *
›
);

97 
u_ch¨
 *
	`ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

98 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
);

99 
u_ch¨
 *
	`ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

100 
ngx_hâp_log_›_t
 *
›
);

102 
ngx_öt_t
 
	`ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
,

103 
ngx_hâp_log_›_t
 *
›
, 
ngx_°r_t
 *
vÆue
);

104 
size_t
 
	`ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
,

105 
uöçå_t
 
d©a
);

106 
u_ch¨
 *
	`ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

107 
ngx_hâp_log_›_t
 *
›
);

108 
uöçå_t
 
	`ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

111 *
	`ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

112 *
	`ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

113 *
	`ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

114 *
chûd
);

115 *
	`ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

116 *
c⁄f
);

117 *
	`ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

118 *
c⁄f
);

119 *
	`ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
,

120 
ngx_¨øy_t
 *
Êushes
,Çgx_¨øy_à*
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
);

121 *
	`ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

122 *
c⁄f
);

123 
ngx_öt_t
 
	`ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
);

126 
ngx_comm™d_t
 
ngx_hâp_log_comm™ds
[] = {

128 { 
	`ngx_°rög
("log_format"),

129 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

130 
ngx_hâp_log_£t_f‹m©
,

131 
NGX_HTTP_MAIN_CONF_OFFSET
,

133 
NULL
 },

135 { 
	`ngx_°rög
("access_log"),

136 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


137 |
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE123
,

138 
ngx_hâp_log_£t_log
,

139 
NGX_HTTP_LOC_CONF_OFFSET
,

141 
NULL
 },

143 { 
	`ngx_°rög
("open_log_file_cache"),

144 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

145 
ngx_hâp_log_›í_fûe_ˇche
,

146 
NGX_HTTP_LOC_CONF_OFFSET
,

148 
NULL
 },

150 
ngx_nuŒ_comm™d


151 
	}
};

154 
ngx_hâp_moduÀ_t
 
	gngx_hâp_log_moduÀ_˘x
 = {

155 
NULL
,

156 
ngx_hâp_log_öô
,

158 
ngx_hâp_log_¸óã_maö_c⁄f
,

159 
NULL
,

161 
NULL
,

162 
NULL
,

164 
ngx_hâp_log_¸óã_loc_c⁄f
,

165 
ngx_hâp_log_mîge_loc_c⁄f


169 
ngx_moduÀ_t
 
	gngx_hâp_log_moduÀ
 = {

170 
NGX_MODULE_V1
,

171 &
ngx_hâp_log_moduÀ_˘x
,

172 
ngx_hâp_log_comm™ds
,

173 
NGX_HTTP_MODULE
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NGX_MODULE_V1_PADDING


185 
ngx_°r_t
 
	gngx_hâp_ac˚ss_log
 = 
ngx_°rög
(
NGX_HTTP_LOG_PATH
);

188 
ngx_°r_t
 
	gngx_hâp_comböed_fmt
 =

189 
ngx_°rög
("$remote_addr - $remote_user [$time_local] "

194 
ngx_hâp_log_v¨_t
 
	gngx_hâp_log_v¨s
[] = {

195 { 
ngx_°rög
("c⁄√˘i⁄"), 
NGX_ATOMIC_T_LEN
, 
ngx_hâp_log_c⁄√˘i⁄
 },

196 { 
ngx_°rög
("pùe"), 1, 
ngx_hâp_log_pùe
 },

197 { 
ngx_°rög
("time_local"), ("28/Sep/1970:12:00:00 +0600") - 1,

198 
ngx_hâp_log_time
 },

199 { 
ngx_°rög
("time_iso8601"), ("1970-09-28T12:00:00+06:00") - 1,

200 
ngx_hâp_log_iso8601
 },

201 { 
ngx_°rög
("m£c"), 
NGX_TIME_T_LEN
 + 4, 
ngx_hâp_log_m£c
 },

202 { 
ngx_°rög
("ªque°_time"), 
NGX_TIME_T_LEN
 + 4,

203 
ngx_hâp_log_ªque°_time
 },

204 { 
ngx_°rög
("°©us"), 3, 
ngx_hâp_log_°©us
 },

205 { 
ngx_°rög
("byãs_£¡"), 
NGX_OFF_T_LEN
, 
ngx_hâp_log_byãs_£¡
 },

206 { 
ngx_°rög
("body_byãs_£¡"), 
NGX_OFF_T_LEN
,

207 
ngx_hâp_log_body_byãs_£¡
 },

208 { 
ngx_°rög
("≠ache_byãs_£¡"), 
NGX_OFF_T_LEN
,

209 
ngx_hâp_log_body_byãs_£¡
 },

210 { 
ngx_°rög
("ªque°_Àngth"), 
NGX_SIZE_T_LEN
,

211 
ngx_hâp_log_ªque°_Àngth
 },

213 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

217 
ngx_öt_t


218 
	$ngx_hâp_log_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

220 
u_ch¨
 *
löe
, *
p
;

221 
size_t
 
Àn
;

222 
ngx_uöt_t
 
i
, 
l
;

223 
ngx_hâp_log_t
 *
log
;

224 
ngx_›í_fûe_t
 *
fûe
;

225 
ngx_hâp_log_›_t
 *
›
;

226 
ngx_hâp_log_loc_c⁄f_t
 *
lcf
;

228 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

231 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

233 i‡(
lcf
->
off
) {

234  
NGX_OK
;

237 
log
 = 
lcf
->
logs
->
ñts
;

238 
l
 = 0;Ü < 
lcf
->
logs
->
√…s
;Ü++) {

240 i‡(
	`ngx_time
(Ë=
log
[
l
].
disk_fuŒ_time
) {

251 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
log
[
l
].
f‹m©
->
Êushes
);

253 
Àn
 = 0;

254 
›
 = 
log
[
l
].
f‹m©
->
›s
->
ñts
;

255 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

256 i‡(
›
[
i
].
Àn
 == 0) {

257 
Àn
 +
›
[
i
].
	`gëÀn
(
r
, op[i].
d©a
);

260 
Àn
 +
›
[
i
].len;

264 
Àn
 +
NGX_LINEFEED_SIZE
;

266 
fûe
 = 
log
[
l
].file;

268 i‡(
fûe
 && fûe->
buf„r
) {

270 i‡(
Àn
 > (
size_t
Ë(
fûe
->
œ°
 - fûe->
pos
)) {

272 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
fûe
->
buf„r
,

273 
fûe
->
pos
 - fûe->
buf„r
);

275 
fûe
->
pos
 = fûe->
buf„r
;

278 i‡(
Àn
 <(
size_t
Ë(
fûe
->
œ°
 - fûe->
pos
)) {

280 
p
 = 
fûe
->
pos
;

282 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

283 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

286 
	`ngx_löe„ed
(
p
);

288 
fûe
->
pos
 = 
p
;

294 
löe
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

295 i‡(
löe
 =
NULL
) {

296  
NGX_ERROR
;

299 
p
 = 
löe
;

301 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

302 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

305 
	`ngx_löe„ed
(
p
);

307 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
löe
, 
p
 -Üine);

310  
NGX_OK
;

311 
	}
}

315 
	$ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
, 
u_ch¨
 *
buf
,

316 
size_t
 
Àn
)

318 
u_ch¨
 *
«me
;

319 
time_t
 
now
;

320 
ssize_t
 
n
;

321 
ngx_îr_t
 
îr
;

323 i‡(
log
->
s¸ùt
 =
NULL
) {

324 
«me
 = 
log
->
fûe
->«me.
d©a
;

325 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

328 
«me
 = 
NULL
;

329 
n
 = 
	`ngx_hâp_log_s¸ùt_wrôe
(
r
, 
log
->
s¸ùt
, &
«me
, 
buf
, 
Àn
);

332 i‡(
n
 =(
ssize_t
Ë
Àn
) {

336 
now
 = 
	`ngx_time
();

338 i‡(
n
 == -1) {

339 
îr
 = 
ngx_î∫o
;

341 i‡(
îr
 =
NGX_ENOSPC
) {

342 
log
->
disk_fuŒ_time
 = 
now
;

345 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

346 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

347 
ngx_wrôe_fd_n
 "Åÿ\"%s\" faûed", 
«me
);

349 
log
->
îr‹_log_time
 = 
now
;

355 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

356 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

357 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

358 
«me
, 
n
, 
Àn
);

360 
log
->
îr‹_log_time
 = 
now
;

362 
	}
}

365 
ssize_t


366 
	$ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
,

367 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
)

369 
size_t
 
roŸ
;

370 
ssize_t
 
n
;

371 
ngx_°r_t
 
log
, 
∑th
;

372 
ngx_›í_fûe_öfo_t
 
of
;

373 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
;

374 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

376 i‡(!
r
->
roŸ_ã°ed
) {

380 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

382  
Àn
;

385 
∑th
.
d©a
[
roŸ
] = '\0';

387 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

389 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

391 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

392 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

393 
of
.
ã°_dú
 = 1;

394 
of
.
ã°_⁄ly
 = 1;

395 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

396 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

398 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

399 !
NGX_OK
)

401 i‡(
of
.
îr
 == 0) {

403  
Àn
;

406 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

407 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

410  
Àn
;

413 i‡(!
of
.
is_dú
) {

414 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ENOTDIR
,

415 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

418  
Àn
;

422 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
log
, 
s¸ùt
->
Àngths
->
ñts
, 1,

423 
s¸ùt
->
vÆues
->
ñts
)

424 =
NULL
)

427  
Àn
;

430 
log
.
d©a
[log.
Àn
 - 1] = '\0';

431 *
«me
 = 
log
.
d©a
;

433 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

434 "hâ∞log \"%s\"", 
log
.
d©a
);

436 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

438 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

440 
of
.
log
 = 1;

441 
of
.
vÆid
 = 
Œcf
->
›í_fûe_ˇche_vÆid
;

442 
of
.
mö_u£s
 = 
Œcf
->
›í_fûe_ˇche_mö_u£s
;

443 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

445 i‡(
	`ngx_›í_ˇched_fûe
(
Œcf
->
›í_fûe_ˇche
, &
log
, &
of
, 
r
->
poﬁ
)

446 !
NGX_OK
)

448 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

449 "%†\"%s\" faûed", 
of
.
Áûed
, 
log
.
d©a
);

451  
Àn
;

454 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

455 "hâ∞log #%d", 
of
.
fd
);

457 
n
 = 
	`ngx_wrôe_fd
(
of
.
fd
, 
buf
, 
Àn
);

459  
n
;

460 
	}
}

463 
u_ch¨
 *

464 
	$ngx_hâp_log_c›y_sh‹t
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

465 
ngx_hâp_log_›_t
 *
›
)

467 
size_t
 
Àn
;

468 
uöçå_t
 
d©a
;

470 
Àn
 = 
›
->len;

471 
d©a
 = 
›
->data;

473 
Àn
--) {

474 *
buf
++ = (
u_ch¨
Ë(
d©a
 & 0xff);

475 
d©a
 >>= 8;

478  
buf
;

479 
	}
}

482 
u_ch¨
 *

483 
	$ngx_hâp_log_c›y_l⁄g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

484 
ngx_hâp_log_›_t
 *
›
)

486  
	`ngx_˝ymem
(
buf
, (
u_ch¨
 *Ë
›
->
d©a
, op->
Àn
);

487 
	}
}

490 
u_ch¨
 *

491 
	$ngx_hâp_log_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

492 
ngx_hâp_log_›_t
 *
›
)

494  
	`ngx_•rötf
(
buf
, "%ui", 
r
->
c⁄√˘i⁄
->
numbî
);

495 
	}
}

498 
u_ch¨
 *

499 
	$ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

501 i‡(
r
->
pùñöe
) {

502 *
buf
 = 'p';

504 *
buf
 = '.';

507  
buf
 + 1;

508 
	}
}

511 
u_ch¨
 *

512 
	$ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

514  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_time
.
d©a
,

515 
ngx_ˇched_hâp_log_time
.
Àn
);

516 
	}
}

518 
u_ch¨
 *

519 
	$ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

521  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

522 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

523 
	}
}

525 
u_ch¨
 *

526 
	$ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

528 
ngx_time_t
 *
ç
;

530 
ç
 = 
	`ngx_timeofday
();

532  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
);

533 
	}
}

536 
u_ch¨
 *

537 
	$ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

538 
ngx_hâp_log_›_t
 *
›
)

540 
ngx_time_t
 *
ç
;

541 
ngx_m£c_öt_t
 
ms
;

543 
ç
 = 
	`ngx_timeofday
();

545 
ms
 = (
ngx_m£c_öt_t
)

546 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

547 
ms
 = 
	`ngx_max
(ms, 0);

549  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ms
 / 1000, ms % 1000);

550 
	}
}

553 
u_ch¨
 *

554 
	$ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

556 
ngx_uöt_t
 
°©us
;

558 i‡(
r
->
îr_°©us
) {

559 
°©us
 = 
r
->
îr_°©us
;

561 } i‡(
r
->
hódîs_out
.
°©us
) {

562 
°©us
 = 
r
->
hódîs_out
.status;

564 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

565 *
buf
++ = '0';

566 *
buf
++ = '0';

567 *
buf
++ = '9';

568  
buf
;

571 
°©us
 = 0;

574  
	`ngx_•rötf
(
buf
, "%ui", 
°©us
);

575 
	}
}

578 
u_ch¨
 *

579 
	$ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

580 
ngx_hâp_log_›_t
 *
›
)

582  
	`ngx_•rötf
(
buf
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
);

583 
	}
}

591 
u_ch¨
 *

592 
	$ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

593 
ngx_hâp_log_›_t
 *
›
)

595 
off_t
 
Àngth
;

597 
Àngth
 = 
r
->
c⁄√˘i⁄
->
£¡
 -Ñ->
hódî_size
;

599 i‡(
Àngth
 > 0) {

600  
	`ngx_•rötf
(
buf
, "%O", 
Àngth
);

603 *
buf
 = '0';

605  
buf
 + 1;

606 
	}
}

609 
u_ch¨
 *

610 
	$ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

611 
ngx_hâp_log_›_t
 *
›
)

613  
	`ngx_•rötf
(
buf
, "%O", 
r
->
ªque°_Àngth
);

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_log_›_t
 *
›
,

619 
ngx_°r_t
 *
vÆue
)

621 
ngx_öt_t
 
ödex
;

623 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

624 i‡(
ödex
 =
NGX_ERROR
) {

625  
NGX_ERROR
;

628 
›
->
Àn
 = 0;

629 
›
->
gëÀn
 = 
ngx_hâp_log_v¨übÀ_gëÀn
;

630 
›
->
run
 = 
ngx_hâp_log_v¨übÀ
;

631 
›
->
d©a
 = 
ödex
;

633  
NGX_OK
;

634 
	}
}

637 
size_t


638 
	$ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
, 
uöçå_t
 
d©a
)

640 
uöçå_t
 
Àn
;

641 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

643 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
d©a
);

645 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

649 
Àn
 = 
	`ngx_hâp_log_esˇ≥
(
NULL
, 
vÆue
->
d©a
, value->len);

651 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

653  
vÆue
->
Àn
 +Üen * 3;

654 
	}
}

657 
u_ch¨
 *

658 
	$ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

660 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

662 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
›
->
d©a
);

664 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

665 *
buf
 = '-';

666  
buf
 + 1;

669 i‡(
vÆue
->
esˇ≥
 == 0) {

670  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

673  (
u_ch¨
 *Ë
	`ngx_hâp_log_esˇ≥
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

675 
	}
}

678 
uöçå_t


679 
	$ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

681 
ngx_uöt_t
 
n
;

682 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

684 
uöt32_t
 
esˇ≥
[] = {

703 i‡(
d°
 =
NULL
) {

707 
n
 = 0;

709 
size
) {

710 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

711 
n
++;

713 
§c
++;

714 
size
--;

717  (
uöçå_t
Ë
n
;

720 
size
) {

721 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

722 *
d°
++ = '\\';

723 *
d°
++ = 'x';

724 *
d°
++ = 
hex
[*
§c
 >> 4];

725 *
d°
++ = 
hex
[*
§c
 & 0xf];

726 
§c
++;

729 *
d°
++ = *
§c
++;

731 
size
--;

734  (
uöçå_t
Ë
d°
;

735 
	}
}

739 
	$ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

741 
ngx_hâp_log_maö_c⁄f_t
 *
c⁄f
;

743 
ngx_hâp_log_fmt_t
 *
fmt
;

745 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_maö_c⁄f_t
));

746 i‡(
c⁄f
 =
NULL
) {

747  
NULL
;

750 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
f‹m©s
, 
cf
->
poﬁ
, 4, (
ngx_hâp_log_fmt_t
))

751 !
NGX_OK
)

753  
NULL
;

756 
fmt
 = 
	`ngx_¨øy_push
(&
c⁄f
->
f‹m©s
);

757 i‡(
fmt
 =
NULL
) {

758  
NULL
;

761 
	`ngx_°r_£t
(&
fmt
->
«me
, "combined");

763 
fmt
->
Êushes
 = 
NULL
;

765 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

766 i‡(
fmt
->
›s
 =
NULL
) {

767  
NULL
;

770  
c⁄f
;

771 
	}
}

775 
	$ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

777 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
;

779 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_loc_c⁄f_t
));

780 i‡(
c⁄f
 =
NULL
) {

781  
NULL
;

784 
c⁄f
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

786  
c⁄f
;

787 
	}
}

791 
	$ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

793 
ngx_hâp_log_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

794 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

796 
ngx_hâp_log_t
 *
log
;

797 
ngx_hâp_log_fmt_t
 *
fmt
;

798 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

800 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

802 
c⁄f
->
›í_fûe_ˇche
 = 
¥ev
->open_file_cache;

803 
c⁄f
->
›í_fûe_ˇche_vÆid
 = 
¥ev
->open_file_cache_valid;

804 
c⁄f
->
›í_fûe_ˇche_mö_u£s
 = 
¥ev
->open_file_cache_min_uses;

806 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

807 
c⁄f
->
›í_fûe_ˇche
 = 
NULL
;

811 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

812  
NGX_CONF_OK
;

815 
c⁄f
->
logs
 = 
¥ev
->logs;

816 
c⁄f
->
off
 = 
¥ev
->off;

818 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

819  
NGX_CONF_OK
;

822 
c⁄f
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

823 i‡(
c⁄f
->
logs
 =
NULL
) {

824  
NGX_CONF_ERROR
;

827 
log
 = 
	`ngx_¨øy_push
(
c⁄f
->
logs
);

828 i‡(
log
 =
NULL
) {

829  
NGX_CONF_ERROR
;

832 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
ngx_hâp_ac˚ss_log
);

833 i‡(
log
->
fûe
 =
NULL
) {

834  
NGX_CONF_ERROR
;

837 
log
->
s¸ùt
 = 
NULL
;

838 
log
->
disk_fuŒ_time
 = 0;

839 
log
->
îr‹_log_time
 = 0;

841 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

842 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

845 
log
->
f‹m©
 = &
fmt
[0];

846 
lmcf
->
comböed_u£d
 = 1;

848  
NGX_CONF_OK
;

849 
	}
}

853 
	$ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

855 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

857 
ssize_t
 
buf
;

858 
ngx_uöt_t
 
i
, 
n
;

859 
ngx_°r_t
 *
vÆue
, 
«me
;

860 
ngx_hâp_log_t
 *
log
;

861 
ngx_hâp_log_fmt_t
 *
fmt
;

862 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

863 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

865 
vÆue
 = 
cf
->
¨gs
->
ñts
;

867 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

868 
Œcf
->
off
 = 1;

869 i‡(
cf
->
¨gs
->
√…s
 == 2) {

870  
NGX_CONF_OK
;

873 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

874 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

875  
NGX_CONF_ERROR
;

878 i‡(
Œcf
->
logs
 =
NULL
) {

879 
Œcf
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

880 i‡(
Œcf
->
logs
 =
NULL
) {

881  
NGX_CONF_ERROR
;

885 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

887 
log
 = 
	`ngx_¨øy_push
(
Œcf
->
logs
);

888 i‡(
log
 =
NULL
) {

889  
NGX_CONF_ERROR
;

892 
	`ngx_memzîo
(
log
, (
ngx_hâp_log_t
));

894 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

896 i‡(
n
 == 0) {

897 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

898 i‡(
log
->
fûe
 =
NULL
) {

899  
NGX_CONF_ERROR
;

903 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

904  
NGX_CONF_ERROR
;

907 
log
->
s¸ùt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_s¸ùt_t
));

908 i‡(
log
->
s¸ùt
 =
NULL
) {

909  
NGX_CONF_ERROR
;

912 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

914 
sc
.
cf
 = cf;

915 
sc
.
sour˚
 = &
vÆue
[1];

916 
sc
.
Àngths
 = &
log
->
s¸ùt
->lengths;

917 
sc
.
vÆues
 = &
log
->
s¸ùt
->values;

918 
sc
.
v¨übÀs
 = 
n
;

919 
sc
.
com∂ëe_Àngths
 = 1;

920 
sc
.
com∂ëe_vÆues
 = 1;

922 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

923  
NGX_CONF_ERROR
;

927 i‡(
cf
->
¨gs
->
√…s
 >= 3) {

928 
«me
 = 
vÆue
[2];

930 i‡(
	`ngx_°rcmp
(
«me
.
d©a
, "combined") == 0) {

931 
lmcf
->
comböed_u£d
 = 1;

935 
	`ngx_°r_£t
(&
«me
, "combined");

936 
lmcf
->
comböed_u£d
 = 1;

939 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

940 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

941 i‡(
fmt
[
i
].
«me
.
Àn
 ==Çame.len

942 && 
	`ngx_°rˇ£cmp
(
fmt
[
i
].
«me
.
d©a
,Çame.data) == 0)

944 
log
->
f‹m©
 = &
fmt
[
i
];

945 
buf„r
;

949 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

950 "unknow¿log f‹m© \"%V\"", &
«me
);

951  
NGX_CONF_ERROR
;

953 
buf„r
:

955 i‡(
cf
->
¨gs
->
√…s
 == 4) {

956 i‡(
	`ngx_°∫cmp
(
vÆue
[3].
d©a
, "buffer=", 7) != 0) {

957 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

958 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

959  
NGX_CONF_ERROR
;

962 i‡(
log
->
s¸ùt
) {

963 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

965  
NGX_CONF_ERROR
;

968 
«me
.
Àn
 = 
vÆue
[3].len - 7;

969 
«me
.
d©a
 = 
vÆue
[3].data + 7;

971 
buf
 = 
	`ngx_∑r£_size
(&
«me
);

973 i‡(
buf
 =
NGX_ERROR
) {

974 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

975 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

976  
NGX_CONF_ERROR
;

979 i‡(
log
->
fûe
->
buf„r
 &&Üog->fûe->
œ°
 -Üog->fûe->
pos
 !
buf
) {

980 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

982 "wôh dif„ª¡ buf„∏size", &
vÆue
[1]);

983  
NGX_CONF_ERROR
;

986 
log
->
fûe
->
buf„r
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
buf
);

987 i‡(
log
->
fûe
->
buf„r
 =
NULL
) {

988  
NGX_CONF_ERROR
;

991 
log
->
fûe
->
pos
 =Üog->fûe->
buf„r
;

992 
log
->
fûe
->
œ°
 =Üog->fûe->
buf„r
 + 
buf
;

995  
NGX_CONF_OK
;

996 
	}
}

1000 
	$ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1002 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
 = 
c⁄f
;

1004 
ngx_°r_t
 *
vÆue
;

1005 
ngx_uöt_t
 
i
;

1006 
ngx_hâp_log_fmt_t
 *
fmt
;

1008 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1010 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1011 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1012 i‡(
fmt
[
i
].
«me
.
Àn
 =
vÆue
[1].len

1013 && 
	`ngx_°rcmp
(
fmt
[
i
].
«me
.
d©a
, 
vÆue
[1].data) == 0)

1015 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1017 &
vÆue
[1]);

1018  
NGX_CONF_ERROR
;

1022 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

1023 i‡(
fmt
 =
NULL
) {

1024  
NGX_CONF_ERROR
;

1027 
fmt
->
«me
 = 
vÆue
[1];

1029 
fmt
->
Êushes
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_öt_t
));

1030 i‡(
fmt
->
Êushes
 =
NULL
) {

1031  
NGX_CONF_ERROR
;

1034 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

1035 i‡(
fmt
->
›s
 =
NULL
) {

1036  
NGX_CONF_ERROR
;

1039  
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
fmt
->
Êushes
, fmt->
›s
, cf->
¨gs
, 2);

1040 
	}
}

1044 
	$ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
Êushes
,

1045 
ngx_¨øy_t
 *
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
)

1047 
u_ch¨
 *
d©a
, *
p
, 
ch
;

1048 
size_t
 
i
, 
Àn
;

1049 
ngx_°r_t
 *
vÆue
, 
v¨
;

1050 
ngx_öt_t
 *
Êush
;

1051 
ngx_uöt_t
 
bøckë
;

1052 
ngx_hâp_log_›_t
 *
›
;

1053 
ngx_hâp_log_v¨_t
 *
v
;

1055 
vÆue
 = 
¨gs
->
ñts
;

1057  ; 
s
 < 
¨gs
->
√…s
; s++) {

1059 
i
 = 0;

1061 
i
 < 
vÆue
[
s
].
Àn
) {

1063 
›
 = 
	`ngx_¨øy_push
(
›s
);

1064 i‡(
›
 =
NULL
) {

1065  
NGX_CONF_ERROR
;

1068 
d©a
 = &
vÆue
[
s
].d©a[
i
];

1070 i‡(
vÆue
[
s
].
d©a
[
i
] == '$') {

1072 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1073 
övÆid
;

1076 i‡(
vÆue
[
s
].
d©a
[
i
] == '{') {

1077 
bøckë
 = 1;

1079 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1080 
övÆid
;

1083 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1086 
bøckë
 = 0;

1087 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1090 
v¨
.
Àn
 = 0; 
i
 < 
vÆue
[
s
].len; i++, var.len++) {

1091 
ch
 = 
vÆue
[
s
].
d©a
[
i
];

1093 i‡(
ch
 ='}' && 
bøckë
) {

1094 
i
++;

1095 
bøckë
 = 0;

1099 i‡((
ch
 >= 'A' && ch <= 'Z')

1100 || (
ch
 >= 'a' && ch <= 'z')

1101 || (
ch
 >= '0' && ch <= '9')

1102 || 
ch
 == '_')

1110 i‡(
bøckë
) {

1111 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1113 "v¨übÀ i†missög", &
v¨
);

1114  
NGX_CONF_ERROR
;

1117 i‡(
v¨
.
Àn
 == 0) {

1118 
övÆid
;

1121 i‡(
	`ngx_°∫cmp
(
v¨
.
d©a
, "apache_bytes_sent", 17) == 0) {

1122 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1127 
v
 = 
ngx_hâp_log_v¨s
; v->
«me
.
Àn
; v++) {

1129 i‡(
v
->
«me
.
Àn
 =
v¨
.len

1130 && 
	`ngx_°∫cmp
(
v
->
«me
.
d©a
, 
v¨
.d©a, v¨.
Àn
) == 0)

1132 
›
->
Àn
 = 
v
->len;

1133 
›
->
gëÀn
 = 
NULL
;

1134 
›
->
run
 = 
v
->run;

1135 
›
->
d©a
 = 0;

1137 
found
;

1141 i‡(
	`ngx_hâp_log_v¨übÀ_compûe
(
cf
, 
›
, &
v¨
Ë!
NGX_OK
) {

1142  
NGX_CONF_ERROR
;

1145 i‡(
Êushes
) {

1147 
Êush
 = 
	`ngx_¨øy_push
(
Êushes
);

1148 i‡(
Êush
 =
NULL
) {

1149  
NGX_CONF_ERROR
;

1152 *
Êush
 = 
›
->
d©a
;

1155 
found
:

1160 
i
++;

1162 
i
 < 
vÆue
[
s
].
Àn
 && vÆue[s].
d©a
[i] != '$') {

1163 
i
++;

1166 
Àn
 = &
vÆue
[
s
].
d©a
[
i
] - data;

1168 i‡(
Àn
) {

1170 
›
->
Àn
 =Üen;

1171 
›
->
gëÀn
 = 
NULL
;

1173 i‡(
Àn
 <(
uöçå_t
)) {

1174 
›
->
run
 = 
ngx_hâp_log_c›y_sh‹t
;

1175 
›
->
d©a
 = 0;

1177 
Àn
--) {

1178 
›
->
d©a
 <<= 8;

1179 
›
->
d©a
 |d©a[
Àn
];

1183 
›
->
run
 = 
ngx_hâp_log_c›y_l⁄g
;

1185 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1186 i‡(
p
 =
NULL
) {

1187  
NGX_CONF_ERROR
;

1190 
	`ngx_mem˝y
(
p
, 
d©a
, 
Àn
);

1191 
›
->
d©a
 = (
uöçå_t
Ë
p
;

1197  
NGX_CONF_OK
;

1199 
övÆid
:

1201 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÖ¨amëî \"%s\"", 
d©a
);

1203  
NGX_CONF_ERROR
;

1204 
	}
}

1208 
	$ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1210 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1212 
time_t
 
öa˘ive
, 
vÆid
;

1213 
ngx_°r_t
 *
vÆue
, 
s
;

1214 
ngx_öt_t
 
max
, 
mö_u£s
;

1215 
ngx_uöt_t
 
i
;

1217 i‡(
Œcf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

1221 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1223 
max
 = 0;

1224 
öa˘ive
 = 10;

1225 
vÆid
 = 60;

1226 
mö_u£s
 = 1;

1228 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1230 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

1232 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

1233 i‡(
max
 =
NGX_ERROR
) {

1234 
Áûed
;

1240 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1242 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1243 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1245 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1246 i‡(
öa˘ive
 < 0) {

1247 
Áûed
;

1253 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "min_uses=", 9) == 0) {

1255 
mö_u£s
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 9, vÆue[i].
Àn
 - 9);

1256 i‡(
mö_u£s
 =
NGX_ERROR
) {

1257 
Áûed
;

1263 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "valid=", 6) == 0) {

1265 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1266 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1268 
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

1269 i‡(
vÆid
 < 0) {

1270 
Áûed
;

1276 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1278 
Œcf
->
›í_fûe_ˇche
 = 
NULL
;

1283 
Áûed
:

1285 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1287 &
vÆue
[
i
]);

1288  
NGX_CONF_ERROR
;

1291 i‡(
Œcf
->
›í_fûe_ˇche
 =
NULL
) {

1292  
NGX_CONF_OK
;

1295 i‡(
max
 == 0) {

1296 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1298  
NGX_CONF_ERROR
;

1301 
Œcf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

1303 i‡(
Œcf
->
›í_fûe_ˇche
) {

1305 
Œcf
->
›í_fûe_ˇche_vÆid
 = 
vÆid
;

1306 
Œcf
->
›í_fûe_ˇche_mö_u£s
 = 
mö_u£s
;

1308  
NGX_CONF_OK
;

1311  
NGX_CONF_ERROR
;

1312 
	}
}

1315 
ngx_öt_t


1316 
	$ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
)

1318 
ngx_°r_t
 *
vÆue
;

1319 
ngx_¨øy_t
 
a
;

1320 
ngx_hâp_h™dÀr_±
 *
h
;

1321 
ngx_hâp_log_fmt_t
 *
fmt
;

1322 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1323 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1325 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1327 i‡(
lmcf
->
comböed_u£d
) {

1328 i‡(
	`ngx_¨øy_öô
(&
a
, 
cf
->
poﬁ
, 1, (
ngx_°r_t
)Ë!
NGX_OK
) {

1329  
NGX_ERROR
;

1332 
vÆue
 = 
	`ngx_¨øy_push
(&
a
);

1333 i‡(
vÆue
 =
NULL
) {

1334  
NGX_ERROR
;

1337 *
vÆue
 = 
ngx_hâp_comböed_fmt
;

1338 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1340 i‡(
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
NULL
, 
fmt
->
›s
, &
a
, 0)

1341 !
NGX_CONF_OK
)

1343  
NGX_ERROR
;

1347 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1349 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
);

1350 i‡(
h
 =
NULL
) {

1351  
NGX_ERROR
;

1354 *
h
 = 
ngx_hâp_log_h™dÀr
;

1356  
NGX_OK
;

1357 
	}
}

	@src/http/modules/ngx_http_map_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mhash_max_size
;

15 
ngx_uöt_t
 
	mhash_buckë_size
;

16 } 
	tngx_hâp_m≠_c⁄f_t
;

20 
ngx_hash_keys_¨øys_t
 
	mkeys
;

22 
ngx_¨øy_t
 *
	mvÆues_hash
;

23 
ngx_¨øy_t
 
	mv¨_vÆues
;

24 #i‡(
NGX_PCRE
)

25 
ngx_¨øy_t
 
	mªgexes
;

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

29 
ngx_c⁄f_t
 *
	mcf
;

30 
ngx_uöt_t
 
	mho°«mes
;

31 } 
	tngx_hâp_m≠_c⁄f_˘x_t
;

35 
ngx_hâp_m≠_t
 
	mm≠
;

36 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

38 
ngx_uöt_t
 
	mho°«mes
;

39 } 
	tngx_hâp_m≠_˘x_t
;

42 
ngx_libc_cde˛
 
ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

43 c⁄° *
two
);

44 *
ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

45 *
ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

46 *
ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

49 
ngx_comm™d_t
 
	gngx_hâp_m≠_comm™ds
[] = {

51 { 
ngx_°rög
("map"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

53 
ngx_hâp_m≠_block
,

54 
NGX_HTTP_MAIN_CONF_OFFSET
,

56 
NULL
 },

58 { 
ngx_°rög
("map_hash_max_size"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_num_¶Ÿ
,

61 
NGX_HTTP_MAIN_CONF_OFFSET
,

62 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_max_size
),

63 
NULL
 },

65 { 
ngx_°rög
("map_hash_bucket_size"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

68 
NGX_HTTP_MAIN_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_buckë_size
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_m≠_moduÀ_˘x
 = {

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_m≠_¸óã_c⁄f
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL


91 
ngx_moduÀ_t
 
	gngx_hâp_m≠_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_m≠_moduÀ_˘x
,

94 
ngx_hâp_m≠_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_m≠_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

109 
uöçå_t
 
d©a
)

111 
ngx_hâp_m≠_˘x_t
 *
m≠
 = (ngx_hâp_m≠_˘x_à*Ë
d©a
;

113 
size_t
 
Àn
;

114 
ngx_°r_t
 
vÆ
;

115 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

117 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

120 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
m≠
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

121  
NGX_ERROR
;

124 
Àn
 = 
vÆ
.len;

126 i‡(
Àn
 && 
m≠
->
ho°«mes
 && 
vÆ
.
d©a
[len - 1] == '.') {

127 
Àn
--;

130 
vÆue
 = 
	`ngx_hâp_m≠_föd
(
r
, &
m≠
->m≠, &
vÆ
);

132 i‡(
vÆue
 =
NULL
) {

133 
vÆue
 = 
m≠
->
deÁu…_vÆue
;

136 i‡(!
vÆue
->
vÆid
) {

137 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, (
ngx_uöt_t
ËvÆue->
d©a
);

139 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

140 
vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

144 *
v
 = *
vÆue
;

146 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

147 "hâ∞m≠: \"%v\" \"%v\"", &
vÆ
, 
v
);

149  
NGX_OK
;

150 
	}
}

154 
	$ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

156 
ngx_hâp_m≠_c⁄f_t
 *
mcf
;

158 
mcf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_c⁄f_t
));

159 i‡(
mcf
 =
NULL
) {

160  
NULL
;

163 
mcf
->
hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

164 
mcf
->
hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

166  
mcf
;

167 
	}
}

171 
	$ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

173 
ngx_hâp_m≠_c⁄f_t
 *
mcf
 = 
c⁄f
;

175 *
rv
;

176 
ngx_°r_t
 *
vÆue
, 
«me
;

177 
ngx_c⁄f_t
 
ßve
;

178 
ngx_poﬁ_t
 *
poﬁ
;

179 
ngx_hash_öô_t
 
hash
;

180 
ngx_hâp_m≠_˘x_t
 *
m≠
;

181 
ngx_hâp_v¨übÀ_t
 *
v¨
;

182 
ngx_hâp_m≠_c⁄f_˘x_t
 
˘x
;

183 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

185 i‡(
mcf
->
hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

186 
mcf
->
hash_max_size
 = 2048;

189 i‡(
mcf
->
hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

190 
mcf
->
hash_buckë_size
 = 
ngx_ˇchñöe_size
;

193 
mcf
->
hash_buckë_size
 = 
	`ngx_Æign
(mcf->hash_bucket_size,

194 
ngx_ˇchñöe_size
);

197 
m≠
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_˘x_t
));

198 i‡(
m≠
 =
NULL
) {

199  
NGX_CONF_ERROR
;

202 
vÆue
 = 
cf
->
¨gs
->
ñts
;

204 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

206 
ccv
.
cf
 = cf;

207 
ccv
.
vÆue
 = &value[1];

208 
ccv
.
com∂ex_vÆue
 = &
m≠
->
vÆue
;

210 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

211  
NGX_CONF_ERROR
;

214 
«me
 = 
vÆue
[2];

215 
«me
.
Àn
--;

216 
«me
.
d©a
++;

218 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

219 i‡(
v¨
 =
NULL
) {

220  
NGX_CONF_ERROR
;

223 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_m≠_v¨übÀ
;

224 
v¨
->
d©a
 = (
uöçå_t
Ë
m≠
;

226 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(16384, 
cf
->
log
);

227 i‡(
poﬁ
 =
NULL
) {

228  
NGX_CONF_ERROR
;

231 
˘x
.
keys
.
poﬁ
 = 
cf
->pool;

232 
˘x
.
keys
.
ãmp_poﬁ
 = 
poﬁ
;

234 i‡(
	`ngx_hash_keys_¨øy_öô
(&
˘x
.
keys
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

235 
	`ngx_de°roy_poﬁ
(
poﬁ
);

236  
NGX_CONF_ERROR
;

239 
˘x
.
vÆues_hash
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_¨øy_t
Ë* ctx.
keys
.
hsize
);

240 i‡(
˘x
.
vÆues_hash
 =
NULL
) {

241 
	`ngx_de°roy_poﬁ
(
poﬁ
);

242  
NGX_CONF_ERROR
;

245 i‡(
	`ngx_¨øy_öô
(&
˘x
.
v¨_vÆues
, 
cf
->
poﬁ
, 2,

246 (
ngx_hâp_v¨übÀ_vÆue_t
))

247 !
NGX_OK
)

249 
	`ngx_de°roy_poﬁ
(
poﬁ
);

250  
NGX_CONF_ERROR
;

253 #i‡(
NGX_PCRE
)

254 i‡(
	`ngx_¨øy_öô
(&
˘x
.
ªgexes
, 
cf
->
poﬁ
, 2, (
ngx_hâp_m≠_ªgex_t
))

255 !
NGX_OK
)

257 
	`ngx_de°roy_poﬁ
(
poﬁ
);

258  
NGX_CONF_ERROR
;

262 
˘x
.
deÁu…_vÆue
 = 
NULL
;

263 
˘x
.
cf
 = &
ßve
;

264 
˘x
.
ho°«mes
 = 0;

266 
ßve
 = *
cf
;

267 
cf
->
poﬁ
 =Öool;

268 
cf
->
˘x
 = &ctx;

269 
cf
->
h™dÀr
 = 
ngx_hâp_m≠
;

270 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

272 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

274 *
cf
 = 
ßve
;

276 i‡(
rv
 !
NGX_CONF_OK
) {

277 
	`ngx_de°roy_poﬁ
(
poﬁ
);

278  
rv
;

281 
m≠
->
deÁu…_vÆue
 = 
˘x
.default_value ? ctx.default_value:

282 &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

284 
hash
.
key
 = 
ngx_hash_key_lc
;

285 
hash
.
max_size
 = 
mcf
->
hash_max_size
;

286 
hash
.
buckë_size
 = 
mcf
->
hash_buckë_size
;

287 
hash
.
«me
 = "map_hash";

288 
hash
.
poﬁ
 = 
cf
->pool;

290 i‡(
˘x
.
keys
.keys.
√…s
) {

291 
hash
.hash = &
m≠
->map.hash.hash;

292 
hash
.
ãmp_poﬁ
 = 
NULL
;

294 i‡(
	`ngx_hash_öô
(&
hash
, 
˘x
.
keys
.keys.
ñts
, ctx.keys.keys.
√…s
)

295 !
NGX_OK
)

297 
	`ngx_de°roy_poﬁ
(
poﬁ
);

298  
NGX_CONF_ERROR
;

302 i‡(
˘x
.
keys
.
dns_wc_hód
.
√…s
) {

304 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_hód
.
ñts
,

305 (
size_t
Ë
˘x
.
keys
.
dns_wc_hód
.
√…s
,

306 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

308 
hash
.hash = 
NULL
;

309 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

311 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_hód
.
ñts
,

312 
˘x
.
keys
.
dns_wc_hód
.
√…s
)

313 !
NGX_OK
)

315 
	`ngx_de°roy_poﬁ
(
poﬁ
);

316  
NGX_CONF_ERROR
;

319 
m≠
->m≠.
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

322 i‡(
˘x
.
keys
.
dns_wc_èû
.
√…s
) {

324 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_èû
.
ñts
,

325 (
size_t
Ë
˘x
.
keys
.
dns_wc_èû
.
√…s
,

326 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

328 
hash
.hash = 
NULL
;

329 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

331 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_èû
.
ñts
,

332 
˘x
.
keys
.
dns_wc_èû
.
√…s
)

333 !
NGX_OK
)

335 
	`ngx_de°roy_poﬁ
(
poﬁ
);

336  
NGX_CONF_ERROR
;

339 
m≠
->m≠.
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

342 #i‡(
NGX_PCRE
)

344 i‡(
˘x
.
ªgexes
.
√…s
) {

345 
m≠
->m≠.
ªgex
 = 
˘x
.
ªgexes
.
ñts
;

346 
m≠
->m≠.
ƒegex
 = 
˘x
.
ªgexes
.
√…s
;

351 
	`ngx_de°roy_poﬁ
(
poﬁ
);

353  
rv
;

354 
	}
}

357 
ngx_libc_cde˛


358 
	$ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

360 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

362 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

363 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

365  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

366 
	}
}

370 
	$ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

372 
ngx_öt_t
 
rc
, 
ödex
;

373 
ngx_°r_t
 *
vÆue
, 
fûe
, 
«me
;

374 
ngx_uöt_t
 
i
, 
key
;

375 
ngx_hâp_m≠_c⁄f_˘x_t
 *
˘x
;

376 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨
, **
vp
;

378 
˘x
 = 
cf
->ctx;

380 
vÆue
 = 
cf
->
¨gs
->
ñts
;

382 i‡(
cf
->
¨gs
->
√…s
 == 1

383 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "hostnames") == 0)

385 
˘x
->
ho°«mes
 = 1;

386  
NGX_CONF_OK
;

388 } i‡(
cf
->
¨gs
->
√…s
 != 2) {

389 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

391  
NGX_CONF_ERROR
;

394 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

395 
fûe
 = 
vÆue
[1];

397 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

398  
NGX_CONF_ERROR
;

401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

403  
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

406 i‡(
vÆue
[1].
d©a
[0] == '$') {

407 
«me
 = 
vÆue
[1];

408 
«me
.
Àn
--;

409 
«me
.
d©a
++;

411 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
˘x
->
cf
, &
«me
);

412 i‡(
ödex
 =
NGX_ERROR
) {

413  
NGX_CONF_ERROR
;

416 
v¨
 = 
˘x
->
v¨_vÆues
.
ñts
;

418 
i
 = 0; i < 
˘x
->
v¨_vÆues
.
√…s
; i++) {

419 i‡(
ödex
 =(
ngx_öt_t
Ë
v¨
[
i
].
d©a
) {

420 
found
;

424 
v¨
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

425 i‡(
v¨
 =
NULL
) {

426  
NGX_CONF_ERROR
;

429 
v¨
->
vÆid
 = 0;

430 
v¨
->
no_ˇchóbÀ
 = 0;

431 
v¨
->
nŸ_found
 = 0;

432 
v¨
->
Àn
 = 0;

433 
v¨
->
d©a
 = (
u_ch¨
 *Ë
ödex
;

435 
vp
 = 
	`ngx_¨øy_push
(&
˘x
->
v¨_vÆues
);

436 i‡(
vp
 =
NULL
) {

437  
NGX_CONF_ERROR
;

440 *
vp
 = 
v¨
;

442 
found
;

445 
key
 = 0;

447 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

448 
key
 = 
	`ngx_hash
(key, 
vÆue
[1].
d©a
[
i
]);

451 
key
 %
˘x
->
keys
.
hsize
;

453 
vp
 = 
˘x
->
vÆues_hash
[
key
].
ñts
;

455 i‡(
vp
) {

456 
i
 = 0; i < 
˘x
->
vÆues_hash
[
key
].
√…s
; i++) {

457 i‡(
vÆue
[1].
Àn
 !(
size_t
Ë
vp
[
i
]->len) {

461 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, 
vp
[
i
]->d©a, vÆue[1].
Àn
) == 0) {

462 
v¨
 = 
vp
[
i
];

463 
found
;

468 i‡(
	`ngx_¨øy_öô
(&
˘x
->
vÆues_hash
[
key
], 
cf
->
poﬁ
, 4,

469 (
ngx_hâp_v¨übÀ_vÆue_t
 *))

470 !
NGX_OK
)

472  
NGX_CONF_ERROR
;

476 
v¨
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

477 i‡(
v¨
 =
NULL
) {

478  
NGX_CONF_ERROR
;

481 
v¨
->
Àn
 = 
vÆue
[1].len;

482 
v¨
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
keys
.
poﬁ
, &
vÆue
[1]);

483 i‡(
v¨
->
d©a
 =
NULL
) {

484  
NGX_CONF_ERROR
;

487 
v¨
->
vÆid
 = 1;

488 
v¨
->
no_ˇchóbÀ
 = 0;

489 
v¨
->
nŸ_found
 = 0;

491 
vp
 = 
	`ngx_¨øy_push
(&
˘x
->
vÆues_hash
[
key
]);

492 i‡(
vp
 =
NULL
) {

493  
NGX_CONF_ERROR
;

496 *
vp
 = 
v¨
;

498 
found
:

500 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

502 i‡(
˘x
->
deÁu…_vÆue
) {

503 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

505  
NGX_CONF_ERROR
;

508 
˘x
->
deÁu…_vÆue
 = 
v¨
;

510  
NGX_CONF_OK
;

513 #i‡(
NGX_PCRE
)

515 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '~') {

516 
ngx_ªgex_compûe_t
 
rc
;

517 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

518 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

520 
ªgex
 = 
	`ngx_¨øy_push
(&
˘x
->
ªgexes
);

521 i‡(
ªgex
 =
NULL
) {

522  
NGX_CONF_ERROR
;

525 
vÆue
[0].
Àn
--;

526 
vÆue
[0].
d©a
++;

528 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

530 i‡(
vÆue
[0].
d©a
[0] == '*') {

531 
vÆue
[0].
Àn
--;

532 
vÆue
[0].
d©a
++;

533 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

536 
rc
.
∑âîn
 = 
vÆue
[0];

537 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

538 
rc
.
îr
.
d©a
 = 
îr°r
;

540 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
˘x
->
cf
, &
rc
);

541 i‡(
ªgex
->ªgex =
NULL
) {

542  
NGX_CONF_ERROR
;

545 
ªgex
->
vÆue
 = 
v¨
;

547  
NGX_CONF_OK
;

552 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '\\') {

553 
vÆue
[0].
Àn
--;

554 
vÆue
[0].
d©a
++;

557 
rc
 = 
	`ngx_hash_add_key
(&
˘x
->
keys
, &
vÆue
[0], 
v¨
,

558 (
˘x
->
ho°«mes
Ë? 
NGX_HASH_WILDCARD_KEY
 : 0);

560 i‡(
rc
 =
NGX_OK
) {

561  
NGX_CONF_OK
;

564 i‡(
rc
 =
NGX_DECLINED
) {

565 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

566 "övÆid ho°«mê‹ wûdˇrd \"%V\"", &
vÆue
[0]);

569 i‡(
rc
 =
NGX_BUSY
) {

570 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

571 "c⁄Êi˘ögÖ¨amëî \"%V\"", &
vÆue
[0]);

574  
NGX_CONF_ERROR
;

575 
	}
}

	@src/http/modules/ngx_http_memcached_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

15 
ngx_öt_t
 
	mödex
;

16 } 
	tngx_hâp_memˇched_loc_c⁄f_t
;

20 
size_t
 
	mª°
;

21 
ngx_hâp_ªque°_t
 *
	mªque°
;

22 
ngx_°r_t
 
	mkey
;

23 } 
	tngx_hâp_memˇched_˘x_t
;

26 
ngx_öt_t
 
ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

27 
ngx_öt_t
 
ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_öt_t
 
ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr_öô
(*
d©a
);

30 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
);

31 
ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

32 
ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_öt_t
 
rc
);

35 *
ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

39 *
ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
c⁄f
);

43 
ngx_c⁄f_bômask_t
 
	gngx_hâp_memˇched_√xt_up°ªam_masks
[] = {

44 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

45 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

46 { 
ngx_°rög
("övÆid_ª•⁄£"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

47 { 
ngx_°rög
("nŸ_found"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

48 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

49 { 
ngx_nuŒ_°rög
, 0 }

53 
ngx_comm™d_t
 
	gngx_hâp_memˇched_comm™ds
[] = {

55 { 
ngx_°rög
("memcached_pass"),

56 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

57 
ngx_hâp_memˇched_∑ss
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("memcached_bind"),

63 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

65 
NGX_HTTP_LOC_CONF_OFFSET
,

66 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

67 
NULL
 },

69 { 
ngx_°rög
("memcached_connect_timeout"),

70 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

71 
ngx_c⁄f_£t_m£c_¶Ÿ
,

72 
NGX_HTTP_LOC_CONF_OFFSET
,

73 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

74 
NULL
 },

76 { 
ngx_°rög
("memcached_send_timeout"),

77 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

78 
ngx_c⁄f_£t_m£c_¶Ÿ
,

79 
NGX_HTTP_LOC_CONF_OFFSET
,

80 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

81 
NULL
 },

83 { 
ngx_°rög
("memcached_buffer_size"),

84 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

85 
ngx_c⁄f_£t_size_¶Ÿ
,

86 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

88 
NULL
 },

90 { 
ngx_°rög
("memcached_read_timeout"),

91 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

92 
ngx_c⁄f_£t_m£c_¶Ÿ
,

93 
NGX_HTTP_LOC_CONF_OFFSET
,

94 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

95 
NULL
 },

97 { 
ngx_°rög
("memcached_next_upstream"),

98 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

99 
ngx_c⁄f_£t_bômask_¶Ÿ
,

100 
NGX_HTTP_LOC_CONF_OFFSET
,

101 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

102 &
ngx_hâp_memˇched_√xt_up°ªam_masks
 },

104 
ngx_nuŒ_comm™d


108 
ngx_hâp_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ_˘x
 = {

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
NULL
,

116 
NULL
,

118 
ngx_hâp_memˇched_¸óã_loc_c⁄f
,

119 
ngx_hâp_memˇched_mîge_loc_c⁄f


123 
ngx_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ
 = {

124 
NGX_MODULE_V1
,

125 &
ngx_hâp_memˇched_moduÀ_˘x
,

126 
ngx_hâp_memˇched_comm™ds
,

127 
NGX_HTTP_MODULE
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NGX_MODULE_V1_PADDING


139 
ngx_°r_t
 
	gngx_hâp_memˇched_key
 = 
ngx_°rög
("memcached_key");

142 
	#NGX_HTTP_MEMCACHED_END
 ((
ngx_hâp_memˇched_íd
Ë- 1)

	)

143 
u_ch¨
 
	gngx_hâp_memˇched_íd
[] = 
CRLF
 "END" CRLF;

146 
ngx_öt_t


147 
	$ngx_hâp_memˇched_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

149 
ngx_öt_t
 
rc
;

150 
ngx_hâp_up°ªam_t
 *
u
;

151 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

152 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

154 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

155  
NGX_HTTP_NOT_ALLOWED
;

158 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

160 i‡(
rc
 !
NGX_OK
) {

161  
rc
;

164 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

165  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

168 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

169  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

172 
u
 = 
r
->
up°ªam
;

174 
	`ngx_°r_£t
(&
u
->
schema
, "memcached://");

175 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_memˇched_moduÀ
;

177 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

179 
u
->
c⁄f
 = &
mlcf
->
up°ªam
;

181 
u
->
¸óã_ªque°
 = 
ngx_hâp_memˇched_¸óã_ªque°
;

182 
u
->
ªöô_ªque°
 = 
ngx_hâp_memˇched_ªöô_ªque°
;

183 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_memˇched_¥o˚ss_hódî
;

184 
u
->
ab‹t_ªque°
 = 
ngx_hâp_memˇched_ab‹t_ªque°
;

185 
u
->
föÆize_ªque°
 = 
ngx_hâp_memˇched_föÆize_ªque°
;

187 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_memˇched_˘x_t
));

188 i‡(
˘x
 =
NULL
) {

189  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

192 
˘x
->
ª°
 = 
NGX_HTTP_MEMCACHED_END
;

193 
˘x
->
ªque°
 = 
r
;

195 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_memˇched_moduÀ
);

197 
u
->
öput_fûãr_öô
 = 
ngx_hâp_memˇched_fûãr_öô
;

198 
u
->
öput_fûãr
 = 
ngx_hâp_memˇched_fûãr
;

199 
u
->
öput_fûãr_˘x
 = 
˘x
;

201 
r
->
maö
->
cou¡
++;

203 
	`ngx_hâp_up°ªam_öô
(
r
);

205  
NGX_DONE
;

206 
	}
}

209 
ngx_öt_t


210 
	$ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

212 
size_t
 
Àn
;

213 
uöçå_t
 
esˇ≥
;

214 
ngx_buf_t
 *
b
;

215 
ngx_chaö_t
 *
˛
;

216 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

217 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

218 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

220 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

222 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
mlcf
->
ödex
);

224 i‡(
vv
 =
NULL
 || vv->
nŸ_found
 || vv->
Àn
 == 0) {

225 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

227  
NGX_ERROR
;

230 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vv
->
d©a
, vv->
Àn
, 
NGX_ESCAPE_MEMCACHED
);

232 
Àn
 = ("gë "Ë- 1 + 
vv
->À¿+ 
esˇ≥
 + (
CRLF
) - 1;

234 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

235 i‡(
b
 =
NULL
) {

236  
NGX_ERROR
;

239 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

240 i‡(
˛
 =
NULL
) {

241  
NGX_ERROR
;

244 
˛
->
buf
 = 
b
;

245 
˛
->
√xt
 = 
NULL
;

247 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

249 *
b
->
œ°
++ = 'g'; *b->last++ = 'e'; *b->last++ = 't'; *b->last++ = ' ';

251 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

253 
˘x
->
key
.
d©a
 = 
b
->
œ°
;

255 i‡(
esˇ≥
 == 0) {

256 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
vv
->
d©a
, vv->
Àn
);

259 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
(b->œ°, 
vv
->
d©a
, vv->
Àn
,

260 
NGX_ESCAPE_MEMCACHED
);

263 
˘x
->
key
.
Àn
 = 
b
->
œ°
 - ctx->key.
d©a
;

265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

266 "hâ∞memˇchedÑeque°: \"%V\"", &
˘x
->
key
);

268 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

270  
NGX_OK
;

271 
	}
}

274 
ngx_öt_t


275 
	$ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

277  
NGX_OK
;

278 
	}
}

281 
ngx_öt_t


282 
	$ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

284 
u_ch¨
 *
p
, *
Àn
;

285 
ngx_°r_t
 
löe
;

286 
ngx_hâp_up°ªam_t
 *
u
;

287 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

289 
u
 = 
r
->
up°ªam
;

291 
p
 = 
u
->
buf„r
.
pos
;Ö < u->buf„r.
œ°
;Ö++) {

292 i‡(*
p
 =
LF
) {

293 
found
;

297  
NGX_AGAIN
;

299 
found
:

301 *
p
 = '\0';

303 
löe
.
Àn
 = 
p
 - 
u
->
buf„r
.
pos
 - 1;

304 
löe
.
d©a
 = 
u
->
buf„r
.
pos
;

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

307 "memˇched: \"%V\"", &
löe
);

309 
p
 = 
u
->
buf„r
.
pos
;

311 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

313 i‡(
	`ngx_°∫cmp
(
p
, "VALUE ", ("VALUE ") - 1) == 0) {

315 
p
 += ("VALUE ") - 1;

317 i‡(
	`ngx_°∫cmp
(
p
, 
˘x
->
key
.
d©a
, ctx->key.
Àn
) != 0) {

318 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

321 &
löe
, &
˘x
->
key
);

323  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

326 
p
 +
˘x
->
key
.
Àn
;

328 i‡(*
p
++ != ' ') {

329 
no_vÆid
;

334 *
p
) {

335 i‡(*
p
++ == ' ') {

336 
Àngth
;

340 
no_vÆid
;

342 
Àngth
:

344 
Àn
 = 
p
;

346 *
p
 && *p++ !
CR
) { }

348 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
Àn
, 
p
 -Üen - 1);

349 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1) {

350 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

353 &
löe
, &
˘x
->
key
);

354  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

357 
u
->
hódîs_ö
.
°©us_n
 = 200;

358 
u
->
°©e
->
°©us
 = 200;

359 
u
->
buf„r
.
pos
 = 
p
 + 1;

361  
NGX_OK
;

364 i‡(
	`ngx_°rcmp
(
p
, "END\x0d") == 0) {

365 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

366 "key: \"%V\" wa†nŸ found by memˇched", &
˘x
->
key
);

368 
u
->
hódîs_ö
.
°©us_n
 = 404;

369 
u
->
°©e
->
°©us
 = 404;

371  
NGX_OK
;

374 
no_vÆid
:

376 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

377 "memˇched síàövÆidÑe•⁄£: \"%V\"", &
löe
);

379  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_hâp_memˇched_fûãr_öô
(*
d©a
)

386 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

388 
ngx_hâp_up°ªam_t
 *
u
;

390 
u
 = 
˘x
->
ªque°
->
up°ªam
;

392 
u
->
Àngth
 +
NGX_HTTP_MEMCACHED_END
;

394  
NGX_OK
;

395 
	}
}

398 
ngx_öt_t


399 
	$ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

401 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

403 
u_ch¨
 *
œ°
;

404 
ngx_buf_t
 *
b
;

405 
ngx_chaö_t
 *
˛
, **
Œ
;

406 
ngx_hâp_up°ªam_t
 *
u
;

408 
u
 = 
˘x
->
ªque°
->
up°ªam
;

409 
b
 = &
u
->
buf„r
;

411 i‡(
u
->
Àngth
 =
˘x
->
ª°
) {

413 i‡(
	`ngx_°∫cmp
(
b
->
œ°
,

414 
ngx_hâp_memˇched_íd
 + 
NGX_HTTP_MEMCACHED_END
 - 
˘x
->
ª°
,

415 
byãs
)

418 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

421 
u
->
Àngth
 = 0;

422 
˘x
->
ª°
 = 0;

424  
NGX_OK
;

427 
u
->
Àngth
 -
byãs
;

428 
˘x
->
ª°
 -
byãs
;

430  
NGX_OK
;

433 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

434 
Œ
 = &
˛
->
√xt
;

437 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
˘x
->
ªque°
->
poﬁ
, &
u
->
‰ì_bufs
);

438 i‡(
˛
 =
NULL
) {

439  
NGX_ERROR
;

442 
˛
->
buf
->
Êush
 = 1;

443 
˛
->
buf
->
mem‹y
 = 1;

445 *
Œ
 = 
˛
;

447 
œ°
 = 
b
->last;

448 
˛
->
buf
->
pos
 = 
œ°
;

449 
b
->
œ°
 +
byãs
;

450 
˛
->
buf
->
œ°
 = 
b
->last;

451 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

453 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

455 
byãs
, 
b
->
œ°
 - b->
pos
, 
u
->
Àngth
, 
˘x
->
ª°
);

457 i‡(
byãs
 <(
ssize_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
)) {

458 
u
->
Àngth
 -
byãs
;

459  
NGX_OK
;

462 
œ°
 +
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
;

464 i‡(
	`ngx_°∫cmp
(
œ°
, 
ngx_hâp_memˇched_íd
, 
b
->last -Üast) != 0) {

465 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

469 
˘x
->
ª°
 -
b
->
œ°
 -Üast;

470 
b
->
œ°
 =Üast;

471 
˛
->
buf
->
œ°
 =Üast;

472 
u
->
Àngth
 = 
˘x
->
ª°
;

474  
NGX_OK
;

475 
	}
}

479 
	$ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

481 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

484 
	}
}

488 
	$ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

490 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

493 
	}
}

497 
	$ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

499 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
;

501 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_memˇched_loc_c⁄f_t
));

502 i‡(
c⁄f
 =
NULL
) {

503  
NULL
;

516 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

517 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

518 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

520 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

523 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

524 
c⁄f
->
up°ªam
.
buf„rög
 = 0;

525 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 0;

526 
c⁄f
->
up°ªam
.
£nd_low©
 = 0;

527 
c⁄f
->
up°ªam
.
bufs
.
num
 = 0;

528 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 0;

529 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 0;

530 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 0;

531 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 1;

532 
c⁄f
->
up°ªam
.
öãr˚±_404
 = 1;

533 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 0;

534 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 0;

536 
c⁄f
->
ödex
 = 
NGX_CONF_UNSET
;

538  
c⁄f
;

539 
	}
}

543 
	$ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

545 
ngx_hâp_memˇched_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

546 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

548 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

549 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

551 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

552 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

554 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

555 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

557 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

558 
¥ev
->
up°ªam
.
buf„r_size
,

559 (
size_t
Ë
ngx_∑gesize
);

561 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

562 
¥ev
->
up°ªam
.
√xt_up°ªam
,

563 (
NGX_CONF_BITMASK_SET


564 |
NGX_HTTP_UPSTREAM_FT_ERROR


565 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

567 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

568 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


569 |
NGX_HTTP_UPSTREAM_FT_OFF
;

572 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

573 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

576 i‡(
c⁄f
->
ödex
 =
NGX_CONF_UNSET
) {

577 
c⁄f
->
ödex
 = 
¥ev
->index;

580  
NGX_CONF_OK
;

581 
	}
}

585 
	$ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

587 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
 = 
c⁄f
;

589 
ngx_°r_t
 *
vÆue
;

590 
ngx_uæ_t
 
u
;

591 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

593 i‡(
mlcf
->
up°ªam
.upstream) {

597 
vÆue
 = 
cf
->
¨gs
->
ñts
;

599 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

601 
u
.
uæ
 = 
vÆue
[1];

602 
u
.
no_ªsﬁve
 = 1;

604 
mlcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

605 i‡(
mlcf
->
up°ªam
.up°ªam =
NULL
) {

606  
NGX_CONF_ERROR
;

609 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

611 
˛cf
->
h™dÀr
 = 
ngx_hâp_memˇched_h™dÀr
;

613 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

614 
˛cf
->
auto_ªdúe˘
 = 1;

617 
mlcf
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_memˇched_key
);

619 i‡(
mlcf
->
ödex
 =
NGX_ERROR
) {

620  
NGX_CONF_ERROR
;

623  
NGX_CONF_OK
;

624 
	}
}

	@src/http/modules/ngx_http_mp4_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_MP4_TRAK_ATOM
 0

	)

13 
	#NGX_HTTP_MP4_TKHD_ATOM
 1

	)

14 
	#NGX_HTTP_MP4_MDIA_ATOM
 2

	)

15 
	#NGX_HTTP_MP4_MDHD_ATOM
 3

	)

16 
	#NGX_HTTP_MP4_HDLR_ATOM
 4

	)

17 
	#NGX_HTTP_MP4_MINF_ATOM
 5

	)

18 
	#NGX_HTTP_MP4_VMHD_ATOM
 6

	)

19 
	#NGX_HTTP_MP4_SMHD_ATOM
 7

	)

20 
	#NGX_HTTP_MP4_DINF_ATOM
 8

	)

21 
	#NGX_HTTP_MP4_STBL_ATOM
 9

	)

22 
	#NGX_HTTP_MP4_STSD_ATOM
 10

	)

23 
	#NGX_HTTP_MP4_STTS_ATOM
 11

	)

24 
	#NGX_HTTP_MP4_STTS_DATA
 12

	)

25 
	#NGX_HTTP_MP4_STSS_ATOM
 13

	)

26 
	#NGX_HTTP_MP4_STSS_DATA
 14

	)

27 
	#NGX_HTTP_MP4_CTTS_ATOM
 15

	)

28 
	#NGX_HTTP_MP4_CTTS_DATA
 16

	)

29 
	#NGX_HTTP_MP4_STSC_ATOM
 17

	)

30 
	#NGX_HTTP_MP4_STSC_CHUNK
 18

	)

31 
	#NGX_HTTP_MP4_STSC_DATA
 19

	)

32 
	#NGX_HTTP_MP4_STSZ_ATOM
 20

	)

33 
	#NGX_HTTP_MP4_STSZ_DATA
 21

	)

34 
	#NGX_HTTP_MP4_STCO_ATOM
 22

	)

35 
	#NGX_HTTP_MP4_STCO_DATA
 23

	)

36 
	#NGX_HTTP_MP4_CO64_ATOM
 24

	)

37 
	#NGX_HTTP_MP4_CO64_DATA
 25

	)

39 
	#NGX_HTTP_MP4_LAST_ATOM
 
NGX_HTTP_MP4_CO64_DATA


	)

43 
size_t
 
	mbuf„r_size
;

44 
size_t
 
	mmax_buf„r_size
;

45 } 
	tngx_hâp_mp4_c⁄f_t
;

49 
u_ch¨
 
	mchunk
[4];

50 
u_ch¨
 
	mßm∂es
[4];

51 
u_ch¨
 
	mid
[4];

52 } 
	tngx_mp4_°sc_íåy_t
;

56 
uöt32_t
 
	mtimesˇÀ
;

57 
uöt32_t
 
	mtime_to_ßm∂e_íåõs
;

58 
uöt32_t
 
	mßm∂e_to_chunk_íåõs
;

59 
uöt32_t
 
	msync_ßm∂es_íåõs
;

60 
uöt32_t
 
	mcomposôi⁄_off£t_íåõs
;

61 
uöt32_t
 
	mßm∂e_sizes_íåõs
;

62 
uöt32_t
 
	mchunks
;

64 
ngx_uöt_t
 
	m°¨t_ßm∂e
;

65 
ngx_uöt_t
 
	m°¨t_chunk
;

66 
ngx_uöt_t
 
	mchunk_ßm∂es
;

67 
uöt64_t
 
	mchunk_ßm∂es_size
;

68 
off_t
 
	m°¨t_off£t
;

70 
size_t
 
	mtkhd_size
;

71 
size_t
 
	mmdhd_size
;

72 
size_t
 
	mhdÃ_size
;

73 
size_t
 
	mvmhd_size
;

74 
size_t
 
	msmhd_size
;

75 
size_t
 
	mdöf_size
;

76 
size_t
 
	msize
;

78 
ngx_chaö_t
 
	mout
[
NGX_HTTP_MP4_LAST_ATOM
 + 1];

80 
ngx_buf_t
 
	måak_©om_buf
;

81 
ngx_buf_t
 
	mtkhd_©om_buf
;

82 
ngx_buf_t
 
	mmdü_©om_buf
;

83 
ngx_buf_t
 
	mmdhd_©om_buf
;

84 
ngx_buf_t
 
	mhdÃ_©om_buf
;

85 
ngx_buf_t
 
	mmöf_©om_buf
;

86 
ngx_buf_t
 
	mvmhd_©om_buf
;

87 
ngx_buf_t
 
	msmhd_©om_buf
;

88 
ngx_buf_t
 
	mdöf_©om_buf
;

89 
ngx_buf_t
 
	m°bl_©om_buf
;

90 
ngx_buf_t
 
	m°sd_©om_buf
;

91 
ngx_buf_t
 
	m°ts_©om_buf
;

92 
ngx_buf_t
 
	m°ts_d©a_buf
;

93 
ngx_buf_t
 
	m°ss_©om_buf
;

94 
ngx_buf_t
 
	m°ss_d©a_buf
;

95 
ngx_buf_t
 
	m˘ts_©om_buf
;

96 
ngx_buf_t
 
	m˘ts_d©a_buf
;

97 
ngx_buf_t
 
	m°sc_©om_buf
;

98 
ngx_buf_t
 
	m°sc_chunk_buf
;

99 
ngx_buf_t
 
	m°sc_d©a_buf
;

100 
ngx_buf_t
 
	m°sz_©om_buf
;

101 
ngx_buf_t
 
	m°sz_d©a_buf
;

102 
ngx_buf_t
 
	m°co_©om_buf
;

103 
ngx_buf_t
 
	m°co_d©a_buf
;

104 
ngx_buf_t
 
	mco64_©om_buf
;

105 
ngx_buf_t
 
	mco64_d©a_buf
;

107 
ngx_mp4_°sc_íåy_t
 
	m°sc_chunk_íåy
;

108 } 
	tngx_hâp_mp4_åak_t
;

112 
ngx_fûe_t
 
	mfûe
;

114 
u_ch¨
 *
	mbuf„r
;

115 
u_ch¨
 *
	mbuf„r_°¨t
;

116 
u_ch¨
 *
	mbuf„r_pos
;

117 
u_ch¨
 *
	mbuf„r_íd
;

118 
size_t
 
	mbuf„r_size
;

120 
off_t
 
	moff£t
;

121 
off_t
 
	míd
;

122 
off_t
 
	mc⁄ã¡_Àngth
;

123 
ngx_uöt_t
 
	m°¨t
;

124 
uöt32_t
 
	mtimesˇÀ
;

125 
ngx_hâp_ªque°_t
 *
	mªque°
;

126 
ngx_¨øy_t
 
	måak
;

127 
ngx_hâp_mp4_åak_t
 
	måaks
[2];

129 
size_t
 
	m·yp_size
;

130 
size_t
 
	mmoov_size
;

132 
ngx_chaö_t
 *
	mout
;

133 
ngx_chaö_t
 
	m·yp_©om
;

134 
ngx_chaö_t
 
	mmoov_©om
;

135 
ngx_chaö_t
 
	mmvhd_©om
;

136 
ngx_chaö_t
 
	mmd©_©om
;

137 
ngx_chaö_t
 
	mmd©_d©a
;

139 
ngx_buf_t
 
	m·yp_©om_buf
;

140 
ngx_buf_t
 
	mmoov_©om_buf
;

141 
ngx_buf_t
 
	mmvhd_©om_buf
;

142 
ngx_buf_t
 
	mmd©_©om_buf
;

143 
ngx_buf_t
 
	mmd©_d©a_buf
;

145 
u_ch¨
 
	mmoov_©om_hódî
[8];

146 
u_ch¨
 
	mmd©_©om_hódî
[16];

147 } 
	tngx_hâp_mp4_fûe_t
;

151 *
	m«me
;

152 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_mp4_fûe_t
 *
	mmp4
,

153 
uöt64_t
 
	m©om_d©a_size
);

154 } 
	tngx_hâp_mp4_©om_h™dÀr_t
;

157 
	#ngx_mp4_©om_hódî
(
mp4
Ë(mp4->
buf„r_pos
 - 8)

	)

158 
	#ngx_mp4_©om_d©a
(
mp4
Ëmp4->
buf„r_pos


	)

159 
	#ngx_mp4_©om_d©a_size
(
t
Ë(
uöt64_t
Ë(—Ë- 8)

	)

160 
	#ngx_mp4_©om_√xt
(
mp4
, 
n
Ëmp4->
buf„r_pos
 +n; mp4->
off£t
 +
	)
n

163 
	#ngx_mp4_£t_©om_«me
(
p
, 
n1
, 
n2
, 
n3
, 
n4
) \

164 ((
u_ch¨
 *Ë(
p
))[4] = 
n1
; \

165 ((
u_ch¨
 *Ë(
p
))[5] = 
n2
; \

166 ((
u_ch¨
 *Ë(
p
))[6] = 
n3
; \

167 ((
u_ch¨
 *Ë(
p
))[7] = 
n4


	)

169 
	#ngx_mp4_gë_32vÆue
(
p
) \

170 –((
uöt32_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 24) \

171 + ( ((
u_ch¨
 *Ë(
p
))[1] << 16) \

172 + ( ((
u_ch¨
 *Ë(
p
))[2] << 8) \

173 + ( ((
u_ch¨
 *Ë(
p
))[3]Ë)

	)

175 
	#ngx_mp4_£t_32vÆue
(
p
, 
n
) \

176 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
n
) >> 24); \

177 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
n
) >> 16); \

178 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
n
) >> 8); \

179 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë(
n
)

	)

181 
	#ngx_mp4_gë_64vÆue
(
p
) \

182 –((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 56) \

183 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[1] << 48) \

184 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[2] << 40) \

185 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[3] << 32) \

186 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[4] << 24) \

187 + ( ((
u_ch¨
 *Ë(
p
))[5] << 16) \

188 + ( ((
u_ch¨
 *Ë(
p
))[6] << 8) \

189 + ( ((
u_ch¨
 *Ë(
p
))[7]Ë)

	)

191 
	#ngx_mp4_£t_64vÆue
(
p
, 
n
) \

192 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 56); \

193 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 48); \

194 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 40); \

195 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 32); \

196 ((
u_ch¨
 *Ë(
p
))[4] = (u_ch¨Ë–(
n
) >> 24); \

197 ((
u_ch¨
 *Ë(
p
))[5] = (u_ch¨Ë–(
n
) >> 16); \

198 ((
u_ch¨
 *Ë(
p
))[6] = (u_ch¨Ë–(
n
) >> 8); \

199 ((
u_ch¨
 *Ë(
p
))[7] = (u_ch¨Ë(
n
)

	)

201 
	#ngx_mp4_œ°_åak
(
mp4
) \

202 &((
ngx_hâp_mp4_åak_t
 *Ë
mp4
->
åak
.
ñts
)[mp4->åak.
√…s
 - 1]

	)

205 
ngx_öt_t
 
ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
);

206 
ngx_öt_t
 
ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

207 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
);

208 
ngx_öt_t
 
ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
);

209 
ngx_öt_t
 
ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

210 
uöt64_t
 
©om_d©a_size
);

211 
ngx_öt_t
 
ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

212 
uöt64_t
 
©om_d©a_size
);

213 
ngx_öt_t
 
ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

214 
uöt64_t
 
©om_d©a_size
);

215 
size_t
 
ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

216 
off_t
 
°¨t_off£t
);

217 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

218 
uöt64_t
 
©om_d©a_size
);

219 
ngx_öt_t
 
ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

220 
uöt64_t
 
©om_d©a_size
);

221 
ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

222 
ngx_hâp_mp4_åak_t
 *
åak
);

223 
ngx_öt_t
 
ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

224 
uöt64_t
 
©om_d©a_size
);

225 
ngx_öt_t
 
ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

226 
uöt64_t
 
©om_d©a_size
);

227 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

228 
uöt64_t
 
©om_d©a_size
);

229 
ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

230 
ngx_hâp_mp4_åak_t
 *
åak
);

231 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

232 
uöt64_t
 
©om_d©a_size
);

233 
ngx_öt_t
 
ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

234 
uöt64_t
 
©om_d©a_size
);

235 
ngx_öt_t
 
ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

236 
uöt64_t
 
©om_d©a_size
);

237 
ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

238 
ngx_hâp_mp4_åak_t
 *
åak
);

239 
ngx_öt_t
 
ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

240 
uöt64_t
 
©om_d©a_size
);

241 
ngx_öt_t
 
ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

242 
uöt64_t
 
©om_d©a_size
);

243 
ngx_öt_t
 
ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

244 
uöt64_t
 
©om_d©a_size
);

245 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

246 
uöt64_t
 
©om_d©a_size
);

247 
ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

248 
ngx_hâp_mp4_åak_t
 *
åak
);

249 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

250 
uöt64_t
 
©om_d©a_size
);

251 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

252 
uöt64_t
 
©om_d©a_size
);

253 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

254 
ngx_hâp_mp4_åak_t
 *
åak
);

255 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

256 
uöt64_t
 
©om_d©a_size
);

257 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

258 
ngx_hâp_mp4_åak_t
 *
åak
);

259 
ngx_öt_t
 
ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

260 
uöt64_t
 
©om_d©a_size
);

261 
ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

262 
ngx_hâp_mp4_åak_t
 *
åak
);

263 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

264 
uöt64_t
 
©om_d©a_size
);

265 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

266 
ngx_hâp_mp4_åak_t
 *
åak
);

267 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

268 
uöt64_t
 
©om_d©a_size
);

269 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

270 
ngx_hâp_mp4_åak_t
 *
åak
);

271 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

272 
uöt64_t
 
©om_d©a_size
);

273 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

274 
ngx_hâp_mp4_åak_t
 *
åak
);

275 
ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

276 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
);

277 
ngx_öt_t
 
ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

278 
uöt64_t
 
©om_d©a_size
);

279 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

280 
ngx_hâp_mp4_åak_t
 *
åak
);

281 
ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

282 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
);

283 *
ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

284 *
ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

285 *
ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

287 
ngx_comm™d_t
 
	gngx_hâp_mp4_comm™ds
[] = {

289 { 
ngx_°rög
("mp4"),

290 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

291 
ngx_hâp_mp4
,

294 
NULL
 },

296 { 
ngx_°rög
("mp4_buffer_size"),

297 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

298 
ngx_c⁄f_£t_size_¶Ÿ
,

299 
NGX_HTTP_LOC_CONF_OFFSET
,

300 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
buf„r_size
),

301 
NULL
 },

303 { 
ngx_°rög
("mp4_max_buffer_size"),

304 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

305 
ngx_c⁄f_£t_size_¶Ÿ
,

306 
NGX_HTTP_LOC_CONF_OFFSET
,

307 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
max_buf„r_size
),

308 
NULL
 },

310 
ngx_nuŒ_comm™d


314 
ngx_hâp_moduÀ_t
 
	gngx_hâp_mp4_moduÀ_˘x
 = {

315 
NULL
,

316 
NULL
,

318 
NULL
,

319 
NULL
,

321 
NULL
,

322 
NULL
,

324 
ngx_hâp_mp4_¸óã_c⁄f
,

325 
ngx_hâp_mp4_mîge_c⁄f


329 
ngx_moduÀ_t
 
	gngx_hâp_mp4_moduÀ
 = {

330 
NGX_MODULE_V1
,

331 &
ngx_hâp_mp4_moduÀ_˘x
,

332 
ngx_hâp_mp4_comm™ds
,

333 
NGX_HTTP_MODULE
,

334 
NULL
,

335 
NULL
,

336 
NULL
,

337 
NULL
,

338 
NULL
,

339 
NULL
,

340 
NULL
,

341 
NGX_MODULE_V1_PADDING


345 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_©oms
[] = {

346 { "·yp", 
ngx_hâp_mp4_ªad_·yp_©om
 },

347 { "moov", 
ngx_hâp_mp4_ªad_moov_©om
 },

348 { "md©", 
ngx_hâp_mp4_ªad_md©_©om
 },

349 { 
NULL
, NULL }

352 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_moov_©oms
[] = {

353 { "mvhd", 
ngx_hâp_mp4_ªad_mvhd_©om
 },

354 { "åak", 
ngx_hâp_mp4_ªad_åak_©om
 },

355 { "cmov", 
ngx_hâp_mp4_ªad_cmov_©om
 },

356 { 
NULL
, NULL }

359 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_åak_©oms
[] = {

360 { "tkhd", 
ngx_hâp_mp4_ªad_tkhd_©om
 },

361 { "mdü", 
ngx_hâp_mp4_ªad_mdü_©om
 },

362 { 
NULL
, NULL }

365 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_mdü_©oms
[] = {

366 { "mdhd", 
ngx_hâp_mp4_ªad_mdhd_©om
 },

367 { "hdÃ", 
ngx_hâp_mp4_ªad_hdÃ_©om
 },

368 { "möf", 
ngx_hâp_mp4_ªad_möf_©om
 },

369 { 
NULL
, NULL }

372 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_möf_©oms
[] = {

373 { "vmhd", 
ngx_hâp_mp4_ªad_vmhd_©om
 },

374 { "smhd", 
ngx_hâp_mp4_ªad_smhd_©om
 },

375 { "döf", 
ngx_hâp_mp4_ªad_döf_©om
 },

376 { "°bl", 
ngx_hâp_mp4_ªad_°bl_©om
 },

377 { 
NULL
, NULL }

380 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_°bl_©oms
[] = {

381 { "°sd", 
ngx_hâp_mp4_ªad_°sd_©om
 },

382 { "°ts", 
ngx_hâp_mp4_ªad_°ts_©om
 },

383 { "°ss", 
ngx_hâp_mp4_ªad_°ss_©om
 },

384 { "˘ts", 
ngx_hâp_mp4_ªad_˘ts_©om
 },

385 { "°sc", 
ngx_hâp_mp4_ªad_°sc_©om
 },

386 { "°sz", 
ngx_hâp_mp4_ªad_°sz_©om
 },

387 { "°co", 
ngx_hâp_mp4_ªad_°co_©om
 },

388 { "co64", 
ngx_hâp_mp4_ªad_co64_©om
 },

389 { 
NULL
, NULL }

393 
ngx_öt_t


394 
	$ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

396 
u_ch¨
 *
œ°
;

397 
size_t
 
roŸ
;

398 
ngx_öt_t
 
rc
, 
°¨t
;

399 
ngx_uöt_t
 
Àvñ
;

400 
ngx_°r_t
 
∑th
, 
vÆue
;

401 
ngx_log_t
 *
log
;

402 
ngx_buf_t
 *
b
;

403 
ngx_chaö_t
 
out
;

404 
ngx_hâp_mp4_fûe_t
 *
mp4
;

405 
ngx_›í_fûe_öfo_t
 
of
;

406 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

408 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

409  
NGX_HTTP_NOT_ALLOWED
;

412 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

413  
NGX_DECLINED
;

416 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

418 i‡(
rc
 !
NGX_OK
) {

419  
rc
;

422 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

423 i‡(
œ°
 =
NULL
) {

424  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

427 
log
 = 
r
->
c⁄√˘i⁄
->log;

429 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

431 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

432 "hâ∞mp4 fûíame: \"%V\"", &
∑th
);

434 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

436 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

438 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

439 
of
.
dúe˘io
 = 
NGX_MAX_OFF_T_VALUE
;

440 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

441 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

442 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

443 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

445 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

446 !
NGX_OK
)

448 
of
.
îr
) {

451  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

453 
NGX_ENOENT
:

454 
NGX_ENOTDIR
:

455 
NGX_ENAMETOOLONG
:

457 
Àvñ
 = 
NGX_LOG_ERR
;

458 
rc
 = 
NGX_HTTP_NOT_FOUND
;

461 
NGX_EACCES
:

463 
Àvñ
 = 
NGX_LOG_ERR
;

464 
rc
 = 
NGX_HTTP_FORBIDDEN
;

469 
Àvñ
 = 
NGX_LOG_CRIT
;

470 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

474 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

475 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

476 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

479  
rc
;

482 i‡(!
of
.
is_fûe
) {

484 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

485 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

486 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

489  
NGX_DECLINED
;

492 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

493 
r
->
Ælow_ønges
 = 1;

495 
°¨t
 = -1;

496 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

497 
mp4
 = 
NULL
;

498 
b
 = 
NULL
;

500 i‡(
r
->
¨gs
.
Àn
) {

502 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

510 
	`ngx_£t_î∫o
(0);

511 
°¨t
 = (Ë(
	`°πod
((*Ë
vÆue
.
d©a
, 
NULL
) * 1000);

513 i‡(
ngx_î∫o
 =0 && 
°¨t
 >= 0) {

514 
r
->
Ælow_ønges
 = 0;

516 
mp4
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_mp4_fûe_t
));

517 i‡(
mp4
 =
NULL
) {

518  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

521 
mp4
->
fûe
.
fd
 = 
of
.fd;

522 
mp4
->
fûe
.
«me
 = 
∑th
;

523 
mp4
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;;

524 
mp4
->
íd
 = 
of
.
size
;

525 
mp4
->
°¨t
 = (
ngx_uöt_t
) start;

526 
mp4
->
ªque°
 = 
r
;

528 
	`ngx_hâp_mp4_¥o˚ss
(
mp4
)) {

530 
NGX_DECLINED
:

531 i‡(
mp4
->
buf„r
) {

532 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

535 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

536 
mp4
 = 
NULL
;

540 
NGX_OK
:

541 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
mp4
->
c⁄ã¡_Àngth
;

545 i‡(
mp4
->
buf„r
) {

546 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

549 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

551  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

557 
log
->
a˘i⁄
 = "sending mp4Åo client";

559 i‡(
˛cf
->
dúe˘io
 <
of
.
size
) {

566 i‡(
	`ngx_dúe˘io_⁄
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

567 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

568 
ngx_dúe˘io_⁄_n
 " \"%s\" faûed", 
∑th
.
d©a
);

571 
of
.
is_dúe˘io
 = 1;

573 i‡(
mp4
) {

574 
mp4
->
fûe
.
dúe˘io
 = 1;

578 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

579 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

581 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

582  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

585 i‡(
mp4
 =
NULL
) {

586 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

587 i‡(
b
 =
NULL
) {

588  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

591 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

592 i‡(
b
->
fûe
 =
NULL
) {

593  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

597 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

599 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

600  
rc
;

603 i‡(
mp4
) {

604  
	`ngx_hâp_ouçut_fûãr
(
r
, 
mp4
->
out
);

607 
b
->
fûe_pos
 = 0;

608 
b
->
fûe_œ°
 = 
of
.
size
;

610 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

611 
b
->
œ°_buf
 = 1;

612 
b
->
œ°_ö_chaö
 = 1;

614 
b
->
fûe
->
fd
 = 
of
.fd;

615 
b
->
fûe
->
«me
 = 
∑th
;

616 
b
->
fûe
->
log
 =Üog;

617 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

619 
out
.
buf
 = 
b
;

620 
out
.
√xt
 = 
NULL
;

622  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

623 
	}
}

626 
ngx_öt_t


627 
	$ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
)

629 
off_t
 
°¨t_off£t
, 
adju°mít
;

630 
ngx_öt_t
 
rc
;

631 
ngx_uöt_t
 
i
, 
j
;

632 
ngx_chaö_t
 **
¥ev
;

633 
ngx_hâp_mp4_åak_t
 *
åak
;

634 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

636 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

637 "mp4 sèπ:%ui", 
mp4
->
°¨t
);

639 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

641 
mp4
->
buf„r_size
 = 
c⁄f
->buffer_size;

643 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_©oms
, mp4->
íd
);

644 i‡(
rc
 !
NGX_OK
) {

645  
rc
;

648 i‡(
mp4
->
åak
.
√…s
 == 0) {

649 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

651 
mp4
->
fûe
.
«me
.
d©a
);

652  
NGX_ERROR
;

655 i‡(
mp4
->
md©_©om
.
buf
 =
NULL
) {

656 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

658 
mp4
->
fûe
.
«me
.
d©a
);

659  
NGX_ERROR
;

662 
¥ev
 = &
mp4
->
out
;

664 i‡(
mp4
->
·yp_©om
.
buf
) {

665 *
¥ev
 = &
mp4
->
·yp_©om
;

666 
¥ev
 = &
mp4
->
·yp_©om
.
√xt
;

669 *
¥ev
 = &
mp4
->
moov_©om
;

670 
¥ev
 = &
mp4
->
moov_©om
.
√xt
;

672 i‡(
mp4
->
mvhd_©om
.
buf
) {

673 
mp4
->
moov_size
 +mp4->
mvhd_©om_buf
.
œ°
 - mp4->mvhd_©om_buf.
pos
;

674 *
¥ev
 = &
mp4
->
mvhd_©om
;

675 
¥ev
 = &
mp4
->
mvhd_©om
.
√xt
;

678 
°¨t_off£t
 = 
mp4
->
íd
;

679 
åak
 = 
mp4
->åak.
ñts
;

681 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

683 i‡(
	`ngx_hâp_mp4_upd©e_°ts_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

684  
NGX_ERROR
;

687 i‡(
	`ngx_hâp_mp4_upd©e_°ss_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

688  
NGX_ERROR
;

691 
	`ngx_hâp_mp4_upd©e_˘ts_©om
(
mp4
, &
åak
[
i
]);

693 i‡(
	`ngx_hâp_mp4_upd©e_°sc_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

694  
NGX_ERROR
;

697 i‡(
	`ngx_hâp_mp4_upd©e_°sz_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

698  
NGX_ERROR
;

701 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

702 i‡(
	`ngx_hâp_mp4_upd©e_co64_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

703  
NGX_ERROR
;

707 i‡(
	`ngx_hâp_mp4_upd©e_°co_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

708  
NGX_ERROR
;

712 
	`ngx_hâp_mp4_upd©e_°bl_©om
(
mp4
, &
åak
[
i
]);

713 
	`ngx_hâp_mp4_upd©e_möf_©om
(
mp4
, &
åak
[
i
]);

714 
åak
[
i
].
size
 +åak[i].
mdhd_size
;

715 
åak
[
i
].
size
 +åak[i].
hdÃ_size
;

716 
	`ngx_hâp_mp4_upd©e_mdü_©om
(
mp4
, &
åak
[
i
]);

717 
åak
[
i
].
size
 +åak[i].
tkhd_size
;

718 
	`ngx_hâp_mp4_upd©e_åak_©om
(
mp4
, &
åak
[
i
]);

720 
mp4
->
moov_size
 +
åak
[
i
].
size
;

722 i‡(
°¨t_off£t
 > 
åak
[
i
].start_offset) {

723 
°¨t_off£t
 = 
åak
[
i
].start_offset;

726 *
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
];

727 
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
√xt
;

729 
j
 = 0; j < 
NGX_HTTP_MP4_LAST_ATOM
 + 1; j++) {

730 i‡(
åak
[
i
].
out
[
j
].
buf
) {

731 *
¥ev
 = &
åak
[
i
].
out
[
j
];

732 
¥ev
 = &
åak
[
i
].
out
[
j
].
√xt
;

737 
mp4
->
moov_size
 += 8;

739 
	`ngx_mp4_£t_32vÆue
(
mp4
->
moov_©om_hódî
, mp4->
moov_size
);

740 
	`ngx_mp4_£t_©om_«me
(
mp4
->
moov_©om_hódî
, 'm', 'o', 'o', 'v');

741 
mp4
->
c⁄ã¡_Àngth
 +mp4->
moov_size
;

743 *
¥ev
 = &
mp4
->
md©_©om
;

745 
adju°mít
 = 
mp4
->
·yp_size
 + mp4->
moov_size


746 + 
	`ngx_hâp_mp4_upd©e_md©_©om
(
mp4
, 
°¨t_off£t
)

747 - 
°¨t_off£t
;

749 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

750 "mp4ádju°mít:%O", 
adju°mít
);

752 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

753 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

754 
	`ngx_hâp_mp4_adju°_co64_©om
(
mp4
, &
åak
[
i
], 
adju°mít
);

756 
	`ngx_hâp_mp4_adju°_°co_©om
(
mp4
, &
åak
[
i
], (
öt32_t
Ë
adju°mít
);

760  
NGX_OK
;

761 
	}
}

765 
u_ch¨
 
	msize
[4];

766 
u_ch¨
 
	m«me
[4];

767 } 
	tngx_mp4_©om_hódî_t
;

770 
u_ch¨
 
	msize
[4];

771 
u_ch¨
 
	m«me
[4];

772 
u_ch¨
 
	msize64
[8];

773 } 
	tngx_mp4_©om_hódî64_t
;

776 
ngx_öt_t


777 
	$ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

778 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
)

780 
off_t
 
íd
;

781 
size_t
 
©om_hódî_size
;

782 
u_ch¨
 *
©om_hódî
, *
©om_«me
;

783 
uöt64_t
 
©om_size
;

784 
ngx_öt_t
 
rc
;

785 
ngx_uöt_t
 
n
;

787 
íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

789 
mp4
->
off£t
 < 
íd
) {

791 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
uöt32_t
)Ë!
NGX_OK
) {

792  
NGX_ERROR
;

795 
©om_hódî
 = 
mp4
->
buf„r_pos
;

796 
©om_size
 = 
	`ngx_mp4_gë_32vÆue
(
©om_hódî
);

797 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

799 i‡(
©om_size
 == 0) {

800 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

802  
NGX_OK
;

805 i‡(
©om_size
 < (
ngx_mp4_©om_hódî_t
)) {

807 i‡(
©om_size
 == 1) {

809 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî64_t
))

810 !
NGX_OK
)

812  
NGX_ERROR
;

816 
©om_hódî
 = 
mp4
->
buf„r_pos
;

817 
©om_size
 = 
	`ngx_mp4_gë_64vÆue
(
©om_hódî
 + 8);

818 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

821 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

823 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

824  
NGX_ERROR
;

828 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî_t
)Ë!
NGX_OK
) {

829  
NGX_ERROR
;

832 
©om_hódî
 = 
mp4
->
buf„r_pos
;

833 
©om_«me
 = 
©om_hódî
 + (
uöt32_t
);

835 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

837 4, 
©om_«me
, 
mp4
->
off£t
, 
©om_size
);

839 i‡(
©om_size
 > (
uöt64_t
Ë(
NGX_MAX_OFF_T_VALUE
 - 
mp4
->
off£t
)

840 || 
mp4
->
off£t
 + (
off_t
Ë
©om_size
 > 
íd
)

842 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

844 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

845  
NGX_ERROR
;

848 
n
 = 0; 
©om
[n].
«me
;Ç++) {

850 i‡(
	`ngx_°∫cmp
(
©om_«me
, 
©om
[
n
].
«me
, 4) == 0) {

852 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_hódî_size
);

854 
rc
 = 
©om
[
n
].
	`h™dÀr
(
mp4
, 
©om_size
 - 
©om_hódî_size
);

855 i‡(
rc
 !
NGX_OK
) {

856  
rc
;

859 
√xt
;

863 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_size
);

865 
√xt
:

869  
NGX_OK
;

870 
	}
}

873 
ngx_öt_t


874 
	$ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
)

876 
ssize_t
 
n
;

878 i‡(
mp4
->
buf„r_pos
 + 
size
 <mp4->
buf„r_íd
) {

879  
NGX_OK
;

882 i‡(
mp4
->
off£t
 + (
off_t
Ëmp4->
buf„r_size
 > mp4->
íd
) {

883 
mp4
->
buf„r_size
 = (
size_t
Ë(mp4->
íd
 - mp4->
off£t
);

886 i‡(
mp4
->
buf„r_size
 < 
size
) {

887 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

888 "\"%s\" mp4 fûêåunˇãd", 
mp4
->
fûe
.
«me
.
d©a
);

889  
NGX_ERROR
;

892 i‡(
mp4
->
buf„r
 =
NULL
) {

893 
mp4
->
buf„r
 = 
	`ngx_∑Œoc
(mp4->
ªque°
->
poﬁ
, mp4->
buf„r_size
);

894 i‡(
mp4
->
buf„r
 =
NULL
) {

895  
NGX_ERROR
;

898 
mp4
->
buf„r_°¨t
 = mp4->
buf„r
;

901 
n
 = 
	`ngx_ªad_fûe
(&
mp4
->
fûe
, mp4->
buf„r_°¨t
, mp4->
buf„r_size
,

902 
mp4
->
off£t
);

904 i‡(
n
 =
NGX_ERROR
) {

905  
NGX_ERROR
;

908 i‡((
size_t
Ë
n
 !
mp4
->
buf„r_size
) {

909 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
mp4
->
fûe
.
log
, 0,

910 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

911 
n
, 
mp4
->
buf„r_size
, mp4->
fûe
.
«me
.
d©a
);

912  
NGX_ERROR
;

915 
mp4
->
buf„r_pos
 = mp4->
buf„r_°¨t
;

916 
mp4
->
buf„r_íd
 = mp4->
buf„r_°¨t
 + mp4->
buf„r_size
;

918  
NGX_OK
;

919 
	}
}

922 
ngx_öt_t


923 
	$ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

925 
u_ch¨
 *
·yp_©om
;

926 
size_t
 
©om_size
;

927 
ngx_buf_t
 *
©om
;

929 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 ftypátom");

931 i‡(
©om_d©a_size
 > 1024

932 || 
	`ngx_mp4_©om_d©a
(
mp4
Ë+ 
©om_d©a_size
 > mp4->
buf„r_íd
)

934 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

936 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

937  
NGX_ERROR
;

940 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

942 
·yp_©om
 = 
	`ngx_∑Œoc
(
mp4
->
ªque°
->
poﬁ
, 
©om_size
);

943 i‡(
·yp_©om
 =
NULL
) {

944  
NGX_ERROR
;

947 
	`ngx_mp4_£t_32vÆue
(
·yp_©om
, 
©om_size
);

948 
	`ngx_mp4_£t_©om_«me
(
·yp_©om
, 'f', 't', 'y', 'p');

954 
	`ngx_mem˝y
(
·yp_©om
 + (
ngx_mp4_©om_hódî_t
),

955 
	`ngx_mp4_©om_d©a
(
mp4
), (
size_t
Ë
©om_d©a_size
);

957 
©om
 = &
mp4
->
·yp_©om_buf
;

958 
©om
->
ãmp‹¨y
 = 1;

959 
©om
->
pos
 = 
·yp_©om
;

960 
©om
->
œ°
 = 
·yp_©om
 + 
©om_size
;

962 
mp4
->
·yp_©om
.
buf
 = 
©om
;

963 
mp4
->
·yp_size
 = 
©om_size
;

964 
mp4
->
c⁄ã¡_Àngth
 = 
©om_size
;

966 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

968  
NGX_OK
;

969 
	}
}

976 
	#NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 (4 * 1024)

	)

978 
ngx_öt_t


979 
	$ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

981 
ngx_öt_t
 
rc
;

982 
ngx_uöt_t
 
no_md©
;

983 
ngx_buf_t
 *
©om
;

984 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

986 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom");

988 
no_md©
 = (
mp4
->
md©_©om
.
buf
 =
NULL
);

990 i‡(
no_md©
 && 
mp4
->
°¨t
 == 0) {

995  
NGX_DECLINED
;

998 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

1000 i‡(
©om_d©a_size
 > 
mp4
->
buf„r_size
) {

1002 i‡(
©om_d©a_size
 > 
c⁄f
->
max_buf„r_size
) {

1003 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1006 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1007  
NGX_ERROR
;

1010 
	`ngx_p‰ì
(
mp4
->
ªque°
->
poﬁ
, mp4->
buf„r
);

1011 
mp4
->
buf„r
 = 
NULL
;

1012 
mp4
->
buf„r_pos
 = 
NULL
;

1013 
mp4
->
buf„r_íd
 = 
NULL
;

1015 
mp4
->
buf„r_size
 = (
size_t
Ë
©om_d©a_size


1016 + 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 * 
no_md©
;

1019 
mp4
->
åak
.
ñts
 = &mp4->
åaks
;

1020 
mp4
->
åak
.
size
 = (
ngx_hâp_mp4_åak_t
);

1021 
mp4
->
åak
.
«Œoc
 = 2;

1022 
mp4
->
åak
.
poﬁ
 = mp4->
ªque°
->pool;

1024 
©om
 = &
mp4
->
moov_©om_buf
;

1025 
©om
->
ãmp‹¨y
 = 1;

1026 
©om
->
pos
 = 
mp4
->
moov_©om_hódî
;

1027 
©om
->
œ°
 = 
mp4
->
moov_©om_hódî
 + 8;

1029 
mp4
->
moov_©om
.
buf
 = &mp4->
moov_©om_buf
;

1031 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_moov_©oms
, 
©om_d©a_size
);

1033 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom done");

1035 i‡(
no_md©
) {

1036 
mp4
->
buf„r_°¨t
 = mp4->
buf„r_pos
;

1037 
mp4
->
buf„r_size
 = 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
;

1041 
mp4
->
off£t
 = mp4->
íd
;

1044  
rc
;

1045 
	}
}

1048 
ngx_öt_t


1049 
	$ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1051 
ngx_buf_t
 *
d©a
;

1053 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdatátom");

1055 
d©a
 = &
mp4
->
md©_d©a_buf
;

1056 
d©a
->
fûe
 = &
mp4
->file;

1057 
d©a
->
ö_fûe
 = 1;

1058 
d©a
->
œ°_buf
 = 1;

1059 
d©a
->
œ°_ö_chaö
 = 1;

1060 
d©a
->
fûe_œ°
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1062 
mp4
->
md©_©om
.
buf
 = &mp4->
md©_©om_buf
;

1063 
mp4
->
md©_©om
.
√xt
 = &mp4->
md©_d©a
;

1064 
mp4
->
md©_d©a
.
buf
 = 
d©a
;

1066 i‡(
mp4
->
åak
.
√…s
) {

1068 
mp4
->
off£t
 = mp4->
íd
;

1071 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1074  
NGX_OK
;

1075 
	}
}

1078 
size_t


1079 
	$ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
off_t
 
°¨t_off£t
)

1081 
off_t
 
©om_d©a_size
;

1082 
u_ch¨
 *
©om_hódî
;

1083 
uöt32_t
 
©om_hódî_size
;

1084 
uöt64_t
 
©om_size
;

1085 
ngx_buf_t
 *
©om
;

1087 
©om_d©a_size
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
 - 
°¨t_off£t
;

1088 
mp4
->
md©_d©a
.
buf
->
fûe_pos
 = 
°¨t_off£t
;

1090 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1091 "md©Çew off£à@%O:%O", 
°¨t_off£t
, 
©om_d©a_size
);

1093 
©om_hódî
 = 
mp4
->
md©_©om_hódî
;

1095 i‡((
uöt64_t
Ë
©om_d©a_size
 > 0xffffffff) {

1096 
©om_size
 = 1;

1097 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

1098 
	`ngx_mp4_£t_64vÆue
(
©om_hódî
 + (
ngx_mp4_©om_hódî_t
),

1099 (
ngx_mp4_©om_hódî64_t
Ë+ 
©om_d©a_size
);

1101 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ 
©om_d©a_size
;

1102 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

1105 
mp4
->
c⁄ã¡_Àngth
 +
©om_hódî_size
 + 
©om_d©a_size
;

1107 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1108 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'a', 't');

1110 
©om
 = &
mp4
->
md©_©om_buf
;

1111 
©om
->
ãmp‹¨y
 = 1;

1112 
©om
->
pos
 = 
©om_hódî
;

1113 
©om
->
œ°
 = 
©om_hódî
 + 
©om_hódî_size
;

1115  
©om_hódî_size
;

1116 
	}
}

1120 
u_ch¨
 
	msize
[4];

1121 
u_ch¨
 
	m«me
[4];

1122 
u_ch¨
 
	mvîsi⁄
[1];

1123 
u_ch¨
 
	mÊags
[3];

1124 
u_ch¨
 
	m¸óti⁄_time
[4];

1125 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1126 
u_ch¨
 
	mtimesˇÀ
[4];

1127 
u_ch¨
 
	mduøti⁄
[4];

1128 
u_ch¨
 
	møã
[4];

1129 
u_ch¨
 
	mvﬁume
[2];

1130 
u_ch¨
 
	mª£rved
[10];

1131 
u_ch¨
 
	mm©rix
[36];

1132 
u_ch¨
 
	m¥evõw_time
[4];

1133 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1134 
u_ch¨
 
	mpo°î_time
[4];

1135 
u_ch¨
 
	m£À˘i⁄_time
[4];

1136 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1137 
u_ch¨
 
	mcuºít_time
[4];

1138 
u_ch¨
 
	m√xt_åack_id
[4];

1139 } 
	tngx_mp4_mvhd_©om_t
;

1142 
u_ch¨
 
	msize
[4];

1143 
u_ch¨
 
	m«me
[4];

1144 
u_ch¨
 
	mvîsi⁄
[1];

1145 
u_ch¨
 
	mÊags
[3];

1146 
u_ch¨
 
	m¸óti⁄_time
[8];

1147 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1148 
u_ch¨
 
	mtimesˇÀ
[4];

1149 
u_ch¨
 
	mduøti⁄
[8];

1150 
u_ch¨
 
	møã
[4];

1151 
u_ch¨
 
	mvﬁume
[2];

1152 
u_ch¨
 
	mª£rved
[10];

1153 
u_ch¨
 
	mm©rix
[36];

1154 
u_ch¨
 
	m¥evõw_time
[4];

1155 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1156 
u_ch¨
 
	mpo°î_time
[4];

1157 
u_ch¨
 
	m£À˘i⁄_time
[4];

1158 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1159 
u_ch¨
 
	mcuºít_time
[4];

1160 
u_ch¨
 
	m√xt_åack_id
[4];

1161 } 
	tngx_mp4_mvhd64_©om_t
;

1164 
ngx_öt_t


1165 
	$ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1167 
u_ch¨
 *
©om_hódî
;

1168 
size_t
 
©om_size
;

1169 
uöt32_t
 
timesˇÀ
;

1170 
uöt64_t
 
duøti⁄
;

1171 
ngx_buf_t
 *
©om
;

1172 
ngx_mp4_mvhd_©om_t
 *
mvhd_©om
;

1173 
ngx_mp4_mvhd64_©om_t
 *
mvhd64_©om
;

1175 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mvhdátom");

1177 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1178 
mvhd_©om
 = (
ngx_mp4_mvhd_©om_t
 *Ë
©om_hódî
;

1179 
mvhd64_©om
 = (
ngx_mp4_mvhd64_©om_t
 *Ë
©om_hódî
;

1180 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'v', 'h', 'd');

1182 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd_©om_t
Ë> 
©om_d©a_size
) {

1183 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1184 "\"%s\" mp4 mvhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1185  
NGX_ERROR
;

1188 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1190 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->timescale);

1191 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->duration);

1196 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd64_©om_t
Ë> 
©om_d©a_size
) {

1197 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1199 
mp4
->
fûe
.
«me
.
d©a
);

1200  
NGX_ERROR
;

1203 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd64_©om
->timescale);

1204 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mvhd64_©om
->duration);

1207 
mp4
->
timesˇÀ
 =Åimescale;

1209 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1211 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1213 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1215 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1217 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1219 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1220 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
size
, 
©om_size
);

1222 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1223 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
duøti⁄
, duration);

1226 
	`ngx_mp4_£t_64vÆue
(
mvhd64_©om
->
duøti⁄
, duration);

1229 
©om
 = &
mp4
->
mvhd_©om_buf
;

1230 
©om
->
ãmp‹¨y
 = 1;

1231 
©om
->
pos
 = 
©om_hódî
;

1232 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1234 
mp4
->
mvhd_©om
.
buf
 = 
©om
;

1236 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1238  
NGX_OK
;

1239 
	}
}

1242 
ngx_öt_t


1243 
	$ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1245 
u_ch¨
 *
©om_hódî
, *
©om_íd
;

1246 
off_t
 
©om_fûe_íd
;

1247 
ngx_öt_t
 
rc
;

1248 
ngx_buf_t
 *
©om
;

1249 
ngx_hâp_mp4_åak_t
 *
åak
;

1251 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Årakátom");

1253 
åak
 = 
	`ngx_¨øy_push
(&
mp4
->trak);

1254 i‡(
åak
 =
NULL
) {

1255  
NGX_ERROR
;

1258 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1260 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1261 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 't', 'r', 'a', 'k');

1263 
©om
 = &
åak
->
åak_©om_buf
;

1264 
©om
->
ãmp‹¨y
 = 1;

1265 
©om
->
pos
 = 
©om_hódî
;

1266 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1268 
åak
->
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
buf
 = 
©om
;

1270 
©om_íd
 = 
mp4
->
buf„r_pos
 + 
©om_d©a_size
;

1271 
©om_fûe_íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1273 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_åak_©oms
, 
©om_d©a_size
);

1275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1276 "mp4Åøkátom: %i", 
rc
);

1278 i‡(
rc
 =
NGX_DECLINED
) {

1280 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1281 
mp4
->
åak
.
√…s
--;

1282 
mp4
->
buf„r_pos
 = 
©om_íd
;

1283 
mp4
->
off£t
 = 
©om_fûe_íd
;

1284  
NGX_OK
;

1287  
rc
;

1288 
	}
}

1292 
	$ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1293 
ngx_hâp_mp4_åak_t
 *
åak
)

1295 
ngx_buf_t
 *
©om
;

1297 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1298 
©om
 = &
åak
->
åak_©om_buf
;

1299 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1300 
	}
}

1303 
ngx_öt_t


1304 
	$ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1306 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1308 
mp4
->
fûe
.
«me
.
d©a
);

1310  
NGX_ERROR
;

1311 
	}
}

1315 
u_ch¨
 
	msize
[4];

1316 
u_ch¨
 
	m«me
[4];

1317 
u_ch¨
 
	mvîsi⁄
[1];

1318 
u_ch¨
 
	mÊags
[3];

1319 
u_ch¨
 
	m¸óti⁄_time
[4];

1320 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1321 
u_ch¨
 
	måack_id
[4];

1322 
u_ch¨
 
	mª£rved1
[4];

1323 
u_ch¨
 
	mduøti⁄
[4];

1324 
u_ch¨
 
	mª£rved2
[8];

1325 
u_ch¨
 
	mœyî
[2];

1326 
u_ch¨
 
	mgroup
[2];

1327 
u_ch¨
 
	mvﬁume
[2];

1328 
u_ch¨
 
	mªvîved3
[2];

1329 
u_ch¨
 
	mm©rix
[36];

1330 
u_ch¨
 
	mwidth
[4];

1331 
u_ch¨
 
	mheigth
[4];

1332 } 
	tngx_mp4_tkhd_©om_t
;

1335 
u_ch¨
 
	msize
[4];

1336 
u_ch¨
 
	m«me
[4];

1337 
u_ch¨
 
	mvîsi⁄
[1];

1338 
u_ch¨
 
	mÊags
[3];

1339 
u_ch¨
 
	m¸óti⁄_time
[8];

1340 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1341 
u_ch¨
 
	måack_id
[4];

1342 
u_ch¨
 
	mª£rved1
[4];

1343 
u_ch¨
 
	mduøti⁄
[8];

1344 
u_ch¨
 
	mª£rved2
[8];

1345 
u_ch¨
 
	mœyî
[2];

1346 
u_ch¨
 
	mgroup
[2];

1347 
u_ch¨
 
	mvﬁume
[2];

1348 
u_ch¨
 
	mªvîved3
[2];

1349 
u_ch¨
 
	mm©rix
[36];

1350 
u_ch¨
 
	mwidth
[4];

1351 
u_ch¨
 
	mheigth
[4];

1352 } 
	tngx_mp4_tkhd64_©om_t
;

1355 
ngx_öt_t


1356 
	$ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1358 
u_ch¨
 *
©om_hódî
;

1359 
size_t
 
©om_size
;

1360 
uöt64_t
 
duøti⁄
;

1361 
ngx_buf_t
 *
©om
;

1362 
ngx_hâp_mp4_åak_t
 *
åak
;

1363 
ngx_mp4_tkhd_©om_t
 *
tkhd_©om
;

1364 
ngx_mp4_tkhd64_©om_t
 *
tkhd64_©om
;

1366 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Åkhdátom");

1368 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1369 
tkhd_©om
 = (
ngx_mp4_tkhd_©om_t
 *Ë
©om_hódî
;

1370 
tkhd64_©om
 = (
ngx_mp4_tkhd64_©om_t
 *Ë
©om_hódî
;

1371 
	`ngx_mp4_£t_©om_«me
(
tkhd_©om
, 't', 'k', 'h', 'd');

1373 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd_©om_t
Ë> 
©om_d©a_size
) {

1374 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1375 "\"%s\" mp4ÅkhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1376  
NGX_ERROR
;

1379 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1381 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
tkhd_©om
->duration);

1386 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd64_©om_t
Ë> 
©om_d©a_size
) {

1387 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1389 
mp4
->
fûe
.
«me
.
d©a
);

1390  
NGX_ERROR
;

1393 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
tkhd64_©om
->duration);

1396 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1398 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1400 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * mp4->
timesˇÀ
 / 1000;

1402 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1404 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1406 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1408 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1409 
åak
->
tkhd_size
 = 
©om_size
;

1411 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
size
, 
©om_size
);

1413 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1414 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
duøti⁄
, duration);

1417 
	`ngx_mp4_£t_64vÆue
(
tkhd64_©om
->
duøti⁄
, duration);

1420 
©om
 = &
åak
->
tkhd_©om_buf
;

1421 
©om
->
ãmp‹¨y
 = 1;

1422 
©om
->
pos
 = 
©om_hódî
;

1423 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1425 
åak
->
out
[
NGX_HTTP_MP4_TKHD_ATOM
].
buf
 = 
©om
;

1427 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1429  
NGX_OK
;

1430 
	}
}

1433 
ngx_öt_t


1434 
	$ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1436 
u_ch¨
 *
©om_hódî
;

1437 
ngx_buf_t
 *
©om
;

1438 
ngx_hâp_mp4_åak_t
 *
åak
;

1440 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process mdiaátom");

1442 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1443 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'i', 'a');

1445 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1447 
©om
 = &
åak
->
mdü_©om_buf
;

1448 
©om
->
ãmp‹¨y
 = 1;

1449 
©om
->
pos
 = 
©om_hódî
;

1450 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1452 
åak
->
out
[
NGX_HTTP_MP4_MDIA_ATOM
].
buf
 = 
©om
;

1454  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_mdü_©oms
, 
©om_d©a_size
);

1455 
	}
}

1459 
	$ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1460 
ngx_hâp_mp4_åak_t
 *
åak
)

1462 
ngx_buf_t
 *
©om
;

1464 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1465 
©om
 = &
åak
->
mdü_©om_buf
;

1466 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1467 
	}
}

1471 
u_ch¨
 
	msize
[4];

1472 
u_ch¨
 
	m«me
[4];

1473 
u_ch¨
 
	mvîsi⁄
[1];

1474 
u_ch¨
 
	mÊags
[3];

1475 
u_ch¨
 
	m¸óti⁄_time
[4];

1476 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1477 
u_ch¨
 
	mtimesˇÀ
[4];

1478 
u_ch¨
 
	mduøti⁄
[4];

1479 
u_ch¨
 
	mœnguage
[2];

1480 
u_ch¨
 
	mquÆôy
[2];

1481 } 
	tngx_mp4_mdhd_©om_t
;

1484 
u_ch¨
 
	msize
[4];

1485 
u_ch¨
 
	m«me
[4];

1486 
u_ch¨
 
	mvîsi⁄
[1];

1487 
u_ch¨
 
	mÊags
[3];

1488 
u_ch¨
 
	m¸óti⁄_time
[8];

1489 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1490 
u_ch¨
 
	mtimesˇÀ
[4];

1491 
u_ch¨
 
	mduøti⁄
[8];

1492 
u_ch¨
 
	mœnguage
[2];

1493 
u_ch¨
 
	mquÆôy
[2];

1494 } 
	tngx_mp4_mdhd64_©om_t
;

1497 
ngx_öt_t


1498 
	$ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1500 
u_ch¨
 *
©om_hódî
;

1501 
size_t
 
©om_size
;

1502 
uöt32_t
 
timesˇÀ
;

1503 
uöt64_t
 
duøti⁄
;

1504 
ngx_buf_t
 *
©om
;

1505 
ngx_hâp_mp4_åak_t
 *
åak
;

1506 
ngx_mp4_mdhd_©om_t
 *
mdhd_©om
;

1507 
ngx_mp4_mdhd64_©om_t
 *
mdhd64_©om
;

1509 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdhdátom");

1511 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1512 
mdhd_©om
 = (
ngx_mp4_mdhd_©om_t
 *Ë
©om_hódî
;

1513 
mdhd64_©om
 = (
ngx_mp4_mdhd64_©om_t
 *Ë
©om_hódî
;

1514 
	`ngx_mp4_£t_©om_«me
(
mdhd_©om
, 'm', 'd', 'h', 'd');

1516 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd_©om_t
Ë> 
©om_d©a_size
) {

1517 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1518 "\"%s\" mp4 mdhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1519  
NGX_ERROR
;

1522 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1524 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->timescale);

1525 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->duration);

1530 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd64_©om_t
Ë> 
©om_d©a_size
) {

1531 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1533 
mp4
->
fûe
.
«me
.
d©a
);

1534  
NGX_ERROR
;

1537 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd64_©om
->timescale);

1538 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mdhd64_©om
->duration);

1541 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1543 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1545 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1547 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1549 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1551 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1553 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1554 
åak
->
mdhd_size
 = 
©om_size
;

1555 
åak
->
timesˇÀ
 =Åimescale;

1557 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
size
, 
©om_size
);

1559 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1560 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
duøti⁄
, duration);

1563 
	`ngx_mp4_£t_64vÆue
(
mdhd64_©om
->
duøti⁄
, duration);

1566 
©om
 = &
åak
->
mdhd_©om_buf
;

1567 
©om
->
ãmp‹¨y
 = 1;

1568 
©om
->
pos
 = 
©om_hódî
;

1569 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1571 
åak
->
out
[
NGX_HTTP_MP4_MDHD_ATOM
].
buf
 = 
©om
;

1573 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1575  
NGX_OK
;

1576 
	}
}

1579 
ngx_öt_t


1580 
	$ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1582 
u_ch¨
 *
©om_hódî
;

1583 
size_t
 
©om_size
;

1584 
ngx_buf_t
 *
©om
;

1585 
ngx_hâp_mp4_åak_t
 *
åak
;

1587 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 hdlrátom");

1589 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1590 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1591 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1592 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'h', 'd', 'l', 'r');

1594 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1596 
©om
 = &
åak
->
hdÃ_©om_buf
;

1597 
©om
->
ãmp‹¨y
 = 1;

1598 
©om
->
pos
 = 
©om_hódî
;

1599 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1601 
åak
->
hdÃ_size
 = 
©om_size
;

1602 
åak
->
out
[
NGX_HTTP_MP4_HDLR_ATOM
].
buf
 = 
©om
;

1604 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1606  
NGX_OK
;

1607 
	}
}

1610 
ngx_öt_t


1611 
	$ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1613 
u_ch¨
 *
©om_hódî
;

1614 
ngx_buf_t
 *
©om
;

1615 
ngx_hâp_mp4_åak_t
 *
åak
;

1617 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process minfátom");

1619 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1620 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'i', 'n', 'f');

1622 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1624 
©om
 = &
åak
->
möf_©om_buf
;

1625 
©om
->
ãmp‹¨y
 = 1;

1626 
©om
->
pos
 = 
©om_hódî
;

1627 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1629 
åak
->
out
[
NGX_HTTP_MP4_MINF_ATOM
].
buf
 = 
©om
;

1631  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_möf_©oms
, 
©om_d©a_size
);

1632 
	}
}

1636 
	$ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1637 
ngx_hâp_mp4_åak_t
 *
åak
)

1639 
ngx_buf_t
 *
©om
;

1641 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
)

1642 + 
åak
->
vmhd_size


1643 + 
åak
->
smhd_size


1644 + 
åak
->
döf_size
;

1645 
©om
 = &
åak
->
möf_©om_buf
;

1646 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1647 
	}
}

1650 
ngx_öt_t


1651 
	$ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1653 
u_ch¨
 *
©om_hódî
;

1654 
size_t
 
©om_size
;

1655 
ngx_buf_t
 *
©om
;

1656 
ngx_hâp_mp4_åak_t
 *
åak
;

1658 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 vmhdátom");

1660 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1661 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1662 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1663 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'v', 'm', 'h', 'd');

1665 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1667 
©om
 = &
åak
->
vmhd_©om_buf
;

1668 
©om
->
ãmp‹¨y
 = 1;

1669 
©om
->
pos
 = 
©om_hódî
;

1670 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1672 
åak
->
vmhd_size
 +
©om_size
;

1673 
åak
->
out
[
NGX_HTTP_MP4_VMHD_ATOM
].
buf
 = 
©om
;

1675 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1677  
NGX_OK
;

1678 
	}
}

1681 
ngx_öt_t


1682 
	$ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1684 
u_ch¨
 *
©om_hódî
;

1685 
size_t
 
©om_size
;

1686 
ngx_buf_t
 *
©om
;

1687 
ngx_hâp_mp4_åak_t
 *
åak
;

1689 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 smhdátom");

1691 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1692 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1693 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1694 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 'm', 'h', 'd');

1696 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1698 
©om
 = &
åak
->
smhd_©om_buf
;

1699 
©om
->
ãmp‹¨y
 = 1;

1700 
©om
->
pos
 = 
©om_hódî
;

1701 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1703 
åak
->
vmhd_size
 +
©om_size
;

1704 
åak
->
out
[
NGX_HTTP_MP4_SMHD_ATOM
].
buf
 = 
©om
;

1706 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1708  
NGX_OK
;

1709 
	}
}

1712 
ngx_öt_t


1713 
	$ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1715 
u_ch¨
 *
©om_hódî
;

1716 
size_t
 
©om_size
;

1717 
ngx_buf_t
 *
©om
;

1718 
ngx_hâp_mp4_åak_t
 *
åak
;

1720 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 dinfátom");

1722 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1723 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1724 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1725 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'd', 'i', 'n', 'f');

1727 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1729 
©om
 = &
åak
->
döf_©om_buf
;

1730 
©om
->
ãmp‹¨y
 = 1;

1731 
©om
->
pos
 = 
©om_hódî
;

1732 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1734 
åak
->
döf_size
 +
©om_size
;

1735 
åak
->
out
[
NGX_HTTP_MP4_DINF_ATOM
].
buf
 = 
©om
;

1737 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1739  
NGX_OK
;

1740 
	}
}

1743 
ngx_öt_t


1744 
	$ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1746 
u_ch¨
 *
©om_hódî
;

1747 
ngx_buf_t
 *
©om
;

1748 
ngx_hâp_mp4_åak_t
 *
åak
;

1750 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process stblátom");

1752 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1753 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 't', 'b', 'l');

1755 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1757 
©om
 = &
åak
->
°bl_©om_buf
;

1758 
©om
->
ãmp‹¨y
 = 1;

1759 
©om
->
pos
 = 
©om_hódî
;

1760 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1762 
åak
->
out
[
NGX_HTTP_MP4_STBL_ATOM
].
buf
 = 
©om
;

1764  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_°bl_©oms
, 
©om_d©a_size
);

1765 
	}
}

1769 
	$ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1770 
ngx_hâp_mp4_åak_t
 *
åak
)

1772 
ngx_buf_t
 *
©om
;

1774 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1775 
©om
 = &
åak
->
°bl_©om_buf
;

1776 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1777 
	}
}

1781 
u_ch¨
 
	msize
[4];

1782 
u_ch¨
 
	m«me
[4];

1783 
u_ch¨
 
	mvîsi⁄
[1];

1784 
u_ch¨
 
	mÊags
[3];

1785 
u_ch¨
 
	míåõs
[4];

1787 
u_ch¨
 
	mmedü_size
[4];

1788 
u_ch¨
 
	mmedü_«me
[4];

1789 } 
	tngx_mp4_°sd_©om_t
;

1792 
ngx_öt_t


1793 
	$ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1795 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
;

1796 
size_t
 
©om_size
;

1797 
ngx_buf_t
 *
©om
;

1798 
ngx_mp4_°sd_©om_t
 *
°sd_©om
;

1799 
ngx_hâp_mp4_åak_t
 *
åak
;

1803 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stsdátom");

1805 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1806 
°sd_©om
 = (
ngx_mp4_°sd_©om_t
 *Ë
©om_hódî
;

1807 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1808 
©om_èbÀ
 = 
©om_hódî
 + 
©om_size
;

1809 
	`ngx_mp4_£t_32vÆue
(
°sd_©om
->
size
, 
©om_size
);

1810 
	`ngx_mp4_£t_©om_«me
(
°sd_©om
, 's', 't', 's', 'd');

1812 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sd_©om_t
Ë> 
©om_d©a_size
) {

1813 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1814 "\"%s\" mp4 stsdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1815  
NGX_ERROR
;

1818 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1820 
	`ngx_mp4_gë_32vÆue
(
°sd_©om
->
íåõs
),

1821 4, 
°sd_©om
->
medü_«me
);

1825 i‡(
	`ngx_°∫cmp
(
°sd_©om
->
medü_«me
, "avc1", 4) != 0

1826 && 
	`ngx_°∫cmp
(
°sd_©om
->
medü_«me
, "mp4a", 4) != 0)

1828  
NGX_DECLINED
;

1831 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1833 
©om
 = &
åak
->
°sd_©om_buf
;

1834 
©om
->
ãmp‹¨y
 = 1;

1835 
©om
->
pos
 = 
©om_hódî
;

1836 
©om
->
œ°
 = 
©om_èbÀ
;

1838 
åak
->
out
[
NGX_HTTP_MP4_STSD_ATOM
].
buf
 = 
©om
;

1839 
åak
->
size
 +
©om_size
;

1841 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1843  
NGX_OK
;

1844 
	}
}

1848 
u_ch¨
 
	msize
[4];

1849 
u_ch¨
 
	m«me
[4];

1850 
u_ch¨
 
	mvîsi⁄
[1];

1851 
u_ch¨
 
	mÊags
[3];

1852 
u_ch¨
 
	míåõs
[4];

1853 } 
	tngx_mp4_°ts_©om_t
;

1856 
u_ch¨
 
	mcou¡
[4];

1857 
u_ch¨
 
	mduøti⁄
[4];

1858 } 
	tngx_mp4_°ts_íåy_t
;

1861 
ngx_öt_t


1862 
	$ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1864 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

1865 
uöt32_t
 
íåõs
;

1866 
ngx_buf_t
 *
©om
, *
d©a
;

1867 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

1868 
ngx_hâp_mp4_åak_t
 *
åak
;

1872 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 sttsátom");

1874 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1875 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om_hódî
;

1876 
	`ngx_mp4_£t_©om_«me
(
°ts_©om
, 's', 't', 't', 's');

1878 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
Ë> 
©om_d©a_size
) {

1879 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1880 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1881  
NGX_ERROR
;

1884 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ts_©om
->entries);

1886 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1887 "mp4Åime-to-ßm∂êíåõs:%uD", 
íåõs
);

1889 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
)

1890 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
Ë> 
©om_d©a_size
)

1892 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1893 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1894  
NGX_ERROR
;

1897 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°ts_©om_t
);

1898 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
);

1900 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1901 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

1903 
©om
 = &
åak
->
°ts_©om_buf
;

1904 
©om
->
ãmp‹¨y
 = 1;

1905 
©om
->
pos
 = 
©om_hódî
;

1906 
©om
->
œ°
 = 
©om_èbÀ
;

1908 
d©a
 = &
åak
->
°ts_d©a_buf
;

1909 
d©a
->
ãmp‹¨y
 = 1;

1910 
d©a
->
pos
 = 
©om_èbÀ
;

1911 
d©a
->
œ°
 = 
©om_íd
;

1913 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
 = 
©om
;

1914 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
 = 
d©a
;

1916 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1918  
NGX_OK
;

1919 
	}
}

1922 
ngx_öt_t


1923 
	$ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1924 
ngx_hâp_mp4_åak_t
 *
åak
)

1926 
size_t
 
©om_size
;

1927 
uöt32_t
 
íåõs
, 
cou¡
, 
duøti⁄
;

1928 
uöt64_t
 
°¨t_time
;

1929 
ngx_buf_t
 *
©om
, *
d©a
;

1930 
ngx_uöt_t
 
°¨t_ßm∂e
;

1931 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

1932 
ngx_mp4_°ts_íåy_t
 *
íåy
, *
íd
;

1939 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1942 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

1944 i‡(
d©a
 =
NULL
) {

1945 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1947 
mp4
->
fûe
.
«me
.
d©a
);

1948  
NGX_ERROR
;

1951 
íåõs
 = 
åak
->
time_to_ßm∂e_íåõs
;

1952 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
åak
->
timesˇÀ
 / 1000;

1954 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1955 "time-to-ßm∂ê°¨t_time:%uL", 
°¨t_time
);

1957 
°¨t_ßm∂e
 = 0;

1958 
íåy
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
pos
;

1959 
íd
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
œ°
;

1961 
íåy
 < 
íd
) {

1962 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

1963 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->duration);

1965 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1966 "cou¡:%uD, duøti⁄:%uD", 
cou¡
, 
duøti⁄
);

1968 i‡(
°¨t_time
 < (
uöt64_t
Ë
cou¡
 * 
duøti⁄
) {

1969 
°¨t_ßm∂e
 +(
ngx_uöt_t
Ë(
°¨t_time
 / 
duøti⁄
);

1970 
cou¡
 -(
uöt32_t
Ë(
°¨t_time
 / 
duøti⁄
);

1971 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, count);

1972 
found
;

1975 
°¨t_ßm∂e
 +
cou¡
;

1976 
°¨t_time
 -
cou¡
 * 
duøti⁄
;

1977 
íåõs
--;

1978 
íåy
++;

1981 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1983 
mp4
->
fûe
.
«me
.
d©a
);

1985  
NGX_ERROR
;

1987 
found
:

1989 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1990 "°¨t_ßm∂e:%ui,Çew cou¡:%uD", 
°¨t_ßm∂e
, 
cou¡
);

1992 
åak
->
°¨t_ßm∂e
 = start_sample;

1994 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

1995 
©om_size
 = (
ngx_mp4_°ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

1996 
åak
->
size
 +
©om_size
;

1998 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
;

1999 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om
->
pos
;

2000 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
size
, 
©om_size
);

2001 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
íåõs
,Éntries);

2003  
NGX_OK
;

2004 
	}
}

2008 
u_ch¨
 
	msize
[4];

2009 
u_ch¨
 
	m«me
[4];

2010 
u_ch¨
 
	mvîsi⁄
[1];

2011 
u_ch¨
 
	mÊags
[3];

2012 
u_ch¨
 
	míåõs
[4];

2013 } 
	tngx_hâp_mp4_°ss_©om_t
;

2016 
ngx_öt_t


2017 
	$ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2019 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2020 
uöt32_t
 
íåõs
;

2021 
ngx_buf_t
 *
©om
, *
d©a
;

2022 
ngx_hâp_mp4_åak_t
 *
åak
;

2023 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2027 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stssátom");

2029 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2030 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om_hódî
;

2031 
	`ngx_mp4_£t_©om_«me
(
°ss_©om
, 's', 't', 's', 's');

2033 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
Ë> 
©om_d©a_size
) {

2034 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2035 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2036  
NGX_ERROR
;

2039 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ss_©om
->entries);

2041 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2042 "syn¯ßm∂êíåõs:%uD", 
íåõs
);

2044 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2045 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2047 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_hâp_mp4_°ss_©om_t
);

2049 
©om
 = &
åak
->
°ss_©om_buf
;

2050 
©om
->
ãmp‹¨y
 = 1;

2051 
©om
->
pos
 = 
©om_hódî
;

2052 
©om
->
œ°
 = 
©om_èbÀ
;

2054 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
)

2055 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2057 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2058 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2059  
NGX_ERROR
;

2062 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2064 
d©a
 = &
åak
->
°ss_d©a_buf
;

2065 
d©a
->
ãmp‹¨y
 = 1;

2066 
d©a
->
pos
 = 
©om_èbÀ
;

2067 
d©a
->
œ°
 = 
©om_íd
;

2069 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
 = 
©om
;

2070 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
d©a
;

2072 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2074  
NGX_OK
;

2075 
	}
}

2078 
ngx_öt_t


2079 
	$ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2080 
ngx_hâp_mp4_åak_t
 *
åak
)

2082 
size_t
 
©om_size
;

2083 
uöt32_t
 
íåõs
, 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2084 
ngx_buf_t
 *
©om
, *
d©a
;

2085 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2093 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2096 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2098 i‡(
d©a
 =
NULL
) {

2099  
NGX_OK
;

2103 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2104 
íåõs
 = 
åak
->
sync_ßm∂es_íåõs
;

2106 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2107 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2109 
íåy
 < 
íd
) {

2110 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2112 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2113 "°¨t:%uD, sync:%uD", 
°¨t_ßm∂e
, 
ßm∂e
);

2115 i‡(
ßm∂e
 >
°¨t_ßm∂e
) {

2116 
found
;

2119 
íåõs
--;

2120 
íåy
++;

2123 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2125 
mp4
->
fûe
.
«me
.
d©a
);

2127  
NGX_ERROR
;

2129 
found
:

2131 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2133 
°¨t_ßm∂e
 = 
åak
->start_sample;

2135 
íåy
 < 
íd
) {

2136 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2137 
ßm∂e
 -
°¨t_ßm∂e
;

2138 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
ßm∂e
);

2139 
íåy
++;

2142 
©om_size
 = (
ngx_hâp_mp4_°ss_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2143 
åak
->
size
 +
©om_size
;

2145 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
;

2146 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om
->
pos
;

2148 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
size
, 
©om_size
);

2149 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
íåõs
,Éntries);

2151  
NGX_OK
;

2152 
	}
}

2156 
u_ch¨
 
	msize
[4];

2157 
u_ch¨
 
	m«me
[4];

2158 
u_ch¨
 
	mvîsi⁄
[1];

2159 
u_ch¨
 
	mÊags
[3];

2160 
u_ch¨
 
	míåõs
[4];

2161 } 
	tngx_mp4_˘ts_©om_t
;

2164 
u_ch¨
 
	mcou¡
[4];

2165 
u_ch¨
 
	moff£t
[4];

2166 } 
	tngx_mp4_˘ts_íåy_t
;

2169 
ngx_öt_t


2170 
	$ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2172 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2173 
uöt32_t
 
íåõs
;

2174 
ngx_buf_t
 *
©om
, *
d©a
;

2175 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2176 
ngx_hâp_mp4_åak_t
 *
åak
;

2180 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 cttsátom");

2182 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2183 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om_hódî
;

2184 
	`ngx_mp4_£t_©om_«me
(
˘ts_©om
, 'c', 't', 't', 's');

2186 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
Ë> 
©om_d©a_size
) {

2187 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2188 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2189  
NGX_ERROR
;

2192 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
˘ts_©om
->entries);

2194 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2195 "composôi⁄ off£àíåõs:%uD", 
íåõs
);

2197 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2198 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2200 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_˘ts_©om_t
);

2202 
©om
 = &
åak
->
˘ts_©om_buf
;

2203 
©om
->
ãmp‹¨y
 = 1;

2204 
©om
->
pos
 = 
©om_hódî
;

2205 
©om
->
œ°
 = 
©om_èbÀ
;

2207 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
)

2208 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
Ë> 
©om_d©a_size
)

2210 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2211 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2212  
NGX_ERROR
;

2215 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
);

2217 
d©a
 = &
åak
->
˘ts_d©a_buf
;

2218 
d©a
->
ãmp‹¨y
 = 1;

2219 
d©a
->
pos
 = 
©om_èbÀ
;

2220 
d©a
->
œ°
 = 
©om_íd
;

2222 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
©om
;

2223 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
d©a
;

2225 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2227  
NGX_OK
;

2228 
	}
}

2232 
	$ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2233 
ngx_hâp_mp4_åak_t
 *
åak
)

2235 
size_t
 
©om_size
;

2236 
uöt32_t
 
íåõs
, 
cou¡
, 
°¨t_ßm∂e
;

2237 
ngx_buf_t
 *
©om
, *
d©a
;

2238 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2239 
ngx_mp4_˘ts_íåy_t
 *
íåy
, *
íd
;

2247 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2250 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2252 i‡(
d©a
 =
NULL
) {

2257 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2258 
íåõs
 = 
åak
->
composôi⁄_off£t_íåõs
;

2259 
íåy
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
pos
;

2260 
íd
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
œ°
;

2262 
íåy
 < 
íd
) {

2263 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2265 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2267 
°¨t_ßm∂e
, 
cou¡
, 
	`ngx_mp4_gë_32vÆue
(
íåy
->
off£t
));

2269 i‡(
°¨t_ßm∂e
 <
cou¡
) {

2270 
cou¡
 -(
°¨t_ßm∂e
 - 1);

2271 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, count);

2272 
found
;

2275 
°¨t_ßm∂e
 -
cou¡
;

2276 
íåõs
--;

2277 
íåy
++;

2280 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
NULL
;

2281 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
NULL
;

2285 
found
:

2287 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2288 
©om_size
 = (
ngx_mp4_˘ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2289 
åak
->
size
 +
©om_size
;

2291 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
;

2292 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om
->
pos
;

2294 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
size
, 
©om_size
);

2295 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
íåõs
,Éntries);

2298 
	}
}

2302 
u_ch¨
 
	msize
[4];

2303 
u_ch¨
 
	m«me
[4];

2304 
u_ch¨
 
	mvîsi⁄
[1];

2305 
u_ch¨
 
	mÊags
[3];

2306 
u_ch¨
 
	míåõs
[4];

2307 } 
	tngx_mp4_°sc_©om_t
;

2310 
ngx_öt_t


2311 
	$ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2313 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2314 
uöt32_t
 
íåõs
;

2315 
ngx_buf_t
 *
©om
, *
d©a
;

2316 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2317 
ngx_hâp_mp4_åak_t
 *
åak
;

2321 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stscátom");

2323 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2324 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om_hódî
;

2325 
	`ngx_mp4_£t_©om_«me
(
°sc_©om
, 's', 't', 's', 'c');

2327 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
Ë> 
©om_d©a_size
) {

2328 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2329 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2330  
NGX_ERROR
;

2333 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sc_©om
->entries);

2335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2336 "ßm∂e-to-chunkÉ¡rõs:%uD", 
íåõs
);

2338 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
)

2339 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
Ë> 
©om_d©a_size
)

2341 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2342 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2343  
NGX_ERROR
;

2346 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sc_©om_t
);

2347 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2349 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2350 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2352 
©om
 = &
åak
->
°sc_©om_buf
;

2353 
©om
->
ãmp‹¨y
 = 1;

2354 
©om
->
pos
 = 
©om_hódî
;

2355 
©om
->
œ°
 = 
©om_èbÀ
;

2357 
d©a
 = &
åak
->
°sc_d©a_buf
;

2358 
d©a
->
ãmp‹¨y
 = 1;

2359 
d©a
->
pos
 = 
©om_èbÀ
;

2360 
d©a
->
œ°
 = 
©om_íd
;

2362 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
 = 
©om
;

2363 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
 = 
d©a
;

2365 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2367  
NGX_OK
;

2368 
	}
}

2371 
ngx_öt_t


2372 
	$ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2373 
ngx_hâp_mp4_åak_t
 *
åak
)

2375 
size_t
 
©om_size
;

2376 
uöt32_t
 
°¨t_ßm∂e
, 
íåõs
, 
chunk
, 
ßm∂es
, 
id
,

2377 
√xt_chunk
, 
n
;

2378 
ngx_buf_t
 *
©om
, *
d©a
, *
buf
;

2379 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2380 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
fú°
, *
íd
;

2388 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2391 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2393 i‡(
d©a
 =
NULL
) {

2394 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2396 
mp4
->
fûe
.
«me
.
d©a
);

2397  
NGX_ERROR
;

2400 i‡(
åak
->
ßm∂e_to_chunk_íåõs
 == 0) {

2401 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2403 
mp4
->
fûe
.
«me
.
d©a
);

2404  
NGX_ERROR
;

2407 
°¨t_ßm∂e
 = (
uöt32_t
Ë
åak
->start_sample;

2408 
íåõs
 = 
åak
->
ßm∂e_to_chunk_íåõs
 - 1;

2410 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2411 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2413 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2414 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2415 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2416 
íåy
++;

2418 
íåy
 < 
íd
) {

2420 
√xt_chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->
chunk
);

2422 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2425 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
, 
id
);

2427 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2429 i‡(
°¨t_ßm∂e
 <
n
) {

2430 
found
;

2433 
°¨t_ßm∂e
 -
n
;

2435 
chunk
 = 
√xt_chunk
;

2436 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2437 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2438 
íåõs
--;

2439 
íåy
++;

2442 
√xt_chunk
 = 
åak
->
chunks
;

2444 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2446 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
);

2448 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2450 i‡(
°¨t_ßm∂e
 > 
n
) {

2451 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2453 
mp4
->
fûe
.
«me
.
d©a
);

2454  
NGX_ERROR
;

2457 
found
:

2459 
íåõs
++;

2460 
íåy
--;

2462 i‡(
ßm∂es
 == 0) {

2463 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2465 
mp4
->
fûe
.
«me
.
d©a
);

2466  
NGX_ERROR
;

2469 
åak
->
°¨t_chunk
 = 
chunk
 - 1;

2471 
åak
->
°¨t_chunk
 +
°¨t_ßm∂e
 / 
ßm∂es
;

2472 
åak
->
chunk_ßm∂es
 = 
°¨t_ßm∂e
 % 
ßm∂es
;

2474 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2476 
åak
->
°¨t_chunk
,Åøk->
chunk_ßm∂es
);

2478 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2479 
©om_size
 = (
ngx_mp4_°sc_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2481 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 1);

2483 i‡(
åak
->
chunk_ßm∂es
) {

2485 
fú°
 = &
åak
->
°sc_chunk_íåy
;

2486 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 1);

2487 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, sam∂e†- 
åak
->
chunk_ßm∂es
);

2488 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2490 
buf
 = &
åak
->
°sc_chunk_buf
;

2491 
buf
->
ãmp‹¨y
 = 1;

2492 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2493 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2495 
åak
->
out
[
NGX_HTTP_MP4_STSC_CHUNK
].
buf
 = buf;

2497 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 2);

2499 
©om_size
 +(
ngx_mp4_°sc_íåy_t
);

2502 ++
íåy
 < 
íd
) {

2503 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2504 
chunk
 -
åak
->
°¨t_chunk
;

2505 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, chunk);

2508 
åak
->
size
 +
©om_size
;

2510 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
;

2511 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om
->
pos
;

2513 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
size
, 
©om_size
);

2514 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
íåõs
,Éntries);

2516  
NGX_OK
;

2517 
	}
}

2521 
u_ch¨
 
	msize
[4];

2522 
u_ch¨
 
	m«me
[4];

2523 
u_ch¨
 
	mvîsi⁄
[1];

2524 
u_ch¨
 
	mÊags
[3];

2525 
u_ch¨
 
	munif‹m_size
[4];

2526 
u_ch¨
 
	míåõs
[4];

2527 } 
	tngx_mp4_°sz_©om_t
;

2530 
ngx_öt_t


2531 
	$ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2533 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2534 
size_t
 
©om_size
;

2535 
uöt32_t
 
íåõs
, 
size
;

2536 
ngx_buf_t
 *
©om
, *
d©a
;

2537 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2538 
ngx_hâp_mp4_åak_t
 *
åak
;

2542 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stszátom");

2544 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2545 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om_hódî
;

2546 
	`ngx_mp4_£t_©om_«me
(
°sz_©om
, 's', 't', 's', 'z');

2548 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
Ë> 
©om_d©a_size
) {

2549 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2550 "\"%s\" mp4 stszátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2551  
NGX_ERROR
;

2554 
size
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->
unif‹m_size
);

2555 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->entries);

2557 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2558 "ßm∂êunif‹m size:%uD,É¡rõs:%uD", 
size
, 
íåõs
);

2560 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2561 
åak
->
ßm∂e_sizes_íåõs
 = 
íåõs
;

2563 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sz_©om_t
);

2565 
©om
 = &
åak
->
°sz_©om_buf
;

2566 
©om
->
ãmp‹¨y
 = 1;

2567 
©om
->
pos
 = 
©om_hódî
;

2568 
©om
->
œ°
 = 
©om_èbÀ
;

2570 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
 = 
©om
;

2572 i‡(
size
 == 0) {

2573 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
)

2574 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2576 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2578 
mp4
->
fûe
.
«me
.
d©a
);

2579  
NGX_ERROR
;

2582 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2584 
d©a
 = &
åak
->
°sz_d©a_buf
;

2585 
d©a
->
ãmp‹¨y
 = 1;

2586 
d©a
->
pos
 = 
©om_èbÀ
;

2587 
d©a
->
œ°
 = 
©om_íd
;

2589 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
 = 
d©a
;

2594 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

2595 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

2596 
åak
->
size
 +
©om_size
;

2599 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2601  
NGX_OK
;

2602 
	}
}

2605 
ngx_öt_t


2606 
	$ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2607 
ngx_hâp_mp4_åak_t
 *
åak
)

2609 
size_t
 
©om_size
;

2610 
uöt32_t
 *
pos
, *
íd
;

2611 
ngx_buf_t
 *
©om
, *
d©a
;

2612 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2620 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2623 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
;

2625 i‡(
d©a
) {

2626 i‡(
åak
->
°¨t_ßm∂e
 >Åøk->
ßm∂e_sizes_íåõs
) {

2627 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2629 
mp4
->
fûe
.
«me
.
d©a
);

2630  
NGX_ERROR
;

2633 
d©a
->
pos
 +
åak
->
°¨t_ßm∂e
 * (
uöt32_t
);

2634 
íd
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2636 
pos
 = 
íd
 - 
åak
->
chunk_ßm∂es
;Öos <Énd;Öos++) {

2637 
åak
->
chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

2640 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2641 "chunk sam∂e†sizes:%uL", 
åak
->
chunk_ßm∂es_size
);

2643 
©om_size
 = (
ngx_mp4_°sz_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2644 
åak
->
size
 +
©om_size
;

2646 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
;

2647 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om
->
pos
;

2649 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
size
, 
©om_size
);

2650 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
íåõs
,

2651 
åak
->
ßm∂e_sizes_íåõs
 -Åøk->
°¨t_ßm∂e
);

2654  
NGX_OK
;

2655 
	}
}

2659 
u_ch¨
 
	msize
[4];

2660 
u_ch¨
 
	m«me
[4];

2661 
u_ch¨
 
	mvîsi⁄
[1];

2662 
u_ch¨
 
	mÊags
[3];

2663 
u_ch¨
 
	míåõs
[4];

2664 } 
	tngx_mp4_°co_©om_t
;

2667 
ngx_öt_t


2668 
	$ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2670 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2671 
uöt32_t
 
íåõs
;

2672 
ngx_buf_t
 *
©om
, *
d©a
;

2673 
ngx_mp4_°co_©om_t
 *
°co_©om
;

2674 
ngx_hâp_mp4_åak_t
 *
åak
;

2678 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stcoátom");

2680 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2681 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om_hódî
;

2682 
	`ngx_mp4_£t_©om_«me
(
°co_©om
, 's', 't', 'c', 'o');

2684 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
Ë> 
©om_d©a_size
) {

2685 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2686 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2687  
NGX_ERROR
;

2690 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°co_©om
->entries);

2692 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

2694 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
)

2695 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2697 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2698 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2699  
NGX_ERROR
;

2702 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°co_©om_t
);

2703 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2705 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2706 
åak
->
chunks
 = 
íåõs
;

2708 
©om
 = &
åak
->
°co_©om_buf
;

2709 
©om
->
ãmp‹¨y
 = 1;

2710 
©om
->
pos
 = 
©om_hódî
;

2711 
©om
->
œ°
 = 
©om_èbÀ
;

2713 
d©a
 = &
åak
->
°co_d©a_buf
;

2714 
d©a
->
ãmp‹¨y
 = 1;

2715 
d©a
->
pos
 = 
©om_èbÀ
;

2716 
d©a
->
œ°
 = 
©om_íd
;

2718 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
 = 
©om
;

2719 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
 = 
d©a
;

2721 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2723  
NGX_OK
;

2724 
	}
}

2727 
ngx_öt_t


2728 
	$ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2729 
ngx_hâp_mp4_åak_t
 *
åak
)

2731 
size_t
 
©om_size
;

2732 
ngx_buf_t
 *
©om
, *
d©a
;

2733 
ngx_mp4_°co_©om_t
 *
°co_©om
;

2741 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2744 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

2746 i‡(
d©a
 =
NULL
) {

2747 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2749 
mp4
->
fûe
.
«me
.
d©a
);

2750  
NGX_ERROR
;

2753 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

2754 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2756 
mp4
->
fûe
.
«me
.
d©a
);

2757  
NGX_ERROR
;

2760 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt32_t
);

2761 
©om_size
 = (
ngx_mp4_°co_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2762 
åak
->
size
 +
©om_size
;

2764 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_32vÆue
(
d©a
->
pos
);

2765 
åak
->
°¨t_off£t
 +åak->
chunk_ßm∂es_size
;

2766 
	`ngx_mp4_£t_32vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

2768 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2769 "°¨àchunk off£t:%uD", 
åak
->
°¨t_off£t
);

2771 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
;

2772 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om
->
pos
;

2774 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
size
, 
©om_size
);

2775 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
íåõs
, 
åak
->
chunks
 -Åøk->
°¨t_chunk
);

2777  
NGX_OK
;

2778 
	}
}

2782 
	$ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2783 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
)

2785 
uöt32_t
 
off£t
, *
íåy
, *
íd
;

2786 
ngx_buf_t
 *
d©a
;

2793 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2796 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

2797 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2798 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2800 
íåy
 < 
íd
) {

2801 
off£t
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2802 
off£t
 +
adju°mít
;

2803 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
off£t
);

2804 
íåy
++;

2806 
	}
}

2810 
u_ch¨
 
	msize
[4];

2811 
u_ch¨
 
	m«me
[4];

2812 
u_ch¨
 
	mvîsi⁄
[1];

2813 
u_ch¨
 
	mÊags
[3];

2814 
u_ch¨
 
	míåõs
[4];

2815 } 
	tngx_mp4_co64_©om_t
;

2818 
ngx_öt_t


2819 
	$ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2821 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2822 
uöt32_t
 
íåõs
;

2823 
ngx_buf_t
 *
©om
, *
d©a
;

2824 
ngx_mp4_co64_©om_t
 *
co64_©om
;

2825 
ngx_hâp_mp4_åak_t
 *
åak
;

2829 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 co64átom");

2831 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2832 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om_hódî
;

2833 
	`ngx_mp4_£t_©om_«me
(
co64_©om
, 'c', 'o', '6', '4');

2835 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
Ë> 
©om_d©a_size
) {

2836 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2837 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2838  
NGX_ERROR
;

2841 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
co64_©om
->entries);

2843 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

2845 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
)

2846 + 
íåõs
 * (
uöt64_t
Ë> 
©om_d©a_size
)

2848 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2849 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2850  
NGX_ERROR
;

2853 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_co64_©om_t
);

2854 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt64_t
);

2856 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2857 
åak
->
chunks
 = 
íåõs
;

2859 
©om
 = &
åak
->
co64_©om_buf
;

2860 
©om
->
ãmp‹¨y
 = 1;

2861 
©om
->
pos
 = 
©om_hódî
;

2862 
©om
->
œ°
 = 
©om_èbÀ
;

2864 
d©a
 = &
åak
->
co64_d©a_buf
;

2865 
d©a
->
ãmp‹¨y
 = 1;

2866 
d©a
->
pos
 = 
©om_èbÀ
;

2867 
d©a
->
œ°
 = 
©om_íd
;

2869 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
 = 
©om
;

2870 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
 = 
d©a
;

2872 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2874  
NGX_OK
;

2875 
	}
}

2878 
ngx_öt_t


2879 
	$ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2880 
ngx_hâp_mp4_åak_t
 *
åak
)

2882 
size_t
 
©om_size
;

2883 
ngx_buf_t
 *
©om
, *
d©a
;

2884 
ngx_mp4_co64_©om_t
 *
co64_©om
;

2892 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2895 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

2897 i‡(
d©a
 =
NULL
) {

2898 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2900 
mp4
->
fûe
.
«me
.
d©a
);

2901  
NGX_ERROR
;

2904 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

2905 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2907 
mp4
->
fûe
.
«me
.
d©a
);

2908  
NGX_ERROR
;

2911 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt64_t
);

2912 
©om_size
 = (
ngx_mp4_co64_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2913 
åak
->
size
 +
©om_size
;

2915 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_64vÆue
(
d©a
->
pos
);

2916 
åak
->
°¨t_off£t
 +åak->
chunk_ßm∂es_size
;

2917 
	`ngx_mp4_£t_64vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

2919 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2920 "°¨àchunk off£t:%uL", 
åak
->
°¨t_off£t
);

2922 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
;

2923 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om
->
pos
;

2925 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
size
, 
©om_size
);

2926 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
íåõs
, 
åak
->
chunks
 -Åøk->
°¨t_chunk
);

2928  
NGX_OK
;

2929 
	}
}

2933 
	$ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2934 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
)

2936 
uöt64_t
 
off£t
, *
íåy
, *
íd
;

2937 
ngx_buf_t
 *
d©a
;

2944 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2947 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

2948 
íåy
 = (
uöt64_t
 *Ë
d©a
->
pos
;

2949 
íd
 = (
uöt64_t
 *Ë
d©a
->
œ°
;

2951 
íåy
 < 
íd
) {

2952 
off£t
 = 
	`ngx_mp4_gë_64vÆue
(
íåy
);

2953 
off£t
 +
adju°mít
;

2954 
	`ngx_mp4_£t_64vÆue
(
íåy
, 
off£t
);

2955 
íåy
++;

2957 
	}
}

2961 
	$ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2963 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2965 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2966 
˛cf
->
h™dÀr
 = 
ngx_hâp_mp4_h™dÀr
;

2968  
NGX_CONF_OK
;

2969 
	}
}

2973 
	$ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2975 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

2977 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_mp4_c⁄f_t
));

2978 i‡(
c⁄f
 =
NULL
) {

2979  
NULL
;

2982 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2983 
c⁄f
->
max_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2985  
c⁄f
;

2986 
	}
}

2990 
	$ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2992 
ngx_hâp_mp4_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2993 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
 = 
chûd
;

2995 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size, 512 * 1024);

2996 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_buf„r_size
, 
¥ev
->max_buffer_size,

2999  
NGX_CONF_OK
;

3000 
	}
}

	@src/http/modules/ngx_http_not_modified_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_ã°_¥ec⁄dôi⁄
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_ã°_nŸ_modifõd
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_öt_t
 
ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_nŸ_modifõd_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL


33 
ngx_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

52 
ngx_öt_t


53 
	$ngx_hâp_nŸ_modifõd_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

55 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


56 || 
r
 !r->
maö


57 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

59  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

62 i‡(
r
->
hódîs_ö
.
if_unmodifõd_sö˚
) {

63  
	`ngx_hâp_ã°_¥ec⁄dôi⁄
(
r
);

66 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚
) {

67  
	`ngx_hâp_ã°_nŸ_modifõd
(
r
);

70  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

71 
	}
}

74 
ngx_öt_t


75 
	$ngx_hâp_ã°_¥ec⁄dôi⁄
(
ngx_hâp_ªque°_t
 *
r
)

77 
time_t
 
iums
;

79 
iums
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
d©a
,

80 
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
Àn
);

82 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

83 "hâ∞iums:%dÜm:%d", 
iums
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

85 i‡(
iums
 >
r
->
hódîs_out
.
œ°_modifõd_time
) {

86  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

89  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

90 
NGX_HTTP_PRECONDITION_FAILED
);

91 
	}
}

94 
ngx_öt_t


95 
	$ngx_hâp_ã°_nŸ_modifõd
(
ngx_hâp_ªque°_t
 *
r
)

97 
time_t
 
ims
;

98 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

100 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

102 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_OFF
) {

103  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

106 
ims
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
d©a
,

107 
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
Àn
);

109 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

110 "hâ∞ims:%dÜm:%d", 
ims
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

112 i‡(
ims
 !
r
->
hódîs_out
.
œ°_modifõd_time
) {

114 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_EXACT


115 || 
ims
 < 
r
->
hódîs_out
.
œ°_modifõd_time
)

117  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

121 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_NOT_MODIFIED
;

122 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

123 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

124 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

125 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

127 i‡(
r
->
hódîs_out
.
c⁄ã¡_ícodög
) {

128 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

129 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

132  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

133 
	}
}

136 
ngx_öt_t


137 
	$ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

139 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

140 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_nŸ_modifõd_hódî_fûãr
;

142  
NGX_OK
;

143 
	}
}

	@src/http/modules/ngx_http_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_¥oxy_ªdúe˘_s
 
	tngx_hâp_¥oxy_ªdúe˘_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_¥oxy_ªdúe˘_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tsize_t
 
	t¥efix
, 
	tngx_hâp_¥oxy_ªdúe˘_t
 *
	t¥
);

18 
	sngx_hâp_¥oxy_ªdúe˘_s
 {

19 
ngx_hâp_¥oxy_ªdúe˘_±
 
h™dÀr
;

20 
ngx_°r_t
 
ªdúe˘
;

23 
ngx_°r_t
 
ãxt
;

26 *
Àngths
;

27 *
vÆues
;

28 } 
v¨s
;

30 *
ªgex
;

31 } 
ª∂a˚mít
;

36 
ngx_°r_t
 
key_°¨t
;

37 
ngx_°r_t
 
schema
;

38 
ngx_°r_t
 
ho°_hódî
;

39 
ngx_°r_t
 
p‹t
;

40 
ngx_°r_t
 
uri
;

41 } 
	tngx_hâp_¥oxy_v¨s_t
;

45 
ngx_hâp_up°ªam_c⁄f_t
 
up°ªam
;

47 
ngx_¨øy_t
 *
Êushes
;

48 
ngx_¨øy_t
 *
body_£t_Àn
;

49 
ngx_¨øy_t
 *
body_£t
;

50 
ngx_¨øy_t
 *
hódîs_£t_Àn
;

51 
ngx_¨øy_t
 *
hódîs_£t
;

52 
ngx_hash_t
 
hódîs_£t_hash
;

54 
ngx_¨øy_t
 *
hódîs_sour˚
;

56 
ngx_¨øy_t
 *
¥oxy_Àngths
;

57 
ngx_¨øy_t
 *
¥oxy_vÆues
;

59 
ngx_¨øy_t
 *
ªdúe˘s
;

61 
ngx_°r_t
 
body_sour˚
;

63 
ngx_°r_t
 
mëhod
;

64 
ngx_°r_t
 
loˇti⁄
;

65 
ngx_°r_t
 
uæ
;

67 #i‡(
NGX_HTTP_CACHE
)

68 
ngx_hâp_com∂ex_vÆue_t
 
ˇche_key
;

71 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

73 
ngx_Êag_t
 
ªdúe˘
;

75 
ngx_uöt_t
 
hódîs_hash_max_size
;

76 
ngx_uöt_t
 
hódîs_hash_buckë_size
;

77 } 
	tngx_hâp_¥oxy_loc_c⁄f_t
;

81 
ngx_hâp_°©us_t
 
°©us
;

82 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

83 
size_t
 
öã∫Æ_body_Àngth
;

84 } 
	tngx_hâp_¥oxy_˘x_t
;

87 
ngx_öt_t
 
	`ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_¥oxy_˘x_t
 *
˘x
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

89 #i‡(
NGX_HTTP_CACHE
)

90 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

92 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

93 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

94 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

95 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

96 
	`ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

97 
	`ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_öt_t
 
rc
);

100 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

102 
ngx_öt_t
 
	`ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

104 
ngx_öt_t


105 
	`ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

107 
ngx_öt_t


108 
	`ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

110 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

111 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

113 
ngx_öt_t
 
	`ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

114 *
	`ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

115 *
	`ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

116 *
∑ª¡
, *
chûd
);

117 
ngx_öt_t
 
	`ngx_hâp_¥oxy_mîge_hódîs
(
ngx_c⁄f_t
 *
cf
,

118 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_¥oxy_loc_c⁄f_à*
¥ev
);

120 *
	`ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

121 *
c⁄f
);

122 *
	`ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

123 *
c⁄f
);

124 *
	`ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

125 *
c⁄f
);

126 #i‡(
NGX_HTTP_CACHE
)

127 *
	`ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

128 *
c⁄f
);

129 *
	`ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

130 *
c⁄f
);

133 *
	`ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

135 #i‡(
NGX_HTTP_SSL
)

136 
ngx_öt_t
 
	`ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

137 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

139 
	`ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
);

142 
ngx_c⁄f_po°_t
 
ngx_hâp_¥oxy_low©_po°
 =

143 { 
ngx_hâp_¥oxy_low©_check
 
	}
};

146 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_√xt_up°ªam_masks
[] = {

147 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

148 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

149 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

150 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

151 { 
ngx_°rög
("hâp_502"), 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

152 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

153 { 
ngx_°rög
("hâp_504"), 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

154 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

155 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

156 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

157 { 
ngx_nuŒ_°rög
, 0 }

161 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
;

164 
ngx_comm™d_t
 
	gngx_hâp_¥oxy_comm™ds
[] = {

166 { 
ngx_°rög
("proxy_pass"),

167 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

168 
ngx_hâp_¥oxy_∑ss
,

169 
NGX_HTTP_LOC_CONF_OFFSET
,

171 
NULL
 },

173 { 
ngx_°rög
("proxy_redirect"),

174 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

175 
ngx_hâp_¥oxy_ªdúe˘
,

176 
NGX_HTTP_LOC_CONF_OFFSET
,

178 
NULL
 },

180 { 
ngx_°rög
("proxy_store"),

181 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

182 
ngx_hâp_¥oxy_°‹e
,

183 
NGX_HTTP_LOC_CONF_OFFSET
,

185 
NULL
 },

187 { 
ngx_°rög
("proxy_store_access"),

188 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

189 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

190 
NGX_HTTP_LOC_CONF_OFFSET
,

191 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

192 
NULL
 },

194 { 
ngx_°rög
("proxy_buffering"),

195 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

196 
ngx_c⁄f_£t_Êag_¶Ÿ
,

197 
NGX_HTTP_LOC_CONF_OFFSET
,

198 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

199 
NULL
 },

201 { 
ngx_°rög
("proxy_ignore_client_abort"),

202 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

203 
ngx_c⁄f_£t_Êag_¶Ÿ
,

204 
NGX_HTTP_LOC_CONF_OFFSET
,

205 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

206 
NULL
 },

208 { 
ngx_°rög
("proxy_bind"),

209 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

210 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

211 
NGX_HTTP_LOC_CONF_OFFSET
,

212 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

213 
NULL
 },

215 { 
ngx_°rög
("proxy_connect_timeout"),

216 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

217 
ngx_c⁄f_£t_m£c_¶Ÿ
,

218 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

220 
NULL
 },

222 { 
ngx_°rög
("proxy_send_timeout"),

223 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

224 
ngx_c⁄f_£t_m£c_¶Ÿ
,

225 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

227 
NULL
 },

229 { 
ngx_°rög
("proxy_send_lowat"),

230 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

231 
ngx_c⁄f_£t_size_¶Ÿ
,

232 
NGX_HTTP_LOC_CONF_OFFSET
,

233 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

234 &
ngx_hâp_¥oxy_low©_po°
 },

236 { 
ngx_°rög
("proxy_intercept_errors"),

237 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

238 
ngx_c⁄f_£t_Êag_¶Ÿ
,

239 
NGX_HTTP_LOC_CONF_OFFSET
,

240 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

241 
NULL
 },

243 { 
ngx_°rög
("proxy_set_header"),

244 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

245 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

246 
NGX_HTTP_LOC_CONF_OFFSET
,

247 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_sour˚
),

248 
NULL
 },

250 { 
ngx_°rög
("proxy_headers_hash_max_size"),

251 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

252 
ngx_c⁄f_£t_num_¶Ÿ
,

253 
NGX_HTTP_LOC_CONF_OFFSET
,

254 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_max_size
),

255 
NULL
 },

257 { 
ngx_°rög
("proxy_headers_hash_bucket_size"),

258 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

259 
ngx_c⁄f_£t_num_¶Ÿ
,

260 
NGX_HTTP_LOC_CONF_OFFSET
,

261 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_buckë_size
),

262 
NULL
 },

264 { 
ngx_°rög
("proxy_set_body"),

265 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

266 
ngx_c⁄f_£t_°r_¶Ÿ
,

267 
NGX_HTTP_LOC_CONF_OFFSET
,

268 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
body_sour˚
),

269 
NULL
 },

271 { 
ngx_°rög
("proxy_method"),

272 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

273 
ngx_c⁄f_£t_°r_¶Ÿ
,

274 
NGX_HTTP_LOC_CONF_OFFSET
,

275 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
mëhod
),

276 
NULL
 },

278 { 
ngx_°rög
("proxy_pass_request_headers"),

279 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

280 
ngx_c⁄f_£t_Êag_¶Ÿ
,

281 
NGX_HTTP_LOC_CONF_OFFSET
,

282 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

283 
NULL
 },

285 { 
ngx_°rög
("proxy_pass_request_body"),

286 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

287 
ngx_c⁄f_£t_Êag_¶Ÿ
,

288 
NGX_HTTP_LOC_CONF_OFFSET
,

289 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

290 
NULL
 },

292 { 
ngx_°rög
("proxy_buffer_size"),

293 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

294 
ngx_c⁄f_£t_size_¶Ÿ
,

295 
NGX_HTTP_LOC_CONF_OFFSET
,

296 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

297 
NULL
 },

299 { 
ngx_°rög
("proxy_read_timeout"),

300 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

301 
ngx_c⁄f_£t_m£c_¶Ÿ
,

302 
NGX_HTTP_LOC_CONF_OFFSET
,

303 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

304 
NULL
 },

306 { 
ngx_°rög
("proxy_buffers"),

307 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

308 
ngx_c⁄f_£t_bufs_¶Ÿ
,

309 
NGX_HTTP_LOC_CONF_OFFSET
,

310 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
bufs
),

311 
NULL
 },

313 { 
ngx_°rög
("proxy_busy_buffers_size"),

314 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

315 
ngx_c⁄f_£t_size_¶Ÿ
,

316 
NGX_HTTP_LOC_CONF_OFFSET
,

317 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

318 
NULL
 },

320 #i‡(
NGX_HTTP_CACHE
)

322 { 
ngx_°rög
("proxy_cache"),

323 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

324 
ngx_hâp_¥oxy_ˇche
,

325 
NGX_HTTP_LOC_CONF_OFFSET
,

327 
NULL
 },

329 { 
ngx_°rög
("proxy_cache_key"),

330 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

331 
ngx_hâp_¥oxy_ˇche_key
,

332 
NGX_HTTP_LOC_CONF_OFFSET
,

334 
NULL
 },

336 { 
ngx_°rög
("proxy_cache_path"),

337 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

338 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

341 &
ngx_hâp_¥oxy_moduÀ
 },

343 { 
ngx_°rög
("proxy_cache_bypass"),

344 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

345 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

346 
NGX_HTTP_LOC_CONF_OFFSET
,

347 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

348 
NULL
 },

350 { 
ngx_°rög
("proxy_no_cache"),

351 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

352 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

353 
NGX_HTTP_LOC_CONF_OFFSET
,

354 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

355 
NULL
 },

357 { 
ngx_°rög
("proxy_cache_valid"),

358 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

359 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

360 
NGX_HTTP_LOC_CONF_OFFSET
,

361 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

362 
NULL
 },

364 { 
ngx_°rög
("proxy_cache_min_uses"),

365 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

366 
ngx_c⁄f_£t_num_¶Ÿ
,

367 
NGX_HTTP_LOC_CONF_OFFSET
,

368 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

369 
NULL
 },

371 { 
ngx_°rög
("proxy_cache_use_stale"),

372 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

373 
ngx_c⁄f_£t_bômask_¶Ÿ
,

374 
NGX_HTTP_LOC_CONF_OFFSET
,

375 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

376 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

378 { 
ngx_°rög
("proxy_cache_methods"),

379 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

380 
ngx_c⁄f_£t_bômask_¶Ÿ
,

381 
NGX_HTTP_LOC_CONF_OFFSET
,

382 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

383 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

387 { 
ngx_°rög
("proxy_temp_path"),

388 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

389 
ngx_c⁄f_£t_∑th_¶Ÿ
,

390 
NGX_HTTP_LOC_CONF_OFFSET
,

391 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

392 
NULL
 },

394 { 
ngx_°rög
("proxy_max_temp_file_size"),

395 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

396 
ngx_c⁄f_£t_size_¶Ÿ
,

397 
NGX_HTTP_LOC_CONF_OFFSET
,

398 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

399 
NULL
 },

401 { 
ngx_°rög
("proxy_temp_file_write_size"),

402 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

403 
ngx_c⁄f_£t_size_¶Ÿ
,

404 
NGX_HTTP_LOC_CONF_OFFSET
,

405 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

406 
NULL
 },

408 { 
ngx_°rög
("proxy_next_upstream"),

409 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

410 
ngx_c⁄f_£t_bômask_¶Ÿ
,

411 
NGX_HTTP_LOC_CONF_OFFSET
,

412 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

413 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

415 { 
ngx_°rög
("proxy_pass_header"),

416 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

417 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

418 
NGX_HTTP_LOC_CONF_OFFSET
,

419 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

420 
NULL
 },

422 { 
ngx_°rög
("proxy_hide_header"),

423 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

424 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

425 
NGX_HTTP_LOC_CONF_OFFSET
,

426 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

427 
NULL
 },

429 { 
ngx_°rög
("proxy_ignore_headers"),

430 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

431 
ngx_c⁄f_£t_bômask_¶Ÿ
,

432 
NGX_HTTP_LOC_CONF_OFFSET
,

433 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

434 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

436 #i‡(
NGX_HTTP_SSL
)

438 { 
ngx_°rög
("proxy_ssl_session_reuse"),

439 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

440 
ngx_c⁄f_£t_Êag_¶Ÿ
,

441 
NGX_HTTP_LOC_CONF_OFFSET
,

442 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

443 
NULL
 },

447 
ngx_nuŒ_comm™d


451 
ngx_hâp_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ_˘x
 = {

452 
ngx_hâp_¥oxy_add_v¨übÀs
,

453 
NULL
,

455 
NULL
,

456 
NULL
,

458 
NULL
,

459 
NULL
,

461 
ngx_hâp_¥oxy_¸óã_loc_c⁄f
,

462 
ngx_hâp_¥oxy_mîge_loc_c⁄f


466 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
 = {

467 
NGX_MODULE_V1
,

468 &
ngx_hâp_¥oxy_moduÀ_˘x
,

469 
ngx_hâp_¥oxy_comm™ds
,

470 
NGX_HTTP_MODULE
,

471 
NULL
,

472 
NULL
,

473 
NULL
,

474 
NULL
,

475 
NULL
,

476 
NULL
,

477 
NULL
,

478 
NGX_MODULE_V1_PADDING


482 
	gngx_hâp_¥oxy_vîsi⁄
[] = " HTTP/1.0" 
CRLF
;

485 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_hódîs
[] = {

486 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

487 { 
ngx_°rög
("Connection"),Çgx_string("close") },

488 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

489 { 
ngx_°rög
("Expect"),Çgx_string("") },

490 { 
ngx_nuŒ_°rög
,Çgx_null_string }

494 
ngx_°r_t
 
	gngx_hâp_¥oxy_hide_hódîs
[] = {

495 
ngx_°rög
("Date"),

496 
ngx_°rög
("Server"),

497 
ngx_°rög
("X-Pad"),

498 
ngx_°rög
("X-Accel-Expires"),

499 
ngx_°rög
("X-Accel-Redirect"),

500 
ngx_°rög
("X-Accel-Limit-Rate"),

501 
ngx_°rög
("X-Accel-Buffering"),

502 
ngx_°rög
("X-Accel-Charset"),

503 
ngx_nuŒ_°rög


507 #i‡(
NGX_HTTP_CACHE
)

509 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_ˇche_hódîs
[] = {

510 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

511 { 
ngx_°rög
("Connection"),Çgx_string("close") },

512 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

513 { 
ngx_°rög
("Expect"),Çgx_string("") },

514 { 
ngx_°rög
("If-Modified-Since"),Çgx_string("") },

515 { 
ngx_°rög
("If-Unmodified-Since"),Çgx_string("") },

516 { 
ngx_°rög
("If-None-Match"),Çgx_string("") },

517 { 
ngx_°rög
("If-Match"),Çgx_string("") },

518 { 
ngx_°rög
("Range"),Çgx_string("") },

519 { 
ngx_°rög
("If-Range"),Çgx_string("") },

520 { 
ngx_nuŒ_°rög
,Çgx_null_string }

526 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_¥oxy_v¨s
[] = {

528 { 
ngx_°rög
("¥oxy_ho°"), 
NULL
, 
ngx_hâp_¥oxy_ho°_v¨übÀ
, 0,

529 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

531 { 
ngx_°rög
("¥oxy_p‹t"), 
NULL
, 
ngx_hâp_¥oxy_p‹t_v¨übÀ
, 0,

532 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

534 { 
ngx_°rög
("¥oxy_add_x_f‹w¨ded_f‹"), 
NULL
,

535 
ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

538 { 
ngx_°rög
("¥oxy_add_vü"), 
NULL
, NULL, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

541 { 
ngx_°rög
("¥oxy_öã∫Æ_body_Àngth"), 
NULL
,

542 
ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

544 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

548 
ngx_∑th_öô_t
 
	gngx_hâp_¥oxy_ãmp_∑th
 = {

549 
ngx_°rög
(
NGX_HTTP_PROXY_TEMP_PATH
), { 1, 2, 0 }

553 
ngx_öt_t


554 
	$ngx_hâp_¥oxy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

556 
ngx_öt_t
 
rc
;

557 
ngx_hâp_up°ªam_t
 *
u
;

558 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

559 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

561 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

562  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

565 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_¥oxy_˘x_t
));

566 i‡(
˘x
 =
NULL
) {

567  
NGX_ERROR
;

570 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_¥oxy_moduÀ
);

572 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

574 
u
 = 
r
->
up°ªam
;

576 i‡(
∂cf
->
¥oxy_Àngths
 =
NULL
) {

577 
˘x
->
v¨s
 = 
∂cf
->vars;

578 
u
->
schema
 = 
∂cf
->
v¨s
.schema;

579 #i‡(
NGX_HTTP_SSL
)

580 
u
->
s¶
 = (
∂cf
->
up°ªam
.s¶ !
NULL
);

584 i‡(
	`ngx_hâp_¥oxy_evÆ
(
r
, 
˘x
, 
∂cf
Ë!
NGX_OK
) {

585  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

589 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_moduÀ
;

591 
u
->
c⁄f
 = &
∂cf
->
up°ªam
;

593 #i‡(
NGX_HTTP_CACHE
)

594 
u
->
¸óã_key
 = 
ngx_hâp_¥oxy_¸óã_key
;

596 
u
->
¸óã_ªque°
 = 
ngx_hâp_¥oxy_¸óã_ªque°
;

597 
u
->
ªöô_ªque°
 = 
ngx_hâp_¥oxy_ªöô_ªque°
;

598 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

599 
u
->
ab‹t_ªque°
 = 
ngx_hâp_¥oxy_ab‹t_ªque°
;

600 
u
->
föÆize_ªque°
 = 
ngx_hâp_¥oxy_föÆize_ªque°
;

601 
r
->
°©e
 = 0;

603 i‡(
∂cf
->
ªdúe˘s
) {

604 
u
->
ªwrôe_ªdúe˘
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘
;

607 
u
->
buf„rög
 = 
∂cf
->
up°ªam
.buffering;

609 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

610 i‡(
u
->
pùe
 =
NULL
) {

611  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

614 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

616 
u
->
ac˚l
 = 1;

618 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

620 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

621  
rc
;

624  
NGX_DONE
;

625 
	}
}

628 
ngx_öt_t


629 
	$ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_¥oxy_˘x_t
 *
˘x
,

630 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

632 
u_ch¨
 *
p
;

633 
size_t
 
add
;

634 
u_sh‹t
 
p‹t
;

635 
ngx_°r_t
 
¥oxy
;

636 
ngx_uæ_t
 
uæ
;

637 
ngx_hâp_up°ªam_t
 *
u
;

639 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
¥oxy
, 
∂cf
->
¥oxy_Àngths
->
ñts
, 0,

640 
∂cf
->
¥oxy_vÆues
->
ñts
)

641 =
NULL
)

643  
NGX_ERROR
;

646 i‡(
¥oxy
.
Àn
 > 7

647 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

649 
add
 = 7;

650 
p‹t
 = 80;

652 #i‡(
NGX_HTTP_SSL
)

654 } i‡(
¥oxy
.
Àn
 > 8

655 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "https://", 8) == 0)

657 
add
 = 8;

658 
p‹t
 = 443;

659 
r
->
up°ªam
->
s¶
 = 1;

664 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

665 "övÆid URLÖªfix i¿\"%V\"", &
¥oxy
);

666  
NGX_ERROR
;

669 
u
 = 
r
->
up°ªam
;

671 
u
->
schema
.
Àn
 = 
add
;

672 
u
->
schema
.
d©a
 = 
¥oxy
.data;

674 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

676 
uæ
.uæ.
Àn
 = 
¥oxy
.À¿- 
add
;

677 
uæ
.uæ.
d©a
 = 
¥oxy
.d©®+ 
add
;

678 
uæ
.
deÁu…_p‹t
 = 
p‹t
;

679 
uæ
.
uri_∑π
 = 1;

680 
uæ
.
no_ªsﬁve
 = 1;

682 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

683 i‡(
uæ
.
îr
) {

684 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

685 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

688  
NGX_ERROR
;

691 i‡(
uæ
.
uri
.
Àn
) {

692 i‡(
uæ
.
uri
.
d©a
[0] == '?') {

693 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uæ
.
uri
.
Àn
 + 1);

694 i‡(
p
 =
NULL
) {

695  
NGX_ERROR
;

698 *
p
++ = '/';

699 
	`ngx_mem˝y
(
p
, 
uæ
.
uri
.
d©a
, uæ.uri.
Àn
);

701 
uæ
.
uri
.
Àn
++;

702 
uæ
.
uri
.
d©a
 = 
p
 - 1;

706 
uæ
.
uri
 = 
r
->
u≈¨£d_uri
;

709 
˘x
->
v¨s
.
key_°¨t
 = 
u
->
schema
;

711 
	`ngx_hâp_¥oxy_£t_v¨s
(&
uæ
, &
˘x
->
v¨s
);

713 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

714 i‡(
u
->
ªsﬁved
 =
NULL
) {

715  
NGX_ERROR
;

718 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

719 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

720 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

721 
u
->
ªsﬁved
->
«ddrs
 = 1;

722 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

725 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

726 
u
->
ªsﬁved
->
p‹t
 = (
ö_p‹t_t
Ë(
uæ
.
no_p‹t
 ?Öort : url.port);

727 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

730  
NGX_OK
;

731 
	}
}

734 #i‡(
NGX_HTTP_CACHE
)

736 
ngx_öt_t


737 
	$ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

739 
size_t
 
Àn
, 
loc_Àn
;

740 
u_ch¨
 *
p
;

741 
uöçå_t
 
esˇ≥
;

742 
ngx_°r_t
 *
key
;

743 
ngx_hâp_up°ªam_t
 *
u
;

744 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

745 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

747 
u
 = 
r
->
up°ªam
;

749 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

751 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

753 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

754 i‡(
key
 =
NULL
) {

755  
NGX_ERROR
;

758 i‡(
∂cf
->
ˇche_key
.
vÆue
.
Àn
) {

760 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∂cf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

761  
NGX_ERROR
;

764  
NGX_OK
;

767 *
key
 = 
˘x
->
v¨s
.
key_°¨t
;

769 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

770 i‡(
key
 =
NULL
) {

771  
NGX_ERROR
;

774 i‡(
∂cf
->
¥oxy_Àngths
) {

776 *
key
 = 
˘x
->
v¨s
.
uri
;

777 
u
->
uri
 = 
˘x
->
v¨s
.uri;

779  
NGX_OK
;

781 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

783 *
key
 = 
r
->
u≈¨£d_uri
;

784 
u
->
uri
 = 
r
->
u≈¨£d_uri
;

786  
NGX_OK
;

789 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
Ë? 
∂cf
->
loˇti⁄
.len : 0;

791 i‡(
r
->
quŸed_uri
 ||Ñ->
öã∫Æ
) {

792 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

793 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

795 
esˇ≥
 = 0;

798 
Àn
 = 
˘x
->
v¨s
.
uri
.À¿+ 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


799 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

801 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

802 i‡(
p
 =
NULL
) {

803  
NGX_ERROR
;

806 
key
->
d©a
 = 
p
;

808 i‡(
r
->
vÆid_loˇti⁄
) {

809 
p
 = 
	`ngx_c›y
’, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

812 i‡(
esˇ≥
) {

813 
	`ngx_esˇ≥_uri
(
p
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

814 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

815 
p
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

818 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
 + 
loc_Àn
,Ñ->uri.
Àn
 -Üoc_len);

821 i‡(
r
->
¨gs
.
Àn
 > 0) {

822 *
p
++ = '?';

823 
p
 = 
	`ngx_c›y
’, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

826 
key
->
Àn
 = 
p
 - key->
d©a
;

827 
u
->
uri
 = *
key
;

829  
NGX_OK
;

830 
	}
}

835 
ngx_öt_t


836 
	$ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

838 
size_t
 
Àn
, 
uri_Àn
, 
loc_Àn
, 
body_Àn
;

839 
uöçå_t
 
esˇ≥
;

840 
ngx_buf_t
 *
b
;

841 
ngx_°r_t
 
mëhod
;

842 
ngx_uöt_t
 
i
, 
u≈¨£d_uri
;

843 
ngx_chaö_t
 *
˛
, *
body
;

844 
ngx_li°_∑π_t
 *
∑π
;

845 
ngx_èbÀ_ñt_t
 *
hódî
;

846 
ngx_hâp_up°ªam_t
 *
u
;

847 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

848 
ngx_hâp_s¸ùt_code_±
 
code
;

849 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

850 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

851 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

853 
u
 = 
r
->
up°ªam
;

855 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

857 i‡(
u
->
mëhod
.
Àn
) {

859 
mëhod
 = 
u
->method;

860 
mëhod
.
Àn
++;

862 } i‡(
∂cf
->
mëhod
.
Àn
) {

863 
mëhod
 = 
∂cf
->method;

866 
mëhod
 = 
r
->
mëhod_«me
;

867 
mëhod
.
Àn
++;

870 
Àn
 = 
mëhod
.À¿+ (
ngx_hâp_¥oxy_vîsi⁄
Ë- 1 + (
CRLF
) - 1;

872 
esˇ≥
 = 0;

873 
loc_Àn
 = 0;

874 
u≈¨£d_uri
 = 0;

876 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

878 i‡(
∂cf
->
¥oxy_Àngths
) {

879 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
;

881 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

883 
u≈¨£d_uri
 = 1;

884 
uri_Àn
 = 
r
->
u≈¨£d_uri
.
Àn
;

887 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
) ?

888 
∂cf
->
loˇti⁄
.
Àn
 : 0;

890 i‡(
r
->
quŸed_uri
 ||Ñ->
•a˚_ö_uri
 ||Ñ->
öã∫Æ
) {

891 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

892 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

895 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
 + 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


896 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

899 i‡(
uri_Àn
 == 0) {

900 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

902  
NGX_ERROR
;

905 
Àn
 +
uri_Àn
;

907 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∂cf
->
Êushes
);

909 i‡(
∂cf
->
body_£t_Àn
) {

910 
À
.
ù
 = 
∂cf
->
body_£t_Àn
->
ñts
;

911 
À
.
ªque°
 = 
r
;

912 
À
.
Êushed
 = 1;

913 
body_Àn
 = 0;

915 *(
uöçå_t
 *Ë
À
.
ù
) {

916 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

917 
body_Àn
 +
	`lcode
(&
À
);

920 
˘x
->
öã∫Æ_body_Àngth
 = 
body_Àn
;

921 
Àn
 +
body_Àn
;

924 
À
.
ù
 = 
∂cf
->
hódîs_£t_Àn
->
ñts
;

925 
À
.
ªque°
 = 
r
;

926 
À
.
Êushed
 = 1;

928 *(
uöçå_t
 *Ë
À
.
ù
) {

929 *(
uöçå_t
 *Ë
À
.
ù
) {

930 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

931 
Àn
 +
	`lcode
(&
À
);

933 
À
.
ù
 +(
uöçå_t
);

937 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

938 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

939 
hódî
 = 
∑π
->
ñts
;

941 
i
 = 0; ; i++) {

943 i‡(
i
 >
∑π
->
√…s
) {

944 i‡(
∑π
->
√xt
 =
NULL
) {

948 
∑π
 =Ö¨t->
√xt
;

949 
hódî
 = 
∑π
->
ñts
;

950 
i
 = 0;

953 i‡(
	`ngx_hash_föd
(&
∂cf
->
hódîs_£t_hash
, 
hódî
[
i
].
hash
,

954 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

959 
Àn
 +
hódî
[
i
].
key
.len + (": ") - 1

960 + 
hódî
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

965 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

966 i‡(
b
 =
NULL
) {

967  
NGX_ERROR
;

970 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

971 i‡(
˛
 =
NULL
) {

972  
NGX_ERROR
;

975 
˛
->
buf
 = 
b
;

980 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
mëhod
.
d©a
, mëhod.
Àn
);

982 
u
->
uri
.
d©a
 = 
b
->
œ°
;

984 i‡(
∂cf
->
¥oxy_Àngths
) {

985 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

987 } i‡(
u≈¨£d_uri
) {

988 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

991 i‡(
r
->
vÆid_loˇti⁄
) {

992 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

995 i‡(
esˇ≥
) {

996 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

997 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

998 
b
->
œ°
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

1001 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1002 
r
->
uri
.
Àn
 - 
loc_Àn
);

1005 i‡(
r
->
¨gs
.
Àn
 > 0) {

1006 *
b
->
œ°
++ = '?';

1007 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1011 
u
->
uri
.
Àn
 = 
b
->
œ°
 - u->uri.
d©a
;

1013 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄
,

1014 (
ngx_hâp_¥oxy_vîsi⁄
) - 1);

1016 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1018 
e
.
ù
 = 
∂cf
->
hódîs_£t
->
ñts
;

1019 
e
.
pos
 = 
b
->
œ°
;

1020 
e
.
ªque°
 = 
r
;

1021 
e
.
Êushed
 = 1;

1023 
À
.
ù
 = 
∂cf
->
hódîs_£t_Àn
->
ñts
;

1025 *(
uöçå_t
 *Ë
À
.
ù
) {

1026 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1029 (Ë
	`lcode
(&
À
);

1031 i‡(*(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
) {

1033 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1034 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1037 
e
.
skù
 = (
Àn
 =(
CRLF
) - 1) ? 1 : 0;

1040 
e
.
skù
 = 0;

1043 
À
.
ù
 +(
uöçå_t
);

1045 *(
uöçå_t
 *Ë
e
.
ù
) {

1046 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1047 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1049 
e
.
ù
 +(
uöçå_t
);

1052 
b
->
œ°
 = 
e
.
pos
;

1055 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1056 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1057 
hódî
 = 
∑π
->
ñts
;

1059 
i
 = 0; ; i++) {

1061 i‡(
i
 >
∑π
->
√…s
) {

1062 i‡(
∑π
->
√xt
 =
NULL
) {

1066 
∑π
 =Ö¨t->
√xt
;

1067 
hódî
 = 
∑π
->
ñts
;

1068 
i
 = 0;

1071 i‡(
	`ngx_hash_föd
(&
∂cf
->
hódîs_£t_hash
, 
hódî
[
i
].
hash
,

1072 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1077 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1079 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

1081 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
,

1082 
hódî
[
i
].
vÆue
.
Àn
);

1084 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1086 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1088 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

1094 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1096 i‡(
∂cf
->
body_£t
) {

1097 
e
.
ù
 = 
∂cf
->
body_£t
->
ñts
;

1098 
e
.
pos
 = 
b
->
œ°
;

1100 *(
uöçå_t
 *Ë
e
.
ù
) {

1101 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1102 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1105 
b
->
œ°
 = 
e
.
pos
;

1108 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1110 (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

1112 i‡(
∂cf
->
body_£t
 =
NULL
 &&Ölcf->
up°ªam
.
∑ss_ªque°_body
) {

1114 
body
 = 
u
->
ªque°_bufs
;

1115 
u
->
ªque°_bufs
 = 
˛
;

1117 
body
) {

1118 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1119 i‡(
b
 =
NULL
) {

1120  
NGX_ERROR
;

1123 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1125 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1126 i‡(
˛
->
√xt
 =
NULL
) {

1127  
NGX_ERROR
;

1130 
˛
 = cl->
√xt
;

1131 
˛
->
buf
 = 
b
;

1133 
body
 = body->
√xt
;

1137 
u
->
ªque°_bufs
 = 
˛
;

1140 
b
->
Êush
 = 1;

1141 
˛
->
√xt
 = 
NULL
;

1143  
NGX_OK
;

1144 
	}
}

1147 
ngx_öt_t


1148 
	$ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1150 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1152 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1154 i‡(
˘x
 =
NULL
) {

1155  
NGX_OK
;

1158 
˘x
->
°©us
.
code
 = 0;

1159 
˘x
->
°©us
.
cou¡
 = 0;

1160 
˘x
->
°©us
.
°¨t
 = 
NULL
;

1161 
˘x
->
°©us
.
íd
 = 
NULL
;

1163 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

1164 
r
->
°©e
 = 0;

1166  
NGX_OK
;

1167 
	}
}

1170 
ngx_öt_t


1171 
	$ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

1173 
size_t
 
Àn
;

1174 
ngx_öt_t
 
rc
;

1175 
ngx_hâp_up°ªam_t
 *
u
;

1176 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1178 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1180 i‡(
˘x
 =
NULL
) {

1181  
NGX_ERROR
;

1184 
u
 = 
r
->
up°ªam
;

1186 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, &
˘x
->
°©us
);

1188 i‡(
rc
 =
NGX_AGAIN
) {

1189  
rc
;

1192 i‡(
rc
 =
NGX_ERROR
) {

1194 #i‡(
NGX_HTTP_CACHE
)

1196 i‡(
r
->
ˇche
) {

1197 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1198  
NGX_OK
;

1203 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1207 i‡(
u
->
ac˚l
) {

1208  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1212 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1213 
u
->
°©e
->
°©us
 = 
NGX_HTTP_OK
;

1215  
NGX_OK
;

1218 i‡(
u
->
°©e
) {

1219 
u
->
°©e
->
°©us
 = 
˘x
->°©us.
code
;

1222 
u
->
hódîs_ö
.
°©us_n
 = 
˘x
->
°©us
.
code
;

1224 
Àn
 = 
˘x
->
°©us
.
íd
 - ctx->°©us.
°¨t
;

1225 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1227 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1228 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1229  
NGX_ERROR
;

1232 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
˘x
->
°©us
.
°¨t
, 
Àn
);

1234 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1236 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1238 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_hódî
;

1240  
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
r
);

1241 
	}
}

1244 
ngx_öt_t


1245 
	$ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1247 
ngx_öt_t
 
rc
;

1248 
ngx_èbÀ_ñt_t
 *
h
;

1249 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1250 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1252 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1256 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1258 i‡(
rc
 =
NGX_OK
) {

1262 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1263 i‡(
h
 =
NULL
) {

1264  
NGX_ERROR
;

1267 
h
->
hash
 = 
r
->
hódî_hash
;

1269 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1270 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1272 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1273 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1 + h->key.len);

1274 i‡(
h
->
key
.
d©a
 =
NULL
) {

1275  
NGX_ERROR
;

1278 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1279 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1281 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1282 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1283 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1284 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1286 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1287 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1290 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1293 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1294 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1296 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1297  
NGX_ERROR
;

1300 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1302 &
h
->
key
, &h->
vÆue
);

1307 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1311 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1319 i‡(
r
->
up°ªam
->
hódîs_ö
.
£rvî
 =
NULL
) {

1320 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1321 i‡(
h
 =
NULL
) {

1322  
NGX_ERROR
;

1325 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash(ngx_hash(

1326 
	`ngx_hash
('s', 'e'), 'r'), 'v'), 'e'), 'r');

1328 
	`ngx_°r_£t
(&
h
->
key
, "Server");

1329 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1330 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "server";

1333 i‡(
r
->
up°ªam
->
hódîs_ö
.
d©e
 =
NULL
) {

1334 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1335 i‡(
h
 =
NULL
) {

1336  
NGX_ERROR
;

1339 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash('d', 'a'), 't'), 'e');

1341 
	`ngx_°r_£t
(&
h
->
key
, "Date");

1342 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1343 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "date";

1346  
NGX_OK
;

1349 i‡(
rc
 =
NGX_AGAIN
) {

1350  
NGX_AGAIN
;

1355 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1358  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1360 
	}
}

1364 
	$ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1366 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1370 
	}
}

1374 
	$ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1376 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1380 
	}
}

1383 
ngx_öt_t


1384 
	$ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1385 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1387 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1389 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1391 i‡(
˘x
 =
NULL
) {

1392 
v
->
nŸ_found
 = 1;

1393  
NGX_OK
;

1396 
v
->
Àn
 = 
˘x
->
v¨s
.
ho°_hódî
.len;

1397 
v
->
vÆid
 = 1;

1398 
v
->
no_ˇchóbÀ
 = 0;

1399 
v
->
nŸ_found
 = 0;

1400 
v
->
d©a
 = 
˘x
->
v¨s
.
ho°_hódî
.data;

1402  
NGX_OK
;

1403 
	}
}

1406 
ngx_öt_t


1407 
	$ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1408 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1410 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1412 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1414 i‡(
˘x
 =
NULL
) {

1415 
v
->
nŸ_found
 = 1;

1416  
NGX_OK
;

1419 
v
->
Àn
 = 
˘x
->
v¨s
.
p‹t
.len;

1420 
v
->
vÆid
 = 1;

1421 
v
->
no_ˇchóbÀ
 = 0;

1422 
v
->
nŸ_found
 = 0;

1423 
v
->
d©a
 = 
˘x
->
v¨s
.
p‹t
.data;

1425  
NGX_OK
;

1426 
	}
}

1429 
ngx_öt_t


1430 
	$ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1431 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1433 
u_ch¨
 *
p
;

1435 
v
->
vÆid
 = 1;

1436 
v
->
no_ˇchóbÀ
 = 0;

1437 
v
->
nŸ_found
 = 0;

1439 i‡(
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
 =
NULL
) {

1440 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

1441 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

1442  
NGX_OK
;

1445 
v
->
Àn
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.len

1446 + (", "Ë- 1 + 
r
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
;

1448 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
v
->
Àn
);

1449 i‡(
p
 =
NULL
) {

1450  
NGX_ERROR
;

1453 
v
->
d©a
 = 
p
;

1455 
p
 = 
	`ngx_c›y
’, 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.
d©a
,

1456 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.
Àn
);

1458 *
p
++ = ','; *p++ = ' ';

1460 
	`ngx_mem˝y
(
p
, 
r
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,Ñ->c⁄√˘i⁄->addr_ãxt.
Àn
);

1462  
NGX_OK
;

1463 
	}
}

1466 
ngx_öt_t


1467 
	$ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1468 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1470 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1472 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1474 i‡(
˘x
 =
NULL
) {

1475 
v
->
nŸ_found
 = 1;

1476  
NGX_OK
;

1479 
v
->
vÆid
 = 1;

1480 
v
->
no_ˇchóbÀ
 = 0;

1481 
v
->
nŸ_found
 = 0;

1483 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_SIZE_T_LEN
);

1485 i‡(
v
->
d©a
 =
NULL
) {

1486  
NGX_ERROR
;

1489 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uz", 
˘x
->
öã∫Æ_body_Àngth
) - v->data;

1491  
NGX_OK
;

1492 
	}
}

1495 
ngx_öt_t


1496 
	$ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1497 
size_t
 
¥efix
)

1499 
ngx_öt_t
 
rc
;

1500 
ngx_uöt_t
 
i
;

1501 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

1502 
ngx_hâp_¥oxy_ªdúe˘_t
 *
¥
;

1504 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1506 
¥
 = 
∂cf
->
ªdúe˘s
->
ñts
;

1508 i‡(
¥
 =
NULL
) {

1509  
NGX_DECLINED
;

1512 
i
 = 0; i < 
∂cf
->
ªdúe˘s
->
√…s
; i++) {

1513 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, &pr[i]);

1515 i‡(
rc
 !
NGX_DECLINED
) {

1516  
rc
;

1520  
NGX_DECLINED
;

1521 
	}
}

1524 
ngx_öt_t


1525 
	$ngx_hâp_¥oxy_ªwrôe_ªdúe˘_ãxt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1526 
size_t
 
¥efix
, 
ngx_hâp_¥oxy_ªdúe˘_t
 *
¥
)

1528 
size_t
 
Àn
;

1529 
u_ch¨
 *
d©a
, *
p
;

1531 i‡(
¥
->
ªdúe˘
.
Àn
 > 
h
->
vÆue
.À¿- 
¥efix


1532 || 
	`ngx_r°∫cmp
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
¥
->
ªdúe˘
.data,

1533 
¥
->
ªdúe˘
.
Àn
) != 0)

1535  
NGX_DECLINED
;

1538 
Àn
 = 
¥
->
ª∂a˚mít
.
ãxt
.À¿+ 
h
->
vÆue
.À¿-Ör->
ªdúe˘
.len;

1540 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1541 i‡(
d©a
 =
NULL
) {

1542  
NGX_ERROR
;

1545 
p
 = 
	`ngx_c›y
(
d©a
, 
h
->
vÆue
.d©a, 
¥efix
);

1547 i‡(
¥
->
ª∂a˚mít
.
ãxt
.
Àn
) {

1548 
p
 = 
	`ngx_c›y
’, 
¥
->
ª∂a˚mít
.
ãxt
.
d©a
,Ör->ª∂a˚mít.ãxt.
Àn
);

1551 
	`ngx_mem˝y
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
¥
->
ªdúe˘
.
Àn
,

1552 
h
->
vÆue
.
Àn
 - 
¥
->
ªdúe˘
.À¿- 
¥efix
);

1554 
h
->
vÆue
.
Àn
 =Üen;

1555 
h
->
vÆue
.
d©a
 = data;

1557  
NGX_OK
;

1558 
	}
}

1561 
ngx_öt_t


1562 
	$ngx_hâp_¥oxy_ªwrôe_ªdúe˘_v¨s
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1563 
size_t
 
¥efix
, 
ngx_hâp_¥oxy_ªdúe˘_t
 *
¥
)

1565 
size_t
 
Àn
;

1566 
u_ch¨
 *
d©a
, *
p
;

1567 
ngx_hâp_s¸ùt_code_±
 
code
;

1568 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

1569 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1571 i‡(
¥
->
ªdúe˘
.
Àn
 > 
h
->
vÆue
.À¿- 
¥efix


1572 || 
	`ngx_r°∫cmp
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
¥
->
ªdúe˘
.data,

1573 
¥
->
ªdúe˘
.
Àn
) != 0)

1575  
NGX_DECLINED
;

1578 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1580 
e
.
ù
 = 
¥
->
ª∂a˚mít
.
v¨s
.
Àngths
;

1581 
e
.
ªque°
 = 
r
;

1583 
Àn
 = 
h
->
vÆue
.À¿- 
¥
->
ªdúe˘
.len;

1585 *(
uöçå_t
 *Ë
e
.
ù
) {

1586 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

1587 
Àn
 +
	`lcode
(&
e
);

1590 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1591 i‡(
d©a
 =
NULL
) {

1592  
NGX_ERROR
;

1595 
p
 = 
	`ngx_c›y
(
d©a
, 
h
->
vÆue
.d©a, 
¥efix
);

1597 
e
.
ù
 = 
¥
->
ª∂a˚mít
.
v¨s
.
vÆues
;

1598 
e
.
pos
 = 
p
;

1600 *(
uöçå_t
 *Ë
e
.
ù
) {

1601 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1602 
	`code
(&
e
);

1605 
	`ngx_mem˝y
(
e
.
pos
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
¥
->
ªdúe˘
.
Àn
,

1606 
h
->
vÆue
.
Àn
 - 
¥
->
ªdúe˘
.À¿- 
¥efix
);

1608 
h
->
vÆue
.
Àn
 =Üen;

1609 
h
->
vÆue
.
d©a
 = data;

1611  
NGX_OK
;

1612 
	}
}

1615 
ngx_öt_t


1616 
	$ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

1618 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

1620 
v
 = 
ngx_hâp_¥oxy_v¨s
; v->
«me
.
Àn
; v++) {

1621 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

1622 i‡(
v¨
 =
NULL
) {

1623  
NGX_ERROR
;

1626 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

1627 
v¨
->
d©a
 = 
v
->data;

1630  
NGX_OK
;

1631 
	}
}

1635 
	$ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1637 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
;

1639 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_¥oxy_loc_c⁄f_t
));

1640 i‡(
c⁄f
 =
NULL
) {

1641  
NULL
;

1670 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1671 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1672 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1673 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1675 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1676 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1677 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1679 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1680 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1682 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1683 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1684 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1686 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1687 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1689 #i‡(
NGX_HTTP_CACHE
)

1690 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1691 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1692 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1693 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1694 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1697 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1698 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1700 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1701 #i‡(
NGX_HTTP_SSL
)

1702 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

1706 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1708 
c⁄f
->
ªdúe˘
 = 
NGX_CONF_UNSET
;

1709 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1711 
c⁄f
->
hódîs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

1712 
c⁄f
->
hódîs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

1714 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "proxy");

1716  
c⁄f
;

1717 
	}
}

1721 
	$ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1723 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1724 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1726 
u_ch¨
 *
p
;

1727 
size_t
 
size
;

1728 
ngx_hash_öô_t
 
hash
;

1729 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1730 
ngx_hâp_¥oxy_ªdúe˘_t
 *
¥
;

1731 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1733 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1734 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

1735 
¥ev
->
up°ªam
.
°‹e
, 0);

1737 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1738 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1739 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1743 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1744 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1746 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1747 
¥ev
->
up°ªam
.
buf„rög
, 1);

1749 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1750 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1752 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1753 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1755 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1756 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1758 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1759 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1761 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1762 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1764 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1765 
¥ev
->
up°ªam
.
buf„r_size
,

1766 (
size_t
Ë
ngx_∑gesize
);

1768 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1769 8, 
ngx_∑gesize
);

1771 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1772 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1774  
NGX_CONF_ERROR
;

1778 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1779 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1780 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1784 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1785 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1786 
NGX_CONF_UNSET_SIZE
);

1788 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1789 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1791 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1792 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1795 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1796 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1801  
NGX_CONF_ERROR
;

1804 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1805 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1807 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1811  
NGX_CONF_ERROR
;

1815 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1816 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1817 
NGX_CONF_UNSET_SIZE
);

1819 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1820 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1822 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1823 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1826 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1827 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1832  
NGX_CONF_ERROR
;

1835 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1836 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1837 
NGX_CONF_UNSET_SIZE
);

1839 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1840 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1842 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1843 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1846 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1847 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

1849 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1855  
NGX_CONF_ERROR
;

1859 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1860 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1861 
NGX_CONF_BITMASK_SET
);

1864 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1865 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1866 (
NGX_CONF_BITMASK_SET


1867 |
NGX_HTTP_UPSTREAM_FT_ERROR


1868 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1870 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1871 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1872 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1875 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1876 
¥ev
->
up°ªam
.
ãmp_∑th
,

1877 &
ngx_hâp_¥oxy_ãmp_∑th
)

1878 !
NGX_OK
)

1880  
NGX_CONF_ERROR
;

1884 #i‡(
NGX_HTTP_CACHE
)

1886 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1887 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1889 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1890 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1892 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1894 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1896 &
shm_z⁄e
->
shm
.
«me
);

1898  
NGX_CONF_ERROR
;

1901 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1902 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1904 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1905 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1906 (
NGX_CONF_BITMASK_SET


1907 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1909 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1910 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1911 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1914 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1915 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1918 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1919 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1922 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1924 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1925 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1927 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1928 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1930 i‡(
c⁄f
->
up°ªam
.
no_ˇche
 && c⁄f->up°ªam.
ˇche_by∑ss
 =
NULL
) {

1931 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

1936 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1937 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1939 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1940 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1945 i‡(
c⁄f
->
mëhod
.
Àn
 == 0) {

1946 
c⁄f
->
mëhod
 = 
¥ev
->method;

1949 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
] = ' ';

1950 
c⁄f
->
mëhod
.
Àn
++;

1953 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1954 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1955 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1956 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1958 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1959 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1961 #i‡(
NGX_HTTP_SSL
)

1962 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

1963 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

1966 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªdúe˘
, 
¥ev
->redirect, 1);

1968 i‡(
c⁄f
->
ªdúe˘
) {

1970 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

1971 
c⁄f
->
ªdúe˘s
 = 
¥ev
->redirects;

1974 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
 && c⁄f->
uæ
.
d©a
) {

1976 
c⁄f
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

1977 (
ngx_hâp_¥oxy_ªdúe˘_t
));

1978 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

1979  
NGX_CONF_ERROR
;

1982 
¥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ªdúe˘s
);

1983 i‡(
¥
 =
NULL
) {

1984  
NGX_CONF_ERROR
;

1987 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘_ãxt
;

1989 i‡(
c⁄f
->
v¨s
.
uri
.
Àn
) {

1990 
¥
->
ªdúe˘
 = 
c⁄f
->
uæ
;

1991 
¥
->
ª∂a˚mít
.
ãxt
 = 
c⁄f
->
loˇti⁄
;

1994 
¥
->
ªdúe˘
.
Àn
 = 
c⁄f
->
uæ
.len + ("/") - 1;

1996 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
ªdúe˘
.
Àn
);

1997 i‡(
p
 =
NULL
) {

1998  
NGX_CONF_ERROR
;

2001 
¥
->
ªdúe˘
.
d©a
 = 
p
;

2003 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
uæ
.
d©a
, c⁄f->uæ.
Àn
);

2004 *
p
 = '/';

2006 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
ãxt
, "/");

2011 #i‡(
NGX_HTTP_SSL
)

2012 i‡(
c⁄f
->
up°ªam
.
s¶
 =
NULL
) {

2013 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

2017 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_max_size
,

2018 
¥ev
->
hódîs_hash_max_size
, 512);

2020 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_buckë_size
,

2021 
¥ev
->
hódîs_hash_buckë_size
, 64);

2023 
c⁄f
->
hódîs_hash_buckë_size
 = 
	`ngx_Æign
(conf->headers_hash_bucket_size,

2024 
ngx_ˇchñöe_size
);

2026 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

2027 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

2028 
hash
.
«me
 = "proxy_headers_hash";

2030 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

2031 &
¥ev
->
up°ªam
, 
ngx_hâp_¥oxy_hide_hódîs
, &
hash
)

2032 !
NGX_OK
)

2034  
NGX_CONF_ERROR
;

2037 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

2038 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

2039 
c⁄f
->
v¨s
 = 
¥ev
->vars;

2042 i‡(
c⁄f
->
¥oxy_Àngths
 =
NULL
) {

2043 
c⁄f
->
¥oxy_Àngths
 = 
¥ev
->proxy_lengths;

2044 
c⁄f
->
¥oxy_vÆues
 = 
¥ev
->proxy_values;

2047 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
¥oxy_Àngths
) {

2048 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2049 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

2050 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

2051 
c⁄f
->
loˇti⁄
 = 
¥ev
->location;

2055 i‡(
c⁄f
->
body_sour˚
.
d©a
 =
NULL
) {

2056 
c⁄f
->
body_sour˚
 = 
¥ev
->body_source;

2057 
c⁄f
->
body_£t_Àn
 = 
¥ev
->body_set_len;

2058 
c⁄f
->
body_£t
 = 
¥ev
->body_set;

2061 i‡(
c⁄f
->
body_sour˚
.
d©a
 && c⁄f->
body_£t_Àn
 =
NULL
) {

2063 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2065 
sc
.
cf
 = cf;

2066 
sc
.
sour˚
 = &
c⁄f
->
body_sour˚
;

2067 
sc
.
Êushes
 = &
c⁄f
->flushes;

2068 
sc
.
Àngths
 = &
c⁄f
->
body_£t_Àn
;

2069 
sc
.
vÆues
 = &
c⁄f
->
body_£t
;

2070 
sc
.
com∂ëe_Àngths
 = 1;

2071 
sc
.
com∂ëe_vÆues
 = 1;

2073 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2074  
NGX_CONF_ERROR
;

2078 i‡(
	`ngx_hâp_¥oxy_mîge_hódîs
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

2079  
NGX_CONF_ERROR
;

2082  
NGX_CONF_OK
;

2083 
	}
}

2086 
ngx_öt_t


2087 
	$ngx_hâp_¥oxy_mîge_hódîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,

2088 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
)

2090 
u_ch¨
 *
p
;

2091 
size_t
 
size
;

2092 
uöçå_t
 *
code
;

2093 
ngx_uöt_t
 
i
;

2094 
ngx_¨øy_t
 
hódîs_«mes
, 
hódîs_mîged
;

2095 
ngx_keyvÆ_t
 *
§c
, *
s
, *
h
;

2096 
ngx_hash_key_t
 *
hk
;

2097 
ngx_hash_öô_t
 
hash
;

2098 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2099 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

2101 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2102 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

2103 
c⁄f
->
hódîs_£t_Àn
 = 
¥ev
->headers_set_len;

2104 
c⁄f
->
hódîs_£t
 = 
¥ev
->headers_set;

2105 
c⁄f
->
hódîs_£t_hash
 = 
¥ev
->headers_set_hash;

2106 
c⁄f
->
hódîs_sour˚
 = 
¥ev
->headers_source;

2109 i‡(
c⁄f
->
hódîs_£t_hash
.
buckës


2110 && ((
c⁄f
->
body_sour˚
.
d©a
 =
NULL
)

2111 =(
¥ev
->
body_sour˚
.
d©a
 =
NULL
))

2112 #i‡(
NGX_HTTP_CACHE
)

2113 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
Ë=(
¥ev
->upstream.cache == NULL))

2117  
NGX_OK
;

2121 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

2122 !
NGX_OK
)

2124  
NGX_ERROR
;

2127 i‡(
	`ngx_¨øy_öô
(&
hódîs_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

2128 !
NGX_OK
)

2130  
NGX_ERROR
;

2133 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2134 
c⁄f
->
hódîs_sour˚
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

2135 (
ngx_keyvÆ_t
));

2136 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2137  
NGX_ERROR
;

2141 
c⁄f
->
hódîs_£t_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

2142 i‡(
c⁄f
->
hódîs_£t_Àn
 =
NULL
) {

2143  
NGX_ERROR
;

2146 
c⁄f
->
hódîs_£t
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

2147 i‡(
c⁄f
->
hódîs_£t
 =
NULL
) {

2148  
NGX_ERROR
;

2152 #i‡(
NGX_HTTP_CACHE
)

2154 
h
 = 
c⁄f
->
up°ªam
.
ˇche
 ? 
ngx_hâp_¥oxy_ˇche_hódîs
:

2155 
ngx_hâp_¥oxy_hódîs
;

2158 
h
 = 
ngx_hâp_¥oxy_hódîs
;

2162 
§c
 = 
c⁄f
->
hódîs_sour˚
->
ñts
;

2163 
i
 = 0; i < 
c⁄f
->
hódîs_sour˚
->
√…s
; i++) {

2165 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

2166 i‡(
s
 =
NULL
) {

2167  
NGX_ERROR
;

2170 *
s
 = 
§c
[
i
];

2173 
h
->
key
.
Àn
) {

2175 
§c
 = 
hódîs_mîged
.
ñts
;

2176 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

2177 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

2178 
√xt
;

2182 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

2183 i‡(
s
 =
NULL
) {

2184  
NGX_ERROR
;

2187 *
s
 = *
h
;

2189 
√xt
:

2191 
h
++;

2194 i‡(
c⁄f
->
body_sour˚
.
d©a
) {

2195 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

2196 i‡(
s
 =
NULL
) {

2197  
NGX_ERROR
;

2200 
	`ngx_°r_£t
(&
s
->
key
, "Content-Length");

2201 
	`ngx_°r_£t
(&
s
->
vÆue
, "$proxy_internal_body_length");

2205 
§c
 = 
hódîs_mîged
.
ñts
;

2206 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

2208 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

2209 i‡(
hk
 =
NULL
) {

2210  
NGX_ERROR
;

2213 
hk
->
key
 = 
§c
[
i
].key;

2214 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2215 
hk
->
vÆue
 = (*) 1;

2217 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

2221 i‡(
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
§c
[
i
].
vÆue
) == 0) {

2222 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

2223 (
ngx_hâp_s¸ùt_c›y_code_t
));

2224 i‡(
c›y
 =
NULL
) {

2225  
NGX_ERROR
;

2228 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

2229 
ngx_hâp_s¸ùt_c›y_Àn_code
;

2230 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

2231 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

2234 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2235 + 
§c
[
i
].
key
.
Àn
 + (": ") - 1

2236 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1

2237 + (
uöçå_t
) - 1)

2238 & ~((
uöçå_t
) - 1);

2240 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

2241 i‡(
c›y
 =
NULL
) {

2242  
NGX_ERROR
;

2245 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2246 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

2247 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

2249 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2251 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2252 *
p
++ = ':'; *p++ = ' ';

2253 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
vÆue
.
d©a
, src[i].vÆue.
Àn
);

2254 *
p
++ = 
CR
; *∞
LF
;

2257 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

2258 (
ngx_hâp_s¸ùt_c›y_code_t
));

2259 i‡(
c›y
 =
NULL
) {

2260  
NGX_ERROR
;

2263 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

2264 
ngx_hâp_s¸ùt_c›y_Àn_code
;

2265 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

2268 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2269 + 
§c
[
i
].
key
.
Àn
 + (": "Ë- 1 + (
uöçå_t
) - 1)

2270 & ~((
uöçå_t
) - 1);

2272 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

2273 i‡(
c›y
 =
NULL
) {

2274  
NGX_ERROR
;

2277 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2278 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

2280 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2281 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2282 *
p
++ = ':'; *p = ' ';

2285 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2287 
sc
.
cf
 = cf;

2288 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

2289 
sc
.
Êushes
 = &
c⁄f
->flushes;

2290 
sc
.
Àngths
 = &
c⁄f
->
hódîs_£t_Àn
;

2291 
sc
.
vÆues
 = &
c⁄f
->
hódîs_£t
;

2293 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2294  
NGX_ERROR
;

2298 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

2299 (
ngx_hâp_s¸ùt_c›y_code_t
));

2300 i‡(
c›y
 =
NULL
) {

2301  
NGX_ERROR
;

2304 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

2305 
ngx_hâp_s¸ùt_c›y_Àn_code
;

2306 
c›y
->
Àn
 = (
CRLF
) - 1;

2309 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2310 + (
CRLF
Ë- 1 + (
uöçå_t
) - 1)

2311 & ~((
uöçå_t
) - 1);

2313 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

2314 i‡(
c›y
 =
NULL
) {

2315  
NGX_ERROR
;

2318 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2319 
c›y
->
Àn
 = (
CRLF
) - 1;

2321 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2322 *
p
++ = 
CR
; *∞
LF
;

2325 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
, (
uöçå_t
));

2326 i‡(
code
 =
NULL
) {

2327  
NGX_ERROR
;

2330 *
code
 = (
uöçå_t
Ë
NULL
;

2332 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, (
uöçå_t
));

2333 i‡(
code
 =
NULL
) {

2334  
NGX_ERROR
;

2337 *
code
 = (
uöçå_t
Ë
NULL
;

2340 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
, (
uöçå_t
));

2341 i‡(
code
 =
NULL
) {

2342  
NGX_ERROR
;

2345 *
code
 = (
uöçå_t
Ë
NULL
;

2348 
hash
.hash = &
c⁄f
->
hódîs_£t_hash
;

2349 
hash
.
key
 = 
ngx_hash_key_lc
;

2350 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

2351 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

2352 
hash
.
«me
 = "proxy_headers_hash";

2353 
hash
.
poﬁ
 = 
cf
->pool;

2354 
hash
.
ãmp_poﬁ
 = 
NULL
;

2356  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

2357 
	}
}

2361 
	$ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2363 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

2365 
size_t
 
add
;

2366 
u_sh‹t
 
p‹t
;

2367 
ngx_°r_t
 *
vÆue
, *
uæ
;

2368 
ngx_uæ_t
 
u
;

2369 
ngx_uöt_t
 
n
;

2370 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2371 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2373 i‡(
∂cf
->
up°ªam
.up°ªam ||Ölcf->
¥oxy_Àngths
) {

2377 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2379 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

2381 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

2382 
˛cf
->
auto_ªdúe˘
 = 1;

2385 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2387 
uæ
 = &
vÆue
[1];

2389 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

2391 i‡(
n
) {

2393 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2395 
sc
.
cf
 = cf;

2396 
sc
.
sour˚
 = 
uæ
;

2397 
sc
.
Àngths
 = &
∂cf
->
¥oxy_Àngths
;

2398 
sc
.
vÆues
 = &
∂cf
->
¥oxy_vÆues
;

2399 
sc
.
v¨übÀs
 = 
n
;

2400 
sc
.
com∂ëe_Àngths
 = 1;

2401 
sc
.
com∂ëe_vÆues
 = 1;

2403 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2404  
NGX_CONF_ERROR
;

2407 #i‡(
NGX_HTTP_SSL
)

2408 i‡(
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, 
∂cf
Ë!
NGX_OK
) {

2409  
NGX_CONF_ERROR
;

2413  
NGX_CONF_OK
;

2416 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "http://", 7) == 0) {

2417 
add
 = 7;

2418 
p‹t
 = 80;

2420 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "https://", 8) == 0) {

2422 #i‡(
NGX_HTTP_SSL
)

2423 i‡(
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, 
∂cf
Ë!
NGX_OK
) {

2424  
NGX_CONF_ERROR
;

2427 
add
 = 8;

2428 
p‹t
 = 443;

2430 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2432  
NGX_CONF_ERROR
;

2436 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalid URLÖrefix");

2437  
NGX_CONF_ERROR
;

2440 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

2442 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

2443 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

2444 
u
.
deÁu…_p‹t
 = 
p‹t
;

2445 
u
.
uri_∑π
 = 1;

2446 
u
.
no_ªsﬁve
 = 1;

2448 
∂cf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

2449 i‡(
∂cf
->
up°ªam
.up°ªam =
NULL
) {

2450  
NGX_CONF_ERROR
;

2453 
∂cf
->
v¨s
.
schema
.
Àn
 = 
add
;

2454 
∂cf
->
v¨s
.
schema
.
d©a
 = 
uæ
->data;

2455 
∂cf
->
v¨s
.
key_°¨t
 =Ölcf->v¨s.
schema
;

2457 
	`ngx_hâp_¥oxy_£t_v¨s
(&
u
, &
∂cf
->
v¨s
);

2459 
∂cf
->
loˇti⁄
 = 
˛cf
->
«me
;

2461 i‡(
˛cf
->
«med


2462 #i‡(
NGX_PCRE
)

2463 || 
˛cf
->
ªgex


2465 || 
˛cf
->
n⁄ame
)

2467 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

2468 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2474  
NGX_CONF_ERROR
;

2477 
∂cf
->
loˇti⁄
.
Àn
 = 0;

2480 
∂cf
->
uæ
 = *url;

2482  
NGX_CONF_OK
;

2483 
	}
}

2487 
	$ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2489 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

2491 
u_ch¨
 *
p
;

2492 
ngx_°r_t
 *
vÆue
;

2493 
ngx_¨øy_t
 *
v¨s_Àngths
, *
v¨s_vÆues
;

2494 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2495 
ngx_hâp_¥oxy_ªdúe˘_t
 *
¥
;

2497 i‡(
∂cf
->
ªdúe˘
 == 0) {

2498  
NGX_CONF_OK
;

2501 
∂cf
->
ªdúe˘
 = 1;

2503 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2505 i‡(
cf
->
¨gs
->
√…s
 == 2) {

2506 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2507 
∂cf
->
ªdúe˘
 = 0;

2508 
∂cf
->
ªdúe˘s
 = 
NULL
;

2509  
NGX_CONF_OK
;

2512 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "false") == 0) {

2513 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

2515 
∂cf
->
ªdúe˘
 = 0;

2516 
∂cf
->
ªdúe˘s
 = 
NULL
;

2517  
NGX_CONF_OK
;

2520 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") != 0) {

2521 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2522 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

2523  
NGX_CONF_ERROR
;

2527 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

2528 
∂cf
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

2529 (
ngx_hâp_¥oxy_ªdúe˘_t
));

2530 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

2531  
NGX_CONF_ERROR
;

2535 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
ªdúe˘s
);

2536 i‡(
¥
 =
NULL
) {

2537  
NGX_CONF_ERROR
;

2540 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") == 0) {

2541 i‡(
∂cf
->
¥oxy_Àngths
) {

2542 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2545  
NGX_CONF_ERROR
;

2548 i‡(
∂cf
->
uæ
.
d©a
 =
NULL
) {

2549 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2552  
NGX_CONF_ERROR
;

2555 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘_ãxt
;

2557 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

2558 
¥
->
ªdúe˘
 = 
∂cf
->
uæ
;

2559 
¥
->
ª∂a˚mít
.
ãxt
 = 
∂cf
->
loˇti⁄
;

2562 
¥
->
ªdúe˘
.
Àn
 = 
∂cf
->
uæ
.len + ("/") - 1;

2564 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
ªdúe˘
.
Àn
);

2565 i‡(
p
 =
NULL
) {

2566  
NGX_CONF_ERROR
;

2569 
¥
->
ªdúe˘
.
d©a
 = 
p
;

2571 
p
 = 
	`ngx_˝ymem
’, 
∂cf
->
uæ
.
d©a
,Ölcf->uæ.
Àn
);

2572 *
p
 = '/';

2574 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
ãxt
, "/");

2577  
NGX_CONF_OK
;

2580 i‡(
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[2]) == 0) {

2581 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘_ãxt
;

2582 
¥
->
ªdúe˘
 = 
vÆue
[1];

2583 
¥
->
ª∂a˚mít
.
ãxt
 = 
vÆue
[2];

2585  
NGX_CONF_OK
;

2588 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2590 
v¨s_Àngths
 = 
NULL
;

2591 
v¨s_vÆues
 = 
NULL
;

2593 
sc
.
cf
 = cf;

2594 
sc
.
sour˚
 = &
vÆue
[2];

2595 
sc
.
Àngths
 = &
v¨s_Àngths
;

2596 
sc
.
vÆues
 = &
v¨s_vÆues
;

2597 
sc
.
com∂ëe_Àngths
 = 1;

2598 
sc
.
com∂ëe_vÆues
 = 1;

2600 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2601  
NGX_CONF_ERROR
;

2604 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘_v¨s
;

2605 
¥
->
ªdúe˘
 = 
vÆue
[1];

2606 
¥
->
ª∂a˚mít
.
v¨s
.
Àngths
 = 
v¨s_Àngths
->
ñts
;

2607 
¥
->
ª∂a˚mít
.
v¨s
.
vÆues
 = 
v¨s_vÆues
->
ñts
;

2609  
NGX_CONF_OK
;

2610 
	}
}

2614 
	$ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2616 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

2618 
ngx_°r_t
 *
vÆue
;

2619 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2621 i‡(
∂cf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET


2622 || 
∂cf
->
up°ªam
.
°‹e_Àngths
)

2627 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2629 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2630 
∂cf
->
up°ªam
.
°‹e
 = 0;

2631  
NGX_CONF_OK
;

2634 #i‡(
NGX_HTTP_CACHE
)

2636 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


2637 && 
∂cf
->
up°ªam
.
ˇche
 !
NULL
)

2644 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

2645 
∂cf
->
up°ªam
.
°‹e
 = 1;

2646  
NGX_CONF_OK
;

2650 
vÆue
[1].
Àn
++;

2652 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2654 
sc
.
cf
 = cf;

2655 
sc
.
sour˚
 = &
vÆue
[1];

2656 
sc
.
Àngths
 = &
∂cf
->
up°ªam
.
°‹e_Àngths
;

2657 
sc
.
vÆues
 = &
∂cf
->
up°ªam
.
°‹e_vÆues
;

2658 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

2659 
sc
.
com∂ëe_Àngths
 = 1;

2660 
sc
.
com∂ëe_vÆues
 = 1;

2662 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2663  
NGX_CONF_ERROR
;

2666  
NGX_CONF_OK
;

2667 
	}
}

2670 #i‡(
NGX_HTTP_CACHE
)

2673 
	$ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2675 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

2677 
ngx_°r_t
 *
vÆue
;

2679 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2681 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

2685 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2686 
∂cf
->
up°ªam
.
ˇche
 = 
NULL
;

2687  
NGX_CONF_OK
;

2690 i‡(
∂cf
->
up°ªam
.
°‹e
 > 0 ||Ölcf->up°ªam.
°‹e_Àngths
) {

2694 
∂cf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

2695 &
ngx_hâp_¥oxy_moduÀ
);

2696 i‡(
∂cf
->
up°ªam
.
ˇche
 =
NULL
) {

2697  
NGX_CONF_ERROR
;

2700  
NGX_CONF_OK
;

2701 
	}
}

2705 
	$ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2707 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

2709 
ngx_°r_t
 *
vÆue
;

2710 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

2712 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2714 i‡(
∂cf
->
ˇche_key
.
vÆue
.
Àn
) {

2718 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

2720 
ccv
.
cf
 = cf;

2721 
ccv
.
vÆue
 = &value[1];

2722 
ccv
.
com∂ex_vÆue
 = &
∂cf
->
ˇche_key
;

2724 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2725  
NGX_CONF_ERROR
;

2728  
NGX_CONF_OK
;

2729 
	}
}

2735 
	$ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

2737 #i‡(
NGX_FREEBSD
)

2738 
ssize_t
 *
≈
 = 
d©a
;

2740 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

2741 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2744 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

2746  
NGX_CONF_ERROR
;

2749 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

2750 
ssize_t
 *
≈
 = 
d©a
;

2752 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

2755 *
≈
 = 0;

2759  
NGX_CONF_OK
;

2760 
	}
}

2763 #i‡(
NGX_HTTP_SSL
)

2765 
ngx_öt_t


2766 
	$ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

2768 
ngx_poﬁ_˛ónup_t
 *
˛n
;

2770 
∂cf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

2771 i‡(
∂cf
->
up°ªam
.
s¶
 =
NULL
) {

2772  
NGX_ERROR
;

2775 
∂cf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

2777 i‡(
	`ngx_s¶_¸óã
(
∂cf
->
up°ªam
.
s¶
,

2778 
NGX_SSL_SSLv2
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


2779 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
,

2780 
NULL
)

2781 !
NGX_OK
)

2783  
NGX_ERROR
;

2786 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

2787 i‡(
˛n
 =
NULL
) {

2788  
NGX_ERROR
;

2791 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

2792 
˛n
->
d©a
 = 
∂cf
->
up°ªam
.
s¶
;

2794  
NGX_OK
;

2795 
	}
}

2801 
	$ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
)

2803 i‡(
u
->
Ámûy
 !
AF_UNIX
) {

2805 i‡(
u
->
no_p‹t
 || u->
p‹t
 =u->
deÁu…_p‹t
) {

2807 
v
->
ho°_hódî
 = 
u
->
ho°
;

2809 i‡(
u
->
deÁu…_p‹t
 == 80) {

2810 
	`ngx_°r_£t
(&
v
->
p‹t
, "80");

2813 
	`ngx_°r_£t
(&
v
->
p‹t
, "443");

2817 
v
->
ho°_hódî
.
Àn
 = 
u
->
ho°
.À¿+ 1 + u->
p‹t_ãxt
.len;

2818 
v
->
ho°_hódî
.
d©a
 = 
u
->
ho°
.data;

2819 
v
->
p‹t
 = 
u
->
p‹t_ãxt
;

2822 
v
->
key_°¨t
.
Àn
 +v->
ho°_hódî
.len;

2825 
	`ngx_°r_£t
(&
v
->
ho°_hódî
, "localhost");

2826 
	`ngx_°r_nuŒ
(&
v
->
p‹t
);

2827 
v
->
key_°¨t
.
Àn
 +("unix:"Ë- 1 + 
u
->
ho°
.len + 1;

2830 
v
->
uri
 = 
u
->uri;

2831 
	}
}

	@src/http/modules/ngx_http_random_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_Êag_t
 
	míabÀ
;

15 } 
	tngx_hâp_øndom_ödex_loc_c⁄f_t
;

18 
	#NGX_HTTP_RANDOM_INDEX_PREALLOCATE
 50

	)

21 
ngx_öt_t
 
ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

23 
ngx_öt_t
 
ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

26 *
∑ª¡
, *
chûd
);

29 
ngx_comm™d_t
 
	gngx_hâp_øndom_ödex_comm™ds
[] = {

31 { 
ngx_°rög
("random_index"),

32 
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

33 
ngx_c⁄f_£t_Êag_¶Ÿ
,

34 
NGX_HTTP_LOC_CONF_OFFSET
,

35 
off£tof
(
ngx_hâp_øndom_ödex_loc_c⁄f_t
, 
íabÀ
),

36 
NULL
 },

38 
ngx_nuŒ_comm™d


42 
ngx_hâp_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ_˘x
 = {

43 
NULL
,

44 
ngx_hâp_øndom_ödex_öô
,

46 
NULL
,

47 
NULL
,

49 
NULL
,

50 
NULL
,

52 
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
,

53 
ngx_hâp_øndom_ödex_mîge_loc_c⁄f


57 
ngx_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_hâp_øndom_ödex_moduÀ_˘x
,

60 
ngx_hâp_øndom_ödex_comm™ds
,

61 
NGX_HTTP_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


73 
ngx_öt_t


74 
	$ngx_hâp_øndom_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

76 
u_ch¨
 *
œ°
, *
fûíame
;

77 
size_t
 
Àn
, 
Æloˇãd
, 
roŸ
;

78 
ngx_îr_t
 
îr
;

79 
ngx_öt_t
 
rc
;

80 
ngx_°r_t
 
∑th
, 
uri
, *
«me
;

81 
ngx_dú_t
 
dú
;

82 
ngx_uöt_t
 
n
, 
Àvñ
;

83 
ngx_¨øy_t
 
«mes
;

84 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
æcf
;

86 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

87  
NGX_DECLINED
;

90 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

91  
NGX_DECLINED
;

94 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_øndom_ödex_moduÀ
);

96 i‡(!
æcf
->
íabÀ
) {

97  
NGX_DECLINED
;

100 #i‡(
NGX_HAVE_D_TYPE
)

101 
Àn
 = 
NGX_DIR_MASK_LEN
;

103 
Àn
 = 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

106 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Àn
);

107 i‡(
œ°
 =
NULL
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

111 
Æloˇãd
 = 
∑th
.
Àn
;

113 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
 - 1;

114 
∑th
.
d©a
[∑th.
Àn
] = '\0';

116 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

117 "hâ∞øndom index: \"%s\"", 
∑th
.
d©a
);

119 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 =
NGX_ENOENT


123 || 
îr
 =
NGX_ENOTDIR


124 || 
îr
 =
NGX_ENAMETOOLONG
)

126 
Àvñ
 = 
NGX_LOG_ERR
;

127 
rc
 = 
NGX_HTTP_NOT_FOUND
;

129 } i‡(
îr
 =
NGX_EACCES
) {

130 
Àvñ
 = 
NGX_LOG_ERR
;

131 
rc
 = 
NGX_HTTP_FORBIDDEN
;

134 
Àvñ
 = 
NGX_LOG_CRIT
;

135 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

138 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

139 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

141  
rc
;

144 i‡(
	`ngx_¨øy_öô
(&
«mes
, 
r
->
poﬁ
, 32, (
ngx_°r_t
)Ë!
NGX_OK
) {

145  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

148 
fûíame
 = 
∑th
.
d©a
;

149 
fûíame
[
∑th
.
Àn
] = '/';

152 
	`ngx_£t_î∫o
(0);

154 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

155 
îr
 = 
ngx_î∫o
;

157 i‡(
îr
 !
NGX_ENOMOREFILES
) {

158 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

159 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

160  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

167 "hâ∞øndom index fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

169 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

173 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

175 i‡(
dú
.
ty≥
 =0 || 
	`ngx_de_is_lök
(&dir)) {

179 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

180 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

181 + 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

183 
fûíame
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

184 i‡(
fûíame
 =
NULL
) {

185  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

188 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

189 *
œ°
++ = '/';

192 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

194 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

195 
îr
 = 
ngx_î∫o
;

197 i‡(
îr
 !
NGX_ENOENT
) {

198 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

199 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

200  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

203 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

204 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

205 
ngx_de_lök_öfo_n
 " \"%s\" failed",

206 
fûíame
);

207  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

212 i‡(!
	`ngx_de_is_fûe
(&
dú
)) {

216 
«me
 = 
	`ngx_¨øy_push
(&
«mes
);

217 i‡(
«me
 =
NULL
) {

218  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

221 
«me
->
Àn
 =Üen;

223 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

224 i‡(
«me
->
d©a
 =
NULL
) {

225  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

228 
	`ngx_mem˝y
(
«me
->
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
);

231 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

232 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

233 
ngx_˛o£_dú_n
 " \"%s\" faûed", &
∑th
);

236 
n
 = 
«mes
.
√…s
;

238 i‡(
n
 == 0) {

239  
NGX_DECLINED
;

242 
«me
 = 
«mes
.
ñts
;

244 
n
 = (
ngx_uöt_t
Ë(((
uöt64_t
Ë
	`ngx_øndom
() *Ç) / 0x80000000);

246 
uri
.
Àn
 = 
r
->uri.À¿+ 
«me
[
n
].len;

248 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

249 i‡(
uri
.
d©a
 =
NULL
) {

250  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

253 
œ°
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

254 
	`ngx_mem˝y
(
œ°
, 
«me
[
n
].
d©a
,Çame[n].
Àn
);

256  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
,

262 
ngx_°r_t
 *
«me
)

264 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

265 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

266 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

269  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

270 
	}
}

274 
	$ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

276 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
;

278 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_øndom_ödex_loc_c⁄f_t
));

279 i‡(
c⁄f
 =
NULL
) {

280  
NULL
;

283 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

285  
c⁄f
;

286 
	}
}

290 
	$ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

292 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

293 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

295 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

297  
NGX_CONF_OK
;

298 
	}
}

301 
ngx_öt_t


302 
	$ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

304 
ngx_hâp_h™dÀr_±
 *
h
;

305 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

307 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

309 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

310 i‡(
h
 =
NULL
) {

311  
NGX_ERROR
;

314 *
h
 = 
ngx_hâp_øndom_ödex_h™dÀr
;

316  
NGX_OK
;

317 
	}
}

	@src/http/modules/ngx_http_range_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

49 
off_t
 
	m°¨t
;

50 
off_t
 
	míd
;

51 
ngx_°r_t
 
	mc⁄ã¡_ønge
;

52 } 
	tngx_hâp_ønge_t
;

56 
off_t
 
	moff£t
;

57 
ngx_°r_t
 
	mbound¨y_hódî
;

58 
ngx_¨øy_t
 
	mønges
;

59 } 
	tngx_hâp_ønge_fûãr_˘x_t
;

62 
ngx_öt_t
 
ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_uöt_t
 
ønges
);

64 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

68 
ngx_öt_t
 
ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
);

69 
ngx_öt_t
 
ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

71 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

73 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

76 
ngx_öt_t
 
ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

77 
ngx_öt_t
 
ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

80 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
 = {

81 
NULL
,

82 
ngx_hâp_ønge_hódî_fûãr_öô
,

84 
NULL
,

85 
NULL
,

87 
NULL
,

88 
NULL
,

90 
NULL
,

91 
NULL
,

95 
ngx_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ
 = {

96 
NGX_MODULE_V1
,

97 &
ngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
,

98 
NULL
,

99 
NGX_HTTP_MODULE
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NGX_MODULE_V1_PADDING


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_ønge_body_fûãr_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
NULL
,

122 
NULL
,

126 
ngx_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_ønge_body_fûãr_moduÀ_˘x
,

129 
NULL
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

143 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

146 
ngx_öt_t


147 
	$ngx_hâp_ønge_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

149 
time_t
 
if_ønge
;

150 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

151 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

153 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10


154 || 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


155 || 
r
 !r->
maö


156 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1

157 || !
r
->
Ælow_ønges
)

159  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

162 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

164 i‡(
˛cf
->
max_ønges
 == 0) {

165  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

168 i‡(
r
->
hódîs_ö
.
ønge
 =
NULL


169 || 
r
->
hódîs_ö
.
ønge
->
vÆue
.
Àn
 < 7

170 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
,

171 (
u_ch¨
 *) "bytes=", 6)

174 
√xt_fûãr
;

177 i‡(
r
->
hódîs_ö
.
if_ønge
 &&Ñ->
hódîs_out
.
œ°_modifõd_time
 != -1) {

179 
if_ønge
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.if_ønge->
vÆue
.
d©a
,

180 
r
->
hódîs_ö
.
if_ønge
->
vÆue
.
Àn
);

182 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

184 
if_ønge
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

186 i‡(
if_ønge
 !
r
->
hódîs_out
.
œ°_modifõd_time
) {

187 
√xt_fûãr
;

191 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ønge_fûãr_˘x_t
));

192 i‡(
˘x
 =
NULL
) {

193  
NGX_ERROR
;

196 i‡(
	`ngx_¨øy_öô
(&
˘x
->
ønges
, 
r
->
poﬁ
, 1, (
ngx_hâp_ønge_t
))

197 !
NGX_OK
)

199  
NGX_ERROR
;

202 
	`ngx_hâp_ønge_∑r£
(
r
, 
˘x
, 
˛cf
->
max_ønges
)) {

204 
NGX_OK
:

205 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

207 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_PARTIAL_CONTENT
;

208 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

210 i‡(
˘x
->
ønges
.
√…s
 == 1) {

211  
	`ngx_hâp_ønge_sögÀ∑π_hódî
(
r
, 
˘x
);

214  
	`ngx_hâp_ønge_mu…ù¨t_hódî
(
r
, 
˘x
);

216 
NGX_HTTP_RANGE_NOT_SATISFIABLE
:

217  
	`ngx_hâp_ønge_nŸ_ßtisfübÀ
(
r
);

219 
NGX_ERROR
:

220  
NGX_ERROR
;

226 
√xt_fûãr
:

228 
r
->
hódîs_out
.
ac˚±_ønges
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

229 i‡(
r
->
hódîs_out
.
ac˚±_ønges
 =
NULL
) {

230  
NGX_ERROR
;

233 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 1;

234 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
key
, "Accept-Ranges");

235 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
vÆue
, "bytes");

237  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
,

243 
ngx_uöt_t
 
ønges
)

245 
u_ch¨
 *
p
;

246 
off_t
 
°¨t
, 
íd
, 
size
, 
c⁄ã¡_Àngth
;

247 
ngx_uöt_t
 
suffix
;

248 
ngx_hâp_ønge_t
 *
ønge
;

250 
p
 = 
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
 + 6;

251 
size
 = 0;

252 
c⁄ã¡_Àngth
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

255 
°¨t
 = 0;

256 
íd
 = 0;

257 
suffix
 = 0;

259 *
p
 == ' ') {Ö++; }

261 i‡(*
p
 != '-') {

262 i‡(*
p
 < '0' || *p > '9') {

263  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

266 *
p
 >= '0' && *p <= '9') {

267 
°¨t
 = sèπ * 10 + *
p
++ - '0';

270 *
p
 == ' ') {Ö++; }

272 i‡(*
p
++ != '-') {

273  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

276 *
p
 == ' ') {Ö++; }

278 i‡(*
p
 == ',' || *p == '\0') {

279 
íd
 = 
c⁄ã¡_Àngth
;

280 
found
;

284 
suffix
 = 1;

285 
p
++;

288 i‡(*
p
 < '0' || *p > '9') {

289  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

292 *
p
 >= '0' && *p <= '9') {

293 
íd
 =Énd * 10 + *
p
++ - '0';

296 *
p
 == ' ') {Ö++; }

298 i‡(*
p
 != ',' && *p != '\0') {

299  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

302 i‡(
suffix
) {

303 
°¨t
 = 
c⁄ã¡_Àngth
 - 
íd
;

304 
íd
 = 
c⁄ã¡_Àngth
 - 1;

307 i‡(
íd
 >
c⁄ã¡_Àngth
) {

308 
íd
 = 
c⁄ã¡_Àngth
;

311 
íd
++;

314 
found
:

316 i‡(
°¨t
 < 
íd
) {

317 
ønge
 = 
	`ngx_¨øy_push
(&
˘x
->
ønges
);

318 i‡(
ønge
 =
NULL
) {

319  
NGX_ERROR
;

322 
ønge
->
°¨t
 = start;

323 
ønge
->
íd
 =Énd;

325 
size
 +
íd
 - 
°¨t
;

327 i‡(
ønges
-- == 0) {

328  
NGX_DECLINED
;

332 i‡(*
p
++ != ',') {

337 i‡(
˘x
->
ønges
.
√…s
 == 0) {

338  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

341 i‡(
size
 > 
c⁄ã¡_Àngth
) {

342  
NGX_DECLINED
;

345  
NGX_OK
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

351 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

353 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

354 
ngx_hâp_ønge_t
 *
ønge
;

356 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

357 i‡(
c⁄ã¡_ønge
 =
NULL
) {

358  
NGX_ERROR
;

361 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

363 
c⁄ã¡_ønge
->
hash
 = 1;

364 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

366 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

367 ("byã†-/"Ë- 1 + 3 * 
NGX_OFF_T_LEN
);

368 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

369  
NGX_ERROR
;

374 
ønge
 = 
˘x
->
ønges
.
ñts
;

376 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

378 
ønge
->
°¨t
,Ñ™ge->
íd
 - 1,

379 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

380 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

382 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ønge
->
íd
 -Ñ™ge->
°¨t
;

384 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

385 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

386 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

389  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

390 
	}
}

393 
ngx_öt_t


394 
	$ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

395 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

397 
size_t
 
Àn
;

398 
ngx_uöt_t
 
i
;

399 
ngx_hâp_ønge_t
 *
ønge
;

400 
ngx_©omic_uöt_t
 
bound¨y
;

402 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


403 + (
CRLF
 "Content-Type: ") - 1

404 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


405 + (
CRLF
 "Content-Range: bytes ") - 1;

407 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

408 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

411 
˘x
->
bound¨y_hódî
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

412 i‡(
˘x
->
bound¨y_hódî
.
d©a
 =
NULL
) {

413  
NGX_ERROR
;

416 
bound¨y
 = 
	`ngx_√xt_ãmp_numbî
(0);

426 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

427 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

428 
CRLF
 "--%0muA" CRLF

429 "C⁄ã¡-Ty≥: %V; ch¨£t=%V" 
CRLF


431 
bound¨y
,

432 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
,

433 &
r
->
hódîs_out
.
ch¨£t
)

434 - 
˘x
->
bound¨y_hódî
.
d©a
;

436 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

438 } i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

439 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

440 
CRLF
 "--%0muA" CRLF

441 "C⁄ã¡-Ty≥: %V" 
CRLF


443 
bound¨y
,

444 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
)

445 - 
˘x
->
bound¨y_hódî
.
d©a
;

448 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

449 
CRLF
 "--%0muA" CRLF

451 
bound¨y
)

452 - 
˘x
->
bound¨y_hódî
.
d©a
;

455 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =

456 
	`ngx_≤Æloc
(
r
->
poﬁ
,

458 + 
NGX_ATOMIC_T_LEN
);

460 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =
NULL
) {

461  
NGX_ERROR
;

464 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

468 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =

469 
	`ngx_•rötf
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

471 
bound¨y
)

472 - 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
;

474 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥
.
Àn
;

478 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
 + ("--" CRLF) - 1;

480 
ønge
 = 
˘x
->
ønges
.
ñts
;

481 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

485 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =

486 
	`ngx_≤Æloc
(
r
->
poﬁ
, 3 * 
NGX_OFF_T_LEN
 + 2 + 4);

488 i‡(
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =
NULL
) {

489  
NGX_ERROR
;

492 
ønge
[
i
].
c⁄ã¡_ønge
.
Àn
 = 
	`ngx_•rötf
‘™ge[i].c⁄ã¡_ønge.
d©a
,

493 "%O-%O/%O" 
CRLF
 CRLF,

494 
ønge
[
i
].
°¨t
,Ñ™ge[i].
íd
 - 1,

495 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

496 - 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

498 
Àn
 +
˘x
->
bound¨y_hódî
.À¿+ 
ønge
[
i
].
c⁄ã¡_ønge
.len

499 + (
size_t
Ë(
ønge
[
i
].
íd
 -Ñ™ge[i].
°¨t
);

502 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

504 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

505 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

506 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

509  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

510 
	}
}

513 
ngx_öt_t


514 
	$ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
)

516 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

518 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

520 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

521 i‡(
c⁄ã¡_ønge
 =
NULL
) {

522  
NGX_ERROR
;

525 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

527 
c⁄ã¡_ønge
->
hash
 = 1;

528 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

530 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

531 ("byã†*/"Ë- 1 + 
NGX_OFF_T_LEN
);

532 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

533  
NGX_ERROR
;

536 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

538 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

539 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

541 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

543  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

544 
	}
}

547 
ngx_öt_t


548 
	$ngx_hâp_ønge_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

550 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

552 i‡(
ö
 =
NULL
) {

553  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

556 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

558 i‡(
˘x
 =
NULL
) {

559  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

562 i‡(
˘x
->
ønges
.
√…s
 == 1) {

563  
	`ngx_hâp_ønge_sögÀ∑π_body
(
r
, 
˘x
, 
ö
);

570 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

571  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

574 i‡(
	`ngx_hâp_ønge_ã°_ovîœµed
(
r
, 
˘x
, 
ö
Ë!
NGX_OK
) {

575  
NGX_ERROR
;

578  
	`ngx_hâp_ønge_mu…ù¨t_body
(
r
, 
˘x
, 
ö
);

579 
	}
}

582 
ngx_öt_t


583 
	$ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

584 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

586 
off_t
 
°¨t
, 
œ°
;

587 
ngx_buf_t
 *
buf
;

588 
ngx_uöt_t
 
i
;

589 
ngx_hâp_ønge_t
 *
ønge
;

591 i‡(
˘x
->
off£t
) {

592 
ovîœµed
;

595 
buf
 = 
ö
->buf;

597 i‡(!
buf
->
œ°_buf
) {

598 
°¨t
 = 
˘x
->
off£t
;

599 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

601 
ønge
 = 
˘x
->
ønges
.
ñts
;

602 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

603 i‡(
°¨t
 > 
ønge
[
i
].°¨à|| 
œ°
 <Ñ™ge[i].
íd
) {

604 
ovîœµed
;

609 
˘x
->
off£t
 = 
	`ngx_buf_size
(
buf
);

611  
NGX_OK
;

613 
ovîœµed
:

615 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

618  
NGX_ERROR
;

619 
	}
}

622 
ngx_öt_t


623 
	$ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

624 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

626 
off_t
 
°¨t
, 
œ°
;

627 
ngx_buf_t
 *
buf
;

628 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

629 
ngx_hâp_ønge_t
 *
ønge
;

631 
out
 = 
NULL
;

632 
Œ
 = &
out
;

633 
ønge
 = 
˘x
->
ønges
.
ñts
;

635 
˛
 = 
ö
; cl; c»˛->
√xt
) {

637 
buf
 = 
˛
->buf;

639 
°¨t
 = 
˘x
->
off£t
;

640 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

642 
˘x
->
off£t
 = 
œ°
;

644 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

645 "hâ∞øngêbody buf: %O-%O", 
°¨t
, 
œ°
);

647 i‡(
	`ngx_buf_•ecül
(
buf
)) {

648 *
Œ
 = 
˛
;

649 
Œ
 = &
˛
->
√xt
;

653 i‡(
ønge
->
íd
 <
°¨t
 ||Ñ™ge->°¨à>
œ°
) {

655 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

658 i‡(
buf
->
ö_fûe
) {

659 
buf
->
fûe_pos
 = buf->
fûe_œ°
;

662 
buf
->
pos
 = buf->
œ°
;

663 
buf
->
sync
 = 1;

668 i‡(
ønge
->
°¨t
 > start) {

670 i‡(
buf
->
ö_fûe
) {

671 
buf
->
fûe_pos
 +
ønge
->
°¨t
 - start;

674 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

675 
buf
->
pos
 +(
size_t
Ë(
ønge
->
°¨t
 - start);

679 i‡(
ønge
->
íd
 <
œ°
) {

681 i‡(
buf
->
ö_fûe
) {

682 
buf
->
fûe_œ°
 -
œ°
 - 
ønge
->
íd
;

685 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

686 
buf
->
œ°
 -(
size_t
Ë÷a° - 
ønge
->
íd
);

689 
buf
->
œ°_buf
 = 1;

690 *
Œ
 = 
˛
;

691 
˛
->
√xt
 = 
NULL
;

696 *
Œ
 = 
˛
;

697 
Œ
 = &
˛
->
√xt
;

700 i‡(
out
 =
NULL
) {

701  
NGX_OK
;

704  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

705 
	}
}

708 
ngx_öt_t


709 
	$ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

710 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

712 
ngx_buf_t
 *
b
, *
buf
;

713 
ngx_uöt_t
 
i
;

714 
ngx_chaö_t
 *
out
, *
h˛
, *
r˛
, *
d˛
, **
Œ
;

715 
ngx_hâp_ønge_t
 *
ønge
;

717 
Œ
 = &
out
;

718 
buf
 = 
ö
->buf;

719 
ønge
 = 
˘x
->
ønges
.
ñts
;

721 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

731 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

732 i‡(
b
 =
NULL
) {

733  
NGX_ERROR
;

736 
b
->
mem‹y
 = 1;

737 
b
->
pos
 = 
˘x
->
bound¨y_hódî
.
d©a
;

738 
b
->
œ°
 = 
˘x
->
bound¨y_hódî
.
d©a
 + ctx->bound¨y_hódî.
Àn
;

740 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

741 i‡(
h˛
 =
NULL
) {

742  
NGX_ERROR
;

745 
h˛
->
buf
 = 
b
;

750 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

751 i‡(
b
 =
NULL
) {

752  
NGX_ERROR
;

755 
b
->
ãmp‹¨y
 = 1;

756 
b
->
pos
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

757 
b
->
œ°
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 +Ñ™ge[i].c⁄ã¡_ønge.
Àn
;

759 
r˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

760 i‡(
r˛
 =
NULL
) {

761  
NGX_ERROR
;

764 
r˛
->
buf
 = 
b
;

769 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

770 i‡(
b
 =
NULL
) {

771  
NGX_ERROR
;

774 
b
->
ö_fûe
 = 
buf
->in_file;

775 
b
->
ãmp‹¨y
 = 
buf
->temporary;

776 
b
->
mem‹y
 = 
buf
->memory;

777 
b
->
mm≠
 = 
buf
->mmap;

778 
b
->
fûe
 = 
buf
->file;

780 i‡(
buf
->
ö_fûe
) {

781 
b
->
fûe_pos
 = 
buf
->fûe_po†+ 
ønge
[
i
].
°¨t
;

782 
b
->
fûe_œ°
 = 
buf
->
fûe_pos
 + 
ønge
[
i
].
íd
;

785 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

786 
b
->
pos
 = 
buf
->po†+ (
size_t
Ë
ønge
[
i
].
°¨t
;

787 
b
->
œ°
 = 
buf
->
pos
 + (
size_t
Ë
ønge
[
i
].
íd
;

790 
d˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

791 i‡(
d˛
 =
NULL
) {

792  
NGX_ERROR
;

795 
d˛
->
buf
 = 
b
;

797 *
Œ
 = 
h˛
;

798 
h˛
->
√xt
 = 
r˛
;

799 
r˛
->
√xt
 = 
d˛
;

800 
Œ
 = &
d˛
->
√xt
;

805 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

806 i‡(
b
 =
NULL
) {

807  
NGX_ERROR
;

810 
b
->
ãmp‹¨y
 = 1;

811 
b
->
œ°_buf
 = 1;

813 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


814 + ("--" 
CRLF
) - 1);

815 i‡(
b
->
pos
 =
NULL
) {

816  
NGX_ERROR
;

819 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
˘x
->
bound¨y_hódî
.
d©a
,

820 (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
);

821 *
b
->
œ°
++ = '-'; *b->last++ = '-';

822 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

824 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

825 i‡(
h˛
 =
NULL
) {

826  
NGX_ERROR
;

829 
h˛
->
buf
 = 
b
;

830 
h˛
->
√xt
 = 
NULL
;

832 *
Œ
 = 
h˛
;

834  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

835 
	}
}

838 
ngx_öt_t


839 
	$ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

841 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

842 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ønge_hódî_fûãr
;

844  
NGX_OK
;

845 
	}
}

848 
ngx_öt_t


849 
	$ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

851 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

852 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ønge_body_fûãr
;

854  
NGX_OK
;

855 
	}
}

	@src/http/modules/ngx_http_realip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REALIP_XREALIP
 0

	)

14 
	#NGX_HTTP_REALIP_XFWD
 1

	)

15 
	#NGX_HTTP_REALIP_HEADER
 2

	)

19 
ö_addr_t
 
	mmask
;

20 
ö_addr_t
 
	maddr
;

21 } 
	tngx_hâp_ªÆù_‰om_t
;

25 
ngx_¨øy_t
 *
	m‰om
;

26 
ngx_uöt_t
 
	mty≥
;

27 
ngx_uöt_t
 
	mhash
;

28 
ngx_°r_t
 
	mhódî
;

29 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

30 
ngx_uöt_t
 
	munixsock
;

32 } 
	tngx_hâp_ªÆù_loc_c⁄f_t
;

36 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

37 
sockaddr
 *
	msockaddr
;

38 
sockÀn_t
 
	msockÀn
;

39 
ngx_°r_t
 
	maddr_ãxt
;

40 } 
	tngx_hâp_ªÆù_˘x_t
;

43 
ngx_öt_t
 
ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_öt_t
 
ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
ù
,

45 
size_t
 
Àn
);

46 
ngx_hâp_ªÆù_˛ónup
(*
d©a
);

47 *
ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

48 *
c⁄f
);

49 *
ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

50 *
ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

52 *
∑ª¡
, *
chûd
);

53 
ngx_öt_t
 
ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
);

56 
ngx_comm™d_t
 
	gngx_hâp_ªÆù_comm™ds
[] = {

58 { 
ngx_°rög
("set_real_ip_from"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_hâp_ªÆù_‰om
,

61 
NGX_HTTP_LOC_CONF_OFFSET
,

63 
NULL
 },

65 { 
ngx_°rög
("real_ip_header"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_hâp_ªÆù
,

68 
NGX_HTTP_LOC_CONF_OFFSET
,

70 
NULL
 },

72 
ngx_nuŒ_comm™d


77 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ_˘x
 = {

78 
NULL
,

79 
ngx_hâp_ªÆù_öô
,

81 
NULL
,

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_hâp_ªÆù_¸óã_loc_c⁄f
,

88 
ngx_hâp_ªÆù_mîge_loc_c⁄f


92 
ngx_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_hâp_ªÆù_moduÀ_˘x
,

95 
ngx_hâp_ªÆù_comm™ds
,

96 
NGX_HTTP_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
ngx_öt_t


109 
	$ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

111 
u_ch¨
 *
ù
, *
p
;

112 
size_t
 
Àn
;

113 
ngx_uöt_t
 
i
, 
hash
;

114 
ngx_li°_∑π_t
 *
∑π
;

115 
ngx_èbÀ_ñt_t
 *
hódî
;

116 
sockaddr_ö
 *
sö
;

117 
ngx_c⁄√˘i⁄_t
 *
c
;

118 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

119 
ngx_hâp_ªÆù_‰om_t
 *
‰om
;

120 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
;

122 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

124 i‡(
˘x
) {

125  
NGX_DECLINED
;

128 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

130 i‡(
æcf
->
‰om
 =
NULL


131 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

132 && !
æcf
->
unixsock


136  
NGX_DECLINED
;

139 
æcf
->
ty≥
) {

141 
NGX_HTTP_REALIP_XREALIP
:

143 i‡(
r
->
hódîs_ö
.
x_ªÆ_ù
 =
NULL
) {

144  
NGX_DECLINED
;

147 
Àn
 = 
r
->
hódîs_ö
.
x_ªÆ_ù
->
vÆue
.len;

148 
ù
 = 
r
->
hódîs_ö
.
x_ªÆ_ù
->
vÆue
.
d©a
;

152 
NGX_HTTP_REALIP_XFWD
:

154 i‡(
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
 =
NULL
) {

155  
NGX_DECLINED
;

158 
Àn
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.len;

159 
ù
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.
d©a
;

161 
p
 = 
ù
 + 
Àn
 - 1;Ö > ip;Ö--) {

162 i‡(*
p
 == ' ' || *p == ',') {

163 
p
++;

164 
Àn
 -
p
 - 
ù
;

165 
ù
 = 
p
;

174 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

175 
hódî
 = 
∑π
->
ñts
;

177 
hash
 = 
æcf
->hash;

178 
Àn
 = 
æcf
->
hódî
.len;

179 
p
 = 
æcf
->
hódî
.
d©a
;

181 
i
 = 0; ; i++) {

183 i‡(
i
 >
∑π
->
√…s
) {

184 i‡(
∑π
->
√xt
 =
NULL
) {

188 
∑π
 =Ö¨t->
√xt
;

189 
hódî
 = 
∑π
->
ñts
;

190 
i
 = 0;

193 i‡(
hash
 =
hódî
[
i
].hash

194 && 
Àn
 =
hódî
[
i
].
key
.len

195 && 
	`ngx_°∫cmp
(
p
, 
hódî
[
i
].
lowˇ£_key
, 
Àn
) == 0)

197 
Àn
 = 
hódî
[
i
].
vÆue
.len;

198 
ù
 = 
hódî
[
i
].
vÆue
.
d©a
;

200 
found
;

204  
NGX_DECLINED
;

207 
found
:

209 
c
 = 
r
->
c⁄√˘i⁄
;

211 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "ªÆù: \"%s\"", 
ù
);

215 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_INET
) {

216 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

218 
‰om
 = 
æcf
->‰om->
ñts
;

219 
i
 = 0; i < 
æcf
->
‰om
->
√…s
; i++) {

221 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

223 
sö
->
sö_addr
.
s_addr
, 
‰om
[
i
].
mask
, from[i].
addr
);

225 i‡((
sö
->
sö_addr
.
s_addr
 & 
‰om
[
i
].
mask
Ë=‰om[i].
addr
) {

226  
	`ngx_hâp_ªÆù_£t_addr
(
r
, 
ù
, 
Àn
);

231 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

233 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
 && 
æcf
->
unixsock
) {

234  
	`ngx_hâp_ªÆù_£t_addr
(
r
, 
ù
, 
Àn
);

239  
NGX_DECLINED
;

240 
	}
}

243 
ngx_öt_t


244 
	$ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
ù
, 
size_t
 
Àn
)

246 
u_ch¨
 *
p
;

247 
ngx_öt_t
 
rc
;

248 
ngx_addr_t
 
addr
;

249 
ngx_c⁄√˘i⁄_t
 *
c
;

250 
ngx_poﬁ_˛ónup_t
 *
˛n
;

251 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

253 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, (
ngx_hâp_ªÆù_˘x_t
));

254 i‡(
˛n
 =
NULL
) {

255  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

258 
˘x
 = 
˛n
->
d©a
;

259 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ªÆù_moduÀ
);

261 
c
 = 
r
->
c⁄√˘i⁄
;

263 
rc
 = 
	`ngx_∑r£_addr
(
c
->
poﬁ
, &
addr
, 
ù
, 
Àn
);

265 
rc
) {

266 
NGX_DECLINED
:

267  
NGX_DECLINED
;

268 
NGX_ERROR
:

269  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

274 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
);

275 i‡(
p
 =
NULL
) {

276  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

279 
	`ngx_mem˝y
(
p
, 
ù
, 
Àn
);

281 
˛n
->
h™dÀr
 = 
ngx_hâp_ªÆù_˛ónup
;

283 
˘x
->
c⁄√˘i⁄
 = 
c
;

284 
˘x
->
sockaddr
 = 
c
->sockaddr;

285 
˘x
->
sockÀn
 = 
c
->socklen;

286 
˘x
->
addr_ãxt
 = 
c
->addr_text;

288 
c
->
sockaddr
 = 
addr
.sockaddr;

289 
c
->
sockÀn
 = 
addr
.socklen;

290 
c
->
addr_ãxt
.
Àn
 =Üen;

291 
c
->
addr_ãxt
.
d©a
 = 
p
;

293  
NGX_DECLINED
;

294 
	}
}

298 
	$ngx_hâp_ªÆù_˛ónup
(*
d©a
)

300 
ngx_hâp_ªÆù_˘x_t
 *
˘x
 = 
d©a
;

302 
ngx_c⁄√˘i⁄_t
 *
c
;

304 
c
 = 
˘x
->
c⁄√˘i⁄
;

306 
c
->
sockaddr
 = 
˘x
->sockaddr;

307 
c
->
sockÀn
 = 
˘x
->socklen;

308 
c
->
addr_ãxt
 = 
˘x
->addr_text;

309 
	}
}

313 
	$ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

315 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

317 
ngx_öt_t
 
rc
;

318 
ngx_°r_t
 *
vÆue
;

319 
ngx_cidr_t
 
cidr
;

320 
ngx_hâp_ªÆù_‰om_t
 *
‰om
;

322 
vÆue
 = 
cf
->
¨gs
->
ñts
;

324 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

326 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

327 
æcf
->
unixsock
 = 1;

328  
NGX_CONF_OK
;

333 i‡(
æcf
->
‰om
 =
NULL
) {

334 
æcf
->
‰om
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

335 (
ngx_hâp_ªÆù_‰om_t
));

336 i‡(
æcf
->
‰om
 =
NULL
) {

337  
NGX_CONF_ERROR
;

341 
‰om
 = 
	`ngx_¨øy_push
(
æcf
->from);

342 i‡(
‰om
 =
NULL
) {

343  
NGX_CONF_ERROR
;

346 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

348 i‡(
rc
 =
NGX_ERROR
) {

349 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

350 &
vÆue
[1]);

351  
NGX_CONF_ERROR
;

354 i‡(
cidr
.
Ámûy
 !
AF_INET
) {

355 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

357  
NGX_CONF_ERROR
;

360 i‡(
rc
 =
NGX_DONE
) {

361 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

362 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

365 
‰om
->
mask
 = 
cidr
.
u
.
ö
.mask;

366 
‰om
->
addr
 = 
cidr
.
u
.
ö
.addr;

368  
NGX_CONF_OK
;

369 
	}
}

373 
	$ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

375 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

377 
ngx_°r_t
 *
vÆue
;

379 
vÆue
 = 
cf
->
¨gs
->
ñts
;

381 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Real-IP") == 0) {

382 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XREALIP
;

383  
NGX_CONF_OK
;

386 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Forwarded-For") == 0) {

387 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XFWD
;

388  
NGX_CONF_OK
;

391 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_HEADER
;

392 
æcf
->
hash
 = 
	`ngx_hash_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

393 
æcf
->
hódî
 = 
vÆue
[1];

395  
NGX_CONF_OK
;

396 
	}
}

400 
	$ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

402 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
;

404 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªÆù_loc_c⁄f_t
));

405 i‡(
c⁄f
 =
NULL
) {

406  
NULL
;

417 
c⁄f
->
ty≥
 = 
NGX_CONF_UNSET_UINT
;

418 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

419 
c⁄f
->
unixsock
 = 2;

422  
c⁄f
;

423 
	}
}

427 
	$ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

429 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

430 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

432 i‡(
c⁄f
->
‰om
 =
NULL
) {

433 
c⁄f
->
‰om
 = 
¥ev
->from;

436 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

437 i‡(
c⁄f
->
unixsock
 == 2) {

438 
c⁄f
->
unixsock
 = (
¥ev
->unixsock == 2) ? 0 :Örev->unixsock;

442 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥
, 
¥ev
->ty≥, 
NGX_HTTP_REALIP_XREALIP
);

444 i‡(
c⁄f
->
hódî
.
Àn
 == 0) {

445 
c⁄f
->
hash
 = 
¥ev
->hash;

446 
c⁄f
->
hódî
 = 
¥ev
->header;

449  
NGX_CONF_OK
;

450 
	}
}

453 
ngx_öt_t


454 
	$ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
)

456 
ngx_hâp_h™dÀr_±
 *
h
;

457 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

459 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

461 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
);

462 i‡(
h
 =
NULL
) {

463  
NGX_ERROR
;

466 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

468 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

469 i‡(
h
 =
NULL
) {

470  
NGX_ERROR
;

473 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

475  
NGX_OK
;

476 
	}
}

	@src/http/modules/ngx_http_referer_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REFERER_NO_URI_PART
 ((*Ë4)

	)

15 #i‡!(
NGX_PCRE
)

17 
	#ngx_ªgex_t
 

	)

23 
ngx_hash_comböed_t
 
	mhash
;

25 #i‡(
NGX_PCRE
)

26 
ngx_¨øy_t
 *
	mªgex
;

29 
ngx_Êag_t
 
	mno_ª„ªr
;

30 
ngx_Êag_t
 
	mblocked_ª„ªr
;

32 
ngx_hash_keys_¨øys_t
 *
	mkeys
;

34 
ngx_uöt_t
 
	mª„ªr_hash_max_size
;

35 
ngx_uöt_t
 
	mª„ªr_hash_buckë_size
;

36 } 
	tngx_hâp_ª„ªr_c⁄f_t
;

39 * 
ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

40 * 
ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

41 *
chûd
);

42 *
ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

43 *
c⁄f
);

44 *
ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

45 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
);

46 *
ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

47 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_°r_t
 *
«me
, 
ngx_ªgex_t
 *
ªgex
);

48 
ngx_libc_cde˛
 
ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
,

49 c⁄° *
two
);

52 
ngx_comm™d_t
 
	gngx_hâp_ª„ªr_comm™ds
[] = {

54 { 
ngx_°rög
("valid_referers"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

56 
ngx_hâp_vÆid_ª„ªrs
,

57 
NGX_HTTP_LOC_CONF_OFFSET
,

59 
NULL
 },

61 { 
ngx_°rög
("referer_hash_max_size"),

62 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

64 
NGX_HTTP_LOC_CONF_OFFSET
,

65 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_max_size
),

66 
NULL
 },

68 { 
ngx_°rög
("referer_hash_bucket_size"),

69 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

71 
NGX_HTTP_LOC_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_buckë_size
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ_˘x
 = {

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL
,

89 
ngx_hâp_ª„ªr_¸óã_c⁄f
,

90 
ngx_hâp_ª„ªr_mîge_c⁄f


94 
ngx_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_hâp_ª„ªr_moduÀ_˘x
,

97 
ngx_hâp_ª„ªr_comm™ds
,

98 
NGX_HTTP_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NGX_MODULE_V1_PADDING


110 
ngx_öt_t


111 
	$ngx_hâp_ª„ªr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

112 
uöçå_t
 
d©a
)

114 
u_ch¨
 *
p
, *
ªf
, *
œ°
;

115 
size_t
 
Àn
;

116 
ngx_°r_t
 *
uri
;

117 
ngx_uöt_t
 
i
, 
key
;

118 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
;

119 
u_ch¨
 
buf
[256];

121 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ª„ªr_moduÀ
);

123 i‡(
æcf
->
hash
.hash.
buckës
 =
NULL


124 && 
æcf
->
hash
.
wc_hód
 =
NULL


125 && 
æcf
->
hash
.
wc_èû
 =
NULL


126 #i‡(
NGX_PCRE
)

127 && 
æcf
->
ªgex
 =
NULL


131 
vÆid
;

134 i‡(
r
->
hódîs_ö
.
ª„ªr
 =
NULL
) {

135 i‡(
æcf
->
no_ª„ªr
) {

136 
vÆid
;

139 
övÆid
;

142 
Àn
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.len;

143 
ªf
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.
d©a
;

145 i‡(
Àn
 >= ("http://i.ru") - 1) {

146 
œ°
 = 
ªf
 + 
Àn
;

148 i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "http://", 7) == 0) {

149 
ªf
 += 7;

150 
vÆid_scheme
;

152 } i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "https://", 8) == 0) {

153 
ªf
 += 8;

154 
vÆid_scheme
;

158 i‡(
æcf
->
blocked_ª„ªr
) {

159 
vÆid
;

162 
övÆid
;

164 
vÆid_scheme
:

166 
i
 = 0;

167 
key
 = 0;

169 
p
 = 
ªf
;Ö < 
œ°
;Ö++) {

170 i‡(*
p
 == '/' || *p == ':') {

174 
buf
[
i
] = 
	`ngx_tﬁowî
(*
p
);

175 
key
 = 
	`ngx_hash
(key, 
buf
[
i
++]);

177 i‡(
i
 == 256) {

178 
övÆid
;

182 
uri
 = 
	`ngx_hash_föd_comböed
(&
æcf
->
hash
, 
key
, 
buf
, 
p
 - 
ªf
);

184 i‡(
uri
) {

185 
uri
;

188 #i‡(
NGX_PCRE
)

190 i‡(
æcf
->
ªgex
) {

191 
ngx_öt_t
 
rc
;

192 
ngx_°r_t
 
ª„ªr
;

194 
ª„ªr
.
Àn
 =Üen - 7;

195 
ª„ªr
.
d©a
 = 
ªf
;

197 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
ªgex
, &
ª„ªr
, 
r
->
c⁄√˘i⁄
->
log
);

199 i‡(
rc
 =
NGX_OK
) {

200 
vÆid
;

203 i‡(
rc
 =
NGX_ERROR
) {

204  
rc
;

212 
övÆid
:

214 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

216  
NGX_OK
;

218 
uri
:

220  ; 
p
 < 
œ°
;Ö++) {

221 i‡(*
p
 == '/') {

226 
Àn
 = 
œ°
 - 
p
;

228 i‡(
uri
 =
NGX_HTTP_REFERER_NO_URI_PART
) {

229 
vÆid
;

232 i‡(
Àn
 < 
uri
->À¿|| 
	`ngx_°∫cmp
(uri->
d©a
, 
p
, uri->len) != 0) {

233 
övÆid
;

236 
vÆid
:

238 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

240  
NGX_OK
;

241 
	}
}

245 
	$ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

247 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
;

249 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ª„ªr_c⁄f_t
));

250 i‡(
c⁄f
 =
NULL
) {

251  
NULL
;

254 #i‡(
NGX_PCRE
)

255 
c⁄f
->
ªgex
 = 
NGX_CONF_UNSET_PTR
;

258 
c⁄f
->
no_ª„ªr
 = 
NGX_CONF_UNSET
;

259 
c⁄f
->
blocked_ª„ªr
 = 
NGX_CONF_UNSET
;

260 
c⁄f
->
ª„ªr_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

261 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

263  
c⁄f
;

264 
	}
}

268 
	$ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

270 
ngx_hâp_ª„ªr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

271 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
 = 
chûd
;

273 
ngx_hash_öô_t
 
hash
;

275 i‡(
c⁄f
->
keys
 =
NULL
) {

276 
c⁄f
->
hash
 = 
¥ev
->hash;

278 #i‡(
NGX_PCRE
)

279 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

281 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_ª„ªr
, 
¥ev
->no_referer, 0);

282 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
blocked_ª„ªr
, 
¥ev
->blocked_referer, 0);

283 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

284 
¥ev
->
ª„ªr_hash_max_size
, 2048);

285 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

286 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

288  
NGX_CONF_OK
;

291 i‡((
c⁄f
->
no_ª„ªr
 =1 || c⁄f->
blocked_ª„ªr
 == 1)

292 && 
c⁄f
->
keys
->keys.
√…s
 == 0

293 && 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
 == 0

294 && 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
 == 0)

296 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

300  
NGX_CONF_ERROR
;

303 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

304 
¥ev
->
ª„ªr_hash_max_size
, 2048);

305 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

306 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

307 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
	`ngx_Æign
(conf->referer_hash_bucket_size,

308 
ngx_ˇchñöe_size
);

310 
hash
.
key
 = 
ngx_hash_key_lc
;

311 
hash
.
max_size
 = 
c⁄f
->
ª„ªr_hash_max_size
;

312 
hash
.
buckë_size
 = 
c⁄f
->
ª„ªr_hash_buckë_size
;

313 
hash
.
«me
 = "referer_hash";

314 
hash
.
poﬁ
 = 
cf
->pool;

316 i‡(
c⁄f
->
keys
->keys.
√…s
) {

317 
hash
.hash = &
c⁄f
->hash.hash;

318 
hash
.
ãmp_poﬁ
 = 
NULL
;

320 i‡(
	`ngx_hash_öô
(&
hash
, 
c⁄f
->
keys
->keys.
ñts
, c⁄f->keys->keys.
√…s
)

321 !
NGX_OK
)

323  
NGX_CONF_ERROR
;

327 i‡(
c⁄f
->
keys
->
dns_wc_hód
.
√…s
) {

329 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

330 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_hód
.
√…s
,

331 (
ngx_hash_key_t
),

332 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

334 
hash
.hash = 
NULL
;

335 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

337 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

338 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
)

339 !
NGX_OK
)

341  
NGX_CONF_ERROR
;

344 
c⁄f
->
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

347 i‡(
c⁄f
->
keys
->
dns_wc_èû
.
√…s
) {

349 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

350 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_èû
.
√…s
,

351 (
ngx_hash_key_t
),

352 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

354 
hash
.hash = 
NULL
;

355 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

357 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

358 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
)

359 !
NGX_OK
)

361  
NGX_CONF_ERROR
;

364 
c⁄f
->
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

367 #i‡(
NGX_PCRE
)

368 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

371 i‡(
c⁄f
->
no_ª„ªr
 =
NGX_CONF_UNSET
) {

372 
c⁄f
->
no_ª„ªr
 = 0;

375 i‡(
c⁄f
->
blocked_ª„ªr
 =
NGX_CONF_UNSET
) {

376 
c⁄f
->
blocked_ª„ªr
 = 0;

379 
c⁄f
->
keys
 = 
NULL
;

381  
NGX_CONF_OK
;

382 
	}
}

386 
	$ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

388 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
 = 
c⁄f
;

390 
u_ch¨
 *
p
;

391 
ngx_°r_t
 *
vÆue
, 
uri
, 
«me
;

392 
ngx_uöt_t
 
i
, 
n
;

393 
ngx_hâp_v¨übÀ_t
 *
v¨
;

394 
ngx_hâp_£rvî_«me_t
 *
¢
;

395 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

397 
	`ngx_°r_£t
(&
«me
, "invalid_referer");

399 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
,

400 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOHASH
);

401 i‡(
v¨
 =
NULL
) {

402  
NGX_CONF_ERROR
;

405 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_ª„ªr_v¨übÀ
;

407 i‡(
æcf
->
keys
 =
NULL
) {

408 
æcf
->
keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
, (
ngx_hash_keys_¨øys_t
));

409 i‡(
æcf
->
keys
 =
NULL
) {

410  
NGX_CONF_ERROR
;

413 
æcf
->
keys
->
poﬁ
 = 
cf
->pool;

414 
æcf
->
keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

416 i‡(
	`ngx_hash_keys_¨øy_öô
(
æcf
->
keys
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

417  
NGX_CONF_ERROR
;

421 
vÆue
 = 
cf
->
¨gs
->
ñts
;

423 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

424 i‡(
vÆue
[
i
].
Àn
 == 0) {

425 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

426 "övÆidÑe„ª∏\"%V\"", &
vÆue
[
i
]);

427  
NGX_CONF_ERROR
;

430 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

431 
æcf
->
no_ª„ªr
 = 1;

435 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "blocked") == 0) {

436 
æcf
->
blocked_ª„ªr
 = 1;

440 
	`ngx_°r_nuŒ
(&
uri
);

442 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "server_names") == 0) {

444 
cscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

446 
¢
 = 
cscf
->
£rvî_«mes
.
ñts
;

447 
n
 = 0;Ç < 
cscf
->
£rvî_«mes
.
√…s
;Ç++) {

449 #i‡(
NGX_PCRE
)

450 i‡(
¢
[
n
].
ªgex
) {

452 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
¢
[
n
].
«me
,

453 
¢
[
n
].
ªgex
->regex)

454 !
NGX_OK
)

456  
NGX_CONF_ERROR
;

463 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
¢
[
n
].
«me
, &
uri
)

464 !
NGX_OK
)

466  
NGX_CONF_ERROR
;

473 i‡(
vÆue
[
i
].
d©a
[0] == '~') {

474 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
vÆue
[
i
], 
NULL
Ë!
NGX_OK
)

476  
NGX_CONF_ERROR
;

482 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/');

484 i‡(
p
) {

485 
uri
.
Àn
 = (
vÆue
[
i
].
d©a
 + vÆue[i].ÀnË- 
p
;

486 
uri
.
d©a
 = 
p
;

487 
vÆue
[
i
].
Àn
 = 
p
 - vÆue[i].
d©a
;

490 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
vÆue
[
i
], &
uri
Ë!
NGX_OK
) {

491  
NGX_CONF_ERROR
;

495  
NGX_CONF_OK
;

496 
	}
}

500 
	$ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

501 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
)

503 
ngx_öt_t
 
rc
;

504 
ngx_°r_t
 *
u
;

506 i‡(
uri
->
Àn
 == 0) {

507 
u
 = 
NGX_HTTP_REFERER_NO_URI_PART
;

510 
u
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

511 i‡(
u
 =
NULL
) {

512  
NGX_CONF_ERROR
;

515 *
u
 = *
uri
;

518 
rc
 = 
	`ngx_hash_add_key
(
keys
, 
vÆue
, 
u
, 
NGX_HASH_WILDCARD_KEY
);

520 i‡(
rc
 =
NGX_OK
) {

521  
NGX_CONF_OK
;

524 i‡(
rc
 =
NGX_DECLINED
) {

525 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

526 "övÆid ho°«mê‹ wûdˇrd \"%V\"", 
vÆue
);

529 i‡(
rc
 =
NGX_BUSY
) {

530 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

531 "c⁄Êi˘ögÖ¨amëî \"%V\"", 
vÆue
);

534  
NGX_CONF_ERROR
;

535 
	}
}

539 
	$ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

540 
ngx_°r_t
 *
«me
, 
ngx_ªgex_t
 *
ªgex
)

542 #i‡(
NGX_PCRE
)

543 
ngx_ªgex_ñt_t
 *
ª
;

544 
ngx_ªgex_compûe_t
 
rc
;

545 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

547 i‡(
«me
->
Àn
 == 1) {

548 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "em±yÑegex i¿\"%V\"", 
«me
);

549  
NGX_CONF_ERROR
;

552 i‡(
æcf
->
ªgex
 =
NGX_CONF_UNSET_PTR
) {

553 
æcf
->
ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_ªgex_ñt_t
));

554 i‡(
æcf
->
ªgex
 =
NULL
) {

555  
NGX_CONF_ERROR
;

559 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
ªgex
);

560 i‡(
ª
 =
NULL
) {

561  
NGX_CONF_ERROR
;

564 i‡(
ªgex
) {

565 
ª
->
ªgex
 =Ñegex;

566 
ª
->
«me
 =Çame->
d©a
;

568  
NGX_CONF_OK
;

571 
«me
->
Àn
--;

572 
«me
->
d©a
++;

574 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

576 
rc
.
∑âîn
 = *
«me
;

577 
rc
.
poﬁ
 = 
cf
->pool;

578 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

579 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

580 
rc
.
îr
.
d©a
 = 
îr°r
;

582 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

584  
NGX_CONF_ERROR
;

587 
ª
->
ªgex
 = 
rc
.regex;

588 
ª
->
«me
 =Çame->
d©a
;

590  
NGX_CONF_OK
;

594 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

596 
«me
);

598  
NGX_CONF_ERROR
;

601 
	}
}

604 
ngx_libc_cde˛


605 
	$ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

607 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

609 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

610 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

612  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

613 
	}
}

	@src/http/modules/ngx_http_rewrite_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mcodes
;

16 
ngx_uöt_t
 
	m°ack_size
;

18 
ngx_Êag_t
 
	mlog
;

19 
ngx_Êag_t
 
	munöôülized_v¨übÀ_w¨n
;

20 } 
	tngx_hâp_ªwrôe_loc_c⁄f_t
;

23 *
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

25 *
∑ª¡
, *
chûd
);

26 
ngx_öt_t
 
ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

28 *
ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

31 *
c⁄f
);

32 *
ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

34 * 
ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
,

35 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
);

36 *
ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

38 *
ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

40 * 
ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
,

41 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

44 
ngx_comm™d_t
 
	gngx_hâp_ªwrôe_comm™ds
[] = {

46 { 
ngx_°rög
("rewrite"),

47 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


48 |
NGX_CONF_TAKE23
,

49 
ngx_hâp_ªwrôe
,

50 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
NULL
 },

54 { 
ngx_°rög
("return"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


56 |
NGX_CONF_TAKE12
,

57 
ngx_hâp_ªwrôe_ªtu∫
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("break"),

63 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


64 |
NGX_CONF_NOARGS
,

65 
ngx_hâp_ªwrôe_bªak
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
NULL
 },

70 { 
ngx_°rög
("if"),

71 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

72 
ngx_hâp_ªwrôe_if
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

75 
NULL
 },

77 { 
ngx_°rög
("set"),

78 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


79 |
NGX_CONF_TAKE2
,

80 
ngx_hâp_ªwrôe_£t
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("rewrite_log"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


87 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
log
),

91 
NULL
 },

93 { 
ngx_°rög
("uninitialized_variable_warn"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


95 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

96 
ngx_c⁄f_£t_Êag_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
unöôülized_v¨übÀ_w¨n
),

99 
NULL
 },

101 
ngx_nuŒ_comm™d


105 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ_˘x
 = {

106 
NULL
,

107 
ngx_hâp_ªwrôe_öô
,

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
,

116 
ngx_hâp_ªwrôe_mîge_loc_c⁄f


120 
ngx_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ
 = {

121 
NGX_MODULE_V1
,

122 &
ngx_hâp_ªwrôe_moduÀ_˘x
,

123 
ngx_hâp_ªwrôe_comm™ds
,

124 
NGX_HTTP_MODULE
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NGX_MODULE_V1_PADDING


136 
ngx_öt_t


137 
	$ngx_hâp_ªwrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

139 
ngx_öt_t
 
ödex
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

141 
ngx_hâp_s¸ùt_ígöe_t
 *
e
;

142 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

143 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

144 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

146 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

147 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

148 
ödex
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

150 i‡(
r
->
pha£_h™dÀr
 =
ödex
 &&Ñ->
loc_c⁄f
 =
cscf
->
˘x
->loc_conf) {

152  
NGX_DECLINED
;

155 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

157 i‡(
æcf
->
codes
 =
NULL
) {

158  
NGX_DECLINED
;

161 
e
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_s¸ùt_ígöe_t
));

162 i‡(
e
 =
NULL
) {

163  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

166 
e
->
•
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

167 
æcf
->
°ack_size
 * (
ngx_hâp_v¨übÀ_vÆue_t
));

168 i‡(
e
->
•
 =
NULL
) {

169  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

172 
e
->
ù
 = 
æcf
->
codes
->
ñts
;

173 
e
->
ªque°
 = 
r
;

174 
e
->
quŸe
 = 1;

175 
e
->
log
 = 
æcf
->log;

176 
e
->
°©us
 = 
NGX_DECLINED
;

178 *(
uöçå_t
 *Ë
e
->
ù
) {

179 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
->
ù
;

180 
	`code
(
e
);

183 i‡(
e
->
°©us
 < 
NGX_HTTP_BAD_REQUEST
) {

184  
e
->
°©us
;

187 i‡(
r
->
îr_°©us
 == 0) {

188  
e
->
°©us
;

191  
r
->
îr_°©us
;

192 
	}
}

195 
ngx_öt_t


196 
	$ngx_hâp_ªwrôe_v¨
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

197 
uöçå_t
 
d©a
)

199 
ngx_hâp_v¨übÀ_t
 *
v¨
;

200 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

201 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

203 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

205 i‡(
æcf
->
unöôülized_v¨übÀ_w¨n
 == 0) {

206 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

207  
NGX_OK
;

210 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

212 
v¨
 = 
cmcf
->
v¨übÀs
.
ñts
;

220 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

221 "usög unöôülized \"%V\" v¨übÀ", &
v¨
[
d©a
].
«me
);

223 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

225  
NGX_OK
;

226 
	}
}

230 
	$ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

232 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
;

234 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªwrôe_loc_c⁄f_t
));

235 i‡(
c⁄f
 =
NULL
) {

236  
NULL
;

239 
c⁄f
->
°ack_size
 = 
NGX_CONF_UNSET_UINT
;

240 
c⁄f
->
log
 = 
NGX_CONF_UNSET
;

241 
c⁄f
->
unöôülized_v¨übÀ_w¨n
 = 
NGX_CONF_UNSET
;

243  
c⁄f
;

244 
	}
}

248 
	$ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

250 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

251 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

253 
uöçå_t
 *
code
;

255 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log
, 
¥ev
->log, 0);

256 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
unöôülized_v¨übÀ_w¨n
,

257 
¥ev
->
unöôülized_v¨übÀ_w¨n
, 1);

258 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ack_size
, 
¥ev
->stack_size, 10);

260 i‡(
c⁄f
->
codes
 =
NULL
) {

261  
NGX_CONF_OK
;

264 i‡(
c⁄f
->
codes
 =
¥ev
->codes) {

265  
NGX_CONF_OK
;

268 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
codes
, (
uöçå_t
));

269 i‡(
code
 =
NULL
) {

270  
NGX_CONF_ERROR
;

273 *
code
 = (
uöçå_t
Ë
NULL
;

275  
NGX_CONF_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
)

282 
ngx_hâp_h™dÀr_±
 *
h
;

283 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

285 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

287 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
);

288 i‡(
h
 =
NULL
) {

289  
NGX_ERROR
;

292 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

294 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
);

295 i‡(
h
 =
NULL
) {

296  
NGX_ERROR
;

299 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

301  
NGX_OK
;

302 
	}
}

306 
	$ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

308 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

310 
ngx_°r_t
 *
vÆue
;

311 
ngx_uöt_t
 
œ°
;

312 
ngx_ªgex_compûe_t
 
rc
;

313 
ngx_hâp_s¸ùt_code_±
 *
code
;

314 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

315 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

316 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
ªgex_íd
;

317 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

319 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

320 (
ngx_hâp_s¸ùt_ªgex_code_t
));

321 i‡(
ªgex
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

327 
vÆue
 = 
cf
->
¨gs
->
ñts
;

329 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

331 
rc
.
∑âîn
 = 
vÆue
[1];

332 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

333 
rc
.
îr
.
d©a
 = 
îr°r
;

337 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

338 i‡(
ªgex
->ªgex =
NULL
) {

339  
NGX_CONF_ERROR
;

342 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

343 
ªgex
->
uri
 = 1;

344 
ªgex
->
«me
 = 
vÆue
[1];

346 i‡(
vÆue
[2].
d©a
[vÆue[2].
Àn
 - 1] == '?') {

349 
vÆue
[2].
Àn
--;

352 
ªgex
->
add_¨gs
 = 1;

355 
œ°
 = 0;

357 i‡(
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "http://", ("http://") - 1) == 0

358 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "https://", ("https://") - 1) == 0

359 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "$scheme", ("$scheme") - 1) == 0)

361 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

362 
ªgex
->
ªdúe˘
 = 1;

363 
œ°
 = 1;

366 i‡(
cf
->
¨gs
->
√…s
 == 4) {

367 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "last") == 0) {

368 
œ°
 = 1;

370 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "break") == 0) {

371 
ªgex
->
bªak_cy˛e
 = 1;

372 
œ°
 = 1;

374 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "redirect") == 0) {

375 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

376 
ªgex
->
ªdúe˘
 = 1;

377 
œ°
 = 1;

379 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "permanent") == 0) {

380 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_PERMANENTLY
;

381 
ªgex
->
ªdúe˘
 = 1;

382 
œ°
 = 1;

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

386 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

387  
NGX_CONF_ERROR
;

391 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

393 
sc
.
cf
 = cf;

394 
sc
.
sour˚
 = &
vÆue
[2];

395 
sc
.
Àngths
 = &
ªgex
->lengths;

396 
sc
.
vÆues
 = &
lcf
->
codes
;

397 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[2]);

398 
sc
.
maö
 = 
ªgex
;

399 
sc
.
com∂ëe_Àngths
 = 1;

400 
sc
.
compûe_¨gs
 = !
ªgex
->
ªdúe˘
;

402 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

403  
NGX_CONF_ERROR
;

406 
ªgex
 = 
sc
.
maö
;

408 
ªgex
->
size
 = 
sc
.size;

409 
ªgex
->
¨gs
 = 
sc
.args;

411 i‡(
sc
.
v¨übÀs
 =0 && !sc.
dup_ˇ±uª
) {

412 
ªgex
->
Àngths
 = 
NULL
;

415 
ªgex_íd
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
,

416 (
ngx_hâp_s¸ùt_ªgex_íd_code_t
),

417 &
ªgex
);

418 i‡(
ªgex_íd
 =
NULL
) {

419  
NGX_CONF_ERROR
;

422 
ªgex_íd
->
code
 = 
ngx_hâp_s¸ùt_ªgex_íd_code
;

423 
ªgex_íd
->
uri
 = 
ªgex
->uri;

424 
ªgex_íd
->
¨gs
 = 
ªgex
->args;

425 
ªgex_íd
->
add_¨gs
 = 
ªgex
->add_args;

426 
ªgex_íd
->
ªdúe˘
 = 
ªgex
->redirect;

428 i‡(
œ°
) {

429 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
, (
uöçå_t
), &
ªgex
);

430 i‡(
code
 =
NULL
) {

431  
NGX_CONF_ERROR
;

434 *
code
 = 
NULL
;

437 
ªgex
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


438 - (
u_ch¨
 *Ë
ªgex
;

440  
NGX_CONF_OK
;

441 
	}
}

445 
	$ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

447 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

449 
u_ch¨
 *
p
;

450 
ngx_°r_t
 *
vÆue
, *
v
;

451 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
ªt
;

452 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

454 
ªt
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

455 (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

456 i‡(
ªt
 =
NULL
) {

457  
NGX_CONF_ERROR
;

460 
vÆue
 = 
cf
->
¨gs
->
ñts
;

462 
	`ngx_memzîo
(
ªt
, (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

464 
ªt
->
code
 = 
ngx_hâp_s¸ùt_ªtu∫_code
;

466 
p
 = 
vÆue
[1].
d©a
;

468 
ªt
->
°©us
 = 
	`ngx_©oi
(
p
, 
vÆue
[1].
Àn
);

470 i‡(
ªt
->
°©us
 =(
uöçå_t
Ë
NGX_ERROR
) {

472 i‡(
cf
->
¨gs
->
√…s
 == 2

473 && (
	`ngx_°∫cmp
(
p
, "http://", ("http://") - 1) == 0

474 || 
	`ngx_°∫cmp
(
p
, "https://", ("https://") - 1) == 0

475 || 
	`ngx_°∫cmp
(
p
, "$scheme", ("$scheme") - 1) == 0))

477 
ªt
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

478 
v
 = &
vÆue
[1];

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

482 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

483  
NGX_CONF_ERROR
;

488 i‡(
cf
->
¨gs
->
√…s
 == 2) {

489  
NGX_CONF_OK
;

492 
v
 = &
vÆue
[2];

495 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

497 
ccv
.
cf
 = cf;

498 
ccv
.
vÆue
 = 
v
;

499 
ccv
.
com∂ex_vÆue
 = &
ªt
->
ãxt
;

501 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

502  
NGX_CONF_ERROR
;

505  
NGX_CONF_OK
;

506 
	}
}

510 
	$ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

512 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

514 
ngx_hâp_s¸ùt_code_±
 *
code
;

516 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
, (
uöçå_t
));

517 i‡(
code
 =
NULL
) {

518  
NGX_CONF_ERROR
;

521 *
code
 = 
ngx_hâp_s¸ùt_bªak_code
;

523  
NGX_CONF_OK
;

524 
	}
}

528 
	$ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

530 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

532 *
mc⁄f
;

533 *
rv
;

534 
u_ch¨
 *
ñts
;

535 
ngx_uöt_t
 
i
;

536 
ngx_c⁄f_t
 
ßve
;

537 
ngx_hâp_moduÀ_t
 *
moduÀ
;

538 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

539 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

540 
ngx_hâp_s¸ùt_if_code_t
 *
if_code
;

541 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
∆cf
;

543 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

544 i‡(
˘x
 =
NULL
) {

545  
NGX_CONF_ERROR
;

548 
p˘x
 = 
cf
->
˘x
;

549 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

550 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

552 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

553 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

554  
NGX_CONF_ERROR
;

557 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

558 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

562 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

564 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

566 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

567 i‡(
mc⁄f
 =
NULL
) {

568  
NGX_CONF_ERROR
;

571 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

575 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

577 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

578 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

579 
˛cf
->
«me
 = 
p˛cf
->name;

580 
˛cf
->
n⁄ame
 = 1;

582 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

583  
NGX_CONF_ERROR
;

586 i‡(
	`ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
cf
, 
lcf
Ë!
NGX_CONF_OK
) {

587  
NGX_CONF_ERROR
;

590 
if_code
 = 
	`ngx_¨øy_push_n
(
lcf
->
codes
, (
ngx_hâp_s¸ùt_if_code_t
));

591 i‡(
if_code
 =
NULL
) {

592  
NGX_CONF_ERROR
;

595 
if_code
->
code
 = 
ngx_hâp_s¸ùt_if_code
;

597 
ñts
 = 
lcf
->
codes
->elts;

602 
∆cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_ªwrôe_moduÀ
.
˘x_ödex
];

603 
∆cf
->
codes
 = 
lcf
->codes;

606 
ßve
 = *
cf
;

607 
cf
->
˘x
 = ctx;

609 i‡(
p˛cf
->
«me
.
Àn
 == 0) {

610 
if_code
->
loc_c⁄f
 = 
NULL
;

611 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SIF_CONF
;

614 
if_code
->
loc_c⁄f
 = 
˘x
->loc_conf;

615 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LIF_CONF
;

618 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

620 *
cf
 = 
ßve
;

622 i‡(
rv
 !
NGX_CONF_OK
) {

623  
rv
;

627 i‡(
ñts
 !
lcf
->
codes
->elts) {

628 
if_code
 = (
ngx_hâp_s¸ùt_if_code_t
 *)

629 ((
u_ch¨
 *Ë
if_code
 + ((u_ch¨ *Ë
lcf
->
codes
->
ñts
 -Élts));

632 
if_code
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


633 - (
u_ch¨
 *Ë
if_code
;

637 
∆cf
->
codes
 = 
NULL
;

639  
NGX_CONF_OK
;

640 
	}
}

644 
	$ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
)

646 
u_ch¨
 *
p
;

647 
size_t
 
Àn
;

648 
ngx_°r_t
 *
vÆue
;

649 
ngx_uöt_t
 
cur
, 
œ°
;

650 
ngx_ªgex_compûe_t
 
rc
;

651 
ngx_hâp_s¸ùt_code_±
 *
code
;

652 
ngx_hâp_s¸ùt_fûe_code_t
 *
f›
;

653 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

654 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

656 
vÆue
 = 
cf
->
¨gs
->
ñts
;

657 
œ°
 = 
cf
->
¨gs
->
√…s
 - 1;

659 i‡(
vÆue
[1].
Àn
 < 1 || vÆue[1].
d©a
[0] != '(') {

660 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

661 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[1]);

662  
NGX_CONF_ERROR
;

665 i‡(
vÆue
[1].
Àn
 == 1) {

666 
cur
 = 2;

669 
cur
 = 1;

670 
vÆue
[1].
Àn
--;

671 
vÆue
[1].
d©a
++;

674 i‡(
vÆue
[
œ°
].
Àn
 < 1 || vÆue[œ°].
d©a
[value[last].len - 1] != ')') {

675 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

676 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
œ°
]);

677  
NGX_CONF_ERROR
;

680 i‡(
vÆue
[
œ°
].
Àn
 == 1) {

681 
œ°
--;

684 
vÆue
[
œ°
].
Àn
--;

685 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

688 
Àn
 = 
vÆue
[
cur
].len;

689 
p
 = 
vÆue
[
cur
].
d©a
;

691 i‡(
Àn
 > 1 && 
p
[0] == '$') {

693 i‡(
cur
 !
œ°
 && cur + 2 !=Üast) {

694 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

695 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

696  
NGX_CONF_ERROR
;

699 i‡(
	`ngx_hâp_ªwrôe_v¨übÀ
(
cf
, 
lcf
, &
vÆue
[
cur
]Ë!
NGX_CONF_OK
) {

700  
NGX_CONF_ERROR
;

703 i‡(
cur
 =
œ°
) {

704  
NGX_CONF_OK
;

707 
cur
++;

709 
Àn
 = 
vÆue
[
cur
].len;

710 
p
 = 
vÆue
[
cur
].
d©a
;

712 i‡(
Àn
 =1 && 
p
[0] == '=') {

714 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

715  
NGX_CONF_ERROR
;

718 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

719 (
uöçå_t
));

720 i‡(
code
 =
NULL
) {

721  
NGX_CONF_ERROR
;

724 *
code
 = 
ngx_hâp_s¸ùt_equÆ_code
;

726  
NGX_CONF_OK
;

729 i‡(
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '=') {

731 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

732  
NGX_CONF_ERROR
;

735 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

736 (
uöçå_t
));

737 i‡(
code
 =
NULL
) {

738  
NGX_CONF_ERROR
;

741 *
code
 = 
ngx_hâp_s¸ùt_nŸ_equÆ_code
;

742  
NGX_CONF_OK
;

745 i‡((
Àn
 =1 && 
p
[0] == '~')

746 || (
Àn
 =2 && 
p
[0] == '~' &&Ö[1] == '*')

747 || (
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '~')

748 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '~' &&Ö[2] == '*'))

750 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

751 (
ngx_hâp_s¸ùt_ªgex_code_t
));

752 i‡(
ªgex
 =
NULL
) {

753  
NGX_CONF_ERROR
;

756 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

758 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

760 
rc
.
∑âîn
 = 
vÆue
[
œ°
];

761 
rc
.
›ti⁄s
 = (
p
[
Àn
 - 1] ='*'Ë? 
NGX_REGEX_CASELESS
 : 0;

762 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

763 
rc
.
îr
.
d©a
 = 
îr°r
;

765 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

766 i‡(
ªgex
->ªgex =
NULL
) {

767  
NGX_CONF_ERROR
;

770 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

771 
ªgex
->
√xt
 = (
ngx_hâp_s¸ùt_ªgex_code_t
);

772 
ªgex
->
ã°
 = 1;

773 i‡(
p
[0] == '!') {

774 
ªgex
->
√g©ive_ã°
 = 1;

776 
ªgex
->
«me
 = 
vÆue
[
œ°
];

778  
NGX_CONF_OK
;

781 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

782 "u√x≥˘ed \"%V\" i¿c⁄dôi⁄", &
vÆue
[
cur
]);

783  
NGX_CONF_ERROR
;

785 } i‡((
Àn
 =2 && 
p
[0] == '-')

786 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '-'))

788 i‡(
cur
 + 1 !
œ°
) {

789 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

790 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

791  
NGX_CONF_ERROR
;

794 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

795 
vÆue
[
œ°
].
Àn
++;

797 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

798  
NGX_CONF_ERROR
;

801 
f›
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

802 (
ngx_hâp_s¸ùt_fûe_code_t
));

803 i‡(
f›
 =
NULL
) {

804  
NGX_CONF_ERROR
;

807 
f›
->
code
 = 
ngx_hâp_s¸ùt_fûe_code
;

809 i‡(
p
[1] == 'f') {

810 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_∂aö
;

811  
NGX_CONF_OK
;

814 i‡(
p
[1] == 'd') {

815 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_dú
;

816  
NGX_CONF_OK
;

819 i‡(
p
[1] == 'e') {

820 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exi°s
;

821  
NGX_CONF_OK
;

824 i‡(
p
[1] == 'x') {

825 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exec
;

826  
NGX_CONF_OK
;

829 i‡(
p
[0] == '!') {

830 i‡(
p
[2] == 'f') {

831 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
;

832  
NGX_CONF_OK
;

835 i‡(
p
[2] == 'd') {

836 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_dú
;

837  
NGX_CONF_OK
;

840 i‡(
p
[2] == 'e') {

841 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
;

842  
NGX_CONF_OK
;

845 i‡(
p
[2] == 'x') {

846 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exec
;

847  
NGX_CONF_OK
;

851 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

852 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

853  
NGX_CONF_ERROR
;

856 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

857 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

859  
NGX_CONF_ERROR
;

860 
	}
}

864 
	$ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

865 
ngx_°r_t
 *
vÆue
)

867 
ngx_öt_t
 
ödex
;

868 
ngx_hâp_s¸ùt_v¨_code_t
 *
v¨_code
;

870 
vÆue
->
Àn
--;

871 
vÆue
->
d©a
++;

873 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

875 i‡(
ödex
 =
NGX_ERROR
) {

876  
NGX_CONF_ERROR
;

879 
v¨_code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

880 (
ngx_hâp_s¸ùt_v¨_code_t
));

881 i‡(
v¨_code
 =
NULL
) {

882  
NGX_CONF_ERROR
;

885 
v¨_code
->
code
 = 
ngx_hâp_s¸ùt_v¨_code
;

886 
v¨_code
->
ödex
 = index;

888  
NGX_CONF_OK
;

889 
	}
}

893 
	$ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

895 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

897 
ngx_öt_t
 
ödex
;

898 
ngx_°r_t
 *
vÆue
;

899 
ngx_hâp_v¨übÀ_t
 *
v
;

900 
ngx_hâp_s¸ùt_v¨_code_t
 *
vcode
;

901 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
vhcode
;

903 
vÆue
 = 
cf
->
¨gs
->
ñts
;

905 i‡(
vÆue
[1].
d©a
[0] != '$') {

906 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

907 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

908  
NGX_CONF_ERROR
;

911 
vÆue
[1].
Àn
--;

912 
vÆue
[1].
d©a
++;

914 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

915 i‡(
v
 =
NULL
) {

916  
NGX_CONF_ERROR
;

919 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

920 i‡(
ödex
 =
NGX_ERROR
) {

921  
NGX_CONF_ERROR
;

924 i‡(
v
->
gë_h™dÀr
 =
NULL


925 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "http_", 5) != 0

926 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "sent_http_", 10) != 0

927 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "upstream_http_", 14) != 0)

929 
v
->
gë_h™dÀr
 = 
ngx_hâp_ªwrôe_v¨
;

930 
v
->
d©a
 = 
ödex
;

933 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[2]Ë!
NGX_CONF_OK
) {

934  
NGX_CONF_ERROR
;

937 i‡(
v
->
£t_h™dÀr
) {

938 
vhcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

939 (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
));

940 i‡(
vhcode
 =
NULL
) {

941  
NGX_CONF_ERROR
;

944 
vhcode
->
code
 = 
ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
;

945 
vhcode
->
h™dÀr
 = 
v
->
£t_h™dÀr
;

946 
vhcode
->
d©a
 = 
v
->data;

948  
NGX_CONF_OK
;

951 
vcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

952 (
ngx_hâp_s¸ùt_v¨_code_t
));

953 i‡(
vcode
 =
NULL
) {

954  
NGX_CONF_ERROR
;

957 
vcode
->
code
 = 
ngx_hâp_s¸ùt_£t_v¨_code
;

958 
vcode
->
ödex
 = (
uöçå_t
) index;

960  
NGX_CONF_OK
;

961 
	}
}

965 
	$ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

966 
ngx_°r_t
 *
vÆue
)

968 
ngx_öt_t
 
n
;

969 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

970 
ngx_hâp_s¸ùt_vÆue_code_t
 *
vÆ
;

971 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
com∂ex
;

973 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
vÆue
);

975 i‡(
n
 == 0) {

976 
vÆ
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

977 (
ngx_hâp_s¸ùt_vÆue_code_t
));

978 i‡(
vÆ
 =
NULL
) {

979  
NGX_CONF_ERROR
;

982 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

984 i‡(
n
 =
NGX_ERROR
) {

985 
n
 = 0;

988 
vÆ
->
code
 = 
ngx_hâp_s¸ùt_vÆue_code
;

989 
vÆ
->
vÆue
 = (
uöçå_t
Ë
n
;

990 
vÆ
->
ãxt_Àn
 = (
uöçå_t
Ë
vÆue
->
Àn
;

991 
vÆ
->
ãxt_d©a
 = (
uöçå_t
Ë
vÆue
->
d©a
;

993  
NGX_CONF_OK
;

996 
com∂ex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

997 (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
));

998 i‡(
com∂ex
 =
NULL
) {

999  
NGX_CONF_ERROR
;

1002 
com∂ex
->
code
 = 
ngx_hâp_s¸ùt_com∂ex_vÆue_code
;

1003 
com∂ex
->
Àngths
 = 
NULL
;

1005 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1007 
sc
.
cf
 = cf;

1008 
sc
.
sour˚
 = 
vÆue
;

1009 
sc
.
Àngths
 = &
com∂ex
->lengths;

1010 
sc
.
vÆues
 = &
lcf
->
codes
;

1011 
sc
.
v¨übÀs
 = 
n
;

1012 
sc
.
com∂ëe_Àngths
 = 1;

1014 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1015  
NGX_CONF_ERROR
;

1018  
NGX_CONF_OK
;

1019 
	}
}

	@src/http/modules/ngx_http_scgi_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

17 
ngx_¨øy_t
 *
	mÊushes
;

18 
ngx_¨øy_t
 *
	m∑øms_Àn
;

19 
ngx_¨øy_t
 *
	m∑øms
;

20 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

22 
ngx_hash_t
 
	mhódîs_hash
;

23 
ngx_uöt_t
 
	mhódî_∑øms
;

25 
ngx_¨øy_t
 *
	mscgi_Àngths
;

26 
ngx_¨øy_t
 *
	mscgi_vÆues
;

28 #i‡(
NGX_HTTP_CACHE
)

29 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

31 } 
	tngx_hâp_scgi_loc_c⁄f_t
;

34 
ngx_öt_t
 
ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
);

36 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_öt_t
 
ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

38 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

40 
ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

41 
ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

43 *
ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

45 *
chûd
);

46 
ngx_öt_t
 
ngx_hâp_scgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

47 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_scgi_loc_c⁄f_à*
¥ev
);

49 *
ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

50 *
ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

53 #i‡(
NGX_HTTP_CACHE
)

54 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

55 *
ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

62 
ngx_c⁄f_bômask_t
 
	gngx_hâp_scgi_√xt_up°ªam_masks
[] = {

63 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

64 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

65 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

66 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

67 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

68 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

69 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

70 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

71 { 
ngx_nuŒ_°rög
, 0 }

75 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
;

78 
ngx_comm™d_t
 
	gngx_hâp_scgi_comm™ds
[] = {

80 { 
ngx_°rög
("scgi_pass"),

81 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

82 
ngx_hâp_scgi_∑ss
,

83 
NGX_HTTP_LOC_CONF_OFFSET
,

85 
NULL
 },

87 { 
ngx_°rög
("scgi_store"),

88 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

89 
ngx_hâp_scgi_°‹e
,

90 
NGX_HTTP_LOC_CONF_OFFSET
,

92 
NULL
 },

94 { 
ngx_°rög
("scgi_store_access"),

95 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

96 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

99 
NULL
 },

101 { 
ngx_°rög
("scgi_buffering"),

102 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

103 
ngx_c⁄f_£t_Êag_¶Ÿ
,

104 
NGX_HTTP_LOC_CONF_OFFSET
,

105 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

106 
NULL
 },

108 { 
ngx_°rög
("scgi_ignore_client_abort"),

109 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

110 
ngx_c⁄f_£t_Êag_¶Ÿ
,

111 
NGX_HTTP_LOC_CONF_OFFSET
,

112 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

113 
NULL
 },

115 { 
ngx_°rög
("scgi_bind"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

117 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

118 
NGX_HTTP_LOC_CONF_OFFSET
,

119 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

120 
NULL
 },

122 { 
ngx_°rög
("scgi_connect_timeout"),

123 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

124 
ngx_c⁄f_£t_m£c_¶Ÿ
,

125 
NGX_HTTP_LOC_CONF_OFFSET
,

126 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

127 
NULL
 },

129 { 
ngx_°rög
("scgi_send_timeout"),

130 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

131 
ngx_c⁄f_£t_m£c_¶Ÿ
,

132 
NGX_HTTP_LOC_CONF_OFFSET
,

133 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

134 
NULL
 },

136 { 
ngx_°rög
("scgi_buffer_size"),

137 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

138 
ngx_c⁄f_£t_size_¶Ÿ
,

139 
NGX_HTTP_LOC_CONF_OFFSET
,

140 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

141 
NULL
 },

143 { 
ngx_°rög
("scgi_pass_request_headers"),

144 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

145 
ngx_c⁄f_£t_Êag_¶Ÿ
,

146 
NGX_HTTP_LOC_CONF_OFFSET
,

147 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

148 
NULL
 },

150 { 
ngx_°rög
("scgi_pass_request_body"),

151 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

152 
ngx_c⁄f_£t_Êag_¶Ÿ
,

153 
NGX_HTTP_LOC_CONF_OFFSET
,

154 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

155 
NULL
 },

157 { 
ngx_°rög
("scgi_intercept_errors"),

158 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

159 
ngx_c⁄f_£t_Êag_¶Ÿ
,

160 
NGX_HTTP_LOC_CONF_OFFSET
,

161 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

162 
NULL
 },

164 { 
ngx_°rög
("scgi_read_timeout"),

165 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

166 
ngx_c⁄f_£t_m£c_¶Ÿ
,

167 
NGX_HTTP_LOC_CONF_OFFSET
,

168 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

169 
NULL
 },

171 { 
ngx_°rög
("scgi_buffers"),

172 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

173 
ngx_c⁄f_£t_bufs_¶Ÿ
,

174 
NGX_HTTP_LOC_CONF_OFFSET
,

175 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

176 
NULL
 },

178 { 
ngx_°rög
("scgi_busy_buffers_size"),

179 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

180 
ngx_c⁄f_£t_size_¶Ÿ
,

181 
NGX_HTTP_LOC_CONF_OFFSET
,

182 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

183 
NULL
 },

185 #i‡(
NGX_HTTP_CACHE
)

187 { 
ngx_°rög
("scgi_cache"),

188 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

189 
ngx_hâp_scgi_ˇche
,

190 
NGX_HTTP_LOC_CONF_OFFSET
,

192 
NULL
 },

194 { 
ngx_°rög
("scgi_cache_key"),

195 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

196 
ngx_hâp_scgi_ˇche_key
,

197 
NGX_HTTP_LOC_CONF_OFFSET
,

199 
NULL
 },

201 { 
ngx_°rög
("scgi_cache_path"),

202 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

203 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

206 &
ngx_hâp_scgi_moduÀ
 },

208 { 
ngx_°rög
("scgi_cache_bypass"),

209 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

210 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

211 
NGX_HTTP_LOC_CONF_OFFSET
,

212 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

213 
NULL
 },

215 { 
ngx_°rög
("scgi_no_cache"),

216 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

217 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

218 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

220 
NULL
 },

222 { 
ngx_°rög
("scgi_cache_valid"),

223 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

224 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

225 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

227 
NULL
 },

229 { 
ngx_°rög
("scgi_cache_min_uses"),

230 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

231 
ngx_c⁄f_£t_num_¶Ÿ
,

232 
NGX_HTTP_LOC_CONF_OFFSET
,

233 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

234 
NULL
 },

236 { 
ngx_°rög
("scgi_cache_use_stale"),

237 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

238 
ngx_c⁄f_£t_bômask_¶Ÿ
,

239 
NGX_HTTP_LOC_CONF_OFFSET
,

240 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

241 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

243 { 
ngx_°rög
("scgi_cache_methods"),

244 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

245 
ngx_c⁄f_£t_bômask_¶Ÿ
,

246 
NGX_HTTP_LOC_CONF_OFFSET
,

247 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

248 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

252 { 
ngx_°rög
("scgi_temp_path"),

253 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

254 
ngx_c⁄f_£t_∑th_¶Ÿ
,

255 
NGX_HTTP_LOC_CONF_OFFSET
,

256 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

257 
NULL
 },

259 { 
ngx_°rög
("scgi_max_temp_file_size"),

260 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

261 
ngx_c⁄f_£t_size_¶Ÿ
,

262 
NGX_HTTP_LOC_CONF_OFFSET
,

263 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

264 
NULL
 },

266 { 
ngx_°rög
("scgi_temp_file_write_size"),

267 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

268 
ngx_c⁄f_£t_size_¶Ÿ
,

269 
NGX_HTTP_LOC_CONF_OFFSET
,

270 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

271 
NULL
 },

273 { 
ngx_°rög
("scgi_next_upstream"),

274 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

275 
ngx_c⁄f_£t_bômask_¶Ÿ
,

276 
NGX_HTTP_LOC_CONF_OFFSET
,

277 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

278 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

280 { 
ngx_°rög
("scgi_param"),

281 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

282 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

283 
NGX_HTTP_LOC_CONF_OFFSET
,

284 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
∑øms_sour˚
),

285 
NULL
 },

287 { 
ngx_°rög
("scgi_pass_header"),

288 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

289 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

290 
NGX_HTTP_LOC_CONF_OFFSET
,

291 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

292 
NULL
 },

294 { 
ngx_°rög
("scgi_hide_header"),

295 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

296 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

297 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

299 
NULL
 },

301 { 
ngx_°rög
("scgi_ignore_headers"),

302 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

303 
ngx_c⁄f_£t_bômask_¶Ÿ
,

304 
NGX_HTTP_LOC_CONF_OFFSET
,

305 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

306 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

308 
ngx_nuŒ_comm™d


312 
ngx_hâp_moduÀ_t
 
	gngx_hâp_scgi_moduÀ_˘x
 = {

313 
NULL
,

314 
NULL
,

316 
NULL
,

317 
NULL
,

319 
NULL
,

320 
NULL
,

322 
ngx_hâp_scgi_¸óã_loc_c⁄f
,

323 
ngx_hâp_scgi_mîge_loc_c⁄f


327 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
 = {

328 
NGX_MODULE_V1
,

329 &
ngx_hâp_scgi_moduÀ_˘x
,

330 
ngx_hâp_scgi_comm™ds
,

331 
NGX_HTTP_MODULE
,

332 
NULL
,

333 
NULL
,

334 
NULL
,

335 
NULL
,

336 
NULL
,

337 
NULL
,

338 
NULL
,

339 
NGX_MODULE_V1_PADDING


343 
ngx_°r_t
 
	gngx_hâp_scgi_hide_hódîs
[] = {

344 
ngx_°rög
("Status"),

345 
ngx_°rög
("X-Accel-Expires"),

346 
ngx_°rög
("X-Accel-Redirect"),

347 
ngx_°rög
("X-Accel-Limit-Rate"),

348 
ngx_°rög
("X-Accel-Buffering"),

349 
ngx_°rög
("X-Accel-Charset"),

350 
ngx_nuŒ_°rög


354 #i‡(
NGX_HTTP_CACHE
)

356 
ngx_keyvÆ_t
 
	gngx_hâp_scgi_ˇche_hódîs
[] = {

357 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

358 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

359 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

360 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

361 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

362 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

363 { 
ngx_nuŒ_°rög
,Çgx_null_string }

369 
ngx_∑th_öô_t
 
	gngx_hâp_scgi_ãmp_∑th
 = {

370 
ngx_°rög
(
NGX_HTTP_SCGI_TEMP_PATH
), { 1, 2, 0 }

374 
ngx_öt_t


375 
	$ngx_hâp_scgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

377 
ngx_öt_t
 
rc
;

378 
ngx_hâp_°©us_t
 *
°©us
;

379 
ngx_hâp_up°ªam_t
 *
u
;

380 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

382 i‡(
r
->
subªque°_ö_mem‹y
) {

383 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

386  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

389 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

390  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

393 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

394 i‡(
°©us
 =
NULL
) {

395  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

398 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_scgi_moduÀ
);

400 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

402 i‡(
scf
->
scgi_Àngths
) {

403 i‡(
	`ngx_hâp_scgi_evÆ
(
r
, 
scf
Ë!
NGX_OK
) {

404  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

408 
u
 = 
r
->
up°ªam
;

410 
	`ngx_°r_£t
(&
u
->
schema
, "scgi://");

411 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_scgi_moduÀ
;

413 
u
->
c⁄f
 = &
scf
->
up°ªam
;

415 #i‡(
NGX_HTTP_CACHE
)

416 
u
->
¸óã_key
 = 
ngx_hâp_scgi_¸óã_key
;

418 
u
->
¸óã_ªque°
 = 
ngx_hâp_scgi_¸óã_ªque°
;

419 
u
->
ªöô_ªque°
 = 
ngx_hâp_scgi_ªöô_ªque°
;

420 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

421 
u
->
ab‹t_ªque°
 = 
ngx_hâp_scgi_ab‹t_ªque°
;

422 
u
->
föÆize_ªque°
 = 
ngx_hâp_scgi_föÆize_ªque°
;

424 
u
->
buf„rög
 = 
scf
->
up°ªam
.buffering;

426 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

427 i‡(
u
->
pùe
 =
NULL
) {

428  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

431 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

432 
u
->
pùe
->
öput_˘x
 = 
r
;

434 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

436 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

437  
rc
;

440  
NGX_DONE
;

441 
	}
}

444 
ngx_öt_t


445 
	$ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_scgi_loc_c⁄f_t
 * 
scf
)

447 
ngx_uæ_t
 
uæ
;

448 
ngx_hâp_up°ªam_t
 *
u
;

450 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

452 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
scf
->
scgi_Àngths
->
ñts
, 0,

453 
scf
->
scgi_vÆues
->
ñts
)

454 =
NULL
)

456  
NGX_ERROR
;

459 
uæ
.
no_ªsﬁve
 = 1;

461 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

462 i‡(
uæ
.
îr
) {

463 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

464 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

467  
NGX_ERROR
;

470 
u
 = 
r
->
up°ªam
;

472 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

473 i‡(
u
->
ªsﬁved
 =
NULL
) {

474  
NGX_ERROR
;

477 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

478 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

479 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

480 
u
->
ªsﬁved
->
«ddrs
 = 1;

481 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

484 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

485 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

486 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

489  
NGX_OK
;

490 
	}
}

493 #i‡(
NGX_HTTP_CACHE
)

495 
ngx_öt_t


496 
	$ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

498 
ngx_°r_t
 *
key
;

499 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

501 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

502 i‡(
key
 =
NULL
) {

503  
NGX_ERROR
;

506 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

508 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
scf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

509  
NGX_ERROR
;

512  
NGX_OK
;

513 
	}
}

518 
ngx_öt_t


519 
	$ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

521 
u_ch¨
 
ch
, *
key
, *
vÆ
, *
lowˇ£_key
;

522 
size_t
 
Àn
, 
Æloˇãd
;

523 
ngx_buf_t
 *
b
;

524 
ngx_°r_t
 *
c⁄ã¡_Àngth
;

525 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
hódî_∑øms
;

526 
ngx_chaö_t
 *
˛
, *
body
;

527 
ngx_li°_∑π_t
 *
∑π
;

528 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

529 
ngx_hâp_s¸ùt_code_±
 
code
;

530 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

531 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

532 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

533 
ngx_°r_t
 
zîo
 = 
	`ngx_°rög
("0");

535 
c⁄ã¡_Àngth
 = 
r
->
hódîs_ö
.content_length ?

536 &
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
 : &
zîo
;

538 
Àn
 = ("CONTENT_LENGTH"Ë+ 
c⁄ã¡_Àngth
->len + 1;

540 
hódî_∑øms
 = 0;

541 
ign‹ed
 = 
NULL
;

543 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

545 i‡(
scf
->
∑øms_Àn
) {

546 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

548 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
scf
->
Êushes
);

549 
À
.
Êushed
 = 1;

551 
À
.
ù
 = 
scf
->
∑øms_Àn
->
ñts
;

552 
À
.
ªque°
 = 
r
;

554 *(
uöçå_t
 *Ë
À
.
ù
) {

556 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

557 
Àn
 +
	`lcode
(&
À
);

559 *(
uöçå_t
 *Ë
À
.
ù
) {

560 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

561 
Àn
 +
	`lcode
(&
À
);

563 
Àn
++;

565 
À
.
ù
 +(
uöçå_t
);

569 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

571 
Æloˇãd
 = 0;

572 
lowˇ£_key
 = 
NULL
;

574 i‡(
scf
->
hódî_∑øms
) {

575 
n
 = 0;

576 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

578 
∑π
) {

579 
n
 +
∑π
->
√…s
;

580 
∑π
 =Ö¨t->
√xt
;

583 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

584 i‡(
ign‹ed
 =
NULL
) {

585  
NGX_ERROR
;

589 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

590 
hódî
 = 
∑π
->
ñts
;

592 
i
 = 0; ; i++) {

594 i‡(
i
 >
∑π
->
√…s
) {

595 i‡(
∑π
->
√xt
 =
NULL
) {

599 
∑π
 =Ö¨t->
√xt
;

600 
hódî
 = 
∑π
->
ñts
;

601 
i
 = 0;

604 i‡(
scf
->
hódî_∑øms
) {

605 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

606 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

607 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

608 i‡(
lowˇ£_key
 =
NULL
) {

609  
NGX_ERROR
;

613 
hash
 = 0;

615 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

616 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

618 i‡(
ch
 >= 'A' && ch <= 'Z') {

619 
ch
 |= 0x20;

621 } i‡(
ch
 == '-') {

622 
ch
 = '_';

625 
hash
 = 
	`ngx_hash
(hash, 
ch
);

626 
lowˇ£_key
[
n
] = 
ch
;

629 i‡(
	`ngx_hash_föd
(&
scf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

630 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

635 
Àn
 +("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len + 1

636 + 
hódî
[
i
].
vÆue
.
Àn
 + 1;

642 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
 + 1 + 
Àn
 + 1);

643 i‡(
b
 =
NULL
) {

644  
NGX_ERROR
;

647 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

648 i‡(
˛
 =
NULL
) {

649  
NGX_ERROR
;

652 
˛
->
buf
 = 
b
;

654 
b
->
œ°
 = 
	`ngx_¢¥ötf
(b->last,

655 
NGX_SIZE_T_LEN
 + 1 + ("CONTENT_LENGTH")

656 + 
NGX_OFF_T_LEN
 + 1,

658 
Àn
, 
c⁄ã¡_Àngth
);

660 i‡(
scf
->
∑øms_Àn
) {

661 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

663 
e
.
ù
 = 
scf
->
∑øms
->
ñts
;

664 
e
.
pos
 = 
b
->
œ°
;

665 
e
.
ªque°
 = 
r
;

666 
e
.
Êushed
 = 1;

668 *(
uöçå_t
 *Ë
e
.
ù
) {

670 #i‡(
NGX_DEBUG
)

671 
key
 = 
e
.
pos
;

673 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

674 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

676 #i‡(
NGX_DEBUG
)

677 
vÆ
 = 
e
.
pos
;

679 *(
uöçå_t
 *Ë
e
.
ù
) {

680 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

681 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

683 *
e
.
pos
++ = '\0';

684 
e
.
ù
 +(
uöçå_t
);

686 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

687 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

690 
b
->
œ°
 = 
e
.
pos
;

693 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

695 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

696 
hódî
 = 
∑π
->
ñts
;

698 
i
 = 0; ; i++) {

700 i‡(
i
 >
∑π
->
√…s
) {

701 i‡(
∑π
->
√xt
 =
NULL
) {

705 
∑π
 =Ö¨t->
√xt
;

706 
hódî
 = 
∑π
->
ñts
;

707 
i
 = 0;

710 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

711 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

712 
√xt
;

716 
key
 = 
b
->
œ°
;

717 
b
->
œ°
 = 
	`ngx_˝ymem
(
key
, "HTTP_", ("HTTP_") - 1);

719 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

720 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

722 i‡(
ch
 >= 'a' && ch <= 'z') {

723 
ch
 &= ~0x20;

725 } i‡(
ch
 == '-') {

726 
ch
 = '_';

729 *
b
->
œ°
++ = 
ch
;

732 *
b
->
œ°
++ = (
u_ch¨
) 0;

734 
vÆ
 = 
b
->
œ°
;

735 
b
->
œ°
 = 
	`ngx_c›y
(
vÆ
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

736 *
b
->
œ°
++ = (
u_ch¨
) 0;

738 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

739 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

741 
√xt
:

747 *
b
->
œ°
++ = (
u_ch¨
) ',';

749 i‡(
scf
->
up°ªam
.
∑ss_ªque°_body
) {

750 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

751 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

753 
body
) {

754 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

755 i‡(
b
 =
NULL
) {

756  
NGX_ERROR
;

759 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

761 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

762 i‡(
˛
->
√xt
 =
NULL
) {

763  
NGX_ERROR
;

766 
˛
 = cl->
√xt
;

767 
˛
->
buf
 = 
b
;

769 
body
 = body->
√xt
;

773 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

776 
˛
->
√xt
 = 
NULL
;

778  
NGX_OK
;

779 
	}
}

782 
ngx_öt_t


783 
	$ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

785 
ngx_hâp_°©us_t
 *
°©us
;

787 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

789 i‡(
°©us
 =
NULL
) {

790  
NGX_OK
;

793 
°©us
->
code
 = 0;

794 
°©us
->
cou¡
 = 0;

795 
°©us
->
°¨t
 = 
NULL
;

796 
°©us
->
íd
 = 
NULL
;

798 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

800  
NGX_OK
;

801 
	}
}

804 
ngx_öt_t


805 
	$ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

807 
size_t
 
Àn
;

808 
ngx_öt_t
 
rc
;

809 
ngx_hâp_°©us_t
 *
°©us
;

810 
ngx_hâp_up°ªam_t
 *
u
;

812 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

814 i‡(
°©us
 =
NULL
) {

815  
NGX_ERROR
;

818 
u
 = 
r
->
up°ªam
;

820 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

822 i‡(
rc
 =
NGX_AGAIN
) {

823  
rc
;

826 i‡(
rc
 =
NGX_ERROR
) {

827 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

828  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

831 i‡(
u
->
°©e
) {

832 
u
->
°©e
->
°©us
 = sètus->
code
;

835 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

837 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

838 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

840 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

841 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

842  
NGX_ERROR
;

845 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

847 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

849 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

851 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

853  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

854 
	}
}

857 
ngx_öt_t


858 
	$ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

860 
ngx_°r_t
 *
°©us_löe
;

861 
ngx_öt_t
 
rc
, 
°©us
;

862 
ngx_èbÀ_ñt_t
 *
h
;

863 
ngx_hâp_up°ªam_t
 *
u
;

864 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

865 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

867 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

871 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

873 i‡(
rc
 =
NGX_OK
) {

877 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

878 i‡(
h
 =
NULL
) {

879  
NGX_ERROR
;

882 
h
->
hash
 = 
r
->
hódî_hash
;

884 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

885 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

887 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

888 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

889 + 
h
->
key
.
Àn
);

890 i‡(
h
->
key
.
d©a
 =
NULL
) {

891  
NGX_ERROR
;

894 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

895 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

897 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

898 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

899 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

900 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

902 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

903 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

906 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

909 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

910 
h
->
lowˇ£_key
, h->
key
.
Àn
);

912 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

913  
NGX_ERROR
;

916 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

917 "hâ∞scgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

922 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

926 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

929 
u
 = 
r
->
up°ªam
;

931 i‡(
u
->
hódîs_ö
.
°©us_n
) {

932  
NGX_OK
;

935 i‡(
u
->
hódîs_ö
.
°©us
) {

936 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

938 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

939 i‡(
°©us
 =
NGX_ERROR
) {

940 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

942 
°©us_löe
);

943  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

946 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

947 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

949 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

950 
u
->
hódîs_ö
.
°©us_n
 = 302;

951 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

955 
u
->
hódîs_ö
.
°©us_n
 = 200;

956 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

959 i‡(
u
->
°©e
) {

960 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

963  
NGX_OK
;

966 i‡(
rc
 =
NGX_AGAIN
) {

967  
NGX_AGAIN
;

972 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

975  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

977 
	}
}

981 
	$ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

983 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

987 
	}
}

991 
	$ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

993 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

997 
	}
}

1001 
	$ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1003 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
;

1005 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_scgi_loc_c⁄f_t
));

1006 i‡(
c⁄f
 =
NULL
) {

1007  
NULL
;

1010 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1011 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1012 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1013 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1015 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1016 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1017 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1019 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1020 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1022 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1023 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1024 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1026 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1027 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1029 #i‡(
NGX_HTTP_CACHE
)

1030 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1031 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1032 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1033 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1034 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1037 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1038 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1040 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1043 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1045 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1047 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "scgi");

1049  
c⁄f
;

1050 
	}
}

1054 
	$ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1056 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1057 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1059 
size_t
 
size
;

1060 
ngx_hash_öô_t
 
hash
;

1061 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1063 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1064 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1066 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1067 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1068 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1072 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1073 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1075 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1076 
¥ev
->
up°ªam
.
buf„rög
, 1);

1078 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1079 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1081 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1082 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1084 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1085 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1087 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1088 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1090 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1091 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1093 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1094 
¥ev
->
up°ªam
.
buf„r_size
,

1095 (
size_t
Ë
ngx_∑gesize
);

1098 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1099 8, 
ngx_∑gesize
);

1101 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1102 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1104  
NGX_CONF_ERROR
;

1108 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1109 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1110 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1114 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1115 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1116 
NGX_CONF_UNSET_SIZE
);

1118 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1119 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1121 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1122 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1125 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1126 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1131  
NGX_CONF_ERROR
;

1134 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1135 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1137 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1141  
NGX_CONF_ERROR
;

1145 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1146 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1147 
NGX_CONF_UNSET_SIZE
);

1149 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1150 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1152 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1153 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1156 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1157 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1162  
NGX_CONF_ERROR
;

1166 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1167 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1168 
NGX_CONF_UNSET_SIZE
);

1170 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1171 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1173 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1174 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1177 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1178 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
) {

1179 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1185  
NGX_CONF_ERROR
;

1189 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1190 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1191 
NGX_CONF_BITMASK_SET
);

1194 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1195 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1196 (
NGX_CONF_BITMASK_SET


1197 |
NGX_HTTP_UPSTREAM_FT_ERROR


1198 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1200 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1201 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1202 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1205 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1206 
¥ev
->
up°ªam
.
ãmp_∑th
,

1207 &
ngx_hâp_scgi_ãmp_∑th
)

1208 !
NGX_OK
)

1210  
NGX_CONF_ERROR
;

1213 #i‡(
NGX_HTTP_CACHE
)

1215 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1216 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1218 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1219 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1221 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1223 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1225 &
shm_z⁄e
->
shm
.
«me
);

1227  
NGX_CONF_ERROR
;

1230 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1231 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1233 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1234 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1235 (
NGX_CONF_BITMASK_SET


1236 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1238 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1239 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1240 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1243 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1244 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1247 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1248 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1251 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1253 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1254 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1256 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1257 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1259 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1260 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1262 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1263 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1268 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1269 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1270 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1271 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1273 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1274 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1276 
hash
.
max_size
 = 512;

1277 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1278 
hash
.
«me
 = "scgi_hide_headers_hash";

1280 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1281 &
¥ev
->
up°ªam
, 
ngx_hâp_scgi_hide_hódîs
, &
hash
)

1282 !
NGX_OK
)

1284  
NGX_CONF_ERROR
;

1287 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

1288 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1291 i‡(
c⁄f
->
scgi_Àngths
 =
NULL
) {

1292 
c⁄f
->
scgi_Àngths
 = 
¥ev
->scgi_lengths;

1293 
c⁄f
->
scgi_vÆues
 = 
¥ev
->scgi_values;

1296 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
scgi_Àngths
) {

1297 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1298 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

1299 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1303 i‡(
	`ngx_hâp_scgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

1304  
NGX_CONF_ERROR
;

1307  
NGX_CONF_OK
;

1308 
	}
}

1311 
ngx_öt_t


1312 
	$ngx_hâp_scgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,

1313 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
)

1315 
u_ch¨
 *
p
;

1316 
size_t
 
size
;

1317 
uöçå_t
 *
code
;

1318 
ngx_uöt_t
 
i
, 
n§c
;

1319 
ngx_¨øy_t
 
hódîs_«mes
;

1320 #i‡(
NGX_HTTP_CACHE
)

1321 
ngx_¨øy_t
 
∑øms_mîged
;

1323 
ngx_keyvÆ_t
 *
§c
;

1324 
ngx_hash_key_t
 *
hk
;

1325 
ngx_hash_öô_t
 
hash
;

1326 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1327 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1329 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1330 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1332 i‡(
¥ev
->
hódîs_hash
.
buckës


1333 #i‡(
NGX_HTTP_CACHE
)

1334 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
Ë=(
¥ev
->upstream.cache == NULL))

1338 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

1339 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

1340 
c⁄f
->
∑øms
 = 
¥ev
->params;

1341 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

1342 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

1344  
NGX_OK
;

1348 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


1349 #i‡(
NGX_HTTP_CACHE
)

1350 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1354 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

1355  
NGX_OK
;

1358 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1359 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

1360  
NGX_ERROR
;

1363 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1364 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1365  
NGX_ERROR
;

1368 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1369 !
NGX_OK
)

1371  
NGX_ERROR
;

1374 i‡(
c⁄f
->
∑øms_sour˚
) {

1375 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1376 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1379 
§c
 = 
NULL
;

1380 
n§c
 = 0;

1383 #i‡(
NGX_HTTP_CACHE
)

1385 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1386 
ngx_keyvÆ_t
 *
h
, *
s
;

1388 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

1389 !
NGX_OK
)

1391  
NGX_ERROR
;

1394 
i
 = 0; i < 
n§c
; i++) {

1396 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1397 i‡(
s
 =
NULL
) {

1398  
NGX_ERROR
;

1401 *
s
 = 
§c
[
i
];

1404 
h
 = 
ngx_hâp_scgi_ˇche_hódîs
;

1406 
h
->
key
.
Àn
) {

1408 
§c
 = 
∑øms_mîged
.
ñts
;

1409 
n§c
 = 
∑øms_mîged
.
√…s
;

1411 
i
 = 0; i < 
n§c
; i++) {

1412 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1413 
√xt
;

1417 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1418 i‡(
s
 =
NULL
) {

1419  
NGX_ERROR
;

1422 *
s
 = *
h
;

1424 
√xt
:

1426 
h
++;

1429 
§c
 = 
∑øms_mîged
.
ñts
;

1430 
n§c
 = 
∑øms_mîged
.
√…s
;

1435 
i
 = 0; i < 
n§c
; i++) {

1437 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1438 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1440 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1441 i‡(
hk
 =
NULL
) {

1442  
NGX_ERROR
;

1445 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1446 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1447 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1448 
hk
->
vÆue
 = (*) 1;

1450 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1455 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1456 (
ngx_hâp_s¸ùt_c›y_code_t
));

1457 i‡(
c›y
 =
NULL
) {

1458  
NGX_ERROR
;

1461 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1462 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1465 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1466 + 
§c
[
i
].
key
.
Àn
 + 1 + (
uöçå_t
) - 1)

1467 & ~((
uöçå_t
) - 1);

1469 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

1470 i‡(
c›y
 =
NULL
) {

1471  
NGX_ERROR
;

1474 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1475 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1477 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1478 (Ë
	`ngx_˝y°∫
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
 + 1);

1481 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1483 
sc
.
cf
 = cf;

1484 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1485 
sc
.
Êushes
 = &
c⁄f
->flushes;

1486 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

1487 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

1489 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1490  
NGX_ERROR
;

1493 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1494 i‡(
code
 =
NULL
) {

1495  
NGX_ERROR
;

1498 *
code
 = (
uöçå_t
Ë
NULL
;

1501 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1502 i‡(
code
 =
NULL
) {

1503  
NGX_ERROR
;

1506 *
code
 = (
uöçå_t
Ë
NULL
;

1509 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1510 i‡(
code
 =
NULL
) {

1511  
NGX_ERROR
;

1514 *
code
 = (
uöçå_t
Ë
NULL
;

1516 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1517 i‡(
code
 =
NULL
) {

1518  
NGX_ERROR
;

1521 *
code
 = (
uöçå_t
Ë
NULL
;

1523 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

1525 
hash
.hash = &
c⁄f
->
hódîs_hash
;

1526 
hash
.
key
 = 
ngx_hash_key_lc
;

1527 
hash
.
max_size
 = 512;

1528 
hash
.
buckë_size
 = 64;

1529 
hash
.
«me
 = "scgi_params_hash";

1530 
hash
.
poﬁ
 = 
cf
->pool;

1531 
hash
.
ãmp_poﬁ
 = 
NULL
;

1533  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1534 
	}
}

1538 
	$ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1540 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1542 
ngx_uæ_t
 
u
;

1543 
ngx_°r_t
 *
vÆue
, *
uæ
;

1544 
ngx_uöt_t
 
n
;

1545 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1546 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1548 i‡(
scf
->
up°ªam
.up°ªam || scf->
scgi_Àngths
) {

1552 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
 (
cf
, 
ngx_hâp_c‹e_moduÀ
);

1553 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1555 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1557 
uæ
 = &
vÆue
[1];

1559 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1561 i‡(
n
) {

1563 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1565 
sc
.
cf
 = cf;

1566 
sc
.
sour˚
 = 
uæ
;

1567 
sc
.
Àngths
 = &
scf
->
scgi_Àngths
;

1568 
sc
.
vÆues
 = &
scf
->
scgi_vÆues
;

1569 
sc
.
v¨übÀs
 = 
n
;

1570 
sc
.
com∂ëe_Àngths
 = 1;

1571 
sc
.
com∂ëe_vÆues
 = 1;

1573 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1574  
NGX_CONF_ERROR
;

1577  
NGX_CONF_OK
;

1580 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1582 
u
.
uæ
 = 
vÆue
[1];

1583 
u
.
no_ªsﬁve
 = 1;

1585 
scf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1586 i‡(
scf
->
up°ªam
.up°ªam =
NULL
) {

1587  
NGX_CONF_ERROR
;

1590 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1591 
˛cf
->
auto_ªdúe˘
 = 1;

1594  
NGX_CONF_OK
;

1595 
	}
}

1599 
	$ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1601 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1603 
ngx_°r_t
 *
vÆue
;

1604 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1606 i‡(
scf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
 || scf->up°ªam.
°‹e_Àngths
) {

1610 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1612 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1613 
scf
->
up°ªam
.
°‹e
 = 0;

1614  
NGX_CONF_OK
;

1617 #i‡(
NGX_HTTP_CACHE
)

1619 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


1620 && 
scf
->
up°ªam
.
ˇche
 !
NULL
)

1627 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1628 
scf
->
up°ªam
.
°‹e
 = 1;

1629  
NGX_CONF_OK
;

1633 
vÆue
[1].
Àn
++;

1635 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1637 
sc
.
cf
 = cf;

1638 
sc
.
sour˚
 = &
vÆue
[1];

1639 
sc
.
Àngths
 = &
scf
->
up°ªam
.
°‹e_Àngths
;

1640 
sc
.
vÆues
 = &
scf
->
up°ªam
.
°‹e_vÆues
;

1641 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);;

1642 
sc
.
com∂ëe_Àngths
 = 1;

1643 
sc
.
com∂ëe_vÆues
 = 1;

1645 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1646  
NGX_CONF_ERROR
;

1649  
NGX_CONF_OK
;

1650 
	}
}

1653 #i‡(
NGX_HTTP_CACHE
)

1656 
	$ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1658 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1660 
ngx_°r_t
 *
vÆue
;

1662 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1664 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

1668 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1669 
scf
->
up°ªam
.
ˇche
 = 
NULL
;

1670  
NGX_CONF_OK
;

1673 i‡(
scf
->
up°ªam
.
°‹e
 > 0 || scf->up°ªam.
°‹e_Àngths
) {

1677 
scf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1678 &
ngx_hâp_scgi_moduÀ
);

1679 i‡(
scf
->
up°ªam
.
ˇche
 =
NULL
) {

1680  
NGX_CONF_ERROR
;

1683  
NGX_CONF_OK
;

1684 
	}
}

1688 
	$ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1690 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1692 
ngx_°r_t
 *
vÆue
;

1693 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1695 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1697 i‡(
scf
->
ˇche_key
.
vÆue
.
Àn
) {

1701 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1703 
ccv
.
cf
 = cf;

1704 
ccv
.
vÆue
 = &value[1];

1705 
ccv
.
com∂ex_vÆue
 = &
scf
->
ˇche_key
;

1707 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1708  
NGX_CONF_ERROR
;

1711  
NGX_CONF_OK
;

1712 
	}
}

	@src/http/modules/ngx_http_secure_link_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

15 
ngx_hâp_com∂ex_vÆue_t
 *
	mv¨übÀ
;

16 
ngx_hâp_com∂ex_vÆue_t
 *
	mmd5
;

17 
ngx_°r_t
 
	m£¸ë
;

18 } 
	tngx_hâp_£cuª_lök_c⁄f_t
;

22 
ngx_°r_t
 
	mexpúes
;

23 } 
	tngx_hâp_£cuª_lök_˘x_t
;

26 
ngx_öt_t
 
ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

28 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 *
ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 
ngx_öt_t
 
ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

37 
ngx_comm™d_t
 
	gngx_hâp_£cuª_lök_comm™ds
[] = {

39 { 
ngx_°rög
("secure_link"),

40 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

41 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

42 
NGX_HTTP_LOC_CONF_OFFSET
,

43 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
v¨übÀ
),

44 
NULL
 },

46 { 
ngx_°rög
("secure_link_md5"),

47 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

48 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

49 
NGX_HTTP_LOC_CONF_OFFSET
,

50 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
md5
),

51 
NULL
 },

53 { 
ngx_°rög
("secure_link_secret"),

54 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

55 
ngx_c⁄f_£t_°r_¶Ÿ
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
£¸ë
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ_˘x
 = {

65 
ngx_hâp_£cuª_lök_add_v¨übÀs
,

66 
NULL
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_£cuª_lök_¸óã_c⁄f
,

75 
ngx_hâp_£cuª_lök_mîge_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_£cuª_lök_moduÀ_˘x
,

82 
ngx_hâp_£cuª_lök_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_«me
 = 
ngx_°rög
("secure_link");

96 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_expúes_«me
 =

97 
ngx_°rög
("secure_link_expires");

100 
ngx_öt_t


101 
	$ngx_hâp_£cuª_lök_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

104 
u_ch¨
 *
p
, *
œ°
;

105 
ngx_°r_t
 
vÆ
, 
hash
;

106 
time_t
 
expúes
;

107 
ngx_md5_t
 
md5
;

108 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

109 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

110 
u_ch¨
 
hash_buf
[16], 
md5_buf
[16];

112 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

114 i‡(
c⁄f
->
£¸ë
.
Àn
) {

115  
	`ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
r
, 
c⁄f
, 
v
, 
d©a
);

118 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 || c⁄f->
md5
 == NULL) {

119 
nŸ_found
;

122 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
v¨übÀ
, &
vÆ
Ë!
NGX_OK
) {

123  
NGX_ERROR
;

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

127 "£cuªÜök: \"%V\"", &
vÆ
);

129 
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

131 
p
 = 
	`ngx_°æchr
(
vÆ
.
d©a
, 
œ°
, ',');

132 
expúes
 = 0;

134 i‡(
p
) {

135 
vÆ
.
Àn
 = 
p
++ - vÆ.
d©a
;

137 
expúes
 = 
	`ngx_©Ÿm
(
p
, 
œ°
 -Ö);

138 i‡(
expúes
 <= 0) {

139 
nŸ_found
;

142 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_£cuª_lök_˘x_t
));

143 i‡(
˘x
 =
NULL
) {

144  
NGX_ERROR
;

147 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_£cuª_lök_moduÀ
);

149 
˘x
->
expúes
.
Àn
 = 
œ°
 - 
p
;

150 
˘x
->
expúes
.
d©a
 = 
p
;

153 i‡(
vÆ
.
Àn
 > 24) {

154 
nŸ_found
;

157 
hash
.
Àn
 = 16;

158 
hash
.
d©a
 = 
hash_buf
;

160 i‡(
	`ngx_decode_ba£64uæ
(&
hash
, &
vÆ
Ë!
NGX_OK
) {

161 
nŸ_found
;

164 i‡(
hash
.
Àn
 != 16) {

165 
nŸ_found
;

168 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
md5
, &
vÆ
Ë!
NGX_OK
) {

169  
NGX_ERROR
;

172 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

173 "£cuªÜök md5: \"%V\"", &
vÆ
);

175 
	`ngx_md5_öô
(&
md5
);

176 
	`ngx_md5_upd©e
(&
md5
, 
vÆ
.
d©a
, vÆ.
Àn
);

177 
	`ngx_md5_föÆ
(
md5_buf
, &
md5
);

179 i‡(
	`ngx_memcmp
(
hash_buf
, 
md5_buf
, 16) != 0) {

180 
nŸ_found
;

183 
v
->
d©a
 = (
u_ch¨
 *Ë((
expúes
 &&Éxpúe†< 
	`ngx_time
()) ? "0" : "1");

184 
v
->
Àn
 = 1;

185 
v
->
vÆid
 = 1;

186 
v
->
no_ˇchóbÀ
 = 0;

187 
v
->
nŸ_found
 = 0;

189  
NGX_OK
;

191 
nŸ_found
:

193 
v
->
nŸ_found
 = 1;

195  
NGX_OK
;

196 
	}
}

199 
ngx_öt_t


200 
	$ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

201 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

202 
uöçå_t
 
d©a
)

204 
u_ch¨
 *
p
, *
°¨t
, *
íd
, *
œ°
;

205 
size_t
 
Àn
;

206 
ngx_öt_t
 
n
;

207 
ngx_uöt_t
 
i
;

208 
ngx_md5_t
 
md5
;

209 
u_ch¨
 
hash
[16];

211 
p
 = &
r
->
u≈¨£d_uri
.
d©a
[1];

212 
œ°
 = 
r
->
u≈¨£d_uri
.
d©a
 +Ñ->u≈¨£d_uri.
Àn
;

214 
p
 < 
œ°
) {

215 i‡(*
p
++ == '/') {

216 
°¨t
 = 
p
;

217 
md5_°¨t
;

221 
nŸ_found
;

223 
md5_°¨t
:

225 
p
 < 
œ°
) {

226 i‡(*
p
++ == '/') {

227 
íd
 = 
p
 - 1;

228 
uæ_°¨t
;

232 
nŸ_found
;

234 
uæ_°¨t
:

236 
Àn
 = 
œ°
 - 
p
;

238 i‡(
íd
 - 
°¨t
 !32 || 
Àn
 == 0) {

239 
nŸ_found
;

242 
	`ngx_md5_öô
(&
md5
);

243 
	`ngx_md5_upd©e
(&
md5
, 
p
, 
Àn
);

244 
	`ngx_md5_upd©e
(&
md5
, 
c⁄f
->
£¸ë
.
d©a
, c⁄f->£¸ë.
Àn
);

245 
	`ngx_md5_föÆ
(
hash
, &
md5
);

247 
i
 = 0; i < 16; i++) {

248 
n
 = 
	`ngx_hextoi
(&
°¨t
[2 * 
i
], 2);

249 i‡(
n
 =
NGX_ERROR
 ||Ç !
hash
[
i
]) {

250 
nŸ_found
;

254 
v
->
Àn
 =Üen;

255 
v
->
vÆid
 = 1;

256 
v
->
no_ˇchóbÀ
 = 0;

257 
v
->
nŸ_found
 = 0;

258 
v
->
d©a
 = 
p
;

260  
NGX_OK
;

262 
nŸ_found
:

264 
v
->
nŸ_found
 = 1;

266  
NGX_OK
;

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

272 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

274 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

276 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

278 i‡(
˘x
) {

279 
v
->
Àn
 = 
˘x
->
expúes
.len;

280 
v
->
vÆid
 = 1;

281 
v
->
no_ˇchóbÀ
 = 0;

282 
v
->
nŸ_found
 = 0;

283 
v
->
d©a
 = 
˘x
->
expúes
.data;

286 
v
->
nŸ_found
 = 1;

289  
NGX_OK
;

290 
	}
}

294 
	$ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

296 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

298 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_£cuª_lök_c⁄f_t
));

299 i‡(
c⁄f
 =
NULL
) {

300  
NULL
;

311  
c⁄f
;

312 
	}
}

316 
	$ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

318 
ngx_hâp_£cuª_lök_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

319 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
 = 
chûd
;

321 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
£¸ë
, 
¥ev
->secret, "");

323 i‡(
c⁄f
->
v¨übÀ
 =
NULL
) {

324 
c⁄f
->
v¨übÀ
 = 
¥ev
->variable;

327 i‡(
c⁄f
->
md5
 =
NULL
) {

328 
c⁄f
->
md5
 = 
¥ev
->md5;

331  
NGX_CONF_OK
;

332 
	}
}

335 
ngx_öt_t


336 
	$ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

338 
ngx_hâp_v¨übÀ_t
 *
v¨
;

340 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_«me
, 0);

341 i‡(
v¨
 =
NULL
) {

342  
NGX_ERROR
;

345 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_v¨übÀ
;

347 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_expúes_«me
, 0);

348 i‡(
v¨
 =
NULL
) {

349  
NGX_ERROR
;

352 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
;

354  
NGX_OK
;

355 
	}
}

	@src/http/modules/ngx_http_split_clients_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
uöt32_t
 
	m≥r˚¡
;

15 
ngx_hâp_v¨übÀ_vÆue_t
 
	mvÆue
;

16 } 
	tngx_hâp_•lô_˛õ¡s_∑π_t
;

20 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

21 
ngx_¨øy_t
 
	m∑πs
;

22 } 
	tngx_hâp_•lô_˛õ¡s_˘x_t
;

25 *
ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 *
ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

28 *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_hâp_•lô_˛õ¡s_comm™ds
[] = {

32 { 
ngx_°rög
("split_clients"),

33 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

34 
ngx_c⁄f_•lô_˛õ¡s_block
,

35 
NGX_HTTP_MAIN_CONF_OFFSET
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ_˘x
 = {

44 
NULL
,

45 
NULL
,

47 
NULL
,

48 
NULL
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL


58 
ngx_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_hâp_•lô_˛õ¡s_moduÀ_˘x
,

61 
ngx_hâp_•lô_˛õ¡s_comm™ds
,

62 
NGX_HTTP_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_hâp_•lô_˛õ¡s_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

78 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
 = (ngx_hâp_•lô_˛õ¡s_˘x_à*Ë
d©a
;

80 
uöt32_t
 
hash
;

81 
ngx_°r_t
 
vÆ
;

82 
ngx_uöt_t
 
i
;

83 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

85 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

87 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

88  
NGX_OK
;

91 
hash
 = 
	`ngx_murmur_hash2
(
vÆ
.
d©a
, vÆ.
Àn
);

93 
∑π
 = 
˘x
->
∑πs
.
ñts
;

95 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

98 "hâ∞•lô: %uD %uD", 
hash
, 
∑π
[
i
].
≥r˚¡
);

100 i‡(
hash
 < 
∑π
[
i
].
≥r˚¡
) {

101 *
v
 = 
∑π
[
i
].
vÆue
;

102  
NGX_OK
;

106  
NGX_OK
;

107 
	}
}

111 
	$ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

113 *
rv
;

114 
ngx_°r_t
 *
vÆue
, 
«me
;

115 
ngx_uöt_t
 
i
, 
sum
, 
œ°
;

116 
ngx_c⁄f_t
 
ßve
;

117 
ngx_hâp_v¨übÀ_t
 *
v¨
;

118 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

119 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

120 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

122 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•lô_˛õ¡s_˘x_t
));

123 i‡(
˘x
 =
NULL
) {

124  
NGX_CONF_ERROR
;

127 
vÆue
 = 
cf
->
¨gs
->
ñts
;

129 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

131 
ccv
.
cf
 = cf;

132 
ccv
.
vÆue
 = &value[1];

133 
ccv
.
com∂ex_vÆue
 = &
˘x
->
vÆue
;

135 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

136  
NGX_CONF_ERROR
;

139 
«me
 = 
vÆue
[2];

140 
«me
.
Àn
--;

141 
«me
.
d©a
++;

143 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

144 i‡(
v¨
 =
NULL
) {

145  
NGX_CONF_ERROR
;

148 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s_v¨übÀ
;

149 
v¨
->
d©a
 = (
uöçå_t
Ë
˘x
;

151 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑πs
, 
cf
->
poﬁ
, 2,

152 (
ngx_hâp_•lô_˛õ¡s_∑π_t
))

153 !
NGX_OK
)

155  
NGX_CONF_ERROR
;

158 
ßve
 = *
cf
;

159 
cf
->
˘x
 = ctx;

160 
cf
->
h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s
;

161 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

163 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

165 *
cf
 = 
ßve
;

167 i‡(
rv
 !
NGX_CONF_OK
) {

168  
rv
;

171 
sum
 = 0;

172 
œ°
 = 0;

173 
∑π
 = 
˘x
->
∑πs
.
ñts
;

175 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

176 
sum
 = 
∑π
[
i
].
≥r˚¡
 ? sum +Öart[i].percent : 10000;

177 i‡(
sum
 > 10000) {

178 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

180  
NGX_CONF_ERROR
;

183 i‡(
∑π
[
i
].
≥r˚¡
) {

184 
∑π
[
i
].
≥r˚¡
 = (
uöt32_t
)

185 (
œ°
 + 0xfffffff‡/ 10000 * 
∑π
[
i
].
≥r˚¡
);

187 
∑π
[
i
].
≥r˚¡
 = 0xffffffff;

190 
œ°
 = 
∑π
[
i
].
≥r˚¡
;

193  
rv
;

194 
	}
}

198 
	$ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

200 
ngx_öt_t
 
n
;

201 
ngx_°r_t
 *
vÆue
;

202 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

203 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

205 
˘x
 = 
cf
->ctx;

206 
vÆue
 = 
cf
->
¨gs
->
ñts
;

208 
∑π
 = 
	`ngx_¨øy_push
(&
˘x
->
∑πs
);

209 i‡(
∑π
 =
NULL
) {

210  
NGX_CONF_ERROR
;

213 i‡(
vÆue
[0].
Àn
 =1 && vÆue[0].
d©a
[0] == '*') {

214 
∑π
->
≥r˚¡
 = 0;

217 i‡(
vÆue
[0].
d©a
[vÆue[0].
Àn
 - 1] != '%') {

218 
övÆid
;

221 
n
 = 
	`ngx_©oÂ
(
vÆue
[0].
d©a
, vÆue[0].
Àn
 - 1, 2);

222 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

223 
övÆid
;

226 
∑π
->
≥r˚¡
 = (
uöt32_t
Ë
n
;

229 
∑π
->
vÆue
.
Àn
 = value[1].len;

230 
∑π
->
vÆue
.
vÆid
 = 1;

231 
∑π
->
vÆue
.
no_ˇchóbÀ
 = 0;

232 
∑π
->
vÆue
.
nŸ_found
 = 0;

233 
∑π
->
vÆue
.
d©a
 = value[1].data;

235  
NGX_CONF_OK
;

237 
övÆid
:

239 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

240 "övÆidÖî˚¡ vÆuê\"%V\"", &
vÆue
[0]);

241  
NGX_CONF_ERROR
;

242 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_SSI_ERROR
 1

	)

14 
	#NGX_HTTP_SSI_DATE_LEN
 2048

	)

16 
	#NGX_HTTP_SSI_ADD_PREFIX
 1

	)

17 
	#NGX_HTTP_SSI_ADD_ZERO
 2

	)

21 
ngx_Êag_t
 
	míabÀ
;

22 
ngx_Êag_t
 
	msûít_îr‹s
;

23 
ngx_Êag_t
 
	mign‹e_ªcy˛ed_buf„rs
;

25 
ngx_hash_t
 
	mty≥s
;

27 
size_t
 
	mmö_fûe_chunk
;

28 
size_t
 
	mvÆue_Àn
;

30 
ngx_¨øy_t
 *
	mty≥s_keys
;

31 } 
	tngx_hâp_ssi_loc_c⁄f_t
;

35 
ngx_°r_t
 
	m«me
;

36 
ngx_uöt_t
 
	mkey
;

37 
ngx_°r_t
 
	mvÆue
;

38 } 
	tngx_hâp_ssi_v¨_t
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_chaö_t
 *
	mbufs
;

44 
ngx_uöt_t
 
	mcou¡
;

45 } 
	tngx_hâp_ssi_block_t
;

49 
	mssi_°¨t_°©e
 = 0,

50 
	mssi_èg_°©e
,

51 
	mssi_commít0_°©e
,

52 
	mssi_commít1_°©e
,

53 
	mssi_sh¨p_°©e
,

54 
	mssi_¥ecomm™d_°©e
,

55 
	mssi_comm™d_°©e
,

56 
	mssi_¥ï¨am_°©e
,

57 
	mssi_∑øm_°©e
,

58 
	mssi_¥ìquÆ_°©e
,

59 
	mssi_¥evÆue_°©e
,

60 
	mssi_doubÀ_quŸed_vÆue_°©e
,

61 
	mssi_quŸed_vÆue_°©e
,

62 
	mssi_quŸed_symbﬁ_°©e
,

63 
	mssi_po°∑øm_°©e
,

64 
	mssi_commít_íd0_°©e
,

65 
	mssi_commít_íd1_°©e
,

66 
	mssi_îr‹_°©e
,

67 
	mssi_îr‹_íd0_°©e
,

68 
	mssi_îr‹_íd1_°©e


69 } 
	tngx_hâp_ssi_°©e_e
;

72 
ngx_öt_t
 
ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

73 
ngx_hâp_ssi_˘x_t
 *
˘x
);

74 
ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_hâp_ssi_˘x_t
 *
˘x
);

76 
ngx_öt_t
 
ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_ssi_˘x_t
 *
˘x
);

78 
ngx_°r_t
 *
ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

80 
ngx_öt_t
 
ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
);

82 
ngx_öt_t
 
ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_°r_t
 *
∑âîn
,Çgx_°r_à*
°r
);

85 
ngx_öt_t
 
ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

87 
ngx_öt_t
 
ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

88 
ngx_öt_t
 
rc
);

89 
ngx_öt_t
 
ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

90 
ngx_öt_t
 
rc
);

91 
ngx_öt_t
 
ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

93 
ngx_öt_t
 
ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

95 
ngx_öt_t
 
ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

97 
ngx_öt_t
 
ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

99 
ngx_öt_t
 
ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

101 
ngx_öt_t
 
ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

103 
ngx_öt_t
 
ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

105 
ngx_öt_t
 
ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

108 
ngx_öt_t
 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
);

111 
ngx_öt_t
 
ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

112 *
ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

113 *
ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

114 *
ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

115 *
ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

116 *
∑ª¡
, *
chûd
);

117 
ngx_öt_t
 
ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

120 
ngx_comm™d_t
 
	gngx_hâp_ssi_fûãr_comm™ds
[] = {

122 { 
ngx_°rög
("ssi"),

123 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


124 |
NGX_CONF_FLAG
,

125 
ngx_c⁄f_£t_Êag_¶Ÿ
,

126 
NGX_HTTP_LOC_CONF_OFFSET
,

127 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
íabÀ
),

128 
NULL
 },

130 { 
ngx_°rög
("ssi_silent_errors"),

131 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

132 
ngx_c⁄f_£t_Êag_¶Ÿ
,

133 
NGX_HTTP_LOC_CONF_OFFSET
,

134 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
sûít_îr‹s
),

135 
NULL
 },

137 { 
ngx_°rög
("ssi_ignore_recycled_buffers"),

138 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

139 
ngx_c⁄f_£t_Êag_¶Ÿ
,

140 
NGX_HTTP_LOC_CONF_OFFSET
,

141 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ign‹e_ªcy˛ed_buf„rs
),

142 
NULL
 },

144 { 
ngx_°rög
("ssi_min_file_chunk"),

145 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_size_¶Ÿ
,

147 
NGX_HTTP_LOC_CONF_OFFSET
,

148 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
mö_fûe_chunk
),

149 
NULL
 },

151 { 
ngx_°rög
("ssi_value_length"),

152 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_size_¶Ÿ
,

154 
NGX_HTTP_LOC_CONF_OFFSET
,

155 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
vÆue_Àn
),

156 
NULL
 },

158 { 
ngx_°rög
("ssi_types"),

159 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

160 
ngx_hâp_ty≥s_¶Ÿ
,

161 
NGX_HTTP_LOC_CONF_OFFSET
,

162 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ty≥s_keys
),

163 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

165 
ngx_nuŒ_comm™d


170 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ_˘x
 = {

171 
ngx_hâp_ssi_¥ec⁄figuøti⁄
,

172 
ngx_hâp_ssi_fûãr_öô
,

174 
ngx_hâp_ssi_¸óã_maö_c⁄f
,

175 
ngx_hâp_ssi_öô_maö_c⁄f
,

177 
NULL
,

178 
NULL
,

180 
ngx_hâp_ssi_¸óã_loc_c⁄f
,

181 
ngx_hâp_ssi_mîge_loc_c⁄f


185 
ngx_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ
 = {

186 
NGX_MODULE_V1
,

187 &
ngx_hâp_ssi_fûãr_moduÀ_˘x
,

188 
ngx_hâp_ssi_fûãr_comm™ds
,

189 
NGX_HTTP_MODULE
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NULL
,

197 
NGX_MODULE_V1_PADDING


201 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

202 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

205 
u_ch¨
 
	gngx_hâp_ssi_°rög
[] = "<!--";

207 
ngx_°r_t
 
	gngx_hâp_ssi_n⁄e
 = 
ngx_°rög
("(none)");

208 
ngx_°r_t
 
	gngx_hâp_ssi_nuŒ_°rög
 = 
ngx_nuŒ_°rög
;

211 
	#NGX_HTTP_SSI_INCLUDE_VIRTUAL
 0

	)

212 
	#NGX_HTTP_SSI_INCLUDE_FILE
 1

	)

213 
	#NGX_HTTP_SSI_INCLUDE_WAIT
 2

	)

214 
	#NGX_HTTP_SSI_INCLUDE_SET
 3

	)

215 
	#NGX_HTTP_SSI_INCLUDE_STUB
 4

	)

217 
	#NGX_HTTP_SSI_ECHO_VAR
 0

	)

218 
	#NGX_HTTP_SSI_ECHO_DEFAULT
 1

	)

219 
	#NGX_HTTP_SSI_ECHO_ENCODING
 2

	)

221 
	#NGX_HTTP_SSI_CONFIG_ERRMSG
 0

	)

222 
	#NGX_HTTP_SSI_CONFIG_TIMEFMT
 1

	)

224 
	#NGX_HTTP_SSI_SET_VAR
 0

	)

225 
	#NGX_HTTP_SSI_SET_VALUE
 1

	)

227 
	#NGX_HTTP_SSI_IF_EXPR
 0

	)

229 
	#NGX_HTTP_SSI_BLOCK_NAME
 0

	)

232 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_ö˛ude_∑øms
[] = {

233 { 
ngx_°rög
("vútuÆ"), 
NGX_HTTP_SSI_INCLUDE_VIRTUAL
, 0, 0 },

234 { 
ngx_°rög
("fûe"), 
NGX_HTTP_SSI_INCLUDE_FILE
, 0, 0 },

235 { 
ngx_°rög
("waô"), 
NGX_HTTP_SSI_INCLUDE_WAIT
, 0, 0 },

236 { 
ngx_°rög
("£t"), 
NGX_HTTP_SSI_INCLUDE_SET
, 0, 0 },

237 { 
ngx_°rög
("°ub"), 
NGX_HTTP_SSI_INCLUDE_STUB
, 0, 0 },

238 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

242 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_echo_∑øms
[] = {

243 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_ECHO_VAR
, 1, 0 },

244 { 
ngx_°rög
("deÁu…"), 
NGX_HTTP_SSI_ECHO_DEFAULT
, 0, 0 },

245 { 
ngx_°rög
("ícodög"), 
NGX_HTTP_SSI_ECHO_ENCODING
, 0, 0 },

246 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

250 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_c⁄fig_∑øms
[] = {

251 { 
ngx_°rög
("îrmsg"), 
NGX_HTTP_SSI_CONFIG_ERRMSG
, 0, 0 },

252 { 
ngx_°rög
("timefmt"), 
NGX_HTTP_SSI_CONFIG_TIMEFMT
, 0, 0 },

253 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

257 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_£t_∑øms
[] = {

258 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_SET_VAR
, 1, 0 },

259 { 
ngx_°rög
("vÆue"), 
NGX_HTTP_SSI_SET_VALUE
, 1, 0 },

260 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

264 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_if_∑øms
[] = {

265 { 
ngx_°rög
("ex¥"), 
NGX_HTTP_SSI_IF_EXPR
, 1, 0 },

266 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

270 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_block_∑øms
[] = {

271 { 
ngx_°rög
("«me"), 
NGX_HTTP_SSI_BLOCK_NAME
, 1, 0 },

272 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

276 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_no_∑øms
[] = {

277 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

281 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_ssi_comm™ds
[] = {

282 { 
ngx_°rög
("ö˛ude"), 
ngx_hâp_ssi_ö˛ude
,

283 
ngx_hâp_ssi_ö˛ude_∑øms
, 0, 0, 1 },

284 { 
ngx_°rög
("echo"), 
ngx_hâp_ssi_echo
,

285 
ngx_hâp_ssi_echo_∑øms
, 0, 0, 0 },

286 { 
ngx_°rög
("c⁄fig"), 
ngx_hâp_ssi_c⁄fig
,

287 
ngx_hâp_ssi_c⁄fig_∑øms
, 0, 0, 0 },

288 { 
ngx_°rög
("£t"), 
ngx_hâp_ssi_£t
, 
ngx_hâp_ssi_£t_∑øms
, 0, 0, 0 },

290 { 
ngx_°rög
("if"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
, 0, 0, 0 },

291 { 
ngx_°rög
("ñif"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
,

292 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

293 { 
ngx_°rög
("ñ£"), 
ngx_hâp_ssi_ñ£
, 
ngx_hâp_ssi_no_∑øms
,

294 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

295 { 
ngx_°rög
("ídif"), 
ngx_hâp_ssi_ídif
, 
ngx_hâp_ssi_no_∑øms
,

296 
NGX_HTTP_SSI_COND_ELSE
, 0, 0 },

298 { 
ngx_°rög
("block"), 
ngx_hâp_ssi_block
,

299 
ngx_hâp_ssi_block_∑øms
, 0, 0, 0 },

300 { 
ngx_°rög
("ídblock"), 
ngx_hâp_ssi_ídblock
,

301 
ngx_hâp_ssi_no_∑øms
, 0, 1, 0 },

303 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

307 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_ssi_v¨s
[] = {

309 { 
ngx_°rög
("d©e_loˇl"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 0,

310 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

312 { 
ngx_°rög
("d©e_gmt"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 1,

313 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

315 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

320 
ngx_öt_t


321 
	$ngx_hâp_ssi_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

323 
ngx_hâp_ssi_˘x_t
 *
˘x
;

324 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

326 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

328 i‡(!
¶cf
->
íabÀ


329 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

330 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

332  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

335 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ssi_˘x_t
));

336 i‡(
˘x
 =
NULL
) {

337  
NGX_ERROR
;

340 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ssi_fûãr_moduÀ
);

343 
˘x
->
vÆue_Àn
 = 
¶cf
->value_len;

344 
˘x
->
œ°_out
 = &˘x->
out
;

346 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

347 
˘x
->
ouçut
 = 1;

349 
˘x
->
∑øms
.
ñts
 = ctx->
∑øms_¨øy
;

350 
˘x
->
∑øms
.
size
 = (
ngx_èbÀ_ñt_t
);

351 
˘x
->
∑øms
.
«Œoc
 = 
NGX_HTTP_SSI_PARAMS_N
;

352 
˘x
->
∑øms
.
poﬁ
 = 
r
->pool;

354 
	`ngx_°r_£t
(&
˘x
->
timefmt
, "%A, %d-%b-%Y %H:%M:%S %Z");

355 
	`ngx_°r_£t
(&
˘x
->
îrmsg
,

358 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

360 i‡(
r
 =r->
maö
) {

361 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

362 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

363 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

366  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

367 
	}
}

370 
ngx_öt_t


371 
	$ngx_hâp_ssi_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

373 
size_t
 
Àn
;

374 
ngx_öt_t
 
rc
;

375 
ngx_buf_t
 *
b
;

376 
ngx_uöt_t
 
i
, 
ödex
;

377 
ngx_chaö_t
 *
˛
, **
Œ
;

378 
ngx_èbÀ_ñt_t
 *
∑øm
;

379 
ngx_hâp_ssi_˘x_t
 *
˘x
, *
m˘x
;

380 
ngx_hâp_ssi_block_t
 *
bl
;

381 
ngx_hâp_ssi_∑øm_t
 *
¥m
;

382 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

383 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

384 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

385 
ngx_°r_t
 *
∑øms
[
NGX_HTTP_SSI_MAX_PARAMS
 + 1];

387 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

389 i‡(
˘x
 =
NULL


390 || (
ö
 =
NULL


391 && 
˘x
->
buf
 =
NULL


392 && 
˘x
->
ö
 =
NULL


393 && 
˘x
->
busy
 =
NULL
))

395  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

400 i‡(
ö
) {

401 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

402  
NGX_ERROR
;

406 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

407 "hâ∞ssòfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

409 i‡(
˘x
->
waô
) {

411 i‡(
r
 !r->
c⁄√˘i⁄
->
d©a
) {

412 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

414 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

416  
NGX_AGAIN
;

419 i‡(
˘x
->
waô
->
d⁄e
) {

420 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

422 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

424 
˘x
->
waô
 = 
NULL
;

427 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

429 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

431  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

435 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

437 
˘x
->
ö
 || ctx->
buf
) {

439 i‡(
˘x
->
buf
 =
NULL
) {

440 
˘x
->
buf
 = ctx->
ö
->buf;

441 
˘x
->
ö
 = ctx->ö->
√xt
;

442 
˘x
->
pos
 = ctx->
buf
->pos;

445 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

446 
˘x
->
c›y_°¨t
 = ctx->
pos
;

447 
˘x
->
c›y_íd
 = ctx->
pos
;

450 
b
 = 
NULL
;

452 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

455 "ßved: %d sèã: %d", 
˘x
->
ßved
, ctx->
°©e
);

457 
rc
 = 
	`ngx_hâp_ssi_∑r£
(
r
, 
˘x
);

459 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

461 
rc
, 
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

463 i‡(
rc
 =
NGX_ERROR
) {

464  
rc
;

467 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

469 i‡(
˘x
->
ouçut
) {

471 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

472 "ßved: %d", 
˘x
->
ßved
);

474 i‡(
˘x
->
ßved
) {

476 i‡(
˘x
->
‰ì
) {

477 
˛
 = 
˘x
->
‰ì
;

478 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

479 
b
 = 
˛
->
buf
;

480 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

483 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

484 i‡(
b
 =
NULL
) {

485  
NGX_ERROR
;

488 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

489 i‡(
˛
 =
NULL
) {

490  
NGX_ERROR
;

493 
˛
->
buf
 = 
b
;

496 
b
->
mem‹y
 = 1;

497 
b
->
pos
 = 
ngx_hâp_ssi_°rög
;

498 
b
->
œ°
 = 
ngx_hâp_ssi_°rög
 + 
˘x
->
ßved
;

500 *
˘x
->
œ°_out
 = 
˛
;

501 
˘x
->
œ°_out
 = &
˛
->
√xt
;

503 
˘x
->
ßved
 = 0;

506 i‡(
˘x
->
‰ì
) {

507 
˛
 = 
˘x
->
‰ì
;

508 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

509 
b
 = 
˛
->
buf
;

512 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

513 i‡(
b
 =
NULL
) {

514  
NGX_ERROR
;

517 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

518 i‡(
˛
 =
NULL
) {

519  
NGX_ERROR
;

522 
˛
->
buf
 = 
b
;

525 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

527 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

528 
b
->
œ°
 = 
˘x
->
c›y_íd
;

529 
b
->
shadow
 = 
NULL
;

530 
b
->
œ°_buf
 = 0;

531 
b
->
ªcy˛ed
 = 0;

533 i‡(
b
->
ö_fûe
) {

534 i‡(
¶cf
->
mö_fûe_chunk
 < (
size_t
Ë(
b
->
œ°
 - b->
pos
))

536 
b
->
fûe_œ°
 = b->
fûe_pos


537 + (
b
->
œ°
 - 
˘x
->
buf
->
pos
);

538 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

541 
b
->
ö_fûe
 = 0;

545 
˛
->
√xt
 = 
NULL
;

546 *
˘x
->
œ°_out
 = 
˛
;

547 
˘x
->
œ°_out
 = &
˛
->
√xt
;

550 i‡(
˘x
->
block


551 && 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
))

553 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

554 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
));

556 i‡(
b
 =
NULL
) {

557  
NGX_ERROR
;

560 i‡(
˘x
->
ßved
) {

561 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
ngx_hâp_ssi_°rög
,

562 
˘x
->
ßved
);

565 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
c›y_°¨t
,

566 
˘x
->
c›y_íd
 - ctx->
c›y_°¨t
);

568 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

569 i‡(
˛
 =
NULL
) {

570  
NGX_ERROR
;

573 
˛
->
buf
 = 
b
;

574 
˛
->
√xt
 = 
NULL
;

576 
b
 = 
NULL
;

578 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

579 
ngx_hâp_ssi_fûãr_moduÀ
);

580 
bl
 = 
m˘x
->
blocks
->
ñts
;

581 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

582 *
Œ
;

583 
Œ
 = &(*Œ)->
√xt
)

588 *
Œ
 = 
˛
;

591 
˘x
->
ßved
 = 0;

595 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

596 
˘x
->
c›y_°¨t
 = ctx->
pos
;

597 
˘x
->
c›y_íd
 = ctx->
pos
;

600 
˘x
->
c›y_°¨t
 = 
NULL
;

601 
˘x
->
c›y_íd
 = 
NULL
;

604 i‡(
rc
 =
NGX_AGAIN
) {

609 
b
 = 
NULL
;

611 i‡(
rc
 =
NGX_OK
) {

613 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
,

614 
ngx_hâp_ssi_fûãr_moduÀ
);

616 
cmd
 = 
	`ngx_hash_föd
(&
smcf
->
hash
, 
˘x
->
key
, ctx->
comm™d
.
d©a
,

617 
˘x
->
comm™d
.
Àn
);

619 i‡(
cmd
 =
NULL
) {

620 i‡(
˘x
->
ouçut
) {

621 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

623 &
˘x
->
comm™d
);

624 
ssi_îr‹
;

630 i‡(!
˘x
->
ouçut
 && !
cmd
->
block
) {

632 i‡(
˘x
->
block
) {

636 
Àn
 = 5 + 
˘x
->
comm™d
.len + 4;

638 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

639 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

640 
Àn
 +1 + 
∑øm
[
i
].
key
.len + 2

641 + 
∑øm
[
i
].
vÆue
.
Àn
 + 1;

644 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

646 i‡(
b
 =
NULL
) {

647  
NGX_ERROR
;

650 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

651 i‡(
˛
 =
NULL
) {

652  
NGX_ERROR
;

655 
˛
->
buf
 = 
b
;

656 
˛
->
√xt
 = 
NULL
;

658 *
b
->
œ°
++ = '<';

659 *
b
->
œ°
++ = '!';

660 *
b
->
œ°
++ = '-';

661 *
b
->
œ°
++ = '-';

662 *
b
->
œ°
++ = '#';

664 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
comm™d
.
d©a
,

665 
˘x
->
comm™d
.
Àn
);

667 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

668 *
b
->
œ°
++ = ' ';

669 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
key
.
d©a
,

670 
∑øm
[
i
].
key
.
Àn
);

671 *
b
->
œ°
++ = '=';

672 *
b
->
œ°
++ = '"';

673 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
vÆue
.
d©a
,

674 
∑øm
[
i
].
vÆue
.
Àn
);

675 *
b
->
œ°
++ = '"';

678 *
b
->
œ°
++ = ' ';

679 *
b
->
œ°
++ = '-';

680 *
b
->
œ°
++ = '-';

681 *
b
->
œ°
++ = '>';

683 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

684 
ngx_hâp_ssi_fûãr_moduÀ
);

685 
bl
 = 
m˘x
->
blocks
->
ñts
;

686 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

687 *
Œ
;

688 
Œ
 = &(*Œ)->
√xt
)

693 *
Œ
 = 
˛
;

695 
b
 = 
NULL
;

700 i‡(
cmd
->
c⁄dôi⁄Æ
 == 0) {

705 i‡(
cmd
->
c⁄dôi⁄Æ


706 && (
˘x
->
c⁄dôi⁄Æ
 == 0

707 || 
˘x
->
c⁄dôi⁄Æ
 > 
cmd
->conditional))

709 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

711 &
˘x
->
comm™d
);

712 
ssi_îr‹
;

715 i‡(
˘x
->
∑øms
.
√…s
 > 
NGX_HTTP_SSI_MAX_PARAMS
) {

716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

718 &
˘x
->
comm™d
);

719 
ssi_îr‹
;

722 
	`ngx_memzîo
(
∑øms
,

723 (
NGX_HTTP_SSI_MAX_PARAMS
 + 1Ë* (
ngx_°r_t
 *));

725 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

727 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

729 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

731 i‡(
∑øm
[
i
].
key
.
Àn
 !
¥m
->
«me
.len

732 || 
	`ngx_°∫cmp
(
∑øm
[
i
].
key
.
d©a
, 
¥m
->
«me
.data,

733 
¥m
->
«me
.
Àn
) != 0)

738 i‡(!
¥m
->
mu…ùÀ
) {

739 i‡(
∑øms
[
¥m
->
ödex
]) {

740 
	`ngx_log_îr‹
(
NGX_LOG_ERR
,

741 
r
->
c⁄√˘i⁄
->
log
, 0,

744 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

746 
ssi_îr‹
;

749 
∑øms
[
¥m
->
ödex
] = &
∑øm
[
i
].
vÆue
;

754 
ödex
 = 
¥m
->ödex; 
∑øms
[index]; index++) {

758 
∑øms
[
ödex
] = &
∑øm
[
i
].
vÆue
;

763 i‡(
¥m
->
«me
.
Àn
 == 0) {

764 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

767 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

769 
ssi_îr‹
;

773 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

774 i‡(
¥m
->
m™d©‹y
 && 
∑øms
[¥m->
ödex
] == 0) {

775 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

778 &
¥m
->
«me
, &
˘x
->
comm™d
);

780 
ssi_îr‹
;

784 i‡(
cmd
->
Êush
 && 
˘x
->
out
) {

786 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

789 i‡(
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

790  
NGX_ERROR
;

794 
rc
 = 
cmd
->
	`h™dÀr
(
r
, 
˘x
, 
∑øms
);

796 i‡(
rc
 =
NGX_OK
) {

800 i‡(
rc
 =
NGX_DONE
 ||Ñ¯=
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

801 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

802  
rc
;

809 
ssi_îr‹
:

811 i‡(
¶cf
->
sûít_îr‹s
) {

815 i‡(
˘x
->
‰ì
) {

816 
˛
 = 
˘x
->
‰ì
;

817 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

818 
b
 = 
˛
->
buf
;

819 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

822 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

823 i‡(
b
 =
NULL
) {

824  
NGX_ERROR
;

827 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

828 i‡(
˛
 =
NULL
) {

829  
NGX_ERROR
;

832 
˛
->
buf
 = 
b
;

835 
b
->
mem‹y
 = 1;

836 
b
->
pos
 = 
˘x
->
îrmsg
.
d©a
;

837 
b
->
œ°
 = 
˘x
->
îrmsg
.
d©a
 + ctx->îrmsg.
Àn
;

839 
˛
->
√xt
 = 
NULL
;

840 *
˘x
->
œ°_out
 = 
˛
;

841 
˘x
->
œ°_out
 = &
˛
->
√xt
;

846 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

847 i‡(
b
 =
NULL
) {

848 i‡(
˘x
->
‰ì
) {

849 
˛
 = 
˘x
->
‰ì
;

850 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

851 
b
 = 
˛
->
buf
;

852 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

855 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

856 i‡(
b
 =
NULL
) {

857  
NGX_ERROR
;

860 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

861 i‡(
˛
 =
NULL
) {

862  
NGX_ERROR
;

865 
˛
->
buf
 = 
b
;

868 
b
->
sync
 = 1;

870 
˛
->
√xt
 = 
NULL
;

871 *
˘x
->
œ°_out
 = 
˛
;

872 
˘x
->
œ°_out
 = &
˛
->
√xt
;

875 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

876 
b
->
shadow
 = 
˘x
->
buf
;

878 i‡(
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 == 0) {

879 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

883 
˘x
->
buf
 = 
NULL
;

885 
˘x
->
ßved
 = ctx->
looked
;

888 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

889  
NGX_OK
;

892  
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
);

893 
	}
}

896 
ngx_öt_t


897 
	$ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

899 
ngx_öt_t
 
rc
;

900 
ngx_buf_t
 *
b
;

901 
ngx_chaö_t
 *
˛
;

904 
b
 = 
NULL
;

905 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

906 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

907 "ssòout: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

908 i‡(
˛
->
buf
 =
b
) {

909 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

911 
	`ngx_debug_poöt
();

912  
NGX_ERROR
;

914 
b
 = 
˛
->
buf
;

918 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

920 i‡(
˘x
->
busy
 =
NULL
) {

921 
˘x
->
busy
 = ctx->
out
;

924 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

925 
˛
->
√xt
 = 
˘x
->
out
;

928 
˘x
->
out
 = 
NULL
;

929 
˘x
->
œ°_out
 = &˘x->
out
;

931 
˘x
->
busy
) {

933 
˛
 = 
˘x
->
busy
;

934 
b
 = 
˛
->
buf
;

936 i‡(
	`ngx_buf_size
(
b
) != 0) {

940 i‡(
b
->
shadow
) {

941 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

944 
˘x
->
busy
 = 
˛
->
√xt
;

946 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

949 
˛
->
√xt
 = 
˘x
->
‰ì
;

950 
˘x
->
‰ì
 = 
˛
;

954 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

956  
rc
;

957 
	}
}

961 
	$ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

963 i‡(
˘x
->
ö
 || ctx->
buf
) {

964 
r
->
buf„ªd
 |
NGX_HTTP_SSI_BUFFERED
;

967 
r
->
buf„ªd
 &~
NGX_HTTP_SSI_BUFFERED
;

969 
	}
}

972 
ngx_öt_t


973 
	$ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

975 
u_ch¨
 *
p
, *
vÆue
, *
œ°
, *
c›y_íd
, 
ch
;

976 
size_t
 
looked
;

977 
ngx_hâp_ssi_°©e_e
 
°©e
;

979 
°©e
 = 
˘x
->state;

980 
looked
 = 
˘x
->looked;

981 
œ°
 = 
˘x
->
buf
->last;

982 
c›y_íd
 = 
˘x
->copy_end;

984 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

986 
ch
 = *
p
;

988 i‡(
°©e
 =
ssi_°¨t_°©e
) {

993 i‡(
ch
 == '<') {

994 
c›y_íd
 = 
p
;

995 
looked
 = 1;

996 
°©e
 = 
ssi_èg_°©e
;

998 
èg_°¨ãd
;

1001 i‡(++
p
 =
œ°
) {

1005 
ch
 = *
p
;

1008 
˘x
->
°©e
 = state;

1009 
˘x
->
pos
 = 
p
;

1010 
˘x
->
looked
 =Üooked;

1011 
˘x
->
c›y_íd
 = 
p
;

1013 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

1014 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1017  
NGX_AGAIN
;

1019 
èg_°¨ãd
:

1024 
°©e
) {

1026 
ssi_°¨t_°©e
:

1029 
ssi_èg_°©e
:

1030 
ch
) {

1032 
looked
 = 2;

1033 
°©e
 = 
ssi_commít0_°©e
;

1037 
c›y_íd
 = 
p
;

1041 
c›y_íd
 = 
p
;

1042 
looked
 = 0;

1043 
°©e
 = 
ssi_°¨t_°©e
;

1049 
ssi_commít0_°©e
:

1050 
ch
) {

1052 
looked
 = 3;

1053 
°©e
 = 
ssi_commít1_°©e
;

1057 
c›y_íd
 = 
p
;

1058 
looked
 = 1;

1059 
°©e
 = 
ssi_èg_°©e
;

1063 
c›y_íd
 = 
p
;

1064 
looked
 = 0;

1065 
°©e
 = 
ssi_°¨t_°©e
;

1071 
ssi_commít1_°©e
:

1072 
ch
) {

1074 
looked
 = 4;

1075 
°©e
 = 
ssi_sh¨p_°©e
;

1079 
c›y_íd
 = 
p
;

1080 
looked
 = 1;

1081 
°©e
 = 
ssi_èg_°©e
;

1085 
c›y_íd
 = 
p
;

1086 
looked
 = 0;

1087 
°©e
 = 
ssi_°¨t_°©e
;

1093 
ssi_sh¨p_°©e
:

1094 
ch
) {

1096 i‡(
p
 - 
˘x
->
pos
 < 4) {

1097 
˘x
->
ßved
 = 0;

1099 
looked
 = 0;

1100 
°©e
 = 
ssi_¥ecomm™d_°©e
;

1104 
c›y_íd
 = 
p
;

1105 
looked
 = 1;

1106 
°©e
 = 
ssi_èg_°©e
;

1110 
c›y_íd
 = 
p
;

1111 
looked
 = 0;

1112 
°©e
 = 
ssi_°¨t_°©e
;

1118 
ssi_¥ecomm™d_°©e
:

1119 
ch
) {

1121 
CR
:

1122 
LF
:

1127 
˘x
->
comm™d
.
Àn
 = 1;

1128 
˘x
->
comm™d
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1129 
NGX_HTTP_SSI_COMMAND_LEN
);

1130 i‡(
˘x
->
comm™d
.
d©a
 =
NULL
) {

1131  
NGX_ERROR
;

1134 
˘x
->
comm™d
.
d©a
[0] = 
ch
;

1136 
˘x
->
key
 = 0;

1137 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1139 
˘x
->
∑øms
.
√…s
 = 0;

1141 
°©e
 = 
ssi_comm™d_°©e
;

1147 
ssi_comm™d_°©e
:

1148 
ch
) {

1150 
CR
:

1151 
LF
:

1153 
°©e
 = 
ssi_¥ï¨am_°©e
;

1157 
°©e
 = 
ssi_commít_íd0_°©e
;

1161 i‡(
˘x
->
comm™d
.
Àn
 =
NGX_HTTP_SSI_COMMAND_LEN
) {

1162 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1164 &
˘x
->
comm™d
, 
ch
);

1166 
°©e
 = 
ssi_îr‹_°©e
;

1170 
˘x
->
comm™d
.
d©a
[˘x->comm™d.
Àn
++] = 
ch
;

1171 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1176 
ssi_¥ï¨am_°©e
:

1177 
ch
) {

1179 
CR
:

1180 
LF
:

1185 
°©e
 = 
ssi_commít_íd0_°©e
;

1189 
˘x
->
∑øm
 = 
	`ngx_¨øy_push
(&˘x->
∑øms
);

1190 i‡(
˘x
->
∑øm
 =
NULL
) {

1191  
NGX_ERROR
;

1194 
˘x
->
∑øm
->
key
.
Àn
 = 1;

1195 
˘x
->
∑øm
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1196 
NGX_HTTP_SSI_PARAM_LEN
);

1197 i‡(
˘x
->
∑øm
->
key
.
d©a
 =
NULL
) {

1198  
NGX_ERROR
;

1201 
˘x
->
∑øm
->
key
.
d©a
[0] = 
ch
;

1203 
˘x
->
∑øm
->
vÆue
.
Àn
 = 0;

1205 i‡(
˘x
->
vÆue_buf
 =
NULL
) {

1206 
˘x
->
∑øm
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1207 
˘x
->
vÆue_Àn
);

1208 i‡(
˘x
->
∑øm
->
vÆue
.
d©a
 =
NULL
) {

1209  
NGX_ERROR
;

1213 
˘x
->
∑øm
->
vÆue
.
d©a
 = ctx->
vÆue_buf
;

1216 
°©e
 = 
ssi_∑øm_°©e
;

1222 
ssi_∑øm_°©e
:

1223 
ch
) {

1225 
CR
:

1226 
LF
:

1228 
°©e
 = 
ssi_¥ìquÆ_°©e
;

1232 
°©e
 = 
ssi_¥evÆue_°©e
;

1236 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1238 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1239 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1241 &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1245 i‡(
˘x
->
∑øm
->
key
.
Àn
 =
NGX_HTTP_SSI_PARAM_LEN
) {

1246 
°©e
 = 
ssi_îr‹_°©e
;

1247 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1250 &
˘x
->
∑øm
->
key
, 
ch
, &˘x->
comm™d
);

1254 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1259 
ssi_¥ìquÆ_°©e
:

1260 
ch
) {

1262 
CR
:

1263 
LF
:

1268 
°©e
 = 
ssi_¥evÆue_°©e
;

1272 i‡(
ch
 == '-') {

1273 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1275 
°©e
 = 
ssi_îr‹_°©e
;

1278 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1281 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1287 
ssi_¥evÆue_°©e
:

1288 
ch
) {

1290 
CR
:

1291 
LF
:

1296 
°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1300 
°©e
 = 
ssi_quŸed_vÆue_°©e
;

1304 i‡(
ch
 == '-') {

1305 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1307 
°©e
 = 
ssi_îr‹_°©e
;

1310 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1313 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1319 
ssi_doubÀ_quŸed_vÆue_°©e
:

1320 
ch
) {

1322 
°©e
 = 
ssi_po°∑øm_°©e
;

1326 
˘x
->
ßved_°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1327 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1332 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1333 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1336 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1337 &
˘x
->
comm™d
);

1338 
°©e
 = 
ssi_îr‹_°©e
;

1342 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1347 
ssi_quŸed_vÆue_°©e
:

1348 
ch
) {

1350 
°©e
 = 
ssi_po°∑øm_°©e
;

1354 
˘x
->
ßved_°©e
 = 
ssi_quŸed_vÆue_°©e
;

1355 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1360 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1361 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1364 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1365 &
˘x
->
comm™d
);

1366 
°©e
 = 
ssi_îr‹_°©e
;

1370 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1375 
ssi_quŸed_symbﬁ_°©e
:

1376 
°©e
 = 
˘x
->
ßved_°©e
;

1378 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1382 
ssi_po°∑øm_°©e
:

1384 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 + 1 < ctx->
vÆue_Àn
 / 2) {

1385 
vÆue
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
∑øm
->vÆue.
Àn
 + 1);

1386 i‡(
vÆue
 =
NULL
) {

1387  
NGX_ERROR
;

1390 
	`ngx_mem˝y
(
vÆue
, 
˘x
->
∑øm
->vÆue.
d©a
,

1391 
˘x
->
∑øm
->
vÆue
.
Àn
);

1393 
˘x
->
vÆue_buf
 = ctx->
∑øm
->
vÆue
.
d©a
;

1394 
˘x
->
∑øm
->
vÆue
.
d©a
 = value;

1397 
˘x
->
vÆue_buf
 = 
NULL
;

1400 
ch
) {

1402 
CR
:

1403 
LF
:

1405 
°©e
 = 
ssi_¥ï¨am_°©e
;

1409 
°©e
 = 
ssi_commít_íd0_°©e
;

1413 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1416 
ch
, &
˘x
->
∑øm
->
vÆue
, &˘x->∑øm->
key
,

1417 &
˘x
->
comm™d
);

1418 
°©e
 = 
ssi_îr‹_°©e
;

1424 
ssi_commít_íd0_°©e
:

1425 
ch
) {

1427 
°©e
 = 
ssi_commít_íd1_°©e
;

1431 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1433 
ch
, &
˘x
->
comm™d
);

1434 
°©e
 = 
ssi_îr‹_°©e
;

1440 
ssi_commít_íd1_°©e
:

1441 
ch
) {

1443 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1444 
˘x
->
pos
 = 
p
 + 1;

1445 
˘x
->
looked
 =Üooked;

1446 
˘x
->
c›y_íd
 = copy_end;

1448 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1449 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1452  
NGX_OK
;

1455 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1457 
ch
, &
˘x
->
comm™d
);

1458 
°©e
 = 
ssi_îr‹_°©e
;

1464 
ssi_îr‹_°©e
:

1465 
ch
) {

1467 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1476 
ssi_îr‹_íd0_°©e
:

1477 
ch
) {

1479 
°©e
 = 
ssi_îr‹_íd1_°©e
;

1483 
°©e
 = 
ssi_îr‹_°©e
;

1489 
ssi_îr‹_íd1_°©e
:

1490 
ch
) {

1492 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1493 
˘x
->
pos
 = 
p
 + 1;

1494 
˘x
->
looked
 =Üooked;

1495 
˘x
->
c›y_íd
 = copy_end;

1497 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1498 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1501  
NGX_HTTP_SSI_ERROR
;

1504 
°©e
 = 
ssi_îr‹_°©e
;

1512 
˘x
->
°©e
 = state;

1513 
˘x
->
pos
 = 
p
;

1514 
˘x
->
looked
 =Üooked;

1516 
˘x
->
c›y_íd
 = (
°©e
 =
ssi_°¨t_°©e
Ë? 
p
 : copy_end;

1518 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

1519 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1522  
NGX_AGAIN
;

1523 
	}
}

1526 
ngx_°r_t
 *

1527 
	$ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

1528 
ngx_uöt_t
 
key
)

1530 
ngx_uöt_t
 
i
;

1531 
ngx_li°_∑π_t
 *
∑π
;

1532 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1533 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1535 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1537 #i‡(
NGX_PCRE
)

1539 
ngx_°r_t
 *
vÆue
;

1541 i‡(
key
 >= '0' && key <= '9') {

1542 
i
 = 
key
 - '0';

1544 i‡(
i
 < 
˘x
->
nˇ±uªs
) {

1545 
vÆue
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_°r_t
));

1546 i‡(
vÆue
 =
NULL
) {

1547  
NULL
;

1550 
i
 *= 2;

1552 
vÆue
->
d©a
 = 
˘x
->
ˇ±uªs_d©a
 + ctx->
ˇ±uªs
[
i
];

1553 
vÆue
->
Àn
 = 
˘x
->
ˇ±uªs
[
i
 + 1] - ctx->captures[i];

1555  
vÆue
;

1561 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1562  
NULL
;

1565 
∑π
 = &
˘x
->
v¨übÀs
->part;

1566 
v¨
 = 
∑π
->
ñts
;

1568 
i
 = 0; ; i++) {

1570 i‡(
i
 >
∑π
->
√…s
) {

1571 i‡(
∑π
->
√xt
 =
NULL
) {

1575 
∑π
 =Ö¨t->
√xt
;

1576 
v¨
 = 
∑π
->
ñts
;

1577 
i
 = 0;

1580 i‡(
«me
->
Àn
 !
v¨
[
i
].name.len) {

1584 i‡(
key
 !
v¨
[
i
].key) {

1588 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
v¨
[
i
].«me.d©a,Çame->
Àn
) == 0) {

1589  &
v¨
[
i
].
vÆue
;

1593  
NULL
;

1594 
	}
}

1597 
ngx_öt_t


1598 
	$ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1599 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
)

1601 
u_ch¨
 
ch
, *
p
, **
vÆue
, *
d©a
, *
∑π_d©a
;

1602 
size_t
 *
size
, 
Àn
, 
¥efix
, 
∑π_Àn
;

1603 
ngx_°r_t
 
v¨
, *
vÆ
;

1604 
ngx_öt_t
 
key
;

1605 
ngx_uöt_t
 
i
, 
n
, 
bøckë
, 
quŸed
;

1606 
ngx_¨øy_t
 
Àngths
, 
vÆues
;

1607 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1609 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ãxt
);

1611 i‡(
n
 == 0) {

1613 
d©a
 = 
ãxt
->data;

1614 
p
 = 
d©a
;

1616 i‡((
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
Ë&& 
ãxt
->
d©a
[0] != '/') {

1618 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1619 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1624 i‡(
¥efix
) {

1625 
Àn
 = 
¥efix
 + 
ãxt
->len;

1627 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1628 i‡(
d©a
 =
NULL
) {

1629  
NGX_ERROR
;

1632 
p
 = 
	`ngx_c›y
(
d©a
, 
r
->
uri
.d©a, 
¥efix
);

1636 
quŸed
 = 0;

1638 
i
 = 0; i < 
ãxt
->
Àn
; i++) {

1639 
ch
 = 
ãxt
->
d©a
[
i
];

1641 i‡(!
quŸed
) {

1643 i‡(
ch
 == '\\') {

1644 
quŸed
 = 1;

1649 
quŸed
 = 0;

1651 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1652 *
p
++ = '\\';

1656 *
p
++ = 
ch
;

1659 
ãxt
->
Àn
 = 
p
 - 
d©a
;

1660 
ãxt
->
d©a
 = data;

1662  
NGX_OK
;

1665 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
r
->
poﬁ
, 8, (
size_t
 *)Ë!
NGX_OK
) {

1666  
NGX_ERROR
;

1669 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
r
->
poﬁ
, 8, (
u_ch¨
 *)Ë!
NGX_OK
) {

1670  
NGX_ERROR
;

1673 
Àn
 = 0;

1674 
i
 = 0;

1676 
i
 < 
ãxt
->
Àn
) {

1678 i‡(
ãxt
->
d©a
[
i
] == '$') {

1680 
v¨
.
Àn
 = 0;

1682 i‡(++
i
 =
ãxt
->
Àn
) {

1683 
övÆid_v¨übÀ
;

1686 i‡(
ãxt
->
d©a
[
i
] == '{') {

1687 
bøckë
 = 1;

1689 i‡(++
i
 =
ãxt
->
Àn
) {

1690 
övÆid_v¨übÀ
;

1693 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1696 
bøckë
 = 0;

1697 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1700  ; 
i
 < 
ãxt
->
Àn
; i++, 
v¨
.len++) {

1701 
ch
 = 
ãxt
->
d©a
[
i
];

1703 i‡(
ch
 ='}' && 
bøckë
) {

1704 
i
++;

1705 
bøckë
 = 0;

1709 i‡((
ch
 >= 'A' && ch <= 'Z')

1710 || (
ch
 >= 'a' && ch <= 'z')

1711 || (
ch
 >= '0' && ch <= '9')

1712 || 
ch
 == '_')

1720 i‡(
bøckë
) {

1721 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1723 "v¨übÀ i†missög", &
v¨
);

1724  
NGX_HTTP_SSI_ERROR
;

1727 i‡(
v¨
.
Àn
 == 0) {

1728 
övÆid_v¨übÀ
;

1731 
key
 = 
	`ngx_hash_°æow
(
v¨
.
d©a
, v¨.d©a, v¨.
Àn
);

1733 
vÆ
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1735 i‡(
vÆ
 =
NULL
) {

1736 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1737 i‡(
vv
 =
NULL
) {

1738  
NGX_ERROR
;

1741 i‡(
vv
->
nŸ_found
) {

1745 
∑π_d©a
 = 
vv
->
d©a
;

1746 
∑π_Àn
 = 
vv
->
Àn
;

1749 
∑π_d©a
 = 
vÆ
->
d©a
;

1750 
∑π_Àn
 = 
vÆ
->
Àn
;

1754 
∑π_d©a
 = &
ãxt
->
d©a
[
i
];

1755 
quŸed
 = 0;

1757 
p
 = 
∑π_d©a
; 
i
 < 
ãxt
->
Àn
; i++) {

1758 
ch
 = 
ãxt
->
d©a
[
i
];

1760 i‡(!
quŸed
) {

1762 i‡(
ch
 == '\\') {

1763 
quŸed
 = 1;

1767 i‡(
ch
 == '$') {

1772 
quŸed
 = 0;

1774 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1775 *
p
++ = '\\';

1779 *
p
++ = 
ch
;

1782 
∑π_Àn
 = 
p
 - 
∑π_d©a
;

1785 
Àn
 +
∑π_Àn
;

1787 
size
 = 
	`ngx_¨øy_push
(&
Àngths
);

1788 i‡(
size
 =
NULL
) {

1789  
NGX_ERROR
;

1792 *
size
 = 
∑π_Àn
;

1794 
vÆue
 = 
	`ngx_¨øy_push
(&
vÆues
);

1795 i‡(
vÆue
 =
NULL
) {

1796  
NGX_ERROR
;

1799 *
vÆue
 = 
∑π_d©a
;

1802 
¥efix
 = 0;

1804 
size
 = 
Àngths
.
ñts
;

1805 
vÆue
 = 
vÆues
.
ñts
;

1807 i‡(
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
) {

1808 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1809 i‡(
size
[
i
] != 0) {

1810 i‡(*
vÆue
[
i
] != '/') {

1811 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1812 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1813 
Àn
 +
¥efix
;

1824 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
 + ((
Êags
 & 
NGX_HTTP_SSI_ADD_ZERO
) ? 1 : 0));

1825 i‡(
p
 =
NULL
) {

1826  
NGX_ERROR
;

1829 
ãxt
->
Àn
 =Üen;

1830 
ãxt
->
d©a
 = 
p
;

1832 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
, 
¥efix
);

1834 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1835 
p
 = 
	`ngx_c›y
’, 
vÆue
[
i
], 
size
[i]);

1838  
NGX_OK
;

1840 
övÆid_v¨übÀ
:

1842 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1843 "övÆid v¨übÀÇamêö \"%V\"", 
ãxt
);

1845  
NGX_HTTP_SSI_ERROR
;

1846 
	}
}

1849 
ngx_öt_t


1850 
	$ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑âîn
,

1851 
ngx_°r_t
 *
°r
)

1853 #i‡(
NGX_PCRE
)

1854 
rc
, *
ˇ±uªs
;

1855 
u_ch¨
 *
p
, 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1856 
size_t
 
size
;

1857 
ngx_öt_t
 
key
;

1858 
ngx_°r_t
 *
vv
, 
«me
, 
vÆue
;

1859 
ngx_uöt_t
 
i
, 
n
;

1860 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1861 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1862 
ngx_ªgex_compûe_t
 
rgc
;

1864 
	`ngx_memzîo
(&
rgc
, (
ngx_ªgex_compûe_t
));

1866 
rgc
.
∑âîn
 = *pattern;

1867 
rgc
.
poﬁ
 = 
r
->pool;

1868 
rgc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

1869 
rgc
.
îr
.
d©a
 = 
îr°r
;

1871 i‡(
	`ngx_ªgex_compûe
(&
rgc
Ë!
NGX_OK
) {

1872 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "%V", &
rgc
.
îr
);

1873  
NGX_HTTP_SSI_ERROR
;

1876 
n
 = (
rgc
.
ˇ±uªs
 + 1) * 3;

1878 
ˇ±uªs
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * ());

1879 i‡(
ˇ±uªs
 =
NULL
) {

1880  
NGX_ERROR
;

1883 
rc
 = 
	`ngx_ªgex_exec
(
rgc
.
ªgex
, 
°r
, 
ˇ±uªs
, 
n
);

1885 i‡(
rc
 < 
NGX_REGEX_NO_MATCHED
) {

1886 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1887 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

1888 
rc
, 
°r
, 
∑âîn
);

1889  
NGX_HTTP_SSI_ERROR
;

1892 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

1893  
NGX_DECLINED
;

1896 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1898 
˘x
->
nˇ±uªs
 = 
rc
;

1899 
˘x
->
ˇ±uªs
 = captures;

1900 
˘x
->
ˇ±uªs_d©a
 = 
°r
->
d©a
;

1902 i‡(
rgc
.
«med_ˇ±uªs
 > 0) {

1904 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1905 
˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

1906 (
ngx_hâp_ssi_v¨_t
));

1907 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1908  
NGX_ERROR
;

1912 
size
 = 
rgc
.
«me_size
;

1913 
p
 = 
rgc
.
«mes
;

1915 
i
 = 0; i < (
ngx_uöt_t
Ë
rgc
.
«med_ˇ±uªs
; i++, 
p
 +
size
) {

1917 
«me
.
d©a
 = &
p
[2];

1918 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

1920 
n
 = 2 * ((
p
[0] << 8) +Ö[1]);

1922 
vÆue
.
d©a
 = &
°r
->d©a[
ˇ±uªs
[
n
]];

1923 
vÆue
.
Àn
 = 
ˇ±uªs
[
n
 + 1] - captures[n];

1925 
key
 = 
	`ngx_hash_°æow
(
«me
.
d©a
,Çame.d©a,Çame.
Àn
);

1927 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
«me
, 
key
);

1929 i‡(
vv
) {

1930 *
vv
 = 
vÆue
;

1934 
v¨
 = 
	`ngx_li°_push
(
˘x
->
v¨übÀs
);

1935 i‡(
v¨
 =
NULL
) {

1936  
NGX_ERROR
;

1939 
v¨
->
«me
 =Çame;

1940 
v¨
->
key
 = key;

1941 
v¨
->
vÆue
 = value;

1945  
NGX_OK
;

1949 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1951 
∑âîn
);

1952  
NGX_HTTP_SSI_ERROR
;

1955 
	}
}

1958 
ngx_öt_t


1959 
	$ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1960 
ngx_°r_t
 **
∑øms
)

1962 
u_ch¨
 *
d°
, *
§c
;

1963 
size_t
 
Àn
;

1964 
ngx_öt_t
 
rc
, 
key
;

1965 
ngx_°r_t
 *
uri
, *
fûe
, *
waô
, *
£t
, *
°ub
, 
¨gs
;

1966 
ngx_buf_t
 *
b
;

1967 
ngx_uöt_t
 
Êags
, 
i
;

1968 
ngx_chaö_t
 *
˛
, *
é
, **
Œ
, *
out
;

1969 
ngx_hâp_ªque°_t
 *
§
;

1970 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1971 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

1972 
ngx_hâp_ssi_block_t
 *
bl
;

1973 
ngx_hâp_po°_subªque°_t
 *
p§
;

1975 
uri
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_VIRTUAL
];

1976 
fûe
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_FILE
];

1977 
waô
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_WAIT
];

1978 
£t
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_SET
];

1979 
°ub
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_STUB
];

1981 i‡(
uri
 && 
fûe
) {

1982 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1984 
uri
, 
fûe
);

1985  
NGX_HTTP_SSI_ERROR
;

1988 i‡(
uri
 =
NULL
 && 
fûe
 == NULL) {

1989 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1991  
NGX_HTTP_SSI_ERROR
;

1994 i‡(
£t
 && 
°ub
) {

1995 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1998  
NGX_HTTP_SSI_ERROR
;

2001 i‡(
waô
) {

2002 i‡(
uri
 =
NULL
) {

2003 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2004 "\"waô\" mayÇŸ bêu£d wôh fûe=\"%V\"", 
fûe
);

2005  
NGX_HTTP_SSI_ERROR
;

2008 i‡(
waô
->
Àn
 == 2

2009 && 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "no", 2) == 0)

2011 
waô
 = 
NULL
;

2013 } i‡(
waô
->
Àn
 != 3

2014 || 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "yes", 3) != 0)

2016 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2018 
waô
);

2019  
NGX_HTTP_SSI_ERROR
;

2023 i‡(
uri
 =
NULL
) {

2024 
uri
 = 
fûe
;

2025 
waô
 = (
ngx_°r_t
 *) -1;

2028 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
uri
, 
NGX_HTTP_SSI_ADD_PREFIX
);

2030 i‡(
rc
 !
NGX_OK
) {

2031  
rc
;

2034 
d°
 = 
uri
->
d©a
;

2035 
§c
 = 
uri
->
d©a
;

2037 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
uri
->
Àn
, 
NGX_UNESCAPE_URI
);

2039 
Àn
 = (
uri
->
d©a
 + uri->ÀnË- 
§c
;

2040 i‡(
Àn
) {

2041 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
Àn
);

2044 
uri
->
Àn
 = 
d°
 - uri->
d©a
;

2046 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2047 "ssòö˛ude: \"%V\"", 
uri
);

2049 
	`ngx_°r_nuŒ
(&
¨gs
);

2050 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2052 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2053  
NGX_HTTP_SSI_ERROR
;

2056 
p§
 = 
NULL
;

2058 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2060 i‡(
°ub
) {

2061 i‡(
m˘x
->
blocks
) {

2062 
bl
 = 
m˘x
->
blocks
->
ñts
;

2063 
i
 = 0; i < 
m˘x
->
blocks
->
√…s
; i++) {

2064 i‡(
°ub
->
Àn
 =
bl
[
i
].
«me
.len

2065 && 
	`ngx_°∫cmp
(
°ub
->
d©a
, 
bl
[
i
].
«me
.d©a, stub->
Àn
) == 0)

2067 
found
;

2072 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2073 "\"°ub\"=\"%V\" f‹ \"ö˛ude\"ÇŸ found", 
°ub
);

2074  
NGX_HTTP_SSI_ERROR
;

2076 
found
:

2078 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2079 i‡(
p§
 =
NULL
) {

2080  
NGX_ERROR
;

2083 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_°ub_ouçut
;

2085 i‡(
bl
[
i
].
cou¡
++) {

2087 
out
 = 
NULL
;

2088 
Œ
 = &
out
;

2090 
é
 = 
bl
[
i
].
bufs
;Ål;Å»é->
√xt
) {

2092 i‡(
˘x
->
‰ì
) {

2093 
˛
 = 
˘x
->
‰ì
;

2094 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

2095 
b
 = 
˛
->
buf
;

2098 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

2099 i‡(
b
 =
NULL
) {

2100  
NGX_ERROR
;

2103 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2104 i‡(
˛
 =
NULL
) {

2105  
NGX_ERROR
;

2108 
˛
->
buf
 = 
b
;

2111 
	`ngx_mem˝y
(
b
, 
é
->
buf
, (
ngx_buf_t
));

2113 
b
->
pos
 = b->
°¨t
;

2115 *
Œ
 = 
˛
;

2116 
˛
->
√xt
 = 
NULL
;

2117 
Œ
 = &
˛
->
√xt
;

2120 
p§
->
d©a
 = 
out
;

2123 
p§
->
d©a
 = 
bl
[
i
].
bufs
;

2127 i‡(
waô
) {

2128 
Êags
 |
NGX_HTTP_SUBREQUEST_WAITED
;

2131 i‡(
£t
) {

2132 
key
 = 
	`ngx_hash_°æow
(
£t
->
d©a
, së->d©a, së->
Àn
);

2134 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2135 i‡(
p§
 =
NULL
) {

2136  
NGX_ERROR
;

2139 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_£t_v¨übÀ
;

2140 
p§
->
d©a
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
£t
, 
key
);

2142 i‡(
p§
->
d©a
 =
NULL
) {

2144 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2145 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2146 (
ngx_hâp_ssi_v¨_t
));

2147 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2148  
NGX_ERROR
;

2152 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2153 i‡(
v¨
 =
NULL
) {

2154  
NGX_ERROR
;

2157 
v¨
->
«me
 = *
£t
;

2158 
v¨
->
key
 = key;

2159 
v¨
->
vÆue
 = 
ngx_hâp_ssi_nuŒ_°rög
;

2160 
p§
->
d©a
 = &
v¨
->
vÆue
;

2163 
Êags
 |
NGX_HTTP_SUBREQUEST_IN_MEMORY
|
NGX_HTTP_SUBREQUEST_WAITED
;

2166 i‡(
	`ngx_hâp_subªque°
(
r
, 
uri
, &
¨gs
, &
§
, 
p§
, 
Êags
Ë!
NGX_OK
) {

2167  
NGX_HTTP_SSI_ERROR
;

2170 i‡(
waô
 =
NULL
 && 
£t
 == NULL) {

2171  
NGX_OK
;

2174 i‡(
˘x
->
waô
 =
NULL
) {

2175 
˘x
->
waô
 = 
§
;

2177  
NGX_AGAIN
;

2180 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2184  
NGX_OK
;

2185 
	}
}

2188 
ngx_öt_t


2189 
	$ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2191 
ngx_chaö_t
 *
out
;

2193 i‡(
rc
 =
NGX_ERROR
 || 
r
->
c⁄√˘i⁄
->
îr‹
 ||Ñ->
ªque°_ouçut
) {

2194  
rc
;

2197 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2198 "ssò°ub ouçut: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2200 
out
 = 
d©a
;

2202 i‡(!
r
->
hódî_£¡
) {

2203 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =

2204 
r
->
∑ª¡
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

2205 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 =Ñ->
∑ª¡
->headers_out.content_type;

2207 i‡(
	`ngx_hâp_£nd_hódî
(
r
Ë=
NGX_ERROR
) {

2208  
NGX_ERROR
;

2212  
	`ngx_hâp_ouçut_fûãr
(
r
, 
out
);

2213 
	}
}

2216 
ngx_öt_t


2217 
	$ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2219 
ngx_°r_t
 *
vÆue
 = 
d©a
;

2221 i‡(
r
->
up°ªam
) {

2222 
vÆue
->
Àn
 = 
r
->
up°ªam
->
buf„r
.
œ°
 -Ñ->up°ªam->buf„r.
pos
;

2223 
vÆue
->
d©a
 = 
r
->
up°ªam
->
buf„r
.
pos
;

2226  
rc
;

2227 
	}
}

2230 
ngx_öt_t


2231 
	$ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2232 
ngx_°r_t
 **
∑øms
)

2234 
u_ch¨
 *
p
;

2235 
uöçå_t
 
Àn
;

2236 
ngx_öt_t
 
key
;

2237 
ngx_buf_t
 *
b
;

2238 
ngx_°r_t
 *
v¨
, *
vÆue
, *
íc
, 
ãxt
;

2239 
ngx_chaö_t
 *
˛
;

2240 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2242 
v¨
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_VAR
];

2244 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2245 "ssòechÿ\"%V\"", 
v¨
);

2247 
key
 = 
	`ngx_hash_°æow
(
v¨
->
d©a
, v¨->d©a, v¨->
Àn
);

2249 
vÆue
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2251 i‡(
vÆue
 =
NULL
) {

2252 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2254 i‡(
vv
 =
NULL
) {

2255  
NGX_HTTP_SSI_ERROR
;

2258 i‡(!
vv
->
nŸ_found
) {

2259 
ãxt
.
d©a
 = 
vv
->data;

2260 
ãxt
.
Àn
 = 
vv
->len;

2261 
vÆue
 = &
ãxt
;

2265 i‡(
vÆue
 =
NULL
) {

2266 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_DEFAULT
];

2268 i‡(
vÆue
 =
NULL
) {

2269 
vÆue
 = &
ngx_hâp_ssi_n⁄e
;

2271 } i‡(
vÆue
->
Àn
 == 0) {

2272  
NGX_OK
;

2276 i‡(
vÆue
->
Àn
 == 0) {

2277  
NGX_OK
;

2281 
íc
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_ENCODING
];

2283 i‡(
íc
) {

2284 i‡(
íc
->
Àn
 =4 && 
	`ngx_°∫cmp
”nc->
d©a
, "none", 4) == 0) {

2286 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_NO_ENCODING
;

2288 } i‡(
íc
->
Àn
 =3 && 
	`ngx_°∫cmp
”nc->
d©a
, "url", 3) == 0) {

2290 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_URL_ENCODING
;

2292 } i‡(
íc
->
Àn
 =6 && 
	`ngx_°∫cmp
”nc->
d©a
, "entity", 6) == 0) {

2294 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

2297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2299 
íc
);

2303 
p
 = 
vÆue
->
d©a
;

2305 
˘x
->
ícodög
) {

2307 
NGX_HTTP_SSI_URL_ENCODING
:

2308 
Àn
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vÆue
->
d©a
, value->len,

2309 
NGX_ESCAPE_HTML
);

2311 i‡(
Àn
) {

2312 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2313 i‡(
p
 =
NULL
) {

2314  
NGX_HTTP_SSI_ERROR
;

2317 (Ë
	`ngx_esˇ≥_uri
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
, 
NGX_ESCAPE_HTML
);

2320 
Àn
 +
vÆue
->len;

2323 
NGX_HTTP_SSI_ENTITY_ENCODING
:

2324 
Àn
 = 
	`ngx_esˇ≥_html
(
NULL
, 
vÆue
->
d©a
, value->len);

2326 i‡(
Àn
) {

2327 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2328 i‡(
p
 =
NULL
) {

2329  
NGX_HTTP_SSI_ERROR
;

2332 (Ë
	`ngx_esˇ≥_html
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

2335 
Àn
 +
vÆue
->len;

2339 
Àn
 = 
vÆue
->len;

2343 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2344 i‡(
b
 =
NULL
) {

2345  
NGX_HTTP_SSI_ERROR
;

2348 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2349 i‡(
˛
 =
NULL
) {

2350  
NGX_HTTP_SSI_ERROR
;

2353 
b
->
mem‹y
 = 1;

2354 
b
->
pos
 = 
p
;

2355 
b
->
œ°
 = 
p
 + 
Àn
;

2357 
˛
->
buf
 = 
b
;

2358 
˛
->
√xt
 = 
NULL
;

2359 *
˘x
->
œ°_out
 = 
˛
;

2360 
˘x
->
œ°_out
 = &
˛
->
√xt
;

2362  
NGX_OK
;

2363 
	}
}

2366 
ngx_öt_t


2367 
	$ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2368 
ngx_°r_t
 **
∑øms
)

2370 
ngx_°r_t
 *
vÆue
;

2372 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_TIMEFMT
];

2374 i‡(
vÆue
) {

2375 
˘x
->
timefmt
.
Àn
 = 
vÆue
->len;

2376 
˘x
->
timefmt
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 + 1);

2377 i‡(
˘x
->
timefmt
.
d©a
 =
NULL
) {

2378  
NGX_HTTP_SSI_ERROR
;

2381 
	`ngx_˝y°∫
(
˘x
->
timefmt
.
d©a
, 
vÆue
->d©a, vÆue->
Àn
 + 1);

2384 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_ERRMSG
];

2386 i‡(
vÆue
) {

2387 
˘x
->
îrmsg
 = *
vÆue
;

2390  
NGX_OK
;

2391 
	}
}

2394 
ngx_öt_t


2395 
	$ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2396 
ngx_°r_t
 **
∑øms
)

2398 
ngx_öt_t
 
key
, 
rc
;

2399 
ngx_°r_t
 *
«me
, *
vÆue
, *
vv
;

2400 
ngx_hâp_ssi_v¨_t
 *
v¨
;

2401 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2403 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2405 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2406 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2407 (
ngx_hâp_ssi_v¨_t
));

2408 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2409  
NGX_ERROR
;

2413 
«me
 = 
∑øms
[
NGX_HTTP_SSI_SET_VAR
];

2414 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_SET_VALUE
];

2416 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2417 "ssò£à\"%V\" \"%V\"", 
«me
, 
vÆue
);

2419 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
vÆue
, 0);

2421 i‡(
rc
 !
NGX_OK
) {

2422  
rc
;

2425 
key
 = 
	`ngx_hash_°æow
(
«me
->
d©a
,Çame->d©a,Çame->
Àn
);

2427 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
«me
, 
key
);

2429 i‡(
vv
) {

2430 *
vv
 = *
vÆue
;

2431  
NGX_OK
;

2434 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2435 i‡(
v¨
 =
NULL
) {

2436  
NGX_ERROR
;

2439 
v¨
->
«me
 = *name;

2440 
v¨
->
key
 = key;

2441 
v¨
->
vÆue
 = *value;

2443 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2444 "£t: \"%V\"=\"%V\"", 
«me
, 
vÆue
);

2446  
NGX_OK
;

2447 
	}
}

2450 
ngx_öt_t


2451 
	$ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2452 
ngx_°r_t
 **
∑øms
)

2454 
u_ch¨
 *
p
, *
œ°
;

2455 
ngx_°r_t
 *
ex¥
, 
À·
, 
right
;

2456 
ngx_öt_t
 
rc
;

2457 
ngx_uöt_t
 
√g©ive
, 
n‹egex
, 
Êags
;

2459 i‡(
˘x
->
comm™d
.
Àn
 == 2) {

2460 i‡(
˘x
->
c⁄dôi⁄Æ
) {

2461 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2463  
NGX_HTTP_SSI_ERROR
;

2467 i‡(
˘x
->
ouçut_cho£n
) {

2468 
˘x
->
ouçut
 = 0;

2469  
NGX_OK
;

2472 
ex¥
 = 
∑øms
[
NGX_HTTP_SSI_IF_EXPR
];

2474 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2475 "ssòi‡ex¥=\"%V\"", 
ex¥
);

2477 
À·
.
d©a
 = 
ex¥
->data;

2478 
œ°
 = 
ex¥
->
d©a
 +Éx¥->
Àn
;

2480 
p
 = 
À·
.
d©a
;Ö < 
œ°
;Ö++) {

2481 i‡(*
p
 >= 'A' && *p <= 'Z') {

2482 *
p
 |= 0x20;

2486 i‡((*
p
 >= 'a' && *p <= 'z')

2487 || (*
p
 >= '0' && *p <= '9')

2488 || *
p
 == '$' || *p == '{' || *p == '}' || *p == '_'

2489 || *
p
 == '"' || *p == '\'')

2497 
À·
.
Àn
 = 
p
 -Üe·.
d©a
;

2499 
p
 < 
œ°
 && *p == ' ') {

2500 
p
++;

2503 
Êags
 = 0;

2505 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2506 "À·: \"%V\"", &
À·
);

2508 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
À·
, 
Êags
);

2510 i‡(
rc
 !
NGX_OK
) {

2511  
rc
;

2514 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2515 "evÆuãdÜe·: \"%V\"", &
À·
);

2517 i‡(
p
 =
œ°
) {

2518 i‡(
À·
.
Àn
) {

2519 
˘x
->
ouçut
 = 1;

2520 
˘x
->
ouçut_cho£n
 = 1;

2523 
˘x
->
ouçut
 = 0;

2526 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2528  
NGX_OK
;

2531 i‡(
p
 < 
œ°
 && *p == '=') {

2532 
√g©ive
 = 0;

2533 
p
++;

2535 } i‡(
p
 + 1 < 
œ°
 && *p == '!' && *(p + 1) == '=') {

2536 
√g©ive
 = 1;

2537 
p
 += 2;

2540 
övÆid_ex¥essi⁄
;

2543 
p
 < 
œ°
 && *p == ' ') {

2544 
p
++;

2547 i‡(
p
 < 
œ°
 - 1 && *p == '/') {

2548 i‡(*(
œ°
 - 1) != '/') {

2549 
övÆid_ex¥essi⁄
;

2552 
n‹egex
 = 0;

2553 
Êags
 = 
NGX_HTTP_SSI_ADD_ZERO
;

2554 
œ°
--;

2555 
p
++;

2558 
n‹egex
 = 1;

2559 
Êags
 = 0;

2561 i‡(
p
 < 
œ°
 - 1 &&Ö[0] == '\\' &&Ö[1] == '/') {

2562 
p
++;

2566 
right
.
Àn
 = 
œ°
 - 
p
;

2567 
right
.
d©a
 = 
p
;

2569 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2570 "right: \"%V\"", &
right
);

2572 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
right
, 
Êags
);

2574 i‡(
rc
 !
NGX_OK
) {

2575  
rc
;

2578 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2579 "evÆuãdÑight: \"%V\"", &
right
);

2581 i‡(
n‹egex
) {

2582 i‡(
À·
.
Àn
 !
right
.len) {

2583 
rc
 = -1;

2586 
rc
 = 
	`ngx_°∫cmp
(
À·
.
d©a
, 
right
.d©a,Ñight.
Àn
);

2590 
right
.
d©a
[right.
Àn
] = '\0';

2592 
rc
 = 
	`ngx_hâp_ssi_ªgex_m©ch
(
r
, &
right
, &
À·
);

2594 i‡(
rc
 =
NGX_OK
) {

2595 
rc
 = 0;

2596 } i‡(
rc
 =
NGX_DECLINED
) {

2597 
rc
 = -1;

2599  
rc
;

2603 i‡((
rc
 =0 && !
√g©ive
) || (rc != 0 &&Çegative)) {

2604 
˘x
->
ouçut
 = 1;

2605 
˘x
->
ouçut_cho£n
 = 1;

2608 
˘x
->
ouçut
 = 0;

2611 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2613  
NGX_OK
;

2615 
övÆid_ex¥essi⁄
:

2617 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2618 "övÆidÉx¥essi⁄ i¿\"%V\"", 
ex¥
);

2620  
NGX_HTTP_SSI_ERROR
;

2621 
	}
}

2624 
ngx_öt_t


2625 
	$ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2626 
ngx_°r_t
 **
∑øms
)

2628 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2631 i‡(
˘x
->
ouçut_cho£n
) {

2632 
˘x
->
ouçut
 = 0;

2634 
˘x
->
ouçut
 = 1;

2637 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_ELSE
;

2639  
NGX_OK
;

2640 
	}
}

2643 
ngx_öt_t


2644 
	$ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2645 
ngx_°r_t
 **
∑øms
)

2647 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2650 
˘x
->
ouçut
 = 1;

2651 
˘x
->
ouçut_cho£n
 = 0;

2652 
˘x
->
c⁄dôi⁄Æ
 = 0;

2654  
NGX_OK
;

2655 
	}
}

2658 
ngx_öt_t


2659 
	$ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2660 
ngx_°r_t
 **
∑øms
)

2662 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2663 
ngx_hâp_ssi_block_t
 *
bl
;

2665 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2668 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2670 i‡(
m˘x
->
blocks
 =
NULL
) {

2671 
m˘x
->
blocks
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 4,

2672 (
ngx_hâp_ssi_block_t
));

2673 i‡(
m˘x
->
blocks
 =
NULL
) {

2674  
NGX_HTTP_SSI_ERROR
;

2678 
bl
 = 
	`ngx_¨øy_push
(
m˘x
->
blocks
);

2679 i‡(
bl
 =
NULL
) {

2680  
NGX_HTTP_SSI_ERROR
;

2683 
bl
->
«me
 = *
∑øms
[
NGX_HTTP_SSI_BLOCK_NAME
];

2684 
bl
->
bufs
 = 
NULL
;

2685 
bl
->
cou¡
 = 0;

2687 
˘x
->
ouçut
 = 0;

2688 
˘x
->
block
 = 1;

2690  
NGX_OK
;

2691 
	}
}

2694 
ngx_öt_t


2695 
	$ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2696 
ngx_°r_t
 **
∑øms
)

2698 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2701 
˘x
->
ouçut
 = 1;

2702 
˘x
->
block
 = 0;

2704  
NGX_OK
;

2705 
	}
}

2708 
ngx_öt_t


2709 
	$ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2710 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
)

2712 
ngx_hâp_ssi_˘x_t
 *
˘x
;

2713 
ngx_time_t
 *
ç
;

2714 
tm
Åm;

2715 
buf
[
NGX_HTTP_SSI_DATE_LEN
];

2717 
v
->
vÆid
 = 1;

2718 
v
->
no_ˇchóbÀ
 = 0;

2719 
v
->
nŸ_found
 = 0;

2721 
ç
 = 
	`ngx_timeofday
();

2723 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2725 i‡(
˘x
 =
NULL


2726 || (
˘x
->
timefmt
.
Àn
 == ("%s") - 1

2727 && 
˘x
->
timefmt
.
d©a
[0] == '%' && ctx->timefmt.data[1] == 's'))

2729 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
);

2730 i‡(
v
->
d©a
 =
NULL
) {

2731  
NGX_ERROR
;

2734 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%T", 
ç
->
£c
) - v->data;

2736  
NGX_OK
;

2739 i‡(
gmt
) {

2740 
	`ngx_libc_gmtime
(
ç
->
£c
, &
tm
);

2742 
	`ngx_libc_loˇ…ime
(
ç
->
£c
, &
tm
);

2745 
v
->
Àn
 = 
	`°r·ime
(
buf
, 
NGX_HTTP_SSI_DATE_LEN
,

2746 (*Ë
˘x
->
timefmt
.
d©a
, &
tm
);

2747 i‡(
v
->
Àn
 == 0) {

2748  
NGX_ERROR
;

2751 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2752 i‡(
v
->
d©a
 =
NULL
) {

2753  
NGX_ERROR
;

2756 
	`ngx_mem˝y
(
v
->
d©a
, 
buf
, v->
Àn
);

2758  
NGX_OK
;

2759 
	}
}

2762 
ngx_öt_t


2763 
	$ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

2765 
ngx_öt_t
 
rc
;

2766 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2767 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

2768 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2770 
v
 = 
ngx_hâp_ssi_v¨s
; v->
«me
.
Àn
; v++) {

2771 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2772 i‡(
v¨
 =
NULL
) {

2773  
NGX_ERROR
;

2776 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2777 
v¨
->
d©a
 = 
v
->data;

2780 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2782 
cmd
 = 
ngx_hâp_ssi_comm™ds
; cmd->
«me
.
Àn
; cmd++) {

2783 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
cmd
->
«me
, cmd,

2784 
NGX_HASH_READONLY_KEY
);

2786 i‡(
rc
 =
NGX_OK
) {

2790 i‡(
rc
 =
NGX_BUSY
) {

2791 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2792 "c⁄Êi˘ög SSI comm™d \"%V\"", &
cmd
->
«me
);

2795  
NGX_ERROR
;

2798  
NGX_OK
;

2799 
	}
}

2803 
	$ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2805 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2807 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_maö_c⁄f_t
));

2808 i‡(
smcf
 =
NULL
) {

2809  
NULL
;

2812 
smcf
->
comm™ds
.
poﬁ
 = 
cf
->pool;

2813 
smcf
->
comm™ds
.
ãmp_poﬁ
 = 
cf
->temp_pool;

2815 i‡(
	`ngx_hash_keys_¨øy_öô
(&
smcf
->
comm™ds
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

2816  
NULL
;

2819  
smcf
;

2820 
	}
}

2824 
	$ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

2826 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

2828 
ngx_hash_öô_t
 
hash
;

2830 
hash
.hash = &
smcf
->hash;

2831 
hash
.
key
 = 
ngx_hash_key
;

2832 
hash
.
max_size
 = 1024;

2833 
hash
.
buckë_size
 = 
ngx_ˇchñöe_size
;

2834 
hash
.
«me
 = "ssi_command_hash";

2835 
hash
.
poﬁ
 = 
cf
->pool;

2836 
hash
.
ãmp_poﬁ
 = 
NULL
;

2838 i‡(
	`ngx_hash_öô
(&
hash
, 
smcf
->
comm™ds
.
keys
.
ñts
,

2839 
smcf
->
comm™ds
.
keys
.
√…s
)

2840 !
NGX_OK
)

2842  
NGX_CONF_ERROR
;

2845  
NGX_CONF_OK
;

2846 
	}
}

2850 
	$ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2852 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

2854 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_loc_c⁄f_t
));

2855 i‡(
¶cf
 =
NULL
) {

2856  
NULL
;

2866 
¶cf
->
íabÀ
 = 
NGX_CONF_UNSET
;

2867 
¶cf
->
sûít_îr‹s
 = 
NGX_CONF_UNSET
;

2868 
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 = 
NGX_CONF_UNSET
;

2870 
¶cf
->
mö_fûe_chunk
 = 
NGX_CONF_UNSET_SIZE
;

2871 
¶cf
->
vÆue_Àn
 = 
NGX_CONF_UNSET_SIZE
;

2873  
¶cf
;

2874 
	}
}

2878 
	$ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2880 
ngx_hâp_ssi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2881 
ngx_hâp_ssi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2883 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

2884 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sûít_îr‹s
, 
¥ev
->silent_errors, 0);

2885 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_ªcy˛ed_buf„rs
,

2886 
¥ev
->
ign‹e_ªcy˛ed_buf„rs
, 0);

2888 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
mö_fûe_chunk
, 
¥ev
->min_file_chunk, 1024);

2889 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
vÆue_Àn
, 
¥ev
->value_len, 256);

2891 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

2892 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

2893 
ngx_hâp_html_deÁu…_ty≥s
)

2894 !
NGX_OK
)

2896  
NGX_CONF_ERROR
;

2899  
NGX_CONF_OK
;

2900 
	}
}

2903 
ngx_öt_t


2904 
	$ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

2906 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

2907 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ssi_hódî_fûãr
;

2909 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

2910 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ssi_body_fûãr
;

2912  
NGX_OK
;

2913 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.h

8 #i‚de‡
_NGX_HTTP_SSI_FILTER_H_INCLUDED_


9 
	#_NGX_HTTP_SSI_FILTER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_SSI_MAX_PARAMS
 16

	)

19 
	#NGX_HTTP_SSI_COMMAND_LEN
 32

	)

20 
	#NGX_HTTP_SSI_PARAM_LEN
 32

	)

21 
	#NGX_HTTP_SSI_PARAMS_N
 4

	)

24 
	#NGX_HTTP_SSI_COND_IF
 1

	)

25 
	#NGX_HTTP_SSI_COND_ELSE
 2

	)

28 
	#NGX_HTTP_SSI_NO_ENCODING
 0

	)

29 
	#NGX_HTTP_SSI_URL_ENCODING
 1

	)

30 
	#NGX_HTTP_SSI_ENTITY_ENCODING
 2

	)

34 
ngx_hash_t
 
	mhash
;

35 
ngx_hash_keys_¨øys_t
 
	mcomm™ds
;

36 } 
	tngx_hâp_ssi_maö_c⁄f_t
;

40 
ngx_buf_t
 *
	mbuf
;

42 
u_ch¨
 *
	mpos
;

43 
u_ch¨
 *
	mc›y_°¨t
;

44 
u_ch¨
 *
	mc›y_íd
;

46 
ngx_uöt_t
 
	mkey
;

47 
ngx_°r_t
 
	mcomm™d
;

48 
ngx_¨øy_t
 
	m∑øms
;

49 
ngx_èbÀ_ñt_t
 *
	m∑øm
;

50 
ngx_èbÀ_ñt_t
 
	m∑øms_¨øy
[
NGX_HTTP_SSI_PARAMS_N
];

52 
ngx_chaö_t
 *
	mö
;

53 
ngx_chaö_t
 *
	mout
;

54 
ngx_chaö_t
 **
	mœ°_out
;

55 
ngx_chaö_t
 *
	mbusy
;

56 
ngx_chaö_t
 *
	m‰ì
;

58 
ngx_uöt_t
 
	m°©e
;

59 
ngx_uöt_t
 
	mßved_°©e
;

60 
size_t
 
	mßved
;

61 
size_t
 
	mlooked
;

63 
size_t
 
	mvÆue_Àn
;

65 
ngx_li°_t
 *
	mv¨übÀs
;

66 
ngx_¨øy_t
 *
	mblocks
;

68 #i‡(
NGX_PCRE
)

69 
ngx_uöt_t
 
	mnˇ±uªs
;

70 *
	mˇ±uªs
;

71 
u_ch¨
 *
	mˇ±uªs_d©a
;

74 
	mc⁄dôi⁄Æ
:2;

75 
	mícodög
:2;

76 
	mblock
:1;

77 
	mouçut
:1;

78 
	mouçut_cho£n
:1;

80 
ngx_hâp_ªque°_t
 *
	mwaô
;

81 *
	mvÆue_buf
;

82 
ngx_°r_t
 
	mtimefmt
;

83 
ngx_°r_t
 
	mîrmsg
;

84 } 
	tngx_hâp_ssi_˘x_t
;

87 
	$ngx_öt_t
 (*
	tngx_hâp_ssi_comm™d_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

88 
	tngx_hâp_ssi_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 **);

92 
ngx_°r_t
 
«me
;

93 
ngx_uöt_t
 
ödex
;

95 
m™d©‹y
:1;

96 
mu…ùÀ
:1;

97 } 
	tngx_hâp_ssi_∑øm_t
;

101 
ngx_°r_t
 
«me
;

102 
ngx_hâp_ssi_comm™d_±
 
h™dÀr
;

103 
ngx_hâp_ssi_∑øm_t
 *
∑øms
;

105 
c⁄dôi⁄Æ
:2;

106 
block
:1;

107 
Êush
:1;

108 } 
	tngx_hâp_ssi_comm™d_t
;

111 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

	@src/http/modules/ngx_http_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	$ngx_öt_t
 (*
	tngx_s¶_v¨übÀ_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
,

14 
	tngx_poﬁ_t
 *
	tpoﬁ
, 
	tngx_°r_t
 *
	ts
);

17 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

18 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

21 
ngx_öt_t
 
	`ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

23 
ngx_öt_t
 
	`ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

24 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

26 
ngx_öt_t
 
	`ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

27 *
	`ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
	`ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

29 *
∑ª¡
, *
chûd
);

31 *
	`ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

32 *
c⁄f
);

33 *
	`ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

34 *
c⁄f
);

37 
ngx_c⁄f_bômask_t
 
ngx_hâp_s¶_¥Ÿocﬁs
[] = {

38 { 
	`ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

39 { 
	`ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

40 { 
	`ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

41 { 
	`ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

42 { 
	`ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

43 { 
ngx_nuŒ_°rög
, 0 }

44 
	}
};

47 
ngx_c⁄f_íum_t
 
	gngx_hâp_s¶_vîify
[] = {

48 { 
ngx_°rög
("off"), 0 },

49 { 
ngx_°rög
("on"), 1 },

50 { 
ngx_°rög
("optional"), 2 },

51 { 
ngx_nuŒ_°rög
, 0 }

55 
ngx_comm™d_t
 
	gngx_hâp_s¶_comm™ds
[] = {

57 { 
ngx_°rög
("ssl"),

58 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

59 
ngx_hâp_s¶_íabÀ
,

60 
NGX_HTTP_SRV_CONF_OFFSET
,

61 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
íabÀ
),

62 
NULL
 },

64 { 
ngx_°rög
("ssl_certificate"),

65 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_°r_¶Ÿ
,

67 
NGX_HTTP_SRV_CONF_OFFSET
,

68 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã
),

69 
NULL
 },

71 { 
ngx_°rög
("ssl_certificate_key"),

72 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_c⁄f_£t_°r_¶Ÿ
,

74 
NGX_HTTP_SRV_CONF_OFFSET
,

75 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã_key
),

76 
NULL
 },

78 { 
ngx_°rög
("ssl_dhparam"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

80 
ngx_c⁄f_£t_°r_¶Ÿ
,

81 
NGX_HTTP_SRV_CONF_OFFSET
,

82 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
dh∑øm
),

83 
NULL
 },

85 { 
ngx_°rög
("ssl_ecdh_curve"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_°r_¶Ÿ
,

88 
NGX_HTTP_SRV_CONF_OFFSET
,

89 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
ecdh_curve
),

90 
NULL
 },

92 { 
ngx_°rög
("ssl_protocols"),

93 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

94 
ngx_c⁄f_£t_bômask_¶Ÿ
,

95 
NGX_HTTP_SRV_CONF_OFFSET
,

96 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥Ÿocﬁs
),

97 &
ngx_hâp_s¶_¥Ÿocﬁs
 },

99 { 
ngx_°rög
("ssl_ciphers"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_°r_¶Ÿ
,

102 
NGX_HTTP_SRV_CONF_OFFSET
,

103 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
cùhîs
),

104 
NULL
 },

106 { 
ngx_°rög
("ssl_verify_client"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_íum_¶Ÿ
,

109 
NGX_HTTP_SRV_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify
),

111 &
ngx_hâp_s¶_vîify
 },

113 { 
ngx_°rög
("ssl_verify_depth"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

115 
ngx_c⁄f_£t_num_¶Ÿ
,

116 
NGX_HTTP_SRV_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify_dïth
),

118 
NULL
 },

120 { 
ngx_°rög
("ssl_client_certificate"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_°r_¶Ÿ
,

123 
NGX_HTTP_SRV_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

125 
NULL
 },

127 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

129 
ngx_c⁄f_£t_Êag_¶Ÿ
,

130 
NGX_HTTP_SRV_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

132 
NULL
 },

134 { 
ngx_°rög
("ssl_session_cache"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE12
,

136 
ngx_hâp_s¶_£ssi⁄_ˇche
,

137 
NGX_HTTP_SRV_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("ssl_session_timeout"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_c⁄f_£t_£c_¶Ÿ
,

144 
NGX_HTTP_SRV_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_timeout
),

146 
NULL
 },

148 { 
ngx_°rög
("ssl_crl"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_c⁄f_£t_°r_¶Ÿ
,

151 
NGX_HTTP_SRV_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¸l
),

153 
NULL
 },

155 
ngx_nuŒ_comm™d


159 
ngx_hâp_moduÀ_t
 
	gngx_hâp_s¶_moduÀ_˘x
 = {

160 
ngx_hâp_s¶_add_v¨übÀs
,

161 
NULL
,

163 
NULL
,

164 
NULL
,

166 
ngx_hâp_s¶_¸óã_§v_c⁄f
,

167 
ngx_hâp_s¶_mîge_§v_c⁄f
,

169 
NULL
,

170 
NULL


174 
ngx_moduÀ_t
 
	gngx_hâp_s¶_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_hâp_s¶_moduÀ_˘x
,

177 
ngx_hâp_s¶_comm™ds
,

178 
NGX_HTTP_MODULE
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


190 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_s¶_v¨s
[] = {

192 { 
ngx_°rög
("s¶_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

193 (
uöçå_t
Ë
ngx_s¶_gë_¥Ÿocﬁ
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

195 { 
ngx_°rög
("s¶_cùhî"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

196 (
uöçå_t
Ë
ngx_s¶_gë_cùhî_«me
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

198 { 
ngx_°rög
("s¶_£ssi⁄_id"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

199 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_id
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

201 { 
ngx_°rög
("s¶_˛õ¡_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

202 (
uöçå_t
Ë
ngx_s¶_gë_˚πifiˇã
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

204 { 
ngx_°rög
("s¶_˛õ¡_øw_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

205 (
uöçå_t
Ë
ngx_s¶_gë_øw_˚πifiˇã
,

206 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

208 { 
ngx_°rög
("s¶_˛õ¡_s_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

209 (
uöçå_t
Ë
ngx_s¶_gë_subje˘_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

211 { 
ngx_°rög
("s¶_˛õ¡_i_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

212 (
uöçå_t
Ë
ngx_s¶_gë_issuî_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

214 { 
ngx_°rög
("s¶_˛õ¡_£rül"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

215 (
uöçå_t
Ë
ngx_s¶_gë_£rül_numbî
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

217 { 
ngx_°rög
("s¶_˛õ¡_vîify"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

218 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_vîify
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

220 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

224 
ngx_°r_t
 
	gngx_hâp_s¶_£ss_id_˘x
 = 
ngx_°rög
("HTTP");

227 
ngx_öt_t


228 
	$ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

229 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

231 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

233 
size_t
 
Àn
;

234 
ngx_°r_t
 
s
;

236 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

238 (Ë
	`h™dÀr
(
r
->
c⁄√˘i⁄
, 
NULL
, &
s
);

240 
v
->
d©a
 = 
s
.data;

242 
Àn
 = 0; 
v
->
d©a
[len];Üen++) { }

244 
v
->
Àn
 =Üen;

245 
v
->
vÆid
 = 1;

246 
v
->
no_ˇchóbÀ
 = 0;

247 
v
->
nŸ_found
 = 0;

249  
NGX_OK
;

252 
v
->
nŸ_found
 = 1;

254  
NGX_OK
;

255 
	}
}

258 
ngx_öt_t


259 
	$ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

260 
uöçå_t
 
d©a
)

262 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

264 
ngx_°r_t
 
s
;

266 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

268 i‡(
	`h™dÀr
(
r
->
c⁄√˘i⁄
,Ñ->
poﬁ
, &
s
Ë!
NGX_OK
) {

269  
NGX_ERROR
;

272 
v
->
Àn
 = 
s
.len;

273 
v
->
d©a
 = 
s
.data;

275 i‡(
v
->
Àn
) {

276 
v
->
vÆid
 = 1;

277 
v
->
no_ˇchóbÀ
 = 0;

278 
v
->
nŸ_found
 = 0;

280  
NGX_OK
;

284 
v
->
nŸ_found
 = 1;

286  
NGX_OK
;

287 
	}
}

290 
ngx_öt_t


291 
	$ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

293 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

295 
v
 = 
ngx_hâp_s¶_v¨s
; v->
«me
.
Àn
; v++) {

296 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

297 i‡(
v¨
 =
NULL
) {

298  
NGX_ERROR
;

301 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

302 
v¨
->
d©a
 = 
v
->data;

305  
NGX_OK
;

306 
	}
}

310 
	$ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

312 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

314 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_s¶_§v_c⁄f_t
));

315 i‡(
sscf
 =
NULL
) {

316  
NULL
;

333 
sscf
->
íabÀ
 = 
NGX_CONF_UNSET
;

334 
sscf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

335 
sscf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

336 
sscf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

337 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

338 
sscf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

340  
sscf
;

341 
	}
}

345 
	$ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

347 
ngx_hâp_s¶_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

348 
ngx_hâp_s¶_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

350 
ngx_poﬁ_˛ónup_t
 *
˛n
;

352 i‡(
c⁄f
->
íabÀ
 =
NGX_CONF_UNSET
) {

353 i‡(
¥ev
->
íabÀ
 =
NGX_CONF_UNSET
) {

354 
c⁄f
->
íabÀ
 = 0;

357 
c⁄f
->
íabÀ
 = 
¥ev
->enable;

358 
c⁄f
->
fûe
 = 
¥ev
->file;

359 
c⁄f
->
löe
 = 
¥ev
->line;

363 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

364 
¥ev
->
£ssi⁄_timeout
, 300);

366 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

367 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

369 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

370 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


371 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

373 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

374 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

376 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

377 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

379 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

381 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
, 
¥ev
->client_certificate,

383 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

385 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

386 
NGX_DEFAULT_ECDH_CURVE
);

388 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

391 
c⁄f
->
s¶
.
log
 = 
cf
->log;

393 i‡(
c⁄f
->
íabÀ
) {

395 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

396 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

399 
c⁄f
->
fûe
, c⁄f->
löe
);

400  
NGX_CONF_ERROR
;

403 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

404 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

407 
c⁄f
->
fûe
, c⁄f->
löe
);

408  
NGX_CONF_ERROR
;

413 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

414  
NGX_CONF_OK
;

417 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

418 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

420 "f‹ cîtifiˇã \"%V\"", &
c⁄f
->
˚πifiˇã
);

421  
NGX_CONF_ERROR
;

425 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, c⁄fË!
NGX_OK
) {

426  
NGX_CONF_ERROR
;

429 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


431 i‡(
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
c⁄f
->
s¶
.
˘x
,

432 
ngx_hâp_s¶_£rvî«me
)

435 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

443 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

444 i‡(
˛n
 =
NULL
) {

445  
NGX_CONF_ERROR
;

448 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

449 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

451 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

452 &
c⁄f
->
˚πifiˇã_key
)

453 !
NGX_OK
)

455  
NGX_CONF_ERROR
;

458 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

459 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

462 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

464 &
c⁄f
->
cùhîs
);

467 i‡(
c⁄f
->
vîify
) {

469 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 == 0) {

470 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

472  
NGX_CONF_ERROR
;

475 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

476 &
c⁄f
->
˛õ¡_˚πifiˇã
,

477 
c⁄f
->
vîify_dïth
)

478 !
NGX_OK
)

480  
NGX_CONF_ERROR
;

483 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

484  
NGX_CONF_ERROR
;

488 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

489 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

493 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

495 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

496  
NGX_CONF_ERROR
;

499 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

500  
NGX_CONF_ERROR
;

503 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

504 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

506 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

507 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

510 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_hâp_s¶_£ss_id_˘x
,

511 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

512 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

513 !
NGX_OK
)

515  
NGX_CONF_ERROR
;

518  
NGX_CONF_OK
;

519 
	}
}

523 
	$ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

525 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

527 *
rv
;

529 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

531 i‡(
rv
 !
NGX_CONF_OK
) {

532  
rv
;

535 
sscf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

536 
sscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

538  
NGX_CONF_OK
;

539 
	}
}

543 
	$ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

545 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

547 
size_t
 
Àn
;

548 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

549 
ngx_öt_t
 
n
;

550 
ngx_uöt_t
 
i
, 
j
;

552 
vÆue
 = 
cf
->
¨gs
->
ñts
;

554 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

556 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

557 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

561 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

562 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

566 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

567 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

571 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

572 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

575 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

576 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

578 i‡(
n
 =
NGX_ERROR
) {

579 
övÆid
;

582 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

587 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

588 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

591 
Àn
 = 0;

593 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

594 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

595 
vÆue
[
i
].
d©a
[
j
] = '\0';

599 
Àn
++;

602 i‡(
Àn
 == 0) {

603 
övÆid
;

606 
«me
.
Àn
 =Üen;

607 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

609 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

610 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

612 
n
 = 
	`ngx_∑r£_size
(&
size
);

614 i‡(
n
 =
NGX_ERROR
) {

615 
övÆid
;

618 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

619 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

621 &
vÆue
[
i
]);

623  
NGX_CONF_ERROR
;

626 
sscf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

627 &
ngx_hâp_s¶_moduÀ
);

628 i‡(
sscf
->
shm_z⁄e
 =
NULL
) {

629  
NGX_CONF_ERROR
;

632 
sscf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

637 
övÆid
;

640 i‡(
sscf
->
shm_z⁄e
 && sscf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

641 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

644  
NGX_CONF_OK
;

646 
övÆid
:

648 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

649 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

651  
NGX_CONF_ERROR
;

652 
	}
}

	@src/http/modules/ngx_http_ssl_module.h

8 #i‚de‡
_NGX_HTTP_SSL_H_INCLUDED_


9 
	#_NGX_HTTP_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
ngx_Êag_t
 
	míabÀ
;

20 
ngx_s¶_t
 
	ms¶
;

22 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

24 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

26 
ngx_uöt_t
 
	mvîify
;

27 
ngx_uöt_t
 
	mvîify_dïth
;

29 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

31 
time_t
 
	m£ssi⁄_timeout
;

33 
ngx_°r_t
 
	m˚πifiˇã
;

34 
ngx_°r_t
 
	m˚πifiˇã_key
;

35 
ngx_°r_t
 
	mdh∑øm
;

36 
ngx_°r_t
 
	mecdh_curve
;

37 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

38 
ngx_°r_t
 
	m¸l
;

40 
ngx_°r_t
 
	mcùhîs
;

42 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

44 
u_ch¨
 *
	mfûe
;

45 
ngx_uöt_t
 
	mlöe
;

46 } 
	tngx_hâp_s¶_§v_c⁄f_t
;

49 
ngx_moduÀ_t
 
ngx_hâp_s¶_moduÀ
;

	@src/http/modules/ngx_http_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

17 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ_˘x
 = {

18 
NULL
,

19 
ngx_hâp_°©ic_öô
,

21 
NULL
,

22 
NULL
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL


32 
ngx_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 &
ngx_hâp_°©ic_moduÀ_˘x
,

35 
NULL
,

36 
NGX_HTTP_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


48 
ngx_öt_t


49 
	$ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

51 
u_ch¨
 *
œ°
, *
loˇti⁄
;

52 
size_t
 
roŸ
, 
Àn
;

53 
ngx_°r_t
 
∑th
;

54 
ngx_öt_t
 
rc
;

55 
ngx_uöt_t
 
Àvñ
;

56 
ngx_log_t
 *
log
;

57 
ngx_buf_t
 *
b
;

58 
ngx_chaö_t
 
out
;

59 
ngx_›í_fûe_öfo_t
 
of
;

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

62 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

63  
NGX_HTTP_NOT_ALLOWED
;

66 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

67  
NGX_DECLINED
;

70 
log
 = 
r
->
c⁄√˘i⁄
->log;

77 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

78 i‡(
œ°
 =
NULL
) {

79  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

82 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

84 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

85 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

87 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

89 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

91 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

92 
of
.
dúe˘io
 = 
˛cf
->directio;

93 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

94 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

95 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

96 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

98 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

99 !
NGX_OK
)

101 
of
.
îr
) {

104  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

106 
NGX_ENOENT
:

107 
NGX_ENOTDIR
:

108 
NGX_ENAMETOOLONG
:

110 
Àvñ
 = 
NGX_LOG_ERR
;

111 
rc
 = 
NGX_HTTP_NOT_FOUND
;

114 
NGX_EACCES
:

116 
Àvñ
 = 
NGX_LOG_ERR
;

117 
rc
 = 
NGX_HTTP_FORBIDDEN
;

122 
Àvñ
 = 
NGX_LOG_CRIT
;

123 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

127 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

128 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

129 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

132  
rc
;

135 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

137 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

139 i‡(
of
.
is_dú
) {

141 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

143 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

145 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

146 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

147  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 
Àn
 = 
r
->
uri
.len + 1;

152 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
 && 
r
->
¨gs
.
Àn
 == 0) {

153 
loˇti⁄
 = 
∑th
.
d©a
 + 
˛cf
->
roŸ
.
Àn
;

155 *
œ°
 = '/';

158 i‡(
r
->
¨gs
.
Àn
) {

159 
Àn
 +
r
->
¨gs
.len + 1;

162 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

163 i‡(
loˇti⁄
 =
NULL
) {

164  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

167 
œ°
 = 
	`ngx_c›y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

169 *
œ°
 = '/';

171 i‡(
r
->
¨gs
.
Àn
) {

172 *++
œ°
 = '?';

173 
	`ngx_mem˝y
(++
œ°
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

182 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

183 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

185  
NGX_HTTP_MOVED_PERMANENTLY
;

188 #i‡!(
NGX_WIN32
)

190 i‡(!
of
.
is_fûe
) {

191 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

192 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

194  
NGX_HTTP_NOT_FOUND
;

199 i‡(
r
->
mëhod
 & 
NGX_HTTP_POST
) {

200  
NGX_HTTP_NOT_ALLOWED
;

203 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

205 i‡(
rc
 !
NGX_OK
) {

206  
rc
;

209 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

211 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

212 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

213 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

215 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

216  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

219 i‡(
r
 !r->
maö
 && 
of
.
size
 == 0) {

220  
	`ngx_hâp_£nd_hódî
(
r
);

223 
r
->
Ælow_ønges
 = 1;

227 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

228 i‡(
b
 =
NULL
) {

229  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

232 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

233 i‡(
b
->
fûe
 =
NULL
) {

234  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

237 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

239 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

240  
rc
;

243 
b
->
fûe_pos
 = 0;

244 
b
->
fûe_œ°
 = 
of
.
size
;

246 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

247 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

248 
b
->
œ°_ö_chaö
 = 1;

250 
b
->
fûe
->
fd
 = 
of
.fd;

251 
b
->
fûe
->
«me
 = 
∑th
;

252 
b
->
fûe
->
log
 =Üog;

253 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

255 
out
.
buf
 = 
b
;

256 
out
.
√xt
 = 
NULL
;

258  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

259 
	}
}

262 
ngx_öt_t


263 
	$ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

265 
ngx_hâp_h™dÀr_±
 *
h
;

266 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

268 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

270 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

271 i‡(
h
 =
NULL
) {

272  
NGX_ERROR
;

275 *
h
 = 
ngx_hâp_°©ic_h™dÀr
;

277  
NGX_OK
;

278 
	}
}

	@src/http/modules/ngx_http_stub_status_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 *
ngx_hâp_£t_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

14 *
c⁄f
);

16 
ngx_comm™d_t
 
	gngx_hâp_°©us_comm™ds
[] = {

18 { 
ngx_°rög
("stub_status"),

19 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

20 
ngx_hâp_£t_°©us
,

23 
NULL
 },

25 
ngx_nuŒ_comm™d


30 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ_˘x
 = {

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL
,

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL


45 
ngx_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ
 = {

46 
NGX_MODULE_V1
,

47 &
ngx_hâp_°ub_°©us_moduÀ_˘x
,

48 
ngx_hâp_°©us_comm™ds
,

49 
NGX_HTTP_MODULE
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NGX_MODULE_V1_PADDING


61 
ngx_öt_t
 
	$ngx_hâp_°©us_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

63 
size_t
 
size
;

64 
ngx_öt_t
 
rc
;

65 
ngx_buf_t
 *
b
;

66 
ngx_chaö_t
 
out
;

67 
ngx_©omic_öt_t
 
≠
, 
hn
, 
ac
, 
rq
, 
rd
, 
wr
;

69 i‡(
r
->
mëhod
 !
NGX_HTTP_GET
 &&Ñ->mëhod !
NGX_HTTP_HEAD
) {

70  
NGX_HTTP_NOT_ALLOWED
;

73 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

75 i‡(
rc
 !
NGX_OK
) {

76  
rc
;

79 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

81 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

82 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

84 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

86 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

87  
rc
;

91 
size
 = ("A˘ivêc⁄√˘i⁄s: \n"Ë+ 
NGX_ATOMIC_T_LEN


93 + 6 + 3 * 
NGX_ATOMIC_T_LEN


94 + ("Ródög: Wrôög: Waôög: \n"Ë+ 3 * 
NGX_ATOMIC_T_LEN
;

96 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

97 i‡(
b
 =
NULL
) {

98  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

101 
out
.
buf
 = 
b
;

102 
out
.
√xt
 = 
NULL
;

104 
≠
 = *
ngx_°©_ac˚±ed
;

105 
hn
 = *
ngx_°©_h™dÀd
;

106 
ac
 = *
ngx_°©_a˘ive
;

107 
rq
 = *
ngx_°©_ªque°s
;

108 
rd
 = *
ngx_°©_ªadög
;

109 
wr
 = *
ngx_°©_wrôög
;

111 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "A˘ivêc⁄√˘i⁄s: %uA \n", 
ac
);

113 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "serveráccepts handledÑequests\n",

116 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %uA %uA %uA \n", 
≠
, 
hn
, 
rq
);

118 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "Reading: %uA Writing: %uA Waiting: %uA \n",

119 
rd
, 
wr
, 
ac
 - (rd + wr));

121 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

122 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

124 
b
->
œ°_buf
 = 1;

126 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

128 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

129  
rc
;

132  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

133 
	}
}

136 *
	$ngx_hâp_£t_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

138 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

140 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

141 
˛cf
->
h™dÀr
 = 
ngx_hâp_°©us_h™dÀr
;

143  
NGX_CONF_OK
;

144 
	}
}

	@src/http/modules/ngx_http_sub_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mm©ch
;

15 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

17 
ngx_hash_t
 
	mty≥s
;

19 
ngx_Êag_t
 
	m⁄˚
;

21 
ngx_¨øy_t
 *
	mty≥s_keys
;

22 } 
	tngx_hâp_sub_loc_c⁄f_t
;

26 
	msub_°¨t_°©e
 = 0,

27 
	msub_m©ch_°©e
,

28 } 
	tngx_hâp_sub_°©e_e
;

32 
ngx_°r_t
 
	mm©ch
;

33 
ngx_°r_t
 
	mßved
;

34 
ngx_°r_t
 
	mlooked
;

36 
ngx_uöt_t
 
	m⁄˚
;

38 
ngx_buf_t
 *
	mbuf
;

40 
u_ch¨
 *
	mpos
;

41 
u_ch¨
 *
	mc›y_°¨t
;

42 
u_ch¨
 *
	mc›y_íd
;

44 
ngx_chaö_t
 *
	mö
;

45 
ngx_chaö_t
 *
	mout
;

46 
ngx_chaö_t
 **
	mœ°_out
;

47 
ngx_chaö_t
 *
	mbusy
;

48 
ngx_chaö_t
 *
	m‰ì
;

50 
ngx_°r_t
 
	msub
;

52 
ngx_uöt_t
 
	m°©e
;

53 } 
	tngx_hâp_sub_˘x_t
;

56 
ngx_öt_t
 
ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_sub_˘x_t
 *
˘x
);

58 
ngx_öt_t
 
ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_sub_˘x_t
 *
˘x
);

61 * 
ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

64 *
ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

65 *
∑ª¡
, *
chûd
);

66 
ngx_öt_t
 
ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

69 
ngx_comm™d_t
 
	gngx_hâp_sub_fûãr_comm™ds
[] = {

71 { 
ngx_°rög
("sub_filter"),

72 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

73 
ngx_hâp_sub_fûãr
,

74 
NGX_HTTP_LOC_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("sub_filter_types"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

80 
ngx_hâp_ty≥s_¶Ÿ
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

82 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
ty≥s_keys
),

83 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

85 { 
ngx_°rög
("sub_filter_once"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

87 
ngx_c⁄f_£t_Êag_¶Ÿ
,

88 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
⁄˚
),

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_hâp_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ_˘x
 = {

97 
NULL
,

98 
ngx_hâp_sub_fûãr_öô
,

100 
NULL
,

101 
NULL
,

103 
NULL
,

104 
NULL
,

106 
ngx_hâp_sub_¸óã_c⁄f
,

107 
ngx_hâp_sub_mîge_c⁄f


111 
ngx_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ
 = {

112 
NGX_MODULE_V1
,

113 &
ngx_hâp_sub_fûãr_moduÀ_˘x
,

114 
ngx_hâp_sub_fûãr_comm™ds
,

115 
NGX_HTTP_MODULE
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NULL
,

120 
NULL
,

121 
NULL
,

122 
NULL
,

123 
NGX_MODULE_V1_PADDING


127 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

128 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

131 
ngx_öt_t


132 
	$ngx_hâp_sub_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

134 
ngx_hâp_sub_˘x_t
 *
˘x
;

135 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

137 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

139 i‡(
¶cf
->
m©ch
.
Àn
 == 0

140 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

141 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

143  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

146 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_sub_˘x_t
));

147 i‡(
˘x
 =
NULL
) {

148  
NGX_ERROR
;

151 
˘x
->
ßved
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

152 i‡(
˘x
->
ßved
.
d©a
 =
NULL
) {

153  
NGX_ERROR
;

156 
˘x
->
looked
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

157 i‡(
˘x
->
looked
.
d©a
 =
NULL
) {

158  
NGX_ERROR
;

161 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_sub_fûãr_moduÀ
);

163 
˘x
->
m©ch
 = 
¶cf
->match;

164 
˘x
->
œ°_out
 = &˘x->
out
;

166 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

168 i‡(
r
 =r->
maö
) {

169 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

170 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

173  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

174 
	}
}

177 
ngx_öt_t


178 
	$ngx_hâp_sub_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

180 
ngx_öt_t
 
rc
;

181 
ngx_buf_t
 *
b
;

182 
ngx_chaö_t
 *
˛
;

183 
ngx_hâp_sub_˘x_t
 *
˘x
;

184 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

186 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

188 i‡(
˘x
 =
NULL
) {

189  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

192 i‡((
ö
 =
NULL


193 && 
˘x
->
buf
 =
NULL


194 && 
˘x
->
ö
 =
NULL


195 && 
˘x
->
busy
 =
NULL
))

197  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

200 i‡(
˘x
->
⁄˚
 && (˘x->
buf
 =
NULL
 || ctx->
ö
 == NULL)) {

202 i‡(
˘x
->
busy
) {

203 i‡(
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

204  
NGX_ERROR
;

208  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

213 i‡(
ö
) {

214 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

215  
NGX_ERROR
;

219 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

220 "hâ∞sub fûã∏\"%V\"", &
r
->
uri
);

222 
˘x
->
ö
 || ctx->
buf
) {

224 i‡(
˘x
->
buf
 =
NULL
) {

225 
˘x
->
buf
 = ctx->
ö
->buf;

226 
˘x
->
ö
 = ctx->ö->
√xt
;

227 
˘x
->
pos
 = ctx->
buf
->pos;

230 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

231 
˘x
->
c›y_°¨t
 = ctx->
pos
;

232 
˘x
->
c›y_íd
 = ctx->
pos
;

235 
b
 = 
NULL
;

237 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

239 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

240 "ßved: \"%V\" sèã: %d", &
˘x
->
ßved
, ctx->
°©e
);

242 
rc
 = 
	`ngx_hâp_sub_∑r£
(
r
, 
˘x
);

244 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

246 
rc
, &
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

248 i‡(
rc
 =
NGX_ERROR
) {

249  
rc
;

252 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

255 "ßved: \"%V\"", &
˘x
->
ßved
);

257 i‡(
˘x
->
ßved
.
Àn
) {

259 i‡(
˘x
->
‰ì
) {

260 
˛
 = 
˘x
->
‰ì
;

261 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

262 
b
 = 
˛
->
buf
;

263 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

266 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

267 i‡(
b
 =
NULL
) {

268  
NGX_ERROR
;

271 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

272 i‡(
˛
 =
NULL
) {

273  
NGX_ERROR
;

276 
˛
->
buf
 = 
b
;

279 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
ßved
.
Àn
);

280 i‡(
b
->
pos
 =
NULL
) {

281  
NGX_ERROR
;

284 
	`ngx_mem˝y
(
b
->
pos
, 
˘x
->
ßved
.
d©a
, ctx->ßved.
Àn
);

285 
b
->
œ°
 = b->
pos
 + 
˘x
->
ßved
.
Àn
;

286 
b
->
mem‹y
 = 1;

288 *
˘x
->
œ°_out
 = 
˛
;

289 
˘x
->
œ°_out
 = &
˛
->
√xt
;

291 
˘x
->
ßved
.
Àn
 = 0;

294 i‡(
˘x
->
‰ì
) {

295 
˛
 = 
˘x
->
‰ì
;

296 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

297 
b
 = 
˛
->
buf
;

300 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

301 i‡(
b
 =
NULL
) {

302  
NGX_ERROR
;

305 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

306 i‡(
˛
 =
NULL
) {

307  
NGX_ERROR
;

310 
˛
->
buf
 = 
b
;

313 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

315 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

316 
b
->
œ°
 = 
˘x
->
c›y_íd
;

317 
b
->
shadow
 = 
NULL
;

318 
b
->
œ°_buf
 = 0;

319 
b
->
ªcy˛ed
 = 0;

321 i‡(
b
->
ö_fûe
) {

322 
b
->
fûe_œ°
 = b->
fûe_pos
 + (b->
œ°
 - 
˘x
->
buf
->
pos
);

323 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

326 
˛
->
√xt
 = 
NULL
;

327 *
˘x
->
œ°_out
 = 
˛
;

328 
˘x
->
œ°_out
 = &
˛
->
√xt
;

331 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

332 
˘x
->
c›y_°¨t
 = ctx->
pos
;

333 
˘x
->
c›y_íd
 = ctx->
pos
;

336 
˘x
->
c›y_°¨t
 = 
NULL
;

337 
˘x
->
c›y_íd
 = 
NULL
;

340 i‡(
rc
 =
NGX_AGAIN
) {

347 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

348 i‡(
b
 =
NULL
) {

349  
NGX_ERROR
;

352 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

353 i‡(
˛
 =
NULL
) {

354  
NGX_ERROR
;

357 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

359 i‡(
˘x
->
sub
.
d©a
 =
NULL
) {

361 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¶cf
->
vÆue
, &
˘x
->
sub
)

362 !
NGX_OK
)

364  
NGX_ERROR
;

368 i‡(
˘x
->
sub
.
Àn
) {

369 
b
->
mem‹y
 = 1;

370 
b
->
pos
 = 
˘x
->
sub
.
d©a
;

371 
b
->
œ°
 = 
˘x
->
sub
.
d©a
 + ctx->sub.
Àn
;

374 
b
->
sync
 = 1;

377 
˛
->
buf
 = 
b
;

378 
˛
->
√xt
 = 
NULL
;

379 *
˘x
->
œ°_out
 = 
˛
;

380 
˘x
->
œ°_out
 = &
˛
->
√xt
;

382 
˘x
->
⁄˚
 = 
¶cf
->once;

387 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

388 i‡(
b
 =
NULL
) {

389 i‡(
˘x
->
‰ì
) {

390 
˛
 = 
˘x
->
‰ì
;

391 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

392 
b
 = 
˛
->
buf
;

393 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

396 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

397 i‡(
b
 =
NULL
) {

398  
NGX_ERROR
;

401 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

402 i‡(
˛
 =
NULL
) {

403  
NGX_ERROR
;

406 
˛
->
buf
 = 
b
;

409 
b
->
sync
 = 1;

411 
˛
->
√xt
 = 
NULL
;

412 *
˘x
->
œ°_out
 = 
˛
;

413 
˘x
->
œ°_out
 = &
˛
->
√xt
;

416 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

417 
b
->
shadow
 = 
˘x
->
buf
;

419 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

422 
˘x
->
buf
 = 
NULL
;

424 
˘x
->
ßved
.
Àn
 = ctx->
looked
.len;

425 
	`ngx_mem˝y
(
˘x
->
ßved
.
d©a
, ctx->
looked
.d©a, ctx->looked.
Àn
);

428 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

429  
NGX_OK
;

432  
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
);

433 
	}
}

436 
ngx_öt_t


437 
	$ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

439 
ngx_öt_t
 
rc
;

440 
ngx_buf_t
 *
b
;

441 
ngx_chaö_t
 *
˛
;

444 
b
 = 
NULL
;

445 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

446 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

447 "sub out: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

448 i‡(
˛
->
buf
 =
b
) {

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

451 
	`ngx_debug_poöt
();

452  
NGX_ERROR
;

454 
b
 = 
˛
->
buf
;

458 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

460 i‡(
˘x
->
busy
 =
NULL
) {

461 
˘x
->
busy
 = ctx->
out
;

464 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

465 
˛
->
√xt
 = 
˘x
->
out
;

468 
˘x
->
out
 = 
NULL
;

469 
˘x
->
œ°_out
 = &˘x->
out
;

471 
˘x
->
busy
) {

473 
˛
 = 
˘x
->
busy
;

474 
b
 = 
˛
->
buf
;

476 i‡(
	`ngx_buf_size
(
b
) != 0) {

480 i‡(
b
->
shadow
) {

481 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

484 
˘x
->
busy
 = 
˛
->
√xt
;

486 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

489 
˛
->
√xt
 = 
˘x
->
‰ì
;

490 
˘x
->
‰ì
 = 
˛
;

494 i‡(
˘x
->
ö
 || ctx->
buf
) {

495 
r
->
buf„ªd
 |
NGX_HTTP_SUB_BUFFERED
;

498 
r
->
buf„ªd
 &~
NGX_HTTP_SUB_BUFFERED
;

501  
rc
;

502 
	}
}

505 
ngx_öt_t


506 
	$ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

508 
u_ch¨
 *
p
, *
œ°
, *
c›y_íd
, 
ch
, 
m©ch
;

509 
size_t
 
looked
;

510 
ngx_hâp_sub_°©e_e
 
°©e
;

512 i‡(
˘x
->
⁄˚
) {

513 
˘x
->
c›y_°¨t
 = ctx->
pos
;

514 
˘x
->
c›y_íd
 = ctx->
buf
->
œ°
;

515 
˘x
->
pos
 = ctx->
buf
->
œ°
;

516 
˘x
->
looked
.
Àn
 = 0;

518 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "once");

520  
NGX_AGAIN
;

523 
°©e
 = 
˘x
->state;

524 
looked
 = 
˘x
->looked.
Àn
;

525 
œ°
 = 
˘x
->
buf
->last;

526 
c›y_íd
 = 
˘x
->copy_end;

528 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

530 
ch
 = *
p
;

531 
ch
 = 
	`ngx_tﬁowî
(ch);

533 i‡(
°©e
 =
sub_°¨t_°©e
) {

537 
m©ch
 = 
˘x
->m©ch.
d©a
[0];

540 i‡(
ch
 =
m©ch
) {

541 
c›y_íd
 = 
p
;

542 
˘x
->
looked
.
d©a
[0] = *
p
;

543 
looked
 = 1;

544 
°©e
 = 
sub_m©ch_°©e
;

546 
m©ch_°¨ãd
;

549 i‡(++
p
 =
œ°
) {

553 
ch
 = *
p
;

554 
ch
 = 
	`ngx_tﬁowî
(ch);

557 
˘x
->
°©e
 = state;

558 
˘x
->
pos
 = 
p
;

559 
˘x
->
looked
.
Àn
 =Üooked;

560 
˘x
->
c›y_íd
 = 
p
;

562 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

563 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

566  
NGX_AGAIN
;

568 
m©ch_°¨ãd
:

575 i‡(
ch
 =
˘x
->
m©ch
.
d©a
[
looked
]) {

576 
˘x
->
looked
.
d©a
[looked] = *
p
;

577 
looked
++;

579 i‡(
looked
 =
˘x
->
m©ch
.
Àn
) {

580 i‡((
size_t
Ë(
p
 - 
˘x
->
pos
Ë< 
looked
) {

581 
˘x
->
ßved
.
Àn
 = 0;

584 
˘x
->
°©e
 = 
sub_°¨t_°©e
;

585 
˘x
->
pos
 = 
p
 + 1;

586 
˘x
->
looked
.
Àn
 = 0;

587 
˘x
->
c›y_íd
 = copy_end;

589 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

590 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

593  
NGX_OK
;

596 } i‡(
ch
 =
˘x
->
m©ch
.
d©a
[0]) {

597 
c›y_íd
 = 
p
;

598 
˘x
->
looked
.
d©a
[0] = *
p
;

599 
looked
 = 1;

602 
c›y_íd
 = 
p
;

603 
looked
 = 0;

604 
°©e
 = 
sub_°¨t_°©e
;

608 
˘x
->
°©e
 = state;

609 
˘x
->
pos
 = 
p
;

610 
˘x
->
looked
.
Àn
 =Üooked;

612 
˘x
->
c›y_íd
 = (
°©e
 =
sub_°¨t_°©e
Ë? 
p
 : copy_end;

614 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

615 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

618  
NGX_AGAIN
;

619 
	}
}

623 
	$ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

625 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
 = 
c⁄f
;

627 
ngx_°r_t
 *
vÆue
;

628 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

630 i‡(
¶cf
->
m©ch
.
Àn
) {

634 
vÆue
 = 
cf
->
¨gs
->
ñts
;

636 
	`ngx_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

638 
¶cf
->
m©ch
 = 
vÆue
[1];

640 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

642 
ccv
.
cf
 = cf;

643 
ccv
.
vÆue
 = &value[2];

644 
ccv
.
com∂ex_vÆue
 = &
¶cf
->
vÆue
;

646 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

647  
NGX_CONF_ERROR
;

650  
NGX_CONF_OK
;

651 
	}
}

655 
	$ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

657 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

659 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_sub_loc_c⁄f_t
));

660 i‡(
¶cf
 =
NULL
) {

661  
NULL
;

675 
¶cf
->
⁄˚
 = 
NGX_CONF_UNSET
;

677  
¶cf
;

678 
	}
}

682 
	$ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

684 
ngx_hâp_sub_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

685 
ngx_hâp_sub_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

687 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
⁄˚
, 
¥ev
->once, 1);

688 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
m©ch
, 
¥ev
->match, "");

690 i‡(
c⁄f
->
vÆue
.vÆue.
Àn
 == 0) {

691 
c⁄f
->
vÆue
 = 
¥ev
->value;

694 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

695 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

696 
ngx_hâp_html_deÁu…_ty≥s
)

697 !
NGX_OK
)

699  
NGX_CONF_ERROR
;

702  
NGX_CONF_OK
;

703 
	}
}

706 
ngx_öt_t


707 
	$ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

709 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

710 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_sub_hódî_fûãr
;

712 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

713 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_sub_body_fûãr
;

715  
NGX_OK
;

716 
	}
}

	@src/http/modules/ngx_http_upstream_ip_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

17 
ngx_uöt_t
 
	mhash
;

19 
u_ch¨
 
	maddr
[3];

21 
u_ch¨
 
	måõs
;

23 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

24 } 
	tngx_hâp_up°ªam_ù_hash_≥î_d©a_t
;

27 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

29 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

30 *
d©a
);

31 *
ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

32 *
c⁄f
);

35 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_ù_hash_comm™ds
[] = {

37 { 
ngx_°rög
("ip_hash"),

38 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

39 
ngx_hâp_up°ªam_ù_hash
,

42 
NULL
 },

44 
ngx_nuŒ_comm™d


48 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ_˘x
 = {

49 
NULL
,

50 
NULL
,

52 
NULL
,

53 
NULL
,

55 
NULL
,

56 
NULL
,

58 
NULL
,

59 
NULL


63 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ
 = {

64 
NGX_MODULE_V1
,

65 &
ngx_hâp_up°ªam_ù_hash_moduÀ_˘x
,

66 
ngx_hâp_up°ªam_ù_hash_comm™ds
,

67 
NGX_HTTP_MODULE
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NGX_MODULE_V1_PADDING


79 
ngx_öt_t


80 
	$ngx_hâp_up°ªam_öô_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

82 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

83  
NGX_ERROR
;

86 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_ù_hash_≥î
;

88  
NGX_OK
;

89 
	}
}

92 
ngx_öt_t


93 
	$ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

96 
u_ch¨
 *
p
;

97 
sockaddr_ö
 *
sö
;

98 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
;

100 
ùhp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
));

101 i‡(
ùhp
 =
NULL
) {

102  
NGX_ERROR
;

105 
r
->
up°ªam
->
≥î
.
d©a
 = &
ùhp
->
ºp
;

107 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

108  
NGX_ERROR
;

111 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_ù_hash_≥î
;

115 i‡(
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
 =
AF_INET
) {

117 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

118 
p
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
.
s_addr
;

119 
ùhp
->
addr
[0] = 
p
[0];

120 
ùhp
->
addr
[1] = 
p
[1];

121 
ùhp
->
addr
[2] = 
p
[2];

124 
ùhp
->
addr
[0] = 0;

125 
ùhp
->
addr
[1] = 0;

126 
ùhp
->
addr
[2] = 0;

129 
ùhp
->
hash
 = 89;

130 
ùhp
->
åõs
 = 0;

131 
ùhp
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

133  
NGX_OK
;

134 
	}
}

137 
ngx_öt_t


138 
	$ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

140 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
 = 
d©a
;

142 
time_t
 
now
;

143 
uöçå_t
 
m
;

144 
ngx_uöt_t
 
i
, 
n
, 
p
, 
hash
;

145 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

147 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

148 "gë i∞hashÖìr,Åry: %ui", 
pc
->
åõs
);

152 i‡(
ùhp
->
åõs
 > 20 || iphp->
ºp
.
≥îs
->
sögÀ
) {

153  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

156 
now
 = 
	`ngx_time
();

158 
pc
->
ˇched
 = 0;

159 
pc
->
c⁄√˘i⁄
 = 
NULL
;

161 
hash
 = 
ùhp
->hash;

165 
i
 = 0; i < 3; i++) {

166 
hash
 = (hash * 113 + 
ùhp
->
addr
[
i
]) % 6271;

169 
p
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
numbî
;

171 
n
 = 
p
 / (8 * (
uöçå_t
));

172 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

174 i‡(!(
ùhp
->
ºp
.
åõd
[
n
] & 
m
)) {

176 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

177 "gë i∞hashÖìr, hash: %uò%04XA", 
p
, 
m
);

179 
≥î
 = &
ùhp
->
ºp
.
≥îs
->≥î[
p
];

183 i‡(!
≥î
->
down
) {

185 i‡(
≥î
->
max_Áûs
 =0 ||Öìr->
Áûs
 <Öeer->max_fails) {

189 i‡(
now
 - 
≥î
->
ac˚s£d
 >Öìr->
Áû_timeout
) {

190 
≥î
->
Áûs
 = 0;

195 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

199 
pc
->
åõs
--;

202 i‡(++
ùhp
->
åõs
 >= 20) {

203  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

207 
ùhp
->
ºp
.
cuºít
 = 
p
;

209 
pc
->
sockaddr
 = 
≥î
->sockaddr;

210 
pc
->
sockÀn
 = 
≥î
->socklen;

211 
pc
->
«me
 = &
≥î
->name;

215 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

216 
ùhp
->
hash
 = hash;

218  
NGX_OK
;

219 
	}
}

223 
	$ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

225 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

227 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

229 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_ù_hash
;

231 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


232 |
NGX_HTTP_UPSTREAM_MAX_FAILS


233 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


234 |
NGX_HTTP_UPSTREAM_DOWN
;

236  
NGX_CONF_OK
;

237 
	}
}

	@src/http/modules/ngx_http_userid_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_USERID_OFF
 0

	)

14 
	#NGX_HTTP_USERID_LOG
 1

	)

15 
	#NGX_HTTP_USERID_V1
 2

	)

16 
	#NGX_HTTP_USERID_ON
 3

	)

19 
	#NGX_HTTP_USERID_MAX_EXPIRES
 2145916555

	)

23 
ngx_uöt_t
 
	míabÀ
;

25 
ngx_öt_t
 
	m£rvi˚
;

27 
ngx_°r_t
 
	m«me
;

28 
ngx_°r_t
 
	mdomaö
;

29 
ngx_°r_t
 
	m∑th
;

30 
ngx_°r_t
 
	mp3p
;

32 
time_t
 
	mexpúes
;

34 
u_ch¨
 
	mm¨k
;

35 } 
	tngx_hâp_u£rid_c⁄f_t
;

39 
uöt32_t
 
	muid_gŸ
[4];

40 
uöt32_t
 
	muid_£t
[4];

41 
ngx_°r_t
 
	mcookõ
;

42 
ngx_uöt_t
 
	mª£t
;

43 } 
	tngx_hâp_u£rid_˘x_t
;

46 
ngx_hâp_u£rid_˘x_t
 *
ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

48 
ngx_öt_t
 
ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
);

50 
ngx_öt_t
 
ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

52 
ngx_öt_t
 
ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

55 
ngx_öt_t
 
ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

56 
ngx_öt_t
 
ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

58 *
ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

59 *
chûd
);

60 *
ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

61 *
ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

62 *
ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

65 *
ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 
ngx_öt_t
 
ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

71 
uöt32_t
 
	g°¨t_vÆue
;

72 
uöt32_t
 
	g£quí˚r_v1
 = 1;

73 
uöt32_t
 
	g£quí˚r_v2
 = 0x03030302;

76 
u_ch¨
 
	gexpúes
[] = ";Éxpires=Thu, 31-Dec-37 23:55:55 GMT";

79 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

82 
ngx_c⁄f_íum_t
 
	gngx_hâp_u£rid_°©e
[] = {

83 { 
ngx_°rög
("off"), 
NGX_HTTP_USERID_OFF
 },

84 { 
ngx_°rög
("log"), 
NGX_HTTP_USERID_LOG
 },

85 { 
ngx_°rög
("v1"), 
NGX_HTTP_USERID_V1
 },

86 { 
ngx_°rög
("⁄"), 
NGX_HTTP_USERID_ON
 },

87 { 
ngx_nuŒ_°rög
, 0 }

91 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_domaö_p
 =

92 
ngx_hâp_u£rid_domaö
;

93 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_∑th_p
 = 
ngx_hâp_u£rid_∑th
;

94 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_p3p_p
 = 
ngx_hâp_u£rid_p3p
;

97 
ngx_comm™d_t
 
	gngx_hâp_u£rid_comm™ds
[] = {

99 { 
ngx_°rög
("userid"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_íum_¶Ÿ
,

102 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
íabÀ
),

104 
ngx_hâp_u£rid_°©e
 },

106 { 
ngx_°rög
("userid_service"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_num_¶Ÿ
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
£rvi˚
),

111 
NULL
 },

113 { 
ngx_°rög
("userid_name"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_°r_¶Ÿ
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
«me
),

118 
NULL
 },

120 { 
ngx_°rög
("userid_domain"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_°r_¶Ÿ
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
domaö
),

125 &
ngx_hâp_u£rid_domaö_p
 },

127 { 
ngx_°rög
("userid_path"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_°r_¶Ÿ
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
∑th
),

132 &
ngx_hâp_u£rid_∑th_p
 },

134 { 
ngx_°rög
("userid_expires"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_hâp_u£rid_expúes
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("userid_p3p"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_c⁄f_£t_°r_¶Ÿ
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
p3p
),

146 &
ngx_hâp_u£rid_p3p_p
 },

148 { 
ngx_°rög
("userid_mark"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_u£rid_m¨k
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
NULL
 },

155 
ngx_nuŒ_comm™d


159 
ngx_hâp_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ_˘x
 = {

160 
ngx_hâp_u£rid_add_v¨übÀs
,

161 
ngx_hâp_u£rid_öô
,

163 
NULL
,

164 
NULL
,

166 
NULL
,

167 
NULL
,

169 
ngx_hâp_u£rid_¸óã_c⁄f
,

170 
ngx_hâp_u£rid_mîge_c⁄f


174 
ngx_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_hâp_u£rid_fûãr_moduÀ_˘x
,

177 
ngx_hâp_u£rid_comm™ds
,

178 
NGX_HTTP_MODULE
,

179 
NULL
,

180 
NULL
,

181 
ngx_hâp_u£rid_öô_w‹kî
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


190 
ngx_°r_t
 
	gngx_hâp_u£rid_gŸ
 = 
ngx_°rög
("uid_got");

191 
ngx_°r_t
 
	gngx_hâp_u£rid_£t
 = 
ngx_°rög
("uid_set");

192 
ngx_°r_t
 
	gngx_hâp_u£rid_ª£t
 = 
ngx_°rög
("uid_reset");

193 
ngx_uöt_t
 
	gngx_hâp_u£rid_ª£t_ödex
;

196 
ngx_öt_t


197 
	$ngx_hâp_u£rid_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

199 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

200 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

202 i‡(
r
 !r->
maö
) {

203  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

206 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

208 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

209  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

212 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
, 
c⁄f
);

214 i‡(
˘x
 =
NULL
) {

215  
NGX_ERROR
;

218 i‡(
	`ngx_hâp_u£rid_£t_uid
(
r
, 
˘x
, 
c⁄f
Ë=
NGX_OK
) {

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222  
NGX_ERROR
;

223 
	}
}

226 
ngx_öt_t


227 
	$ngx_hâp_u£rid_gŸ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

228 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

230 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

231 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

233 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

235 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_OFF
) {

236 
v
->
nŸ_found
 = 1;

237  
NGX_OK
;

240 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

242 i‡(
˘x
 =
NULL
) {

243  
NGX_ERROR
;

246 i‡(
˘x
->
uid_gŸ
[3] != 0) {

247  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
);

250 
v
->
nŸ_found
 = 1;

252  
NGX_OK
;

253 
	}
}

256 
ngx_öt_t


257 
	$ngx_hâp_u£rid_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

258 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

260 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

261 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

263 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

265 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

266 
v
->
nŸ_found
 = 1;

267  
NGX_OK
;

270 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

272 i‡(
˘x
 =
NULL
) {

273  
NGX_ERROR
;

276 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
->
maö
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

277  
NGX_ERROR
;

280 i‡(
˘x
->
uid_£t
[3] == 0) {

281 
v
->
nŸ_found
 = 1;

282  
NGX_OK
;

285  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_£t
);

286 
	}
}

289 
ngx_hâp_u£rid_˘x_t
 *

290 
	$ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

292 
ngx_öt_t
 
n
;

293 
ngx_°r_t
 
§c
, 
d°
;

294 
ngx_èbÀ_ñt_t
 **
cookõs
;

295 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

297 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

299 i‡(
˘x
) {

300  
˘x
;

303 i‡(
˘x
 =
NULL
) {

304 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_u£rid_˘x_t
));

305 i‡(
˘x
 =
NULL
) {

306  
NULL
;

309 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

312 
n
 = 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
c⁄f
->
«me
,

313 &
˘x
->
cookõ
);

314 i‡(
n
 =
NGX_DECLINED
) {

315  
˘x
;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "uid cookõ: \"%V\"", &
˘x
->
cookõ
);

321 i‡(
˘x
->
cookõ
.
Àn
 < 22) {

322 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

323 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

325 &
cookõs
[
n
]->
vÆue
);

326  
˘x
;

329 
§c
 = 
˘x
->
cookõ
;

338 
§c
.
Àn
 = 22;

340 
d°
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_gŸ
;

342 i‡(
	`ngx_decode_ba£64
(&
d°
, &
§c
Ë=
NGX_ERROR
) {

343 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

344 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

346 &
cookõs
[
n
]->
vÆue
);

347  
˘x
;

350 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

352 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

353 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

355  
˘x
;

356 
	}
}

359 
ngx_öt_t


360 
	$ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

361 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

363 
u_ch¨
 *
cookõ
, *
p
;

364 
size_t
 
Àn
;

365 
ngx_°r_t
 
§c
, 
d°
;

366 
ngx_èbÀ_ñt_t
 *
£t_cookõ
, *
p3p
;

368 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

369  
NGX_ERROR
;

372 i‡(
˘x
->
uid_£t
[3] == 0) {

373  
NGX_OK
;

376 
Àn
 = 
c⁄f
->
«me
.À¿+ 1 + 
	`ngx_ba£64_ícoded_Àngth
(16Ë+ c⁄f->
∑th
.len;

378 i‡(
c⁄f
->
expúes
) {

379 
Àn
 +(
expúes
) - 1 + 2;

382 i‡(
c⁄f
->
domaö
.
Àn
) {

383 
Àn
 +
c⁄f
->
domaö
.len;

386 
cookõ
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

387 i‡(
cookõ
 =
NULL
) {

388  
NGX_ERROR
;

391 
p
 = 
	`ngx_c›y
(
cookõ
, 
c⁄f
->
«me
.
d©a
, c⁄f->«me.
Àn
);

392 *
p
++ = '=';

394 i‡(
˘x
->
uid_gŸ
[3] =0 || ctx->
ª£t
) {

395 
§c
.
Àn
 = 16;

396 
§c
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_£t
;

397 
d°
.
d©a
 = 
p
;

399 
	`ngx_ícode_ba£64
(&
d°
, &
§c
);

401 
p
 +
d°
.
Àn
;

403 i‡(
c⁄f
->
m¨k
) {

404 *(
p
 - 2Ë
c⁄f
->
m¨k
;

408 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
cookõ
.
d©a
, 22);

409 *
p
++ = 
c⁄f
->
m¨k
;

410 *
p
++ = '=';

413 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_USERID_MAX_EXPIRES
) {

414 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (expires) - 1);

416 } i‡(
c⁄f
->
expúes
) {

417 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (";Éxpires=") - 1);

418 
p
 = 
	`ngx_hâp_cookõ_time
’, 
	`ngx_time
(Ë+ 
c⁄f
->
expúes
);

421 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
domaö
.
d©a
, c⁄f->domaö.
Àn
);

423 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
∑th
.
d©a
, c⁄f->∑th.
Àn
);

425 
£t_cookõ
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

426 i‡(
£t_cookõ
 =
NULL
) {

427  
NGX_ERROR
;

430 
£t_cookõ
->
hash
 = 1;

431 
	`ngx_°r_£t
(&
£t_cookõ
->
key
, "Set-Cookie");

432 
£t_cookõ
->
vÆue
.
Àn
 = 
p
 - 
cookõ
;

433 
£t_cookõ
->
vÆue
.
d©a
 = 
cookõ
;

435 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

436 "uid cookõ: \"%V\"", &
£t_cookõ
->
vÆue
);

438 i‡(
c⁄f
->
p3p
.
Àn
 == 0) {

439  
NGX_OK
;

442 
p3p
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

443 i‡(
p3p
 =
NULL
) {

444  
NGX_ERROR
;

447 
p3p
->
hash
 = 1;

448 
	`ngx_°r_£t
(&
p3p
->
key
, "P3P");

449 
p3p
->
vÆue
 = 
c⁄f
->p3p;

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

457 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

459 
ngx_c⁄√˘i⁄_t
 *
c
;

460 
sockaddr_ö
 *
sö
;

461 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

462 #i‡(
NGX_HAVE_INET6
)

463 
u_ch¨
 *
p
;

464 
sockaddr_ö6
 *
sö6
;

467 i‡(
˘x
->
uid_£t
[3] != 0) {

468  
NGX_OK
;

471 i‡(
˘x
->
uid_gŸ
[3] != 0) {

473 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ngx_hâp_u£rid_ª£t_ödex
);

475 i‡(
vv
->
Àn
 =0 || (vv->À¿=1 && vv->
d©a
[0] == '0')) {

477 i‡(
c⁄f
->
m¨k
 == '\0'

478 || (
˘x
->
cookõ
.
Àn
 > 23

479 && 
˘x
->
cookõ
.
d©a
[22] =
c⁄f
->
m¨k


480 && 
˘x
->
cookõ
.
d©a
[23] == '='))

482  
NGX_OK
;

485 
˘x
->
uid_£t
[0] = ctx->
uid_gŸ
[0];

486 
˘x
->
uid_£t
[1] = ctx->
uid_gŸ
[1];

487 
˘x
->
uid_£t
[2] = ctx->
uid_gŸ
[2];

488 
˘x
->
uid_£t
[3] = ctx->
uid_gŸ
[3];

490  
NGX_OK
;

493 
˘x
->
ª£t
 = 1;

495 i‡(
vv
->
Àn
 =3 && 
	`ngx_°∫cmp
(vv->
d©a
, "log", 3) == 0) {

496 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

499 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

509 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_V1
) {

510 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

511 
˘x
->
uid_£t
[0] = 0;

513 
˘x
->
uid_£t
[0] = 
c⁄f
->
£rvi˚
;

515 
˘x
->
uid_£t
[1] = (
uöt32_t
Ë
	`ngx_time
();

516 
˘x
->
uid_£t
[2] = 
°¨t_vÆue
;

517 
˘x
->
uid_£t
[3] = 
£quí˚r_v1
;

518 
£quí˚r_v1
 += 0x100;

521 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

523 
c
 = 
r
->
c⁄√˘i⁄
;

525 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

526  
NGX_ERROR
;

529 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

531 #i‡(
NGX_HAVE_INET6
)

532 
AF_INET6
:

533 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

535 
p
 = (
u_ch¨
 *Ë&
˘x
->
uid_£t
[0];

537 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[12];

538 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[13];

539 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[14];

540 *
p
 = 
sö6
->
sö6_addr
.
s6_addr
[15];

545 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

546 
˘x
->
uid_£t
[0] = 
sö
->
sö_addr
.
s_addr
;

551 
˘x
->
uid_£t
[0] = 
	`ht⁄l
(
c⁄f
->
£rvi˚
);

554 
˘x
->
uid_£t
[1] = 
	`ht⁄l
((
uöt32_t
Ë
	`ngx_time
());

555 
˘x
->
uid_£t
[2] = 
	`ht⁄l
(
°¨t_vÆue
);

556 
˘x
->
uid_£t
[3] = 
	`ht⁄l
(
£quí˚r_v2
);

557 
£quí˚r_v2
 += 0x100;

558 i‡(
£quí˚r_v2
 < 0x03030302) {

559 
£quí˚r_v2
 = 0x03030302;

563  
NGX_OK
;

564 
	}
}

567 
ngx_öt_t


568 
	$ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

569 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
)

571 
v
->
Àn
 = 
«me
->len + ("=00001111222233334444555566667777") - 1;

572 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

573 i‡(
v
->
d©a
 =
NULL
) {

574  
NGX_ERROR
;

577 
v
->
vÆid
 = 1;

578 
v
->
no_ˇchóbÀ
 = 0;

579 
v
->
nŸ_found
 = 0;

581 
	`ngx_•rötf
(
v
->
d©a
, "%V=%08XD%08XD%08XD%08XD",

582 
«me
, 
uid
[0], uid[1], uid[2], uid[3]);

584  
NGX_OK
;

585 
	}
}

588 
ngx_öt_t


589 
	$ngx_hâp_u£rid_ª£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

590 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

592 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

594  
NGX_OK
;

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

601 
ngx_öt_t
 
n
;

602 
ngx_hâp_v¨übÀ_t
 *
v¨
;

604 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_gŸ
, 0);

605 i‡(
v¨
 =
NULL
) {

606  
NGX_ERROR
;

609 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_gŸ_v¨übÀ
;

611 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_£t
, 0);

612 i‡(
v¨
 =
NULL
) {

613  
NGX_ERROR
;

616 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_£t_v¨übÀ
;

618 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_ª£t
,

619 
NGX_HTTP_VAR_CHANGEABLE
);

620 i‡(
v¨
 =
NULL
) {

621  
NGX_ERROR
;

624 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_ª£t_v¨übÀ
;

626 
n
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_u£rid_ª£t
);

627 i‡(
n
 =
NGX_ERROR
) {

628  
NGX_ERROR
;

631 
ngx_hâp_u£rid_ª£t_ödex
 = 
n
;

633  
NGX_OK
;

634 
	}
}

638 
	$ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

640 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

642 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_u£rid_c⁄f_t
));

643 i‡(
c⁄f
 =
NULL
) {

644  
NULL
;

656 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

657 
c⁄f
->
£rvi˚
 = 
NGX_CONF_UNSET
;

658 
c⁄f
->
expúes
 = 
NGX_CONF_UNSET
;

659 
c⁄f
->
m¨k
 = (
u_ch¨
) '\xFF';

661  
c⁄f
;

662 
	}
}

666 
	$ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

668 
ngx_hâp_u£rid_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

669 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
 = 
chûd
;

671 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

672 
NGX_HTTP_USERID_OFF
);

674 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
«me
, 
¥ev
->name, "uid");

675 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
domaö
, 
¥ev
->domain, "");

676 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, ";Öath=/");

677 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
p3p
, 
¥ev
->p3p, "");

679 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvi˚
, 
¥ev
->£rvi˚, 
NGX_CONF_UNSET
);

680 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
expúes
, 
¥ev
->expires, 0);

682 i‡(
c⁄f
->
m¨k
 =(
u_ch¨
) '\xFF') {

683 i‡(
¥ev
->
m¨k
 =(
u_ch¨
) '\xFF') {

684 
c⁄f
->
m¨k
 = '\0';

686 
c⁄f
->
m¨k
 = 
¥ev
->mark;

690  
NGX_CONF_OK
;

691 
	}
}

694 
ngx_öt_t


695 
	$ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
)

697 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

698 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_u£rid_fûãr
;

700  
NGX_OK
;

701 
	}
}

705 
	$ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

707 
ngx_°r_t
 *
domaö
 = 
d©a
;

709 
u_ch¨
 *
p
, *
√w
;

711 i‡(
	`ngx_°rcmp
(
domaö
->
d©a
, "none") == 0) {

712 
	`ngx_°r_£t
(
domaö
, "");

713  
NGX_CONF_OK
;

716 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, ("; domaö="Ë- 1 + 
domaö
->
Àn
);

717 i‡(
√w
 =
NULL
) {

718  
NGX_CONF_ERROR
;

721 
p
 = 
	`ngx_˝ymem
(
√w
, "; domain=", ("; domain=") - 1);

722 
	`ngx_mem˝y
(
p
, 
domaö
->
d©a
, domaö->
Àn
);

724 
domaö
->
Àn
 += ("; domain=") - 1;

725 
domaö
->
d©a
 = 
√w
;

727  
NGX_CONF_OK
;

728 
	}
}

732 
	$ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

734 
ngx_°r_t
 *
∑th
 = 
d©a
;

736 
u_ch¨
 *
p
, *
√w
;

738 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, (";Ö©h="Ë- 1 + 
∑th
->
Àn
);

739 i‡(
√w
 =
NULL
) {

740  
NGX_CONF_ERROR
;

743 
p
 = 
	`ngx_˝ymem
(
√w
, ";Öath=", (";Öath=") - 1);

744 
	`ngx_mem˝y
(
p
, 
∑th
->
d©a
,Ö©h->
Àn
);

746 
∑th
->
Àn
 += (";Öath=") - 1;

747 
∑th
->
d©a
 = 
√w
;

749  
NGX_CONF_OK
;

750 
	}
}

754 
	$ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

756 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

758 
ngx_°r_t
 *
vÆue
;

760 i‡(
ucf
->
expúes
 !
NGX_CONF_UNSET
) {

764 
vÆue
 = 
cf
->
¨gs
->
ñts
;

766 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

767 
ucf
->
expúes
 = 
NGX_HTTP_USERID_MAX_EXPIRES
;

768  
NGX_CONF_OK
;

771 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

772 
ucf
->
expúes
 = 0;

773  
NGX_CONF_OK
;

776 
ucf
->
expúes
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

777 i‡(
ucf
->
expúes
 =
NGX_ERROR
) {

781 i‡(
ucf
->
expúes
 =
NGX_PARSE_LARGE_TIME
) {

785  
NGX_CONF_OK
;

786 
	}
}

790 
	$ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

792 
ngx_°r_t
 *
p3p
 = 
d©a
;

794 i‡(
	`ngx_°rcmp
(
p3p
->
d©a
, "none") == 0) {

795 
	`ngx_°r_£t
(
p3p
, "");

798  
NGX_CONF_OK
;

799 
	}
}

803 
	$ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

805 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

807 
ngx_°r_t
 *
vÆue
;

809 i‡(
ucf
->
m¨k
 !(
u_ch¨
) '\xFF') {

813 
vÆue
 = 
cf
->
¨gs
->
ñts
;

815 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

816 
ucf
->
m¨k
 = '\0';

817  
NGX_CONF_OK
;

820 i‡(
vÆue
[1].
Àn
 != 1

821 || !((
vÆue
[1].
d©a
[0] >= '0' && value[1].data[0] <= '9')

822 || (
vÆue
[1].
d©a
[0] >= 'A' && value[1].data[0] <= 'Z')

823 || (
vÆue
[1].
d©a
[0] >= 'a' && value[1].data[0] <= 'z')

824 || 
vÆue
[1].
d©a
[0] == '='))

829 
ucf
->
m¨k
 = 
vÆue
[1].
d©a
[0];

831  
NGX_CONF_OK
;

832 
	}
}

835 
ngx_öt_t


836 
	$ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

838 
timevÆ
 
ç
;

840 
	`ngx_gëtimeofday
(&
ç
);

843 
°¨t_vÆue
 = ((
ç
.
tv_u£c
 / 20Ë<< 16Ë| 
ngx_pid
;

845  
NGX_OK
;

846 
	}
}

	@src/http/modules/ngx_http_uwsgi_module.c

10 
	~<ngx_c⁄fig.h
>

11 
	~<ngx_c‹e.h
>

12 
	~<ngx_hâp.h
>

16 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

18 
ngx_¨øy_t
 *
	mÊushes
;

19 
ngx_¨øy_t
 *
	m∑øms_Àn
;

20 
ngx_¨øy_t
 *
	m∑øms
;

21 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

23 
ngx_hash_t
 
	mhódîs_hash
;

24 
ngx_uöt_t
 
	mhódî_∑øms
;

26 
ngx_¨øy_t
 *
	muwsgi_Àngths
;

27 
ngx_¨øy_t
 *
	muwsgi_vÆues
;

29 #i‡(
NGX_HTTP_CACHE
)

30 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

33 
ngx_°r_t
 
	muwsgi_°rög
;

35 
ngx_uöt_t
 
	mmodifõr1
;

36 
ngx_uöt_t
 
	mmodifõr2
;

37 } 
	tngx_hâp_uwsgi_loc_c⁄f_t
;

40 
ngx_öt_t
 
ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

42 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

43 
ngx_öt_t
 
ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

47 
ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

48 
ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_öt_t
 
rc
);

51 *
ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

52 *
ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

53 *
chûd
);

54 
ngx_öt_t
 
ngx_hâp_uwsgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

55 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_uwsgi_loc_c⁄f_à*
¥ev
);

57 *
ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

59 *
ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

60 *
c⁄f
);

62 #i‡(
NGX_HTTP_CACHE
)

63 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

64 *
ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

65 *
c⁄f
);

66 *
ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

67 *
c⁄f
);

71 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_uwsgi_modifõr_bounds
 = {

72 
ngx_c⁄f_check_num_bounds
, 0, 255

76 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_√xt_up°ªam_masks
[] = {

77 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

78 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

79 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

80 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

81 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

82 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

83 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

84 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

85 { 
ngx_nuŒ_°rög
, 0 }

89 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
;

92 
ngx_comm™d_t
 
	gngx_hâp_uwsgi_comm™ds
[] = {

94 { 
ngx_°rög
("uwsgi_pass"),

95 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

96 
ngx_hâp_uwsgi_∑ss
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

99 
NULL
 },

101 { 
ngx_°rög
("uwsgi_modifier1"),

102 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

103 
ngx_c⁄f_£t_num_¶Ÿ
,

104 
NGX_HTTP_LOC_CONF_OFFSET
,

105 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr1
),

106 &
ngx_hâp_uwsgi_modifõr_bounds
 },

108 { 
ngx_°rög
("uwsgi_modifier2"),

109 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

110 
ngx_c⁄f_£t_num_¶Ÿ
,

111 
NGX_HTTP_LOC_CONF_OFFSET
,

112 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr2
),

113 &
ngx_hâp_uwsgi_modifõr_bounds
 },

115 { 
ngx_°rög
("uwsgi_store"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

117 
ngx_hâp_uwsgi_°‹e
,

118 
NGX_HTTP_LOC_CONF_OFFSET
,

120 
NULL
 },

122 { 
ngx_°rög
("uwsgi_store_access"),

123 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

124 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

125 
NGX_HTTP_LOC_CONF_OFFSET
,

126 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

127 
NULL
 },

129 { 
ngx_°rög
("uwsgi_buffering"),

130 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

131 
ngx_c⁄f_£t_Êag_¶Ÿ
,

132 
NGX_HTTP_LOC_CONF_OFFSET
,

133 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

134 
NULL
 },

136 { 
ngx_°rög
("uwsgi_ignore_client_abort"),

137 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

138 
ngx_c⁄f_£t_Êag_¶Ÿ
,

139 
NGX_HTTP_LOC_CONF_OFFSET
,

140 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

141 
NULL
 },

143 { 
ngx_°rög
("uwsgi_bind"),

144 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

145 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

146 
NGX_HTTP_LOC_CONF_OFFSET
,

147 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

148 
NULL
 },

150 { 
ngx_°rög
("uwsgi_connect_timeout"),

151 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

152 
ngx_c⁄f_£t_m£c_¶Ÿ
,

153 
NGX_HTTP_LOC_CONF_OFFSET
,

154 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

155 
NULL
 },

157 { 
ngx_°rög
("uwsgi_send_timeout"),

158 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

159 
ngx_c⁄f_£t_m£c_¶Ÿ
,

160 
NGX_HTTP_LOC_CONF_OFFSET
,

161 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

162 
NULL
 },

164 { 
ngx_°rög
("uwsgi_buffer_size"),

165 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

166 
ngx_c⁄f_£t_size_¶Ÿ
,

167 
NGX_HTTP_LOC_CONF_OFFSET
,

168 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

169 
NULL
 },

171 { 
ngx_°rög
("uwsgi_pass_request_headers"),

172 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

173 
ngx_c⁄f_£t_Êag_¶Ÿ
,

174 
NGX_HTTP_LOC_CONF_OFFSET
,

175 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

176 
NULL
 },

178 { 
ngx_°rög
("uwsgi_pass_request_body"),

179 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

180 
ngx_c⁄f_£t_Êag_¶Ÿ
,

181 
NGX_HTTP_LOC_CONF_OFFSET
,

182 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

183 
NULL
 },

185 { 
ngx_°rög
("uwsgi_intercept_errors"),

186 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

187 
ngx_c⁄f_£t_Êag_¶Ÿ
,

188 
NGX_HTTP_LOC_CONF_OFFSET
,

189 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

190 
NULL
 },

192 { 
ngx_°rög
("uwsgi_read_timeout"),

193 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

194 
ngx_c⁄f_£t_m£c_¶Ÿ
,

195 
NGX_HTTP_LOC_CONF_OFFSET
,

196 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

197 
NULL
 },

199 { 
ngx_°rög
("uwsgi_buffers"),

200 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

201 
ngx_c⁄f_£t_bufs_¶Ÿ
,

202 
NGX_HTTP_LOC_CONF_OFFSET
,

203 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

204 
NULL
 },

206 { 
ngx_°rög
("uwsgi_busy_buffers_size"),

207 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

208 
ngx_c⁄f_£t_size_¶Ÿ
,

209 
NGX_HTTP_LOC_CONF_OFFSET
,

210 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

211 
NULL
 },

213 #i‡(
NGX_HTTP_CACHE
)

215 { 
ngx_°rög
("uwsgi_cache"),

216 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

217 
ngx_hâp_uwsgi_ˇche
,

218 
NGX_HTTP_LOC_CONF_OFFSET
,

220 
NULL
 },

222 { 
ngx_°rög
("uwsgi_cache_key"),

223 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

224 
ngx_hâp_uwsgi_ˇche_key
,

225 
NGX_HTTP_LOC_CONF_OFFSET
,

227 
NULL
 },

229 { 
ngx_°rög
("uwsgi_cache_path"),

230 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

231 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

234 &
ngx_hâp_uwsgi_moduÀ
 },

236 { 
ngx_°rög
("uwsgi_cache_bypass"),

237 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

238 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

239 
NGX_HTTP_LOC_CONF_OFFSET
,

240 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

241 
NULL
 },

243 { 
ngx_°rög
("uwsgi_no_cache"),

244 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

245 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

246 
NGX_HTTP_LOC_CONF_OFFSET
,

247 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

248 
NULL
 },

250 { 
ngx_°rög
("uwsgi_cache_valid"),

251 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

252 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

253 
NGX_HTTP_LOC_CONF_OFFSET
,

254 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

255 
NULL
 },

257 { 
ngx_°rög
("uwsgi_cache_min_uses"),

258 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

259 
ngx_c⁄f_£t_num_¶Ÿ
,

260 
NGX_HTTP_LOC_CONF_OFFSET
,

261 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

262 
NULL
 },

264 { 
ngx_°rög
("uwsgi_cache_use_stale"),

265 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

266 
ngx_c⁄f_£t_bômask_¶Ÿ
,

267 
NGX_HTTP_LOC_CONF_OFFSET
,

268 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

269 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

271 { 
ngx_°rög
("uwsgi_cache_methods"),

272 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

273 
ngx_c⁄f_£t_bômask_¶Ÿ
,

274 
NGX_HTTP_LOC_CONF_OFFSET
,

275 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

276 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

280 { 
ngx_°rög
("uwsgi_temp_path"),

281 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

282 
ngx_c⁄f_£t_∑th_¶Ÿ
,

283 
NGX_HTTP_LOC_CONF_OFFSET
,

284 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

285 
NULL
 },

287 { 
ngx_°rög
("uwsgi_max_temp_file_size"),

288 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

289 
ngx_c⁄f_£t_size_¶Ÿ
,

290 
NGX_HTTP_LOC_CONF_OFFSET
,

291 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

292 
NULL
 },

294 { 
ngx_°rög
("uwsgi_temp_file_write_size"),

295 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

296 
ngx_c⁄f_£t_size_¶Ÿ
,

297 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

299 
NULL
 },

301 { 
ngx_°rög
("uwsgi_next_upstream"),

302 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

303 
ngx_c⁄f_£t_bômask_¶Ÿ
,

304 
NGX_HTTP_LOC_CONF_OFFSET
,

305 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

306 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

308 { 
ngx_°rög
("uwsgi_param"),

309 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

310 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

311 
NGX_HTTP_LOC_CONF_OFFSET
,

312 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
∑øms_sour˚
),

313 
NULL
 },

315 { 
ngx_°rög
("uwsgi_string"),

316 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

317 
ngx_c⁄f_£t_°r_¶Ÿ
,

318 
NGX_HTTP_LOC_CONF_OFFSET
,

319 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
uwsgi_°rög
),

320 
NULL
 },

322 { 
ngx_°rög
("uwsgi_pass_header"),

323 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

324 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

325 
NGX_HTTP_LOC_CONF_OFFSET
,

326 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

327 
NULL
 },

329 { 
ngx_°rög
("uwsgi_hide_header"),

330 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

331 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

332 
NGX_HTTP_LOC_CONF_OFFSET
,

333 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

334 
NULL
 },

336 { 
ngx_°rög
("uwsgi_ignore_headers"),

337 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

338 
ngx_c⁄f_£t_bômask_¶Ÿ
,

339 
NGX_HTTP_LOC_CONF_OFFSET
,

340 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

341 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

343 
ngx_nuŒ_comm™d


347 
ngx_hâp_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ_˘x
 = {

348 
NULL
,

349 
NULL
,

351 
NULL
,

352 
NULL
,

354 
NULL
,

355 
NULL
,

357 
ngx_hâp_uwsgi_¸óã_loc_c⁄f
,

358 
ngx_hâp_uwsgi_mîge_loc_c⁄f


362 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
 = {

363 
NGX_MODULE_V1
,

364 &
ngx_hâp_uwsgi_moduÀ_˘x
,

365 
ngx_hâp_uwsgi_comm™ds
,

366 
NGX_HTTP_MODULE
,

367 
NULL
,

368 
NULL
,

369 
NULL
,

370 
NULL
,

371 
NULL
,

372 
NULL
,

373 
NULL
,

374 
NGX_MODULE_V1_PADDING


378 
ngx_°r_t
 
	gngx_hâp_uwsgi_hide_hódîs
[] = {

379 
ngx_°rög
("X-Accel-Expires"),

380 
ngx_°rög
("X-Accel-Redirect"),

381 
ngx_°rög
("X-Accel-Limit-Rate"),

382 
ngx_°rög
("X-Accel-Buffering"),

383 
ngx_°rög
("X-Accel-Charset"),

384 
ngx_nuŒ_°rög


388 #i‡(
NGX_HTTP_CACHE
)

390 
ngx_keyvÆ_t
 
	gngx_hâp_uwsgi_ˇche_hódîs
[] = {

391 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

392 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

393 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

394 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

395 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

396 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

397 { 
ngx_nuŒ_°rög
,Çgx_null_string }

403 
ngx_∑th_öô_t
 
	gngx_hâp_uwsgi_ãmp_∑th
 = {

404 
ngx_°rög
(
NGX_HTTP_UWSGI_TEMP_PATH
), { 1, 2, 0 }

408 
ngx_öt_t


409 
	$ngx_hâp_uwsgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

411 
ngx_öt_t
 
rc
;

412 
ngx_hâp_°©us_t
 *
°©us
;

413 
ngx_hâp_up°ªam_t
 *
u
;

414 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

416 i‡(
r
->
subªque°_ö_mem‹y
) {

417 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

420  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

423 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

424  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

427 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

428 i‡(
°©us
 =
NULL
) {

429  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

432 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_uwsgi_moduÀ
);

434 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

436 i‡(
uwcf
->
uwsgi_Àngths
) {

437 i‡(
	`ngx_hâp_uwsgi_evÆ
(
r
, 
uwcf
Ë!
NGX_OK
) {

438  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

442 
u
 = 
r
->
up°ªam
;

444 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

445 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_uwsgi_moduÀ
;

447 
u
->
c⁄f
 = &
uwcf
->
up°ªam
;

449 #i‡(
NGX_HTTP_CACHE
)

450 
u
->
¸óã_key
 = 
ngx_hâp_uwsgi_¸óã_key
;

452 
u
->
¸óã_ªque°
 = 
ngx_hâp_uwsgi_¸óã_ªque°
;

453 
u
->
ªöô_ªque°
 = 
ngx_hâp_uwsgi_ªöô_ªque°
;

454 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

455 
u
->
ab‹t_ªque°
 = 
ngx_hâp_uwsgi_ab‹t_ªque°
;

456 
u
->
föÆize_ªque°
 = 
ngx_hâp_uwsgi_föÆize_ªque°
;

458 
u
->
buf„rög
 = 
uwcf
->
up°ªam
.buffering;

460 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

461 i‡(
u
->
pùe
 =
NULL
) {

462  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

465 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

466 
u
->
pùe
->
öput_˘x
 = 
r
;

468 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

470 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

471  
rc
;

474  
NGX_DONE
;

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 * 
uwcf
)

481 
ngx_uæ_t
 
uæ
;

482 
ngx_hâp_up°ªam_t
 *
u
;

484 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

486 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
uwcf
->
uwsgi_Àngths
->
ñts
, 0,

487 
uwcf
->
uwsgi_vÆues
->
ñts
)

488 =
NULL
)

490  
NGX_ERROR
;

493 
uæ
.
no_ªsﬁve
 = 1;

495 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

496 i‡(
uæ
.
îr
) {

497 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

501  
NGX_ERROR
;

504 
u
 = 
r
->
up°ªam
;

506 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

507 i‡(
u
->
ªsﬁved
 =
NULL
) {

508  
NGX_ERROR
;

511 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

512 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

513 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

514 
u
->
ªsﬁved
->
«ddrs
 = 1;

515 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

518 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

519 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

520 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

523  
NGX_OK
;

524 
	}
}

527 #i‡(
NGX_HTTP_CACHE
)

529 
ngx_öt_t


530 
	$ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

532 
ngx_°r_t
 *
key
;

533 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

535 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

536 i‡(
key
 =
NULL
) {

537  
NGX_ERROR
;

540 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

542 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
uwcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

543  
NGX_ERROR
;

546  
NGX_OK
;

547 
	}
}

552 
ngx_öt_t


553 
	$ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

555 
u_ch¨
 
ch
, *
lowˇ£_key
;

556 
size_t
 
key_Àn
, 
vÆ_Àn
, 
Àn
, 
Æloˇãd
;

557 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
hódî_∑øms
;

558 
ngx_buf_t
 *
b
;

559 
ngx_chaö_t
 *
˛
, *
body
;

560 
ngx_li°_∑π_t
 *
∑π
;

561 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

562 
ngx_hâp_s¸ùt_code_±
 
code
;

563 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

564 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

565 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

567 
Àn
 = 0;

568 
hódî_∑øms
 = 0;

569 
ign‹ed
 = 
NULL
;

571 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

573 i‡(
uwcf
->
∑øms_Àn
) {

574 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

576 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
uwcf
->
Êushes
);

577 
À
.
Êushed
 = 1;

579 
À
.
ù
 = 
uwcf
->
∑øms_Àn
->
ñts
;

580 
À
.
ªque°
 = 
r
;

582 *(
uöçå_t
 *Ë
À
.
ù
) {

584 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

585 
key_Àn
 = 
	`lcode
(&
À
);

587 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
 (&le)) {

588 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

590 
À
.
ù
 +(
uöçå_t
);

592 
Àn
 +2 + 
key_Àn
 + 2 + 
vÆ_Àn
;

596 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

598 
Æloˇãd
 = 0;

599 
lowˇ£_key
 = 
NULL
;

601 i‡(
uwcf
->
hódî_∑øms
) {

602 
n
 = 0;

603 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

605 
∑π
) {

606 
n
 +
∑π
->
√…s
;

607 
∑π
 =Ö¨t->
√xt
;

610 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

611 i‡(
ign‹ed
 =
NULL
) {

612  
NGX_ERROR
;

616 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

617 
hódî
 = 
∑π
->
ñts
;

619 
i
 = 0; ; i++) {

621 i‡(
i
 >
∑π
->
√…s
) {

622 i‡(
∑π
->
√xt
 =
NULL
) {

626 
∑π
 =Ö¨t->
√xt
;

627 
hódî
 = 
∑π
->
ñts
;

628 
i
 = 0;

631 i‡(
uwcf
->
hódî_∑øms
) {

632 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

633 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

634 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

635 i‡(
lowˇ£_key
 =
NULL
) {

636  
NGX_ERROR
;

640 
hash
 = 0;

642 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

643 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

645 i‡(
ch
 >= 'A' && ch <= 'Z') {

646 
ch
 |= 0x20;

648 } i‡(
ch
 == '-') {

649 
ch
 = '_';

652 
hash
 = 
	`ngx_hash
(hash, 
ch
);

653 
lowˇ£_key
[
n
] = 
ch
;

656 i‡(
	`ngx_hash_föd
(&
uwcf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

657 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

662 
Àn
 +2 + ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len

663 + 2 + 
hódî
[
i
].
vÆue
.
Àn
;

667 
Àn
 +
uwcf
->
uwsgi_°rög
.len;

671 i‡(
Àn
 > 0 &&Üen < 2) {

672 
	`ngx_log_îr‹
 (
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

673 "uwsgòªque° i†toÿlôée: %uz", 
Àn
);

674  
NGX_ERROR
;

678 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
 + 4);

679 i‡(
b
 =
NULL
) {

680  
NGX_ERROR
;

683 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

684 i‡(
˛
 =
NULL
) {

685  
NGX_ERROR
;

688 
˛
->
buf
 = 
b
;

690 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr1
;

691 *
b
->
œ°
++ = (
u_ch¨
Ë(
Àn
 & 0xff);

692 *
b
->
œ°
++ = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

693 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr2
;

695 i‡(
uwcf
->
∑øms_Àn
) {

696 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

698 
e
.
ù
 = 
uwcf
->
∑øms
->
ñts
;

699 
e
.
pos
 = 
b
->
œ°
;

700 
e
.
ªque°
 = 
r
;

701 
e
.
Êushed
 = 1;

703 
À
.
ù
 = 
uwcf
->
∑øms_Àn
->
ñts
;

705 *(
uöçå_t
 *Ë
À
.
ù
) {

707 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

708 
key_Àn
 = (
u_ch¨
Ë
	`lcode
 (&
À
);

710 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

711 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

713 
À
.
ù
 +(
uöçå_t
);

715 *
e
.
pos
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

716 *
e
.
pos
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

718 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

719 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

721 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

722 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

724 *(
uöçå_t
 *Ë
e
.
ù
) {

725 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

726 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

729 
e
.
ù
 +(
uöçå_t
);

731 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

733 
key_Àn
, 
e
.
pos
 - (key_À¿+ 2 + 
vÆ_Àn
),

734 
vÆ_Àn
, 
e
.
pos
 - val_len);

737 
b
->
œ°
 = 
e
.
pos
;

740 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

742 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

743 
hódî
 = 
∑π
->
ñts
;

745 
i
 = 0; ; i++) {

747 i‡(
i
 >
∑π
->
√…s
) {

748 i‡(
∑π
->
√xt
 =
NULL
) {

752 
∑π
 =Ö¨t->
√xt
;

753 
hódî
 = 
∑π
->
ñts
;

754 
i
 = 0;

757 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

758 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

759 
√xt
;

763 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

764 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

765 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

767 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

768 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

769 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

771 i‡(
ch
 >= 'a' && ch <= 'z') {

772 
ch
 &= ~0x20;

774 } i‡(
ch
 == '-') {

775 
ch
 = '_';

778 *
b
->
œ°
++ = 
ch
;

781 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

782 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

783 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

784 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

786 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

788 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 2 + 
vÆ_Àn
),

789 
vÆ_Àn
, 
b
->
œ°
 - val_len);

790 
√xt
:

796 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
uwcf
->
uwsgi_°rög
.
d©a
,

797 
uwcf
->
uwsgi_°rög
.
Àn
);

799 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_body
) {

800 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

801 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

803 
body
) {

804 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

805 i‡(
b
 =
NULL
) {

806  
NGX_ERROR
;

809 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

811 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

812 i‡(
˛
->
√xt
 =
NULL
) {

813  
NGX_ERROR
;

816 
˛
 = cl->
√xt
;

817 
˛
->
buf
 = 
b
;

819 
body
 = body->
√xt
;

823 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

826 
˛
->
√xt
 = 
NULL
;

828  
NGX_OK
;

829 
	}
}

832 
ngx_öt_t


833 
	$ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

835 
ngx_hâp_°©us_t
 *
°©us
;

837 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

839 i‡(
°©us
 =
NULL
) {

840  
NGX_OK
;

843 
°©us
->
code
 = 0;

844 
°©us
->
cou¡
 = 0;

845 
°©us
->
°¨t
 = 
NULL
;

846 
°©us
->
íd
 = 
NULL
;

848 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

850  
NGX_OK
;

851 
	}
}

854 
ngx_öt_t


855 
	$ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

857 
size_t
 
Àn
;

858 
ngx_öt_t
 
rc
;

859 
ngx_hâp_°©us_t
 *
°©us
;

860 
ngx_hâp_up°ªam_t
 *
u
;

862 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

864 i‡(
°©us
 =
NULL
) {

865  
NGX_ERROR
;

868 
u
 = 
r
->
up°ªam
;

870 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

872 i‡(
rc
 =
NGX_AGAIN
) {

873  
rc
;

876 i‡(
rc
 =
NGX_ERROR
) {

877 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

879 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

881  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

884 i‡(
u
->
°©e
) {

885 
u
->
°©e
->
°©us
 = sètus->
code
;

888 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

890 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

891 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

893 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

894 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

895  
NGX_ERROR
;

898 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

900 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

902 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

904 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

906  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

907 
	}
}

910 
ngx_öt_t


911 
	$ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

913 
ngx_°r_t
 *
°©us_löe
;

914 
ngx_öt_t
 
rc
, 
°©us
;

915 
ngx_èbÀ_ñt_t
 *
h
;

916 
ngx_hâp_up°ªam_t
 *
u
;

917 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

918 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

920 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

924 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

926 i‡(
rc
 =
NGX_OK
) {

930 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

931 i‡(
h
 =
NULL
) {

932  
NGX_ERROR
;

935 
h
->
hash
 = 
r
->
hódî_hash
;

937 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

938 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

940 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

941 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

942 + 
h
->
key
.
Àn
);

943 i‡(
h
->
key
.
d©a
 =
NULL
) {

944  
NGX_ERROR
;

947 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

948 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

950 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

951 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

952 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

953 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

955 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

956 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

959 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

962 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

963 
h
->
lowˇ£_key
, h->
key
.
Àn
);

965 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

966  
NGX_ERROR
;

969 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

970 "hâ∞uwsgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

975 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

979 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

982 i‡(
r
->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_9
) {

983  
NGX_OK
;

986 
u
 = 
r
->
up°ªam
;

988 i‡(
u
->
hódîs_ö
.
°©us
) {

989 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

991 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

992 i‡(
°©us
 =
NGX_ERROR
) {

993 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

995 
°©us_löe
);

996  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

999 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_10
;

1000 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1001 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1003 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1004 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_10
;

1005 
u
->
hódîs_ö
.
°©us_n
 = 302;

1006 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1010 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1013 
u
->
hódîs_ö
.
°©us_n
 = 200;

1014 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1017 i‡(
u
->
°©e
) {

1018 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1021  
NGX_OK
;

1024 i‡(
rc
 =
NGX_AGAIN
) {

1025  
NGX_AGAIN
;

1030 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1033  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1035 
	}
}

1039 
	$ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1041 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1045 
	}
}

1049 
	$ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1051 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1055 
	}
}

1059 
	$ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1061 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
;

1063 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_uwsgi_loc_c⁄f_t
));

1064 i‡(
c⁄f
 =
NULL
) {

1065  
NULL
;

1068 
c⁄f
->
modifõr1
 = 
NGX_CONF_UNSET_UINT
;

1069 
c⁄f
->
modifõr2
 = 
NGX_CONF_UNSET_UINT
;

1071 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1072 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1073 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1074 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1076 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1077 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1078 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1080 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1081 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1083 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1084 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1085 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1087 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1088 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1090 #i‡(
NGX_HTTP_CACHE
)

1091 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1092 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1093 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1094 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1095 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1098 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1099 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1101 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1104 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1106 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1108 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "uwsgi");

1110  
c⁄f
;

1111 
	}
}

1115 
	$ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1117 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1118 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1120 
size_t
 
size
;

1121 
ngx_hash_öô_t
 
hash
;

1122 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1124 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1125 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1127 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1128 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1129 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1133 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1134 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1136 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1137 
¥ev
->
up°ªam
.
buf„rög
, 1);

1139 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1140 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1142 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1143 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1145 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1146 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1148 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1149 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1151 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1152 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1154 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1155 
¥ev
->
up°ªam
.
buf„r_size
,

1156 (
size_t
Ë
ngx_∑gesize
);

1159 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1160 8, 
ngx_∑gesize
);

1162 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1163 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1165  
NGX_CONF_ERROR
;

1169 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1170 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1171 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1175 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1176 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1177 
NGX_CONF_UNSET_SIZE
);

1179 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1180 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1182 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1183 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1186 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1187 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1192  
NGX_CONF_ERROR
;

1195 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1196 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1198 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1202  
NGX_CONF_ERROR
;

1206 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1207 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1208 
NGX_CONF_UNSET_SIZE
);

1210 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1211 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1213 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1214 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1217 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1218 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1223  
NGX_CONF_ERROR
;

1227 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1228 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1229 
NGX_CONF_UNSET_SIZE
);

1231 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1232 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1234 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1235 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1238 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1239 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
) {

1240 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1246  
NGX_CONF_ERROR
;

1250 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1251 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1252 
NGX_CONF_BITMASK_SET
);

1255 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1256 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1257 (
NGX_CONF_BITMASK_SET


1258 |
NGX_HTTP_UPSTREAM_FT_ERROR


1259 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1261 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1262 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1263 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1266 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1267 
¥ev
->
up°ªam
.
ãmp_∑th
,

1268 &
ngx_hâp_uwsgi_ãmp_∑th
)

1269 !
NGX_OK
)

1271  
NGX_CONF_ERROR
;

1274 #i‡(
NGX_HTTP_CACHE
)

1276 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1277 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1279 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1280 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1282 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1284 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1286 &
shm_z⁄e
->
shm
.
«me
);

1288  
NGX_CONF_ERROR
;

1291 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1292 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1294 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1295 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1296 (
NGX_CONF_BITMASK_SET


1297 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1299 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1300 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1301 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1304 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1305 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1308 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1309 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1312 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1314 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1315 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1317 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1318 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1320 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1321 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1323 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1324 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1329 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1330 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1331 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1332 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1334 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1335 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1337 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uwsgi_°rög
, 
¥ev
->uwsgi_string, "");

1339 
hash
.
max_size
 = 512;

1340 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1341 
hash
.
«me
 = "uwsgi_hide_headers_hash";

1343 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1344 &
¥ev
->
up°ªam
, 
ngx_hâp_uwsgi_hide_hódîs
, &
hash
)

1345 !
NGX_OK
)

1347  
NGX_CONF_ERROR
;

1350 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

1351 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1354 i‡(
c⁄f
->
uwsgi_Àngths
 =
NULL
) {

1355 
c⁄f
->
uwsgi_Àngths
 = 
¥ev
->uwsgi_lengths;

1356 
c⁄f
->
uwsgi_vÆues
 = 
¥ev
->uwsgi_values;

1359 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
uwsgi_Àngths
) {

1360 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1361 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

1362 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1366 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr1
, 
¥ev
->modifier1, 0);

1367 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr2
, 
¥ev
->modifier2, 0);

1369 i‡(
	`ngx_hâp_uwsgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

1370  
NGX_CONF_ERROR
;

1373  
NGX_CONF_OK
;

1374 
	}
}

1377 
ngx_öt_t


1378 
	$ngx_hâp_uwsgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,

1379 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
)

1381 
u_ch¨
 *
p
;

1382 
size_t
 
size
;

1383 
uöçå_t
 *
code
;

1384 
ngx_uöt_t
 
i
, 
n§c
;

1385 
ngx_¨øy_t
 
hódîs_«mes
;

1386 #i‡(
NGX_HTTP_CACHE
)

1387 
ngx_¨øy_t
 
∑øms_mîged
;

1389 
ngx_keyvÆ_t
 *
§c
;

1390 
ngx_hash_key_t
 *
hk
;

1391 
ngx_hash_öô_t
 
hash
;

1392 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1393 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1395 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1396 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1398 i‡(
¥ev
->
hódîs_hash
.
buckës


1399 #i‡(
NGX_HTTP_CACHE
)

1400 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
Ë=(
¥ev
->upstream.cache == NULL))

1404 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

1405 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

1406 
c⁄f
->
∑øms
 = 
¥ev
->params;

1407 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

1408 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

1410  
NGX_OK
;

1414 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


1415 #i‡(
NGX_HTTP_CACHE
)

1416 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1420 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

1421  
NGX_OK
;

1424 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1425 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

1426  
NGX_ERROR
;

1429 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1430 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1431  
NGX_ERROR
;

1434 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1435 !
NGX_OK
)

1437  
NGX_ERROR
;

1440 i‡(
c⁄f
->
∑øms_sour˚
) {

1441 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1442 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1445 
§c
 = 
NULL
;

1446 
n§c
 = 0;

1449 #i‡(
NGX_HTTP_CACHE
)

1451 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1452 
ngx_keyvÆ_t
 *
h
, *
s
;

1454 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

1455 !
NGX_OK
)

1457  
NGX_ERROR
;

1460 
i
 = 0; i < 
n§c
; i++) {

1462 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1463 i‡(
s
 =
NULL
) {

1464  
NGX_ERROR
;

1467 *
s
 = 
§c
[
i
];

1470 
h
 = 
ngx_hâp_uwsgi_ˇche_hódîs
;

1472 
h
->
key
.
Àn
) {

1474 
§c
 = 
∑øms_mîged
.
ñts
;

1475 
n§c
 = 
∑øms_mîged
.
√…s
;

1477 
i
 = 0; i < 
n§c
; i++) {

1478 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1479 
√xt
;

1483 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1484 i‡(
s
 =
NULL
) {

1485  
NGX_ERROR
;

1488 *
s
 = *
h
;

1490 
√xt
:

1492 
h
++;

1495 
§c
 = 
∑øms_mîged
.
ñts
;

1496 
n§c
 = 
∑øms_mîged
.
√…s
;

1501 
i
 = 0; i < 
n§c
; i++) {

1503 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1504 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1506 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1507 i‡(
hk
 =
NULL
) {

1508  
NGX_ERROR
;

1511 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1512 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1513 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1514 
hk
->
vÆue
 = (*) 1;

1516 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1521 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1522 (
ngx_hâp_s¸ùt_c›y_code_t
));

1523 i‡(
c›y
 =
NULL
) {

1524  
NGX_ERROR
;

1527 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1528 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1531 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1532 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

1533 & ~((
uöçå_t
) - 1);

1535 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

1536 i‡(
c›y
 =
NULL
) {

1537  
NGX_ERROR
;

1540 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1541 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1543 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1544 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

1547 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1549 
sc
.
cf
 = cf;

1550 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1551 
sc
.
Êushes
 = &
c⁄f
->flushes;

1552 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

1553 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

1555 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1556  
NGX_ERROR
;

1559 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1560 i‡(
code
 =
NULL
) {

1561  
NGX_ERROR
;

1564 *
code
 = (
uöçå_t
Ë
NULL
;

1567 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1568 i‡(
code
 =
NULL
) {

1569  
NGX_ERROR
;

1572 *
code
 = (
uöçå_t
Ë
NULL
;

1575 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1576 i‡(
code
 =
NULL
) {

1577  
NGX_ERROR
;

1580 *
code
 = (
uöçå_t
Ë
NULL
;

1582 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

1584 
hash
.hash = &
c⁄f
->
hódîs_hash
;

1585 
hash
.
key
 = 
ngx_hash_key_lc
;

1586 
hash
.
max_size
 = 512;

1587 
hash
.
buckë_size
 = 64;

1588 
hash
.
«me
 = "uwsgi_params_hash";

1589 
hash
.
poﬁ
 = 
cf
->pool;

1590 
hash
.
ãmp_poﬁ
 = 
NULL
;

1592  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1593 
	}
}

1597 
	$ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1599 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1601 
ngx_uæ_t
 
u
;

1602 
ngx_°r_t
 *
vÆue
, *
uæ
;

1603 
ngx_uöt_t
 
n
;

1604 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1605 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1607 i‡(
uwcf
->
up°ªam
.up°ªam || uwcf->
uwsgi_Àngths
) {

1611 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
 (
cf
, 
ngx_hâp_c‹e_moduÀ
);

1612 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1614 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1616 
uæ
 = &
vÆue
[1];

1618 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1620 i‡(
n
) {

1622 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1624 
sc
.
cf
 = cf;

1625 
sc
.
sour˚
 = 
uæ
;

1626 
sc
.
Àngths
 = &
uwcf
->
uwsgi_Àngths
;

1627 
sc
.
vÆues
 = &
uwcf
->
uwsgi_vÆues
;

1628 
sc
.
v¨übÀs
 = 
n
;

1629 
sc
.
com∂ëe_Àngths
 = 1;

1630 
sc
.
com∂ëe_vÆues
 = 1;

1632 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1633  
NGX_CONF_ERROR
;

1636  
NGX_CONF_OK
;

1639 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1641 
u
.
uæ
 = 
vÆue
[1];

1642 
u
.
no_ªsﬁve
 = 1;

1644 
uwcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1645 i‡(
uwcf
->
up°ªam
.up°ªam =
NULL
) {

1646  
NGX_CONF_ERROR
;

1649 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1650 
˛cf
->
auto_ªdúe˘
 = 1;

1653  
NGX_CONF_OK
;

1654 
	}
}

1658 
	$ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1660 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1662 
ngx_°r_t
 *
vÆue
;

1663 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1665 i‡(
uwcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
 || uwcf->up°ªam.
°‹e_Àngths
)

1670 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1672 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1673 
uwcf
->
up°ªam
.
°‹e
 = 0;

1674  
NGX_CONF_OK
;

1677 #i‡(
NGX_HTTP_CACHE
)

1679 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


1680 && 
uwcf
->
up°ªam
.
ˇche
 !
NULL
)

1687 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1688 
uwcf
->
up°ªam
.
°‹e
 = 1;

1689  
NGX_CONF_OK
;

1693 
vÆue
[1].
Àn
++;

1695 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1697 
sc
.
cf
 = cf;

1698 
sc
.
sour˚
 = &
vÆue
[1];

1699 
sc
.
Àngths
 = &
uwcf
->
up°ªam
.
°‹e_Àngths
;

1700 
sc
.
vÆues
 = &
uwcf
->
up°ªam
.
°‹e_vÆues
;

1701 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);;

1702 
sc
.
com∂ëe_Àngths
 = 1;

1703 
sc
.
com∂ëe_vÆues
 = 1;

1705 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1706  
NGX_CONF_ERROR
;

1709  
NGX_CONF_OK
;

1710 
	}
}

1713 #i‡(
NGX_HTTP_CACHE
)

1716 
	$ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1718 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1720 
ngx_°r_t
 *
vÆue
;

1722 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1724 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

1728 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1729 
uwcf
->
up°ªam
.
ˇche
 = 
NULL
;

1730  
NGX_CONF_OK
;

1733 i‡(
uwcf
->
up°ªam
.
°‹e
 > 0 || uwcf->up°ªam.
°‹e_Àngths
) {

1737 
uwcf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1738 &
ngx_hâp_uwsgi_moduÀ
);

1739 i‡(
uwcf
->
up°ªam
.
ˇche
 =
NULL
) {

1740  
NGX_CONF_ERROR
;

1743  
NGX_CONF_OK
;

1744 
	}
}

1748 
	$ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1750 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1752 
ngx_°r_t
 *
vÆue
;

1753 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1755 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1757 i‡(
uwcf
->
ˇche_key
.
vÆue
.
Àn
) {

1761 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1763 
ccv
.
cf
 = cf;

1764 
ccv
.
vÆue
 = &value[1];

1765 
ccv
.
com∂ex_vÆue
 = &
uwcf
->
ˇche_key
;

1767 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1768  
NGX_CONF_ERROR
;

1771  
NGX_CONF_OK
;

1772 
	}
}

	@src/http/modules/ngx_http_xslt_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<libxml/∑r£r.h
>

13 
	~<libxml/åì.h
>

14 
	~<libx¶t/x¶t.h
>

15 
	~<libx¶t/x¶tI¡î«ls.h
>

16 
	~<libx¶t/å™sf‹m.h
>

17 
	~<libx¶t/x¶tutûs.h
>

19 #i‡(
NGX_HAVE_EXSLT
)

20 
	~<libex¶t/ex¶t.h
>

24 #i‚de‡
NGX_HTTP_XSLT_REUSE_DTD


25 
	#NGX_HTTP_XSLT_REUSE_DTD
 1

	)

30 
u_ch¨
 *
	m«me
;

31 *
	md©a
;

32 } 
	tngx_hâp_x¶t_fûe_t
;

36 
ngx_¨øy_t
 
	mdtd_fûes
;

37 
ngx_¨øy_t
 
	mshìt_fûes
;

38 } 
	tngx_hâp_x¶t_fûãr_maö_c⁄f_t
;

42 
x¶tStyÀshìtPå
 
	m°yÀshìt
;

43 
ngx_¨øy_t
 
	m∑øms
;

44 } 
	tngx_hâp_x¶t_shìt_t
;

48 
xmlDtdPå
 
	mdtd
;

49 
ngx_¨øy_t
 
	mshìts
;

50 
ngx_hash_t
 
	mty≥s
;

51 
ngx_¨øy_t
 *
	mty≥s_keys
;

52 } 
	tngx_hâp_x¶t_fûãr_loc_c⁄f_t
;

56 
xmlDocPå
 
	mdoc
;

57 
xmlP¨£rCtxtPå
 
	m˘xt
;

58 
ngx_hâp_ªque°_t
 *
	mªque°
;

59 
ngx_¨øy_t
 
	m∑øms
;

61 
ngx_uöt_t
 
	md⁄e
;

62 } 
	tngx_hâp_x¶t_fûãr_˘x_t
;

65 
ngx_öt_t
 
ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
,

66 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

67 
ngx_öt_t
 
ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

71 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

72 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
);

73 
ngx_cde˛
 
ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...);

76 
ngx_buf_t
 *
ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
);

78 
ngx_öt_t
 
ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_¨øy_t
 *
∑øms
);

80 
u_ch¨
 *
ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
);

81 
u_ch¨
 *
ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
);

82 
ngx_hâp_x¶t_˛ónup
(*
d©a
);

84 *
ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

86 *
ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

87 *
c⁄f
);

88 
ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
);

89 
ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
);

90 *
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

91 *
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

92 *
ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

93 *
chûd
);

94 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

95 
ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
);

98 
ngx_°r_t
 
	gngx_hâp_x¶t_deÁu…_ty≥s
[] = {

99 
ngx_°rög
("text/xml"),

100 
ngx_nuŒ_°rög


104 
ngx_comm™d_t
 
	gngx_hâp_x¶t_fûãr_comm™ds
[] = {

106 { 
ngx_°rög
("xml_entities"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_hâp_x¶t_ítôõs
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

111 
NULL
 },

113 { 
ngx_°rög
("xslt_stylesheet"),

114 
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

115 
ngx_hâp_x¶t_°yÀshìt
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

118 
NULL
 },

120 { 
ngx_°rög
("xslt_types"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

122 
ngx_hâp_ty≥s_¶Ÿ
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
ty≥s_keys
),

125 &
ngx_hâp_x¶t_deÁu…_ty≥s
[0] },

127 
ngx_nuŒ_comm™d


131 
ngx_hâp_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ_˘x
 = {

132 
NULL
,

133 
ngx_hâp_x¶t_fûãr_öô
,

135 
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
,

136 
NULL
,

138 
NULL
,

139 
NULL
,

141 
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
,

142 
ngx_hâp_x¶t_fûãr_mîge_c⁄f


146 
ngx_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ
 = {

147 
NGX_MODULE_V1
,

148 &
ngx_hâp_x¶t_fûãr_moduÀ_˘x
,

149 
ngx_hâp_x¶t_fûãr_comm™ds
,

150 
NGX_HTTP_MODULE
,

151 
NULL
,

152 
NULL
,

153 
NULL
,

154 
NULL
,

155 
NULL
,

156 
ngx_hâp_x¶t_fûãr_exô
,

157 
ngx_hâp_x¶t_fûãr_exô
,

158 
NGX_MODULE_V1_PADDING


162 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

163 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

166 
ngx_öt_t


167 
	$ngx_hâp_x¶t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

169 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

170 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

172 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

175 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

176  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

179 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

181 i‡(
c⁄f
->
shìts
.
√…s
 == 0

182 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
)

184  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

187 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

189 i‡(
˘x
) {

190  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

193 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_˘x_t
));

194 i‡(
˘x
 =
NULL
) {

195  
NGX_ERROR
;

198 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

200 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

202  
NGX_OK
;

203 
	}
}

206 
ngx_öt_t


207 
	$ngx_hâp_x¶t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

209 
wñlF‹med
;

210 
ngx_chaö_t
 *
˛
;

211 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

213 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

216 i‡(
ö
 =
NULL
) {

217  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

220 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

222 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

223  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

226 
˛
 = 
ö
; cl; c»˛->
√xt
) {

228 i‡(
	`ngx_hâp_x¶t_add_chunk
(
r
, 
˘x
, 
˛
->
buf
Ë!
NGX_OK
) {

230 i‡(
˘x
->
˘xt
->
myDoc
) {

232 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

233 
˘x
->
˘xt
->
myDoc
->
extSub£t
 = 
NULL
;

235 
	`xmlFªeDoc
(
˘x
->
˘xt
->
myDoc
);

238 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

240  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

243 i‡(
˛
->
buf
->
œ°_buf
 || cl->buf->
œ°_ö_chaö
) {

245 
˘x
->
doc
 = ctx->
˘xt
->
myDoc
;

247 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

248 
˘x
->
doc
->
extSub£t
 = 
NULL
;

251 
wñlF‹med
 = 
˘x
->
˘xt
->wellFormed;

253 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

255 i‡(
wñlF‹med
) {

256  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
,

257 
	`ngx_hâp_x¶t_≠∂y_°yÀshìt
(
r
, 
˘x
));

260 
	`xmlFªeDoc
(
˘x
->
doc
);

262 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

265  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

269  
NGX_OK
;

270 
	}
}

273 
ngx_öt_t


274 
	$ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

275 
ngx_buf_t
 *
b
)

277 
ngx_öt_t
 
rc
;

278 
ngx_chaö_t
 
out
;

279 
ngx_poﬁ_˛ónup_t
 *
˛n
;

281 
˘x
->
d⁄e
 = 1;

283 i‡(
b
 =
NULL
) {

284  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

285 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

288 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

290 i‡(
˛n
 =
NULL
) {

291 
	`ngx_‰ì
(
b
->
pos
);

292  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

293 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

296 i‡(
r
 =r->
maö
) {

297 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

299 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

300 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

301 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

304 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

307 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

309 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

310 
	`ngx_‰ì
(
b
->
pos
);

311  
rc
;

314 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup
;

315 
˛n
->
d©a
 = 
b
->
pos
;

317 
out
.
buf
 = 
b
;

318 
out
.
√xt
 = 
NULL
;

320  
	`ngx_hâp_√xt_body_fûãr
(
r
, &
out
);

321 
	}
}

324 
ngx_öt_t


325 
	$ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

326 
ngx_buf_t
 *
b
)

328 
îr
;

329 
xmlP¨£rCtxtPå
 
˘xt
;

331 i‡(
˘x
->
˘xt
 =
NULL
) {

333 
˘xt
 = 
	`xmlCª©ePushP¨£rCtxt
(
NULL
, NULL, NULL, 0, NULL);

334 i‡(
˘xt
 =
NULL
) {

335 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

337  
NGX_ERROR
;

340 
˘xt
->
ßx
->
exã∫ÆSub£t
 = 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
;

341 
˘xt
->
ßx
->
£tDocumítLoˇt‹
 = 
NULL
;

342 
˘xt
->
ßx
->
w¨nög
 = 
NULL
;

343 
˘xt
->
ßx
->
îr‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

344 
˘xt
->
ßx
->
ÁèlEº‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

345 
˘xt
->
ßx
->
_¥iv©e
 = 
˘x
;

346 
˘xt
->
ª∂a˚E¡ôõs
 = 1;

347 
˘xt
->
lﬂdsub£t
 = 1;

349 
˘x
->
˘xt
 = ctxt;

350 
˘x
->
ªque°
 = 
r
;

353 
îr
 = 
	`xmlP¨£Chunk
(
˘x
->
˘xt
, (*Ë
b
->
pos
, (Ë(b->
œ°
 - b->pos),

354 (
b
->
œ°_buf
Ë|| (b->
œ°_ö_chaö
));

356 i‡(
îr
 == 0) {

357 
b
->
pos
 = b->
œ°
;

358  
NGX_OK
;

361 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

362 "xmlP¨£Chunk(ËÁûed,Éº‹:%d", 
îr
);

364  
NGX_ERROR
;

365 
	}
}

369 
	$ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

370 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
)

372 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

374 
xmlDocPå
 
doc
;

375 
xmlDtdPå
 
dtd
;

376 
ngx_hâp_ªque°_t
 *
r
;

377 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

378 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

380 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

381 
r
 = 
˘x
->
ªque°
;

383 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

385 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

387 
«me
 ?Çamê: (
xmlCh¨
 *) "",

388 
exã∫ÆId
 ?Éxã∫ÆId : (
xmlCh¨
 *) "",

389 
sy°emId
 ? sy°emId : (
xmlCh¨
 *) "");

391 
doc
 = 
˘xt
->
myDoc
;

393 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

395 
dtd
 = 
c⁄f
->dtd;

399 
dtd
 = 
	`xmlC›yDtd
(
c⁄f
->dtd);

400 i‡(
dtd
 =
NULL
) {

401 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

406 i‡(
doc
->
chûdªn
 =
NULL
) {

407 
	`xmlAddChûd
((
xmlNodePå
Ë
doc
, (xmlNodePåË
dtd
);

410 
	`xmlAddPªvSiblög
(
doc
->
chûdªn
, (
xmlNodePå
Ë
dtd
);

415 
doc
->
extSub£t
 = 
dtd
;

416 
	}
}

419 
ngx_cde˛


420 
	$ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...)

422 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

424 
size_t
 
n
;

425 
va_li°
 
¨gs
;

426 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

427 
u_ch¨
 
buf
[
NGX_MAX_ERROR_STR
];

429 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

431 
buf
[0] = '\0';

433 
	`va_°¨t
(
¨gs
, 
msg
);

434 
n
 = (
size_t
Ë
	`v¢¥ötf
((*Ë
buf
, 
NGX_MAX_ERROR_STR
, 
msg
, 
¨gs
);

435 
	`va_íd
(
¨gs
);

437 --
n
 && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

439 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

440 "libxml2Éº‹: \"%*s\"", 
n
 + 1, 
buf
);

441 
	}
}

444 
ngx_buf_t
 *

445 
	$ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

446 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
)

448 
Àn
, 
rc
, 
doc_ty≥
;

449 
u_ch¨
 *
ty≥
, *
ícodög
;

450 
ngx_buf_t
 *
b
;

451 
ngx_uöt_t
 
i
;

452 
xmlCh¨
 *
buf
;

453 
xmlDocPå
 
doc
, 
ªs
;

454 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

455 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

457 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

458 
shìt
 = 
c⁄f
->
shìts
.
ñts
;

459 
doc
 = 
˘x
->doc;

463 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑øms
, 
r
->
poﬁ
, 4 * 2 + 1, (*))

464 !
NGX_OK
)

466 
	`xmlFªeDoc
(
doc
);

467  
NULL
;

470 
i
 = 0; i < 
c⁄f
->
shìts
.
√…s
; i++) {

472 i‡(
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, &
shìt
[
i
].
∑øms
Ë!
NGX_OK
) {

473 
	`xmlFªeDoc
(
doc
);

474  
NULL
;

477 
ªs
 = 
	`x¶tAµlyStyÀshìt
(
shìt
[
i
].
°yÀshìt
, 
doc
, 
˘x
->
∑øms
.
ñts
);

479 
	`xmlFªeDoc
(
doc
);

481 i‡(
ªs
 =
NULL
) {

482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

484  
NULL
;

487 
doc
 = 
ªs
;

490 
˘x
->
∑øms
.
√…s
 = 0;

495 i‡(
r
 =r->
maö
) {

496 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
shìt
[
i
 - 1].
°yÀshìt
);

499 
ty≥
 = 
NULL
;

502 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
shìt
[
i
 - 1].
°yÀshìt
);

503 
doc_ty≥
 = 
doc
->
ty≥
;

505 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

507 
doc_ty≥
, 
ty≥
 ?Åy≥ : (
u_ch¨
 *) "(null)",

508 
ícodög
 ?Éncodög : (
u_ch¨
 *) "(null)");

510 
rc
 = 
	`x¶tSaveResu…ToSåög
(&
buf
, &
Àn
, 
doc
, 
shìt
[
i
 - 1].
°yÀshìt
);

512 
	`xmlFªeDoc
(
doc
);

514 i‡(
rc
 != 0) {

515 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

517  
NULL
;

520 i‡(
Àn
 == 0) {

521 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

523  
NULL
;

526 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

527 i‡(
b
 =
NULL
) {

528 
	`ngx_‰ì
(
buf
);

529  
NULL
;

532 
b
->
pos
 = 
buf
;

533 
b
->
œ°
 = 
buf
 + 
Àn
;

534 
b
->
mem‹y
 = 1;

536 i‡(
ícodög
) {

537 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
	`ngx_°æí
(
ícodög
);

538 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
ícodög
;

541 i‡(
r
 !r->
maö
) {

542  
b
;

545 
b
->
œ°_buf
 = 1;

547 i‡(
ty≥
) {

548 
Àn
 = 
	`ngx_°æí
(
ty≥
);

550 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
Àn
;

551 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Üen;

552 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
ty≥
;

554 } i‡(
doc_ty≥
 =
XML_HTML_DOCUMENT_NODE
) {

556 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

557 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

560 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

562  
b
;

563 
	}
}

566 
ngx_öt_t


567 
	$ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

568 
ngx_¨øy_t
 *
∑øms
)

570 
u_ch¨
 *
p
, *
œ°
, *
vÆue
, *
d°
, *
§c
, **
s
;

571 
size_t
 
Àn
;

572 
ngx_uöt_t
 
i
;

573 
ngx_°r_t
 
°rög
;

574 
ngx_hâp_com∂ex_vÆue_t
 *
∑øm
;

576 
∑øm
 = 
∑øms
->
ñts
;

578 
i
 = 0; i < 
∑øms
->
√…s
; i++) {

580 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∑øm
[
i
], &
°rög
Ë!
NGX_OK
) {

581  
NGX_ERROR
;

584 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

585 "x¶àfûã∏∑øm: \"%s\"", 
°rög
.
d©a
);

587 
p
 = 
°rög
.
d©a
;

588 
œ°
 = 
°rög
.
d©a
 + såög.
Àn
 - 1;

590 
p
 && *p) {

592 
vÆue
 = 
p
;

593 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, '=');

594 i‡(
p
 =
NULL
) {

595 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

596 "övÆidÜibx¶à∑ømëî \"%s\"", 
vÆue
);

597  
NGX_ERROR
;

599 *
p
++ = '\0';

601 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

602 "x¶àfûã∏∑ømÇame: \"%s\"", 
vÆue
);

604 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

605 i‡(
s
 =
NULL
) {

606  
NGX_ERROR
;

609 *
s
 = 
vÆue
;

611 
vÆue
 = 
p
;

612 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, ':');

614 i‡(
p
) {

615 
Àn
 = 
p
 - 
vÆue
;

616 *
p
++ = '\0';

619 
Àn
 = 
œ°
 - 
vÆue
;

622 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

623 "x¶àfûã∏∑øm vÆue: \"%s\"", 
vÆue
);

625 
d°
 = 
vÆue
;

626 
§c
 = 
vÆue
;

628 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
Àn
, 0);

630 *
d°
 = '\0';

632 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

633 "x¶àfûã∏∑øm u√sˇ≥d: \"%s\"", 
vÆue
);

635 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

636 i‡(
s
 =
NULL
) {

637  
NGX_ERROR
;

640 *
s
 = 
vÆue
;

644 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

645 i‡(
s
 =
NULL
) {

646  
NGX_ERROR
;

649 *
s
 = 
NULL
;

651  
NGX_OK
;

652 
	}
}

655 
u_ch¨
 *

656 
	$ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
)

658 
u_ch¨
 *
ty≥
;

660 i‡(
s
->
medüTy≥
) {

661  
s
->
medüTy≥
;

664 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

666 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
s
);

668 i‡(
ty≥
) {

669  
ty≥
;

673  
NULL
;

674 
	}
}

677 
u_ch¨
 *

678 
	$ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
)

680 
u_ch¨
 *
ícodög
;

682 i‡(
s
->
ícodög
) {

683  
s
->
ícodög
;

686 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

688 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
s
);

690 i‡(
ícodög
) {

691  
ícodög
;

695  
NULL
;

696 
	}
}

700 
	$ngx_hâp_x¶t_˛ónup
(*
d©a
)

702 
	`ngx_‰ì
(
d©a
);

703 
	}
}

707 
	$ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

709 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

711 
ngx_°r_t
 *
vÆue
;

712 
ngx_uöt_t
 
i
;

713 
ngx_poﬁ_˛ónup_t
 *
˛n
;

714 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

715 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

717 i‡(
xlcf
->
dtd
) {

721 
vÆue
 = 
cf
->
¨gs
->
ñts
;

723 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

725 
fûe
 = 
xmcf
->
dtd_fûes
.
ñts
;

726 
i
 = 0; i < 
xmcf
->
dtd_fûes
.
√…s
; i++) {

727 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, &
vÆue
[1].
d©a
) == 0) {

728 
xlcf
->
dtd
 = 
fûe
[
i
].
d©a
;

729  
NGX_CONF_OK
;

733 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

734 i‡(
˛n
 =
NULL
) {

735  
NGX_CONF_ERROR
;

738 
xlcf
->
dtd
 = 
	`xmlP¨£DTD
(
NULL
, (
xmlCh¨
 *Ë
vÆue
[1].
d©a
);

740 i‡(
xlcf
->
dtd
 =
NULL
) {

741 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0, "xmlParseDTD() failed");

742  
NGX_CONF_ERROR
;

745 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_dtd
;

746 
˛n
->
d©a
 = 
xlcf
->
dtd
;

748 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
dtd_fûes
);

749 i‡(
fûe
 =
NULL
) {

750  
NGX_CONF_ERROR
;

753 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

754 
fûe
->
d©a
 = 
xlcf
->
dtd
;

756  
NGX_CONF_OK
;

757 
	}
}

762 
	$ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

764 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

766 
ngx_°r_t
 *
vÆue
;

767 
ngx_uöt_t
 
i
, 
n
;

768 
ngx_poﬁ_˛ónup_t
 *
˛n
;

769 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

770 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

771 
ngx_hâp_com∂ex_vÆue_t
 *
∑øm
;

772 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

773 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

775 
vÆue
 = 
cf
->
¨gs
->
ñts
;

777 i‡(
xlcf
->
shìts
.
ñts
 =
NULL
) {

778 i‡(
	`ngx_¨øy_öô
(&
xlcf
->
shìts
, 
cf
->
poﬁ
, 1,

779 (
ngx_hâp_x¶t_shìt_t
))

780 !
NGX_OK
)

782  
NGX_CONF_ERROR
;

786 
shìt
 = 
	`ngx_¨øy_push
(&
xlcf
->
shìts
);

787 i‡(
shìt
 =
NULL
) {

788  
NGX_CONF_ERROR
;

791 
	`ngx_memzîo
(
shìt
, (
ngx_hâp_x¶t_shìt_t
));

793 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

794  
NGX_CONF_ERROR
;

797 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

799 
fûe
 = 
xmcf
->
shìt_fûes
.
ñts
;

800 
i
 = 0; i < 
xmcf
->
shìt_fûes
.
√…s
; i++) {

801 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, &
vÆue
[1].
d©a
) == 0) {

802 
shìt
->
°yÀshìt
 = 
fûe
[
i
].
d©a
;

803 
found
;

807 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

808 i‡(
˛n
 =
NULL
) {

809  
NGX_CONF_ERROR
;

812 
shìt
->
°yÀshìt
 = 
	`x¶tP¨£StyÀshìtFûe
(
vÆue
[1].
d©a
);

813 i‡(
shìt
->
°yÀshìt
 =
NULL
) {

814 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

816 
vÆue
[1].
d©a
);

817  
NGX_CONF_ERROR
;

820 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_°yÀshìt
;

821 
˛n
->
d©a
 = 
shìt
->
°yÀshìt
;

823 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
shìt_fûes
);

824 i‡(
fûe
 =
NULL
) {

825  
NGX_CONF_ERROR
;

828 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

829 
fûe
->
d©a
 = 
shìt
->
°yÀshìt
;

831 
found
:

833 
n
 = 
cf
->
¨gs
->
√…s
;

835 i‡(
n
 == 2) {

836  
NGX_CONF_OK
;

839 i‡(
	`ngx_¨øy_öô
(&
shìt
->
∑øms
, 
cf
->
poﬁ
, 
n
 - 2,

840 (
ngx_hâp_com∂ex_vÆue_t
))

841 !
NGX_OK
)

843  
NGX_CONF_ERROR
;

846 
i
 = 2; i < 
n
; i++) {

848 
∑øm
 = 
	`ngx_¨øy_push
(&
shìt
->
∑øms
);

849 i‡(
∑øm
 =
NULL
) {

850  
NGX_CONF_ERROR
;

853 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

855 
ccv
.
cf
 = cf;

856 
ccv
.
vÆue
 = &vÆue[
i
];

857 
ccv
.
com∂ex_vÆue
 = 
∑øm
;

858 
ccv
.
zîo
 = 1;

860 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

861  
NGX_CONF_ERROR
;

865  
NGX_CONF_OK
;

866 
	}
}

870 
	$ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
)

872 
	`xmlFªeDtd
(
d©a
);

873 
	}
}

877 
	$ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
)

879 
	`x¶tFªeStyÀshìt
(
d©a
);

880 
	}
}

884 
	$ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

886 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
c⁄f
;

888 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
));

889 i‡(
c⁄f
 =
NULL
) {

890  
NULL
;

893 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
dtd_fûes
, 
cf
->
poﬁ
, 1,

894 (
ngx_hâp_x¶t_fûe_t
))

895 !
NGX_OK
)

897  
NULL
;

900 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
shìt_fûes
, 
cf
->
poﬁ
, 1,

901 (
ngx_hâp_x¶t_fûe_t
))

902 !
NGX_OK
)

904  
NULL
;

907  
c⁄f
;

908 
	}
}

912 
	$ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

914 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

916 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
));

917 i‡(
c⁄f
 =
NULL
) {

918  
NULL
;

930  
c⁄f
;

931 
	}
}

935 
	$ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

937 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

938 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

940 i‡(
c⁄f
->
dtd
 =
NULL
) {

941 
c⁄f
->
dtd
 = 
¥ev
->dtd;

944 i‡(
c⁄f
->
shìts
.
√…s
 == 0) {

945 
c⁄f
->
shìts
 = 
¥ev
->sheets;

948 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

949 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

950 
ngx_hâp_x¶t_deÁu…_ty≥s
)

951 !
NGX_OK
)

953  
NGX_CONF_ERROR
;

956  
NGX_CONF_OK
;

957 
	}
}

960 
ngx_öt_t


961 
	$ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

963 
	`xmlInôP¨£r
();

965 #i‡(
NGX_HAVE_EXSLT
)

966 
	`ex¶tRegi°îAŒ
();

969 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

970 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_x¶t_hódî_fûãr
;

972 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

973 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_x¶t_body_fûãr
;

975  
NGX_OK
;

976 
	}
}

980 
	$ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
)

982 
	`x¶tCÀ™upGlobÆs
();

983 
	`xmlCÀ™upP¨£r
();

984 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_≥æ_moduÀ.h
>

15 
PîlI¡î¥ëî
 *
	m≥æ
;

16 
HV
 *
	mngöx
;

17 
ngx_¨øy_t
 *
	mmoduÀs
;

18 
ngx_¨øy_t
 *
	mªquúes
;

19 } 
	tngx_hâp_≥æ_maö_c⁄f_t
;

23 
SV
 *
	msub
;

24 
ngx_°r_t
 
	mh™dÀr
;

25 } 
	tngx_hâp_≥æ_loc_c⁄f_t
;

29 
SV
 *
	msub
;

30 
ngx_°r_t
 
	mh™dÀr
;

31 } 
	tngx_hâp_≥æ_v¨übÀ_t
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_öt_t
 
ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
, 
ngx_°r_t
 **
∑øms
);

39 *
ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

40 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

41 
PîlI¡î¥ëî
 *
ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

42 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

43 
ngx_öt_t
 
ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
,

44 
ngx_log_t
 *
log
);

45 
ngx_öt_t
 
ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
,

46 
HV
 *
ngöx
, 
SV
 *
sub
, SV **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
);

47 
ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
);

49 
ngx_öt_t
 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

50 *
ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

52 *
ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

53 *
ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

54 *
chûd
);

55 *
ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

58 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

59 
ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
);

62 
ngx_öt_t
 
ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

63 
ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
);

66 
ngx_comm™d_t
 
	gngx_hâp_≥æ_comm™ds
[] = {

68 { 
ngx_°rög
("perl_modules"),

69 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

71 
NGX_HTTP_MAIN_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
moduÀs
),

73 
NULL
 },

75 { 
ngx_°rög
("perl_require"),

76 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

77 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

78 
NGX_HTTP_MAIN_CONF_OFFSET
,

79 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
ªquúes
),

80 
NULL
 },

82 { 
ngx_°rög
("perl"),

83 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

84 
ngx_hâp_≥æ
,

85 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
NULL
 },

89 { 
ngx_°rög
("perl_set"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

91 
ngx_hâp_≥æ_£t
,

92 
NGX_HTTP_LOC_CONF_OFFSET
,

94 
NULL
 },

96 
ngx_nuŒ_comm™d


100 
ngx_hâp_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ_˘x
 = {

101 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
,

102 
NULL
,

104 
ngx_hâp_≥æ_¸óã_maö_c⁄f
,

105 
ngx_hâp_≥æ_öô_maö_c⁄f
,

107 
NULL
,

108 
NULL
,

110 
ngx_hâp_≥æ_¸óã_loc_c⁄f
,

111 
ngx_hâp_≥æ_mîge_loc_c⁄f


115 
ngx_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ
 = {

116 
NGX_MODULE_V1
,

117 &
ngx_hâp_≥æ_moduÀ_˘x
,

118 
ngx_hâp_≥æ_comm™ds
,

119 
NGX_HTTP_MODULE
,

120 
NULL
,

121 
NULL
,

122 
ngx_hâp_≥æ_öô_w‹kî
,

123 
NULL
,

124 
NULL
,

125 
NULL
,

126 
ngx_hâp_≥æ_exô
,

127 
NGX_MODULE_V1_PADDING


131 #i‡(
NGX_HTTP_SSI
)

133 
	#NGX_HTTP_PERL_SSI_SUB
 0

	)

134 
	#NGX_HTTP_PERL_SSI_ARG
 1

	)

137 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_≥æ_ssi_∑øms
[] = {

138 { 
ngx_°rög
("sub"), 
NGX_HTTP_PERL_SSI_SUB
, 1, 0 },

139 { 
ngx_°rög
("¨g"), 
NGX_HTTP_PERL_SSI_ARG
, 0, 1 },

140 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

143 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_≥æ_ssi_comm™d
 = {

144 
ngx_°rög
("≥æ"), 
ngx_hâp_≥æ_ssi
, 
ngx_hâp_≥æ_ssi_∑øms
, 0, 0, 1

150 
ngx_°r_t
 
	gngx_nuŒ_«me
 = 
ngx_nuŒ_°rög
;

151 
HV
 *
	gngöx_°ash
;

153 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

154 
ngx_uöt_t
 
	gngx_≥æ_ãrm
;

156 
PîlI¡î¥ëî
 *
	g≥æ
;

161 
	$ngx_hâp_≥æ_xs_öô
(
pTHX
)

163 
	`√wXS
("Dy«Lﬂdî::boŸ_Dy«Lﬂdî", 
boŸ_Dy«Lﬂdî
, 
__FILE__
);

165 
ngöx_°ash
 = 
	`gv_°ashpv
("ngöx", 
TRUE
);

166 
	}
}

169 
ngx_öt_t


170 
	$ngx_hâp_≥æ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

172 
r
->
maö
->
cou¡
++;

174 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

176  
NGX_DONE
;

177 
	}
}

181 
	$ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

183 
SV
 *
sub
;

184 
ngx_öt_t
 
rc
;

185 
ngx_°r_t
 
uri
, 
¨gs
, *
h™dÀr
;

186 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

187 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

188 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl handler");

192 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

194 i‡(
˘x
 =
NULL
) {

195 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

196 i‡(
˘x
 =
NULL
) {

197 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

201 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

204 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

208 
	`dTHXa
(
pmcf
->
≥æ
);

209 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

211 i‡(
˘x
->
√xt
 =
NULL
) {

212 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

213 
sub
 = 
∂cf
->sub;

214 
h™dÀr
 = &
∂cf
->handler;

217 
sub
 = 
˘x
->
√xt
;

218 
h™dÀr
 = &
ngx_nuŒ_«me
;

219 
˘x
->
√xt
 = 
NULL
;

222 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sub
, 
NULL
, 
h™dÀr
,

223 
NULL
);

227 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

228 "≥æ h™dÀ∏d⁄e: %i", 
rc
);

230 i‡(
rc
 =
NGX_DONE
) {

231 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

235 i‡(
rc
 > 600) {

236 
rc
 = 
NGX_OK
;

239 i‡(
˘x
->
ªdúe˘_uri
.
Àn
) {

240 
uri
 = 
˘x
->
ªdúe˘_uri
;

241 
¨gs
 = 
˘x
->
ªdúe˘_¨gs
;

244 
uri
.
Àn
 = 0;

247 
˘x
->
fûíame
.
d©a
 = 
NULL
;

248 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

250 i‡(
˘x
->
d⁄e
 || ctx->
√xt
) {

251 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

255 i‡(
uri
.
Àn
) {

256 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

257 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

261 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_HTTP_OK
) {

262 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

263 
˘x
->
d⁄e
 = 1;

266 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

267 
	}
}

271 
	$ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

273 
ngx_evít_t
 *
wev
;

275 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

280 i‡(
wev
->
timedout
) {

281 
wev
->
timedout
 = 0;

282 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

286 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

287 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

289 
	}
}

292 
ngx_öt_t


293 
	$ngx_hâp_≥æ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

294 
uöçå_t
 
d©a
)

296 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
 = (ngx_hâp_≥æ_v¨übÀ_à*Ë
d©a
;

298 
ngx_öt_t
 
rc
;

299 
ngx_°r_t
 
vÆue
;

300 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

301 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

303 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

306 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

308 i‡(
˘x
 =
NULL
) {

309 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

310 i‡(
˘x
 =
NULL
) {

311  
NGX_ERROR
;

314 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

317 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

319 
vÆue
.
d©a
 = 
NULL
;

323 
	`dTHXa
(
pmcf
->
≥æ
);

324 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

326 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
pv
->
sub
, 
NULL
,

327 &
pv
->
h™dÀr
, &
vÆue
);

331 i‡(
vÆue
.
d©a
) {

332 
v
->
Àn
 = 
vÆue
.len;

333 
v
->
vÆid
 = 1;

334 
v
->
no_ˇchóbÀ
 = 0;

335 
v
->
nŸ_found
 = 0;

336 
v
->
d©a
 = 
vÆue
.data;

339 
v
->
nŸ_found
 = 1;

342 
˘x
->
fûíame
.
d©a
 = 
NULL
;

343 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

345 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

348  
rc
;

349 
	}
}

352 #i‡(
NGX_HTTP_SSI
)

354 
ngx_öt_t


355 
	$ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
,

356 
ngx_°r_t
 **
∑øms
)

358 
SV
 *
sv
, **
asv
;

359 
ngx_öt_t
 
rc
;

360 
ngx_°r_t
 *
h™dÀr
, **
¨gs
;

361 
ngx_uöt_t
 
i
;

362 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

363 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

368 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

370 i‡(
˘x
 =
NULL
) {

371 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

372 i‡(
˘x
 =
NULL
) {

373  
NGX_ERROR
;

376 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

379 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

381 
˘x
->
ssi
 = 
ssi_˘x
;

383 
h™dÀr
 = 
∑øms
[
NGX_HTTP_PERL_SSI_SUB
];

384 
h™dÀr
->
d©a
[h™dÀr->
Àn
] = '\0';

388 
	`dTHXa
(
pmcf
->
≥æ
);

389 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

395 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 
h™dÀr
, &
sv
);

397 i‡(
sv
 =&
PL_sv_undef
) {

398 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

399 "evÆ_pv(\"%V\"ËÁûed", 
h™dÀr
);

400  
NGX_ERROR
;

403 i‡(
sv
 =
NULL
) {

404 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

409 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

411 
¨gs
 = &
∑øms
[
NGX_HTTP_PERL_SSI_ARG
];

413 i‡(
¨gs
) {

415 
i
 = 0; 
¨gs
[i]; i++) { }

417 
asv
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
i
 + 1Ë* (
SV
 *));

419 i‡(
asv
 =
NULL
) {

420 
	`SvREFCNT_dec
(
sv
);

421  
NGX_ERROR
;

424 
asv
[0] = (
SV
 *Ë
i
;

426 
i
 = 0; 
¨gs
[i]; i++) {

427 
asv
[
i
 + 1] = 
	`√wSVpvn
((*Ë
¨gs
[i]->
d©a
,árgs[i]->
Àn
);

431 
asv
 = 
NULL
;

434 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sv
, 
asv
, 
h™dÀr
,

435 
NULL
);

437 
	`SvREFCNT_dec
(
sv
);

441 
˘x
->
fûíame
.
d©a
 = 
NULL
;

442 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

443 
˘x
->
ssi
 = 
NULL
;

445 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl ssi done");

447  
rc
;

448 
	}
}

454 
	$ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

456 
ngx_°r_t
 *
m
;

457 
ngx_uöt_t
 
i
;

458 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

459 
ngx_poﬁ_˛ónup_t
 *
˛n
;

461 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

462 i‡(
˛n
 =
NULL
) {

463  
NGX_CONF_ERROR
;

468 #ifde‡
NGX_PERL_MODULES


469 i‡(
pmcf
->
moduÀs
 =
NGX_CONF_UNSET_PTR
) {

471 
pmcf
->
moduÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_°r_t
));

472 i‡(
pmcf
->
moduÀs
 =
NULL
) {

473  
NGX_CONF_ERROR
;

476 
m
 = 
	`ngx_¨øy_push
(
pmcf
->
moduÀs
);

477 i‡(
m
 =
NULL
) {

478  
NGX_CONF_ERROR
;

481 
	`ngx_°r_£t
(
m
, 
NGX_PERL_MODULES
);

485 i‡(
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
) {

486 
m
 = 
pmcf
->
moduÀs
->
ñts
;

487 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

488 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
m
[
i
], 0Ë!
NGX_OK
) {

489  
NGX_CONF_ERROR
;

494 #i‡!(
NGX_HAVE_PERL_MULTIPLICITY
)

496 i‡(
≥æ
) {

498 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

499  
NGX_CONF_ERROR
;

502 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
)

503 !
NGX_OK
)

505  
NGX_CONF_ERROR
;

508 
pmcf
->
≥æ
 =Öerl;

509 
pmcf
->
ngöx
 = 
ngöx_°ash
;

511  
NGX_CONF_OK
;

516 i‡(
ngöx_°ash
 =
NULL
) {

517 
	`PERL_SYS_INIT
(&
ngx_¨gc
, &
ngx_¨gv
);

520 
pmcf
->
≥æ
 = 
	`ngx_hâp_≥æ_¸óã_öãΩªãr
(
cf
,Ömcf);

522 i‡(
pmcf
->
≥æ
 =
NULL
) {

523  
NGX_CONF_ERROR
;

526 
pmcf
->
ngöx
 = 
ngöx_°ash
;

528 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

530 
˛n
->
h™dÀr
 = 
ngx_hâp_≥æ_˛ónup_≥æ
;

531 
˛n
->
d©a
 = 
pmcf
->
≥æ
;

535 
≥æ
 = 
pmcf
->perl;

539  
NGX_CONF_OK
;

540 
	}
}

543 
PîlI¡î¥ëî
 *

544 
	$ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

545 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

547 
n
;

548 
STRLEN
 
Àn
;

549 
SV
 *
sv
;

550 *
vî
, **
embeddög
;

551 
ngx_°r_t
 *
m
;

552 
ngx_uöt_t
 
i
;

553 
PîlI¡î¥ëî
 *
≥æ
;

555 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0, "createÖerl interpreter");

557 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

558  
NULL
;

561 
≥æ
 = 
	`≥æ_Æloc
();

562 i‡(
≥æ
 =
NULL
) {

563 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "perl_alloc() failed");

564  
NULL
;

569 
	`dTHXa
(
≥æ
);

570 
	`PERL_SET_CONTEXT
(
≥æ
);

572 
	`≥æ_c⁄°ru˘
(
≥æ
);

574 #ifde‡
PERL_EXIT_DESTRUCT_END


575 
PL_exô_Êags
 |
PERL_EXIT_DESTRUCT_END
;

578 
n
 = (
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
Ë?Ömcf->moduÀs->
√…s
 * 2 : 0;

580 
embeddög
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (4 + 
n
) * (*));

581 i‡(
embeddög
 =
NULL
) {

582 
Áû
;

585 
embeddög
[0] = "";

587 i‡(
n
++) {

588 
m
 = 
pmcf
->
moduÀs
->
ñts
;

589 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

590 
embeddög
[2 * 
i
 + 1] = "-I";

591 
embeddög
[2 * 
i
 + 2] = (*Ë
m
[i].
d©a
;

595 
embeddög
[
n
++] = "-Mnginx";

596 
embeddög
[
n
++] = "-e";

597 
embeddög
[
n
++] = "0";

599 
n
 = 
	`≥æ_∑r£
(
≥æ
, 
ngx_hâp_≥æ_xs_öô
,Ç, 
embeddög
, 
NULL
);

601 i‡(
n
 != 0) {

602 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "≥æ_∑r£(ËÁûed: %d", 
n
);

603 
Áû
;

606 
sv
 = 
	`gë_sv
("ngöx::VERSION", 
FALSE
);

607 
vî
 = 
	`SvPV
(
sv
, 
Àn
);

609 i‡(
	`ngx_°rcmp
(
vî
, 
NGINX_VERSION
) != 0) {

610 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

611 "vîsi⁄ " 
NGINX_VERSION
 " ofÇginx.pm isÑequired, "

612 "buà%†wa†found", 
vî
);

613 
Áû
;

616 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
Ë!
NGX_OK
) {

617 
Áû
;

622  
≥æ
;

624 
Áû
:

626 (Ë
	`≥æ_de°ru˘
(
≥æ
);

628 
	`≥æ_‰ì
(
≥æ
);

630  
NULL
;

631 
	}
}

634 
ngx_öt_t


635 
	$ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
, 
ngx_log_t
 *
log
)

637 
u_ch¨
 *
îr
;

638 
STRLEN
 
Àn
;

639 
ngx_°r_t
 *
s¸ùt
;

640 
ngx_uöt_t
 
i
;

642 i‡(
ªquúes
 =
NGX_CONF_UNSET_PTR
) {

643  
NGX_OK
;

646 
s¸ùt
 = 
ªquúes
->
ñts
;

647 
i
 = 0; i < 
ªquúes
->
√…s
; i++) {

649 
	`ªquúe_pv
((*Ë
s¸ùt
[
i
].
d©a
);

651 i‡(
	`SvTRUE
(
ERRSV
)) {

653 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

654 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

656 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

658 
s¸ùt
[
i
].
d©a
, 
Àn
 + 1, 
îr
);

660  
NGX_ERROR
;

664  
NGX_OK
;

665 
	}
}

668 
ngx_öt_t


669 
	$ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
, 
HV
 *
ngöx
, 
SV
 *
sub
,

670 
SV
 **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
)

672 
SV
 *
sv
;

673 
n
, 
°©us
;

674 *
löe
;

675 
u_ch¨
 *
îr
;

676 
STRLEN
 
Àn
, 
n_a
;

677 
ngx_uöt_t
 
i
;

678 
ngx_c⁄√˘i⁄_t
 *
c
;

680 
dSP
;

682 
°©us
 = 0;

684 
ENTER
;

685 
SAVETMPS
;

687 
	`PUSHMARK
(
•
);

689 
sv
 = 
	`sv_2m‹èl
(
	`sv_bÀss
(
	`√wRV_noöc
(
	`√wSViv
(
	`PTR2IV
(
r
))), 
ngöx
));

690 
	`XPUSHs
(
sv
);

692 i‡(
¨gs
) {

693 
	`EXTEND
(
•
, (
öçå_t
Ë
¨gs
[0]);

695 
i
 = 1; i <(
ngx_uöt_t
Ë
¨gs
[0]; i++) {

696 
	`PUSHs
(
	`sv_2m‹èl
(
¨gs
[
i
]));

700 
PUTBACK
;

702 
c
 = 
r
->
c⁄√˘i⁄
;

704 
n
 = 
	`ˇŒ_sv
(
sub
, 
G_EVAL
);

706 
SPAGAIN
;

708 i‡(
n
) {

709 i‡(
rv
 =
NULL
) {

710 
°©us
 = 
POPi
;

712 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

713 "ˇŒ_sv: %d", 
°©us
);

716 
löe
 = 
	`SvPVx
(
POPs
, 
n_a
);

717 
rv
->
Àn
 = 
n_a
;

719 
rv
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
n_a
);

720 i‡(
rv
->
d©a
 =
NULL
) {

721  
NGX_ERROR
;

724 
	`ngx_mem˝y
(
rv
->
d©a
, 
löe
, 
n_a
);

728 
PUTBACK
;

730 
FREETMPS
;

731 
LEAVE
;

735 i‡(
	`SvTRUE
(
ERRSV
)) {

737 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

738 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

740 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

741 "ˇŒ_sv(\"%V\"ËÁûed: \"%*s\"", 
h™dÀr
, 
Àn
 + 1, 
îr
);

743 i‡(
rv
) {

744  
NGX_ERROR
;

747  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

750 i‡(
n
 != 1) {

751 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

752 "ˇŒ_sv(\"%V\"Ëªtu∫ed %dÑesu…s", 
h™dÀr
, 
n
);

753 
°©us
 = 
NGX_OK
;

756 i‡(
rv
) {

757  
NGX_OK
;

760  (
ngx_öt_t
Ë
°©us
;

761 
	}
}

765 
	$ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
)

767 
u_ch¨
 *
p
;

769 
p
 = 
h™dÀr
->
d©a
; *p;Ö++) {

770 i‡(*
p
 !' ' && *∞!'\t' && *∞!
CR
 && *∞!
LF
) {

775 i‡(
	`ngx_°∫cmp
(
p
, "sub ", 4) == 0

776 || 
	`ngx_°∫cmp
(
p
, "sub{", 4) == 0

777 || 
	`ngx_°∫cmp
(
p
, "use ", 4) == 0)

779 *
sv
 = 
	`evÆ_pv
((*Ë
p
, 
FALSE
);

786 *
sv
 = 
NULL
;

787 
	}
}

791 
	$ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

793 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

795 
pmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_maö_c⁄f_t
));

796 i‡(
pmcf
 =
NULL
) {

797  
NULL
;

800 
pmcf
->
moduÀs
 = 
NGX_CONF_UNSET_PTR
;

801 
pmcf
->
ªquúes
 = 
NGX_CONF_UNSET_PTR
;

803  
pmcf
;

804 
	}
}

808 
	$ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

810 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
 = 
c⁄f
;

812 i‡(
pmcf
->
≥æ
 =
NULL
) {

813 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

814  
NGX_CONF_ERROR
;

818  
NGX_CONF_OK
;

819 
	}
}

822 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

825 
	$ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
)

827 
PîlI¡î¥ëî
 *
≥æ
 = 
d©a
;

829 
	`PERL_SET_CONTEXT
(
≥æ
);

831 (Ë
	`≥æ_de°ru˘
(
≥æ
);

833 
	`≥æ_‰ì
(
≥æ
);

835 i‡(
ngx_≥æ_ãrm
) {

836 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0, "perlÅerm");

838 
	`PERL_SYS_TERM
();

840 
	}
}

845 
ngx_öt_t


846 
	$ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

848 #i‡(
NGX_HTTP_SSI
)

849 
ngx_öt_t
 
rc
;

850 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

852 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

854 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
ngx_hâp_≥æ_ssi_comm™d
.
«me
,

855 &
ngx_hâp_≥æ_ssi_comm™d
, 
NGX_HASH_READONLY_KEY
);

857 i‡(
rc
 !
NGX_OK
) {

858 i‡(
rc
 =
NGX_BUSY
) {

859 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

861 &
ngx_hâp_≥æ_ssi_comm™d
.
«me
);

864  
NGX_ERROR
;

868  
NGX_OK
;

869 
	}
}

873 
	$ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

875 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

877 
∂cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_loc_c⁄f_t
));

878 i‡(
∂cf
 =
NULL
) {

879  
NULL
;

888  
∂cf
;

889 
	}
}

893 
	$ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

895 
ngx_hâp_≥æ_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

896 
ngx_hâp_≥æ_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

898 i‡(
c⁄f
->
sub
 =
NULL
) {

899 
c⁄f
->
sub
 = 
¥ev
->sub;

900 
c⁄f
->
h™dÀr
 = 
¥ev
->handler;

903  
NGX_CONF_OK
;

904 
	}
}

908 
	$ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

910 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

912 
ngx_°r_t
 *
vÆue
;

913 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

914 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

916 
vÆue
 = 
cf
->
¨gs
->
ñts
;

918 i‡(
∂cf
->
h™dÀr
.
d©a
) {

919 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

920 "du∂iˇãÖî»h™dÀ∏\"%V\"", &
vÆue
[1]);

921  
NGX_CONF_ERROR
;

924 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

926 i‡(
pmcf
->
≥æ
 =
NULL
) {

927 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

928  
NGX_CONF_ERROR
;

932 
∂cf
->
h™dÀr
 = 
vÆue
[1];

936 
	`dTHXa
(
pmcf
->
≥æ
);

937 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

939 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[1], &
∂cf
->
sub
);

941 i‡(
∂cf
->
sub
 =&
PL_sv_undef
) {

942 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

943 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[1]);

944  
NGX_CONF_ERROR
;

947 i‡(
∂cf
->
sub
 =
NULL
) {

948 
∂cf
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[1].
d©a
, vÆue[1].
Àn
);

953 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

954 
˛cf
->
h™dÀr
 = 
ngx_hâp_≥æ_h™dÀr
;

956  
NGX_CONF_OK
;

957 
	}
}

961 
	$ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

963 
ngx_öt_t
 
ödex
;

964 
ngx_°r_t
 *
vÆue
;

965 
ngx_hâp_v¨übÀ_t
 *
v
;

966 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
;

967 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

969 
vÆue
 = 
cf
->
¨gs
->
ñts
;

971 i‡(
vÆue
[1].
d©a
[0] != '$') {

972 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

973 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

974  
NGX_CONF_ERROR
;

977 
vÆue
[1].
Àn
--;

978 
vÆue
[1].
d©a
++;

980 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

981 i‡(
v
 =
NULL
) {

982  
NGX_CONF_ERROR
;

985 
pv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_v¨übÀ_t
));

986 i‡(
pv
 =
NULL
) {

987  
NGX_CONF_ERROR
;

990 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

991 i‡(
ödex
 =
NGX_ERROR
) {

992  
NGX_CONF_ERROR
;

995 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

997 i‡(
pmcf
->
≥æ
 =
NULL
) {

998 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

999  
NGX_CONF_ERROR
;

1003 
pv
->
h™dÀr
 = 
vÆue
[2];

1007 
	`dTHXa
(
pmcf
->
≥æ
);

1008 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1010 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[2], &
pv
->
sub
);

1012 i‡(
pv
->
sub
 =&
PL_sv_undef
) {

1013 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

1014 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[2]);

1015  
NGX_CONF_ERROR
;

1018 i‡(
pv
->
sub
 =
NULL
) {

1019 
pv
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[2].
d©a
, vÆue[2].
Àn
);

1024 
v
->
gë_h™dÀr
 = 
ngx_hâp_≥æ_v¨übÀ
;

1025 
v
->
d©a
 = (
uöçå_t
Ë
pv
;

1027  
NGX_CONF_OK
;

1028 
	}
}

1031 
ngx_öt_t


1032 
	$ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

1034 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

1036 
pmcf
 = 
	`ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
ngx_hâp_≥æ_moduÀ
);

1038 i‡(
pmcf
) {

1039 
	`dTHXa
(
pmcf
->
≥æ
);

1040 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1044 
	`sv_£tiv
(
	`GvSV
(
	`gv_„tchpv
("$", 
TRUE
, 
SVt_PV
)), (
I32
Ë
ngx_pid
);

1047  
NGX_OK
;

1048 
	}
}

1052 
	$ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1054 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

1061 
ngx_≥æ_ãrm
 = 1;

1065 i‡(
ngöx_°ash
) {

1066 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cy˛e
->
log
, 0, "perlÅerm");

1068 (Ë
	`≥æ_de°ru˘
(
≥æ
);

1070 
	`≥æ_‰ì
(
≥æ
);

1072 
	`PERL_SYS_TERM
();

1076 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.h

8 #i‚de‡
_NGX_HTTP_PERL_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_PERL_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

15 
	~<ngöx.h
>

17 
	~<EXTERN.h
>

18 
	~<≥æ.h
>

21 
ngx_hâp_ªque°_t
 *
	tngöx
;

24 
ngx_°r_t
 
	mfûíame
;

25 
ngx_°r_t
 
	mªdúe˘_uri
;

26 
ngx_°r_t
 
	mªdúe˘_¨gs
;

28 
SV
 *
	m√xt
;

30 
ngx_uöt_t
 
	md⁄e
;

32 
ngx_¨øy_t
 *
	mv¨übÀs
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_hâp_ssi_˘x_t
 *
	mssi
;

37 } 
	tngx_hâp_≥æ_˘x_t
;

41 
ngx_uöt_t
 
	mhash
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_°r_t
 
	mvÆue
;

44 } 
	tngx_hâp_≥æ_v¨_t
;

47 
ngx_moduÀ_t
 
ngx_hâp_≥æ_moduÀ
;

54 #i‚de‡
PERL_IMPLICIT_CONTEXT


55 #unde‡
dTHXa


56 
	#dTHXa
(
a
)

	)

60 
boŸ_Dy«Lﬂdî
(
pTHX_
 
CV
* 
cv
);

63 
ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

	@src/http/ngx_http.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 *
ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_öt_t
 
ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
,

15 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

16 
ngx_öt_t
 
ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
,

17 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

18 
ngx_öt_t
 
ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

19 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

21 
ngx_öt_t
 
ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
,

22 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

23 
ngx_hâp_li°í_›t_t
 *
ls›t
);

24 
ngx_öt_t
 
ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
,

25 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

26 
ngx_hâp_li°í_›t_t
 *
ls›t
);

27 
ngx_öt_t
 
ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
,

28 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

30 *
ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
,

31 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

32 
ngx_uöt_t
 
˘x_ödex
);

33 *
ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

34 
ngx_queue_t
 *
loˇti⁄s
, **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

35 
ngx_uöt_t
 
˘x_ödex
);

36 
ngx_öt_t
 
ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

38 
ngx_öt_t
 
ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

39 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

40 
ngx_öt_t
 
ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
,

41 c⁄° 
ngx_queue_t
 *
two
);

42 
ngx_öt_t
 
ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_queue_t
 *
loˇti⁄s
);

44 
ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,

45 
ngx_queue_t
 *
q
);

46 
ngx_hâp_loˇti⁄_åì_node_t
 *

47 
ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

48 
size_t
 
¥efix
);

50 
ngx_öt_t
 
ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
,

51 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_¨øy_t
 *
p‹ts
);

52 
ngx_öt_t
 
ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
,

53 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

54 
ngx_öt_t
 
ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

55 
ngx_libc_cde˛
 
ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

56 c⁄° *
two
);

58 
ngx_öt_t
 
ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
,

59 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
);

60 
ngx_li°íög_t
 *
ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
,

61 
ngx_hâp_c⁄f_addr_t
 *
addr
);

62 
ngx_öt_t
 
ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

63 
ngx_hâp_c⁄f_addr_t
 *
addr
);

64 #i‡(
NGX_HAVE_INET6
)

65 
ngx_öt_t
 
ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

66 
ngx_hâp_c⁄f_addr_t
 *
addr
);

69 
ngx_uöt_t
 
	gngx_hâp_max_moduÀ
;

72 
	$ngx_öt_t
 (*
ngx_hâp_t›_hódî_fûãr
Ë(
ngx_hâp_ªque°_t
 *
r
);

73 
	$ngx_öt_t
 (*
ngx_hâp_t›_body_fûãr
Ë(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ch
);

76 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[] = {

77 
	`ngx_°rög
("text/html"),

78 
ngx_nuŒ_°rög


79 
	}
};

82 
ngx_comm™d_t
 
	gngx_hâp_comm™ds
[] = {

84 { 
ngx_°rög
("http"),

85 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

86 
ngx_hâp_block
,

89 
NULL
 },

91 
ngx_nuŒ_comm™d


95 
ngx_c‹e_moduÀ_t
 
	gngx_hâp_moduÀ_˘x
 = {

96 
ngx_°rög
("http"),

97 
NULL
,

98 
NULL


102 
ngx_moduÀ_t
 
	gngx_hâp_moduÀ
 = {

103 
NGX_MODULE_V1
,

104 &
ngx_hâp_moduÀ_˘x
,

105 
ngx_hâp_comm™ds
,

106 
NGX_CORE_MODULE
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NGX_MODULE_V1_PADDING


119 
	$ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

121 *
rv
;

122 
ngx_uöt_t
 
mi
, 
m
, 
s
;

123 
ngx_c⁄f_t
 
pcf
;

124 
ngx_hâp_moduÀ_t
 *
moduÀ
;

125 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

126 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

127 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

128 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

132 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

133 i‡(
˘x
 =
NULL
) {

134  
NGX_CONF_ERROR
;

137 *(
ngx_hâp_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

142 
ngx_hâp_max_moduÀ
 = 0;

143 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

144 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

148 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_hâp_max_moduÀ
++;

154 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

155 (*Ë* 
ngx_hâp_max_moduÀ
);

156 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

157  
NGX_CONF_ERROR
;

166 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

167 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

168  
NGX_CONF_ERROR
;

177 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

178 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

179  
NGX_CONF_ERROR
;

188 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

189 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

193 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

194 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

196 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

197 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

198 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

199  
NGX_CONF_ERROR
;

203 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

204 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

205 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

206  
NGX_CONF_ERROR
;

210 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

211 
˘x
->
loc_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

212 i‡(
˘x
->
loc_c⁄f
[
mi
] =
NULL
) {

213  
NGX_CONF_ERROR
;

218 
pcf
 = *
cf
;

219 
cf
->
˘x
 = ctx;

221 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

222 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

226 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

228 i‡(
moduÀ
->
¥ec⁄figuøti⁄
) {

229 i‡(
moduÀ
->
	`¥ec⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

230  
NGX_CONF_ERROR
;

237 
cf
->
moduÀ_ty≥
 = 
NGX_HTTP_MODULE
;

238 
cf
->
cmd_ty≥
 = 
NGX_HTTP_MAIN_CONF
;

239 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

241 i‡(
rv
 !
NGX_CONF_OK
) {

242 
Áûed
;

250 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

251 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

253 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

254 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

258 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

259 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

263 i‡(
moduÀ
->
öô_maö_c⁄f
) {

264 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

265 i‡(
rv
 !
NGX_CONF_OK
) {

266 
Áûed
;

270 
rv
 = 
	`ngx_hâp_mîge_£rvîs
(
cf
, 
cmcf
, 
moduÀ
, 
mi
);

271 i‡(
rv
 !
NGX_CONF_OK
) {

272 
Áûed
;

279 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

281 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

283 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
cscÂ
[
s
], 
˛cf
Ë!
NGX_OK
) {

284  
NGX_CONF_ERROR
;

287 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

288  
NGX_CONF_ERROR
;

293 i‡(
	`ngx_hâp_öô_pha£s
(
cf
, 
cmcf
Ë!
NGX_OK
) {

294  
NGX_CONF_ERROR
;

297 i‡(
	`ngx_hâp_öô_hódîs_ö_hash
(
cf
, 
cmcf
Ë!
NGX_OK
) {

298  
NGX_CONF_ERROR
;

302 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

303 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

307 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

309 i‡(
moduÀ
->
po°c⁄figuøti⁄
) {

310 i‡(
moduÀ
->
	`po°c⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

311  
NGX_CONF_ERROR
;

316 i‡(
	`ngx_hâp_v¨übÀs_öô_v¨s
(
cf
Ë!
NGX_OK
) {

317  
NGX_CONF_ERROR
;

325 *
cf
 = 
pcf
;

328 i‡(
	`ngx_hâp_öô_pha£_h™dÀrs
(
cf
, 
cmcf
Ë!
NGX_OK
) {

329  
NGX_CONF_ERROR
;

335 i‡(
	`ngx_hâp_›timize_£rvîs
(
cf
, 
cmcf
, cmcf->
p‹ts
Ë!
NGX_OK
) {

336  
NGX_CONF_ERROR
;

339  
NGX_CONF_OK
;

341 
Áûed
:

343 *
cf
 = 
pcf
;

345  
rv
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

352 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
,

353 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

354 !
NGX_OK
)

356  
NGX_ERROR
;

359 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
,

360 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

361 !
NGX_OK
)

363  
NGX_ERROR
;

366 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
,

367 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

368 !
NGX_OK
)

370  
NGX_ERROR
;

373 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
,

374 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

375 !
NGX_OK
)

377  
NGX_ERROR
;

380 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
,

381 
cf
->
poﬁ
, 2, (
ngx_hâp_h™dÀr_±
))

382 !
NGX_OK
)

384  
NGX_ERROR
;

387 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
,

388 
cf
->
poﬁ
, 4, (
ngx_hâp_h™dÀr_±
))

389 !
NGX_OK
)

391  
NGX_ERROR
;

394 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
,

395 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

396 !
NGX_OK
)

398  
NGX_ERROR
;

401  
NGX_OK
;

402 
	}
}

405 
ngx_öt_t


406 
	$ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

408 
ngx_¨øy_t
 
hódîs_ö
;

409 
ngx_hash_key_t
 *
hk
;

410 
ngx_hash_öô_t
 
hash
;

411 
ngx_hâp_hódî_t
 *
hódî
;

413 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

414 !
NGX_OK
)

416  
NGX_ERROR
;

419 
hódî
 = 
ngx_hâp_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

420 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

421 i‡(
hk
 =
NULL
) {

422  
NGX_ERROR
;

425 
hk
->
key
 = 
hódî
->
«me
;

426 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

427 
hk
->
vÆue
 = 
hódî
;

430 
hash
.hash = &
cmcf
->
hódîs_ö_hash
;

431 
hash
.
key
 = 
ngx_hash_key_lc
;

432 
hash
.
max_size
 = 512;

433 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

434 
hash
.
«me
 = "headers_in_hash";

435 
hash
.
poﬁ
 = 
cf
->pool;

436 
hash
.
ãmp_poﬁ
 = 
NULL
;

438 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

439  
NGX_ERROR
;

442  
NGX_OK
;

443 
	}
}

446 
ngx_öt_t


447 
	$ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

449 
ngx_öt_t
 
j
;

450 
ngx_uöt_t
 
i
, 
n
;

451 
ngx_uöt_t
 
föd_c⁄fig_ödex
, 
u£_ªwrôe
, 
u£_ac˚ss
;

452 
ngx_hâp_h™dÀr_±
 *
h
;

453 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

454 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

456 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

457 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

458 
föd_c⁄fig_ödex
 = 0;

459 
u£_ªwrôe
 = 
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

460 
u£_ac˚ss
 = 
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

462 
n
 = 
u£_ªwrôe
 + 
u£_ac˚ss
 + 
cmcf
->
åy_fûes
 + 1 ;

464 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

465 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

468 
ph
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

469 
n
 * (
ngx_hâp_pha£_h™dÀr_t
) + (*));

470 i‡(
ph
 =
NULL
) {

471  
NGX_ERROR
;

474 
cmcf
->
pha£_ígöe
.
h™dÀrs
 = 
ph
;

475 
n
 = 0;

477 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

478 
h
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
ñts
;

480 
i
) {

482 
NGX_HTTP_SERVER_REWRITE_PHASE
:

483 i‡(
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

484 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = 
n
;

486 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

490 
NGX_HTTP_FIND_CONFIG_PHASE
:

491 
föd_c⁄fig_ödex
 = 
n
;

493 
ph
->
checkî
 = 
ngx_hâp_c‹e_föd_c⁄fig_pha£
;

494 
n
++;

495 
ph
++;

499 
NGX_HTTP_REWRITE_PHASE
:

500 i‡(
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

501 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = 
n
;

503 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

507 
NGX_HTTP_POST_REWRITE_PHASE
:

508 i‡(
u£_ªwrôe
) {

509 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ªwrôe_pha£
;

510 
ph
->
√xt
 = 
föd_c⁄fig_ödex
;

511 
n
++;

512 
ph
++;

517 
NGX_HTTP_ACCESS_PHASE
:

518 
checkî
 = 
ngx_hâp_c‹e_ac˚ss_pha£
;

519 
n
++;

522 
NGX_HTTP_POST_ACCESS_PHASE
:

523 i‡(
u£_ac˚ss
) {

524 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ac˚ss_pha£
;

525 
ph
->
√xt
 = 
n
;

526 
ph
++;

531 
NGX_HTTP_TRY_FILES_PHASE
:

532 i‡(
cmcf
->
åy_fûes
) {

533 
ph
->
checkî
 = 
ngx_hâp_c‹e_åy_fûes_pha£
;

534 
n
++;

535 
ph
++;

540 
NGX_HTTP_CONTENT_PHASE
:

541 
checkî
 = 
ngx_hâp_c‹e_c⁄ã¡_pha£
;

545 
checkî
 = 
ngx_hâp_c‹e_gíîic_pha£
;

548 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

550 
j
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
 - 1; j >=0; j--) {

551 
ph
->
checkî
 = checker;

552 
ph
->
h™dÀr
 = 
h
[
j
];

553 
ph
->
√xt
 = 
n
;

554 
ph
++;

558  
NGX_OK
;

559 
	}
}

563 
	$ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

564 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

566 *
rv
;

567 
ngx_uöt_t
 
s
;

568 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

569 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

570 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

572 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

573 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

574 
ßved
 = *
˘x
;

575 
rv
 = 
NGX_CONF_OK
;

577 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

581 
˘x
->
§v_c⁄f
 = 
cscÂ
[
s
]->ctx->srv_conf;

583 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

584 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
, 
ßved
.
§v_c⁄f
[
˘x_ödex
],

585 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
˘x_ödex
]);

586 i‡(
rv
 !
NGX_CONF_OK
) {

587 
Áûed
;

591 i‡(
moduÀ
->
mîge_loc_c⁄f
) {

595 
˘x
->
loc_c⁄f
 = 
cscÂ
[
s
]->ctx->loc_conf;

597 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
ßved
.
loc_c⁄f
[
˘x_ödex
],

598 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
˘x_ödex
]);

599 i‡(
rv
 !
NGX_CONF_OK
) {

600 
Áûed
;

605 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

607 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
,

608 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
,

609 
moduÀ
, 
˘x_ödex
);

610 i‡(
rv
 !
NGX_CONF_OK
) {

611 
Áûed
;

616 
Áûed
:

618 *
˘x
 = 
ßved
;

620  
rv
;

621 
	}
}

625 
	$ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

626 **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

628 *
rv
;

629 
ngx_queue_t
 *
q
;

630 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

631 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

632 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

634 i‡(
loˇti⁄s
 =
NULL
) {

635  
NGX_CONF_OK
;

638 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

639 
ßved
 = *
˘x
;

641 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

642 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

643 
q
 = 
	`ngx_queue_√xt
(q))

645 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

647 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

648 
˘x
->
loc_c⁄f
 = 
˛cf
->loc_conf;

650 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
loc_c⁄f
[
˘x_ödex
],

651 
˛cf
->
loc_c⁄f
[
˘x_ödex
]);

652 i‡(
rv
 !
NGX_CONF_OK
) {

653  
rv
;

656 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
, clcf->
loc_c⁄f
,

657 
moduÀ
, 
˘x_ödex
);

658 i‡(
rv
 !
NGX_CONF_OK
) {

659  
rv
;

663 *
˘x
 = 
ßved
;

665  
NGX_CONF_OK
;

666 
	}
}

669 
ngx_öt_t


670 
	$ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

671 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

673 
ngx_uöt_t
 
n
;

674 
ngx_queue_t
 *
q
, *
loˇti⁄s
, *
«med
, 
èû
;

675 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

676 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

677 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

678 #i‡(
NGX_PCRE
)

679 
ngx_uöt_t
 
r
;

680 
ngx_queue_t
 *
ªgex
;

683 
loˇti⁄s
 = 
p˛cf
->locations;

685 i‡(
loˇti⁄s
 =
NULL
) {

686  
NGX_OK
;

689 
	`ngx_queue_s‹t
(
loˇti⁄s
, 
ngx_hâp_cmp_loˇti⁄s
);

691 
«med
 = 
NULL
;

692 
n
 = 0;

693 #i‡(
NGX_PCRE
)

694 
ªgex
 = 
NULL
;

695 
r
 = 0;

698 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

699 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

700 
q
 = 
	`ngx_queue_√xt
(q))

702 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

704 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

706 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
NULL
, 
˛cf
Ë!
NGX_OK
) {

707  
NGX_ERROR
;

710 #i‡(
NGX_PCRE
)

712 i‡(
˛cf
->
ªgex
) {

713 
r
++;

715 i‡(
ªgex
 =
NULL
) {

716 
ªgex
 = 
q
;

724 i‡(
˛cf
->
«med
) {

725 
n
++;

727 i‡(
«med
 =
NULL
) {

728 
«med
 = 
q
;

734 i‡(
˛cf
->
n⁄ame
) {

739 i‡(
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

740 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

743 i‡(
«med
) {

744 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

745 (
n
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 **));

746 i‡(
˛cÂ
 =
NULL
) {

747  
NGX_ERROR
;

750 
cscf
->
«med_loˇti⁄s
 = 
˛cÂ
;

752 
q
 = 
«med
;

753 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

754 
q
 = 
	`ngx_queue_√xt
(q))

756 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

758 *(
˛cÂ
++Ë
lq
->
exa˘
;

761 *
˛cÂ
 = 
NULL
;

763 
	`ngx_queue_•lô
(
loˇti⁄s
, 
«med
, &
èû
);

766 #i‡(
NGX_PCRE
)

768 i‡(
ªgex
) {

770 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

771 (
r
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 **));

772 i‡(
˛cÂ
 =
NULL
) {

773  
NGX_ERROR
;

776 
p˛cf
->
ªgex_loˇti⁄s
 = 
˛cÂ
;

778 
q
 = 
ªgex
;

779 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

780 
q
 = 
	`ngx_queue_√xt
(q))

782 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

784 *(
˛cÂ
++Ë
lq
->
exa˘
;

787 *
˛cÂ
 = 
NULL
;

789 
	`ngx_queue_•lô
(
loˇti⁄s
, 
ªgex
, &
èû
);

794  
NGX_OK
;

795 
	}
}

798 
ngx_öt_t


799 
	$ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

800 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

802 
ngx_queue_t
 *
q
, *
loˇti⁄s
;

803 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

804 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

806 
loˇti⁄s
 = 
p˛cf
->locations;

808 i‡(
loˇti⁄s
 =
NULL
) {

809  
NGX_OK
;

812 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

813  
NGX_OK
;

816 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

817 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

818 
q
 = 
	`ngx_queue_√xt
(q))

820 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

822 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

824 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

825  
NGX_ERROR
;

829 i‡(
	`ngx_hâp_joö_exa˘_loˇti⁄s
(
cf
, 
loˇti⁄s
Ë!
NGX_OK
) {

830  
NGX_ERROR
;

833 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_hód
(locations));

835 
p˛cf
->
°©ic_loˇti⁄s
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 0);

836 i‡(
p˛cf
->
°©ic_loˇti⁄s
 =
NULL
) {

837  
NGX_ERROR
;

840  
NGX_OK
;

841 
	}
}

844 
ngx_öt_t


845 
	$ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

846 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
)

848 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

850 i‡(*
loˇti⁄s
 =
NULL
) {

851 *
loˇti⁄s
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
,

852 (
ngx_hâp_loˇti⁄_queue_t
));

853 i‡(*
loˇti⁄s
 =
NULL
) {

854  
NGX_ERROR
;

857 
	`ngx_queue_öô
(*
loˇti⁄s
);

860 
lq
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
, (
ngx_hâp_loˇti⁄_queue_t
));

861 i‡(
lq
 =
NULL
) {

862  
NGX_ERROR
;

865 i‡(
˛cf
->
exa˘_m©ch


866 #i‡(
NGX_PCRE
)

867 || 
˛cf
->
ªgex


869 || 
˛cf
->
«med
 || clcf->
n⁄ame
)

871 
lq
->
exa˘
 = 
˛cf
;

872 
lq
->
ö˛usive
 = 
NULL
;

875 
lq
->
exa˘
 = 
NULL
;

876 
lq
->
ö˛usive
 = 
˛cf
;

879 
lq
->
«me
 = &
˛cf
->name;

880 
lq
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

881 
lq
->
löe
 = 
cf
->
c⁄f_fûe
->line;

883 
	`ngx_queue_öô
(&
lq
->
li°
);

885 
	`ngx_queue_ö£π_èû
(*
loˇti⁄s
, &
lq
->
queue
);

887  
NGX_OK
;

888 
	}
}

891 
ngx_öt_t


892 
	$ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
, c⁄°Çgx_queue_à*
two
)

894 
ngx_öt_t
 
rc
;

895 
ngx_hâp_c‹e_loc_c⁄f_t
 *
fú°
, *
£c⁄d
;

896 
ngx_hâp_loˇti⁄_queue_t
 *
lq1
, *
lq2
;

898 
lq1
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
⁄e
;

899 
lq2
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
two
;

901 
fú°
 = 
lq1
->
exa˘
 ?Üq1->exa˘ :Üq1->
ö˛usive
;

902 
£c⁄d
 = 
lq2
->
exa˘
 ?Üq2->exa˘ :Üq2->
ö˛usive
;

904 i‡(
fú°
->
n⁄ame
 && !
£c⁄d
->noname) {

909 i‡(!
fú°
->
n⁄ame
 && 
£c⁄d
->noname) {

914 i‡(
fú°
->
n⁄ame
 || 
£c⁄d
->noname) {

919 i‡(
fú°
->
«med
 && !
£c⁄d
->named) {

924 i‡(!
fú°
->
«med
 && 
£c⁄d
->named) {

929 i‡(
fú°
->
«med
 && 
£c⁄d
->named) {

930  
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

933 #i‡(
NGX_PCRE
)

935 i‡(
fú°
->
ªgex
 && !
£c⁄d
->regex) {

940 i‡(!
fú°
->
ªgex
 && 
£c⁄d
->regex) {

945 i‡(
fú°
->
ªgex
 || 
£c⁄d
->regex) {

952 
rc
 = 
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

954 i‡(
rc
 =0 && !
fú°
->
exa˘_m©ch
 && 
£c⁄d
->exact_match) {

959  
rc
;

960 
	}
}

963 
ngx_öt_t


964 
	$ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
)

966 
ngx_queue_t
 *
q
, *
x
;

967 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

969 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

971 
q
 !
	`ngx_queue_œ°
(
loˇti⁄s
)) {

973 
x
 = 
	`ngx_queue_√xt
(
q
);

975 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

976 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

978 i‡(
	`ngx_°rcmp
(
lq
->
«me
->
d©a
, 
lx
->name->data) == 0) {

980 i‡((
lq
->
exa˘
 && 
lx
->exa˘Ë|| (lq->
ö˛usive
 &&Üx->inclusive)) {

981 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

983 
lx
->
«me
,Üx->
fûe_«me
,Üx->
löe
);

985  
NGX_ERROR
;

988 
lq
->
ö˛usive
 = 
lx
->inclusive;

990 
	`ngx_queue_ªmove
(
x
);

995 
q
 = 
	`ngx_queue_√xt
(q);

998  
NGX_OK
;

999 
	}
}

1003 
	$ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,Çgx_queue_à*
q
)

1005 
u_ch¨
 *
«me
;

1006 
size_t
 
Àn
;

1007 
ngx_queue_t
 *
x
, 
èû
;

1008 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

1010 i‡(
q
 =
	`ngx_queue_œ°
(
loˇti⁄s
)) {

1014 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1016 i‡(
lq
->
ö˛usive
 =
NULL
) {

1017 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_√xt
(
q
));

1021 
Àn
 = 
lq
->
«me
->len;

1022 
«me
 = 
lq
->«me->
d©a
;

1024 
x
 = 
	`ngx_queue_√xt
(
q
);

1025 
x
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

1026 
x
 = 
	`ngx_queue_√xt
(x))

1028 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

1030 i‡(
Àn
 > 
lx
->
«me
->len

1031 || (
	`ngx_°∫cmp
(
«me
, 
lx
->«me->
d©a
, 
Àn
) != 0))

1037 
q
 = 
	`ngx_queue_√xt
(q);

1039 i‡(
q
 =
x
) {

1040 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1044 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1045 
	`ngx_queue_add
(&
lq
->
li°
, &
èû
);

1047 i‡(
x
 =
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

1048 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1052 
	`ngx_queue_•lô
(&
lq
->
li°
, 
x
, &
èû
);

1053 
	`ngx_queue_add
(
loˇti⁄s
, &
èû
);

1055 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1057 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1058 
	}
}

1066 
ngx_hâp_loˇti⁄_åì_node_t
 *

1067 
	$ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

1068 
size_t
 
¥efix
)

1070 
size_t
 
Àn
;

1071 
ngx_queue_t
 *
q
, 
èû
;

1072 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

1073 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
;

1075 
q
 = 
	`ngx_queue_middÀ
(
loˇti⁄s
);

1077 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1078 
Àn
 = 
lq
->
«me
->À¿- 
¥efix
;

1080 
node
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1081 
	`off£tof
(
ngx_hâp_loˇti⁄_åì_node_t
, 
«me
Ë+ 
Àn
);

1082 i‡(
node
 =
NULL
) {

1083  
NULL
;

1086 
node
->
À·
 = 
NULL
;

1087 
node
->
right
 = 
NULL
;

1088 
node
->
åì
 = 
NULL
;

1089 
node
->
exa˘
 = 
lq
->exact;

1090 
node
->
ö˛usive
 = 
lq
->inclusive;

1092 
node
->
auto_ªdúe˘
 = (
u_ch¨
Ë((
lq
->
exa˘
 &&Üq->exact->auto_redirect)

1093 || (
lq
->
ö˛usive
 &&Üq->ö˛usive->
auto_ªdúe˘
));

1095 
node
->
Àn
 = (
u_ch¨
)Üen;

1096 
	`ngx_mem˝y
(
node
->
«me
, &
lq
->«me->
d©a
[
¥efix
], 
Àn
);

1098 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1100 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

1105 
ö˛usive
;

1108 
node
->
À·
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 
¥efix
);

1109 i‡(
node
->
À·
 =
NULL
) {

1110  
NULL
;

1113 
	`ngx_queue_ªmove
(
q
);

1115 i‡(
	`ngx_queue_em±y
(&
èû
)) {

1116 
ö˛usive
;

1119 
node
->
right
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
èû
, 
¥efix
);

1120 i‡(
node
->
right
 =
NULL
) {

1121  
NULL
;

1124 
ö˛usive
:

1126 i‡(
	`ngx_queue_em±y
(&
lq
->
li°
)) {

1127  
node
;

1130 
node
->
åì
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
lq
->
li°
, 
¥efix
 + 
Àn
);

1131 i‡(
node
->
åì
 =
NULL
) {

1132  
NULL
;

1135  
node
;

1136 
	}
}

1139 
ngx_öt_t


1140 
	$ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1141 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1143 
ö_p‹t_t
 
p
;

1144 
ngx_uöt_t
 
i
;

1145 
sockaddr
 *
ß
;

1146 
sockaddr_ö
 *
sö
;

1147 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1148 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1149 #i‡(
NGX_HAVE_INET6
)

1150 
sockaddr_ö6
 *
sö6
;

1153 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1155 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1156 
cmcf
->
p‹ts
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 2,

1157 (
ngx_hâp_c⁄f_p‹t_t
));

1158 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1159  
NGX_ERROR
;

1163 
ß
 = &
ls›t
->
u
.
sockaddr
;

1165 
ß
->
ß_Ámûy
) {

1167 #i‡(
NGX_HAVE_INET6
)

1168 
AF_INET6
:

1169 
sö6
 = &
ls›t
->
u
.
sockaddr_ö6
;

1170 
p
 = 
sö6
->
sö6_p‹t
;

1174 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1175 
AF_UNIX
:

1176 
p
 = 0;

1181 
sö
 = &
ls›t
->
u
.
sockaddr_ö
;

1182 
p
 = 
sö
->
sö_p‹t
;

1186 
p‹t
 = 
cmcf
->
p‹ts
->
ñts
;

1187 
i
 = 0; i < 
cmcf
->
p‹ts
->
√…s
; i++) {

1189 i‡(
p
 !
p‹t
[
i
].p‹à|| 
ß
->
ß_Ámûy
 !p‹t[i].
Ámûy
) {

1195  
	`ngx_hâp_add_addªs£s
(
cf
, 
cscf
, &
p‹t
[
i
], 
ls›t
);

1200 
p‹t
 = 
	`ngx_¨øy_push
(
cmcf
->
p‹ts
);

1201 i‡(
p‹t
 =
NULL
) {

1202  
NGX_ERROR
;

1205 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

1206 
p‹t
->p‹à
p
;

1207 
p‹t
->
addrs
.
ñts
 = 
NULL
;

1209  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1210 
	}
}

1213 
ngx_öt_t


1214 
	$ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1215 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1217 
u_ch¨
 *
p
;

1218 
size_t
 
Àn
, 
off
;

1219 
ngx_uöt_t
 
i
, 
deÁu…_£rvî
;

1220 
sockaddr
 *
ß
;

1221 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1222 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1223 
sockaddr_un
 *
ßun
;

1225 #i‡(
NGX_HTTP_SSL
)

1226 
ngx_uöt_t
 
s¶
;

1234 
ß
 = &
ls›t
->
u
.
sockaddr
;

1236 
ß
->
ß_Ámûy
) {

1238 #i‡(
NGX_HAVE_INET6
)

1239 
AF_INET6
:

1240 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

1241 
Àn
 = 16;

1245 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1246 
AF_UNIX
:

1247 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

1248 
Àn
 = (
ßun
->
sun_∑th
);

1253 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

1254 
Àn
 = 4;

1258 
p
 = 
ls›t
->
u
.
sockaddr_d©a
 + 
off
;

1260 
addr
 = 
p‹t
->
addrs
.
ñts
;

1262 
i
 = 0; i < 
p‹t
->
addrs
.
√…s
; i++) {

1264 i‡(
	`ngx_memcmp
(
p
, 
addr
[
i
].
›t
.
u
.
sockaddr_d©a
 + 
off
, 
Àn
) != 0) {

1270 i‡(
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, &
addr
[
i
]Ë!
NGX_OK
) {

1271  
NGX_ERROR
;

1275 
deÁu…_£rvî
 = 
addr
[
i
].
›t
.default_server;

1277 #i‡(
NGX_HTTP_SSL
)

1278 
s¶
 = 
ls›t
->s¶ || 
addr
[
i
].
›t
.ssl;

1281 i‡(
ls›t
->
£t
) {

1283 i‡(
addr
[
i
].
›t
.
£t
) {

1284 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1285 "du∂iˇãÜi°í o±i⁄†f‹ %s", 
addr
[
i
].
›t
.addr);

1286  
NGX_ERROR
;

1289 
addr
[
i
].
›t
 = *
ls›t
;

1294 i‡(
ls›t
->
deÁu…_£rvî
) {

1296 i‡(
deÁu…_£rvî
) {

1297 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1298 "®du∂iˇã deÁu… sîvî f‹ %s", 
addr
[
i
].
›t
.addr);

1299  
NGX_ERROR
;

1302 
deÁu…_£rvî
 = 1;

1303 
addr
[
i
].
deÁu…_£rvî
 = 
cscf
;

1306 
addr
[
i
].
›t
.
deÁu…_£rvî
 = default_server;

1307 #i‡(
NGX_HTTP_SSL
)

1308 
addr
[
i
].
›t
.
s¶
 = ssl;

1311  
NGX_OK
;

1316  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1317 
	}
}

1325 
ngx_öt_t


1326 
	$ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1327 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1329 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1331 i‡(
p‹t
->
addrs
.
ñts
 =
NULL
) {

1332 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 4,

1333 (
ngx_hâp_c⁄f_addr_t
))

1334 !
NGX_OK
)

1336  
NGX_ERROR
;

1340 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

1341 i‡(
addr
 =
NULL
) {

1342  
NGX_ERROR
;

1345 
addr
->
›t
 = *
ls›t
;

1346 
addr
->
hash
.
buckës
 = 
NULL
;

1347 
addr
->
hash
.
size
 = 0;

1348 
addr
->
wc_hód
 = 
NULL
;

1349 
addr
->
wc_èû
 = 
NULL
;

1350 #i‡(
NGX_PCRE
)

1351 
addr
->
ƒegex
 = 0;

1352 
addr
->
ªgex
 = 
NULL
;

1354 
addr
->
deÁu…_£rvî
 = 
cscf
;

1355 
addr
->
£rvîs
.
ñts
 = 
NULL
;

1357  
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, 
addr
);

1358 
	}
}

1363 
ngx_öt_t


1364 
	$ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1365 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1367 
ngx_uöt_t
 
i
;

1368 
ngx_hâp_c‹e_§v_c⁄f_t
 **
£rvî
;

1370 i‡(
addr
->
£rvîs
.
ñts
 =
NULL
) {

1371 i‡(
	`ngx_¨øy_öô
(&
addr
->
£rvîs
, 
cf
->
ãmp_poﬁ
, 4,

1372 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

1373 !
NGX_OK
)

1375  
NGX_ERROR
;

1379 
£rvî
 = 
addr
->
£rvîs
.
ñts
;

1380 
i
 = 0; i < 
addr
->
£rvîs
.
√…s
; i++) {

1381 i‡(
£rvî
[
i
] =
cscf
) {

1382 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1383 "®du∂iˇãÜi°í %s", 
addr
->
›t
.addr);

1384  
NGX_ERROR
;

1389 
£rvî
 = 
	`ngx_¨øy_push
(&
addr
->
£rvîs
);

1390 i‡(
£rvî
 =
NULL
) {

1391  
NGX_ERROR
;

1394 *
£rvî
 = 
cscf
;

1396  
NGX_OK
;

1397 
	}
}

1400 
ngx_öt_t


1401 
	$ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1402 
ngx_¨øy_t
 *
p‹ts
)

1404 
ngx_uöt_t
 
p
, 
a
;

1405 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1406 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1408 i‡(
p‹ts
 =
NULL
) {

1409  
NGX_OK
;

1412 
p‹t
 = 
p‹ts
->
ñts
;

1413 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

1415 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

1416 (
ngx_hâp_c⁄f_addr_t
), 
ngx_hâp_cmp_c⁄f_addrs
);

1423 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

1424 
a
 = 0;á < 
p‹t
[
p
].
addrs
.
√…s
;á++) {

1426 i‡(
addr
[
a
].
£rvîs
.
√…s
 > 1

1427 #i‡(
NGX_PCRE
)

1428 || 
addr
[
a
].
deÁu…_£rvî
->
ˇ±uªs


1432 i‡(
	`ngx_hâp_£rvî_«mes
(
cf
, 
cmcf
, &
addr
[
a
]Ë!
NGX_OK
) {

1433  
NGX_ERROR
;

1438 i‡(
	`ngx_hâp_öô_li°íög
(
cf
, &
p‹t
[
p
]Ë!
NGX_OK
) {

1439  
NGX_ERROR
;

1443  
NGX_OK
;

1444 
	}
}

1447 
ngx_öt_t


1448 
	$ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1449 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1451 
ngx_öt_t
 
rc
;

1452 
ngx_uöt_t
 
n
, 
s
;

1453 
ngx_hash_öô_t
 
hash
;

1454 
ngx_hash_keys_¨øys_t
 
ha
;

1455 
ngx_hâp_£rvî_«me_t
 *
«me
;

1456 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

1457 #i‡(
NGX_PCRE
)

1458 
ngx_uöt_t
 
ªgex
, 
i
;

1460 
ªgex
 = 0;

1463 
	`ngx_memzîo
(&
ha
, (
ngx_hash_keys_¨øys_t
));

1465 
ha
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(16384, 
cf
->
log
);

1466 i‡(
ha
.
ãmp_poﬁ
 =
NULL
) {

1467  
NGX_ERROR
;

1470 
ha
.
poﬁ
 = 
cf
->pool;

1472 i‡(
	`ngx_hash_keys_¨øy_öô
(&
ha
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

1473 
Áûed
;

1476 
cscÂ
 = 
addr
->
£rvîs
.
ñts
;

1478 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1480 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1482 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1484 #i‡(
NGX_PCRE
)

1485 i‡(
«me
[
n
].
ªgex
) {

1486 
ªgex
++;

1491 
rc
 = 
	`ngx_hash_add_key
(&
ha
, &
«me
[
n
].«me,Çame[n].
£rvî
,

1492 
NGX_HASH_WILDCARD_KEY
);

1494 i‡(
rc
 =
NGX_ERROR
) {

1495  
NGX_ERROR
;

1498 i‡(
rc
 =
NGX_DECLINED
) {

1499 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1501 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1502  
NGX_ERROR
;

1505 i‡(
rc
 =
NGX_BUSY
) {

1506 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

1508 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1513 
hash
.
key
 = 
ngx_hash_key_lc
;

1514 
hash
.
max_size
 = 
cmcf
->
£rvî_«mes_hash_max_size
;

1515 
hash
.
buckë_size
 = 
cmcf
->
£rvî_«mes_hash_buckë_size
;

1516 
hash
.
«me
 = "server_names_hash";

1517 
hash
.
poﬁ
 = 
cf
->pool;

1519 i‡(
ha
.
keys
.
√…s
) {

1520 
hash
.hash = &
addr
->hash;

1521 
hash
.
ãmp_poﬁ
 = 
NULL
;

1523 i‡(
	`ngx_hash_öô
(&
hash
, 
ha
.
keys
.
ñts
, ha.keys.
√…s
Ë!
NGX_OK
) {

1524 
Áûed
;

1528 i‡(
ha
.
dns_wc_hód
.
√…s
) {

1530 
	`ngx_qs‹t
(
ha
.
dns_wc_hód
.
ñts
, (
size_t
Ëha.dns_wc_hód.
√…s
,

1531 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1533 
hash
.hash = 
NULL
;

1534 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1536 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_hód
.
ñts
,

1537 
ha
.
dns_wc_hód
.
√…s
)

1538 !
NGX_OK
)

1540 
Áûed
;

1543 
addr
->
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1546 i‡(
ha
.
dns_wc_èû
.
√…s
) {

1548 
	`ngx_qs‹t
(
ha
.
dns_wc_èû
.
ñts
, (
size_t
Ëha.dns_wc_èû.
√…s
,

1549 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1551 
hash
.hash = 
NULL
;

1552 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1554 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_èû
.
ñts
,

1555 
ha
.
dns_wc_èû
.
√…s
)

1556 !
NGX_OK
)

1558 
Áûed
;

1561 
addr
->
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1564 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1566 #i‡(
NGX_PCRE
)

1568 i‡(
ªgex
 == 0) {

1569  
NGX_OK
;

1572 
addr
->
ƒegex
 = 
ªgex
;

1573 
addr
->
ªgex
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñegex * (
ngx_hâp_£rvî_«me_t
));

1574 i‡(
addr
->
ªgex
 =
NULL
) {

1575  
NGX_ERROR
;

1578 
i
 = 0;

1580 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1582 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1584 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1585 i‡(
«me
[
n
].
ªgex
) {

1586 
addr
->
ªgex
[
i
++] = 
«me
[
n
];

1593  
NGX_OK
;

1595 
Áûed
:

1597 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1599  
NGX_ERROR
;

1600 
	}
}

1603 
ngx_öt_t


1604 
	$ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

1606 
ngx_hâp_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

1608 
fú°
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
⁄e
;

1609 
£c⁄d
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
two
;

1611 i‡(
fú°
->
›t
.
wûdˇrd
) {

1616 i‡(
fú°
->
›t
.
böd
 && !
£c⁄d
->opt.bind) {

1621 i‡(!
fú°
->
›t
.
böd
 && 
£c⁄d
->opt.bind) {

1629 
	}
}

1632 
ngx_libc_cde˛


1633 
	$ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

1635 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

1637 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

1638 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

1640  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

1641 
	}
}

1644 
ngx_öt_t


1645 
	$ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
)

1647 
ngx_uöt_t
 
i
, 
œ°
, 
böd_wûdˇrd
;

1648 
ngx_li°íög_t
 *
ls
;

1649 
ngx_hâp_p‹t_t
 *
hp‹t
;

1650 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1652 
addr
 = 
p‹t
->
addrs
.
ñts
;

1653 
œ°
 = 
p‹t
->
addrs
.
√…s
;

1662 i‡(
addr
[
œ°
 - 1].
›t
.
wûdˇrd
) {

1663 
addr
[
œ°
 - 1].
›t
.
böd
 = 1;

1664 
böd_wûdˇrd
 = 1;

1667 
böd_wûdˇrd
 = 0;

1670 
i
 = 0;

1672 
i
 < 
œ°
) {

1674 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
›t
.
böd
) {

1675 
i
++;

1679 
ls
 = 
	`ngx_hâp_add_li°íög
(
cf
, &
addr
[
i
]);

1680 i‡(
ls
 =
NULL
) {

1681  
NGX_ERROR
;

1684 
hp‹t
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_p‹t_t
));

1685 i‡(
hp‹t
 =
NULL
) {

1686  
NGX_ERROR
;

1689 
ls
->
£rvîs
 = 
hp‹t
;

1691 i‡(
i
 =
œ°
 - 1) {

1692 
hp‹t
->
«ddrs
 = 
œ°
;

1695 
hp‹t
->
«ddrs
 = 1;

1696 
i
 = 0;

1699 
ls
->
sockaddr
->
ß_Ámûy
) {

1701 #i‡(
NGX_HAVE_INET6
)

1702 
AF_INET6
:

1703 i‡(
	`ngx_hâp_add_addrs6
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1704  
NGX_ERROR
;

1709 i‡(
	`ngx_hâp_add_addrs
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1710  
NGX_ERROR
;

1715 
addr
++;

1716 
œ°
--;

1719  
NGX_OK
;

1720 
	}
}

1723 
ngx_li°íög_t
 *

1724 
	$ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1726 
ngx_li°íög_t
 *
ls
;

1727 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1728 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1730 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, &
addr
->
›t
.
u
.
sockaddr
,áddr->›t.
sockÀn
);

1731 i‡(
ls
 =
NULL
) {

1732  
NULL
;

1735 
ls
->
addr_¡›
 = 1;

1737 
ls
->
h™dÀr
 = 
ngx_hâp_öô_c⁄√˘i⁄
;

1739 
cscf
 = 
addr
->
deÁu…_£rvî
;

1740 
ls
->
poﬁ_size
 = 
cscf
->
c⁄√˘i⁄_poﬁ_size
;

1741 
ls
->
po°_ac˚±_timeout
 = 
cscf
->
˛õ¡_hódî_timeout
;

1743 
˛cf
 = 
cscf
->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

1745 
ls
->
logp
 = 
˛cf
->
îr‹_log
;

1746 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

1747 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

1749 #i‡(
NGX_WIN32
)

1751 
ngx_io˝_c⁄f_t
 *
io˝cf
 = 
NULL
;

1753 i‡(
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
)) {

1754 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

1756 i‡(
io˝cf
 && io˝cf->
ac˚±ex_ªad
) {

1757 
ls
->
po°_ac˚±_buf„r_size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

1762 
ls
->
backlog
 = 
addr
->
›t
.backlog;

1763 
ls
->
rcvbuf
 = 
addr
->
›t
.rcvbuf;

1764 
ls
->
¢dbuf
 = 
addr
->
›t
.sndbuf;

1766 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

1767 
ls
->
ac˚±_fûãr
 = 
addr
->
›t
.accept_filter;

1770 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

1771 
ls
->
de„ºed_ac˚±
 = 
addr
->
›t
.deferred_accept;

1774 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

1775 
ls
->
ùv6⁄ly
 = 
addr
->
›t
.ipv6only;

1778 #i‡(
NGX_HAVE_SETFIB
)

1779 
ls
->
£tfib
 = 
addr
->
›t
.setfib;

1782  
ls
;

1783 
	}
}

1786 
ngx_öt_t


1787 
	$ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1788 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1790 
ngx_uöt_t
 
i
;

1791 
ngx_hâp_ö_addr_t
 *
addrs
;

1792 
sockaddr_ö
 *
sö
;

1793 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1795 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1796 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö_addr_t
));

1797 i‡(
hp‹t
->
addrs
 =
NULL
) {

1798  
NGX_ERROR
;

1801 
addrs
 = 
hp‹t
->addrs;

1803 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1805 
sö
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö
;

1806 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

1807 
addrs
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1808 #i‡(
NGX_HTTP_SSL
)

1809 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1812 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1813 && (
addr
[
i
].
wc_hód
 =
NULL


1814 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1815 && (
addr
[
i
].
wc_èû
 =
NULL


1816 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1817 #i‡(
NGX_PCRE
)

1818 && 
addr
[
i
].
ƒegex
 == 0

1825 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1826 i‡(
vn
 =
NULL
) {

1827  
NGX_ERROR
;

1830 
addrs
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1832 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1833 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1834 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1835 #i‡(
NGX_PCRE
)

1836 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1837 
vn
->
ªgex
 = 
addr
[
i
].regex;

1841  
NGX_OK
;

1842 
	}
}

1845 #i‡(
NGX_HAVE_INET6
)

1847 
ngx_öt_t


1848 
	$ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1849 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1851 
ngx_uöt_t
 
i
;

1852 
ngx_hâp_ö6_addr_t
 *
addrs6
;

1853 
sockaddr_ö6
 *
sö6
;

1854 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1856 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1857 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö6_addr_t
));

1858 i‡(
hp‹t
->
addrs
 =
NULL
) {

1859  
NGX_ERROR
;

1862 
addrs6
 = 
hp‹t
->
addrs
;

1864 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1866 
sö6
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö6
;

1867 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

1868 
addrs6
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1869 #i‡(
NGX_HTTP_SSL
)

1870 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1873 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1874 && (
addr
[
i
].
wc_hód
 =
NULL


1875 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1876 && (
addr
[
i
].
wc_èû
 =
NULL


1877 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1878 #i‡(
NGX_PCRE
)

1879 && 
addr
[
i
].
ƒegex
 == 0

1886 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1887 i‡(
vn
 =
NULL
) {

1888  
NGX_ERROR
;

1891 
addrs6
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1893 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1894 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1895 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1896 #i‡(
NGX_PCRE
)

1897 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1898 
vn
->
ªgex
 = 
addr
[
i
].regex;

1902  
NGX_OK
;

1903 
	}
}

1909 
	$ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1911 *
p
 = 
c⁄f
;

1913 
ngx_¨øy_t
 **
ty≥s
;

1914 
ngx_°r_t
 *
vÆue
, *
deÁu…_ty≥
;

1915 
ngx_uöt_t
 
i
, 
n
, 
hash
;

1916 
ngx_hash_key_t
 *
ty≥
;

1918 
ty≥s
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1920 i‡(*
ty≥s
 == (*) -1) {

1921  
NGX_CONF_OK
;

1924 
deÁu…_ty≥
 = 
cmd
->
po°
;

1926 i‡(*
ty≥s
 =
NULL
) {

1927 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

1928 i‡(*
ty≥s
 =
NULL
) {

1929  
NGX_CONF_ERROR
;

1932 i‡(
deÁu…_ty≥
) {

1933 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

1934 i‡(
ty≥
 =
NULL
) {

1935  
NGX_CONF_ERROR
;

1938 
ty≥
->
key
 = *
deÁu…_ty≥
;

1939 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

1940 
deÁu…_ty≥
->
Àn
);

1941 
ty≥
->
vÆue
 = (*) 4;

1945 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1947 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1949 i‡(
vÆue
[
i
].
Àn
 =1 && vÆue[i].
d©a
[0] == '*') {

1950 *
ty≥s
 = (*) -1;

1951  
NGX_CONF_OK
;

1954 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

1955 
vÆue
[
i
].
d©a
[vÆue[i].
Àn
] = '\0';

1957 
ty≥
 = (*
ty≥s
)->
ñts
;

1958 
n
 = 0;Ç < (*
ty≥s
)->
√…s
;Ç++) {

1960 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

1961 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1962 "du∂iˇã MIMEÅy≥ \"%V\"", &
vÆue
[
i
]);

1967 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

1968 i‡(
ty≥
 =
NULL
) {

1969  
NGX_CONF_ERROR
;

1972 
ty≥
->
key
 = 
vÆue
[
i
];

1973 
ty≥
->
key_hash
 = 
hash
;

1974 
ty≥
->
vÆue
 = (*) 4;

1977  
NGX_CONF_OK
;

1978 
	}
}

1982 
	$ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
, 
ngx_hash_t
 *
ty≥s_hash
,

1983 
ngx_¨øy_t
 **
¥ev_keys
, 
ngx_hash_t
 *
¥ev_ty≥s_hash
,

1984 
ngx_°r_t
 *
deÁu…_ty≥s
)

1986 
ngx_hash_öô_t
 
hash
;

1988 i‡(*
keys
) {

1990 i‡(*
keys
 == (*) -1) {

1991  
NGX_CONF_OK
;

1994 
hash
.hash = 
ty≥s_hash
;

1995 
hash
.
key
 = 
NULL
;

1996 
hash
.
max_size
 = 2048;

1997 
hash
.
buckë_size
 = 64;

1998 
hash
.
«me
 = "test_types_hash";

1999 
hash
.
poﬁ
 = 
cf
->pool;

2000 
hash
.
ãmp_poﬁ
 = 
NULL
;

2002 i‡(
	`ngx_hash_öô
(&
hash
, (*
keys
)->
ñts
, (*keys)->
√…s
Ë!
NGX_OK
) {

2003  
NGX_CONF_ERROR
;

2006  
NGX_CONF_OK
;

2009 i‡(
¥ev_ty≥s_hash
->
buckës
 =
NULL
) {

2011 i‡(*
¥ev_keys
 =
NULL
) {

2013 i‡(
	`ngx_hâp_£t_deÁu…_ty≥s
(
cf
, 
¥ev_keys
, 
deÁu…_ty≥s
)

2014 !
NGX_OK
)

2016  
NGX_CONF_ERROR
;

2019 } i‡(*
¥ev_keys
 == (*) -1) {

2020 *
keys
 = *
¥ev_keys
;

2021  
NGX_CONF_OK
;

2024 
hash
.hash = 
¥ev_ty≥s_hash
;

2025 
hash
.
key
 = 
NULL
;

2026 
hash
.
max_size
 = 2048;

2027 
hash
.
buckë_size
 = 64;

2028 
hash
.
«me
 = "test_types_hash";

2029 
hash
.
poﬁ
 = 
cf
->pool;

2030 
hash
.
ãmp_poﬁ
 = 
NULL
;

2032 i‡(
	`ngx_hash_öô
(&
hash
, (*
¥ev_keys
)->
ñts
, (*¥ev_keys)->
√…s
)

2033 !
NGX_OK
)

2035  
NGX_CONF_ERROR
;

2039 *
ty≥s_hash
 = *
¥ev_ty≥s_hash
;

2041  
NGX_CONF_OK
;

2043 
	}
}

2046 
ngx_öt_t


2047 
	$ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

2048 
ngx_°r_t
 *
deÁu…_ty≥
)

2050 
ngx_hash_key_t
 *
ty≥
;

2052 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

2053 i‡(*
ty≥s
 =
NULL
) {

2054  
NGX_ERROR
;

2057 
deÁu…_ty≥
->
Àn
) {

2059 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2060 i‡(
ty≥
 =
NULL
) {

2061  
NGX_ERROR
;

2064 
ty≥
->
key
 = *
deÁu…_ty≥
;

2065 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

2066 
deÁu…_ty≥
->
Àn
);

2067 
ty≥
->
vÆue
 = (*) 4;

2069 
deÁu…_ty≥
++;

2072  
NGX_OK
;

2073 
	}
}

	@src/http/ngx_http.h

8 #i‚de‡
_NGX_HTTP_H_INCLUDED_


9 
	#_NGX_HTTP_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_hâp_ªque°_s
 
	tngx_hâp_ªque°_t
;

17 
ngx_hâp_up°ªam_s
 
	tngx_hâp_up°ªam_t
;

18 
ngx_hâp_ˇche_s
 
	tngx_hâp_ˇche_t
;

19 
ngx_hâp_fûe_ˇche_s
 
	tngx_hâp_fûe_ˇche_t
;

20 
ngx_hâp_log_˘x_s
 
	tngx_hâp_log_˘x_t
;

22 
	$ngx_öt_t
 (*
	tngx_hâp_hódî_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

23 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tngx_uöt_t
 
	toff£t
);

24 
u_ch¨
 *(*
	tngx_hâp_log_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

25 
	tngx_hâp_ªque°_t
 *
	t§
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

28 
	~<ngx_hâp_v¨übÀs.h
>

29 
	~<ngx_hâp_ªque°.h
>

30 
	~<ngx_hâp_up°ªam.h
>

31 
	~<ngx_hâp_up°ªam_round_robö.h
>

32 
	~<ngx_hâp_c⁄fig.h
>

33 
	~<ngx_hâp_busy_lock.h
>

34 
	~<ngx_hâp_s¸ùt.h
>

35 
	~<ngx_hâp_c‹e_moduÀ.h
>

37 #i‡(
NGX_HTTP_CACHE
)

38 
	~<ngx_hâp_ˇche.h
>

40 #i‡(
NGX_HTTP_SSI
)

41 
	~<ngx_hâp_ssi_fûãr_moduÀ.h
>

43 #i‡(
NGX_HTTP_SSL
)

44 
	~<ngx_hâp_s¶_moduÀ.h
>

48 
	sngx_hâp_log_˘x_s
 {

49 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

50 
ngx_hâp_ªque°_t
 *
ªque°
;

51 
ngx_hâp_ªque°_t
 *
cuºít_ªque°
;

56 
ngx_uöt_t
 
code
;

57 
ngx_uöt_t
 
cou¡
;

58 
u_ch¨
 *
°¨t
;

59 
u_ch¨
 *
íd
;

60 } 
	tngx_hâp_°©us_t
;

63 
	#ngx_hâp_gë_moduÀ_˘x
(
r
, 
moduÀ
Ë‘)->
˘x
[moduÀ.
˘x_ödex
]

	)

64 
	#ngx_hâp_£t_˘x
(
r
, 
c
, 
moduÀ
Ër->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

67 
ngx_öt_t
 
	`ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

68 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
);

69 
ngx_öt_t
 
	`ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

70 
ngx_hâp_li°í_›t_t
 *
ls›t
);

73 
	`ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

75 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


76 
	`ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
);

79 
ngx_öt_t
 
	`ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

80 
ngx_öt_t
 
	`ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_uöt_t
 
mîge_¶ashes
);

82 
ngx_öt_t
 
	`ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

83 
ngx_hâp_°©us_t
 *
°©us
);

84 
ngx_öt_t
 
	`ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

85 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
);

86 
ngx_öt_t
 
	`ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

87 
ngx_uöt_t
 
Ælow_undîsc‹es
);

88 
ngx_öt_t
 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
,

89 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

90 
ngx_öt_t
 
	`ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
,

91 
ngx_°r_t
 *
vÆue
);

92 
	`ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

93 
ngx_°r_t
 *
¨gs
);

96 
ngx_öt_t
 
	`ngx_hâp_föd_£rvî_c⁄f
(
ngx_hâp_ªque°_t
 *
r
);

97 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
);

98 
	`ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

99 
	`ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
);

100 
ngx_öt_t
 
	`ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_po°ed_ªque°_t
 *
¥
);

102 
	`ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

104 
	`ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
);

105 
	`ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

108 
	#ngx_hâp_ïhemîÆ
(
r
Ë(*Ë(&r->
uri_°¨t
)

	)

111 
	#NGX_HTTP_LAST
 1

	)

112 
	#NGX_HTTP_FLUSH
 2

	)

114 
ngx_öt_t
 
	`ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
);

117 
ngx_öt_t
 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

120 
ngx_öt_t
 
	`ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
);

121 
ngx_öt_t
 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_öt_t
 
îr‹
);

123 
ngx_öt_t
 
	`ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

124 
ngx_moduÀ_t
 *
m
, 
ngx_öt_t
 
îr‹
);

125 
	`ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
);

128 
time_t
 
	`ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
);

129 
size_t
 
	`ngx_hâp_gë_time
(*
buf
, 
time_t
 
t
);

133 
ngx_öt_t
 
	`ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

134 
	`ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

135 
	`ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

136 
	`ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

139 *
	`ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

140 *
	`ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
,

141 
ngx_hash_t
 *
ty≥s_hash
, 
ngx_¨øy_t
 **
¥ev_keys
,

142 
ngx_hash_t
 *
¥ev_ty≥s_hash
, 
ngx_°r_t
 *
deÁu…_ty≥s
);

143 
ngx_öt_t
 
	`ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

144 
ngx_°r_t
 *
deÁu…_ty≥
);

146 #i‡(
NGX_HTTP_DEGRADATION
)

147 
ngx_uöt_t
 
	`ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *);

151 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

153 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[];

156 
ngx_hâp_ouçut_hódî_fûãr_±
 
ngx_hâp_t›_hódî_fûãr
;

157 
ngx_hâp_ouçut_body_fûãr_±
 
ngx_hâp_t›_body_fûãr
;

	@src/http/ngx_http_busy_lock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_busy_lock_look_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

15 
ngx_hâp_busy_lock_˘x_t
 *
bc
,

16 
lock
);

19 
	$ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
)

21 i‡(
bl
->
busy
 < bl->
max_busy
) {

22 
bl
->
busy
++;

24 i‡(
bc
->
time
) {

25 
bc
->
time
 = 0;

26 
bl
->
waôög
--;

29  
NGX_OK
;

32 i‡(
bc
->
time
) {

33 i‡(
bc
->
time
 < 
bl
->
timeout
) {

34 
	`ngx_add_timî
(
bc
->
evít
, 1000);

35  
NGX_AGAIN
;

38 
bl
->
waôög
--;

39  
NGX_DONE
;

43 i‡(
bl
->
timeout
 == 0) {

44  
NGX_DONE
;

47 i‡(
bl
->
waôög
 < bl->
max_waôög
) {

48 
bl
->
waôög
++;

51 
	`ngx_add_timî
(
bc
->
evít
, 1000);

52 
bc
->
evít
->
evít_h™dÀr
 = bc->event_handler;

57  
NGX_AGAIN
;

60  
NGX_ERROR
;

61 
	}
}

64 
	$ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

65 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
)

67 
rc
;

69 
rc
 = 
	`ngx_hâp_busy_lock_look_ˇchóbÀ
(
bl
, 
bc
, 
lock
);

71 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
bc
->
evít
->
log
, 0,

73 
rc
, 
bl
->
waôög
, bl->
max_waôög
);

75 i‡(
rc
 =
NGX_OK
) {

76  
NGX_OK
;

79 i‡(
rc
 =
NGX_ERROR
 && !
lock
) {

80  
NGX_OK
;

85 i‡(
bc
->
time
) {

86 i‡(
bc
->
time
 < 
bl
->
timeout
) {

87 
	`ngx_add_timî
(
bc
->
evít
, 1000);

88  
NGX_AGAIN
;

91 
bl
->
waôög
--;

92  
NGX_DONE
;

96 i‡(
bl
->
timeout
 == 0) {

97  
NGX_DONE
;

100 i‡(
bl
->
waôög
 < bl->
max_waôög
) {

102 
bl
->
waôög
++;

103 
	`ngx_add_timî
(
bc
->
evít
, 1000);

104 
bc
->
evít
->
evít_h™dÀr
 = bc->event_handler;

109  
NGX_AGAIN
;

112  
NGX_ERROR
;

113 
	}
}

116 
	$ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

117 
ngx_hâp_busy_lock_˘x_t
 *
bc
)

119 i‡(
bl
 =
NULL
) {

123 i‡(
bl
->
md5
) {

124 
bl
->
md5_mask
[
bc
->
¶Ÿ
 / 8] &= ~(1 << (bc->slot & 7));

125 
bl
->
ˇchóbÀ
--;

128 
bl
->
busy
--;

129 
	}
}

132 
	$ngx_hâp_busy_lock_look_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

133 
ngx_hâp_busy_lock_˘x_t
 *
bc
,

134 
lock
)

136 
i
, 
b
, 
ˇchóbÀ
, 
‰ì
;

137 
u_öt
 
mask
;

139 
b
 = 0;

140 
ˇchóbÀ
 = 0;

141 
‰ì
 = -1;

143 #i‡(
NGX_SUPPRESS_WARN
)

144 
mask
 = 0;

147 
i
 = 0; i < 
bl
->
max_busy
; i++) {

149 i‡((
b
 & 7) == 0) {

150 
mask
 = 
bl
->
md5_mask
[
i
 / 8];

153 i‡(
mask
 & 1) {

154 i‡(
	`ngx_memcmp
(&
bl
->
md5
[
i
 * 16], 
bc
->md5, 16) == 0) {

155  
NGX_AGAIN
;

157 
ˇchóbÀ
++;

159 } i‡(
‰ì
 == -1) {

160 
‰ì
 = 
i
;

164 i‡(
ˇchóbÀ
 =
bl
->cacheable) {

165 i‡(
‰ì
 =-1 && 
ˇchóbÀ
 < 
bl
->
max_busy
) {

166 
‰ì
 = 
i
 + 1;

173 
mask
 >>= 1;

174 
b
++;

177 i‡(
‰ì
 == -1) {

178  
NGX_ERROR
;

181 i‡(
lock
) {

182 i‡(
bl
->
busy
 =bl->
max_busy
) {

183  
NGX_ERROR
;

186 
	`ngx_mem˝y
(&
bl
->
md5
[
‰ì
 * 16], 
bc
->md5, 16);

187 
bl
->
md5_mask
[
‰ì
 / 8] |= 1 << (free & 7);

188 
bc
->
¶Ÿ
 = 
‰ì
;

190 
bl
->
ˇchóbÀ
++;

191 
bl
->
busy
++;

194  
NGX_OK
;

195 
	}
}

198 *
	$ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

199 *
c⁄f
)

201 *
p
 = 
c⁄f
;

203 
ngx_uöt_t
 
i
, 
dup
, 
övÆid
;

204 
ngx_°r_t
 *
vÆue
, 
löe
;

205 
ngx_hâp_busy_lock_t
 *
bl
, **
bÕ
;

207 
bÕ
 = (
ngx_hâp_busy_lock_t
 **Ë(
p
 + 
cmd
->
off£t
);

208 i‡(*
bÕ
) {

213 
bl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_busy_lock_t
));

214 i‡(
bl
 =
NULL
) {

215  
NGX_CONF_ERROR
;

217 *
bÕ
 = 
bl
;

220 
bl
->
muãx
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_muãx_t
));

221 i‡(
bl
->
muãx
 =
NULL
) {

222  
NGX_CONF_ERROR
;

225 
dup
 = 0;

226 
övÆid
 = 0;

227 
vÆue
 = 
cf
->
¨gs
->
ñts
;

229 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

231 i‡(
vÆue
[
i
].
d©a
[1] != '=') {

232 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

233 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

234  
NGX_CONF_ERROR
;

237 
vÆue
[
i
].
d©a
[0]) {

240 i‡(
bl
->
max_busy
) {

241 
dup
 = 1;

245 
bl
->
max_busy
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 2, vÆue[i].
Àn
 - 2);

246 i‡(
bl
->
max_busy
 =
NGX_ERROR
) {

247 
övÆid
 = 1;

254 i‡(
bl
->
max_waôög
) {

255 
dup
 = 1;

259 
bl
->
max_waôög
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 2, vÆue[i].
Àn
 - 2);

260 i‡(
bl
->
max_waôög
 =
NGX_ERROR
) {

261 
övÆid
 = 1;

268 i‡(
bl
->
timeout
) {

269 
dup
 = 1;

273 
löe
.
Àn
 = 
vÆue
[
i
].len - 2;

274 
löe
.
d©a
 = 
vÆue
[
i
].data + 2;

276 
bl
->
timeout
 = 
	`ngx_∑r£_time
(&
löe
, 1);

277 i‡(
bl
->
timeout
 =
NGX_ERROR
) {

278 
övÆid
 = 1;

285 
övÆid
 = 1;

288 i‡(
dup
) {

289 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

290 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

291  
NGX_CONF_ERROR
;

294 i‡(
övÆid
) {

295 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

296 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

297  
NGX_CONF_ERROR
;

301 i‡(
bl
->
timeout
 =0 && bl->
max_waôög
) {

302 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

306  
NGX_CONF_OK
;

307 
	}
}

	@src/http/ngx_http_busy_lock.h

8 #i‚de‡
_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_hâp.h
>

19 
u_ch¨
 *
	mmd5_mask
;

20 *
	mmd5
;

21 
	mˇchóbÀ
;

23 
	mbusy
;

24 
	mmax_busy
;

26 
	mwaôög
;

27 
	mmax_waôög
;

29 
time_t
 
	mtimeout
;

31 
ngx_evít_muãx_t
 *
	mmuãx
;

32 } 
	tngx_hâp_busy_lock_t
;

36 
time_t
 
	mtime
;

37 
ngx_evít_t
 *
	mevít
;

38 (*
	mevít_h™dÀr
)(
ngx_evít_t
 *
	mev
);

39 
u_ch¨
 *
	mmd5
;

40 
	m¶Ÿ
;

41 } 
	tngx_hâp_busy_lock_˘x_t
;

44 
ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

45 
ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

46 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
);

47 
ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

48 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

50 *
ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

	@src/http/ngx_http_cache.h

8 #i‚de‡
_NGX_HTTP_CACHE_H_INCLUDED_


9 
	#_NGX_HTTP_CACHE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_CACHE_MISS
 1

	)

18 
	#NGX_HTTP_CACHE_BYPASS
 2

	)

19 
	#NGX_HTTP_CACHE_EXPIRED
 3

	)

20 
	#NGX_HTTP_CACHE_STALE
 4

	)

21 
	#NGX_HTTP_CACHE_UPDATING
 5

	)

22 
	#NGX_HTTP_CACHE_HIT
 6

	)

23 
	#NGX_HTTP_CACHE_SCARCE
 7

	)

25 
	#NGX_HTTP_CACHE_KEY_LEN
 16

	)

29 
ngx_uöt_t
 
	m°©us
;

30 
time_t
 
	mvÆid
;

31 } 
	tngx_hâp_ˇche_vÆid_t
;

35 
ngx_rbåì_node_t
 
	mnode
;

36 
ngx_queue_t
 
	mqueue
;

38 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN


39 - (
ngx_rbåì_key_t
)];

41 
	mcou¡
:20;

42 
	mu£s
:10;

43 
	mvÆid_m£c
:10;

44 
	mîr‹
:10;

45 
	mexi°s
:1;

46 
	mupd©ög
:1;

47 
	mdñëög
:1;

50 
ngx_fûe_uniq_t
 
	muniq
;

51 
time_t
 
	mexpúe
;

52 
time_t
 
	mvÆid_£c
;

53 
size_t
 
	mbody_°¨t
;

54 
off_t
 
	mfs_size
;

55 } 
	tngx_hâp_fûe_ˇche_node_t
;

58 
	sngx_hâp_ˇche_s
 {

59 
ngx_fûe_t
 
	mfûe
;

60 
ngx_¨øy_t
 
	mkeys
;

61 
uöt32_t
 
	m¸c32
;

62 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN
];

64 
ngx_fûe_uniq_t
 
	muniq
;

65 
time_t
 
	mvÆid_£c
;

66 
time_t
 
	mœ°_modifõd
;

67 
time_t
 
	md©e
;

69 
size_t
 
	mhódî_°¨t
;

70 
size_t
 
	mbody_°¨t
;

71 
off_t
 
	mÀngth
;

72 
off_t
 
	mfs_size
;

74 
ngx_uöt_t
 
	mmö_u£s
;

75 
ngx_uöt_t
 
	mîr‹
;

76 
ngx_uöt_t
 
	mvÆid_m£c
;

78 
ngx_buf_t
 *
	mbuf
;

80 
ngx_hâp_fûe_ˇche_t
 *
	mfûe_ˇche
;

81 
ngx_hâp_fûe_ˇche_node_t
 *
	mnode
;

83 
	mupd©ed
:1;

84 
	mupd©ög
:1;

85 
	mexi°s
:1;

86 
	mãmp_fûe
:1;

91 
time_t
 
	mvÆid_£c
;

92 
time_t
 
	mœ°_modifõd
;

93 
time_t
 
	md©e
;

94 
uöt32_t
 
	m¸c32
;

95 
u_sh‹t
 
	mvÆid_m£c
;

96 
u_sh‹t
 
	mhódî_°¨t
;

97 
u_sh‹t
 
	mbody_°¨t
;

98 } 
	tngx_hâp_fûe_ˇche_hódî_t
;

102 
ngx_rbåì_t
 
	mrbåì
;

103 
ngx_rbåì_node_t
 
	m£¡öñ
;

104 
ngx_queue_t
 
	mqueue
;

105 
ngx_©omic_t
 
	mcﬁd
;

106 
ngx_©omic_t
 
	mlﬂdög
;

107 
off_t
 
	msize
;

108 } 
	tngx_hâp_fûe_ˇche_sh_t
;

111 
	sngx_hâp_fûe_ˇche_s
 {

112 
ngx_hâp_fûe_ˇche_sh_t
 *
	msh
;

113 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

115 
ngx_∑th_t
 *
	m∑th
;

117 
off_t
 
	mmax_size
;

118 
size_t
 
	mbsize
;

120 
time_t
 
	möa˘ive
;

122 
ngx_m£c_t
 
	mœ°
;

123 
ngx_uöt_t
 
	mfûes
;

125 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

129 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
);

130 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

131 
ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

132 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
);

133 
ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
);

134 
ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
);

135 
ngx_öt_t
 
ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *);

136 
ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
);

137 
time_t
 
ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
);

139 *
ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

140 *
c⁄f
);

141 *
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

142 *
c⁄f
);

145 
ngx_°r_t
 
ngx_hâp_ˇche_°©us
[];

	@src/http/ngx_http_config.h

8 #i‚de‡
_NGX_HTTP_CONFIG_H_INCLUDED_


9 
	#_NGX_HTTP_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 **
	mmaö_c⁄f
;

19 **
	m§v_c⁄f
;

20 **
	mloc_c⁄f
;

21 } 
	tngx_hâp_c⁄f_˘x_t
;

25 
ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

26 
ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

28 *(*
	m¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

29 *(*
	möô_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	mc⁄f
);

31 *(*
	m¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

32 *(*
	mmîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

34 *(*
	m¸óã_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

35 *(*
	mmîge_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

36 } 
	tngx_hâp_moduÀ_t
;

39 
	#NGX_HTTP_MODULE
 0x50545448

	)

41 
	#NGX_HTTP_MAIN_CONF
 0x02000000

	)

42 
	#NGX_HTTP_SRV_CONF
 0x04000000

	)

43 
	#NGX_HTTP_LOC_CONF
 0x08000000

	)

44 
	#NGX_HTTP_UPS_CONF
 0x10000000

	)

45 
	#NGX_HTTP_SIF_CONF
 0x20000000

	)

46 
	#NGX_HTTP_LIF_CONF
 0x40000000

	)

47 
	#NGX_HTTP_LMT_CONF
 0x80000000

	)

50 
	#NGX_HTTP_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

51 
	#NGX_HTTP_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

52 
	#NGX_HTTP_LOC_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
loc_c⁄f
)

	)

55 
	#ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
moduÀ
) \

56 (
r
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

57 
	#ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
moduÀ
Ë‘)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

58 
	#ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
moduÀ
Ë‘)->
loc_c⁄f
[moduÀ.
˘x_ödex
]

	)

61 
	#ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

62 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

63 
	#ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

64 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

65 
	#ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
moduÀ
) \

66 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
loc_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

68 
	#ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
moduÀ
) \

69 (
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
] ? \

70 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
]) \

71 ->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]: \

72 
NULL
)

	)

	@src/http/ngx_http_copy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_bufs_t
 
	mbufs
;

15 } 
	tngx_hâp_c›y_fûãr_c⁄f_t
;

18 #i‡(
NGX_HAVE_FILE_AIO
)

19 
ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

20 
ngx_fûe_t
 *
fûe
);

21 
ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

22 #i‡(
NGX_HAVE_AIO_SENDFILE
)

23 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

27 *
ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

29 *
∑ª¡
, *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_c›y_fûãr_comm™ds
[] = {

35 { 
ngx_°rög
("output_buffers"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

37 
ngx_c⁄f_£t_bufs_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_c›y_fûãr_c⁄f_t
, 
bufs
),

40 
NULL
 },

42 
ngx_nuŒ_comm™d


46 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ_˘x
 = {

47 
NULL
,

48 
ngx_hâp_c›y_fûãr_öô
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
ngx_hâp_c›y_fûãr_¸óã_c⁄f
,

57 
ngx_hâp_c›y_fûãr_mîge_c⁄f


61 
ngx_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ
 = {

62 
NGX_MODULE_V1
,

63 &
ngx_hâp_c›y_fûãr_moduÀ_˘x
,

64 
ngx_hâp_c›y_fûãr_comm™ds
,

65 
NGX_HTTP_MODULE
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NGX_MODULE_V1_PADDING


77 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_fûãr
;

80 
ngx_öt_t


81 
	$ngx_hâp_c›y_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

83 
ngx_öt_t
 
rc
;

84 
ngx_c⁄√˘i⁄_t
 *
c
;

85 
ngx_ouçut_chaö_˘x_t
 *
˘x
;

86 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

87 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

89 
c
 = 
r
->
c⁄√˘i⁄
;

91 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

92 "hâ∞c›y fûãr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

94 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

96 i‡(
˘x
 =
NULL
) {

97 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ouçut_chaö_˘x_t
));

98 i‡(
˘x
 =
NULL
) {

99  
NGX_ERROR
;

102 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_c›y_fûãr_moduÀ
);

104 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

105 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

107 
˘x
->
£ndfûe
 = 
c
->sendfile;

108 
˘x
->
√ed_ö_mem‹y
 = 
r
->
maö_fûãr_√ed_ö_mem‹y


109 || 
r
->
fûãr_√ed_ö_mem‹y
;

110 
˘x
->
√ed_ö_ãmp
 = 
r
->
fûãr_√ed_ãmp‹¨y
;

112 
˘x
->
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

114 
˘x
->
poﬁ
 = 
r
->pool;

115 
˘x
->
bufs
 = 
c⁄f
->bufs;

116 
˘x
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_c›y_fûãr_moduÀ
;

118 
˘x
->
ouçut_fûãr
 = (
ngx_ouçut_chaö_fûãr_±
Ë
ngx_hâp_√xt_fûãr
;

119 
˘x
->
fûãr_˘x
 = 
r
;

121 #i‡(
NGX_HAVE_FILE_AIO
)

122 i‡(
ngx_fûe_aio
) {

123 i‡(
˛cf
->
aio
) {

124 
˘x
->
aio_h™dÀr
 = 
ngx_hâp_c›y_aio_h™dÀr
;

126 #i‡(
NGX_HAVE_AIO_SENDFILE
)

127 
c
->
aio_£ndfûe
 = (
˛cf
->
aio
 =
NGX_HTTP_AIO_SENDFILE
);

132 i‡(
ö
 && in->
buf
 && 
	`ngx_buf_size
(in->buf)) {

133 
r
->
ªque°_ouçut
 = 1;

137 #i‡(
NGX_HAVE_FILE_AIO
)

138 
˘x
->
aio
 = 
r
->aio;

142 
rc
 = 
	`ngx_ouçut_chaö
(
˘x
, 
ö
);

144 i‡(
˘x
->
ö
 =
NULL
) {

145 
r
->
buf„ªd
 &~
NGX_HTTP_COPY_BUFFERED
;

148 
r
->
buf„ªd
 |
NGX_HTTP_COPY_BUFFERED
;

151 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

152 "hâ∞c›y fûãr: %ò\"%V?%V\"", 
rc
, &
r
->
uri
, &r->
¨gs
);

154 #i‡(
NGX_HAVE_FILE_AIO
 && 
NGX_HAVE_AIO_SENDFILE
)

156 i‡(
c
->
busy_£ndfûe
) {

157 
ssize_t
 
n
;

158 
off_t
 
off£t
;

159 
ngx_fûe_t
 *
fûe
;

160 
ngx_hâp_ïhemîÆ_t
 *
e
;

162 i‡(
r
->
aio
) {

163 
c
->
busy_£ndfûe
 = 
NULL
;

164  
rc
;

167 
fûe
 = 
c
->
busy_£ndfûe
->file;

168 
off£t
 = 
c
->
busy_£ndfûe
->
fûe_pos
;

170 i‡(
fûe
->
aio
) {

171 
c
->
aio_£ndfûe
 = (
off£t
 !
fûe
->
aio
->
œ°_off£t
);

172 
fûe
->
aio
->
œ°_off£t
 = 
off£t
;

174 i‡(
c
->
aio_£ndfûe
 == 0) {

175 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

177 &
fûe
->
«me
);

181 
c
->
busy_£ndfûe
 = 
NULL
;

182 
e
 = (
ngx_hâp_ïhemîÆ_t
 *Ë&
r
->
uri_°¨t
;

184 
n
 = 
	`ngx_fûe_aio_ªad
(
fûe
, &
e
->
aio_¥ñﬂd
, 1, 
off£t
, 
r
->
poﬁ
);

186 i‡(
n
 > 0) {

187 
ö
 = 
NULL
;

191 
rc
 = 
n
;

193 i‡(
rc
 =
NGX_AGAIN
) {

194 
fûe
->
aio
->
d©a
 = 
r
;

195 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
;

197 
r
->
maö
->
blocked
++;

198 
r
->
aio
 = 1;

203  
rc
;

205 
	}
}

208 #i‡(
NGX_HAVE_FILE_AIO
)

211 
	$ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_fûe_t
 *
fûe
)

213 
ngx_hâp_ªque°_t
 *
r
;

215 
r
 = 
˘x
->
fûãr_˘x
;

217 
fûe
->
aio
->
d©a
 = 
r
;

218 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_evít_h™dÀr
;

220 
r
->
maö
->
blocked
++;

221 
r
->
aio
 = 1;

222 
˘x
->
aio
 = 1;

223 
	}
}

227 
	$ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

229 
ngx_evít_aio_t
 *
aio
;

230 
ngx_hâp_ªque°_t
 *
r
;

232 
aio
 = 
ev
->
d©a
;

233 
r
 = 
aio
->
d©a
;

235 
r
->
maö
->
blocked
--;

236 
r
->
aio
 = 0;

238 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

239 
	}
}

242 #i‡(
NGX_HAVE_AIO_SENDFILE
)

245 
	$ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

247 
ngx_evít_aio_t
 *
aio
;

248 
ngx_hâp_ªque°_t
 *
r
;

250 
aio
 = 
ev
->
d©a
;

251 
r
 = 
aio
->
d©a
;

253 
r
->
maö
->
blocked
--;

254 
r
->
aio
 = 0;

255 
ev
->
com∂ëe
 = 0;

257 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

258 
	}
}

265 
	$ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

267 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

269 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_c›y_fûãr_c⁄f_t
));

270 i‡(
c⁄f
 =
NULL
) {

271  
NULL
;

274 
c⁄f
->
bufs
.
num
 = 0;

276  
c⁄f
;

277 
	}
}

281 
	$ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

283 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

284 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

286 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs, 1, 32768);

288  
NULL
;

289 
	}
}

292 
ngx_öt_t


293 
	$ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

295 
ngx_hâp_√xt_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

296 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_c›y_fûãr
;

298  
NGX_OK
;

299 
	}
}

	@src/http/ngx_http_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 *
	m«me
;

15 
uöt32_t
 
	mmëhod
;

16 } 
	tngx_hâp_mëhod_«me_t
;

19 
	#NGX_HTTP_REQUEST_BODY_FILE_OFF
 0

	)

20 
	#NGX_HTTP_REQUEST_BODY_FILE_ON
 1

	)

21 
	#NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 2

	)

24 
ngx_öt_t
 
ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_öt_t
 
ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
);

28 
ngx_öt_t
 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

29 *
ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

30 *
ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

31 *
ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

33 *
∑ª¡
, *
chûd
);

34 *
ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
dummy
);

40 *
ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
dummy
);

42 
ngx_öt_t
 
ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

45 *
ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

46 *
c⁄f
);

47 *
ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

48 *
c⁄f
);

50 *
ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

52 *
ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

53 *
c⁄f
);

54 *
ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

55 *
ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

59 *
ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

60 *
c⁄f
);

61 *
ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

64 *
c⁄f
);

65 *
ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 *
ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

68 *
c⁄f
);

69 *
ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

71 *
ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

73 #i‡(
NGX_HTTP_GZIP
)

74 
ngx_öt_t
 
ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
);

75 
ngx_uöt_t
 
ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
);

76 *
ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

80 *
ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

81 *
ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

83 
ngx_c⁄f_po°_t
 
	gngx_hâp_c‹e_low©_po°
 =

84 { 
ngx_hâp_c‹e_low©_check
 };

86 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_c‹e_poﬁ_size_p
 =

87 
ngx_hâp_c‹e_poﬁ_size
;

89 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 = {

90 
ngx_c⁄f_dïªˇãd
, "optimize_server_names", "server_name_in_redirect"

93 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 = {

94 
ngx_c⁄f_dïªˇãd
, "open_file_cache_retest", "open_file_cache_valid"

97 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_ßtisfy_™y
 = {

98 
ngx_c⁄f_dïªˇãd
, "satisfy_any", "satisfy"

102 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ªque°_body_ö_fûe
[] = {

103 { 
ngx_°rög
("off"), 
NGX_HTTP_REQUEST_BODY_FILE_OFF
 },

104 { 
ngx_°rög
("⁄"), 
NGX_HTTP_REQUEST_BODY_FILE_ON
 },

105 { 
ngx_°rög
("˛ón"), 
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 },

106 { 
ngx_nuŒ_°rög
, 0 }

110 #i‡(
NGX_HAVE_FILE_AIO
)

112 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_aio
[] = {

113 { 
ngx_°rög
("off"), 
NGX_HTTP_AIO_OFF
 },

114 { 
ngx_°rög
("⁄"), 
NGX_HTTP_AIO_ON
 },

115 #i‡(
NGX_HAVE_AIO_SENDFILE
)

116 { 
ngx_°rög
("£ndfûe"), 
NGX_HTTP_AIO_SENDFILE
 },

118 { 
ngx_nuŒ_°rög
, 0 }

124 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ßtisfy
[] = {

125 { 
ngx_°rög
("Æl"), 
NGX_HTTP_SATISFY_ALL
 },

126 { 
ngx_°rög
("™y"), 
NGX_HTTP_SATISFY_ANY
 },

127 { 
ngx_nuŒ_°rög
, 0 }

131 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_lögîög_˛o£
[] = {

132 { 
ngx_°rög
("off"), 
NGX_HTTP_LINGERING_OFF
 },

133 { 
ngx_°rög
("⁄"), 
NGX_HTTP_LINGERING_ON
 },

134 { 
ngx_°rög
("Æways"), 
NGX_HTTP_LINGERING_ALWAYS
 },

135 { 
ngx_nuŒ_°rög
, 0 }

139 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_if_modifõd_sö˚
[] = {

140 { 
ngx_°rög
("off"), 
NGX_HTTP_IMS_OFF
 },

141 { 
ngx_°rög
("exa˘"), 
NGX_HTTP_IMS_EXACT
 },

142 { 
ngx_°rög
("bef‹e"), 
NGX_HTTP_IMS_BEFORE
 },

143 { 
ngx_nuŒ_°rög
, 0 }

147 
ngx_c⁄f_bômask_t
 
	gngx_hâp_c‹e_kì∑live_dißbÀ
[] = {

148 { 
ngx_°rög
("n⁄e"), 
NGX_HTTP_KEEPALIVE_DISABLE_NONE
 },

149 { 
ngx_°rög
("msõ6"), 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 },

150 { 
ngx_°rög
("ßÁri"), 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 },

151 { 
ngx_nuŒ_°rög
, 0 }

155 
ngx_∑th_öô_t
 
	gngx_hâp_˛õ¡_ãmp_∑th
 = {

156 
ngx_°rög
(
NGX_HTTP_CLIENT_TEMP_PATH
), { 0, 0, 0 }

160 #i‡(
NGX_HTTP_GZIP
)

162 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_hâp_vîsi⁄
[] = {

163 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

164 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

165 { 
ngx_nuŒ_°rög
, 0 }

169 
ngx_c⁄f_bômask_t
 
	gngx_hâp_gzù_¥oxõd_mask
[] = {

170 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_PROXIED_OFF
 },

171 { 
ngx_°rög
("expúed"), 
NGX_HTTP_GZIP_PROXIED_EXPIRED
 },

172 { 
ngx_°rög
("no-ˇche"), 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
 },

173 { 
ngx_°rög
("no-°‹e"), 
NGX_HTTP_GZIP_PROXIED_NO_STORE
 },

174 { 
ngx_°rög
("¥iv©e"), 
NGX_HTTP_GZIP_PROXIED_PRIVATE
 },

175 { 
ngx_°rög
("no_œ°_modifõd"), 
NGX_HTTP_GZIP_PROXIED_NO_LM
 },

176 { 
ngx_°rög
("no_ëag"), 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
 },

177 { 
ngx_°rög
("auth"), 
NGX_HTTP_GZIP_PROXIED_AUTH
 },

178 { 
ngx_°rög
("™y"), 
NGX_HTTP_GZIP_PROXIED_ANY
 },

179 { 
ngx_nuŒ_°rög
, 0 }

183 
ngx_°r_t
 
	gngx_hâp_gzù_no_ˇche
 = 
ngx_°rög
("no-cache");

184 
ngx_°r_t
 
	gngx_hâp_gzù_no_°‹e
 = 
ngx_°rög
("no-store");

185 
ngx_°r_t
 
	gngx_hâp_gzù_¥iv©e
 = 
ngx_°rög
("private");

190 
ngx_comm™d_t
 
	gngx_hâp_c‹e_comm™ds
[] = {

192 { 
ngx_°rög
("variables_hash_max_size"),

193 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

194 
ngx_c⁄f_£t_num_¶Ÿ
,

195 
NGX_HTTP_MAIN_CONF_OFFSET
,

196 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_max_size
),

197 
NULL
 },

199 { 
ngx_°rög
("variables_hash_bucket_size"),

200 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

201 
ngx_c⁄f_£t_num_¶Ÿ
,

202 
NGX_HTTP_MAIN_CONF_OFFSET
,

203 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_buckë_size
),

204 
NULL
 },

206 { 
ngx_°rög
("server_names_hash_max_size"),

207 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

208 
ngx_c⁄f_£t_num_¶Ÿ
,

209 
NGX_HTTP_MAIN_CONF_OFFSET
,

210 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_max_size
),

211 
NULL
 },

213 { 
ngx_°rög
("server_names_hash_bucket_size"),

214 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

215 
ngx_c⁄f_£t_num_¶Ÿ
,

216 
NGX_HTTP_MAIN_CONF_OFFSET
,

217 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_buckë_size
),

218 
NULL
 },

220 { 
ngx_°rög
("server"),

221 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_MULTI
|
NGX_CONF_NOARGS
,

222 
ngx_hâp_c‹e_£rvî
,

225 
NULL
 },

227 { 
ngx_°rög
("connection_pool_size"),

228 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

229 
ngx_c⁄f_£t_size_¶Ÿ
,

230 
NGX_HTTP_SRV_CONF_OFFSET
,

231 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
c⁄√˘i⁄_poﬁ_size
),

232 &
ngx_hâp_c‹e_poﬁ_size_p
 },

234 { 
ngx_°rög
("request_pool_size"),

235 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

236 
ngx_c⁄f_£t_size_¶Ÿ
,

237 
NGX_HTTP_SRV_CONF_OFFSET
,

238 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ªque°_poﬁ_size
),

239 &
ngx_hâp_c‹e_poﬁ_size_p
 },

241 { 
ngx_°rög
("client_header_timeout"),

242 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

243 
ngx_c⁄f_£t_m£c_¶Ÿ
,

244 
NGX_HTTP_SRV_CONF_OFFSET
,

245 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_timeout
),

246 
NULL
 },

248 { 
ngx_°rög
("client_header_buffer_size"),

249 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

250 
ngx_c⁄f_£t_size_¶Ÿ
,

251 
NGX_HTTP_SRV_CONF_OFFSET
,

252 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_buf„r_size
),

253 
NULL
 },

255 { 
ngx_°rög
("large_client_header_buffers"),

256 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE2
,

257 
ngx_c⁄f_£t_bufs_¶Ÿ
,

258 
NGX_HTTP_SRV_CONF_OFFSET
,

259 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
œrge_˛õ¡_hódî_buf„rs
),

260 
NULL
 },

262 { 
ngx_°rög
("optimize_server_names"),

263 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

264 
ngx_c⁄f_£t_Êag_¶Ÿ
,

265 
NGX_HTTP_LOC_CONF_OFFSET
,

266 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

267 &
ngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 },

269 { 
ngx_°rög
("ignore_invalid_headers"),

270 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

271 
ngx_c⁄f_£t_Êag_¶Ÿ
,

272 
NGX_HTTP_SRV_CONF_OFFSET
,

273 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ign‹e_övÆid_hódîs
),

274 
NULL
 },

276 { 
ngx_°rög
("merge_slashes"),

277 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

278 
ngx_c⁄f_£t_Êag_¶Ÿ
,

279 
NGX_HTTP_SRV_CONF_OFFSET
,

280 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
mîge_¶ashes
),

281 
NULL
 },

283 { 
ngx_°rög
("underscores_in_headers"),

284 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

285 
ngx_c⁄f_£t_Êag_¶Ÿ
,

286 
NGX_HTTP_SRV_CONF_OFFSET
,

287 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
undîsc‹es_ö_hódîs
),

288 
NULL
 },

290 { 
ngx_°rög
("location"),

291 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

292 
ngx_hâp_c‹e_loˇti⁄
,

293 
NGX_HTTP_SRV_CONF_OFFSET
,

295 
NULL
 },

297 { 
ngx_°rög
("listen"),

298 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

299 
ngx_hâp_c‹e_li°í
,

300 
NGX_HTTP_SRV_CONF_OFFSET
,

302 
NULL
 },

304 { 
ngx_°rög
("server_name"),

305 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

306 
ngx_hâp_c‹e_£rvî_«me
,

307 
NGX_HTTP_SRV_CONF_OFFSET
,

309 
NULL
 },

311 { 
ngx_°rög
("types_hash_max_size"),

312 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

313 
ngx_c⁄f_£t_num_¶Ÿ
,

314 
NGX_HTTP_LOC_CONF_OFFSET
,

315 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_max_size
),

316 
NULL
 },

318 { 
ngx_°rög
("types_hash_bucket_size"),

319 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

320 
ngx_c⁄f_£t_num_¶Ÿ
,

321 
NGX_HTTP_LOC_CONF_OFFSET
,

322 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_buckë_size
),

323 
NULL
 },

325 { 
ngx_°rög
("types"),

326 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


327 |
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

328 
ngx_hâp_c‹e_ty≥s
,

329 
NGX_HTTP_LOC_CONF_OFFSET
,

331 
NULL
 },

333 { 
ngx_°rög
("default_type"),

334 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

335 
ngx_c⁄f_£t_°r_¶Ÿ
,

336 
NGX_HTTP_LOC_CONF_OFFSET
,

337 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
deÁu…_ty≥
),

338 
NULL
 },

340 { 
ngx_°rög
("root"),

341 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


342 |
NGX_CONF_TAKE1
,

343 
ngx_hâp_c‹e_roŸ
,

344 
NGX_HTTP_LOC_CONF_OFFSET
,

346 
NULL
 },

348 { 
ngx_°rög
("alias"),

349 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

350 
ngx_hâp_c‹e_roŸ
,

351 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
NULL
 },

355 { 
ngx_°rög
("limit_except"),

356 
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

357 
ngx_hâp_c‹e_limô_ex˚±
,

358 
NGX_HTTP_LOC_CONF_OFFSET
,

360 
NULL
 },

362 { 
ngx_°rög
("client_max_body_size"),

363 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

364 
ngx_c⁄f_£t_off_¶Ÿ
,

365 
NGX_HTTP_LOC_CONF_OFFSET
,

366 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_max_body_size
),

367 
NULL
 },

369 { 
ngx_°rög
("client_body_buffer_size"),

370 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

371 
ngx_c⁄f_£t_size_¶Ÿ
,

372 
NGX_HTTP_LOC_CONF_OFFSET
,

373 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_buf„r_size
),

374 
NULL
 },

376 { 
ngx_°rög
("client_body_timeout"),

377 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

378 
ngx_c⁄f_£t_m£c_¶Ÿ
,

379 
NGX_HTTP_LOC_CONF_OFFSET
,

380 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_timeout
),

381 
NULL
 },

383 { 
ngx_°rög
("client_body_temp_path"),

384 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

385 
ngx_c⁄f_£t_∑th_¶Ÿ
,

386 
NGX_HTTP_LOC_CONF_OFFSET
,

387 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ãmp_∑th
),

388 
NULL
 },

390 { 
ngx_°rög
("client_body_in_file_only"),

391 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

392 
ngx_c⁄f_£t_íum_¶Ÿ
,

393 
NGX_HTTP_LOC_CONF_OFFSET
,

394 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_fûe_⁄ly
),

395 &
ngx_hâp_c‹e_ªque°_body_ö_fûe
 },

397 { 
ngx_°rög
("client_body_in_single_buffer"),

398 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

399 
ngx_c⁄f_£t_Êag_¶Ÿ
,

400 
NGX_HTTP_LOC_CONF_OFFSET
,

401 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_sögÀ_buf„r
),

402 
NULL
 },

404 { 
ngx_°rög
("sendfile"),

405 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


406 |
NGX_CONF_FLAG
,

407 
ngx_c⁄f_£t_Êag_¶Ÿ
,

408 
NGX_HTTP_LOC_CONF_OFFSET
,

409 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe
),

410 
NULL
 },

412 { 
ngx_°rög
("sendfile_max_chunk"),

413 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

414 
ngx_c⁄f_£t_size_¶Ÿ
,

415 
NGX_HTTP_LOC_CONF_OFFSET
,

416 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe_max_chunk
),

417 
NULL
 },

419 #i‡(
NGX_HAVE_FILE_AIO
)

421 { 
ngx_°rög
("aio"),

422 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

423 
ngx_c⁄f_£t_íum_¶Ÿ
,

424 
NGX_HTTP_LOC_CONF_OFFSET
,

425 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
aio
),

426 &
ngx_hâp_c‹e_aio
 },

430 { 
ngx_°rög
("read_ahead"),

431 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

432 
ngx_c⁄f_£t_size_¶Ÿ
,

433 
NGX_HTTP_LOC_CONF_OFFSET
,

434 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªad_ahód
),

435 
NULL
 },

437 { 
ngx_°rög
("directio"),

438 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

439 
ngx_hâp_c‹e_dúe˘io
,

440 
NGX_HTTP_LOC_CONF_OFFSET
,

442 
NULL
 },

444 { 
ngx_°rög
("directio_alignment"),

445 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

446 
ngx_c⁄f_£t_off_¶Ÿ
,

447 
NGX_HTTP_LOC_CONF_OFFSET
,

448 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
dúe˘io_Æignmít
),

449 
NULL
 },

451 { 
ngx_°rög
("tcp_nopush"),

452 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

453 
ngx_c⁄f_£t_Êag_¶Ÿ
,

454 
NGX_HTTP_LOC_CONF_OFFSET
,

455 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_n›ush
),

456 
NULL
 },

458 { 
ngx_°rög
("tcp_nodelay"),

459 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

460 
ngx_c⁄f_£t_Êag_¶Ÿ
,

461 
NGX_HTTP_LOC_CONF_OFFSET
,

462 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_nodñay
),

463 
NULL
 },

465 { 
ngx_°rög
("send_timeout"),

466 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

467 
ngx_c⁄f_£t_m£c_¶Ÿ
,

468 
NGX_HTTP_LOC_CONF_OFFSET
,

469 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_timeout
),

470 
NULL
 },

472 { 
ngx_°rög
("send_lowat"),

473 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

474 
ngx_c⁄f_£t_size_¶Ÿ
,

475 
NGX_HTTP_LOC_CONF_OFFSET
,

476 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_low©
),

477 &
ngx_hâp_c‹e_low©_po°
 },

479 { 
ngx_°rög
("postpone_output"),

480 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

481 
ngx_c⁄f_£t_size_¶Ÿ
,

482 
NGX_HTTP_LOC_CONF_OFFSET
,

483 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°p⁄e_ouçut
),

484 
NULL
 },

486 { 
ngx_°rög
("limit_rate"),

487 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


488 |
NGX_CONF_TAKE1
,

489 
ngx_c⁄f_£t_size_¶Ÿ
,

490 
NGX_HTTP_LOC_CONF_OFFSET
,

491 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã
),

492 
NULL
 },

494 { 
ngx_°rög
("limit_rate_after"),

495 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


496 |
NGX_CONF_TAKE1
,

497 
ngx_c⁄f_£t_size_¶Ÿ
,

498 
NGX_HTTP_LOC_CONF_OFFSET
,

499 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã_a·î
),

500 
NULL
 },

502 { 
ngx_°rög
("keepalive_timeout"),

503 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

504 
ngx_hâp_c‹e_kì∑live
,

505 
NGX_HTTP_LOC_CONF_OFFSET
,

507 
NULL
 },

509 { 
ngx_°rög
("keepalive_requests"),

510 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

511 
ngx_c⁄f_£t_num_¶Ÿ
,

512 
NGX_HTTP_LOC_CONF_OFFSET
,

513 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_ªque°s
),

514 
NULL
 },

516 { 
ngx_°rög
("keepalive_disable"),

517 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

518 
ngx_c⁄f_£t_bômask_¶Ÿ
,

519 
NGX_HTTP_LOC_CONF_OFFSET
,

520 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_dißbÀ
),

521 &
ngx_hâp_c‹e_kì∑live_dißbÀ
 },

523 { 
ngx_°rög
("satisfy"),

524 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

525 
ngx_c⁄f_£t_íum_¶Ÿ
,

526 
NGX_HTTP_LOC_CONF_OFFSET
,

527 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

528 &
ngx_hâp_c‹e_ßtisfy
 },

530 { 
ngx_°rög
("satisfy_any"),

531 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

532 
ngx_c⁄f_£t_Êag_¶Ÿ
,

533 
NGX_HTTP_LOC_CONF_OFFSET
,

534 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

535 &
ngx_c⁄f_dïªˇãd_ßtisfy_™y
 },

537 { 
ngx_°rög
("internal"),

538 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

539 
ngx_hâp_c‹e_öã∫Æ
,

540 
NGX_HTTP_LOC_CONF_OFFSET
,

542 
NULL
 },

544 { 
ngx_°rög
("lingering_close"),

545 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

546 
ngx_c⁄f_£t_íum_¶Ÿ
,

547 
NGX_HTTP_LOC_CONF_OFFSET
,

548 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_˛o£
),

549 &
ngx_hâp_c‹e_lögîög_˛o£
 },

551 { 
ngx_°rög
("lingering_time"),

552 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

553 
ngx_c⁄f_£t_m£c_¶Ÿ
,

554 
NGX_HTTP_LOC_CONF_OFFSET
,

555 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_time
),

556 
NULL
 },

558 { 
ngx_°rög
("lingering_timeout"),

559 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

560 
ngx_c⁄f_£t_m£c_¶Ÿ
,

561 
NGX_HTTP_LOC_CONF_OFFSET
,

562 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_timeout
),

563 
NULL
 },

565 { 
ngx_°rög
("reset_timedout_connection"),

566 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

567 
ngx_c⁄f_£t_Êag_¶Ÿ
,

568 
NGX_HTTP_LOC_CONF_OFFSET
,

569 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ª£t_timedout_c⁄√˘i⁄
),

570 
NULL
 },

572 { 
ngx_°rög
("server_name_in_redirect"),

573 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

574 
ngx_c⁄f_£t_Êag_¶Ÿ
,

575 
NGX_HTTP_LOC_CONF_OFFSET
,

576 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

577 
NULL
 },

579 { 
ngx_°rög
("port_in_redirect"),

580 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

581 
ngx_c⁄f_£t_Êag_¶Ÿ
,

582 
NGX_HTTP_LOC_CONF_OFFSET
,

583 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
p‹t_ö_ªdúe˘
),

584 
NULL
 },

586 { 
ngx_°rög
("msie_padding"),

587 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

588 
ngx_c⁄f_£t_Êag_¶Ÿ
,

589 
NGX_HTTP_LOC_CONF_OFFSET
,

590 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_∑ddög
),

591 
NULL
 },

593 { 
ngx_°rög
("msie_refresh"),

594 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

595 
ngx_c⁄f_£t_Êag_¶Ÿ
,

596 
NGX_HTTP_LOC_CONF_OFFSET
,

597 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_ª‰esh
),

598 
NULL
 },

600 { 
ngx_°rög
("log_not_found"),

601 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

602 
ngx_c⁄f_£t_Êag_¶Ÿ
,

603 
NGX_HTTP_LOC_CONF_OFFSET
,

604 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_nŸ_found
),

605 
NULL
 },

607 { 
ngx_°rög
("log_subrequest"),

608 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

609 
ngx_c⁄f_£t_Êag_¶Ÿ
,

610 
NGX_HTTP_LOC_CONF_OFFSET
,

611 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_subªque°
),

612 
NULL
 },

614 { 
ngx_°rög
("recursive_error_pages"),

615 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

616 
ngx_c⁄f_£t_Êag_¶Ÿ
,

617 
NGX_HTTP_LOC_CONF_OFFSET
,

618 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªcursive_îr‹_∑ges
),

619 
NULL
 },

621 { 
ngx_°rög
("server_tokens"),

622 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

623 
ngx_c⁄f_£t_Êag_¶Ÿ
,

624 
NGX_HTTP_LOC_CONF_OFFSET
,

625 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_tokís
),

626 
NULL
 },

628 { 
ngx_°rög
("if_modified_since"),

629 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

630 
ngx_c⁄f_£t_íum_¶Ÿ
,

631 
NGX_HTTP_LOC_CONF_OFFSET
,

632 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
if_modifõd_sö˚
),

633 &
ngx_hâp_c‹e_if_modifõd_sö˚
 },

635 { 
ngx_°rög
("max_ranges"),

636 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

637 
ngx_c⁄f_£t_num_¶Ÿ
,

638 
NGX_HTTP_LOC_CONF_OFFSET
,

639 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
max_ønges
),

640 
NULL
 },

642 { 
ngx_°rög
("chunked_transfer_encoding"),

643 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

644 
ngx_c⁄f_£t_Êag_¶Ÿ
,

645 
NGX_HTTP_LOC_CONF_OFFSET
,

646 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
chunked_å™s„r_ícodög
),

647 
NULL
 },

649 { 
ngx_°rög
("error_page"),

650 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


651 |
NGX_CONF_2MORE
,

652 
ngx_hâp_c‹e_îr‹_∑ge
,

653 
NGX_HTTP_LOC_CONF_OFFSET
,

655 
NULL
 },

657 { 
ngx_°rög
("try_files"),

658 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

659 
ngx_hâp_c‹e_åy_fûes
,

660 
NGX_HTTP_LOC_CONF_OFFSET
,

662 
NULL
 },

664 { 
ngx_°rög
("post_action"),

665 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


666 |
NGX_CONF_TAKE1
,

667 
ngx_c⁄f_£t_°r_¶Ÿ
,

668 
NGX_HTTP_LOC_CONF_OFFSET
,

669 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°_a˘i⁄
),

670 
NULL
 },

672 { 
ngx_°rög
("error_log"),

673 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

674 
ngx_hâp_c‹e_îr‹_log
,

675 
NGX_HTTP_LOC_CONF_OFFSET
,

677 
NULL
 },

679 { 
ngx_°rög
("open_file_cache"),

680 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

681 
ngx_hâp_c‹e_›í_fûe_ˇche
,

682 
NGX_HTTP_LOC_CONF_OFFSET
,

683 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche
),

684 
NULL
 },

686 { 
ngx_°rög
("open_file_cache_valid"),

687 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

688 
ngx_c⁄f_£t_£c_¶Ÿ
,

689 
NGX_HTTP_LOC_CONF_OFFSET
,

690 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

691 
NULL
 },

693 { 
ngx_°rög
("open_file_cache_retest"),

694 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

695 
ngx_c⁄f_£t_£c_¶Ÿ
,

696 
NGX_HTTP_LOC_CONF_OFFSET
,

697 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

698 &
ngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 },

700 { 
ngx_°rög
("open_file_cache_min_uses"),

701 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

702 
ngx_c⁄f_£t_num_¶Ÿ
,

703 
NGX_HTTP_LOC_CONF_OFFSET
,

704 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_mö_u£s
),

705 
NULL
 },

707 { 
ngx_°rög
("open_file_cache_errors"),

708 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

709 
ngx_c⁄f_£t_Êag_¶Ÿ
,

710 
NGX_HTTP_LOC_CONF_OFFSET
,

711 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_îr‹s
),

712 
NULL
 },

714 { 
ngx_°rög
("open_file_cache_events"),

715 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

716 
ngx_c⁄f_£t_Êag_¶Ÿ
,

717 
NGX_HTTP_LOC_CONF_OFFSET
,

718 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_evíts
),

719 
NULL
 },

721 { 
ngx_°rög
("resolver"),

722 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

723 
ngx_hâp_c‹e_ªsﬁvî
,

724 
NGX_HTTP_LOC_CONF_OFFSET
,

726 
NULL
 },

728 { 
ngx_°rög
("resolver_timeout"),

729 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

730 
ngx_c⁄f_£t_m£c_¶Ÿ
,

731 
NGX_HTTP_LOC_CONF_OFFSET
,

732 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªsﬁvî_timeout
),

733 
NULL
 },

735 #i‡(
NGX_HTTP_GZIP
)

737 { 
ngx_°rög
("gzip_vary"),

738 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

739 
ngx_c⁄f_£t_Êag_¶Ÿ
,

740 
NGX_HTTP_LOC_CONF_OFFSET
,

741 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_v¨y
),

742 
NULL
 },

744 { 
ngx_°rög
("gzip_http_version"),

745 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

746 
ngx_c⁄f_£t_íum_¶Ÿ
,

747 
NGX_HTTP_LOC_CONF_OFFSET
,

748 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_hâp_vîsi⁄
),

749 &
ngx_hâp_gzù_hâp_vîsi⁄
 },

751 { 
ngx_°rög
("gzip_proxied"),

752 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

753 
ngx_c⁄f_£t_bômask_¶Ÿ
,

754 
NGX_HTTP_LOC_CONF_OFFSET
,

755 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_¥oxõd
),

756 &
ngx_hâp_gzù_¥oxõd_mask
 },

758 { 
ngx_°rög
("gzip_disable"),

759 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

760 
ngx_hâp_gzù_dißbÀ
,

761 
NGX_HTTP_LOC_CONF_OFFSET
,

763 
NULL
 },

767 
ngx_nuŒ_comm™d


771 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ_˘x
 = {

772 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
,

773 
NULL
,

775 
ngx_hâp_c‹e_¸óã_maö_c⁄f
,

776 
ngx_hâp_c‹e_öô_maö_c⁄f
,

778 
ngx_hâp_c‹e_¸óã_§v_c⁄f
,

779 
ngx_hâp_c‹e_mîge_§v_c⁄f
,

781 
ngx_hâp_c‹e_¸óã_loc_c⁄f
,

782 
ngx_hâp_c‹e_mîge_loc_c⁄f


786 
ngx_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ
 = {

787 
NGX_MODULE_V1
,

788 &
ngx_hâp_c‹e_moduÀ_˘x
,

789 
ngx_hâp_c‹e_comm™ds
,

790 
NGX_HTTP_MODULE
,

791 
NULL
,

792 
NULL
,

793 
NULL
,

794 
NULL
,

795 
NULL
,

796 
NULL
,

797 
NULL
,

798 
NGX_MODULE_V1_PADDING


802 
ngx_°r_t
 
	gngx_hâp_c‹e_gë_mëhod
 = { 3, (
u_ch¨
 *) "GET " };

806 
	$ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

808 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

810 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = 
NULL
;

812 
r
->
c⁄√˘i⁄
->
u√x≥˘ed_eof
 = 0;

814 i‡(!
r
->
öã∫Æ
) {

815 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
) {

817 
r
->
kì∑live
 = (r->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
);

820 
NGX_HTTP_CONNECTION_CLOSE
:

821 
r
->
kì∑live
 = 0;

824 
NGX_HTTP_CONNECTION_KEEP_ALIVE
:

825 
r
->
kì∑live
 = 1;

829 
r
->
lögîög_˛o£
 = (r->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0);

830 
r
->
pha£_h™dÀr
 = 0;

833 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

834 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
;

837 
r
->
vÆid_loˇti⁄
 = 1;

838 #i‡(
NGX_HTTP_GZIP
)

839 
r
->
gzù_ã°ed
 = 0;

840 
r
->
gzù_ok
 = 0;

841 
r
->
gzù_v¨y
 = 0;

844 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

845 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

846 
	}
}

850 
	$ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
)

852 
ngx_öt_t
 
rc
;

853 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

854 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

856 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

858 
ph
 = 
cmcf
->
pha£_ígöe
.
h™dÀrs
;

860 
ph
[
r
->
pha£_h™dÀr
].
checkî
) {

862 
rc
 = 
ph
[
r
->
pha£_h™dÀr
].
	`checkî
(r, &ph[r->phase_handler]);

864 i‡(
rc
 =
NGX_OK
) {

868 
	}
}

871 
ngx_öt_t


872 
	$ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

874 
ngx_öt_t
 
rc
;

881 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

882 "gíîi¯pha£: %ui", 
r
->
pha£_h™dÀr
);

884 
rc
 = 
ph
->
	`h™dÀr
(
r
);

886 i‡(
rc
 =
NGX_OK
) {

887 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

888  
NGX_AGAIN
;

891 i‡(
rc
 =
NGX_DECLINED
) {

892 
r
->
pha£_h™dÀr
++;

893  
NGX_AGAIN
;

896 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

897  
NGX_OK
;

902 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

904  
NGX_OK
;

905 
	}
}

908 
ngx_öt_t


909 
	$ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

911 
ngx_öt_t
 
rc
;

913 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

914 "ªwrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

916 
rc
 = 
ph
->
	`h™dÀr
(
r
);

918 i‡(
rc
 =
NGX_DECLINED
) {

919 
r
->
pha£_h™dÀr
++;

920  
NGX_AGAIN
;

923 i‡(
rc
 =
NGX_DONE
) {

924  
NGX_OK
;

929 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

931  
NGX_OK
;

932 
	}
}

935 
ngx_öt_t


936 
	$ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

937 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

939 
u_ch¨
 *
p
;

940 
size_t
 
Àn
;

941 
ngx_öt_t
 
rc
;

942 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

944 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

945 
r
->
uri_ch™ged
 = 0;

947 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

949 i‡(
rc
 =
NGX_ERROR
) {

950 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

951  
NGX_OK
;

954 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

956 i‡(!
r
->
öã∫Æ
 && 
˛cf
->internal) {

957 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

958  
NGX_OK
;

961 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

963 (
˛cf
->
n⁄ame
 ? "*" : (˛cf->
exa˘_m©ch
 ? "=" : "")),

964 &
˛cf
->
«me
);

966 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

968 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

970 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
, 
˛cf
->
˛õ¡_max_body_size
);

972 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

973 && !
r
->
disˇrd_body


974 && 
˛cf
->
˛õ¡_max_body_size


975 && 
˛cf
->
˛õ¡_max_body_size
 < 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
)

977 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

979 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

981 (Ë
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

982 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
);

983  
NGX_OK
;

986 i‡(
rc
 =
NGX_DONE
) {

987 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

989 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

990 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

991 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

992  
NGX_OK
;

1000 i‡(
r
->
¨gs
.
Àn
 == 0) {

1001 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
˛cf
->
«me
;

1004 
Àn
 = 
˛cf
->
«me
.À¿+ 1 + 
r
->
¨gs
.len;

1005 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1007 i‡(
p
 =
NULL
) {

1008 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1009  
NGX_OK
;

1012 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

1013 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

1015 
p
 = 
	`ngx_˝ymem
’, 
˛cf
->
«me
.
d©a
, clcf->«me.
Àn
);

1016 *
p
++ = '?';

1017 
	`ngx_mem˝y
(
p
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1020 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_MOVED_PERMANENTLY
);

1021  
NGX_OK
;

1024 
r
->
pha£_h™dÀr
++;

1025  
NGX_AGAIN
;

1026 
	}
}

1029 
ngx_öt_t


1030 
	$ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1031 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1033 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1035 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1036 "po°Ñewrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

1038 i‡(!
r
->
uri_ch™ged
) {

1039 
r
->
pha£_h™dÀr
++;

1040  
NGX_AGAIN
;

1043 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1044 "uròch™ges: %d", 
r
->
uri_ch™ges
);

1053 
r
->
uri_ch™ges
--;

1055 i‡(
r
->
uri_ch™ges
 == 0) {

1056 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1058 "whûê¥o˚ssög \"%V\"", &
r
->
uri
);

1060 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1061  
NGX_OK
;

1064 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1066 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1067 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

1069  
NGX_AGAIN
;

1070 
	}
}

1073 
ngx_öt_t


1074 
	$ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1076 
ngx_öt_t
 
rc
;

1077 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1079 i‡(
r
 !r->
maö
) {

1080 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1081  
NGX_AGAIN
;

1084 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1085 "ac˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1087 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1089 i‡(
rc
 =
NGX_DECLINED
) {

1090 
r
->
pha£_h™dÀr
++;

1091  
NGX_AGAIN
;

1094 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

1095  
NGX_OK
;

1098 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1100 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

1102 i‡(
rc
 =
NGX_OK
) {

1103 
r
->
pha£_h™dÀr
++;

1104  
NGX_AGAIN
;

1108 i‡(
rc
 =
NGX_OK
) {

1109 
r
->
ac˚ss_code
 = 0;

1111 i‡(
r
->
hódîs_out
.
www_authítiˇã
) {

1112 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 0;

1115 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1116  
NGX_AGAIN
;

1119 i‡(
rc
 =
NGX_HTTP_FORBIDDEN
 ||Ñ¯=
NGX_HTTP_UNAUTHORIZED
) {

1120 
r
->
ac˚ss_code
 = 
rc
;

1122 
r
->
pha£_h™dÀr
++;

1123  
NGX_AGAIN
;

1129 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1130  
NGX_OK
;

1131 
	}
}

1134 
ngx_öt_t


1135 
	$ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1136 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1138 
ngx_öt_t
 
ac˚ss_code
;

1140 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1141 "po°ác˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1143 
ac˚ss_code
 = 
r
->access_code;

1145 i‡(
ac˚ss_code
) {

1146 i‡(
ac˚ss_code
 =
NGX_HTTP_FORBIDDEN
) {

1147 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1151 
r
->
ac˚ss_code
 = 0;

1152 
	`ngx_hâp_föÆize_ªque°
(
r
, 
ac˚ss_code
);

1153  
NGX_OK
;

1156 
r
->
pha£_h™dÀr
++;

1157  
NGX_AGAIN
;

1158 
	}
}

1161 
ngx_öt_t


1162 
	$ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1163 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1165 
size_t
 
Àn
, 
roŸ
, 
Æüs
, 
ª£rve
, 
Æloˇãd
;

1166 
u_ch¨
 *
p
, *
«me
;

1167 
ngx_°r_t
 
∑th
, 
¨gs
;

1168 
ngx_uöt_t
 
ã°_dú
;

1169 
ngx_hâp_åy_fûe_t
 *
tf
;

1170 
ngx_›í_fûe_öfo_t
 
of
;

1171 
ngx_hâp_s¸ùt_code_±
 
code
;

1172 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

1173 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1174 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1176 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1177 "åy fûe†pha£: %ui", 
r
->
pha£_h™dÀr
);

1179 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1181 i‡(
˛cf
->
åy_fûes
 =
NULL
) {

1182 
r
->
pha£_h™dÀr
++;

1183  
NGX_AGAIN
;

1186 
Æloˇãd
 = 0;

1187 
roŸ
 = 0;

1188 
«me
 = 
NULL
;

1190 
∑th
.
d©a
 = 
NULL
;

1192 
tf
 = 
˛cf
->
åy_fûes
;

1194 
Æüs
 = 
˛cf
->alias;

1198 i‡(
tf
->
Àngths
) {

1199 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1201 
e
.
ù
 = 
tf
->
Àngths
->
ñts
;

1202 
e
.
ªque°
 = 
r
;

1205 
Àn
 = 1;

1207 *(
uöçå_t
 *Ë
e
.
ù
) {

1208 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

1209 
Àn
 +
	`lcode
(&
e
);

1213 
Àn
 = 
tf
->
«me
.len;

1217 
ª£rve
 = 
	`ngx_abs
((
ssize_t
Ë(
Àn
 - 
r
->
uri
.Àn)Ë+ 
Æüs
 + 16;

1219 i‡(
ª£rve
 > 
Æloˇãd
) {

1223 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
ª£rve
Ë=
NULL
) {

1224 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1225  
NGX_OK
;

1228 
«me
 = 
∑th
.
d©a
 + 
roŸ
;

1229 
Æloˇãd
 = 
∑th
.
Àn
 - 
roŸ
 - (
r
->
uri
.À¿- 
Æüs
);

1232 i‡(
tf
->
vÆues
 =
NULL
) {

1236 
	`ngx_mem˝y
(
«me
, 
tf
->«me.
d©a
,Åf->«me.
Àn
);

1238 
∑th
.
Àn
 = (
«me
 + 
tf
->«me.À¿- 1Ë-Ö©h.
d©a
;

1241 
e
.
ù
 = 
tf
->
vÆues
->
ñts
;

1242 
e
.
pos
 = 
«me
;

1243 
e
.
Êushed
 = 1;

1245 *(
uöçå_t
 *Ë
e
.
ù
) {

1246 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1247 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1250 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

1252 *
e
.
pos
 = '\0';

1254 i‡(
Æüs
 && 
	`ngx_°∫cmp
(
«me
, 
˛cf
->«me.
d©a
,álias) == 0) {

1255 
	`ngx_memmove
(
«me
,Çamê+ 
Æüs
, 
Àn
 -álias);

1256 
∑th
.
Àn
 -
Æüs
;

1260 
ã°_dú
 = 
tf
->test_dir;

1262 
tf
++;

1264 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1266 
ã°_dú
 ? "dú" : "fûe", 
«me
, 
∑th
.
d©a
);

1268 i‡(
tf
->
Àngths
 =
NULL
 &&Åf->
«me
.
Àn
 == 0) {

1270 i‡(
tf
->
code
) {

1271 
	`ngx_hâp_föÆize_ªque°
(
r
, 
tf
->
code
);

1272  
NGX_OK
;

1275 
∑th
.
Àn
 -
roŸ
;

1276 
∑th
.
d©a
 +
roŸ
;

1278 i‡(
∑th
.
d©a
[0] == '@') {

1279 (Ë
	`ngx_hâp_«med_loˇti⁄
(
r
, &
∑th
);

1282 
	`ngx_hâp_•lô_¨gs
(
r
, &
∑th
, &
¨gs
);

1284 (Ë
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
∑th
, &
¨gs
);

1287 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

1288  
NGX_OK
;

1291 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1293 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1294 
of
.
dúe˘io
 = 
˛cf
->directio;

1295 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1296 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1297 
of
.
ã°_⁄ly
 = 1;

1298 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1299 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1301 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1302 !
NGX_OK
)

1304 i‡(
of
.
îr
 !
NGX_ENOENT


1305 && 
of
.
îr
 !
NGX_ENOTDIR


1306 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1308 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1309 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

1315 i‡(
of
.
is_dú
 && !
ã°_dú
) {

1319 
∑th
.
Àn
 -
roŸ
;

1320 
∑th
.
d©a
 +
roŸ
;

1322 i‡(!
Æüs
) {

1323 
r
->
uri
 = 
∑th
;

1325 #i‡(
NGX_PCRE
)

1326 } i‡(
˛cf
->
ªgex
) {

1327 i‡(!
ã°_dú
) {

1328 
r
->
uri
 = 
∑th
;

1329 
r
->
add_uri_to_Æüs
 = 1;

1333 
r
->
uri
.
Àn
 = 
Æüs
 + 
∑th
.len;

1334 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
);

1335 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1336 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1337  
NGX_OK
;

1340 
p
 = 
	`ngx_c›y
(
r
->
uri
.
d©a
, 
˛cf
->
«me
.d©a, 
Æüs
);

1341 
	`ngx_mem˝y
(
p
, 
«me
, 
∑th
.
Àn
);

1344 
	`ngx_hâp_£t_exãn
(
r
);

1346 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1347 "åy fûêuri: \"%V\"", &
r
->
uri
);

1349 
r
->
pha£_h™dÀr
++;

1350  
NGX_AGAIN
;

1354 
	}
}

1357 
ngx_öt_t


1358 
	$ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1359 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1361 
size_t
 
roŸ
;

1362 
ngx_öt_t
 
rc
;

1363 
ngx_°r_t
 
∑th
;

1365 i‡(
r
->
c⁄ã¡_h™dÀr
) {

1366 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

1367 
	`ngx_hâp_föÆize_ªque°
(
r
,Ñ->
	`c⁄ã¡_h™dÀr
(r));

1368  
NGX_OK
;

1371 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1372 "c⁄ã¡Öha£: %ui", 
r
->
pha£_h™dÀr
);

1374 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1376 i‡(
rc
 !
NGX_DECLINED
) {

1377 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1378  
NGX_OK
;

1383 
ph
++;

1385 i‡(
ph
->
checkî
) {

1386 
r
->
pha£_h™dÀr
++;

1387  
NGX_AGAIN
;

1392 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

1394 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë!
NULL
) {

1395 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1396 "dúe˘‹y index o‡\"%s\" i†f‹biddí", 
∑th
.
d©a
);

1399 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_FORBIDDEN
);

1400  
NGX_OK
;

1403 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "no handler found");

1405 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1406  
NGX_OK
;

1407 
	}
}

1411 
	$ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
)

1413 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1415 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1417 i‡(
r
->
mëhod
 & 
˛cf
->
limô_ex˚±
) {

1418 
r
->
loc_c⁄f
 = 
˛cf
->
limô_ex˚±_loc_c⁄f
;

1419 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1422 i‡(
r
 =r->
maö
) {

1423 
r
->
c⁄√˘i⁄
->
log
->
fûe
 = 
˛cf
->
îr‹_log
->file;

1425 i‡(!(
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

1426 
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 = 
˛cf
->
îr‹_log
->log_level;

1430 i‡((
ngx_io
.
Êags
 & 
NGX_IO_SENDFILE
Ë&& 
˛cf
->
£ndfûe
) {

1431 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 1;

1434 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 0;

1437 i‡(
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
) {

1438 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

1439 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

1440 
r
->
ªque°_body_ö_˛ón_fûe
 =

1441 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 =
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
;

1442 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_NOTICE
;

1445 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_WARN
;

1448 
r
->
ªque°_body_ö_sögÀ_buf
 = 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
;

1450 i‡(
r
->
kì∑live
) {

1451 i‡(
˛cf
->
kì∑live_timeout
 == 0) {

1452 
r
->
kì∑live
 = 0;

1454 } i‡(
r
->
c⁄√˘i⁄
->
ªque°s
 >
˛cf
->
kì∑live_ªque°s
) {

1455 
r
->
kì∑live
 = 0;

1457 } i‡(
r
->
hódîs_ö
.
msõ6


1458 && 
r
->
mëhod
 =
NGX_HTTP_POST


1459 && (
˛cf
->
kì∑live_dißbÀ


1460 & 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
))

1466 
r
->
kì∑live
 = 0;

1468 } i‡(
r
->
hódîs_ö
.
ßÁri


1469 && (
˛cf
->
kì∑live_dißbÀ


1470 & 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
))

1477 
r
->
kì∑live
 = 0;

1481 i‡(!
˛cf
->
t˝_n›ush
) {

1483 
r
->
c⁄√˘i⁄
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

1486 i‡(
r
->
limô_øã
 == 0) {

1487 
r
->
limô_øã
 = 
˛cf
->limit_rate;

1490 i‡(
˛cf
->
h™dÀr
) {

1491 
r
->
c⁄ã¡_h™dÀr
 = 
˛cf
->
h™dÀr
;

1493 
	}
}

1504 
ngx_öt_t


1505 
	$ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
)

1507 
ngx_öt_t
 
rc
;

1508 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
;

1509 #i‡(
NGX_PCRE
)

1510 
ngx_öt_t
 
n
;

1511 
ngx_uöt_t
 
n‹egex
;

1512 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, **
˛cÂ
;

1514 
n‹egex
 = 0;

1517 
p˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1519 
rc
 = 
	`ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
r
, 
p˛cf
->
°©ic_loˇti⁄s
);

1521 i‡(
rc
 =
NGX_AGAIN
) {

1523 #i‡(
NGX_PCRE
)

1524 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1526 
n‹egex
 = 
˛cf
->noregex;

1531 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1534 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_DONE
) {

1535  
rc
;

1540 #i‡(
NGX_PCRE
)

1542 i‡(
n‹egex
 =0 && 
p˛cf
->
ªgex_loˇti⁄s
) {

1544 
˛cÂ
 = 
p˛cf
->
ªgex_loˇti⁄s
; *clcfp; clcfp++) {

1546 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1547 "ã°Üoˇti⁄: ~ \"%V\"", &(*
˛cÂ
)->
«me
);

1549 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, (*
˛cÂ
)->
ªgex
, &r->
uri
);

1551 i‡(
n
 =
NGX_OK
) {

1552 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

1556 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1558  (
rc
 =
NGX_ERROR
Ë?Ñ¯: 
NGX_OK
;

1561 i‡(
n
 =
NGX_DECLINED
) {

1565  
NGX_ERROR
;

1570  
rc
;

1571 
	}
}

1581 
ngx_öt_t


1582 
	$ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1583 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
)

1585 
u_ch¨
 *
uri
;

1586 
size_t
 
Àn
, 
n
;

1587 
ngx_öt_t
 
rc
, 
rv
;

1589 
Àn
 = 
r
->
uri
.len;

1590 
uri
 = 
r
->uri.
d©a
;

1592 
rv
 = 
NGX_DECLINED
;

1596 i‡(
node
 =
NULL
) {

1597  
rv
;

1600 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1601 "ã°Üoˇti⁄: \"%*s\"", 
node
->
Àn
,Çode->
«me
);

1603 
n
 = (
Àn
 <(
size_t
Ë
node
->len) ?Üen :Çode->len;

1605 
rc
 = 
	`ngx_fûíame_cmp
(
uri
, 
node
->
«me
, 
n
);

1607 i‡(
rc
 != 0) {

1608 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1613 i‡(
Àn
 > (
size_t
Ë
node
->len) {

1615 i‡(
node
->
ö˛usive
) {

1617 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1618 
rv
 = 
NGX_AGAIN
;

1620 
node
 =Çode->
åì
;

1621 
uri
 +
n
;

1622 
Àn
 -
n
;

1629 
node
 =Çode->
right
;

1634 i‡(
Àn
 =(
size_t
Ë
node
->len) {

1636 i‡(
node
->
exa˘
) {

1637 
r
->
loc_c⁄f
 = 
node
->
exa˘
->loc_conf;

1638  
NGX_OK
;

1641 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1642  
NGX_AGAIN
;

1648 i‡(
Àn
 + 1 =(
size_t
Ë
node
->À¿&&Çode->
auto_ªdúe˘
) {

1650 
r
->
loc_c⁄f
 = (
node
->
exa˘
) ?Çode->exact->loc_conf:

1651 
node
->
ö˛usive
->
loc_c⁄f
;

1652 
rv
 = 
NGX_DONE
;

1655 
node
 =Çode->
À·
;

1657 
	}
}

1661 
	$ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
)

1663 
u_ch¨
 
c
, *
lowˇ£
;

1664 
size_t
 
Àn
;

1665 
ngx_uöt_t
 
i
, 
hash
;

1667 i‡(
ty≥s_hash
->
size
 == 0) {

1671 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

1672  
NULL
;

1675 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

1677 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 =
NULL
) {

1679 
lowˇ£
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1680 i‡(
lowˇ£
 =
NULL
) {

1681  
NULL
;

1684 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
lowˇ£
;

1686 
hash
 = 0;

1688 
i
 = 0; i < 
Àn
; i++) {

1689 
c
 = 
	`ngx_tﬁowî
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
[
i
]);

1690 
hash
 = 
	`ngx_hash
(hash, 
c
);

1691 
lowˇ£
[
i
] = 
c
;

1694 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
 = 
hash
;

1697  
	`ngx_hash_föd
(
ty≥s_hash
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
,

1698 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
, 
Àn
);

1699 
	}
}

1702 
ngx_öt_t


1703 
	$ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
)

1705 
u_ch¨
 
c
, *
exãn
;

1706 
ngx_°r_t
 *
ty≥
;

1707 
ngx_uöt_t
 
i
, 
hash
;

1708 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1710 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1711  
NGX_OK
;

1714 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1716 i‡(
r
->
exãn
.
Àn
) {

1718 
hash
 = 0;

1720 
i
 = 0; i < 
r
->
exãn
.
Àn
; i++) {

1721 
c
 = 
r
->
exãn
.
d©a
[
i
];

1723 i‡(
c
 >= 'A' && c <= 'Z') {

1725 
exãn
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->exãn.
Àn
);

1726 i‡(
exãn
 =
NULL
) {

1727  
NGX_ERROR
;

1730 
hash
 = 
	`ngx_hash_°æow
(
exãn
, 
r
->exãn.
d©a
,Ñ->exãn.
Àn
);

1732 
r
->
exãn
.
d©a
 =Éxten;

1737 
hash
 = 
	`ngx_hash
(hash, 
c
);

1740 
ty≥
 = 
	`ngx_hash_föd
(&
˛cf
->
ty≥s_hash
, 
hash
,

1741 
r
->
exãn
.
d©a
,Ñ->exãn.
Àn
);

1743 i‡(
ty≥
) {

1744 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
ty≥
->
Àn
;

1745 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
ty≥
;

1747  
NGX_OK
;

1751 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˛cf
->
deÁu…_ty≥
.
Àn
;

1752 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
˛cf
->
deÁu…_ty≥
;

1754  
NGX_OK
;

1755 
	}
}

1759 
	$ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
)

1761 
ngx_öt_t
 
i
;

1763 
	`ngx_°r_nuŒ
(&
r
->
exãn
);

1765 
i
 = 
r
->
uri
.
Àn
 - 1; i > 1; i--) {

1766 i‡(
r
->
uri
.
d©a
[
i
] == '.' &&Ñ->uri.data[i - 1] != '/') {

1768 
r
->
exãn
.
Àn
 =Ñ->
uri
.À¿- 
i
 - 1;

1769 
r
->
exãn
.
d©a
 = &r->
uri
.d©a[
i
 + 1];

1773 } i‡(
r
->
uri
.
d©a
[
i
] == '/') {

1779 
	}
}

1782 
ngx_öt_t


1783 
	$ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

1784 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
)

1786 
ngx_öt_t
 
rc
;

1787 
ngx_°r_t
 
vÆ
;

1788 
ngx_buf_t
 *
b
;

1789 
ngx_chaö_t
 
out
;

1791 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

1792  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1795 
r
->
hódîs_out
.
°©us
 = status;

1797 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1798  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1801 i‡(
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


1802 || 
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY


1803 || 
°©us
 =
NGX_HTTP_SEE_OTHER


1804 || 
°©us
 =
NGX_HTTP_TEMPORARY_REDIRECT
)

1806 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1808 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1809 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1810  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1813 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1814 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1815 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
vÆ
;

1817  
°©us
;

1820 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
vÆ
.
Àn
;

1822 i‡(
˘
) {

1823 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

1824 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

1827 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

1828  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1832 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
 || (∏!r->
maö
 && 
vÆ
.
Àn
 == 0)) {

1833  
	`ngx_hâp_£nd_hódî
(
r
);

1836 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1837 i‡(
b
 =
NULL
) {

1838  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1841 
b
->
pos
 = 
vÆ
.
d©a
;

1842 
b
->
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

1843 
b
->
mem‹y
 = 
vÆ
.
Àn
 ? 1 : 0;

1844 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

1845 
b
->
œ°_ö_chaö
 = 1;

1847 
out
.
buf
 = 
b
;

1848 
out
.
√xt
 = 
NULL
;

1850 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1852 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1853  
rc
;

1856  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1857 
	}
}

1860 
ngx_öt_t


1861 
	$ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1863 i‡(
r
->
îr_°©us
) {

1864 
r
->
hódîs_out
.
°©us
 =Ñ->
îr_°©us
;

1865 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

1868  
	`ngx_hâp_t›_hódî_fûãr
(
r
);

1869 
	}
}

1872 
ngx_öt_t


1873 
	$ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1875 
ngx_öt_t
 
rc
;

1876 
ngx_c⁄√˘i⁄_t
 *
c
;

1878 
c
 = 
r
->
c⁄√˘i⁄
;

1880 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1881 "hâ∞ouçuàfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1883 
rc
 = 
	`ngx_hâp_t›_body_fûãr
(
r
, 
ö
);

1885 i‡(
rc
 =
NGX_ERROR
) {

1887 
c
->
îr‹
 = 1;

1890  
rc
;

1891 
	}
}

1894 
u_ch¨
 *

1895 
	$ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
,

1896 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
)

1898 
u_ch¨
 *
œ°
;

1899 
size_t
 
Æüs
;

1900 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1902 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1904 
Æüs
 = 
˛cf
->alias;

1906 i‡(
Æüs
 && !
r
->
vÆid_loˇti⁄
) {

1907 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1909 "whîêURI wa†ªwrôãn", &
˛cf
->
«me
);

1910  
NULL
;

1913 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1915 *
roŸ_Àngth
 = 
˛cf
->
roŸ
.
Àn
;

1917 
∑th
->
Àn
 = 
˛cf
->
roŸ
.À¿+ 
ª£rved
 + 
r
->
uri
.À¿- 
Æüs
 + 1;

1919 
∑th
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ö©h->
Àn
);

1920 i‡(
∑th
->
d©a
 =
NULL
) {

1921  
NULL
;

1924 
œ°
 = 
	`ngx_c›y
(
∑th
->
d©a
, 
˛cf
->
roŸ
.d©a, clcf->roŸ.
Àn
);

1928 #i‡(
NGX_PCRE
)

1929 
ngx_uöt_t
 
ˇ±uªs
;

1931 
ˇ±uªs
 = 
Æüs
 && 
˛cf
->
ªgex
;

1933 
ª£rved
 +
ˇ±uªs
 ? 
r
->
add_uri_to_Æüs
 ?Ñ->
uri
.
Àn
 + 1 : 1

1934 : 
r
->
uri
.
Àn
 - 
Æüs
 + 1;

1936 
ª£rved
 +
r
->
uri
.
Àn
 - 
Æüs
 + 1;

1939 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, 
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 
ª£rved
,

1940 
˛cf
->
roŸ_vÆues
->
ñts
)

1941 =
NULL
)

1943  
NULL
;

1946 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, 
∑th
, 0Ë!
NGX_OK
) {

1947  
NULL
;

1950 *
roŸ_Àngth
 = 
∑th
->
Àn
 - 
ª£rved
;

1951 
œ°
 = 
∑th
->
d©a
 + *
roŸ_Àngth
;

1953 #i‡(
NGX_PCRE
)

1954 i‡(
ˇ±uªs
) {

1955 i‡(!
r
->
add_uri_to_Æüs
) {

1956 *
œ°
 = '\0';

1957  
œ°
;

1960 
Æüs
 = 0;

1965 
œ°
 = 
	`ngx_˝y°∫
÷a°, 
r
->
uri
.
d©a
 + 
Æüs
,Ñ->uri.
Àn
 -álias + 1);

1967  
œ°
;

1968 
	}
}

1971 
ngx_öt_t


1972 
	$ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
)

1974 
ngx_°r_t
 
auth
, 
ícoded
;

1975 
ngx_uöt_t
 
Àn
;

1977 i‡(
r
->
hódîs_ö
.
u£r
.
Àn
 =0 &&Ñ->hódîs_ö.u£r.
d©a
 !
NULL
) {

1978  
NGX_DECLINED
;

1981 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 =
NULL
) {

1982 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

1983  
NGX_DECLINED
;

1986 
ícoded
 = 
r
->
hódîs_ö
.
auth‹iz©i⁄
->
vÆue
;

1988 i‡(
ícoded
.
Àn
 < ("Basic ") - 1

1989 || 
	`ngx_°∫ˇ£cmp
(
ícoded
.
d©a
, (
u_ch¨
 *) "Basic ",

1993 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

1994  
NGX_DECLINED
;

1997 
ícoded
.
Àn
 -= ("Basic ") - 1;

1998 
ícoded
.
d©a
 += ("Basic ") - 1;

2000 
ícoded
.
Àn
 &&Éncoded.
d©a
[0] == ' ') {

2001 
ícoded
.
Àn
--;

2002 
ícoded
.
d©a
++;

2005 i‡(
ícoded
.
Àn
 == 0) {

2006 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2007  
NGX_DECLINED
;

2010 
auth
.
Àn
 = 
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len);

2011 
auth
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,áuth.
Àn
 + 1);

2012 i‡(
auth
.
d©a
 =
NULL
) {

2013  
NGX_ERROR
;

2016 i‡(
	`ngx_decode_ba£64
(&
auth
, &
ícoded
Ë!
NGX_OK
) {

2017 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2018  
NGX_DECLINED
;

2021 
auth
.
d©a
[auth.
Àn
] = '\0';

2023 
Àn
 = 0;Üí < 
auth
.len;Üen++) {

2024 i‡(
auth
.
d©a
[
Àn
] == ':') {

2029 i‡(
Àn
 =0 ||Üí =
auth
.len) {

2030 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2031  
NGX_DECLINED
;

2034 
r
->
hódîs_ö
.
u£r
.
Àn
 =Üen;

2035 
r
->
hódîs_ö
.
u£r
.
d©a
 = 
auth
.data;

2036 
r
->
hódîs_ö
.
∑sswd
.
Àn
 = 
auth
.len -Üen - 1;

2037 
r
->
hódîs_ö
.
∑sswd
.
d©a
 = &
auth
.d©a[
Àn
 + 1];

2039  
NGX_OK
;

2040 
	}
}

2043 #i‡(
NGX_HTTP_GZIP
)

2045 
ngx_öt_t


2046 
	$ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
)

2048 
time_t
 
d©e
, 
expúes
;

2049 
ngx_uöt_t
 
p
;

2050 
ngx_¨øy_t
 *
cc
;

2051 
ngx_èbÀ_ñt_t
 *
e
, *
d
, *
´
;

2052 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2054 
r
->
gzù_ã°ed
 = 1;

2056 i‡(
r
 !r->
maö
) {

2057  
NGX_DECLINED
;

2060 
´
 = 
r
->
hódîs_ö
.
ac˚±_ícodög
;

2061 i‡(
´
 =
NULL
) {

2062  
NGX_DECLINED
;

2065 i‡(
´
->
vÆue
.
Àn
 < ("gzip") - 1) {

2066  
NGX_DECLINED
;

2078 i‡(
	`ngx_memcmp
(
´
->
vÆue
.
d©a
, "gzip,", 5) != 0

2079 && 
	`ngx_hâp_gzù_ac˚±_ícodög
(&
´
->
vÆue
Ë!
NGX_OK
)

2081  
NGX_DECLINED
;

2084 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2086 i‡(
r
->
hódîs_ö
.
msõ6
 && 
˛cf
->
gzù_dißbÀ_msõ6
) {

2087  
NGX_DECLINED
;

2090 i‡(
r
->
hâp_vîsi⁄
 < 
˛cf
->
gzù_hâp_vîsi⁄
) {

2091  
NGX_DECLINED
;

2094 i‡(
r
->
hódîs_ö
.
vü
 =
NULL
) {

2095 
ok
;

2098 
p
 = 
˛cf
->
gzù_¥oxõd
;

2100 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_OFF
) {

2101  
NGX_DECLINED
;

2104 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_ANY
) {

2105 
ok
;

2108 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 && (
p
 & 
NGX_HTTP_GZIP_PROXIED_AUTH
)) {

2109 
ok
;

2112 
e
 = 
r
->
hódîs_out
.
expúes
;

2114 i‡(
e
) {

2116 i‡(!(
p
 & 
NGX_HTTP_GZIP_PROXIED_EXPIRED
)) {

2117  
NGX_DECLINED
;

2120 
expúes
 = 
	`ngx_hâp_∑r£_time
(
e
->
vÆue
.
d©a
,É->vÆue.
Àn
);

2121 i‡(
expúes
 =
NGX_ERROR
) {

2122  
NGX_DECLINED
;

2125 
d
 = 
r
->
hódîs_out
.
d©e
;

2127 i‡(
d
) {

2128 
d©e
 = 
	`ngx_hâp_∑r£_time
(
d
->
vÆue
.
d©a
, d->vÆue.
Àn
);

2129 i‡(
d©e
 =
NGX_ERROR
) {

2130  
NGX_DECLINED
;

2134 
d©e
 = 
	`ngx_time
();

2137 i‡(
expúes
 < 
d©e
) {

2138 
ok
;

2141  
NGX_DECLINED
;

2144 
cc
 = &
r
->
hódîs_out
.
ˇche_c⁄åﬁ
;

2146 i‡(
cc
->
ñts
) {

2148 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
)

2149 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_ˇche
,

2150 
NULL
)

2153 
ok
;

2156 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_STORE
)

2157 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_°‹e
,

2158 
NULL
)

2161 
ok
;

2164 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_PRIVATE
)

2165 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_¥iv©e
,

2166 
NULL
)

2169 
ok
;

2172  
NGX_DECLINED
;

2175 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_LM
Ë&& 
r
->
hódîs_out
.
œ°_modifõd
) {

2176  
NGX_DECLINED
;

2179 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
Ë&& 
r
->
hódîs_out
.
ëag
) {

2180  
NGX_DECLINED
;

2183 
ok
:

2185 #i‡(
NGX_PCRE
)

2187 i‡(
˛cf
->
gzù_dißbÀ
 && 
r
->
hódîs_ö
.
u£r_agít
) {

2189 i‡(
	`ngx_ªgex_exec_¨øy
(
˛cf
->
gzù_dißbÀ
,

2190 &
r
->
hódîs_ö
.
u£r_agít
->
vÆue
,

2191 
r
->
c⁄√˘i⁄
->
log
)

2192 !
NGX_DECLINED
)

2194  
NGX_DECLINED
;

2200 
r
->
gzù_ok
 = 1;

2202  
NGX_OK
;

2203 
	}
}

2213 
ngx_öt_t


2214 
	$ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
)

2216 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

2218 
°¨t
 = 
´
->
d©a
;

2219 
œ°
 = 
°¨t
 + 
´
->
Àn
;

2222 
p
 = 
	`ngx_°rˇ£°∫
(
°¨t
, "gzip", 4 - 1);

2223 i‡(
p
 =
NULL
) {

2224  
NGX_DECLINED
;

2227 i‡(
p
 =
°¨t
 || (*(p - 1) == ',' || *(p - 1) == ' ')) {

2231 
°¨t
 = 
p
 + 4;

2234 
p
 += 4;

2236 
p
 < 
œ°
) {

2237 *
p
++) {

2239  
NGX_OK
;

2241 
qu™tôy
;

2245  
NGX_DECLINED
;

2249  
NGX_OK
;

2251 
qu™tôy
:

2253 
p
 < 
œ°
) {

2254 *
p
++) {

2257 
equÆ
;

2261  
NGX_DECLINED
;

2265  
NGX_OK
;

2267 
equÆ
:

2269 i‡(
p
 + 2 > 
œ°
 || *p++ != '=') {

2270  
NGX_DECLINED
;

2273 i‡(
	`ngx_hâp_gzù_qu™tôy
(
p
, 
œ°
) == 0) {

2274  
NGX_DECLINED
;

2277  
NGX_OK
;

2278 
	}
}

2281 
ngx_uöt_t


2282 
	$ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
)

2284 
u_ch¨
 
c
;

2285 
ngx_uöt_t
 
n
, 
q
;

2287 
c
 = *
p
++;

2289 i‡(
c
 != '0' && c != '1') {

2293 
q
 = (
c
 - '0') * 100;

2295 i‡(
p
 =
œ°
) {

2296  
q
;

2299 
c
 = *
p
++;

2301 i‡(
c
 == ',' || c == ' ') {

2302  
q
;

2305 i‡(
c
 != '.') {

2309 
n
 = 0;

2311 
p
 < 
œ°
) {

2312 
c
 = *
p
++;

2314 i‡(
c
 == ',' || c == ' ') {

2318 i‡(
c
 >= '0' && c <= '9') {

2319 
q
 +
c
 - '0';

2320 
n
++;

2327 i‡(
q
 > 100 || 
n
 > 3) {

2331  
q
;

2332 
	}
}

2337 
ngx_öt_t


2338 
	$ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

2339 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
p§
,

2340 
ngx_hâp_po°_subªque°_t
 *
ps
, 
ngx_uöt_t
 
Êags
)

2342 
ngx_time_t
 *
ç
;

2343 
ngx_c⁄√˘i⁄_t
 *
c
;

2344 
ngx_hâp_ªque°_t
 *
§
;

2345 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2346 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, *
p
;

2348 
r
->
maö
->
subªque°s
--;

2350 i‡(
r
->
maö
->
subªque°s
 == 0) {

2351 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2352 "subªque°†cy˛êwhûê¥o˚ssög \"%V\"", 
uri
);

2353 
r
->
maö
->
subªque°s
 = 1;

2354  
NGX_ERROR
;

2357 
§
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_t
));

2358 i‡(
§
 =
NULL
) {

2359  
NGX_ERROR
;

2362 
§
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

2364 
c
 = 
r
->
c⁄√˘i⁄
;

2365 
§
->
c⁄√˘i⁄
 = 
c
;

2367 
§
->
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2368 i‡(
§
->
˘x
 =
NULL
) {

2369  
NGX_ERROR
;

2372 i‡(
	`ngx_li°_öô
(&
§
->
hódîs_out
.
hódîs
, 
r
->
poﬁ
, 20,

2373 (
ngx_èbÀ_ñt_t
))

2374 !
NGX_OK
)

2376  
NGX_ERROR
;

2379 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2380 
§
->
maö_c⁄f
 = 
cscf
->
˘x
->main_conf;

2381 
§
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2382 
§
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2384 
§
->
poﬁ
 = 
r
->pool;

2386 
§
->
hódîs_ö
 = 
r
->headers_in;

2388 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
§
);

2389 
	`ngx_hâp_˛ór_ac˚±_ønges
(
§
);

2390 
	`ngx_hâp_˛ór_œ°_modifõd
(
§
);

2392 
§
->
ªque°_body
 = 
r
->request_body;

2394 
§
->
mëhod
 = 
NGX_HTTP_GET
;

2395 
§
->
hâp_vîsi⁄
 = 
r
->http_version;

2397 
§
->
ªque°_löe
 = 
r
->request_line;

2398 
§
->
uri
 = *uri;

2400 i‡(
¨gs
) {

2401 
§
->
¨gs
 = *args;

2404 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2405 "hâ∞subªque° \"%V?%V\"", 
uri
, &
§
->
¨gs
);

2407 
§
->
subªque°_ö_mem‹y
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_IN_MEMORY
) != 0;

2408 
§
->
waôed
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_WAITED
) != 0;

2410 
§
->
u≈¨£d_uri
 = 
r
->unparsed_uri;

2411 
§
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

2412 
§
->
hâp_¥Ÿocﬁ
 = 
r
->http_protocol;

2414 
	`ngx_hâp_£t_exãn
(
§
);

2416 
§
->
maö
 = 
r
->main;

2417 
§
->
∑ª¡
 = 
r
;

2418 
§
->
po°_subªque°
 = 
ps
;

2419 
§
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2420 
§
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_h™dÀr
;

2422 i‡(
c
->
d©a
 =
r
 &&Ñ->
po°p⁄ed
 =
NULL
) {

2423 
c
->
d©a
 = 
§
;

2426 
§
->
v¨übÀs
 = 
r
->variables;

2428 
§
->
log_h™dÀr
 = 
r
->log_handler;

2430 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

2431 i‡(
¥
 =
NULL
) {

2432  
NGX_ERROR
;

2435 
¥
->
ªque°
 = 
§
;

2436 
¥
->
out
 = 
NULL
;

2437 
¥
->
√xt
 = 
NULL
;

2439 i‡(
r
->
po°p⁄ed
) {

2440 
p
 = 
r
->
po°p⁄ed
;Ö->
√xt
;Ö =Ö->next) { }

2441 
p
->
√xt
 = 
¥
;

2444 
r
->
po°p⁄ed
 = 
¥
;

2447 
§
->
öã∫Æ
 = 1;

2449 
§
->
disˇrd_body
 = 
r
->discard_body;

2450 
§
->
ex≥˘_ã°ed
 = 1;

2451 
§
->
maö_fûãr_√ed_ö_mem‹y
 = 
r
->main_filter_need_in_memory;

2453 
§
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

2455 
ç
 = 
	`ngx_timeofday
();

2456 
§
->
°¨t_£c
 = 
ç
->
£c
;

2457 
§
->
°¨t_m£c
 = 
ç
->
m£c
;

2459 
r
->
maö
->
subªque°s
++;

2460 
r
->
maö
->
cou¡
++;

2462 *
p§
 = 
§
;

2464  
	`ngx_hâp_po°_ªque°
(
§
, 
NULL
);

2465 
	}
}

2468 
ngx_öt_t


2469 
	$ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

2470 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2472 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2474 
r
->
uri_ch™ges
--;

2476 i‡(
r
->
uri_ch™ges
 == 0) {

2477 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2479 "whûêöã∫ÆlyÑedúe˘ögÅÿ\"%V\"", 
uri
);

2481 
r
->
maö
->
cou¡
++;

2482 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2483  
NGX_DONE
;

2486 
r
->
uri
 = *uri;

2488 i‡(
¨gs
) {

2489 
r
->
¨gs
 = *args;

2492 
	`ngx_°r_nuŒ
(&
r
->
¨gs
);

2495 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2496 "öã∫ÆÑedúe˘: \"%V?%V\"", 
uri
, &
r
->
¨gs
);

2498 
	`ngx_hâp_£t_exãn
(
r
);

2501 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2503 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2504 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2506 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2508 #i‡(
NGX_HTTP_CACHE
)

2509 
r
->
ˇche
 = 
NULL
;

2512 
r
->
öã∫Æ
 = 1;

2513 
r
->
add_uri_to_Æüs
 = 0;

2514 
r
->
maö
->
cou¡
++;

2516 
	`ngx_hâp_h™dÀr
(
r
);

2518  
NGX_DONE
;

2519 
	}
}

2522 
ngx_öt_t


2523 
	$ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

2525 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2526 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

2527 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2529 
r
->
maö
->
cou¡
++;

2530 
r
->
uri_ch™ges
--;

2532 i‡(
r
->
uri_ch™ges
 == 0) {

2533 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2535 "whûêªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2537 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2538  
NGX_DONE
;

2541 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2543 i‡(
cscf
->
«med_loˇti⁄s
) {

2545 
˛cÂ
 = 
cscf
->
«med_loˇti⁄s
; *clcfp; clcfp++) {

2547 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2548 "ã°Üoˇti⁄: \"%V\"", &(*
˛cÂ
)->
«me
);

2550 i‡(
«me
->
Àn
 !(*
˛cÂ
)->name.len

2551 || 
	`ngx_°∫cmp
(
«me
->
d©a
, (*
˛cÂ
)->«me.d©a,Çame->
Àn
) != 0)

2556 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2558 
«me
, &
r
->
uri
, &r->
¨gs
);

2560 
r
->
öã∫Æ
 = 1;

2561 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2562 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

2564 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2566 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2568 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

2570 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2572  
NGX_DONE
;

2576 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2577 "couldÇŸ födÇamedÜoˇti⁄ \"%V\"", 
«me
);

2579 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2581  
NGX_DONE
;

2582 
	}
}

2585 
ngx_hâp_˛ónup_t
 *

2586 
	$ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
)

2588 
ngx_hâp_˛ónup_t
 *
˛n
;

2590 
r
 =Ñ->
maö
;

2592 
˛n
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_˛ónup_t
));

2593 i‡(
˛n
 =
NULL
) {

2594  
NULL
;

2597 i‡(
size
) {

2598 
˛n
->
d©a
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
size
);

2599 i‡(
˛n
->
d©a
 =
NULL
) {

2600  
NULL
;

2604 
˛n
->
d©a
 = 
NULL
;

2607 
˛n
->
h™dÀr
 = 
NULL
;

2608 
˛n
->
√xt
 = 
r
->
˛ónup
;

2610 
r
->
˛ónup
 = 
˛n
;

2612 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2613 "hâ∞˛ónu∞add: %p", 
˛n
);

2615  
˛n
;

2616 
	}
}

2620 
	$ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2622 *
rv
;

2623 *
mc⁄f
;

2624 
ngx_uöt_t
 
i
;

2625 
ngx_c⁄f_t
 
pcf
;

2626 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2627 
sockaddr_ö
 *
sö
;

2628 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

2629 
ngx_hâp_li°í_›t_t
 
ls›t
;

2630 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

2631 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2633 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2634 i‡(
˘x
 =
NULL
) {

2635  
NGX_CONF_ERROR
;

2638 
hâp_˘x
 = 
cf
->
˘x
;

2639 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

2643 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2644 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

2645  
NGX_CONF_ERROR
;

2650 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2651 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2652  
NGX_CONF_ERROR
;

2655 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

2656 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

2660 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

2662 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

2663 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

2664 i‡(
mc⁄f
 =
NULL
) {

2665  
NGX_CONF_ERROR
;

2668 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2671 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

2672 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

2673 i‡(
mc⁄f
 =
NULL
) {

2674  
NGX_CONF_ERROR
;

2677 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2684 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2685 
cscf
->
˘x
 = ctx;

2688 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2690 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

2691 i‡(
cscÂ
 =
NULL
) {

2692  
NGX_CONF_ERROR
;

2695 *
cscÂ
 = 
cscf
;

2700 
pcf
 = *
cf
;

2701 
cf
->
˘x
 = ctx;

2702 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SRV_CONF
;

2704 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

2706 *
cf
 = 
pcf
;

2708 i‡(
rv
 =
NGX_CONF_OK
 && !
cscf
->
li°í
) {

2709 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

2711 
sö
 = &
ls›t
.
u
.
sockaddr_ö
;

2713 
sö
->
sö_Ámûy
 = 
AF_INET
;

2714 #i‡(
NGX_WIN32
)

2715 
sö
->
sö_p‹t
 = 
	`ht⁄s
(80);

2717 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
	`gëuid
() == 0) ? 80 : 8000);

2719 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

2721 
ls›t
.
sockÀn
 = (
sockaddr_ö
);

2723 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

2724 
ls›t
.
rcvbuf
 = -1;

2725 
ls›t
.
¢dbuf
 = -1;

2726 #i‡(
NGX_HAVE_SETFIB
)

2727 
ls›t
.
£tfib
 = -1;

2729 
ls›t
.
wûdˇrd
 = 1;

2731 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
addr
,

2732 
NGX_SOCKADDR_STRLEN
, 1);

2734 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë!
NGX_OK
) {

2735  
NGX_CONF_ERROR
;

2739  
rv
;

2740 
	}
}

2744 
	$ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2746 *
rv
;

2747 
u_ch¨
 *
mod
;

2748 
size_t
 
Àn
;

2749 
ngx_°r_t
 *
vÆue
, *
«me
;

2750 
ngx_uöt_t
 
i
;

2751 
ngx_c⁄f_t
 
ßve
;

2752 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2753 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

2754 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

2756 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2757 i‡(
˘x
 =
NULL
) {

2758  
NGX_CONF_ERROR
;

2761 
p˘x
 = 
cf
->
˘x
;

2762 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

2763 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

2765 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2766 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2767  
NGX_CONF_ERROR
;

2770 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

2771 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

2775 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

2777 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

2778 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =

2779 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

2780 i‡(
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

2781  
NGX_CONF_ERROR
;

2786 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2787 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

2789 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2791 i‡(
cf
->
¨gs
->
√…s
 == 3) {

2793 
Àn
 = 
vÆue
[1].len;

2794 
mod
 = 
vÆue
[1].
d©a
;

2795 
«me
 = &
vÆue
[2];

2797 i‡(
Àn
 =1 && 
mod
[0] == '=') {

2799 
˛cf
->
«me
 = *name;

2800 
˛cf
->
exa˘_m©ch
 = 1;

2802 } i‡(
Àn
 =2 && 
mod
[0] == '^' && mod[1] == '~') {

2804 
˛cf
->
«me
 = *name;

2805 
˛cf
->
n‹egex
 = 1;

2807 } i‡(
Àn
 =1 && 
mod
[0] == '~') {

2809 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

2810  
NGX_CONF_ERROR
;

2813 } i‡(
Àn
 =2 && 
mod
[0] == '~' && mod[1] == '*') {

2815 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

2816  
NGX_CONF_ERROR
;

2820 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2821 "övÆidÜoˇti⁄ modifõ∏\"%V\"", &
vÆue
[1]);

2822  
NGX_CONF_ERROR
;

2827 
«me
 = &
vÆue
[1];

2829 i‡(
«me
->
d©a
[0] == '=') {

2831 
˛cf
->
«me
.
Àn
 =Çame->len - 1;

2832 
˛cf
->
«me
.
d©a
 =Çame->data + 1;

2833 
˛cf
->
exa˘_m©ch
 = 1;

2835 } i‡(
«me
->
d©a
[0] == '^' &&Çame->data[1] == '~') {

2837 
˛cf
->
«me
.
Àn
 =Çame->len - 2;

2838 
˛cf
->
«me
.
d©a
 =Çame->data + 2;

2839 
˛cf
->
n‹egex
 = 1;

2841 } i‡(
«me
->
d©a
[0] == '~') {

2843 
«me
->
Àn
--;

2844 
«me
->
d©a
++;

2846 i‡(
«me
->
d©a
[0] == '*') {

2848 
«me
->
Àn
--;

2849 
«me
->
d©a
++;

2851 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

2852  
NGX_CONF_ERROR
;

2856 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

2857  
NGX_CONF_ERROR
;

2863 
˛cf
->
«me
 = *name;

2865 i‡(
«me
->
d©a
[0] == '@') {

2866 
˛cf
->
«med
 = 1;

2871 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2873 i‡(
p˛cf
->
«me
.
Àn
) {

2878 
˛cf
->
¥ev_loˇti⁄
 = 
p˛cf
;

2881 i‡(
p˛cf
->
exa˘_m©ch
) {

2882 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2885 &
˛cf
->
«me
, &
p˛cf
->name);

2886  
NGX_CONF_ERROR
;

2889 i‡(
p˛cf
->
«med
) {

2890 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2893 &
˛cf
->
«me
, &
p˛cf
->name);

2894  
NGX_CONF_ERROR
;

2897 i‡(
˛cf
->
«med
) {

2898 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2901 &
˛cf
->
«me
);

2902  
NGX_CONF_ERROR
;

2905 
Àn
 = 
p˛cf
->
«me
.len;

2907 #i‡(
NGX_PCRE
)

2908 i‡(
˛cf
->
ªgex
 =
NULL


2909 && 
	`ngx_°∫cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

2911 i‡(
	`ngx_°∫cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

2914 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2916 &
˛cf
->
«me
, &
p˛cf
->name);

2917  
NGX_CONF_ERROR
;

2921 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

2922  
NGX_CONF_ERROR
;

2925 
ßve
 = *
cf
;

2926 
cf
->
˘x
 = ctx;

2927 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LOC_CONF
;

2929 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

2931 *
cf
 = 
ßve
;

2933  
rv
;

2934 
	}
}

2937 
ngx_öt_t


2938 
	$ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

2939 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

2941 #i‡(
NGX_PCRE
)

2942 
ngx_ªgex_compûe_t
 
rc
;

2943 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

2945 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

2947 
rc
.
∑âîn
 = *
ªgex
;

2948 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

2949 
rc
.
îr
.
d©a
 = 
îr°r
;

2951 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

2952 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

2954 
rc
.
›ti⁄s
 = 
ˇ£Àss
;

2957 
˛cf
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

2958 i‡(
˛cf
->
ªgex
 =
NULL
) {

2959  
NGX_ERROR
;

2962 
˛cf
->
«me
 = *
ªgex
;

2964  
NGX_OK
;

2968 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2970 
ªgex
);

2971  
NGX_ERROR
;

2974 
	}
}

2978 
	$ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2980 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

2982 *
rv
;

2983 
ngx_c⁄f_t
 
ßve
;

2985 i‡(
˛cf
->
ty≥s
 =
NULL
) {

2986 
˛cf
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, (
ngx_hash_key_t
));

2987 i‡(
˛cf
->
ty≥s
 =
NULL
) {

2988  
NGX_CONF_ERROR
;

2992 
ßve
 = *
cf
;

2993 
cf
->
h™dÀr
 = 
ngx_hâp_c‹e_ty≥
;

2994 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

2996 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

2998 *
cf
 = 
ßve
;

3000  
rv
;

3001 
	}
}

3005 
	$ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

3007 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3009 
ngx_°r_t
 *
vÆue
, *
c⁄ã¡_ty≥
, *
ﬁd
, 
fûe
;

3010 
ngx_uöt_t
 
i
, 
n
, 
hash
;

3011 
ngx_hash_key_t
 *
ty≥
;

3013 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3015 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

3016 i‡(
cf
->
¨gs
->
√…s
 != 2) {

3017 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3020  
NGX_CONF_ERROR
;

3022 
fûe
 = 
vÆue
[1];

3024 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

3025  
NGX_CONF_ERROR
;

3028 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

3030  
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

3033 
c⁄ã¡_ty≥
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

3034 i‡(
c⁄ã¡_ty≥
 =
NULL
) {

3035  
NGX_CONF_ERROR
;

3038 *
c⁄ã¡_ty≥
 = 
vÆue
[0];

3040 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

3042 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

3044 
ty≥
 = 
˛cf
->
ty≥s
->
ñts
;

3045 
n
 = 0;Ç < 
˛cf
->
ty≥s
->
√…s
;Ç++) {

3046 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

3047 
ﬁd
 = 
ty≥
[
n
].
vÆue
;

3048 
ty≥
[
n
].
vÆue
 = 
c⁄ã¡_ty≥
;

3050 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3054 &
vÆue
[
i
], 
c⁄ã¡_ty≥
, 
ﬁd
);

3055 
√xt
;

3060 
ty≥
 = 
	`ngx_¨øy_push
(
˛cf
->
ty≥s
);

3061 i‡(
ty≥
 =
NULL
) {

3062  
NGX_CONF_ERROR
;

3065 
ty≥
->
key
 = 
vÆue
[
i
];

3066 
ty≥
->
key_hash
 = 
hash
;

3067 
ty≥
->
vÆue
 = 
c⁄ã¡_ty≥
;

3069 
√xt
:

3073  
NGX_CONF_OK
;

3074 
	}
}

3077 
ngx_öt_t


3078 
	$ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

3080  
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
cf
);

3081 
	}
}

3085 
	$ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3087 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3089 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_maö_c⁄f_t
));

3090 i‡(
cmcf
 =
NULL
) {

3091  
NULL
;

3094 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

3095 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

3096 !
NGX_OK
)

3098  
NULL
;

3101 
cmcf
->
£rvî_«mes_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3102 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3104 
cmcf
->
v¨übÀs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3105 
cmcf
->
v¨übÀs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3107  
cmcf
;

3108 
	}
}

3112 
	$ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

3114 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
c⁄f
;

3116 i‡(
cmcf
->
£rvî_«mes_hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

3117 
cmcf
->
£rvî_«mes_hash_max_size
 = 512;

3120 i‡(
cmcf
->
£rvî_«mes_hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

3121 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
ngx_ˇchñöe_size
;

3124 
cmcf
->
£rvî_«mes_hash_buckë_size
 =

3125 
	`ngx_Æign
(
cmcf
->
£rvî_«mes_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3128 i‡(
cmcf
->
v¨übÀs_hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

3129 
cmcf
->
v¨übÀs_hash_max_size
 = 512;

3132 i‡(
cmcf
->
v¨übÀs_hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

3133 
cmcf
->
v¨übÀs_hash_buckë_size
 = 64;

3136 
cmcf
->
v¨übÀs_hash_buckë_size
 =

3137 
	`ngx_Æign
(
cmcf
->
v¨übÀs_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3139 i‡(
cmcf
->
nˇ±uªs
) {

3140 
cmcf
->
nˇ±uªs
 = (cmcf->ncaptures + 1) * 3;

3143  
NGX_CONF_OK
;

3144 
	}
}

3148 
	$ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3150 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3152 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_§v_c⁄f_t
));

3153 i‡(
cscf
 =
NULL
) {

3154  
NULL
;

3163 i‡(
	`ngx_¨øy_öô
(&
cscf
->
£rvî_«mes
, 
cf
->
ãmp_poﬁ
, 4,

3164 (
ngx_hâp_£rvî_«me_t
))

3165 !
NGX_OK
)

3167  
NULL
;

3170 
cscf
->
c⁄√˘i⁄_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3171 
cscf
->
ªque°_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3172 
cscf
->
˛õ¡_hódî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3173 
cscf
->
˛õ¡_hódî_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3174 
cscf
->
ign‹e_övÆid_hódîs
 = 
NGX_CONF_UNSET
;

3175 
cscf
->
mîge_¶ashes
 = 
NGX_CONF_UNSET
;

3176 
cscf
->
undîsc‹es_ö_hódîs
 = 
NGX_CONF_UNSET
;

3178  
cscf
;

3179 
	}
}

3183 
	$ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3185 
ngx_hâp_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3186 
ngx_hâp_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

3188 
ngx_°r_t
 
«me
;

3189 
ngx_hâp_£rvî_«me_t
 *
¢
;

3193 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
c⁄√˘i⁄_poﬁ_size
,

3194 
¥ev
->
c⁄√˘i⁄_poﬁ_size
, 256);

3195 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªque°_poﬁ_size
,

3196 
¥ev
->
ªque°_poﬁ_size
, 4096);

3197 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_hódî_timeout
,

3198 
¥ev
->
˛õ¡_hódî_timeout
, 60000);

3199 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_hódî_buf„r_size
,

3200 
¥ev
->
˛õ¡_hódî_buf„r_size
, 1024);

3201 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
,

3202 
¥ev
->
œrge_˛õ¡_hódî_buf„rs
,

3205 i‡(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
.
size
 < c⁄f->
c⁄√˘i⁄_poﬁ_size
) {

3206 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3209  
NGX_CONF_ERROR
;

3212 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_övÆid_hódîs
,

3213 
¥ev
->
ign‹e_övÆid_hódîs
, 1);

3215 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mîge_¶ashes
, 
¥ev
->merge_slashes, 1);

3217 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
undîsc‹es_ö_hódîs
,

3218 
¥ev
->
undîsc‹es_ö_hódîs
, 0);

3220 i‡(
c⁄f
->
£rvî_«mes
.
√…s
 == 0) {

3222 
¢
 = 
	`ngx_¨øy_push
(&
c⁄f
->
£rvî_«mes
);

3223 #i‡(
NGX_PCRE
)

3224 
¢
->
ªgex
 = 
NULL
;

3226 
¢
->
£rvî
 = 
c⁄f
;

3227 
	`ngx_°r_£t
(&
¢
->
«me
, "");

3230 
¢
 = 
c⁄f
->
£rvî_«mes
.
ñts
;

3231 
«me
 = 
¢
[0].name;

3233 #i‡(
NGX_PCRE
)

3234 i‡(
¢
->
ªgex
) {

3235 
«me
.
Àn
++;

3236 
«me
.
d©a
--;

3240 i‡(
«me
.
d©a
[0] == '.') {

3241 
«me
.
Àn
--;

3242 
«me
.
d©a
++;

3245 
c⁄f
->
£rvî_«me
.
Àn
 = 
«me
.len;

3246 
c⁄f
->
£rvî_«me
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

3247 i‡(
c⁄f
->
£rvî_«me
.
d©a
 =
NULL
) {

3248  
NGX_CONF_ERROR
;

3251  
NGX_CONF_OK
;

3252 
	}
}

3256 
	$ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3258 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3260 
˛cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_loc_c⁄f_t
));

3261 i‡(
˛cf
 =
NULL
) {

3262  
NULL
;

3285 
˛cf
->
˛õ¡_max_body_size
 = 
NGX_CONF_UNSET
;

3286 
˛cf
->
˛õ¡_body_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3287 
˛cf
->
˛õ¡_body_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3288 
˛cf
->
ßtisfy
 = 
NGX_CONF_UNSET_UINT
;

3289 
˛cf
->
if_modifõd_sö˚
 = 
NGX_CONF_UNSET_UINT
;

3290 
˛cf
->
max_ønges
 = 
NGX_CONF_UNSET_UINT
;

3291 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 = 
NGX_CONF_UNSET_UINT
;

3292 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
 = 
NGX_CONF_UNSET
;

3293 
˛cf
->
öã∫Æ
 = 
NGX_CONF_UNSET
;

3294 
˛cf
->
£ndfûe
 = 
NGX_CONF_UNSET
;

3295 
˛cf
->
£ndfûe_max_chunk
 = 
NGX_CONF_UNSET_SIZE
;

3296 #i‡(
NGX_HAVE_FILE_AIO
)

3297 
˛cf
->
aio
 = 
NGX_CONF_UNSET
;

3299 
˛cf
->
ªad_ahód
 = 
NGX_CONF_UNSET_SIZE
;

3300 
˛cf
->
dúe˘io
 = 
NGX_CONF_UNSET
;

3301 
˛cf
->
dúe˘io_Æignmít
 = 
NGX_CONF_UNSET
;

3302 
˛cf
->
t˝_n›ush
 = 
NGX_CONF_UNSET
;

3303 
˛cf
->
t˝_nodñay
 = 
NGX_CONF_UNSET
;

3304 
˛cf
->
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3305 
˛cf
->
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

3306 
˛cf
->
po°p⁄e_ouçut
 = 
NGX_CONF_UNSET_SIZE
;

3307 
˛cf
->
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

3308 
˛cf
->
limô_øã_a·î
 = 
NGX_CONF_UNSET_SIZE
;

3309 
˛cf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3310 
˛cf
->
kì∑live_hódî
 = 
NGX_CONF_UNSET
;

3311 
˛cf
->
kì∑live_ªque°s
 = 
NGX_CONF_UNSET_UINT
;

3312 
˛cf
->
lögîög_˛o£
 = 
NGX_CONF_UNSET_UINT
;

3313 
˛cf
->
lögîög_time
 = 
NGX_CONF_UNSET_MSEC
;

3314 
˛cf
->
lögîög_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3315 
˛cf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3316 
˛cf
->
ª£t_timedout_c⁄√˘i⁄
 = 
NGX_CONF_UNSET
;

3317 
˛cf
->
£rvî_«me_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3318 
˛cf
->
p‹t_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3319 
˛cf
->
msõ_∑ddög
 = 
NGX_CONF_UNSET
;

3320 
˛cf
->
msõ_ª‰esh
 = 
NGX_CONF_UNSET
;

3321 
˛cf
->
log_nŸ_found
 = 
NGX_CONF_UNSET
;

3322 
˛cf
->
log_subªque°
 = 
NGX_CONF_UNSET
;

3323 
˛cf
->
ªcursive_îr‹_∑ges
 = 
NGX_CONF_UNSET
;

3324 
˛cf
->
£rvî_tokís
 = 
NGX_CONF_UNSET
;

3325 
˛cf
->
chunked_å™s„r_ícodög
 = 
NGX_CONF_UNSET
;

3326 
˛cf
->
ty≥s_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3327 
˛cf
->
ty≥s_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3329 
˛cf
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

3330 
˛cf
->
›í_fûe_ˇche_vÆid
 = 
NGX_CONF_UNSET
;

3331 
˛cf
->
›í_fûe_ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

3332 
˛cf
->
›í_fûe_ˇche_îr‹s
 = 
NGX_CONF_UNSET
;

3333 
˛cf
->
›í_fûe_ˇche_evíts
 = 
NGX_CONF_UNSET
;

3335 #i‡(
NGX_HTTP_GZIP
)

3336 
˛cf
->
gzù_v¨y
 = 
NGX_CONF_UNSET
;

3337 
˛cf
->
gzù_hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

3338 #i‡(
NGX_PCRE
)

3339 
˛cf
->
gzù_dißbÀ
 = 
NGX_CONF_UNSET_PTR
;

3341 
˛cf
->
gzù_dißbÀ_msõ6
 = 3;

3342 #i‡(
NGX_HTTP_DEGRADATION
)

3343 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 3;

3347  
˛cf
;

3348 
	}
}

3351 
ngx_°r_t
 
	gngx_hâp_c‹e_ãxt_html_ty≥
 = 
ngx_°rög
("text/html");

3352 
ngx_°r_t
 
	gngx_hâp_c‹e_image_gif_ty≥
 = 
ngx_°rög
("image/gif");

3353 
ngx_°r_t
 
	gngx_hâp_c‹e_image_j≥g_ty≥
 = 
ngx_°rög
("image/jpeg");

3355 
ngx_hash_key_t
 
	gngx_hâp_c‹e_deÁu…_ty≥s
[] = {

3356 { 
ngx_°rög
("html"), 0, &
ngx_hâp_c‹e_ãxt_html_ty≥
 },

3357 { 
ngx_°rög
("gif"), 0, &
ngx_hâp_c‹e_image_gif_ty≥
 },

3358 { 
ngx_°rög
("jpg"), 0, &
ngx_hâp_c‹e_image_j≥g_ty≥
 },

3359 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

3364 
	$ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3366 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3367 
ngx_hâp_c‹e_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

3369 
ngx_uöt_t
 
i
;

3370 
ngx_hash_key_t
 *
ty≥
;

3371 
ngx_hash_öô_t
 
ty≥s_hash
;

3373 i‡(
c⁄f
->
roŸ
.
d©a
 =
NULL
) {

3375 
c⁄f
->
Æüs
 = 
¥ev
->alias;

3376 
c⁄f
->
roŸ
 = 
¥ev
->root;

3377 
c⁄f
->
roŸ_Àngths
 = 
¥ev
->root_lengths;

3378 
c⁄f
->
roŸ_vÆues
 = 
¥ev
->root_values;

3380 i‡(
¥ev
->
roŸ
.
d©a
 =
NULL
) {

3381 
	`ngx_°r_£t
(&
c⁄f
->
roŸ
, "html");

3383 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
c⁄f
->
roŸ
, 0Ë!
NGX_OK
) {

3384  
NGX_CONF_ERROR
;

3389 i‡(
c⁄f
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3390 
c⁄f
->
po°_a˘i⁄
 = 
¥ev
->post_action;

3393 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_max_size
,

3394 
¥ev
->
ty≥s_hash_max_size
, 1024);

3396 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_buckë_size
,

3397 
¥ev
->
ty≥s_hash_buckë_size
,

3398 
ngx_ˇchñöe_size
);

3400 
c⁄f
->
ty≥s_hash_buckë_size
 = 
	`ngx_Æign
(conf->types_hash_bucket_size,

3401 
ngx_ˇchñöe_size
);

3408 i‡(
¥ev
->
ty≥s
 &&Öªv->
ty≥s_hash
.
buckës
 =
NULL
) {

3410 
ty≥s_hash
.
hash
 = &
¥ev
->types_hash;

3411 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3412 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3413 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3414 
ty≥s_hash
.
«me
 = "types_hash";

3415 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3416 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3418 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
¥ev
->
ty≥s
->
ñts
,Öªv->ty≥s->
√…s
)

3419 !
NGX_OK
)

3421  
NGX_CONF_ERROR
;

3425 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3426 
c⁄f
->
ty≥s
 = 
¥ev
->types;

3427 
c⁄f
->
ty≥s_hash
 = 
¥ev
->types_hash;

3430 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3431 
c⁄f
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 3, (
ngx_hash_key_t
));

3432 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3433  
NGX_CONF_ERROR
;

3436 
i
 = 0; 
ngx_hâp_c‹e_deÁu…_ty≥s
[i].
key
.
Àn
; i++) {

3437 
ty≥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ty≥s
);

3438 i‡(
ty≥
 =
NULL
) {

3439  
NGX_CONF_ERROR
;

3442 
ty≥
->
key
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].key;

3443 
ty≥
->
key_hash
 =

3444 
	`ngx_hash_key_lc
(
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
d©a
,

3445 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
Àn
);

3446 
ty≥
->
vÆue
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].value;

3450 i‡(
c⁄f
->
ty≥s_hash
.
buckës
 =
NULL
) {

3452 
ty≥s_hash
.
hash
 = &
c⁄f
->types_hash;

3453 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3454 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3455 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3456 
ty≥s_hash
.
«me
 = "types_hash";

3457 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3458 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3460 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
c⁄f
->
ty≥s
->
ñts
, c⁄f->ty≥s->
√…s
)

3461 !
NGX_OK
)

3463  
NGX_CONF_ERROR
;

3467 i‡(
c⁄f
->
îr‹_log
 =
NULL
) {

3468 i‡(
¥ev
->
îr‹_log
) {

3469 
c⁄f
->
îr‹_log
 = 
¥ev
->error_log;

3471 
c⁄f
->
îr‹_log
 = &
cf
->
cy˛e
->
√w_log
;

3475 i‡(
c⁄f
->
îr‹_∑ges
 =
NULL
 && 
¥ev
->error_pages) {

3476 
c⁄f
->
îr‹_∑ges
 = 
¥ev
->error_pages;

3479 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
deÁu…_ty≥
,

3480 
¥ev
->
deÁu…_ty≥
, "text/plain");

3482 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
˛õ¡_max_body_size
,

3483 
¥ev
->
˛õ¡_max_body_size
, 1 * 1024 * 1024);

3484 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_body_buf„r_size
,

3485 
¥ev
->
˛õ¡_body_buf„r_size
,

3486 (
size_t
Ë2 * 
ngx_∑gesize
);

3487 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_body_timeout
,

3488 
¥ev
->
˛õ¡_body_timeout
, 60000);

3490 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
kì∑live_dißbÀ
,

3491 
¥ev
->
kì∑live_dißbÀ
,

3492 (
NGX_CONF_BITMASK_SET


3493 |
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6


3494 |
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
));

3495 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ßtisfy
, 
¥ev
->satisfy,

3496 
NGX_HTTP_SATISFY_ALL
);

3497 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
if_modifõd_sö˚
, 
¥ev
->if_modified_since,

3498 
NGX_HTTP_IMS_EXACT
);

3499 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
max_ønges
, 
¥ev
->max_ranges,

3500 
NGX_MAX_INT32_VALUE
);

3501 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
˛õ¡_body_ö_fûe_⁄ly
,

3502 
¥ev
->
˛õ¡_body_ö_fûe_⁄ly
,

3503 
NGX_HTTP_REQUEST_BODY_FILE_OFF
);

3504 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
˛õ¡_body_ö_sögÀ_buf„r
,

3505 
¥ev
->
˛õ¡_body_ö_sögÀ_buf„r
, 0);

3506 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öã∫Æ
, 
¥ev
->internal, 0);

3507 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ndfûe
, 
¥ev
->sendfile, 0);

3508 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£ndfûe_max_chunk
,

3509 
¥ev
->
£ndfûe_max_chunk
, 0);

3510 #i‡(
NGX_HAVE_FILE_AIO
)

3511 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
aio
, 
¥ev
->aio, 
NGX_HTTP_AIO_OFF
);

3513 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªad_ahód
, 
¥ev
->read_ahead, 0);

3514 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io
, 
¥ev
->directio,

3515 
NGX_OPEN_FILE_DIRECTIO_OFF
);

3516 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io_Æignmít
, 
¥ev
->directio_alignment,

3518 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_n›ush
, 
¥ev
->tcp_nopush, 0);

3519 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_nodñay
, 
¥ev
->tcp_nodelay, 1);

3521 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
£nd_timeout
, 
¥ev
->send_timeout, 60000);

3522 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£nd_low©
, 
¥ev
->send_lowat, 0);

3523 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_ouçut
, 
¥ev
->postpone_output,

3525 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã
, 
¥ev
->limit_rate, 0);

3526 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã_a·î
, 
¥ev
->limit_rate_after,

3528 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

3529 
¥ev
->
kì∑live_timeout
, 75000);

3530 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
kì∑live_hódî
,

3531 
¥ev
->
kì∑live_hódî
, 0);

3532 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
kì∑live_ªque°s
,

3533 
¥ev
->
kì∑live_ªque°s
, 100);

3534 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
lögîög_˛o£
,

3535 
¥ev
->
lögîög_˛o£
, 
NGX_HTTP_LINGERING_ON
);

3536 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_time
,

3537 
¥ev
->
lögîög_time
, 30000);

3538 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_timeout
,

3539 
¥ev
->
lögîög_timeout
, 5000);

3540 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
,

3541 
¥ev
->
ªsﬁvî_timeout
, 30000);

3543 i‡(
c⁄f
->
ªsﬁvî
 =
NULL
) {

3545 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3552 
¥ev
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, 
NULL
);

3553 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3554  
NGX_CONF_ERROR
;

3558 
c⁄f
->
ªsﬁvî
 = 
¥ev
->resolver;

3561 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
˛õ¡_body_ãmp_∑th
,

3562 
¥ev
->
˛õ¡_body_ãmp_∑th
,

3563 &
ngx_hâp_˛õ¡_ãmp_∑th
)

3564 !
NGX_OK
)

3566  
NGX_CONF_ERROR
;

3569 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ª£t_timedout_c⁄√˘i⁄
,

3570 
¥ev
->
ª£t_timedout_c⁄√˘i⁄
, 0);

3571 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_«me_ö_ªdúe˘
,

3572 
¥ev
->
£rvî_«me_ö_ªdúe˘
, 0);

3573 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
p‹t_ö_ªdúe˘
, 
¥ev
->port_in_redirect, 1);

3574 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_∑ddög
, 
¥ev
->msie_padding, 1);

3575 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_ª‰esh
, 
¥ev
->msie_refresh, 0);

3576 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_nŸ_found
, 
¥ev
->log_not_found, 1);

3577 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_subªque°
, 
¥ev
->log_subrequest, 0);

3578 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive_îr‹_∑ges
,

3579 
¥ev
->
ªcursive_îr‹_∑ges
, 0);

3580 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_tokís
, 
¥ev
->server_tokens, 1);

3581 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
chunked_å™s„r_ícodög
,

3582 
¥ev
->
chunked_å™s„r_ícodög
, 1);

3584 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
›í_fûe_ˇche
,

3585 
¥ev
->
›í_fûe_ˇche
, 
NULL
);

3587 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_vÆid
,

3588 
¥ev
->
›í_fûe_ˇche_vÆid
, 60);

3590 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
›í_fûe_ˇche_mö_u£s
,

3591 
¥ev
->
›í_fûe_ˇche_mö_u£s
, 1);

3593 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_îr‹s
,

3594 
¥ev
->
›í_fûe_ˇche_îr‹s
, 0);

3596 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_evíts
,

3597 
¥ev
->
›í_fûe_ˇche_evíts
, 0);

3598 #i‡(
NGX_HTTP_GZIP
)

3600 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
gzù_v¨y
, 
¥ev
->gzip_vary, 0);

3601 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_hâp_vîsi⁄
, 
¥ev
->gzip_http_version,

3602 
NGX_HTTP_VERSION_11
);

3603 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
gzù_¥oxõd
, 
¥ev
->gzip_proxied,

3604 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_GZIP_PROXIED_OFF
));

3606 #i‡(
NGX_PCRE
)

3607 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
gzù_dißbÀ
, 
¥ev
->gzù_dißbÀ, 
NULL
);

3610 i‡(
c⁄f
->
gzù_dißbÀ_msõ6
 == 3) {

3611 
c⁄f
->
gzù_dißbÀ_msõ6
 =

3612 (
¥ev
->
gzù_dißbÀ_msõ6
 == 3) ? 0 :Örev->gzip_disable_msie6;

3615 #i‡(
NGX_HTTP_DEGRADATION
)

3617 i‡(
c⁄f
->
gzù_dißbÀ_degød©i⁄
 == 3) {

3618 
c⁄f
->
gzù_dißbÀ_degød©i⁄
 =

3619 (
¥ev
->
gzù_dißbÀ_degød©i⁄
 == 3) ?

3620 0 : 
¥ev
->
gzù_dißbÀ_degød©i⁄
;

3626  
NGX_CONF_OK
;

3627 
	}
}

3631 
	$ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3633 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

3635 
ngx_°r_t
 *
vÆue
, 
size
;

3636 
ngx_uæ_t
 
u
;

3637 
ngx_uöt_t
 
n
;

3638 
ngx_hâp_li°í_›t_t
 
ls›t
;

3640 
cscf
->
li°í
 = 1;

3642 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3644 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3646 
u
.
uæ
 = 
vÆue
[1];

3647 
u
.
li°í
 = 1;

3648 
u
.
deÁu…_p‹t
 = 80;

3650 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

3651 i‡(
u
.
îr
) {

3652 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3654 
u
.
îr
, &u.
uæ
);

3657  
NGX_CONF_ERROR
;

3660 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

3662 
	`ngx_mem˝y
(&
ls›t
.
u
.
sockaddr
, u.sockaddr, u.
sockÀn
);

3664 
ls›t
.
sockÀn
 = 
u
.socklen;

3665 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

3666 
ls›t
.
rcvbuf
 = -1;

3667 
ls›t
.
¢dbuf
 = -1;

3668 #i‡(
NGX_HAVE_SETFIB
)

3669 
ls›t
.
£tfib
 = -1;

3671 
ls›t
.
wûdˇrd
 = 
u
.wildcard;

3673 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
addr
,

3674 
NGX_SOCKADDR_STRLEN
, 1);

3676 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

3678 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default_server") == 0

3679 || 
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default") == 0)

3681 
ls›t
.
deÁu…_£rvî
 = 1;

3685 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "bind") == 0) {

3686 
ls›t
.
£t
 = 1;

3687 
ls›t
.
böd
 = 1;

3691 #i‡(
NGX_HAVE_SETFIB
)

3692 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "setfib=", 7) == 0) {

3693 
ls›t
.
£tfib
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 7, vÆue[n].
Àn
 - 7);

3695 i‡(
ls›t
.
£tfib
 =
NGX_ERROR
) {

3696 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3697 "övÆid sëfib \"%V\"", &
vÆue
[
n
]);

3698  
NGX_CONF_ERROR
;

3704 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "backlog=", 8) == 0) {

3705 
ls›t
.
backlog
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 8, vÆue[n].
Àn
 - 8);

3706 
ls›t
.
£t
 = 1;

3707 
ls›t
.
böd
 = 1;

3709 i‡(
ls›t
.
backlog
 =
NGX_ERROR
 ||Üsopt.backlog == 0) {

3710 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3711 "övÆid backlog \"%V\"", &
vÆue
[
n
]);

3712  
NGX_CONF_ERROR
;

3718 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "rcvbuf=", 7) == 0) {

3719 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

3720 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

3722 
ls›t
.
rcvbuf
 = 
	`ngx_∑r£_size
(&
size
);

3723 
ls›t
.
£t
 = 1;

3724 
ls›t
.
böd
 = 1;

3726 i‡(
ls›t
.
rcvbuf
 =
NGX_ERROR
) {

3727 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3728 "övÆidÑcvbu‡\"%V\"", &
vÆue
[
n
]);

3729  
NGX_CONF_ERROR
;

3735 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "sndbuf=", 7) == 0) {

3736 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

3737 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

3739 
ls›t
.
¢dbuf
 = 
	`ngx_∑r£_size
(&
size
);

3740 
ls›t
.
£t
 = 1;

3741 
ls›t
.
böd
 = 1;

3743 i‡(
ls›t
.
¢dbuf
 =
NGX_ERROR
) {

3744 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3745 "övÆid sndbu‡\"%V\"", &
vÆue
[
n
]);

3746  
NGX_CONF_ERROR
;

3752 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "accept_filter=", 14) == 0) {

3753 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

3754 
ls›t
.
ac˚±_fûãr
 = (*Ë&
vÆue
[
n
].
d©a
[14];

3755 
ls›t
.
£t
 = 1;

3756 
ls›t
.
böd
 = 1;

3758 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3761 &
vÆue
[
n
]);

3766 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "deferred") == 0) {

3767 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

3768 
ls›t
.
de„ºed_ac˚±
 = 1;

3769 
ls›t
.
£t
 = 1;

3770 
ls›t
.
böd
 = 1;

3772 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3779 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "ipv6only=o", 10) == 0) {

3780 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

3781 
sockaddr
 *
ß
;

3783 
ß
 = &
ls›t
.
u
.
sockaddr
;

3785 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

3787 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "n") == 0) {

3788 
ls›t
.
ùv6⁄ly
 = 1;

3790 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "ff") == 0) {

3791 
ls›t
.
ùv6⁄ly
 = 2;

3794 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3796 &
vÆue
[
n
].
d©a
[9]);

3797  
NGX_CONF_ERROR
;

3800 
ls›t
.
£t
 = 1;

3801 
ls›t
.
böd
 = 1;

3804 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3806 "⁄ádd∏\"%s\", ign‹ed", 
ls›t
.
addr
);

3811 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3814  
NGX_CONF_ERROR
;

3818 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "ssl") == 0) {

3819 #i‡(
NGX_HTTP_SSL
)

3820 
ls›t
.
s¶
 = 1;

3823 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3826  
NGX_CONF_ERROR
;

3830 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3831 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
n
]);

3832  
NGX_CONF_ERROR
;

3835 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë=
NGX_OK
) {

3836  
NGX_CONF_OK
;

3839  
NGX_CONF_ERROR
;

3840 
	}
}

3844 
	$ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3846 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

3848 
u_ch¨
 
ch
;

3849 
ngx_°r_t
 *
vÆue
;

3850 
ngx_uöt_t
 
i
;

3851 
ngx_hâp_£rvî_«me_t
 *
¢
;

3853 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3855 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

3857 
ch
 = 
vÆue
[
i
].
d©a
[0];

3859 i‡((
ch
 ='*' && (
vÆue
[
i
].
Àn
 < 3 || vÆue[i].
d©a
[1] != '.'))

3860 || (
ch
 ='.' && 
vÆue
[
i
].
Àn
 < 2))

3862 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3863 "£rvîÇamê\"%V\" i†övÆid", &
vÆue
[
i
]);

3864  
NGX_CONF_ERROR
;

3867 i‡(
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/')) {

3868 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3870 &
vÆue
[
i
]);

3873 
¢
 = 
	`ngx_¨øy_push
(&
cscf
->
£rvî_«mes
);

3874 i‡(
¢
 =
NULL
) {

3875  
NGX_CONF_ERROR
;

3878 #i‡(
NGX_PCRE
)

3879 
¢
->
ªgex
 = 
NULL
;

3881 
¢
->
£rvî
 = 
cscf
;

3883 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, (
u_ch¨
 *) "$hostname") == 0) {

3884 
¢
->
«me
 = 
cf
->
cy˛e
->
ho°«me
;

3887 
¢
->
«me
 = 
vÆue
[
i
];

3890 i‡(
vÆue
[
i
].
d©a
[0] != '~') {

3891 
	`ngx_°æow
(
¢
->
«me
.
d©a
, sn->«me.d©a, sn->«me.
Àn
);

3895 #i‡(
NGX_PCRE
)

3897 
u_ch¨
 *
p
;

3898 
ngx_ªgex_compûe_t
 
rc
;

3899 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3901 i‡(
vÆue
[
i
].
Àn
 == 1) {

3902 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3903 "em±yÑegex i¿£rvîÇamê\"%V\"", &
vÆue
[
i
]);

3904  
NGX_CONF_ERROR
;

3907 
vÆue
[
i
].
Àn
--;

3908 
vÆue
[
i
].
d©a
++;

3910 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3912 
rc
.
∑âîn
 = 
vÆue
[
i
];

3913 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3914 
rc
.
îr
.
d©a
 = 
îr°r
;

3916 
p
 = 
vÆue
[
i
].
d©a
;Ö < vÆue[i].d©®+ vÆue[i].
Àn
;Ö++) {

3917 i‡(*
p
 >= 'A' && *p <= 'Z') {

3918 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3923 
¢
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3924 i‡(
¢
->
ªgex
 =
NULL
) {

3925  
NGX_CONF_ERROR
;

3928 
¢
->
«me
 = 
vÆue
[
i
];

3929 
cscf
->
ˇ±uªs
 = (
rc
.captures > 0);

3932 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3934 "ªquúe†PCREÜibøry", &
vÆue
[
i
]);

3936  
NGX_CONF_ERROR
;

3940  
NGX_CONF_OK
;

3941 
	}
}

3945 
	$ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3947 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3949 
ngx_°r_t
 *
vÆue
;

3950 
ngx_öt_t
 
Æüs
;

3951 
ngx_uöt_t
 
n
;

3952 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3954 
Æüs
 = (
cmd
->
«me
.
Àn
 == ("alias") - 1) ? 1 : 0;

3956 i‡(
˛cf
->
roŸ
.
d©a
) {

3958 i‡((
˛cf
->
Æüs
 != 0) ==álias) {

3959 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3961 &
cmd
->
«me
);

3963 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3966 &
cmd
->
«me
, 
˛cf
->
Æüs
 ? "alias" : "root");

3969  
NGX_CONF_ERROR
;

3972 i‡(
˛cf
->
«med
 && 
Æüs
) {

3973 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3977  
NGX_CONF_ERROR
;

3980 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3982 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$document_root")

3983 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${document_root}"))

3985 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3988 &
cmd
->
«me
);

3990  
NGX_CONF_ERROR
;

3993 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$realpath_root")

3994 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${realpath_root}"))

3996 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3999 &
cmd
->
«me
);

4001  
NGX_CONF_ERROR
;

4004 
˛cf
->
Æüs
 =álü†? clcf->
«me
.
Àn
 : 0;

4005 
˛cf
->
roŸ
 = 
vÆue
[1];

4007 i‡(!
Æüs
 && 
˛cf
->
roŸ
.
d©a
[˛cf->roŸ.
Àn
 - 1] == '/') {

4008 
˛cf
->
roŸ
.
Àn
--;

4011 i‡(
˛cf
->
roŸ
.
d©a
[0] != '$') {

4012 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
˛cf
->
roŸ
, 0Ë!
NGX_OK
) {

4013  
NGX_CONF_ERROR
;

4017 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
˛cf
->
roŸ
);

4019 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4020 
sc
.
v¨übÀs
 = 
n
;

4022 #i‡(
NGX_PCRE
)

4023 i‡(
Æüs
 && 
˛cf
->
ªgex
) {

4024 
n
 = 1;

4028 i‡(
n
) {

4029 
sc
.
cf
 = cf;

4030 
sc
.
sour˚
 = &
˛cf
->
roŸ
;

4031 
sc
.
Àngths
 = &
˛cf
->
roŸ_Àngths
;

4032 
sc
.
vÆues
 = &
˛cf
->
roŸ_vÆues
;

4033 
sc
.
com∂ëe_Àngths
 = 1;

4034 
sc
.
com∂ëe_vÆues
 = 1;

4036 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4037  
NGX_CONF_ERROR
;

4041  
NGX_CONF_OK
;

4042 
	}
}

4045 
ngx_hâp_mëhod_«me_t
 
	gngx_mëhods_«mes
[] = {

4046 { (
u_ch¨
 *Ë"GET", (
uöt32_t
Ë~
NGX_HTTP_GET
 },

4047 { (
u_ch¨
 *Ë"HEAD", (
uöt32_t
Ë~
NGX_HTTP_HEAD
 },

4048 { (
u_ch¨
 *Ë"POST", (
uöt32_t
Ë~
NGX_HTTP_POST
 },

4049 { (
u_ch¨
 *Ë"PUT", (
uöt32_t
Ë~
NGX_HTTP_PUT
 },

4050 { (
u_ch¨
 *Ë"DELETE", (
uöt32_t
Ë~
NGX_HTTP_DELETE
 },

4051 { (
u_ch¨
 *Ë"MKCOL", (
uöt32_t
Ë~
NGX_HTTP_MKCOL
 },

4052 { (
u_ch¨
 *Ë"COPY", (
uöt32_t
Ë~
NGX_HTTP_COPY
 },

4053 { (
u_ch¨
 *Ë"MOVE", (
uöt32_t
Ë~
NGX_HTTP_MOVE
 },

4054 { (
u_ch¨
 *Ë"OPTIONS", (
uöt32_t
Ë~
NGX_HTTP_OPTIONS
 },

4055 { (
u_ch¨
 *Ë"PROPFIND" , (
uöt32_t
Ë~
NGX_HTTP_PROPFIND
 },

4056 { (
u_ch¨
 *Ë"PROPPATCH", (
uöt32_t
Ë~
NGX_HTTP_PROPPATCH
 },

4057 { (
u_ch¨
 *Ë"LOCK", (
uöt32_t
Ë~
NGX_HTTP_LOCK
 },

4058 { (
u_ch¨
 *Ë"UNLOCK", (
uöt32_t
Ë~
NGX_HTTP_UNLOCK
 },

4059 { (
u_ch¨
 *Ë"PATCH", (
uöt32_t
Ë~
NGX_HTTP_PATCH
 },

4060 { 
NULL
, 0 }

4065 
	$ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4067 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
 = 
c⁄f
;

4069 *
rv
;

4070 *
mc⁄f
;

4071 
ngx_°r_t
 *
vÆue
;

4072 
ngx_uöt_t
 
i
;

4073 
ngx_c⁄f_t
 
ßve
;

4074 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4075 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

4076 
ngx_hâp_mëhod_«me_t
 *
«me
;

4077 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4079 i‡(
p˛cf
->
limô_ex˚±
) {

4083 
p˛cf
->
limô_ex˚±
 = 0xffffffff;

4085 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4087 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4088 
«me
 = 
ngx_mëhods_«mes
;Çame->name;Çame++) {

4090 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, 
«me
->name) == 0) {

4091 
p˛cf
->
limô_ex˚±
 &
«me
->
mëhod
;

4092 
√xt
;

4096 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4097 "övÆid mëhod \"%V\"", &
vÆue
[
i
]);

4098  
NGX_CONF_ERROR
;

4100 
√xt
:

4104 i‡(!(
p˛cf
->
limô_ex˚±
 & 
NGX_HTTP_GET
)) {

4105 
p˛cf
->
limô_ex˚±
 &(
uöt32_t
Ë~
NGX_HTTP_HEAD
;

4108 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4109 i‡(
˘x
 =
NULL
) {

4110  
NGX_CONF_ERROR
;

4113 
p˘x
 = 
cf
->
˘x
;

4114 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

4115 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

4117 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4118 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4119  
NGX_CONF_ERROR
;

4122 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

4123 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4127 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

4129 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4131 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4132 i‡(
mc⁄f
 =
NULL
) {

4133  
NGX_CONF_ERROR
;

4136 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

4141 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

4142 
p˛cf
->
limô_ex˚±_loc_c⁄f
 = 
˘x
->
loc_c⁄f
;

4143 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

4144 
˛cf
->
«me
 = 
p˛cf
->name;

4145 
˛cf
->
n⁄ame
 = 1;

4146 
˛cf
->
lmt_ex˝t
 = 1;

4148 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

4149  
NGX_CONF_ERROR
;

4152 
ßve
 = *
cf
;

4153 
cf
->
˘x
 = ctx;

4154 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LMT_CONF
;

4156 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4158 *
cf
 = 
ßve
;

4160  
rv
;

4161 
	}
}

4165 
	$ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4167 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4169 
ngx_°r_t
 *
vÆue
;

4171 i‡(
˛cf
->
dúe˘io
 !
NGX_CONF_UNSET
) {

4175 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4177 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4178 
˛cf
->
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

4179  
NGX_CONF_OK
;

4182 
˛cf
->
dúe˘io
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

4183 i‡(
˛cf
->
dúe˘io
 =(
off_t
Ë
NGX_ERROR
) {

4187  
NGX_CONF_OK
;

4188 
	}
}

4192 
	$ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4194 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4196 
u_ch¨
 *
p
;

4197 
ngx_öt_t
 
ovîwrôe
;

4198 
ngx_°r_t
 *
vÆue
, 
uri
, 
¨gs
;

4199 
ngx_uöt_t
 
i
, 
n
;

4200 
ngx_hâp_îr_∑ge_t
 *
îr
;

4201 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4202 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4204 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4205 
˛cf
->
îr‹_∑ges
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4206 (
ngx_hâp_îr_∑ge_t
));

4207 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4208  
NGX_CONF_ERROR
;

4212 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4214 
i
 = 
cf
->
¨gs
->
√…s
 - 2;

4216 i‡(
vÆue
[
i
].
d©a
[0] == '=') {

4217 i‡(
i
 == 1) {

4218 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4219 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4220  
NGX_CONF_ERROR
;

4223 i‡(
vÆue
[
i
].
Àn
 > 1) {

4224 
ovîwrôe
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[1], vÆue[i].
Àn
 - 1);

4226 i‡(
ovîwrôe
 =
NGX_ERROR
) {

4227 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4228 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4229  
NGX_CONF_ERROR
;

4233 
ovîwrôe
 = 0;

4236 
n
 = 2;

4239 
ovîwrôe
 = -1;

4240 
n
 = 1;

4243 
uri
 = 
vÆue
[
cf
->
¨gs
->
√…s
 - 1];

4245 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4247 
ccv
.
cf
 = cf;

4248 
ccv
.
vÆue
 = &
uri
;

4249 
ccv
.
com∂ex_vÆue
 = &
cv
;

4251 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4252  
NGX_CONF_ERROR
;

4255 
	`ngx_°r_nuŒ
(&
¨gs
);

4257 i‡(
cv
.
Àngths
 =
NULL
 && 
uri
.
d©a
[0] == '/') {

4258 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
uri
.
d©a
, '?');

4260 i‡(
p
) {

4261 
cv
.
vÆue
.
Àn
 = 
p
 - 
uri
.
d©a
;

4262 
cv
.
vÆue
.
d©a
 = 
uri
.data;

4263 
p
++;

4264 
¨gs
.
Àn
 = (
uri
.
d©a
 + uri.ÀnË- 
p
;

4265 
¨gs
.
d©a
 = 
p
;

4269 
i
 = 1; i < 
cf
->
¨gs
->
√…s
 - 
n
; i++) {

4270 
îr
 = 
	`ngx_¨øy_push
(
˛cf
->
îr‹_∑ges
);

4271 i‡(
îr
 =
NULL
) {

4272  
NGX_CONF_ERROR
;

4275 
îr
->
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

4277 i‡(
îr
->
°©us
 =
NGX_ERROR
 ||Érr->status == 499) {

4278 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4279 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4280  
NGX_CONF_ERROR
;

4283 i‡(
îr
->
°©us
 < 300 ||Érr->status > 599) {

4284 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4286 &
vÆue
[
i
]);

4287  
NGX_CONF_ERROR
;

4290 
îr
->
ovîwrôe
 = overwrite;

4292 i‡(
ovîwrôe
 == -1) {

4293 
îr
->
°©us
) {

4294 
NGX_HTTP_TO_HTTPS
:

4295 
NGX_HTTPS_CERT_ERROR
:

4296 
NGX_HTTPS_NO_CERT
:

4297 
îr
->
ovîwrôe
 = 
NGX_HTTP_BAD_REQUEST
;

4303 
îr
->
vÆue
 = 
cv
;

4304 
îr
->
¨gs
 =árgs;

4307  
NGX_CONF_OK
;

4308 
	}
}

4312 
	$ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4314 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4316 
ngx_°r_t
 *
vÆue
;

4317 
ngx_öt_t
 
code
;

4318 
ngx_uöt_t
 
i
, 
n
;

4319 
ngx_hâp_åy_fûe_t
 *
tf
;

4320 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4321 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

4323 i‡(
˛cf
->
åy_fûes
) {

4327 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

4329 
cmcf
->
åy_fûes
 = 1;

4331 
tf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, cf->
¨gs
->
√…s
 * (
ngx_hâp_åy_fûe_t
));

4332 i‡(
tf
 =
NULL
) {

4333  
NGX_CONF_ERROR
;

4336 
˛cf
->
åy_fûes
 = 
tf
;

4338 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4340 
i
 = 0; i < 
cf
->
¨gs
->
√…s
 - 1; i++) {

4342 
tf
[
i
].
«me
 = 
vÆue
[i + 1];

4344 i‡(
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
 - 1] == '/') {

4345 
tf
[
i
].
ã°_dú
 = 1;

4346 
tf
[
i
].
«me
.
Àn
--;

4347 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
] = '\0';

4350 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
tf
[
i
].
«me
);

4352 i‡(
n
) {

4353 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4355 
sc
.
cf
 = cf;

4356 
sc
.
sour˚
 = &
tf
[
i
].
«me
;

4357 
sc
.
Àngths
 = &
tf
[
i
].lengths;

4358 
sc
.
vÆues
 = &
tf
[
i
].values;

4359 
sc
.
v¨übÀs
 = 
n
;

4360 
sc
.
com∂ëe_Àngths
 = 1;

4361 
sc
.
com∂ëe_vÆues
 = 1;

4363 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4364  
NGX_CONF_ERROR
;

4369 
tf
[
i
].
«me
.
Àn
++;

4373 i‡(
tf
[
i
 - 1].
«me
.
d©a
[0] == '=') {

4375 
code
 = 
	`ngx_©oi
(
tf
[
i
 - 1].
«me
.
d©a
 + 1,Åf[ò- 1].«me.
Àn
 - 2);

4377 i‡(
code
 =
NGX_ERROR
) {

4378 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4380 
tf
[
i
 - 1].
«me
.
Àn
 - 1,Åf[ò- 1].«me.
d©a
);

4381  
NGX_CONF_ERROR
;

4384 
tf
[
i
].
code
 = code;

4387  
NGX_CONF_OK
;

4388 
	}
}

4392 
	$ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4394 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4396 
time_t
 
öa˘ive
;

4397 
ngx_°r_t
 *
vÆue
, 
s
;

4398 
ngx_öt_t
 
max
;

4399 
ngx_uöt_t
 
i
;

4401 i‡(
˛cf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

4405 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4407 
max
 = 0;

4408 
öa˘ive
 = 60;

4410 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4412 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

4414 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

4415 i‡(
max
 <= 0) {

4416 
Áûed
;

4422 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

4424 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

4425 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

4427 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

4428 i‡(
öa˘ive
 < 0) {

4429 
Áûed
;

4435 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

4437 
˛cf
->
›í_fûe_ˇche
 = 
NULL
;

4442 
Áûed
:

4444 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4446 &
vÆue
[
i
]);

4447  
NGX_CONF_ERROR
;

4450 i‡(
˛cf
->
›í_fûe_ˇche
 =
NULL
) {

4451  
NGX_CONF_OK
;

4454 i‡(
max
 == 0) {

4455 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4457  
NGX_CONF_ERROR
;

4460 
˛cf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

4461 i‡(
˛cf
->
›í_fûe_ˇche
) {

4462  
NGX_CONF_OK
;

4465  
NGX_CONF_ERROR
;

4466 
	}
}

4470 
	$ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4472 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4474 
ngx_°r_t
 *
vÆue
;

4476 i‡(
˛cf
->
îr‹_log
) {

4480 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4482 
˛cf
->
îr‹_log
 = 
	`ngx_log_¸óã
(
cf
->
cy˛e
, &
vÆue
[1]);

4483 i‡(
˛cf
->
îr‹_log
 =
NULL
) {

4484  
NGX_CONF_ERROR
;

4487 i‡(
cf
->
¨gs
->
√…s
 == 2) {

4488 
˛cf
->
îr‹_log
->
log_Àvñ
 = 
NGX_LOG_ERR
;

4489  
NGX_CONF_OK
;

4492  
	`ngx_log_£t_Àvñs
(
cf
, 
˛cf
->
îr‹_log
);

4493 
	}
}

4497 
	$ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4499 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4501 
ngx_°r_t
 *
vÆue
;

4503 i‡(
˛cf
->
kì∑live_timeout
 !
NGX_CONF_UNSET_MSEC
) {

4507 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4509 
˛cf
->
kì∑live_timeout
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

4511 i‡(
˛cf
->
kì∑live_timeout
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

4515 i‡(
˛cf
->
kì∑live_timeout
 =(
ngx_m£c_t
Ë
NGX_PARSE_LARGE_TIME
) {

4519 i‡(
cf
->
¨gs
->
√…s
 == 2) {

4520  
NGX_CONF_OK
;

4523 
˛cf
->
kì∑live_hódî
 = 
	`ngx_∑r£_time
(&
vÆue
[2], 1);

4525 i‡(
˛cf
->
kì∑live_hódî
 =
NGX_ERROR
) {

4529 i‡(
˛cf
->
kì∑live_hódî
 =
NGX_PARSE_LARGE_TIME
) {

4533  
NGX_CONF_OK
;

4534 
	}
}

4538 
	$ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4540 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4542 i‡(
˛cf
->
öã∫Æ
 !
NGX_CONF_UNSET
) {

4546 
˛cf
->
öã∫Æ
 = 1;

4548  
NGX_CONF_OK
;

4549 
	}
}

4553 
	$ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4555 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4557 
ngx_uæ_t
 
u
;

4558 
ngx_°r_t
 *
vÆue
;

4560 i‡(
˛cf
->
ªsﬁvî
) {

4564 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4566 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4568 
u
.
ho°
 = 
vÆue
[1];

4569 
u
.
p‹t
 = 53;

4571 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

4572 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V: %s", &
u
.
ho°
, u.
îr
);

4573  
NGX_CONF_ERROR
;

4576 
˛cf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
u
.
addrs
[0]);

4577 i‡(
˛cf
->
ªsﬁvî
 =
NULL
) {

4578  
NGX_OK
;

4581  
NGX_CONF_OK
;

4582 
	}
}

4585 #i‡(
NGX_HTTP_GZIP
)

4588 
	$ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4590 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4592 #i‡(
NGX_PCRE
)

4594 
ngx_°r_t
 *
vÆue
;

4595 
ngx_uöt_t
 
i
;

4596 
ngx_ªgex_ñt_t
 *
ª
;

4597 
ngx_ªgex_compûe_t
 
rc
;

4598 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4600 i‡(
˛cf
->
gzù_dißbÀ
 =
NGX_CONF_UNSET_PTR
) {

4601 
˛cf
->
gzù_dißbÀ
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

4602 (
ngx_ªgex_ñt_t
));

4603 i‡(
˛cf
->
gzù_dißbÀ
 =
NULL
) {

4604  
NGX_CONF_ERROR
;

4608 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4610 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4612 
rc
.
poﬁ
 = 
cf
->pool;

4613 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4614 
rc
.
îr
.
d©a
 = 
îr°r
;

4616 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4618 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

4619 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

4623 #i‡(
NGX_HTTP_DEGRADATION
)

4625 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

4626 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

4632 
ª
 = 
	`ngx_¨øy_push
(
˛cf
->
gzù_dißbÀ
);

4633 i‡(
ª
 =
NULL
) {

4634  
NGX_CONF_ERROR
;

4637 
rc
.
∑âîn
 = 
vÆue
[
i
];

4638 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4640 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

4641 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

4642  
NGX_CONF_ERROR
;

4645 
ª
->
ªgex
 = 
rc
.regex;

4646 
ª
->
«me
 = 
vÆue
[
i
].
d©a
;

4649  
NGX_CONF_OK
;

4652 
ngx_°r_t
 *
vÆue
;

4653 
ngx_uöt_t
 
i
;

4655 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4657 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4658 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

4659 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

4663 #i‡(
NGX_HTTP_DEGRADATION
)

4665 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

4666 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

4672 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4676  
NGX_CONF_ERROR
;

4679  
NGX_CONF_OK
;

4682 
	}
}

4688 
	$ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

4690 #i‡(
NGX_FREEBSD
)

4691 
ssize_t
 *
≈
 = 
d©a
;

4693 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

4694 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4697 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

4699  
NGX_CONF_ERROR
;

4702 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

4703 
ssize_t
 *
≈
 = 
d©a
;

4705 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4708 *
≈
 = 0;

4712  
NGX_CONF_OK
;

4713 
	}
}

4717 
	$ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

4719 
size_t
 *
•
 = 
d©a
;

4721 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

4722 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4724 
NGX_MIN_POOL_SIZE
);

4725  
NGX_CONF_ERROR
;

4728 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

4729 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4731 
NGX_POOL_ALIGNMENT
);

4732  
NGX_CONF_ERROR
;

4735  
NGX_CONF_OK
;

4736 
	}
}

	@src/http/ngx_http_core_module.h

8 #i‚de‡
_NGX_HTTP_CORE_H_INCLUDED_


9 
	#_NGX_HTTP_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_GZIP_PROXIED_OFF
 0x0002

	)

18 
	#NGX_HTTP_GZIP_PROXIED_EXPIRED
 0x0004

	)

19 
	#NGX_HTTP_GZIP_PROXIED_NO_CACHE
 0x0008

	)

20 
	#NGX_HTTP_GZIP_PROXIED_NO_STORE
 0x0010

	)

21 
	#NGX_HTTP_GZIP_PROXIED_PRIVATE
 0x0020

	)

22 
	#NGX_HTTP_GZIP_PROXIED_NO_LM
 0x0040

	)

23 
	#NGX_HTTP_GZIP_PROXIED_NO_ETAG
 0x0080

	)

24 
	#NGX_HTTP_GZIP_PROXIED_AUTH
 0x0100

	)

25 
	#NGX_HTTP_GZIP_PROXIED_ANY
 0x0200

	)

28 
	#NGX_HTTP_AIO_OFF
 0

	)

29 
	#NGX_HTTP_AIO_ON
 1

	)

30 
	#NGX_HTTP_AIO_SENDFILE
 2

	)

33 
	#NGX_HTTP_SATISFY_ALL
 0

	)

34 
	#NGX_HTTP_SATISFY_ANY
 1

	)

37 
	#NGX_HTTP_LINGERING_OFF
 0

	)

38 
	#NGX_HTTP_LINGERING_ON
 1

	)

39 
	#NGX_HTTP_LINGERING_ALWAYS
 2

	)

42 
	#NGX_HTTP_IMS_OFF
 0

	)

43 
	#NGX_HTTP_IMS_EXACT
 1

	)

44 
	#NGX_HTTP_IMS_BEFORE
 2

	)

47 
	#NGX_HTTP_KEEPALIVE_DISABLE_NONE
 0x0002

	)

48 
	#NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 0x0004

	)

49 
	#NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 0x0008

	)

52 
ngx_hâp_loˇti⁄_åì_node_s
 
	tngx_hâp_loˇti⁄_åì_node_t
;

53 
ngx_hâp_c‹e_loc_c⁄f_s
 
	tngx_hâp_c‹e_loc_c⁄f_t
;

58 
sockaddr
 
	msockaddr
;

59 
sockaddr_ö
 
	msockaddr_ö
;

60 #i‡(
NGX_HAVE_INET6
)

61 
sockaddr_ö6
 
	msockaddr_ö6
;

63 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

64 
sockaddr_un
 
	msockaddr_un
;

66 
u_ch¨
 
	msockaddr_d©a
[
NGX_SOCKADDRLEN
];

67 } 
	mu
;

69 
sockÀn_t
 
	msockÀn
;

71 
	m£t
:1;

72 
	mdeÁu…_£rvî
:1;

73 
	mböd
:1;

74 
	mwûdˇrd
:1;

75 #i‡(
NGX_HTTP_SSL
)

76 
	ms¶
:1;

78 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

79 
	mùv6⁄ly
:2;

82 
	mbacklog
;

83 
	mrcvbuf
;

84 
	m¢dbuf
;

85 #i‡(
NGX_HAVE_SETFIB
)

86 
	m£tfib
;

89 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

90 *
	mac˚±_fûãr
;

92 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

93 
ngx_uöt_t
 
	mde„ºed_ac˚±
;

96 
u_ch¨
 
	maddr
[
NGX_SOCKADDR_STRLEN
 + 1];

97 } 
	tngx_hâp_li°í_›t_t
;

101 
	mNGX_HTTP_POST_READ_PHASE
 = 0,

103 
	mNGX_HTTP_SERVER_REWRITE_PHASE
,

105 
	mNGX_HTTP_FIND_CONFIG_PHASE
,

106 
	mNGX_HTTP_REWRITE_PHASE
,

107 
	mNGX_HTTP_POST_REWRITE_PHASE
,

109 
	mNGX_HTTP_PREACCESS_PHASE
,

111 
	mNGX_HTTP_ACCESS_PHASE
,

112 
	mNGX_HTTP_POST_ACCESS_PHASE
,

114 
	mNGX_HTTP_TRY_FILES_PHASE
,

115 
	mNGX_HTTP_CONTENT_PHASE
,

117 
	mNGX_HTTP_LOG_PHASE


118 } 
	tngx_hâp_pha£s
;

120 
ngx_hâp_pha£_h™dÀr_s
 
	tngx_hâp_pha£_h™dÀr_t
;

122 
	$ngx_öt_t
 (*
	tngx_hâp_pha£_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

123 
	tngx_hâp_pha£_h™dÀr_t
 *
	tph
);

125 
	sngx_hâp_pha£_h™dÀr_s
 {

126 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

127 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

128 
ngx_uöt_t
 
√xt
;

133 
ngx_hâp_pha£_h™dÀr_t
 *
h™dÀrs
;

134 
ngx_uöt_t
 
£rvî_ªwrôe_ödex
;

135 
ngx_uöt_t
 
loˇti⁄_ªwrôe_ödex
;

136 } 
	tngx_hâp_pha£_ígöe_t
;

140 
ngx_¨øy_t
 
h™dÀrs
;

141 } 
	tngx_hâp_pha£_t
;

145 
ngx_¨øy_t
 
£rvîs
;

147 
ngx_hâp_pha£_ígöe_t
 
pha£_ígöe
;

149 
ngx_hash_t
 
hódîs_ö_hash
;

151 
ngx_hash_t
 
v¨übÀs_hash
;

153 
ngx_¨øy_t
 
v¨übÀs
;

154 
ngx_uöt_t
 
nˇ±uªs
;

156 
ngx_uöt_t
 
£rvî_«mes_hash_max_size
;

157 
ngx_uöt_t
 
£rvî_«mes_hash_buckë_size
;

159 
ngx_uöt_t
 
v¨übÀs_hash_max_size
;

160 
ngx_uöt_t
 
v¨übÀs_hash_buckë_size
;

162 
ngx_hash_keys_¨øys_t
 *
v¨übÀs_keys
;

164 
ngx_¨øy_t
 *
p‹ts
;

166 
ngx_uöt_t
 
åy_fûes
;

168 
ngx_hâp_pha£_t
 
pha£s
[
NGX_HTTP_LOG_PHASE
 + 1];

169 } 
	tngx_hâp_c‹e_maö_c⁄f_t
;

174 
ngx_¨øy_t
 
£rvî_«mes
;

177 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

179 
ngx_°r_t
 
£rvî_«me
;

181 
size_t
 
c⁄√˘i⁄_poﬁ_size
;

182 
size_t
 
ªque°_poﬁ_size
;

183 
size_t
 
˛õ¡_hódî_buf„r_size
;

185 
ngx_bufs_t
 
œrge_˛õ¡_hódî_buf„rs
;

187 
ngx_m£c_t
 
˛õ¡_hódî_timeout
;

189 
ngx_Êag_t
 
ign‹e_övÆid_hódîs
;

190 
ngx_Êag_t
 
mîge_¶ashes
;

191 
ngx_Êag_t
 
undîsc‹es_ö_hódîs
;

193 
li°í
:1;

194 #i‡(
NGX_PCRE
)

195 
ˇ±uªs
:1;

198 
ngx_hâp_c‹e_loc_c⁄f_t
 **
«med_loˇti⁄s
;

199 } 
	tngx_hâp_c‹e_§v_c⁄f_t
;

207 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

209 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

211 #i‡(
NGX_HTTP_SSL
)

212 
ngx_uöt_t
 
s¶
;

214 } 
	tngx_hâp_addr_c⁄f_t
;

218 
ö_addr_t
 
addr
;

219 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

220 } 
	tngx_hâp_ö_addr_t
;

223 #i‡(
NGX_HAVE_INET6
)

226 
ö6_addr
 
addr6
;

227 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

228 } 
	tngx_hâp_ö6_addr_t
;

235 *
addrs
;

236 
ngx_uöt_t
 
«ddrs
;

237 } 
	tngx_hâp_p‹t_t
;

241 
ngx_öt_t
 
Ámûy
;

242 
ö_p‹t_t
 
p‹t
;

243 
ngx_¨øy_t
 
addrs
;

244 } 
	tngx_hâp_c⁄f_p‹t_t
;

248 
ngx_hâp_li°í_›t_t
 
›t
;

250 
ngx_hash_t
 
hash
;

251 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

252 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

254 #i‡(
NGX_PCRE
)

255 
ngx_uöt_t
 
ƒegex
;

256 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

260 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

261 
ngx_¨øy_t
 
£rvîs
;

262 } 
	tngx_hâp_c⁄f_addr_t
;

265 
	sngx_hâp_£rvî_«me_s
 {

266 #i‡(
NGX_PCRE
)

267 
ngx_hâp_ªgex_t
 *
ªgex
;

269 
ngx_hâp_c‹e_§v_c⁄f_t
 *
£rvî
;

270 
ngx_°r_t
 
«me
;

275 
ngx_öt_t
 
°©us
;

276 
ngx_öt_t
 
ovîwrôe
;

277 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

278 
ngx_°r_t
 
¨gs
;

279 } 
	tngx_hâp_îr_∑ge_t
;

283 
ngx_¨øy_t
 *
Àngths
;

284 
ngx_¨øy_t
 *
vÆues
;

285 
ngx_°r_t
 
«me
;

287 
code
:10;

288 
ã°_dú
:1;

289 } 
	tngx_hâp_åy_fûe_t
;

292 
	sngx_hâp_c‹e_loc_c⁄f_s
 {

293 
ngx_°r_t
 
«me
;

295 #i‡(
NGX_PCRE
)

296 
ngx_hâp_ªgex_t
 *
ªgex
;

299 
n⁄ame
:1;

300 
lmt_ex˝t
:1;

301 
«med
:1;

303 
exa˘_m©ch
:1;

304 
n‹egex
:1;

306 
auto_ªdúe˘
:1;

307 #i‡(
NGX_HTTP_GZIP
)

308 
gzù_dißbÀ_msõ6
:2;

309 #i‡(
NGX_HTTP_DEGRADATION
)

310 
gzù_dißbÀ_degød©i⁄
:2;

314 
ngx_hâp_loˇti⁄_åì_node_t
 *
°©ic_loˇti⁄s
;

315 #i‡(
NGX_PCRE
)

316 
ngx_hâp_c‹e_loc_c⁄f_t
 **
ªgex_loˇti⁄s
;

320 **
loc_c⁄f
;

322 
uöt32_t
 
limô_ex˚±
;

323 **
limô_ex˚±_loc_c⁄f
;

325 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

328 
size_t
 
Æüs
;

329 
ngx_°r_t
 
roŸ
;

330 
ngx_°r_t
 
po°_a˘i⁄
;

332 
ngx_¨øy_t
 *
roŸ_Àngths
;

333 
ngx_¨øy_t
 *
roŸ_vÆues
;

335 
ngx_¨øy_t
 *
ty≥s
;

336 
ngx_hash_t
 
ty≥s_hash
;

337 
ngx_°r_t
 
deÁu…_ty≥
;

339 
off_t
 
˛õ¡_max_body_size
;

340 
off_t
 
dúe˘io
;

341 
off_t
 
dúe˘io_Æignmít
;

343 
size_t
 
˛õ¡_body_buf„r_size
;

344 
size_t
 
£nd_low©
;

345 
size_t
 
po°p⁄e_ouçut
;

346 
size_t
 
limô_øã
;

347 
size_t
 
limô_øã_a·î
;

348 
size_t
 
£ndfûe_max_chunk
;

349 
size_t
 
ªad_ahód
;

351 
ngx_m£c_t
 
˛õ¡_body_timeout
;

352 
ngx_m£c_t
 
£nd_timeout
;

353 
ngx_m£c_t
 
kì∑live_timeout
;

354 
ngx_m£c_t
 
lögîög_time
;

355 
ngx_m£c_t
 
lögîög_timeout
;

356 
ngx_m£c_t
 
ªsﬁvî_timeout
;

358 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

360 
time_t
 
kì∑live_hódî
;

362 
ngx_uöt_t
 
kì∑live_ªque°s
;

363 
ngx_uöt_t
 
kì∑live_dißbÀ
;

364 
ngx_uöt_t
 
ßtisfy
;

365 
ngx_uöt_t
 
lögîög_˛o£
;

366 
ngx_uöt_t
 
if_modifõd_sö˚
;

367 
ngx_uöt_t
 
max_ønges
;

368 
ngx_uöt_t
 
˛õ¡_body_ö_fûe_⁄ly
;

370 
ngx_Êag_t
 
˛õ¡_body_ö_sögÀ_buf„r
;

372 
ngx_Êag_t
 
öã∫Æ
;

373 
ngx_Êag_t
 
£ndfûe
;

374 #i‡(
NGX_HAVE_FILE_AIO
)

375 
ngx_Êag_t
 
aio
;

377 
ngx_Êag_t
 
t˝_n›ush
;

378 
ngx_Êag_t
 
t˝_nodñay
;

379 
ngx_Êag_t
 
ª£t_timedout_c⁄√˘i⁄
;

380 
ngx_Êag_t
 
£rvî_«me_ö_ªdúe˘
;

381 
ngx_Êag_t
 
p‹t_ö_ªdúe˘
;

382 
ngx_Êag_t
 
msõ_∑ddög
;

383 
ngx_Êag_t
 
msõ_ª‰esh
;

384 
ngx_Êag_t
 
log_nŸ_found
;

385 
ngx_Êag_t
 
log_subªque°
;

386 
ngx_Êag_t
 
ªcursive_îr‹_∑ges
;

387 
ngx_Êag_t
 
£rvî_tokís
;

388 
ngx_Êag_t
 
chunked_å™s„r_ícodög
;

390 #i‡(
NGX_HTTP_GZIP
)

391 
ngx_Êag_t
 
gzù_v¨y
;

393 
ngx_uöt_t
 
gzù_hâp_vîsi⁄
;

394 
ngx_uöt_t
 
gzù_¥oxõd
;

396 #i‡(
NGX_PCRE
)

397 
ngx_¨øy_t
 *
gzù_dißbÀ
;

401 
ngx_¨øy_t
 *
îr‹_∑ges
;

402 
ngx_hâp_åy_fûe_t
 *
åy_fûes
;

404 
ngx_∑th_t
 *
˛õ¡_body_ãmp_∑th
;

406 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

407 
time_t
 
›í_fûe_ˇche_vÆid
;

408 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

409 
ngx_Êag_t
 
›í_fûe_ˇche_îr‹s
;

410 
ngx_Êag_t
 
›í_fûe_ˇche_evíts
;

412 
ngx_log_t
 *
îr‹_log
;

414 
ngx_uöt_t
 
ty≥s_hash_max_size
;

415 
ngx_uöt_t
 
ty≥s_hash_buckë_size
;

417 
ngx_queue_t
 *
loˇti⁄s
;

420 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev_loˇti⁄
;

426 
ngx_queue_t
 
queue
;

427 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

428 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

429 
ngx_°r_t
 *
«me
;

430 
u_ch¨
 *
fûe_«me
;

431 
ngx_uöt_t
 
löe
;

432 
ngx_queue_t
 
li°
;

433 } 
	tngx_hâp_loˇti⁄_queue_t
;

436 
	sngx_hâp_loˇti⁄_åì_node_s
 {

437 
ngx_hâp_loˇti⁄_åì_node_t
 *
À·
;

438 
ngx_hâp_loˇti⁄_åì_node_t
 *
right
;

439 
ngx_hâp_loˇti⁄_åì_node_t
 *
åì
;

441 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

442 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

444 
u_ch¨
 
auto_ªdúe˘
;

445 
u_ch¨
 
Àn
;

446 
u_ch¨
 
«me
[1];

450 
	`ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
);

451 
ngx_öt_t
 
	`ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
,

452 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

453 
ngx_öt_t
 
	`ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

454 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

455 
ngx_öt_t
 
	`ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

456 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

457 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

458 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

459 
ngx_öt_t
 
	`ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

460 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

461 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

462 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

463 
ngx_öt_t
 
	`ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

464 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

465 
ngx_öt_t
 
	`ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

466 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

469 *
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
);

470 
ngx_öt_t
 
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
);

471 
	`ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
);

472 
ngx_öt_t
 
	`ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

473 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
);

474 
u_ch¨
 *
	`ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

475 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
);

476 
ngx_öt_t
 
	`ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
);

477 #i‡(
NGX_HTTP_GZIP
)

478 
ngx_öt_t
 
	`ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
);

482 
ngx_öt_t
 
	`ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

483 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
§
,

484 
ngx_hâp_po°_subªque°_t
 *
p§
, 
ngx_uöt_t
 
Êags
);

485 
ngx_öt_t
 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

486 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
);

487 
ngx_öt_t
 
	`ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

490 
ngx_hâp_˛ónup_t
 *
	`ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
);

493 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_hódî_fûãr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

494 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_body_fûãr_±
)

495 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

498 
ngx_öt_t
 
	`ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

499 
ngx_öt_t
 
	`ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

502 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

504 
ngx_uöt_t
 
ngx_hâp_max_moduÀ
;

506 
ngx_°r_t
 
ngx_hâp_c‹e_gë_mëhod
;

509 
	#ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
) \

511 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1; \

512 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) { \

513 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0; \

514 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
; \

515 
	}

	)
}

517 
	#ngx_hâp_˛ór_ac˚±_ønges
(
r
) \

519 
r
->
Ælow_ønges
 = 0; \

520 i‡(
r
->
hódîs_out
.
ac˚±_ønges
) { \

521 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 0; \

522 
r
->
hódîs_out
.
ac˚±_ønges
 = 
NULL
; \

523 }

	)

525 
	#ngx_hâp_˛ór_œ°_modifõd
(
r
) \

527 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1; \

528 i‡(
r
->
hódîs_out
.
œ°_modifõd
) { \

529 
r
->
hódîs_out
.
œ°_modifõd
->
hash
 = 0; \

530 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
; \

531 }

	)

533 
	#ngx_hâp_˛ór_loˇti⁄
(
r
) \

535 i‡(
r
->
hódîs_out
.
loˇti⁄
) { \

536 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0; \

537 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
; \

538 }

	)

	@src/http/ngx_http_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

14 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_ˇche_t
 *
c
);

16 
ssize_t
 
ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_ˇche_t
 *
c
);

18 #i‡(
NGX_HAVE_FILE_AIO
)

19 
ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

21 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

22 
ngx_hâp_ˇche_t
 *
c
);

23 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
,

24 
ngx_∑th_t
 *
∑th
);

25 
ngx_hâp_fûe_ˇche_node_t
 *

26 
ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
);

27 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

28 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

29 
ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
);

30 
time_t
 
ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

31 
time_t
 
ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

32 
ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

33 
ngx_queue_t
 *
q
, 
u_ch¨
 *
«me
);

34 
ngx_öt_t


35 
ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

36 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
,

37 
ngx_°r_t
 *
∑th
);

38 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
,

39 
ngx_°r_t
 *
∑th
);

40 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
,

41 
ngx_°r_t
 *
∑th
);

42 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

43 
ngx_hâp_ˇche_t
 *
c
);

44 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
,

45 
ngx_°r_t
 *
∑th
);

48 
ngx_°r_t
 
	gngx_hâp_ˇche_°©us
[] = {

49 
ngx_°rög
("MISS"),

50 
ngx_°rög
("BYPASS"),

51 
ngx_°rög
("EXPIRED"),

52 
ngx_°rög
("STALE"),

53 
ngx_°rög
("UPDATING"),

54 
ngx_°rög
("HIT")

58 
u_ch¨
 
	gngx_hâp_fûe_ˇche_key
[] = { 
LF
, 'K', 'E', 'Y', ':', ' ' };

61 
ngx_öt_t


62 
	$ngx_hâp_fûe_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

64 
ngx_hâp_fûe_ˇche_t
 *
oˇche
 = 
d©a
;

66 
size_t
 
Àn
;

67 
ngx_uöt_t
 
n
;

68 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

70 
ˇche
 = 
shm_z⁄e
->
d©a
;

72 i‡(
oˇche
) {

73 i‡(
	`ngx_°rcmp
(
ˇche
->
∑th
->
«me
.
d©a
, 
oˇche
->path->name.data) != 0) {

74 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

77 &
shm_z⁄e
->
shm
.
«me
, &
ˇche
->
∑th
->name,

78 &
oˇche
->
∑th
->
«me
);

80  
NGX_ERROR
;

83 
n
 = 0;Ç < 3;Ç++) {

84 i‡(
ˇche
->
∑th
->
Àvñ
[
n
] !
oˇche
->path->level[n]) {

85 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

87 &
shm_z⁄e
->
shm
.
«me
);

88  
NGX_ERROR
;

92 
ˇche
->
sh
 = 
oˇche
->sh;

94 
ˇche
->
shpoﬁ
 = 
oˇche
->shpool;

95 
ˇche
->
bsize
 = 
oˇche
->bsize;

97 
ˇche
->
max_size
 /ˇche->
bsize
;

99 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

100 
ˇche
->
∑th
->
lﬂdî
 = 
NULL
;

103  
NGX_OK
;

106 
ˇche
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

108 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

109 
ˇche
->
sh
 = cache->
shpoﬁ
->
d©a
;

110 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

112  
NGX_OK
;

115 
ˇche
->
sh
 = 
	`ngx_¶ab_Æloc
(ˇche->
shpoﬁ
, (
ngx_hâp_fûe_ˇche_sh_t
));

116 i‡(
ˇche
->
sh
 =
NULL
) {

117  
NGX_ERROR
;

120 
ˇche
->
shpoﬁ
->
d©a
 = cache->
sh
;

122 
	`ngx_rbåì_öô
(&
ˇche
->
sh
->
rbåì
, &ˇche->sh->
£¡öñ
,

123 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
);

125 
	`ngx_queue_öô
(&
ˇche
->
sh
->
queue
);

127 
ˇche
->
sh
->
cﬁd
 = 1;

128 
ˇche
->
sh
->
lﬂdög
 = 0;

129 
ˇche
->
sh
->
size
 = 0;

131 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

133 
ˇche
->
max_size
 /ˇche->
bsize
;

135 
Àn
 = (" i¿ˇchêkey†z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

137 
ˇche
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(ˇche->shpoﬁ, 
Àn
);

138 i‡(
ˇche
->
shpoﬁ
->
log_˘x
 =
NULL
) {

139  
NGX_ERROR
;

142 
	`ngx_•rötf
(
ˇche
->
shpoﬁ
->
log_˘x
, " in cache keys zone \"%V\"%Z",

143 &
shm_z⁄e
->
shm
.
«me
);

145  
NGX_OK
;

146 
	}
}

149 
ngx_öt_t


150 
	$ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
)

152 
ngx_hâp_ˇche_t
 *
c
;

154 
c
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ˇche_t
));

155 i‡(
c
 =
NULL
) {

156  
NGX_ERROR
;

159 i‡(
	`ngx_¨øy_öô
(&
c
->
keys
, 
r
->
poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
) {

160  
NGX_ERROR
;

163 
r
->
ˇche
 = 
c
;

164 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

165 
c
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

167  
NGX_OK
;

168 
	}
}

171 
ngx_öt_t


172 
	$ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

174 
ngx_hâp_ˇche_t
 *
c
;

175 
ngx_poﬁ_˛ónup_t
 *
˛n
;

176 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

178 
c
 = 
r
->
ˇche
;

179 
ˇche
 = 
c
->
fûe_ˇche
;

181 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

182 i‡(
˛n
 =
NULL
) {

183  
NGX_ERROR
;

186 i‡(
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
Ë=
NGX_ERROR
) {

187  
NGX_ERROR
;

190 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

191 
˛n
->
d©a
 = 
c
;

193 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

194  
NGX_ERROR
;

197  
NGX_OK
;

198 
	}
}

202 
	$ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

204 
size_t
 
Àn
;

205 
ngx_°r_t
 *
key
;

206 
ngx_uöt_t
 
i
;

207 
ngx_md5_t
 
md5
;

208 
ngx_hâp_ˇche_t
 *
c
;

210 
c
 = 
r
->
ˇche
;

212 
Àn
 = 0;

214 
	`ngx_¸c32_öô
(
c
->
¸c32
);

215 
	`ngx_md5_öô
(&
md5
);

217 
key
 = 
c
->
keys
.
ñts
;

218 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

219 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

220 "hâ∞ˇchêkey: \"%V\"", &
key
[
i
]);

222 
Àn
 +
key
[
i
].len;

224 
	`ngx_¸c32_upd©e
(&
c
->
¸c32
, 
key
[
i
].
d©a
, key[i].
Àn
);

225 
	`ngx_md5_upd©e
(&
md5
, 
key
[
i
].
d©a
, key[i].
Àn
);

228 
c
->
hódî_°¨t
 = (
ngx_hâp_fûe_ˇche_hódî_t
)

229 + (
ngx_hâp_fûe_ˇche_key
Ë+ 
Àn
 + 1;

231 
	`ngx_¸c32_föÆ
(
c
->
¸c32
);

232 
	`ngx_md5_föÆ
(
c
->
key
, &
md5
);

233 
	}
}

236 
ngx_öt_t


237 
	$ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
)

239 
ngx_öt_t
 
rc
, 
rv
;

240 
ngx_uöt_t
 
cﬁd
, 
ã°
;

241 
ngx_hâp_ˇche_t
 *
c
;

242 
ngx_poﬁ_˛ónup_t
 *
˛n
;

243 
ngx_›í_fûe_öfo_t
 
of
;

244 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

245 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

247 
c
 = 
r
->
ˇche
;

249 i‡(
c
->
buf
) {

250  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

253 
ˇche
 = 
c
->
fûe_ˇche
;

255 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

256 i‡(
˛n
 =
NULL
) {

257  
NGX_ERROR
;

260 
rc
 = 
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
);

262 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

263 "hâ∞fûêˇchêexi°s: %òe:%d", 
rc
, 
c
->
exi°s
);

265 i‡(
rc
 =
NGX_ERROR
) {

266  
rc
;

269 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

270 
˛n
->
d©a
 = 
c
;

272 i‡(
rc
 =
NGX_AGAIN
) {

273  
NGX_HTTP_CACHE_SCARCE
;

276 
cﬁd
 = 
ˇche
->
sh
->cold;

278 i‡(
rc
 =
NGX_OK
) {

280 i‡(
c
->
îr‹
) {

281  
c
->
îr‹
;

284 
c
->
ãmp_fûe
 = 1;

285 
ã°
 = 
c
->
exi°s
 ? 1 : 0;

286 
rv
 = 
NGX_DECLINED
;

290 i‡(
c
->
mö_u£s
 > 1) {

292 i‡(!
cﬁd
) {

293  
NGX_HTTP_CACHE_SCARCE
;

296 
ã°
 = 1;

297 
rv
 = 
NGX_HTTP_CACHE_SCARCE
;

300 
c
->
ãmp_fûe
 = 1;

301 
ã°
 = 
cﬁd
 ? 1 : 0;

302 
rv
 = 
NGX_DECLINED
;

306 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

307  
NGX_ERROR
;

310 i‡(!
ã°
) {

311  
NGX_DECLINED
;

314 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

316 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

318 
of
.
uniq
 = 
c
->uniq;

319 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

320 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

321 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

322 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

323 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

325 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
c
->
fûe
.
«me
, &
of
, 
r
->
poﬁ
)

326 !
NGX_OK
)

328 
of
.
îr
) {

331  
NGX_ERROR
;

333 
NGX_ENOENT
:

334 
NGX_ENOTDIR
:

335  
rv
;

338 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

339 
ngx_›í_fûe_n
 " \"%s\" faûed", 
c
->
fûe
.
«me
.
d©a
);

340  
NGX_ERROR
;

344 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

345 "hâ∞fûêˇchêfd: %d", 
of
.
fd
);

347 
c
->
fûe
.
fd
 = 
of
.fd;

348 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

349 
c
->
uniq
 = 
of
.uniq;

350 
c
->
Àngth
 = 
of
.
size
;

351 
c
->
fs_size
 = (
of
.fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

353 
c
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, c->
body_°¨t
);

354 i‡(
c
->
buf
 =
NULL
) {

355  
NGX_ERROR
;

358  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

359 
	}
}

362 
ngx_öt_t


363 
	$ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

365 
time_t
 
now
;

366 
ssize_t
 
n
;

367 
ngx_öt_t
 
rc
;

368 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

369 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
;

371 
n
 = 
	`ngx_hâp_fûe_ˇche_aio_ªad
(
r
, 
c
);

373 i‡(
n
 < 0) {

374  
n
;

377 i‡((
size_t
Ë
n
 < 
c
->
hódî_°¨t
) {

378 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

379 "ˇchêfûê\"%s\" i†toÿsmÆl", 
c
->
fûe
.
«me
.
d©a
);

380  
NGX_DECLINED
;

383 
h
 = (
ngx_hâp_fûe_ˇche_hódî_t
 *Ë
c
->
buf
->
pos
;

385 i‡(
h
->
¸c32
 !
c
->crc32) {

386 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

387 "ˇchêfûê\"%s\" ha†md5 cﬁlisi⁄", 
c
->
fûe
.
«me
.
d©a
);

388  
NGX_DECLINED
;

391 i‡(
h
->
body_°¨t
 > 
c
->body_start) {

392 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

394 
c
->
fûe
.
«me
.
d©a
);

395  
NGX_DECLINED
;

398 
c
->
buf
->
œ°
 +
n
;

400 
c
->
vÆid_£c
 = 
h
->valid_sec;

401 
c
->
œ°_modifõd
 = 
h
->last_modified;

402 
c
->
d©e
 = 
h
->date;

403 
c
->
vÆid_m£c
 = 
h
->valid_msec;

404 
c
->
hódî_°¨t
 = 
h
->header_start;

405 
c
->
body_°¨t
 = 
h
->body_start;

407 
r
->
ˇched
 = 1;

409 
ˇche
 = 
c
->
fûe_ˇche
;

411 i‡(
ˇche
->
sh
->
cﬁd
) {

413 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

415 i‡(!
c
->
node
->
exi°s
) {

416 
c
->
node
->
u£s
 = 1;

417 
c
->
node
->
body_°¨t
 = c->body_start;

418 
c
->
node
->
exi°s
 = 1;

419 
c
->
node
->
uniq
 = c->uniq;

420 
c
->
node
->
fs_size
 = c->fs_size;

422 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

425 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

428 
now
 = 
	`ngx_time
();

430 i‡(
c
->
vÆid_£c
 < 
now
) {

432 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

434 i‡(
c
->
node
->
upd©ög
) {

435 
rc
 = 
NGX_HTTP_CACHE_UPDATING
;

438 
c
->
node
->
upd©ög
 = 1;

439 
c
->
upd©ög
 = 1;

440 
rc
 = 
NGX_HTTP_CACHE_STALE
;

443 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

445 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

447 
rc
, 
c
->
vÆid_£c
, 
now
);

449  
rc
;

452  
NGX_OK
;

453 
	}
}

456 
ssize_t


457 
	$ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

459 #i‡(
NGX_HAVE_FILE_AIO
)

460 
ssize_t
 
n
;

461 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

463 i‡(!
ngx_fûe_aio
) {

464 
nﬂio
;

467 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

469 i‡(!
˛cf
->
aio
) {

470 
nﬂio
;

473 
n
 = 
	`ngx_fûe_aio_ªad
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0, 
r
->
poﬁ
);

475 i‡(
n
 !
NGX_AGAIN
) {

476  
n
;

479 
c
->
fûe
.
aio
->
d©a
 = 
r
;

480 
c
->
fûe
.
aio
->
h™dÀr
 = 
ngx_hâp_ˇche_aio_evít_h™dÀr
;

482 
r
->
maö
->
blocked
++;

483 
r
->
aio
 = 1;

485  
NGX_AGAIN
;

487 
nﬂio
:

491  
	`ngx_ªad_fûe
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0);

492 
	}
}

495 #i‡(
NGX_HAVE_FILE_AIO
)

498 
	$ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

500 
ngx_evít_aio_t
 *
aio
;

501 
ngx_hâp_ªque°_t
 *
r
;

503 
aio
 = 
ev
->
d©a
;

504 
r
 = 
aio
->
d©a
;

506 
r
->
maö
->
blocked
--;

507 
r
->
aio
 = 0;

509 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

510 
	}
}

515 
ngx_öt_t


516 
	$ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

518 
ngx_öt_t
 
rc
;

519 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

521 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

523 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

525 i‡(
f˙
) {

526 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

528 
f˙
->
u£s
++;

529 
f˙
->
cou¡
++;

531 i‡(
f˙
->
îr‹
) {

533 i‡(
f˙
->
vÆid_£c
 < 
	`ngx_time
()) {

534 
ª√w
;

537 
rc
 = 
NGX_OK
;

539 
d⁄e
;

542 i‡(
f˙
->
exi°s
 || f˙->
u£s
 >
c
->
mö_u£s
) {

544 
c
->
exi°s
 = 
f˙
->exists;

545 i‡(
f˙
->
body_°¨t
) {

546 
c
->
body_°¨t
 = 
f˙
->body_start;

549 
rc
 = 
NGX_OK
;

551 
d⁄e
;

554 
rc
 = 
NGX_AGAIN
;

556 
d⁄e
;

559 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

560 (
ngx_hâp_fûe_ˇche_node_t
));

561 i‡(
f˙
 =
NULL
) {

562 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

564 (Ë
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

566 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

568 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

569 (
ngx_hâp_fûe_ˇche_node_t
));

570 i‡(
f˙
 =
NULL
) {

571 
rc
 = 
NGX_ERROR
;

572 
Áûed
;

576 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

578 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

579 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

581 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

583 
f˙
->
u£s
 = 1;

584 
f˙
->
cou¡
 = 1;

585 
f˙
->
upd©ög
 = 0;

586 
f˙
->
dñëög
 = 0;

588 
ª√w
:

590 
rc
 = 
NGX_DECLINED
;

592 
f˙
->
vÆid_m£c
 = 0;

593 
f˙
->
îr‹
 = 0;

594 
f˙
->
exi°s
 = 0;

595 
f˙
->
vÆid_£c
 = 0;

596 
f˙
->
uniq
 = 0;

597 
f˙
->
body_°¨t
 = 0;

598 
f˙
->
fs_size
 = 0;

600 
d⁄e
:

602 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

604 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

606 
c
->
uniq
 = 
f˙
->uniq;

607 
c
->
îr‹
 = 
f˙
->error;

608 
c
->
node
 = 
f˙
;

610 
Áûed
:

612 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

614  
rc
;

615 
	}
}

618 
ngx_öt_t


619 
	$ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_∑th_t
 *
∑th
)

621 
u_ch¨
 *
p
;

622 
ngx_hâp_ˇche_t
 *
c
;

624 
c
 = 
r
->
ˇche
;

626 
c
->
fûe
.
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len

627 + 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

629 
c
->
fûe
.
«me
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, c->fûe.«me.
Àn
 + 1);

630 i‡(
c
->
fûe
.
«me
.
d©a
 =
NULL
) {

631  
NGX_ERROR
;

634 
	`ngx_mem˝y
(
c
->
fûe
.
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

636 
p
 = 
c
->
fûe
.
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

637 
p
 = 
	`ngx_hex_dump
’, 
c
->
key
, 
NGX_HTTP_CACHE_KEY_LEN
);

638 *
p
 = '\0';

640 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
c
->
fûe
.
«me
.
d©a
, c->fûe.«me.
Àn
);

642 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

643 "ˇchêfûe: \"%s\"", 
c
->
fûe
.
«me
.
d©a
);

645  
NGX_OK
;

646 
	}
}

649 
ngx_hâp_fûe_ˇche_node_t
 *

650 
	$ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
)

652 
ngx_öt_t
 
rc
;

653 
ngx_rbåì_key_t
 
node_key
;

654 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

655 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

657 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
node_key
, 
key
, (
ngx_rbåì_key_t
));

659 
node
 = 
ˇche
->
sh
->
rbåì
.
roŸ
;

660 
£¡öñ
 = 
ˇche
->
sh
->
rbåì
.sentinel;

662 
node
 !
£¡öñ
) {

664 i‡(
node_key
 < 
node
->
key
) {

665 
node
 =Çode->
À·
;

669 i‡(
node_key
 > 
node
->
key
) {

670 
node
 =Çode->
right
;

676 
f˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

678 
rc
 = 
	`ngx_memcmp
(&
key
[(
ngx_rbåì_key_t
)], 
f˙
->key,

679 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

681 i‡(
rc
 == 0) {

682  
f˙
;

685 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

690  
NULL
;

691 
	}
}

695 
	$ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

696 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

698 
ngx_rbåì_node_t
 **
p
;

699 
ngx_hâp_fûe_ˇche_node_t
 *
˙
, *
˙t
;

703 i‡(
node
->
key
 < 
ãmp
->key) {

705 
p
 = &
ãmp
->
À·
;

707 } i‡(
node
->
key
 > 
ãmp
->key) {

709 
p
 = &
ãmp
->
right
;

713 
˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

714 
˙t
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
ãmp
;

716 
p
 = (
	`ngx_memcmp
(
˙
->
key
, 
˙t
->key,

717 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
))

719 ? &
ãmp
->
À·
 : &ãmp->
right
;

722 i‡(*
p
 =
£¡öñ
) {

726 
ãmp
 = *
p
;

729 *
p
 = 
node
;

730 
node
->
∑ª¡
 = 
ãmp
;

731 
node
->
À·
 = 
£¡öñ
;

732 
node
->
right
 = 
£¡öñ
;

733 
	`ngx_rbt_ªd
(
node
);

734 
	}
}

738 
	$ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
)

740 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
 = (ngx_hâp_fûe_ˇche_hódî_à*Ë
buf
;

742 
u_ch¨
 *
p
;

743 
ngx_°r_t
 *
key
;

744 
ngx_uöt_t
 
i
;

745 
ngx_hâp_ˇche_t
 *
c
;

747 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

750 
c
 = 
r
->
ˇche
;

752 
h
->
vÆid_£c
 = 
c
->valid_sec;

753 
h
->
œ°_modifõd
 = 
c
->last_modified;

754 
h
->
d©e
 = 
c
->date;

755 
h
->
¸c32
 = 
c
->crc32;

756 
h
->
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

757 
h
->
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

758 
h
->
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

760 
p
 = 
buf
 + (
ngx_hâp_fûe_ˇche_hódî_t
);

762 
p
 = 
	`ngx_˝ymem
’, 
ngx_hâp_fûe_ˇche_key
, (ngx_http_file_cache_key));

764 
key
 = 
c
->
keys
.
ñts
;

765 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

766 
p
 = 
	`ngx_c›y
’, 
key
[
i
].
d©a
, key[i].
Àn
);

769 *
p
 = 
LF
;

770 
	}
}

774 
	$ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
)

776 
off_t
 
fs_size
;

777 
ngx_öt_t
 
rc
;

778 
ngx_fûe_uniq_t
 
uniq
;

779 
ngx_fûe_öfo_t
 
fi
;

780 
ngx_hâp_ˇche_t
 *
c
;

781 
ngx_ext_ª«me_fûe_t
 
ext
;

782 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

784 
c
 = 
r
->
ˇche
;

786 i‡(
c
->
upd©ed
) {

790 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

793 
c
->
upd©ed
 = 1;

794 
c
->
upd©ög
 = 0;

796 
ˇche
 = 
c
->
fûe_ˇche
;

798 
uniq
 = 0;

799 
fs_size
 = 0;

801 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

803 
tf
->
fûe
.
«me
.
d©a
, 
c
->file.name.data);

805 
ext
.
ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

806 
ext
.
∑th_ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

807 
ext
.
time
 = -1;

808 
ext
.
¸óã_∑th
 = 1;

809 
ext
.
dñëe_fûe
 = 1;

810 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

812 
rc
 = 
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
c
->fûe.«me, &
ext
);

814 i‡(
rc
 =
NGX_OK
) {

816 i‡(
	`ngx_fd_öfo
(
tf
->
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

817 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

818 
ngx_fd_öfo_n
 " \"%s\" faûed", 
tf
->
fûe
.
«me
.
d©a
);

820 
rc
 = 
NGX_ERROR
;

823 
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

824 
fs_size
 = (
	`ngx_fûe_fs_size
(&
fi
Ë+ 
ˇche
->
bsize
 - 1) / cache->bsize;

828 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

830 
c
->
node
->
cou¡
--;

831 
c
->
node
->
uniq
 = uniq;

832 
c
->
node
->
body_°¨t
 = c->body_start;

834 
ˇche
->
sh
->
size
 +
fs_size
 - 
c
->
node
->fs_size;

835 
c
->
node
->
fs_size
 = fs_size;

837 i‡(
rc
 =
NGX_OK
) {

838 
c
->
node
->
exi°s
 = 1;

841 
c
->
node
->
upd©ög
 = 0;

843 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

844 
	}
}

847 
ngx_öt_t


848 
	$ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
)

850 
ngx_öt_t
 
rc
;

851 
ngx_buf_t
 *
b
;

852 
ngx_chaö_t
 
out
;

853 
ngx_hâp_ˇche_t
 *
c
;

855 
c
 = 
r
->
ˇche
;

857 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

858 "hâ∞fûêˇchê£nd: %s", 
c
->
fûe
.
«me
.
d©a
);

860 i‡(
r
 !r->
maö
 && 
c
->
Àngth
 - c->
body_°¨t
 == 0) {

861  
	`ngx_hâp_£nd_hódî
(
r
);

866 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

867 i‡(
b
 =
NULL
) {

868  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

871 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

872 i‡(
b
->
fûe
 =
NULL
) {

873  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

876 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

878 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

879  
rc
;

882 
b
->
fûe_pos
 = 
c
->
body_°¨t
;

883 
b
->
fûe_œ°
 = 
c
->
Àngth
;

885 
b
->
ö_fûe
 = (
c
->
Àngth
 - c->
body_°¨t
) ? 1: 0;

886 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

887 
b
->
œ°_ö_chaö
 = 1;

889 
b
->
fûe
->
fd
 = 
c
->file.fd;

890 
b
->
fûe
->
«me
 = 
c
->file.name;

891 
b
->
fûe
->
log
 = 
r
->
c⁄√˘i⁄
->log;

893 
out
.
buf
 = 
b
;

894 
out
.
√xt
 = 
NULL
;

896  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

897 
	}
}

901 
	$ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
)

903 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

904 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

906 i‡(
c
->
upd©ed
 || c->
node
 =
NULL
) {

910 
ˇche
 = 
c
->
fûe_ˇche
;

912 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

913 "hâ∞fûêˇchê‰ì, fd: %d", 
c
->
fûe
.
fd
);

915 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

917 
f˙
 = 
c
->
node
;

918 
f˙
->
cou¡
--;

920 i‡(
c
->
upd©ög
) {

921 
f˙
->
upd©ög
 = 0;

924 i‡(
c
->
îr‹
) {

925 
f˙
->
îr‹
 = 
c
->error;

927 i‡(
c
->
vÆid_£c
) {

928 
f˙
->
vÆid_£c
 = 
c
->valid_sec;

929 
f˙
->
vÆid_m£c
 = 
c
->valid_msec;

932 } i‡(!
f˙
->
exi°s
 && f˙->
cou¡
 =0 && 
c
->
mö_u£s
 == 1) {

933 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

934 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

935 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

936 
c
->
node
 = 
NULL
;

939 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

941 
c
->
upd©ed
 = 1;

942 
c
->
upd©ög
 = 0;

944 i‡(
c
->
ãmp_fûe
) {

945 i‡(
tf
 &&Åf->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

946 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

948 
tf
->
fûe
.
«me
.
d©a
);

950 i‡(
	`ngx_dñëe_fûe
(
tf
->
fûe
.
«me
.
d©a
Ë=
NGX_FILE_ERROR
) {

951 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
fûe
.
log
, 
ngx_î∫o
,

952 
ngx_dñëe_fûe_n
 " \"%s\" failed",

953 
tf
->
fûe
.
«me
.
d©a
);

957 
	}
}

961 
	$ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
)

963 
ngx_hâp_ˇche_t
 *
c
 = 
d©a
;

965 i‡(
c
->
upd©ed
) {

969 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

972 i‡(
c
->
upd©ög
) {

973 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
fûe
.
log
, 0,

974 "°ÆÀd cachêupd©ög,Éº‹:%ui", 
c
->
îr‹
);

977 
	`ngx_hâp_fûe_ˇche_‰ì
(
c
, 
NULL
);

978 
	}
}

981 
time_t


982 
	$ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

984 
u_ch¨
 *
«me
;

985 
size_t
 
Àn
;

986 
time_t
 
waô
;

987 
ngx_uöt_t
 
åõs
;

988 
ngx_∑th_t
 *
∑th
;

989 
ngx_queue_t
 *
q
;

990 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

992 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

995 
∑th
 = 
ˇche
->path;

996 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

998 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

999 i‡(
«me
 =
NULL
) {

1003 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1005 
waô
 = 10;

1006 
åõs
 = 20;

1008 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1010 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1011 
q
 !
	`ngx_queue_£¡öñ
(&
ˇche
->
sh
->
queue
);

1012 
q
 = 
	`ngx_queue_¥ev
(q))

1014 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1016 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1018 
f˙
->
cou¡
, f˙->
exi°s
,

1019 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1021 i‡(
f˙
->
cou¡
 == 0) {

1022 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1023 
waô
 = 0;

1026 i‡(--
åõs
) {

1030 
waô
 = 1;

1036 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1038 
	`ngx_‰ì
(
«me
);

1040  
waô
;

1041 
	}
}

1044 
time_t


1045 
	$ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1047 
u_ch¨
 *
«me
, *
p
;

1048 
size_t
 
Àn
;

1049 
time_t
 
now
, 
waô
;

1050 
ngx_∑th_t
 *
∑th
;

1051 
ngx_queue_t
 *
q
;

1052 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1053 
u_ch¨
 
key
[2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1055 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1058 
∑th
 = 
ˇche
->path;

1059 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1061 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1062 i‡(
«me
 =
NULL
) {

1066 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1068 
now
 = 
	`ngx_time
();

1070 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1074 i‡(
	`ngx_queue_em±y
(&
ˇche
->
sh
->
queue
)) {

1075 
waô
 = 10;

1079 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1081 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1083 
waô
 = 
f˙
->
expúe
 - 
now
;

1085 i‡(
waô
 > 0) {

1086 
waô
 = wait > 10 ? 10 : wait;

1090 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1092 
f˙
->
cou¡
, f˙->
exi°s
,

1093 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1095 i‡(
f˙
->
cou¡
 == 0) {

1096 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1100 i‡(
f˙
->
dñëög
) {

1101 
waô
 = 1;

1105 
p
 = 
	`ngx_hex_dump
(
key
, (
u_ch¨
 *Ë&
f˙
->
node
.key,

1106 (
ngx_rbåì_key_t
));

1107 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1108 (Ë
	`ngx_hex_dump
(
p
, 
f˙
->
key
, 
Àn
);

1116 
	`ngx_queue_ªmove
(
q
);

1117 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1118 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1120 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

1122 2 * 
NGX_HTTP_CACHE_KEY_LEN
, 
key
, 
f˙
->
cou¡
);

1125 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1127 
	`ngx_‰ì
(
«me
);

1129  
waô
;

1130 
	}
}

1134 
	$ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_queue_t
 *
q
,

1135 
u_ch¨
 *
«me
)

1137 
u_ch¨
 *
p
;

1138 
size_t
 
Àn
;

1139 
ngx_∑th_t
 *
∑th
;

1140 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1142 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1144 i‡(
f˙
->
exi°s
) {

1145 
ˇche
->
sh
->
size
 -
f˙
->
fs_size
;

1147 
∑th
 = 
ˇche
->path;

1148 
p
 = 
«me
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

1149 
p
 = 
	`ngx_hex_dump
’, (
u_ch¨
 *Ë&
f˙
->
node
.
key
,

1150 (
ngx_rbåì_key_t
));

1151 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1152 
p
 = 
	`ngx_hex_dump
’, 
f˙
->
key
, 
Àn
);

1153 *
p
 = '\0';

1155 
f˙
->
cou¡
++;

1156 
f˙
->
dñëög
 = 1;

1157 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1159 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1160 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
«me
, 
Àn
);

1162 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1163 "hâ∞fûêˇchêexpúe: \"%s\"", 
«me
);

1165 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1166 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1167 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1170 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1171 
f˙
->
cou¡
--;

1172 
f˙
->
dñëög
 = 0;

1175 i‡(
f˙
->
cou¡
 == 0) {

1176 
	`ngx_queue_ªmove
(
q
);

1177 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1178 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1180 
	}
}

1183 
time_t


1184 
	$ngx_hâp_fûe_ˇche_m™agî
(*
d©a
)

1186 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1188 
off_t
 
size
;

1189 
time_t
 
√xt
, 
waô
;

1191 
√xt
 = 
	`ngx_hâp_fûe_ˇche_expúe
(
ˇche
);

1193 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1194 
ˇche
->
fûes
 = 0;

1197 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1199 
size
 = 
ˇche
->
sh
->size;

1201 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1203 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1204 "hâ∞fûêˇchêsize: %O", 
size
);

1206 i‡(
size
 < 
ˇche
->
max_size
) {

1207  
√xt
;

1210 
waô
 = 
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

1212 i‡(
waô
 > 0) {

1213  
waô
;

1216 i‡(
ngx_quô
 || 
ngx_ãrmö©e
) {

1217  
√xt
;

1220 
	}
}

1224 
	$ngx_hâp_fûe_ˇche_lﬂdî
(*
d©a
)

1226 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1228 
ngx_åì_˘x_t
 
åì
;

1230 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

1234 i‡(!
	`ngx_©omic_cmp_£t
(&
ˇche
->
sh
->
lﬂdög
, 0, 
ngx_pid
)) {

1238 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1241 
åì
.
öô_h™dÀr
 = 
NULL
;

1242 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_fûe_ˇche_m™age_fûe
;

1243 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1244 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1245 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_fûe_ˇche_dñëe_fûe
;

1246 
åì
.
d©a
 = 
ˇche
;

1247 
åì
.
Æloc
 = 0;

1248 
åì
.
log
 = 
ngx_cy˛e
->log;

1250 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1251 
ˇche
->
fûes
 = 0;

1253 i‡(
	`ngx_wÆk_åì
(&
åì
, &
ˇche
->
∑th
->
«me
Ë=
NGX_ABORT
) {

1254 
ˇche
->
sh
->
lﬂdög
 = 0;

1258 
ˇche
->
sh
->
cﬁd
 = 0;

1259 
ˇche
->
sh
->
lﬂdög
 = 0;

1261 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

1263 &
ˇche
->
∑th
->
«me
,

1264 ((Ë
ˇche
->
sh
->
size
 * cache->
bsize
) / (1024 * 1024),

1265 
ˇche
->
bsize
);

1266 
	}
}

1269 
ngx_öt_t


1270 
	$ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1272 
ngx_m£c_t
 
ñ≠£d
;

1274 i‡(
ˇche
->
fûes
++ > 100) {

1276 
	`ngx_time_upd©e
();

1278 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

1280 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1281 "hâ∞fûêˇchêm™agîÅime: %M", 
ñ≠£d
);

1283 i‡(
ñ≠£d
 > 200) {

1291 
	`ngx_m¶ìp
(200);

1293 
	`ngx_time_upd©e
();

1296 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1297 
ˇche
->
fûes
 = 0;

1300  (
ngx_quô
 || 
ngx_ãrmö©e
Ë? 
NGX_ABORT
 : 
NGX_OK
;

1301 
	}
}

1304 
ngx_öt_t


1305 
	$ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1307  
NGX_OK
;

1308 
	}
}

1311 
ngx_öt_t


1312 
	$ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1314 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1316 
ˇche
 = 
˘x
->
d©a
;

1318 i‡(
	`ngx_hâp_fûe_ˇche_add_fûe
(
˘x
, 
∑th
Ë!
NGX_OK
) {

1319 (Ë
	`ngx_hâp_fûe_ˇche_dñëe_fûe
(
˘x
, 
∑th
);

1322  
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1323 
	}
}

1326 
ngx_öt_t


1327 
	$ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
)

1329 
u_ch¨
 *
p
;

1330 
ngx_öt_t
 
n
;

1331 
ngx_uöt_t
 
i
;

1332 
ngx_hâp_ˇche_t
 
c
;

1333 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1335 i‡(
«me
->
Àn
 < 2 * 
NGX_HTTP_CACHE_KEY_LEN
) {

1336  
NGX_ERROR
;

1339 i‡(
˘x
->
size
 < (
off_t
Ë(
ngx_hâp_fûe_ˇche_hódî_t
)) {

1340 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1341 "ˇchêfûê\"%s\" i†toÿsmÆl", 
«me
->
d©a
);

1342  
NGX_ERROR
;

1345 
	`ngx_memzîo
(&
c
, (
ngx_hâp_ˇche_t
));

1346 
ˇche
 = 
˘x
->
d©a
;

1348 
c
.
Àngth
 = 
˘x
->
size
;

1349 
c
.
fs_size
 = (
˘x
->fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

1351 
p
 = &
«me
->
d©a
[«me->
Àn
 - 2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1353 
i
 = 0; i < 
NGX_HTTP_CACHE_KEY_LEN
; i++) {

1354 
n
 = 
	`ngx_hextoi
(
p
, 2);

1356 i‡(
n
 =
NGX_ERROR
) {

1357  
NGX_ERROR
;

1360 
p
 += 2;

1362 
c
.
key
[
i
] = (
u_ch¨
Ë
n
;

1365  
	`ngx_hâp_fûe_ˇche_add
(
ˇche
, &
c
);

1366 
	}
}

1369 
ngx_öt_t


1370 
	$ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

1372 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1374 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1376 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

1378 i‡(
f˙
 =
NULL
) {

1380 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

1381 (
ngx_hâp_fûe_ˇche_node_t
));

1382 i‡(
f˙
 =
NULL
) {

1383 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1384  
NGX_ERROR
;

1387 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

1389 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

1390 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

1392 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1394 
f˙
->
u£s
 = 1;

1395 
f˙
->
cou¡
 = 0;

1396 
f˙
->
vÆid_m£c
 = 0;

1397 
f˙
->
îr‹
 = 0;

1398 
f˙
->
exi°s
 = 1;

1399 
f˙
->
upd©ög
 = 0;

1400 
f˙
->
dñëög
 = 0;

1401 
f˙
->
uniq
 = 0;

1402 
f˙
->
vÆid_£c
 = 0;

1403 
f˙
->
body_°¨t
 = 0;

1404 
f˙
->
fs_size
 = 
c
->fs_size;

1406 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

1409 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1412 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1414 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1416 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1418  
NGX_OK
;

1419 
	}
}

1422 
ngx_öt_t


1423 
	$ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1425 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

1426 "hâ∞fûêˇchêdñëe: \"%s\"", 
∑th
->
d©a
);

1428 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

1429 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1430 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
∑th
->
d©a
);

1433  
NGX_OK
;

1434 
	}
}

1437 
time_t


1438 
	$ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
)

1440 
ngx_uöt_t
 
i
;

1441 
ngx_hâp_ˇche_vÆid_t
 *
vÆid
;

1443 i‡(
ˇche_vÆid
 =
NULL
) {

1447 
vÆid
 = 
ˇche_vÆid
->
ñts
;

1448 
i
 = 0; i < 
ˇche_vÆid
->
√…s
; i++) {

1450 i‡(
vÆid
[
i
].
°©us
 == 0) {

1451  
vÆid
[
i
].valid;

1454 i‡(
vÆid
[
i
].
°©us
 == status) {

1455  
vÆid
[
i
].valid;

1460 
	}
}

1464 
	$ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1466 
off_t
 
max_size
;

1467 
u_ch¨
 *
œ°
, *
p
;

1468 
time_t
 
öa˘ive
;

1469 
ssize_t
 
size
;

1470 
ngx_°r_t
 
s
, 
«me
, *
vÆue
;

1471 
ngx_uöt_t
 
i
, 
n
;

1472 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1474 
ˇche
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_fûe_ˇche_t
));

1475 i‡(
ˇche
 =
NULL
) {

1476  
NGX_CONF_ERROR
;

1479 
ˇche
->
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

1480 i‡(
ˇche
->
∑th
 =
NULL
) {

1481  
NGX_CONF_ERROR
;

1484 
öa˘ive
 = 600;

1486 
«me
.
Àn
 = 0;

1487 
size
 = 0;

1488 
max_size
 = 
NGX_MAX_OFF_T_VALUE
;

1490 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1492 
ˇche
->
∑th
->
«me
 = 
vÆue
[1];

1494 i‡(
ˇche
->
∑th
->
«me
.
d©a
[ˇche->∑th->«me.
Àn
 - 1] == '/') {

1495 
ˇche
->
∑th
->
«me
.
Àn
--;

1498 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
ˇche
->
∑th
->
«me
, 0Ë!
NGX_OK
) {

1499  
NGX_CONF_ERROR
;

1502 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

1504 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "levels=", 7) == 0) {

1506 
p
 = 
vÆue
[
i
].
d©a
 + 7;

1507 
œ°
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

1509 
n
 = 0;Ç < 3 && 
p
 < 
œ°
;Ç++) {

1511 i‡(*
p
 > '0' && *p < '3') {

1513 
ˇche
->
∑th
->
Àvñ
[
n
] = *
p
++ - '0';

1514 
ˇche
->
∑th
->
Àn
 +ˇche->∑th->
Àvñ
[
n
] + 1;

1516 i‡(
p
 =
œ°
) {

1520 i‡(*
p
++ =':' && 
n
 < 2 &&Ö !
œ°
) {

1524 
övÆid_Àvñs
;

1527 
övÆid_Àvñs
;

1530 i‡(
ˇche
->
∑th
->
Àn
 < 10 + 3) {

1534 
övÆid_Àvñs
:

1536 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1537 "övÆid \"Àvñs\" \"%V\"", &
vÆue
[
i
]);

1538  
NGX_CONF_ERROR
;

1541 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "keys_zone=", 10) == 0) {

1543 
«me
.
d©a
 = 
vÆue
[
i
].data + 10;

1545 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

1547 i‡(
p
) {

1548 *
p
 = '\0';

1550 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1552 
p
++;

1554 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + vÆue[i].À¿- 
p
;

1555 
s
.
d©a
 = 
p
;

1557 
size
 = 
	`ngx_∑r£_size
(&
s
);

1558 i‡(
size
 > 8191) {

1563 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1564 "övÆid key†z⁄êsizê\"%V\"", &
vÆue
[
i
]);

1565  
NGX_CONF_ERROR
;

1568 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1570 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1571 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1573 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1574 i‡(
öa˘ive
 < 0) {

1575 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1576 "övÆid i«˘ivêvÆuê\"%V\"", &
vÆue
[
i
]);

1577  
NGX_CONF_ERROR
;

1583 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_size=", 9) == 0) {

1585 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1586 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1588 
max_size
 = 
	`ngx_∑r£_off£t
(&
s
);

1589 i‡(
max_size
 < 0) {

1590 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1591 "övÆid max_sizêvÆuê\"%V\"", &
vÆue
[
i
]);

1592  
NGX_CONF_ERROR
;

1598 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1599 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1600  
NGX_CONF_ERROR
;

1603 i‡(
«me
.
Àn
 =0 || 
size
 == 0) {

1604 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1606 &
cmd
->
«me
);

1607  
NGX_CONF_ERROR
;

1610 
ˇche
->
∑th
->
m™agî
 = 
ngx_hâp_fûe_ˇche_m™agî
;

1611 
ˇche
->
∑th
->
lﬂdî
 = 
ngx_hâp_fûe_ˇche_lﬂdî
;

1612 
ˇche
->
∑th
->
d©a
 = cache;

1613 
ˇche
->
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

1614 
ˇche
->
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1616 i‡(
	`ngx_add_∑th
(
cf
, &
ˇche
->
∑th
Ë!
NGX_OK
) {

1617  
NGX_CONF_ERROR
;

1620 
ˇche
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
, 
cmd
->
po°
);

1621 i‡(
ˇche
->
shm_z⁄e
 =
NULL
) {

1622  
NGX_CONF_ERROR
;

1625 i‡(
ˇche
->
shm_z⁄e
->
d©a
) {

1626 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1627 "du∂iˇã z⁄ê\"%V\"", &
«me
);

1628  
NGX_CONF_ERROR
;

1632 
ˇche
->
shm_z⁄e
->
öô
 = 
ngx_hâp_fûe_ˇche_öô
;

1633 
ˇche
->
shm_z⁄e
->
d©a
 = cache;

1635 
ˇche
->
öa˘ive
 = inactive;

1636 
ˇche
->
max_size
 = max_size;

1638  
NGX_CONF_OK
;

1639 
	}
}

1643 
	$ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1644 *
c⁄f
)

1646 *
p
 = 
c⁄f
;

1648 
time_t
 
vÆid
;

1649 
ngx_°r_t
 *
vÆue
;

1650 
ngx_uöt_t
 
i
, 
n
, 
°©us
;

1651 
ngx_¨øy_t
 **
a
;

1652 
ngx_hâp_ˇche_vÆid_t
 *
v
;

1653 
ngx_uöt_t
 
°©u£s
[] = { 200, 301, 302 };

1655 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1657 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1658 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ˇche_vÆid_t
));

1659 i‡(*
a
 =
NULL
) {

1660  
NGX_CONF_ERROR
;

1664 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1665 
n
 = 
cf
->
¨gs
->
√…s
 - 1;

1667 
vÆid
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

1668 i‡(
vÆid
 < 0) {

1669 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1670 "övÆidÅimêvÆuê\"%V\"", &
vÆue
[
n
]);

1671  
NGX_CONF_ERROR
;

1674 i‡(
n
 == 1) {

1676 
i
 = 0; i < 3; i++) {

1677 
v
 = 
	`ngx_¨øy_push
(*
a
);

1678 i‡(
v
 =
NULL
) {

1679  
NGX_CONF_ERROR
;

1682 
v
->
°©us
 = 
°©u£s
[
i
];

1683 
v
->
vÆid
 = valid;

1686  
NGX_CONF_OK
;

1689 
i
 = 1; i < 
n
; i++) {

1691 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "any") == 0) {

1693 
°©us
 = 0;

1697 
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

1698 i‡(
°©us
 < 100) {

1699 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1700 "övÆid sètu†\"%V\"", &
vÆue
[
i
]);

1701  
NGX_CONF_ERROR
;

1705 
v
 = 
	`ngx_¨øy_push
(*
a
);

1706 i‡(
v
 =
NULL
) {

1707  
NGX_CONF_ERROR
;

1710 
v
->
°©us
 = status;

1711 
v
->
vÆid
 = valid;

1714  
NGX_CONF_OK
;

1715 
	}
}

	@src/http/ngx_http_header_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_hódî_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL
,

33 
ngx_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_hódî_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
	gngx_hâp_£rvî_°rög
[] = "Sîvî:Çgöx" 
CRLF
;

50 
	gngx_hâp_£rvî_fuŒ_°rög
[] = "Sîvî: " 
NGINX_VER
 
CRLF
;

53 
ngx_°r_t
 
	gngx_hâp_°©us_löes
[] = {

55 
ngx_°rög
("200 OK"),

56 
ngx_°rög
("201 Created"),

57 
ngx_°rög
("202 Accepted"),

58 
ngx_nuŒ_°rög
,

59 
ngx_°rög
("204 No Content"),

60 
ngx_nuŒ_°rög
,

61 
ngx_°rög
("206 Partial Content"),

65 
	#NGX_HTTP_LAST_2XX
 207

	)

66 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 200)

	)

70 
ngx_°rög
("301 Moved Permanently"),

71 
ngx_°rög
("302 Moved Temporarily"),

72 
ngx_°rög
("303 See Other"),

73 
ngx_°rög
("304 Not Modified"),

74 
ngx_nuŒ_°rög
,

75 
ngx_nuŒ_°rög
,

76 
ngx_°rög
("307 Temporary Redirect"),

78 
	#NGX_HTTP_LAST_3XX
 308

	)

79 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

81 
ngx_°rög
("400 Bad Request"),

82 
ngx_°rög
("401 Unauthorized"),

83 
ngx_°rög
("402 Payment Required"),

84 
ngx_°rög
("403 Forbidden"),

85 
ngx_°rög
("404 Not Found"),

86 
ngx_°rög
("405 Not Allowed"),

87 
ngx_°rög
("406 Not Acceptable"),

88 
ngx_nuŒ_°rög
,

89 
ngx_°rög
("408 Request Time-out"),

90 
ngx_°rög
("409 Conflict"),

91 
ngx_°rög
("410 Gone"),

92 
ngx_°rög
("411 Length Required"),

93 
ngx_°rög
("412 Precondition Failed"),

94 
ngx_°rög
("413 Request Entity Too Large"),

95 
ngx_nuŒ_°rög
,

99 
ngx_°rög
("415 Unsupported Media Type"),

100 
ngx_°rög
("416 Requested Range Not Satisfiable"),

111 
	#NGX_HTTP_LAST_4XX
 417

	)

112 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

114 
ngx_°rög
("500 Internal Server Error"),

115 
ngx_°rög
("501 Method Not Implemented"),

116 
ngx_°rög
("502 Bad Gateway"),

117 
ngx_°rög
("503 Service Temporarily Unavailable"),

118 
ngx_°rög
("504 Gateway Time-out"),

120 
ngx_nuŒ_°rög
,

121 
ngx_nuŒ_°rög
,

122 
ngx_°rög
("507 Insufficient Storage"),

127 
	#NGX_HTTP_LAST_5XX
 508

	)

132 
ngx_hâp_hódî_out_t
 
	gngx_hâp_hódîs_out
[] = {

133 { 
ngx_°rög
("Sîvî"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
) },

134 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
) },

135 { 
ngx_°rög
("Content-Length"),

136 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_Àngth
) },

137 { 
ngx_°rög
("Content-Encoding"),

138 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_ícodög
) },

139 { 
ngx_°rög
("Loˇti⁄"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
loˇti⁄
) },

140 { 
ngx_°rög
("Last-Modified"),

141 
off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
) },

142 { 
ngx_°rög
("Accept-Ranges"),

143 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
) },

144 { 
ngx_°rög
("Expúes"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
) },

145 { 
ngx_°rög
("Cache-Control"),

146 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
) },

147 { 
ngx_°rög
("ETag"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
) },

149 { 
ngx_nuŒ_°rög
, 0 }

153 
ngx_öt_t


154 
	$ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

156 
u_ch¨
 *
p
;

157 
size_t
 
Àn
;

158 
ngx_°r_t
 
ho°
, *
°©us_löe
;

159 
ngx_buf_t
 *
b
;

160 
ngx_uöt_t
 
°©us
, 
i
, 
p‹t
;

161 
ngx_chaö_t
 
out
;

162 
ngx_li°_∑π_t
 *
∑π
;

163 
ngx_èbÀ_ñt_t
 *
hódî
;

164 
ngx_c⁄√˘i⁄_t
 *
c
;

165 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

166 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

167 
sockaddr_ö
 *
sö
;

168 #i‡(
NGX_HAVE_INET6
)

169 
sockaddr_ö6
 *
sö6
;

171 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

173 i‡(
r
->
hódî_£¡
) {

174  
NGX_OK
;

177 
r
->
hódî_£¡
 = 1;

179 i‡(
r
 !r->
maö
) {

180  
NGX_OK
;

183 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

184  
NGX_OK
;

187 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

188 
r
->
hódî_⁄ly
 = 1;

191 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 != -1) {

192 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


193 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


194 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED
)

196 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

197 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

201 
Àn
 = ("HTTP/1.x "Ë- 1 + (
CRLF
) - 1

203 + (
CRLF
) - 1;

207 i‡(
r
->
hódîs_out
.
°©us_löe
.
Àn
) {

208 
Àn
 +
r
->
hódîs_out
.
°©us_löe
.len;

209 
°©us_löe
 = &
r
->
hódîs_out
.status_line;

210 #i‡(
NGX_SUPPRESS_WARN
)

211 
°©us
 = 0;

216 
°©us
 = 
r
->
hódîs_out
.status;

218 i‡(
°©us
 >
NGX_HTTP_OK


219 && 
°©us
 < 
NGX_HTTP_LAST_2XX
)

223 i‡(
°©us
 =
NGX_HTTP_NO_CONTENT
) {

224 
r
->
hódî_⁄ly
 = 1;

225 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

226 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

227 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

228 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

229 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

232 
°©us
 -
NGX_HTTP_OK
;

233 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

234 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

236 } i‡(
°©us
 >
NGX_HTTP_MOVED_PERMANENTLY


237 && 
°©us
 < 
NGX_HTTP_LAST_3XX
)

241 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

242 
r
->
hódî_⁄ly
 = 1;

245 
°©us
 = sètu†- 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

246 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

247 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

249 } i‡(
°©us
 >
NGX_HTTP_BAD_REQUEST


250 && 
°©us
 < 
NGX_HTTP_LAST_4XX
)

253 
°©us
 = sètu†- 
NGX_HTTP_BAD_REQUEST


254 + 
NGX_HTTP_OFF_4XX
;

256 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

257 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

259 } i‡(
°©us
 >
NGX_HTTP_INTERNAL_SERVER_ERROR


260 && 
°©us
 < 
NGX_HTTP_LAST_5XX
)

263 
°©us
 = sètu†- 
NGX_HTTP_INTERNAL_SERVER_ERROR


264 + 
NGX_HTTP_OFF_5XX
;

266 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

267 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

270 
Àn
 +
NGX_INT_T_LEN
;

271 
°©us_löe
 = 
NULL
;

275 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

277 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

278 
Àn
 +
˛cf
->
£rvî_tokís
 ? (
ngx_hâp_£rvî_fuŒ_°rög
) - 1:

279 (
ngx_hâp_£rvî_°rög
) - 1;

282 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

283 
Àn
 +("D©e: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

286 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

287 
Àn
 += ("Content-Type: ") - 1

288 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 + 2;

290 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


291 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

293 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

297 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


298 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

300 
Àn
 +("C⁄ã¡-Lígth: "Ë- 1 + 
NGX_OFF_T_LEN
 + 2;

303 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


304 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

306 
Àn
 +("La°-Modifõd: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

309 
c
 = 
r
->
c⁄√˘i⁄
;

311 i‡(
r
->
hódîs_out
.
loˇti⁄


312 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


313 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/')

315 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

317 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

318 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

319 
ho°
 = 
cscf
->
£rvî_«me
;

321 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

322 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

325 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

326 
ho°
.
d©a
 = 
addr
;

328 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

329  
NGX_ERROR
;

333 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

335 #i‡(
NGX_HAVE_INET6
)

336 
AF_INET6
:

337 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

338 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

341 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

342 
AF_UNIX
:

343 
p‹t
 = 0;

347 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

348 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

352 
Àn
 += ("Location: https://") - 1

353 + 
ho°
.
Àn


354 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 + 2;

356 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

358 #i‡(
NGX_HTTP_SSL
)

359 i‡(
c
->
s¶
)

360 
p‹t
 = (port == 443) ? 0 :Öort;

363 
p‹t
 = (port == 80) ? 0 :Öort;

366 
p‹t
 = 0;

369 i‡(
p‹t
) {

370 
Àn
 += (":65535") - 1;

374 
	`ngx_°r_nuŒ
(&
ho°
);

375 
p‹t
 = 0;

378 i‡(
r
->
chunked
) {

379 
Àn
 +("Tøns„r-Encodög: chunked" 
CRLF
) - 1;

382 i‡(
r
->
kì∑live
) {

383 
Àn
 +("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1;

393 i‡(
˛cf
->
kì∑live_hódî
) {

394 
Àn
 +("Kìp-Alive:Åimeout="Ë- 1 + 
NGX_TIME_T_LEN
 + 2;

398 
Àn
 +("C⁄√˘i⁄: clo£d" 
CRLF
) - 1;

401 #i‡(
NGX_HTTP_GZIP
)

402 i‡(
r
->
gzù_v¨y
) {

403 i‡(
˛cf
->
gzù_v¨y
) {

404 
Àn
 +("V¨y: Ac˚±-Encodög" 
CRLF
) - 1;

407 
r
->
gzù_v¨y
 = 0;

412 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

413 
hódî
 = 
∑π
->
ñts
;

415 
i
 = 0; ; i++) {

417 i‡(
i
 >
∑π
->
√…s
) {

418 i‡(
∑π
->
√xt
 =
NULL
) {

422 
∑π
 =Ö¨t->
√xt
;

423 
hódî
 = 
∑π
->
ñts
;

424 
i
 = 0;

427 i‡(
hódî
[
i
].
hash
 == 0) {

431 
Àn
 +
hódî
[
i
].
key
.À¿+ (": "Ë- 1 + hódî[i].
vÆue
.len

432 + (
CRLF
) - 1;

435 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

436 i‡(
b
 =
NULL
) {

437  
NGX_ERROR
;

441 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP/1.1 ", ("HTTP/1.x ") - 1);

444 i‡(
°©us_löe
) {

445 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
°©us_löe
->
d©a
, sètus_löe->
Àn
);

448 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%ui", 
°©us
);

450 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

452 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

453 i‡(
˛cf
->
£rvî_tokís
) {

454 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_fuŒ_°rög
;

455 
Àn
 = (
ngx_hâp_£rvî_fuŒ_°rög
) - 1;

458 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_°rög
;

459 
Àn
 = (
ngx_hâp_£rvî_°rög
) - 1;

462 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
p
, 
Àn
);

465 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

466 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Date: ", ("Date: ") - 1);

467 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_ˇched_hâp_time
.
d©a
,

468 
ngx_ˇched_hâp_time
.
Àn
);

470 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

473 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

474 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Content-Type: ",

476 
p
 = 
b
->
œ°
;

477 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

478 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

480 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


481 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

483 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "; charset=",

485 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

486 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

490 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
b
->
œ°
 - 
p
;

491 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

494 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

497 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


498 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

500 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "C⁄ã¡-Lígth: %O" 
CRLF
,

501 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

504 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


505 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

507 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Last-Modified: ",

509 
b
->
œ°
 = 
	`ngx_hâp_time
(b->œ°, 
r
->
hódîs_out
.
œ°_modifõd_time
);

511 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

514 i‡(
ho°
.
d©a
) {

516 
p
 = 
b
->
œ°
 + ("Location: ") - 1;

518 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Location: http",

521 #i‡(
NGX_HTTP_SSL
)

522 i‡(
c
->
s¶
) {

523 *
b
->
œ°
++ ='s';

527 *
b
->
œ°
++ = ':'; *b->last++ = '/'; *b->last++ = '/';

528 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ho°
.
d©a
, ho°.
Àn
);

530 i‡(
p‹t
) {

531 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, ":%ui", 
p‹t
);

534 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

535 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

539 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
b
->
œ°
 - 
p
;

540 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

541 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

543 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

546 i‡(
r
->
chunked
) {

547 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "Tøns„r-Encodög: chunked" 
CRLF
,

548 ("Tøns„r-Encodög: chunked" 
CRLF
) - 1);

551 i‡(
r
->
kì∑live
) {

552 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: kìp-Æive" 
CRLF
,

553 ("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1);

555 i‡(
˛cf
->
kì∑live_hódî
) {

556 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Kìp-Alive:Åimeout=%T" 
CRLF
,

557 
˛cf
->
kì∑live_hódî
);

561 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: clo£" 
CRLF
,

562 ("C⁄√˘i⁄: clo£" 
CRLF
) - 1);

565 #i‡(
NGX_HTTP_GZIP
)

566 i‡(
r
->
gzù_v¨y
) {

567 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "V¨y: Ac˚±-Encodög" 
CRLF
,

568 ("V¨y: Ac˚±-Encodög" 
CRLF
) - 1);

572 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

573 
hódî
 = 
∑π
->
ñts
;

575 
i
 = 0; ; i++) {

577 i‡(
i
 >
∑π
->
√…s
) {

578 i‡(
∑π
->
√xt
 =
NULL
) {

582 
∑π
 =Ö¨t->
√xt
;

583 
hódî
 = 
∑π
->
ñts
;

584 
i
 = 0;

587 i‡(
hódî
[
i
].
hash
 == 0) {

591 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

592 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

594 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

595 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

598 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

599 "%*s", (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

602 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

604 
r
->
hódî_size
 = 
b
->
œ°
 - b->
pos
;

606 i‡(
r
->
hódî_⁄ly
) {

607 
b
->
œ°_buf
 = 1;

610 
out
.
buf
 = 
b
;

611 
out
.
√xt
 = 
NULL
;

613  
	`ngx_hâp_wrôe_fûãr
(
r
, &
out
);

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

620 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódî_fûãr
;

622  
NGX_OK
;

623 
	}
}

	@src/http/ngx_http_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
uöt32_t
 
	gusuÆ
[] = {

20 #i‡(
NGX_WIN32
)

36 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

38 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

39 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

41 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

42 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

44 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

45 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

47 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

48 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

49 && 
m
[4] =
c4


	)

51 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

52 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

53 && (((
uöt32_t
 *Ë
m
)[1] & 0xffffË=((
c5
 << 8Ë| 
c4
)

	)

55 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

56 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

57 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

59 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

60 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

61 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

63 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

64 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

65 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
) \

66 && 
m
[8] =
c8


	)

70 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

71 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2


	)

73 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

74 
m
[0] =
c0
 && m[2] =
c2
 && m[3] =
c3


	)

76 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

77 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3


	)

79 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

80 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

82 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

83 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

84 && 
m
[4] =
c4
 && m[5] =
c5


	)

86 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

87 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

88 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6


	)

90 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

91 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

92 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7


	)

94 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

95 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

96 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7
 && m[8] =
c8


	)

103 
ngx_öt_t


104 
	$ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

106 
u_ch¨
 
c
, 
ch
, *
p
, *
m
;

108 
sw_°¨t
 = 0,

109 
sw_mëhod
,

110 
sw_•a˚s_bef‹e_uri
,

111 
sw_schema
,

112 
sw_schema_¶ash
,

113 
sw_schema_¶ash_¶ash
,

114 
sw_ho°
,

115 
sw_p‹t
,

116 
sw_ho°_hâp_09
,

117 
sw_a·î_¶ash_ö_uri
,

118 
sw_check_uri
,

119 
sw_check_uri_hâp_09
,

120 
sw_uri
,

121 
sw_hâp_09
,

122 
sw_hâp_H
,

123 
sw_hâp_HT
,

124 
sw_hâp_HTT
,

125 
sw_hâp_HTTP
,

126 
sw_fú°_maj‹_digô
,

127 
sw_maj‹_digô
,

128 
sw_fú°_mö‹_digô
,

129 
sw_mö‹_digô
,

130 
sw_•a˚s_a·î_digô
,

131 
sw_Æmo°_d⁄e


132 } 
°©e
;

134 
°©e
 = 
r
->state;

136 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

137 
ch
 = *
p
;

139 
°©e
) {

142 
sw_°¨t
:

143 
r
->
ªque°_°¨t
 = 
p
;

145 i‡(
ch
 =
CR
 || ch =
LF
) {

149 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

150  
NGX_HTTP_PARSE_INVALID_METHOD
;

153 
°©e
 = 
sw_mëhod
;

156 
sw_mëhod
:

157 i‡(
ch
 == ' ') {

158 
r
->
mëhod_íd
 = 
p
 - 1;

159 
m
 = 
r
->
ªque°_°¨t
;

161 
p
 - 
m
) {

164 i‡(
	`ngx_°r3_cmp
(
m
, 'G', 'E', 'T', ' ')) {

165 
r
->
mëhod
 = 
NGX_HTTP_GET
;

169 i‡(
	`ngx_°r3_cmp
(
m
, 'P', 'U', 'T', ' ')) {

170 
r
->
mëhod
 = 
NGX_HTTP_PUT
;

177 i‡(
m
[1] == 'O') {

179 i‡(
	`ngx_°r3Ocmp
(
m
, 'P', 'O', 'S', 'T')) {

180 
r
->
mëhod
 = 
NGX_HTTP_POST
;

184 i‡(
	`ngx_°r3Ocmp
(
m
, 'C', 'O', 'P', 'Y')) {

185 
r
->
mëhod
 = 
NGX_HTTP_COPY
;

189 i‡(
	`ngx_°r3Ocmp
(
m
, 'M', 'O', 'V', 'E')) {

190 
r
->
mëhod
 = 
NGX_HTTP_MOVE
;

194 i‡(
	`ngx_°r3Ocmp
(
m
, 'L', 'O', 'C', 'K')) {

195 
r
->
mëhod
 = 
NGX_HTTP_LOCK
;

201 i‡(
	`ngx_°r4cmp
(
m
, 'H', 'E', 'A', 'D')) {

202 
r
->
mëhod
 = 
NGX_HTTP_HEAD
;

210 i‡(
	`ngx_°r5cmp
(
m
, 'M', 'K', 'C', 'O', 'L')) {

211 
r
->
mëhod
 = 
NGX_HTTP_MKCOL
;

214 i‡(
	`ngx_°r5cmp
(
m
, 'P', 'A', 'T', 'C', 'H')) {

215 
r
->
mëhod
 = 
NGX_HTTP_PATCH
;

218 i‡(
	`ngx_°r5cmp
(
m
, 'T', 'R', 'A', 'C', 'E')) {

219 
r
->
mëhod
 = 
NGX_HTTP_TRACE
;

225 i‡(
	`ngx_°r6cmp
(
m
, 'D', 'E', 'L', 'E', 'T', 'E')) {

226 
r
->
mëhod
 = 
NGX_HTTP_DELETE
;

230 i‡(
	`ngx_°r6cmp
(
m
, 'U', 'N', 'L', 'O', 'C', 'K')) {

231 
r
->
mëhod
 = 
NGX_HTTP_UNLOCK
;

238 i‡(
	`ngx_°r7_cmp
(
m
, 'O', 'P', 'T', 'I', 'O', 'N', 'S', ' '))

240 
r
->
mëhod
 = 
NGX_HTTP_OPTIONS
;

246 i‡(
	`ngx_°r8cmp
(
m
, 'P', 'R', 'O', 'P', 'F', 'I', 'N', 'D'))

248 
r
->
mëhod
 = 
NGX_HTTP_PROPFIND
;

254 i‡(
	`ngx_°r9cmp
(
m
,

257 
r
->
mëhod
 = 
NGX_HTTP_PROPPATCH
;

263 
°©e
 = 
sw_•a˚s_bef‹e_uri
;

267 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

268  
NGX_HTTP_PARSE_INVALID_METHOD
;

274 
sw_•a˚s_bef‹e_uri
:

276 i‡(
ch
 == '/') {

277 
r
->
uri_°¨t
 = 
p
;

278 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

282 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

283 i‡(
c
 >= 'a' && c <= 'z') {

284 
r
->
schema_°¨t
 = 
p
;

285 
°©e
 = 
sw_schema
;

289 
ch
) {

293  
NGX_HTTP_PARSE_INVALID_REQUEST
;

297 
sw_schema
:

299 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

300 i‡(
c
 >= 'a' && c <= 'z') {

304 
ch
) {

306 
r
->
schema_íd
 = 
p
;

307 
°©e
 = 
sw_schema_¶ash
;

310  
NGX_HTTP_PARSE_INVALID_REQUEST
;

314 
sw_schema_¶ash
:

315 
ch
) {

317 
°©e
 = 
sw_schema_¶ash_¶ash
;

320  
NGX_HTTP_PARSE_INVALID_REQUEST
;

324 
sw_schema_¶ash_¶ash
:

325 
ch
) {

327 
r
->
ho°_°¨t
 = 
p
 + 1;

328 
°©e
 = 
sw_ho°
;

331  
NGX_HTTP_PARSE_INVALID_REQUEST
;

335 
sw_ho°
:

337 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

338 i‡(
c
 >= 'a' && c <= 'z') {

342 i‡((
ch
 >= '0' && ch <= '9') || ch == '.' || ch == '-') {

346 
r
->
ho°_íd
 = 
p
;

348 
ch
) {

350 
°©e
 = 
sw_p‹t
;

353 
r
->
uri_°¨t
 = 
p
;

354 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

361 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

362 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

363 
°©e
 = 
sw_ho°_hâp_09
;

366  
NGX_HTTP_PARSE_INVALID_REQUEST
;

370 
sw_p‹t
:

371 i‡(
ch
 >= '0' && ch <= '9') {

375 
ch
) {

377 
r
->
p‹t_íd
 = 
p
;

378 
r
->
uri_°¨t
 = 
p
;

379 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

382 
r
->
p‹t_íd
 = 
p
;

387 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

388 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

389 
°©e
 = 
sw_ho°_hâp_09
;

392  
NGX_HTTP_PARSE_INVALID_REQUEST
;

397 
sw_ho°_hâp_09
:

398 
ch
) {

401 
CR
:

402 
r
->
hâp_mö‹
 = 9;

403 
°©e
 = 
sw_Æmo°_d⁄e
;

405 
LF
:

406 
r
->
hâp_mö‹
 = 9;

407 
d⁄e
;

409 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

410 
°©e
 = 
sw_hâp_H
;

413  
NGX_HTTP_PARSE_INVALID_REQUEST
;

419 
sw_a·î_¶ash_ö_uri
:

421 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

422 
°©e
 = 
sw_check_uri
;

426 
ch
) {

428 
r
->
uri_íd
 = 
p
;

429 
°©e
 = 
sw_check_uri_hâp_09
;

431 
CR
:

432 
r
->
uri_íd
 = 
p
;

433 
r
->
hâp_mö‹
 = 9;

434 
°©e
 = 
sw_Æmo°_d⁄e
;

436 
LF
:

437 
r
->
uri_íd
 = 
p
;

438 
r
->
hâp_mö‹
 = 9;

439 
d⁄e
;

441 
r
->
com∂ex_uri
 = 1;

442 
°©e
 = 
sw_uri
;

445 
r
->
quŸed_uri
 = 1;

446 
°©e
 = 
sw_uri
;

449 
r
->
com∂ex_uri
 = 1;

450 
°©e
 = 
sw_uri
;

452 #i‡(
NGX_WIN32
)

454 
r
->
com∂ex_uri
 = 1;

455 
°©e
 = 
sw_uri
;

459 
r
->
¨gs_°¨t
 = 
p
 + 1;

460 
°©e
 = 
sw_uri
;

463 
r
->
com∂ex_uri
 = 1;

464 
°©e
 = 
sw_uri
;

467 
r
->
∂us_ö_uri
 = 1;

470  
NGX_HTTP_PARSE_INVALID_REQUEST
;

472 
°©e
 = 
sw_check_uri
;

478 
sw_check_uri
:

480 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

484 
ch
) {

486 
r
->
uri_ext
 = 
NULL
;

487 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

490 
r
->
uri_ext
 = 
p
 + 1;

493 
r
->
uri_íd
 = 
p
;

494 
°©e
 = 
sw_check_uri_hâp_09
;

496 
CR
:

497 
r
->
uri_íd
 = 
p
;

498 
r
->
hâp_mö‹
 = 9;

499 
°©e
 = 
sw_Æmo°_d⁄e
;

501 
LF
:

502 
r
->
uri_íd
 = 
p
;

503 
r
->
hâp_mö‹
 = 9;

504 
d⁄e
;

505 #i‡(
NGX_WIN32
)

507 
r
->
com∂ex_uri
 = 1;

508 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

512 
r
->
quŸed_uri
 = 1;

513 
°©e
 = 
sw_uri
;

516 
r
->
¨gs_°¨t
 = 
p
 + 1;

517 
°©e
 = 
sw_uri
;

520 
r
->
com∂ex_uri
 = 1;

521 
°©e
 = 
sw_uri
;

524 
r
->
∂us_ö_uri
 = 1;

527  
NGX_HTTP_PARSE_INVALID_REQUEST
;

532 
sw_check_uri_hâp_09
:

533 
ch
) {

536 
CR
:

537 
r
->
hâp_mö‹
 = 9;

538 
°©e
 = 
sw_Æmo°_d⁄e
;

540 
LF
:

541 
r
->
hâp_mö‹
 = 9;

542 
d⁄e
;

544 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

545 
°©e
 = 
sw_hâp_H
;

548 
r
->
•a˚_ö_uri
 = 1;

549 
°©e
 = 
sw_check_uri
;

556 
sw_uri
:

558 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

562 
ch
) {

564 
r
->
uri_íd
 = 
p
;

565 
°©e
 = 
sw_hâp_09
;

567 
CR
:

568 
r
->
uri_íd
 = 
p
;

569 
r
->
hâp_mö‹
 = 9;

570 
°©e
 = 
sw_Æmo°_d⁄e
;

572 
LF
:

573 
r
->
uri_íd
 = 
p
;

574 
r
->
hâp_mö‹
 = 9;

575 
d⁄e
;

577 
r
->
com∂ex_uri
 = 1;

580  
NGX_HTTP_PARSE_INVALID_REQUEST
;

585 
sw_hâp_09
:

586 
ch
) {

589 
CR
:

590 
r
->
hâp_mö‹
 = 9;

591 
°©e
 = 
sw_Æmo°_d⁄e
;

593 
LF
:

594 
r
->
hâp_mö‹
 = 9;

595 
d⁄e
;

597 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

598 
°©e
 = 
sw_hâp_H
;

601 
r
->
•a˚_ö_uri
 = 1;

602 
°©e
 = 
sw_uri
;

607 
sw_hâp_H
:

608 
ch
) {

610 
°©e
 = 
sw_hâp_HT
;

613  
NGX_HTTP_PARSE_INVALID_REQUEST
;

617 
sw_hâp_HT
:

618 
ch
) {

620 
°©e
 = 
sw_hâp_HTT
;

623  
NGX_HTTP_PARSE_INVALID_REQUEST
;

627 
sw_hâp_HTT
:

628 
ch
) {

630 
°©e
 = 
sw_hâp_HTTP
;

633  
NGX_HTTP_PARSE_INVALID_REQUEST
;

637 
sw_hâp_HTTP
:

638 
ch
) {

640 
°©e
 = 
sw_fú°_maj‹_digô
;

643  
NGX_HTTP_PARSE_INVALID_REQUEST
;

648 
sw_fú°_maj‹_digô
:

649 i‡(
ch
 < '1' || ch > '9') {

650  
NGX_HTTP_PARSE_INVALID_REQUEST
;

653 
r
->
hâp_maj‹
 = 
ch
 - '0';

654 
°©e
 = 
sw_maj‹_digô
;

658 
sw_maj‹_digô
:

659 i‡(
ch
 == '.') {

660 
°©e
 = 
sw_fú°_mö‹_digô
;

664 i‡(
ch
 < '0' || ch > '9') {

665  
NGX_HTTP_PARSE_INVALID_REQUEST
;

668 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

672 
sw_fú°_mö‹_digô
:

673 i‡(
ch
 < '0' || ch > '9') {

674  
NGX_HTTP_PARSE_INVALID_REQUEST
;

677 
r
->
hâp_mö‹
 = 
ch
 - '0';

678 
°©e
 = 
sw_mö‹_digô
;

682 
sw_mö‹_digô
:

683 i‡(
ch
 =
CR
) {

684 
°©e
 = 
sw_Æmo°_d⁄e
;

688 i‡(
ch
 =
LF
) {

689 
d⁄e
;

692 i‡(
ch
 == ' ') {

693 
°©e
 = 
sw_•a˚s_a·î_digô
;

697 i‡(
ch
 < '0' || ch > '9') {

698  
NGX_HTTP_PARSE_INVALID_REQUEST
;

701 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

704 
sw_•a˚s_a·î_digô
:

705 
ch
) {

708 
CR
:

709 
°©e
 = 
sw_Æmo°_d⁄e
;

711 
LF
:

712 
d⁄e
;

714  
NGX_HTTP_PARSE_INVALID_REQUEST
;

719 
sw_Æmo°_d⁄e
:

720 
r
->
ªque°_íd
 = 
p
 - 1;

721 
ch
) {

722 
LF
:

723 
d⁄e
;

725  
NGX_HTTP_PARSE_INVALID_REQUEST
;

730 
b
->
pos
 = 
p
;

731 
r
->
°©e
 = state;

733  
NGX_AGAIN
;

735 
d⁄e
:

737 
b
->
pos
 = 
p
 + 1;

739 i‡(
r
->
ªque°_íd
 =
NULL
) {

740 
r
->
ªque°_íd
 = 
p
;

743 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

744 
r
->
°©e
 = 
sw_°¨t
;

746 i‡(
r
->
hâp_vîsi⁄
 =9 &&Ñ->
mëhod
 !
NGX_HTTP_GET
) {

747  
NGX_HTTP_PARSE_INVALID_09_METHOD
;

750  
NGX_OK
;

751 
	}
}

754 
ngx_öt_t


755 
	$ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

756 
ngx_uöt_t
 
Ælow_undîsc‹es
)

758 
u_ch¨
 
c
, 
ch
, *
p
;

759 
ngx_uöt_t
 
hash
, 
i
;

761 
sw_°¨t
 = 0,

762 
sw_«me
,

763 
sw_•a˚_bef‹e_vÆue
,

764 
sw_vÆue
,

765 
sw_•a˚_a·î_vÆue
,

766 
sw_ign‹e_löe
,

767 
sw_Æmo°_d⁄e
,

768 
sw_hódî_Æmo°_d⁄e


769 } 
°©e
;

773 
u_ch¨
 
lowˇ£
[] =

783 
°©e
 = 
r
->state;

784 
hash
 = 
r
->
hódî_hash
;

785 
i
 = 
r
->
lowˇ£_ödex
;

787 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

788 
ch
 = *
p
;

790 
°©e
) {

793 
sw_°¨t
:

794 
r
->
hódî_«me_°¨t
 = 
p
;

795 
r
->
övÆid_hódî
 = 0;

797 
ch
) {

798 
CR
:

799 
r
->
hódî_íd
 = 
p
;

800 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

802 
LF
:

803 
r
->
hódî_íd
 = 
p
;

804 
hódî_d⁄e
;

806 
°©e
 = 
sw_«me
;

808 
c
 = 
lowˇ£
[
ch
];

810 i‡(
c
) {

811 
hash
 = 
	`ngx_hash
(0, 
c
);

812 
r
->
lowˇ£_hódî
[0] = 
c
;

813 
i
 = 1;

817 i‡(
ch
 == '\0') {

818  
NGX_HTTP_PARSE_INVALID_HEADER
;

821 
r
->
övÆid_hódî
 = 1;

829 
sw_«me
:

830 
c
 = 
lowˇ£
[
ch
];

832 i‡(
c
) {

833 
hash
 = 
	`ngx_hash
(hash, 
c
);

834 
r
->
lowˇ£_hódî
[
i
++] = 
c
;

835 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

839 i‡(
ch
 == '_') {

840 i‡(
Ælow_undîsc‹es
) {

841 
hash
 = 
	`ngx_hash
(hash, 
ch
);

842 
r
->
lowˇ£_hódî
[
i
++] = 
ch
;

843 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

846 
r
->
övÆid_hódî
 = 1;

852 i‡(
ch
 == ':') {

853 
r
->
hódî_«me_íd
 = 
p
;

854 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

858 i‡(
ch
 =
CR
) {

859 
r
->
hódî_«me_íd
 = 
p
;

860 
r
->
hódî_°¨t
 = 
p
;

861 
r
->
hódî_íd
 = 
p
;

862 
°©e
 = 
sw_Æmo°_d⁄e
;

866 i‡(
ch
 =
LF
) {

867 
r
->
hódî_«me_íd
 = 
p
;

868 
r
->
hódî_°¨t
 = 
p
;

869 
r
->
hódî_íd
 = 
p
;

870 
d⁄e
;

874 i‡(
ch
 == '/'

875 && 
r
->
up°ªam


876 && 
p
 - 
r
->
hódî_«me_°¨t
 == 4

877 && 
	`ngx_°∫cmp
(
r
->
hódî_«me_°¨t
, "HTTP", 4) == 0)

879 
°©e
 = 
sw_ign‹e_löe
;

883 i‡(
ch
 == '\0') {

884  
NGX_HTTP_PARSE_INVALID_HEADER
;

887 
r
->
övÆid_hódî
 = 1;

892 
sw_•a˚_bef‹e_vÆue
:

893 
ch
) {

896 
CR
:

897 
r
->
hódî_°¨t
 = 
p
;

898 
r
->
hódî_íd
 = 
p
;

899 
°©e
 = 
sw_Æmo°_d⁄e
;

901 
LF
:

902 
r
->
hódî_°¨t
 = 
p
;

903 
r
->
hódî_íd
 = 
p
;

904 
d⁄e
;

906  
NGX_HTTP_PARSE_INVALID_HEADER
;

908 
r
->
hódî_°¨t
 = 
p
;

909 
°©e
 = 
sw_vÆue
;

915 
sw_vÆue
:

916 
ch
) {

918 
r
->
hódî_íd
 = 
p
;

919 
°©e
 = 
sw_•a˚_a·î_vÆue
;

921 
CR
:

922 
r
->
hódî_íd
 = 
p
;

923 
°©e
 = 
sw_Æmo°_d⁄e
;

925 
LF
:

926 
r
->
hódî_íd
 = 
p
;

927 
d⁄e
;

929  
NGX_HTTP_PARSE_INVALID_HEADER
;

934 
sw_•a˚_a·î_vÆue
:

935 
ch
) {

938 
CR
:

939 
°©e
 = 
sw_Æmo°_d⁄e
;

941 
LF
:

942 
d⁄e
;

944  
NGX_HTTP_PARSE_INVALID_HEADER
;

946 
°©e
 = 
sw_vÆue
;

952 
sw_ign‹e_löe
:

953 
ch
) {

954 
LF
:

955 
°©e
 = 
sw_°¨t
;

963 
sw_Æmo°_d⁄e
:

964 
ch
) {

965 
LF
:

966 
d⁄e
;

967 
CR
:

970  
NGX_HTTP_PARSE_INVALID_HEADER
;

975 
sw_hódî_Æmo°_d⁄e
:

976 
ch
) {

977 
LF
:

978 
hódî_d⁄e
;

980  
NGX_HTTP_PARSE_INVALID_HEADER
;

985 
b
->
pos
 = 
p
;

986 
r
->
°©e
 = state;

987 
r
->
hódî_hash
 = 
hash
;

988 
r
->
lowˇ£_ödex
 = 
i
;

990  
NGX_AGAIN
;

992 
d⁄e
:

994 
b
->
pos
 = 
p
 + 1;

995 
r
->
°©e
 = 
sw_°¨t
;

996 
r
->
hódî_hash
 = 
hash
;

997 
r
->
lowˇ£_ödex
 = 
i
;

999  
NGX_OK
;

1001 
hódî_d⁄e
:

1003 
b
->
pos
 = 
p
 + 1;

1004 
r
->
°©e
 = 
sw_°¨t
;

1006  
NGX_HTTP_PARSE_HEADER_DONE
;

1007 
	}
}

1010 
ngx_öt_t


1011 
	$ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
mîge_¶ashes
)

1013 
u_ch¨
 
c
, 
ch
, 
decoded
, *
p
, *
u
;

1015 
sw_usuÆ
 = 0,

1016 
sw_¶ash
,

1017 
sw_dŸ
,

1018 
sw_dŸ_dŸ
,

1019 
sw_quŸed
,

1020 
sw_quŸed_£c⁄d


1021 } 
°©e
, 
quŸed_°©e
;

1023 #i‡(
NGX_SUPPRESS_WARN
)

1024 
decoded
 = '\0';

1025 
quŸed_°©e
 = 
sw_usuÆ
;

1028 
°©e
 = 
sw_usuÆ
;

1029 
p
 = 
r
->
uri_°¨t
;

1030 
u
 = 
r
->
uri
.
d©a
;

1031 
r
->
uri_ext
 = 
NULL
;

1032 
r
->
¨gs_°¨t
 = 
NULL
;

1034 
ch
 = *
p
++;

1036 
p
 <
r
->
uri_íd
) {

1044 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1045 "s:%d in:'%Xd:%c', out:'%c'", 
°©e
, 
ch
, ch, *
u
);

1047 
°©e
) {

1049 
sw_usuÆ
:

1051 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1052 *
u
++ = 
ch
;

1053 
ch
 = *
p
++;

1057 
ch
) {

1058 #i‡(
NGX_WIN32
)

1060 
r
->
uri_ext
 = 
NULL
;

1062 i‡(
p
 =
r
->
uri_°¨t
 +Ñ->
uri
.
Àn
) {

1072 
°©e
 = 
sw_¶ash
;

1073 *
u
++ = '/';

1077 
r
->
uri_ext
 = 
NULL
;

1078 
°©e
 = 
sw_¶ash
;

1079 *
u
++ = 
ch
;

1082 
quŸed_°©e
 = 
°©e
;

1083 
°©e
 = 
sw_quŸed
;

1086 
r
->
¨gs_°¨t
 = 
p
;

1087 
¨gs
;

1089 
d⁄e
;

1091 
r
->
uri_ext
 = 
u
 + 1;

1092 *
u
++ = 
ch
;

1095 
r
->
∂us_ö_uri
 = 1;

1097 *
u
++ = 
ch
;

1101 
ch
 = *
p
++;

1104 
sw_¶ash
:

1106 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1107 
°©e
 = 
sw_usuÆ
;

1108 *
u
++ = 
ch
;

1109 
ch
 = *
p
++;

1113 
ch
) {

1114 #i‡(
NGX_WIN32
)

1119 i‡(!
mîge_¶ashes
) {

1120 *
u
++ = 
ch
;

1124 
°©e
 = 
sw_dŸ
;

1125 *
u
++ = 
ch
;

1128 
quŸed_°©e
 = 
°©e
;

1129 
°©e
 = 
sw_quŸed
;

1132 
r
->
¨gs_°¨t
 = 
p
;

1133 
¨gs
;

1135 
d⁄e
;

1137 
r
->
∂us_ö_uri
 = 1;

1139 
°©e
 = 
sw_usuÆ
;

1140 *
u
++ = 
ch
;

1144 
ch
 = *
p
++;

1147 
sw_dŸ
:

1149 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1150 
°©e
 = 
sw_usuÆ
;

1151 *
u
++ = 
ch
;

1152 
ch
 = *
p
++;

1156 
ch
) {

1157 #i‡(
NGX_WIN32
)

1161 
°©e
 = 
sw_¶ash
;

1162 
u
--;

1165 
°©e
 = 
sw_dŸ_dŸ
;

1166 *
u
++ = 
ch
;

1169 
quŸed_°©e
 = 
°©e
;

1170 
°©e
 = 
sw_quŸed
;

1173 
r
->
¨gs_°¨t
 = 
p
;

1174 
¨gs
;

1176 
d⁄e
;

1178 
r
->
∂us_ö_uri
 = 1;

1180 
°©e
 = 
sw_usuÆ
;

1181 *
u
++ = 
ch
;

1185 
ch
 = *
p
++;

1188 
sw_dŸ_dŸ
:

1190 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1191 
°©e
 = 
sw_usuÆ
;

1192 *
u
++ = 
ch
;

1193 
ch
 = *
p
++;

1197 
ch
) {

1198 #i‡(
NGX_WIN32
)

1202 
°©e
 = 
sw_¶ash
;

1203 
u
 -= 5;

1205 i‡(
u
 < 
r
->
uri
.
d©a
) {

1206  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1208 i‡(*
u
 == '/') {

1209 
u
++;

1212 
u
--;

1216 
quŸed_°©e
 = 
°©e
;

1217 
°©e
 = 
sw_quŸed
;

1220 
r
->
¨gs_°¨t
 = 
p
;

1221 
¨gs
;

1223 
d⁄e
;

1225 
r
->
∂us_ö_uri
 = 1;

1227 
°©e
 = 
sw_usuÆ
;

1228 *
u
++ = 
ch
;

1232 
ch
 = *
p
++;

1235 
sw_quŸed
:

1236 
r
->
quŸed_uri
 = 1;

1238 i‡(
ch
 >= '0' && ch <= '9') {

1239 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1240 
°©e
 = 
sw_quŸed_£c⁄d
;

1241 
ch
 = *
p
++;

1245 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1246 i‡(
c
 >= 'a' && c <= 'f') {

1247 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1248 
°©e
 = 
sw_quŸed_£c⁄d
;

1249 
ch
 = *
p
++;

1253  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1255 
sw_quŸed_£c⁄d
:

1256 i‡(
ch
 >= '0' && ch <= '9') {

1257 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1259 i‡(
ch
 == '%' || ch == '#') {

1260 
°©e
 = 
sw_usuÆ
;

1261 *
u
++ = 
ch
;

1262 
ch
 = *
p
++;

1265 } i‡(
ch
 == '\0') {

1266  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1269 
°©e
 = 
quŸed_°©e
;

1273 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1274 i‡(
c
 >= 'a' && c <= 'f') {

1275 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1277 i‡(
ch
 == '?') {

1278 
°©e
 = 
sw_usuÆ
;

1279 *
u
++ = 
ch
;

1280 
ch
 = *
p
++;

1283 } i‡(
ch
 == '+') {

1284 
r
->
∂us_ö_uri
 = 1;

1287 
°©e
 = 
quŸed_°©e
;

1291  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1295 
d⁄e
:

1297 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1299 i‡(
r
->
uri_ext
) {

1300 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1301 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1304 
r
->
uri_ext
 = 
NULL
;

1306  
NGX_OK
;

1308 
¨gs
:

1310 
p
 < 
r
->
uri_íd
) {

1311 i‡(*
p
++ != '#') {

1315 
r
->
¨gs
.
Àn
 = 
p
 - 1 -Ñ->
¨gs_°¨t
;

1316 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1317 
r
->
¨gs_°¨t
 = 
NULL
;

1322 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1324 i‡(
r
->
uri_ext
) {

1325 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1326 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1329 
r
->
uri_ext
 = 
NULL
;

1331  
NGX_OK
;

1332 
	}
}

1335 
ngx_öt_t


1336 
	$ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

1337 
ngx_hâp_°©us_t
 *
°©us
)

1339 
u_ch¨
 
ch
;

1340 
u_ch¨
 *
p
;

1342 
sw_°¨t
 = 0,

1343 
sw_H
,

1344 
sw_HT
,

1345 
sw_HTT
,

1346 
sw_HTTP
,

1347 
sw_fú°_maj‹_digô
,

1348 
sw_maj‹_digô
,

1349 
sw_fú°_mö‹_digô
,

1350 
sw_mö‹_digô
,

1351 
sw_°©us
,

1352 
sw_•a˚_a·î_°©us
,

1353 
sw_°©us_ãxt
,

1354 
sw_Æmo°_d⁄e


1355 } 
°©e
;

1357 
°©e
 = 
r
->state;

1359 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1360 
ch
 = *
p
;

1362 
°©e
) {

1365 
sw_°¨t
:

1366 
ch
) {

1368 
°©e
 = 
sw_H
;

1371  
NGX_ERROR
;

1375 
sw_H
:

1376 
ch
) {

1378 
°©e
 = 
sw_HT
;

1381  
NGX_ERROR
;

1385 
sw_HT
:

1386 
ch
) {

1388 
°©e
 = 
sw_HTT
;

1391  
NGX_ERROR
;

1395 
sw_HTT
:

1396 
ch
) {

1398 
°©e
 = 
sw_HTTP
;

1401  
NGX_ERROR
;

1405 
sw_HTTP
:

1406 
ch
) {

1408 
°©e
 = 
sw_fú°_maj‹_digô
;

1411  
NGX_ERROR
;

1416 
sw_fú°_maj‹_digô
:

1417 i‡(
ch
 < '1' || ch > '9') {

1418  
NGX_ERROR
;

1421 
°©e
 = 
sw_maj‹_digô
;

1425 
sw_maj‹_digô
:

1426 i‡(
ch
 == '.') {

1427 
°©e
 = 
sw_fú°_mö‹_digô
;

1431 i‡(
ch
 < '0' || ch > '9') {

1432  
NGX_ERROR
;

1438 
sw_fú°_mö‹_digô
:

1439 i‡(
ch
 < '0' || ch > '9') {

1440  
NGX_ERROR
;

1443 
°©e
 = 
sw_mö‹_digô
;

1447 
sw_mö‹_digô
:

1448 i‡(
ch
 == ' ') {

1449 
°©e
 = 
sw_°©us
;

1453 i‡(
ch
 < '0' || ch > '9') {

1454  
NGX_ERROR
;

1460 
sw_°©us
:

1461 i‡(
ch
 == ' ') {

1465 i‡(
ch
 < '0' || ch > '9') {

1466  
NGX_ERROR
;

1469 
°©us
->
code
 = sètus->codê* 10 + 
ch
 - '0';

1471 i‡(++
°©us
->
cou¡
 == 3) {

1472 
°©e
 = 
sw_•a˚_a·î_°©us
;

1473 
°©us
->
°¨t
 = 
p
 - 2;

1479 
sw_•a˚_a·î_°©us
:

1480 
ch
) {

1482 
°©e
 = 
sw_°©us_ãxt
;

1485 
°©e
 = 
sw_°©us_ãxt
;

1487 
CR
:

1488 
°©e
 = 
sw_Æmo°_d⁄e
;

1490 
LF
:

1491 
d⁄e
;

1493  
NGX_ERROR
;

1498 
sw_°©us_ãxt
:

1499 
ch
) {

1500 
CR
:

1501 
°©e
 = 
sw_Æmo°_d⁄e
;

1504 
LF
:

1505 
d⁄e
;

1510 
sw_Æmo°_d⁄e
:

1511 
°©us
->
íd
 = 
p
 - 1;

1512 
ch
) {

1513 
LF
:

1514 
d⁄e
;

1516  
NGX_ERROR
;

1521 
b
->
pos
 = 
p
;

1522 
r
->
°©e
 = state;

1524  
NGX_AGAIN
;

1526 
d⁄e
:

1528 
b
->
pos
 = 
p
 + 1;

1530 i‡(
°©us
->
íd
 =
NULL
) {

1531 
°©us
->
íd
 = 
p
;

1534 
r
->
°©e
 = 
sw_°¨t
;

1536  
NGX_OK
;

1537 
	}
}

1540 
ngx_öt_t


1541 
	$ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

1542 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
)

1544 
u_ch¨
 
ch
, *
p
;

1545 
size_t
 
Àn
;

1547 
Àn
 = 
uri
->len;

1548 
p
 = 
uri
->
d©a
;

1550 i‡(
Àn
 =0 || 
p
[0] == '?') {

1551 
unß„
;

1554 i‡(
p
[0] ='.' && 
Àn
 =3 &&Ö[1] ='.' && (
	`ngx_∑th_£∑øt‹
(p[2]))) {

1555 
unß„
;

1558  ; 
Àn
;Üen--) {

1560 
ch
 = *
p
++;

1562 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1566 i‡(
ch
 == '?') {

1567 
¨gs
->
Àn
 =Üen - 1;

1568 
¨gs
->
d©a
 = 
p
;

1569 
uri
->
Àn
 -=Üen;

1571  
NGX_OK
;

1574 i‡(
ch
 == '\0') {

1575 
unß„
;

1578 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1582 i‡(
p
[0] ='.' &&Ö[1] ='.' && 
	`ngx_∑th_£∑øt‹
(p[2])) {

1583 
unß„
;

1588  
NGX_OK
;

1590 
unß„
:

1592 i‡(*
Êags
 & 
NGX_HTTP_LOG_UNSAFE
) {

1593 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1594 "unß„ URI \"%V\" wa†dëe˘ed", 
uri
);

1597  
NGX_ERROR
;

1598 
	}
}

1601 
ngx_öt_t


1602 
	$ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
«me
,

1603 
ngx_°r_t
 *
vÆue
)

1605 
ngx_uöt_t
 
i
;

1606 
u_ch¨
 *
°¨t
, *
œ°
, *
íd
, 
ch
;

1607 
ngx_èbÀ_ñt_t
 **
h
;

1609 
h
 = 
hódîs
->
ñts
;

1611 
i
 = 0; i < 
hódîs
->
√…s
; i++) {

1613 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
hódîs
->
poﬁ
->
log
, 0,

1614 "∑r£ hódî: \"%V: %V\"", &
h
[
i
]->
key
, &h[i]->
vÆue
);

1616 i‡(
«me
->
Àn
 > 
h
[
i
]->
vÆue
.len) {

1620 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

1621 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

1623 
°¨t
 < 
íd
) {

1625 i‡(
	`ngx_°∫ˇ£cmp
(
°¨t
, 
«me
->
d©a
,Çame->
Àn
) != 0) {

1626 
skù
;

1629 
°¨t
 +
«me
->
Àn
; sèπ < 
íd
 && *start == ' '; start++) {

1633 i‡(
vÆue
 =
NULL
) {

1634 i‡(
°¨t
 =
íd
 || *start == ',') {

1635  
i
;

1638 
skù
;

1641 i‡(
°¨t
 =
íd
 || *start++ != '=') {

1643 
skù
;

1646 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1648 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != ';';Üast++) {

1652 
vÆue
->
Àn
 = 
œ°
 - 
°¨t
;

1653 
vÆue
->
d©a
 = 
°¨t
;

1655  
i
;

1657 
skù
:

1659 
°¨t
 < 
íd
) {

1660 
ch
 = *
°¨t
++;

1661 i‡(
ch
 == ';' || ch == ',') {

1666 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1670  
NGX_DECLINED
;

1671 
	}
}

1674 
ngx_öt_t


1675 
	$ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
, 
ngx_°r_t
 *
vÆue
)

1677 
u_ch¨
 *
p
, *
œ°
;

1679 i‡(
r
->
¨gs
.
Àn
 == 0) {

1680  
NGX_DECLINED
;

1683 
p
 = 
r
->
¨gs
.
d©a
;

1684 
œ°
 = 
p
 + 
r
->
¨gs
.
Àn
;

1686  ; 
p
 < 
œ°
;Ö++) {

1690 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
 - 1, 
«me
, 
Àn
 - 1);

1692 i‡(
p
 =
NULL
) {

1693  
NGX_DECLINED
;

1696 i‡((
p
 =
r
->
¨gs
.
d©a
 || *’ - 1Ë='&'Ë&& *’ + 
Àn
) == '=') {

1698 
vÆue
->
d©a
 = 
p
 + 
Àn
 + 1;

1700 
p
 = 
	`ngx_°æchr
’, 
œ°
, '&');

1702 i‡(
p
 =
NULL
) {

1703 
p
 = 
r
->
¨gs
.
d©a
 +Ñ->¨gs.
Àn
;

1706 
vÆue
->
Àn
 = 
p
 - vÆue->
d©a
;

1708  
NGX_OK
;

1712  
NGX_DECLINED
;

1713 
	}
}

1717 
	$ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

1719 
u_ch¨
 *
p
, *
œ°
;

1721 
œ°
 = 
uri
->
d©a
 + uri->
Àn
;

1723 
p
 = 
	`ngx_°æchr
(
uri
->
d©a
, 
œ°
, '?');

1725 i‡(
p
) {

1726 
uri
->
Àn
 = 
p
 - uri->
d©a
;

1727 
p
++;

1728 
¨gs
->
Àn
 = 
œ°
 - 
p
;

1729 
¨gs
->
d©a
 = 
p
;

1732 
¨gs
->
Àn
 = 0;

1734 
	}
}

	@src/http/ngx_http_parse_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	gmday
[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

14 
time_t


15 
	$ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
)

17 
u_ch¨
 *
p
, *
íd
;

18 
ngx_öt_t
 
m⁄th
;

19 
ngx_uöt_t
 
day
, 
yór
, 
hour
, 
mö
, 
£c
;

20 
uöt64_t
 
time
;

22 
no
 = 0,

23 
rfc822
,

24 
rfc850
,

25 
isoc


26 } 
fmt
;

28 
fmt
 = 0;

29 
íd
 = 
vÆue
 + 
Àn
;

31 #i‡(
NGX_SUPPRESS_WARN
)

32 
day
 = 32;

33 
yór
 = 2038;

36 
p
 = 
vÆue
;Ö < 
íd
;Ö++) {

37 i‡(*
p
 == ',') {

41 i‡(*
p
 == ' ') {

42 
fmt
 = 
isoc
;

47 
p
++;Ö < 
íd
;Ö++)

48 i‡(*
p
 != ' ') {

52 i‡(
íd
 - 
p
 < 18) {

53  
NGX_ERROR
;

56 i‡(
fmt
 !
isoc
) {

57 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

58  
NGX_ERROR
;

61 
day
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

62 
p
 += 2;

64 i‡(*
p
 == ' ') {

65 i‡(
íd
 - 
p
 < 18) {

66  
NGX_ERROR
;

68 
fmt
 = 
rfc822
;

70 } i‡(*
p
 == '-') {

71 
fmt
 = 
rfc850
;

74  
NGX_ERROR
;

77 
p
++;

80 *
p
) {

83 
m⁄th
 = *(
p
 + 1) == 'a' ? 0 : *(p + 2) == 'n' ? 5 : 6;

87 
m⁄th
 = 1;

91 
m⁄th
 = *(
p
 + 2) == 'r' ? 2 : 4;

95 
m⁄th
 = *(
p
 + 1) == 'p' ? 3 : 7;

99 
m⁄th
 = 8;

103 
m⁄th
 = 9;

107 
m⁄th
 = 10;

111 
m⁄th
 = 11;

115  
NGX_ERROR
;

118 
p
 += 3;

120 i‡((
fmt
 =
rfc822
 && *
p
 !' 'Ë|| (fmà=
rfc850
 && *p != '-')) {

121  
NGX_ERROR
;

124 
p
++;

126 i‡(
fmt
 =
rfc822
) {

127 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

128 || *(
p
 + 2) < '0' || *(p + 2) > '9'

129 || *(
p
 + 3) < '0' || *(p + 3) > '9')

131  
NGX_ERROR
;

134 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

135 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

136 
p
 += 4;

138 } i‡(
fmt
 =
rfc850
) {

139 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

140  
NGX_ERROR
;

143 
yór
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

144 
yór
 += (year < 70) ? 2000 : 1900;

145 
p
 += 2;

148 i‡(
fmt
 =
isoc
) {

149 i‡(*
p
 == ' ') {

150 
p
++;

153 i‡(*
p
 < '0' || *p > '9') {

154  
NGX_ERROR
;

157 
day
 = *
p
++ - '0';

159 i‡(*
p
 != ' ') {

160 i‡(*
p
 < '0' || *p > '9') {

161  
NGX_ERROR
;

164 
day
 = day * 10 + *
p
++ - '0';

167 i‡(
íd
 - 
p
 < 14) {

168  
NGX_ERROR
;

172 i‡(*
p
++ != ' ') {

173  
NGX_ERROR
;

176 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

177  
NGX_ERROR
;

180 
hour
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

181 
p
 += 2;

183 i‡(*
p
++ != ':') {

184  
NGX_ERROR
;

187 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

188  
NGX_ERROR
;

191 
mö
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

192 
p
 += 2;

194 i‡(*
p
++ != ':') {

195  
NGX_ERROR
;

198 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

199  
NGX_ERROR
;

202 
£c
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

204 i‡(
fmt
 =
isoc
) {

205 
p
 += 2;

207 i‡(*
p
++ != ' ') {

208  
NGX_ERROR
;

211 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

212 || *(
p
 + 2) < '0' || *(p + 2) > '9'

213 || *(
p
 + 3) < '0' || *(p + 3) > '9')

215  
NGX_ERROR
;

218 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

219 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

222 i‡(
hour
 > 23 || 
mö
 > 59 || 
£c
 > 59) {

223  
NGX_ERROR
;

226 i‡(
day
 =29 && 
m⁄th
 == 1) {

227 i‡((
yór
 & 3) || ((year % 100 == 0) && (year % 400) != 0)) {

228  
NGX_ERROR
;

231 } i‡(
day
 > 
mday
[
m⁄th
]) {

232  
NGX_ERROR
;

240 i‡(--
m⁄th
 <= 0) {

241 
m⁄th
 += 12;

242 
yór
 -= 1;

247 
time
 = (
uöt64_t
) (

250 365 * 
yór
 + year / 4 - year / 100 + year / 400

254 + 367 * 
m⁄th
 / 12 - 30

258 + 
day
 - 1

265 - 719527 + 31 + 28Ë* 86400 + 
hour
 * 3600 + 
mö
 * 60 + 
£c
;

267 #i‡(
NGX_TIME_T_SIZE
 <= 4)

269 i‡(
time
 > 0x7fffffff) {

270  
NGX_ERROR
;

275  (
time_t
Ë
time
;

276 
	}
}

	@src/http/ngx_http_postpone_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_chaö_t
 *
ö
);

15 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_po°p⁄e_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL


33 
ngx_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_fûãr
;

52 
ngx_öt_t


53 
	$ngx_hâp_po°p⁄e_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

55 
ngx_c⁄√˘i⁄_t
 *
c
;

56 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
;

58 
c
 = 
r
->
c⁄√˘i⁄
;

60 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

61 "hâ∞po°p⁄êfûã∏\"%V?%V\" %p", &
r
->
uri
, &r->
¨gs
, 
ö
);

63 i‡(
r
 !
c
->
d©a
) {

65 i‡(
ö
) {

66 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

67  
NGX_OK
;

72 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

74 &
r
->
uri
, &r->
¨gs
);

77  
NGX_OK
;

80 i‡(
r
->
po°p⁄ed
 =
NULL
) {

82 i‡(
ö
 || 
c
->
buf„ªd
) {

83  
	`ngx_hâp_√xt_fûãr
(
r
->
maö
, 
ö
);

86  
NGX_OK
;

89 i‡(
ö
) {

90 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

94 
¥
 = 
r
->
po°p⁄ed
;

96 i‡(
¥
->
ªque°
) {

98 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

100 &
¥
->
ªque°
->
uri
, &¥->ªque°->
¨gs
);

102 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

104 
c
->
d©a
 = 
¥
->
ªque°
;

106  
	`ngx_hâp_po°_ªque°
(
¥
->
ªque°
, 
NULL
);

109 i‡(
¥
->
out
 =
NULL
) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

112 &
r
->
uri
, &r->
¨gs
);

115 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

117 &
r
->
uri
, &r->
¨gs
);

119 i‡(
	`ngx_hâp_√xt_fûãr
(
r
->
maö
, 
¥
->
out
Ë=
NGX_ERROR
) {

120  
NGX_ERROR
;

124 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

126 } 
r
->
po°p⁄ed
);

128  
NGX_OK
;

129 
	}
}

132 
ngx_öt_t


133 
	$ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

135 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, **
µr
;

137 i‡(
r
->
po°p⁄ed
) {

138 
¥
 = 
r
->
po°p⁄ed
;Ör->
√xt
;Ör =Ör->next) { }

140 i‡(
¥
->
ªque°
 =
NULL
) {

141 
found
;

144 
µr
 = &
¥
->
√xt
;

147 
µr
 = &
r
->
po°p⁄ed
;

150 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

151 i‡(
¥
 =
NULL
) {

152  
NGX_ERROR
;

155 *
µr
 = 
¥
;

157 
¥
->
ªque°
 = 
NULL
;

158 
¥
->
out
 = 
NULL
;

159 
¥
->
√xt
 = 
NULL
;

161 
found
:

163 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
¥
->
out
, 
ö
Ë=
NGX_OK
) {

164  
NGX_OK
;

167  
NGX_ERROR
;

168 
	}
}

171 
ngx_öt_t


172 
	$ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

174 
ngx_hâp_√xt_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

175 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_po°p⁄e_fûãr
;

177  
NGX_OK
;

178 
	}
}

	@src/http/ngx_http_request.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_öô_ªque°
(
ngx_evít_t
 *
ev
);

14 
ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
);

15 
ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
);

16 
ssize_t
 
ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_uöt_t
 
ªque°_löe
);

20 
ngx_öt_t
 
ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

22 
ngx_öt_t
 
ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

24 
ngx_öt_t
 
ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

26 
ngx_öt_t
 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

28 
ngx_öt_t
 
ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

30 
ngx_öt_t
 
ngx_hâp_¥o˚ss_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

33 
ngx_öt_t
 
ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

34 
ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

35 
ssize_t
 
ngx_hâp_vÆid©e_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 **
ho°
,

36 
size_t
 
Àn
, 
ngx_uöt_t
 
Æloc
);

37 
ngx_öt_t
 
ngx_hâp_föd_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
,

38 
u_ch¨
 *
ho°
, 
size_t
 
Àn
);

40 
ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

41 
ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

42 
ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

43 
ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_öt_t
 
ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
);

48 
ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ev
);

50 
ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
);

51 
ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

52 
ngx_öt_t
 
ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

53 
ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
);

54 
ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
);

55 
ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

56 
ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

58 
u_ch¨
 *
ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

59 
u_ch¨
 *
ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_hâp_ªque°_t
 *
§
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

62 #i‡(
NGX_HTTP_SSL
)

63 
ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
);

64 
ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

68 *
	gngx_hâp_˛õ¡_îr‹s
[] = {

81 
ngx_hâp_hódî_t
 
	gngx_hâp_hódîs_ö
[] = {

82 { 
ngx_°rög
("Ho°"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ho°
),

83 
ngx_hâp_¥o˚ss_ho°
 },

85 { 
ngx_°rög
("C⁄√˘i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄√˘i⁄
),

86 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
 },

88 { 
ngx_°rög
("If-Modified-Since"),

89 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_modifõd_sö˚
),

90 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

92 { 
ngx_°rög
("If-Unmodified-Since"),

93 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_unmodifõd_sö˚
),

94 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

96 { 
ngx_°rög
("U£r-Agít"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
u£r_agít
),

97 
ngx_hâp_¥o˚ss_u£r_agít
 },

99 { 
ngx_°rög
("Re„ªr"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ª„ªr
),

100 
ngx_hâp_¥o˚ss_hódî_löe
 },

102 { 
ngx_°rög
("Content-Length"),

103 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

104 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

106 { 
ngx_°rög
("Content-Type"),

107 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

108 
ngx_hâp_¥o˚ss_hódî_löe
 },

110 { 
ngx_°rög
("R™ge"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ønge
),

111 
ngx_hâp_¥o˚ss_hódî_löe
 },

113 { 
ngx_°rög
("If-Range"),

114 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_ønge
),

115 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

117 { 
ngx_°rög
("Transfer-Encoding"),

118 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
å™s„r_ícodög
),

119 
ngx_hâp_¥o˚ss_hódî_löe
 },

121 { 
ngx_°rög
("Expect"),

122 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ex≥˘
),

123 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

125 #i‡(
NGX_HTTP_GZIP
)

126 { 
ngx_°rög
("Accept-Encoding"),

127 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_ícodög
),

128 
ngx_hâp_¥o˚ss_hódî_löe
 },

130 { 
ngx_°rög
("Vü"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
vü
),

131 
ngx_hâp_¥o˚ss_hódî_löe
 },

134 { 
ngx_°rög
("Authorization"),

135 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
auth‹iz©i⁄
),

136 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

138 { 
ngx_°rög
("Kìp-Alive"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
kìp_Æive
),

139 
ngx_hâp_¥o˚ss_hódî_löe
 },

141 #i‡(
NGX_HTTP_PROXY
 || 
NGX_HTTP_REALIP
 || 
NGX_HTTP_GEO
)

142 { 
ngx_°rög
("X-Forwarded-For"),

143 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_f‹w¨ded_f‹
),

144 
ngx_hâp_¥o˚ss_hódî_löe
 },

147 #i‡(
NGX_HTTP_REALIP
)

148 { 
ngx_°rög
("X-Real-IP"),

149 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_ªÆ_ù
),

150 
ngx_hâp_¥o˚ss_hódî_löe
 },

153 #i‡(
NGX_HTTP_HEADERS
)

154 { 
ngx_°rög
("Ac˚±"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±
),

155 
ngx_hâp_¥o˚ss_hódî_löe
 },

157 { 
ngx_°rög
("Accept-Language"),

158 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_œnguage
),

159 
ngx_hâp_¥o˚ss_hódî_löe
 },

162 #i‡(
NGX_HTTP_DAV
)

163 { 
ngx_°rög
("Dïth"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
dïth
),

164 
ngx_hâp_¥o˚ss_hódî_löe
 },

166 { 
ngx_°rög
("De°ö©i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
de°ö©i⁄
),

167 
ngx_hâp_¥o˚ss_hódî_löe
 },

169 { 
ngx_°rög
("Ovîwrôe"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ovîwrôe
),

170 
ngx_hâp_¥o˚ss_hódî_löe
 },

172 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
d©e
),

173 
ngx_hâp_¥o˚ss_hódî_löe
 },

176 { 
ngx_°rög
("Cookõ"), 0, 
ngx_hâp_¥o˚ss_cookõ
 },

178 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

183 
	$ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

185 
ngx_evít_t
 *
ªv
;

186 
ngx_hâp_log_˘x_t
 *
˘x
;

188 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

189 i‡(
˘x
 =
NULL
) {

190 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

194 
˘x
->
c⁄√˘i⁄
 = 
c
;

195 
˘x
->
ªque°
 = 
NULL
;

196 
˘x
->
cuºít_ªque°
 = 
NULL
;

198 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

199 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

200 
c
->
log
->
d©a
 = 
˘x
;

201 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

203 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

205 
ªv
 = 
c
->
ªad
;

206 
ªv
->
h™dÀr
 = 
ngx_hâp_öô_ªque°
;

207 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

209 #i‡(
NGX_STAT_STUB
)

210 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

213 i‡(
ªv
->
ªady
) {

216 i‡(
ngx_u£_ac˚±_muãx
) {

217 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

221 
	`ngx_hâp_öô_ªque°
(
ªv
);

225 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

227 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

228 #i‡(
NGX_STAT_STUB
)

229 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

231 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

234 
	}
}

238 
	$ngx_hâp_öô_ªque°
(
ngx_evít_t
 *
ªv
)

240 
ngx_time_t
 *
ç
;

241 
ngx_uöt_t
 
i
;

242 
ngx_c⁄√˘i⁄_t
 *
c
;

243 
ngx_hâp_ªque°_t
 *
r
;

244 
sockaddr_ö
 *
sö
;

245 
ngx_hâp_p‹t_t
 *
p‹t
;

246 
ngx_hâp_ö_addr_t
 *
addr
;

247 
ngx_hâp_log_˘x_t
 *
˘x
;

248 
ngx_hâp_addr_c⁄f_t
 *
addr_c⁄f
;

249 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

250 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

251 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

252 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

253 #i‡(
NGX_HAVE_INET6
)

254 
sockaddr_ö6
 *
sö6
;

255 
ngx_hâp_ö6_addr_t
 *
addr6
;

258 #i‡(
NGX_STAT_STUB
)

259 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

262 
c
 = 
ªv
->
d©a
;

264 i‡(
ªv
->
timedout
) {

265 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

267 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

271 
c
->
ªque°s
++;

273 
hc
 = 
c
->
d©a
;

275 i‡(
hc
 =
NULL
) {

276 
hc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_c⁄√˘i⁄_t
));

277 i‡(
hc
 =
NULL
) {

278 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

283 
r
 = 
hc
->
ªque°
;

285 i‡(
r
) {

286 
	`ngx_memzîo
(
r
, (
ngx_hâp_ªque°_t
));

288 
r
->
pùñöe
 = 
hc
->pipeline;

290 i‡(
hc
->
nbusy
) {

291 
r
->
hódî_ö
 = 
hc
->
busy
[0];

295 
r
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_ªque°_t
));

296 i‡(
r
 =
NULL
) {

297 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

301 
hc
->
ªque°
 = 
r
;

304 
c
->
d©a
 = 
r
;

305 
r
->
hâp_c⁄√˘i⁄
 = 
hc
;

307 
c
->
£¡
 = 0;

308 
r
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

312 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

314 
r
->
c⁄√˘i⁄
 = 
c
;

316 i‡(
p‹t
->
«ddrs
 > 1) {

324 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

325 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

329 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

331 #i‡(
NGX_HAVE_INET6
)

332 
AF_INET6
:

333 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

335 
addr6
 = 
p‹t
->
addrs
;

339 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

340 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

345 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

351 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

353 
addr
 = 
p‹t
->
addrs
;

357 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

358 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

363 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

370 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

372 #i‡(
NGX_HAVE_INET6
)

373 
AF_INET6
:

374 
addr6
 = 
p‹t
->
addrs
;

375 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

380 
addr
 = 
p‹t
->
addrs
;

381 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

386 
r
->
vútuÆ_«mes
 = 
addr_c⁄f
->virtual_names;

389 
cscf
 = 
addr_c⁄f
->
deÁu…_£rvî
;

391 
r
->
maö_c⁄f
 = 
cscf
->
˘x
->main_conf;

392 
r
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

393 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

395 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

396 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

398 #i‡(
NGX_HTTP_SSL
)

401 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

403 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

404 i‡(
sscf
->
íabÀ
 || 
addr_c⁄f
->
s¶
) {

406 i‡(
c
->
s¶
 =
NULL
) {

408 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

410 i‡(
addr_c⁄f
->
s¶
 && 
sscf
->s¶.
˘x
 =
NULL
) {

411 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

414 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

418 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(&
sscf
->
s¶
, 
c
, 
NGX_SSL_BUFFER
)

419 !
NGX_OK
)

421 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

425 
ªv
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake
;

428 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

434 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

435 
c
->
log
->
fûe
 = 
˛cf
->
îr‹_log
->file;

436 i‡(!(
c
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

437 
c
->
log
->
log_Àvñ
 = 
˛cf
->
îr‹_log
->log_level;

440 i‡(
c
->
buf„r
 =
NULL
) {

441 
c
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(c->
poﬁ
,

442 
cscf
->
˛õ¡_hódî_buf„r_size
);

443 i‡(
c
->
buf„r
 =
NULL
) {

444 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

449 i‡(
r
->
hódî_ö
 =
NULL
) {

450 
r
->
hódî_ö
 = 
c
->
buf„r
;

453 
r
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
cscf
->
ªque°_poﬁ_size
, 
c
->
log
);

454 i‡(
r
->
poﬁ
 =
NULL
) {

455 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

460 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_out
.
hódîs
,Ñ->
poﬁ
, 20,

461 (
ngx_èbÀ_ñt_t
))

462 !
NGX_OK
)

464 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

465 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

469 
r
->
˘x
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

470 i‡(
r
->
˘x
 =
NULL
) {

471 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

472 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

476 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

478 
r
->
v¨übÀs
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, 
cmcf
->v¨übÀs.
√…s


479 * (
ngx_hâp_v¨übÀ_vÆue_t
));

480 i‡(
r
->
v¨übÀs
 =
NULL
) {

481 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

482 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

486 
c
->
sögÀ_c⁄√˘i⁄
 = 1;

487 
c
->
de°royed
 = 0;

489 
r
->
maö
 =Ñ;

490 
r
->
cou¡
 = 1;

492 
ç
 = 
	`ngx_timeofday
();

493 
r
->
°¨t_£c
 = 
ç
->
£c
;

494 
r
->
°¨t_m£c
 = 
ç
->
m£c
;

496 
r
->
mëhod
 = 
NGX_HTTP_UNKNOWN
;

498 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

499 
r
->
hódîs_ö
.
kìp_Æive_n
 = -1;

500 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

501 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

503 
r
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

504 
r
->
subªque°s
 = 
NGX_HTTP_MAX_SUBREQUESTS
 + 1;

506 
r
->
hâp_°©e
 = 
NGX_HTTP_READING_REQUEST_STATE
;

508 
˘x
 = 
c
->
log
->
d©a
;

509 
˘x
->
ªque°
 = 
r
;

510 
˘x
->
cuºít_ªque°
 = 
r
;

511 
r
->
log_h™dÀr
 = 
ngx_hâp_log_îr‹_h™dÀr
;

513 #i‡(
NGX_STAT_STUB
)

514 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

515 
r
->
°©_ªadög
 = 1;

516 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªque°s
, 1);

519 
ªv
->
	`h™dÀr
(rev);

520 
	}
}

523 #i‡(
NGX_HTTP_SSL
)

526 
	$ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
)

528 
u_ch¨
 
buf
[1];

529 
ssize_t
 
n
;

530 
ngx_öt_t
 
rc
;

531 
ngx_c⁄√˘i⁄_t
 *
c
;

532 
ngx_hâp_ªque°_t
 *
r
;

534 
c
 = 
ªv
->
d©a
;

535 
r
 = 
c
->
d©a
;

537 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

540 i‡(
ªv
->
timedout
) {

541 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

542 
c
->
timedout
 = 1;

543 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

547 
n
 = 
	`ªcv
(
c
->
fd
, (*Ë
buf
, 1, 
MSG_PEEK
);

549 i‡(
n
 =-1 && 
ngx_sockë_î∫o
 =
NGX_EAGAIN
) {

551 i‡(!
ªv
->
timî_£t
) {

552 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

555 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

556 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

562 i‡(
n
 == 1) {

563 i‡(
buf
[0] & 0x80 || buf[0] == 0x16 ) {

564 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

565 "hâp†s¶ h™dshake: 0x%02Xd", 
buf
[0]);

567 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

569 i‡(
rc
 =
NGX_AGAIN
) {

571 i‡(!
ªv
->
timî_£t
) {

572 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

575 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake_h™dÀr
;

579 
	`ngx_hâp_s¶_h™dshake_h™dÀr
(
c
);

584 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

587 
r
->
∂aö_hâp
 = 1;

591 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

593 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

594 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

595 
	}
}

599 
	$ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

601 
ngx_hâp_ªque°_t
 *
r
;

603 i‡(
c
->
s¶
->
h™dshaked
) {

613 
c
->
s¶
->
no_waô_shutdown
 = 1;

615 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

616  
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

618 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
c
->
ªad
);

623 
r
 = 
c
->
d©a
;

625 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

628 
	}
}

630 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


633 
	$ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
)

635 
size_t
 
Àn
;

636 
u_ch¨
 *
ho°
;

637 c⁄° *
£rvî«me
;

638 
ngx_c⁄√˘i⁄_t
 *
c
;

639 
ngx_hâp_ªque°_t
 *
r
;

640 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

642 
£rvî«me
 = 
	`SSL_gë_£rvî«me
(
s¶_c⁄n
, 
TLSEXT_NAMETYPE_ho°_«me
);

644 i‡(
£rvî«me
 =
NULL
) {

645  
SSL_TLSEXT_ERR_NOACK
;

648 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

650 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

651 "SSL sîvîÇame: \"%s\"", 
£rvî«me
);

653 
Àn
 = 
	`ngx_°æí
(
£rvî«me
);

655 i‡(
Àn
 == 0) {

656  
SSL_TLSEXT_ERR_NOACK
;

659 
r
 = 
c
->
d©a
;

661 
ho°
 = (
u_ch¨
 *Ë
£rvî«me
;

663 
Àn
 = 
	`ngx_hâp_vÆid©e_ho°
(
r
, &
ho°
,Üen, 1);

665 i‡(
Àn
 <= 0) {

666  
SSL_TLSEXT_ERR_NOACK
;

669 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
, 
ho°
, 
Àn
Ë!
NGX_OK
) {

670  
SSL_TLSEXT_ERR_NOACK
;

673 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

675 i‡(
sscf
->
s¶
.
˘x
) {

676 
	`SSL_£t_SSL_CTX
(
s¶_c⁄n
, 
sscf
->
s¶
.
˘x
);

683 
	`SSL_£t_vîify
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_mode
(
sscf
->
s¶
.
˘x
),

684 
	`SSL_CTX_gë_vîify_ˇŒback
(
sscf
->
s¶
.
˘x
));

686 
	`SSL_£t_vîify_dïth
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_dïth
(
sscf
->
s¶
.
˘x
));

688 #ifde‡
SSL_CTRL_CLEAR_OPTIONS


690 
	`SSL_˛ór_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_gë_›ti⁄s
(ssl_conn) &

691 ~
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

694 
	`SSL_£t_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

697  
SSL_TLSEXT_ERR_OK
;

698 
	}
}

706 
	$ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
)

708 
u_ch¨
 *
ho°
;

709 
ssize_t
 
n
;

710 
ngx_öt_t
 
rc
, 
rv
;

711 
ngx_c⁄√˘i⁄_t
 *
c
;

712 
ngx_hâp_ªque°_t
 *
r
;

713 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

715 
c
 = 
ªv
->
d©a
;

716 
r
 = 
c
->
d©a
;

718 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

721 i‡(
ªv
->
timedout
) {

722 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

723 
c
->
timedout
 = 1;

724 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

728 
rc
 = 
NGX_AGAIN
;

732 i‡(
rc
 =
NGX_AGAIN
) {

733 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

735 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

740 
rc
 = 
	`ngx_hâp_∑r£_ªque°_löe
(
r
,Ñ->
hódî_ö
);

742 i‡(
rc
 =
NGX_OK
) {

746 
r
->
ªque°_löe
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->
ªque°_°¨t
;

747 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

750 i‡(
r
->
¨gs_°¨t
) {

751 
r
->
uri
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_°¨t
;

753 
r
->
uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

757 i‡(
r
->
com∂ex_uri
 ||Ñ->
quŸed_uri
) {

759 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
 + 1);

760 i‡(
r
->
uri
.
d©a
 =
NULL
) {

761 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

765 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

767 
rc
 = 
	`ngx_hâp_∑r£_com∂ex_uri
(
r
, 
cscf
->
mîge_¶ashes
);

769 i‡(
rc
 =
NGX_HTTP_PARSE_INVALID_REQUEST
) {

770 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

772 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

777 
r
->
uri
.
d©a
 =Ñ->
uri_°¨t
;

781 
r
->
u≈¨£d_uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

782 
r
->
u≈¨£d_uri
.
d©a
 =Ñ->
uri_°¨t
;

784 
r
->
vÆid_u≈¨£d_uri
 =Ñ->
•a˚_ö_uri
 ? 0 : 1;

786 
r
->
mëhod_«me
.
Àn
 =Ñ->
mëhod_íd
 -Ñ->
ªque°_°¨t
 + 1;

787 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

790 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

791 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->hâp_¥Ÿocﬁ.
d©a
;

795 i‡(
r
->
uri_ext
) {

796 i‡(
r
->
¨gs_°¨t
) {

797 
r
->
exãn
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_ext
;

799 
r
->
exãn
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_ext
;

802 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

806 i‡(
r
->
¨gs_°¨t
 &&Ñ->
uri_íd
 >Ñ->args_start) {

807 
r
->
¨gs
.
Àn
 =Ñ->
uri_íd
 -Ñ->
¨gs_°¨t
;

808 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

811 #i‡(
NGX_WIN32
)

813 
u_ch¨
 *
p
;

815 
p
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1;

817 
p
 > 
r
->
uri
.
d©a
) {

819 i‡(*
p
 == ' ') {

820 
p
--;

824 i‡(*
p
 == '.') {

825 
p
--;

829 i‡(
	`ngx_°∫ˇ£cmp
(
p
 - 6, (
u_ch¨
 *) "::$data", 7) == 0) {

830 
p
 -= 7;

837 i‡(
p
 !
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1) {

838 
r
->
uri
.
Àn
 = 
p
 + 1 -Ñ->uri.
d©a
;

839 
	`ngx_hâp_£t_exãn
(
r
);

845 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

846 "hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

848 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

849 "hâ∞uri: \"%V\"", &
r
->
uri
);

851 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

852 "hâ∞¨gs: \"%V\"", &
r
->
¨gs
);

854 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

855 "hâ∞exãn: \"%V\"", &
r
->
exãn
);

857 i‡(
r
->
ho°_°¨t
 &&Ñ->
ho°_íd
) {

859 
ho°
 = 
r
->
ho°_°¨t
;

860 
n
 = 
	`ngx_hâp_vÆid©e_ho°
(
r
, &
ho°
,

861 
r
->
ho°_íd
 -Ñ->
ho°_°¨t
, 0);

863 i‡(
n
 == 0) {

864 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

866 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

870 i‡(
n
 < 0) {

871 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

875 
r
->
hódîs_ö
.
£rvî
.
Àn
 = 
n
;

876 
r
->
hódîs_ö
.
£rvî
.
d©a
 = 
ho°
;

879 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

881 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
,Ñ->
hódîs_ö
.
£rvî
.
d©a
,

882 
r
->
hódîs_ö
.
£rvî
.
Àn
)

883 =
NGX_ERROR
)

885 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

889 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

894 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

895 (
ngx_èbÀ_ñt_t
))

896 !
NGX_OK
)

898 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

903 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_ö
.
cookõs
,Ñ->
poﬁ
, 2,

904 (
ngx_èbÀ_ñt_t
 *))

905 !
NGX_OK
)

907 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

911 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

913 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_hódîs
;

914 
	`ngx_hâp_¥o˚ss_ªque°_hódîs
(
ªv
);

919 i‡(
rc
 !
NGX_AGAIN
) {

923 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

924 
ngx_hâp_˛õ¡_îr‹s
[
rc
 - 
NGX_HTTP_CLIENT_ERROR
]);

925 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

931 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

933 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 1);

935 i‡(
rv
 =
NGX_ERROR
) {

936 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

940 i‡(
rv
 =
NGX_DECLINED
) {

941 
r
->
ªque°_löe
.
Àn
 =Ñ->
hódî_ö
->
íd
 -Ñ->
ªque°_°¨t
;

942 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

944 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

946 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_URI_TOO_LARGE
);

951 
	}
}

955 
	$ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
)

957 
u_ch¨
 *
p
;

958 
size_t
 
Àn
;

959 
ssize_t
 
n
;

960 
ngx_öt_t
 
rc
, 
rv
;

961 
ngx_èbÀ_ñt_t
 *
h
;

962 
ngx_c⁄√˘i⁄_t
 *
c
;

963 
ngx_hâp_hódî_t
 *
hh
;

964 
ngx_hâp_ªque°_t
 *
r
;

965 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

966 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

968 
c
 = 
ªv
->
d©a
;

969 
r
 = 
c
->
d©a
;

971 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

974 i‡(
ªv
->
timedout
) {

975 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

976 
c
->
timedout
 = 1;

977 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

981 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

982 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

984 
rc
 = 
NGX_AGAIN
;

988 i‡(
rc
 =
NGX_AGAIN
) {

990 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

992 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 0);

994 i‡(
rv
 =
NGX_ERROR
) {

995 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

999 i‡(
rv
 =
NGX_DECLINED
) {

1000 
p
 = 
r
->
hódî_«me_°¨t
;

1002 
r
->
lögîög_˛o£
 = 1;

1004 i‡(
p
 =
NULL
) {

1005 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1007 
	`ngx_hâp_föÆize_ªque°
(
r
,

1008 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1012 
Àn
 = 
r
->
hódî_ö
->
íd
 - 
p
;

1014 i‡(
Àn
 > 
NGX_MAX_ERROR_STR
 - 300) {

1015 
Àn
 = 
NGX_MAX_ERROR_STR
 - 300;

1016 
p
[
Àn
++] = '.';Ö[len++] = '.';Ö[len++] = '.';

1019 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1021 
Àn
, 
r
->
hódî_«me_°¨t
);

1023 
	`ngx_hâp_föÆize_ªque°
(
r
,

1024 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1029 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

1031 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

1036 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
,Ñ->
hódî_ö
,

1037 
cscf
->
undîsc‹es_ö_hódîs
);

1039 i‡(
rc
 =
NGX_OK
) {

1041 i‡(
r
->
övÆid_hódî
 && 
cscf
->
ign‹e_övÆid_hódîs
) {

1045 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1047 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1048 
r
->
hódî_«me_°¨t
);

1054 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

1055 i‡(
h
 =
NULL
) {

1056 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1060 
h
->
hash
 = 
r
->
hódî_hash
;

1062 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1063 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1064 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1066 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1067 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1068 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1070 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1071 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1072 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1076 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1077 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1080 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1083 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
->
hash
,

1084 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1086 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1090 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1092 &
h
->
key
, &h->
vÆue
);

1097 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1101 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1104 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->hódî_ö->
°¨t
;

1106 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

1108 
rc
 = 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
);

1110 i‡(
rc
 !
NGX_OK
) {

1114 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1119 i‡(
rc
 =
NGX_AGAIN
) {

1128 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1130 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1131 
r
->
hódî_«me_°¨t
);

1132 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1135 
	}
}

1138 
ssize_t


1139 
	$ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1141 
ssize_t
 
n
;

1142 
ngx_evít_t
 *
ªv
;

1143 
ngx_c⁄√˘i⁄_t
 *
c
;

1144 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1146 
c
 = 
r
->
c⁄√˘i⁄
;

1147 
ªv
 = 
c
->
ªad
;

1149 
n
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

1151 i‡(
n
 > 0) {

1152  
n
;

1155 i‡(
ªv
->
ªady
) {

1156 
n
 = 
c
->
	`ªcv
(c, 
r
->
hódî_ö
->
œ°
,

1157 
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
);

1159 
n
 = 
NGX_AGAIN
;

1162 i‡(
n
 =
NGX_AGAIN
) {

1163 i‡(!
ªv
->
timî_£t
) {

1164 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1165 
	`ngx_add_timî
(
ªv
, 
cscf
->
˛õ¡_hódî_timeout
);

1168 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1169 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1170  
NGX_ERROR
;

1173  
NGX_AGAIN
;

1176 i‡(
n
 == 0) {

1177 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1181 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1182 
c
->
îr‹
 = 1;

1183 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1185 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1186  
NGX_ERROR
;

1189 
r
->
hódî_ö
->
œ°
 +
n
;

1191  
n
;

1192 
	}
}

1195 
ngx_öt_t


1196 
	$ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

1197 
ngx_uöt_t
 
ªque°_löe
)

1199 
u_ch¨
 *
ﬁd
, *
√w
;

1200 
ngx_buf_t
 *
b
;

1201 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

1202 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1204 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1207 i‡(
ªque°_löe
 && 
r
->
°©e
 == 0) {

1211 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
íd
 -Ñ->hódî_ö->
°¨t
;

1213 
r
->
hódî_ö
->
pos
 =Ñ->hódî_ö->
°¨t
;

1214 
r
->
hódî_ö
->
œ°
 =Ñ->hódî_ö->
°¨t
;

1216  
NGX_OK
;

1219 
ﬁd
 = 
ªque°_löe
 ? 
r
->
ªque°_°¨t
 :Ñ->
hódî_«me_°¨t
;

1221 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1223 i‡(
r
->
°©e
 != 0

1224 && (
size_t
Ë(
r
->
hódî_ö
->
pos
 - 
ﬁd
)

1225 >
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
)

1227  
NGX_DECLINED
;

1230 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

1232 i‡(
hc
->
n‰ì
) {

1233 
b
 = 
hc
->
‰ì
[--hc->
n‰ì
];

1235 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1237 
b
->
pos
, b->
íd
 - b->
œ°
);

1239 } i‡(
hc
->
nbusy
 < 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
) {

1241 i‡(
hc
->
busy
 =
NULL
) {

1242 
hc
->
busy
 = 
	`ngx_∑Œoc
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1243 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

1244 i‡(
hc
->
busy
 =
NULL
) {

1245  
NGX_ERROR
;

1249 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1250 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

1251 i‡(
b
 =
NULL
) {

1252  
NGX_ERROR
;

1255 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1257 
b
->
pos
, b->
íd
 - b->
œ°
);

1260  
NGX_DECLINED
;

1263 
hc
->
busy
[hc->
nbusy
++] = 
b
;

1265 i‡(
r
->
°©e
 == 0) {

1272 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
íd
 -Ñ->hódî_ö->
°¨t
;

1274 
r
->
hódî_ö
 = 
b
;

1276  
NGX_OK
;

1279 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1280 "hâ∞œrgêhódî c›y: %d", 
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1282 
r
->
ªque°_Àngth
 +
ﬁd
 -Ñ->
hódî_ö
->
°¨t
;

1284 
√w
 = 
b
->
°¨t
;

1286 
	`ngx_mem˝y
(
√w
, 
ﬁd
, 
r
->
hódî_ö
->
pos
 - old);

1288 
b
->
pos
 = 
√w
 + (
r
->
hódî_ö
->po†- 
ﬁd
);

1289 
b
->
œ°
 = 
√w
 + (
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1291 i‡(
ªque°_löe
) {

1292 
r
->
ªque°_°¨t
 = 
√w
;

1294 i‡(
r
->
ªque°_íd
) {

1295 
r
->
ªque°_íd
 = 
√w
 + (r->ªque°_íd - 
ﬁd
);

1298 
r
->
mëhod_íd
 = 
√w
 + (r->mëhod_íd - 
ﬁd
);

1300 
r
->
uri_°¨t
 = 
√w
 + (r->uri_°¨à- 
ﬁd
);

1301 
r
->
uri_íd
 = 
√w
 + (r->uri_íd - 
ﬁd
);

1303 i‡(
r
->
schema_°¨t
) {

1304 
r
->
schema_°¨t
 = 
√w
 + (r->schema_°¨à- 
ﬁd
);

1305 
r
->
schema_íd
 = 
√w
 + (r->schema_íd - 
ﬁd
);

1308 i‡(
r
->
ho°_°¨t
) {

1309 
r
->
ho°_°¨t
 = 
√w
 + (r->ho°_°¨à- 
ﬁd
);

1310 i‡(
r
->
ho°_íd
) {

1311 
r
->
ho°_íd
 = 
√w
 + (r->ho°_íd - 
ﬁd
);

1315 i‡(
r
->
p‹t_°¨t
) {

1316 
r
->
p‹t_°¨t
 = 
√w
 + (r->p‹t_°¨à- 
ﬁd
);

1317 
r
->
p‹t_íd
 = 
√w
 + (r->p‹t_íd - 
ﬁd
);

1320 i‡(
r
->
uri_ext
) {

1321 
r
->
uri_ext
 = 
√w
 + (r->uri_exà- 
ﬁd
);

1324 i‡(
r
->
¨gs_°¨t
) {

1325 
r
->
¨gs_°¨t
 = 
√w
 + (r->¨gs_°¨à- 
ﬁd
);

1328 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

1329 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
√w
 + (r->hâp_¥Ÿocﬁ.d©®- 
ﬁd
);

1333 
r
->
hódî_«me_°¨t
 = 
√w
;

1334 
r
->
hódî_«me_íd
 = 
√w
 + (r->hódî_«me_íd - 
ﬁd
);

1335 
r
->
hódî_°¨t
 = 
√w
 + (r->hódî_°¨à- 
ﬁd
);

1336 
r
->
hódî_íd
 = 
√w
 + (r->hódî_íd - 
ﬁd
);

1339 
r
->
hódî_ö
 = 
b
;

1341  
NGX_OK
;

1342 
	}
}

1345 
ngx_öt_t


1346 
	$ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1347 
ngx_uöt_t
 
off£t
)

1349 
ngx_èbÀ_ñt_t
 **
ph
;

1351 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1353 i‡(*
ph
 =
NULL
) {

1354 *
ph
 = 
h
;

1357  
NGX_OK
;

1358 
	}
}

1361 
ngx_öt_t


1362 
	$ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1363 
ngx_uöt_t
 
off£t
)

1365 
ngx_èbÀ_ñt_t
 **
ph
;

1367 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1369 i‡(*
ph
 =
NULL
) {

1370 *
ph
 = 
h
;

1371  
NGX_OK
;

1374 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1377 &
h
->
key
, &h->
vÆue
, &(*
ph
)->key, &(*ph)->value);

1379 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1381  
NGX_ERROR
;

1382 
	}
}

1385 
ngx_öt_t


1386 
	$ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1387 
ngx_uöt_t
 
off£t
)

1389 
u_ch¨
 *
ho°
;

1390 
ssize_t
 
Àn
;

1392 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
) {

1393 
r
->
hódîs_ö
.
ho°
 = 
h
;

1396 
ho°
 = 
h
->
vÆue
.
d©a
;

1397 
Àn
 = 
	`ngx_hâp_vÆid©e_ho°
(
r
, &
ho°
, 
h
->
vÆue
.len, 0);

1399 i‡(
Àn
 == 0) {

1400 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1402 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1403  
NGX_ERROR
;

1406 i‡(
Àn
 < 0) {

1407 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1408  
NGX_ERROR
;

1411 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1412  
NGX_OK
;

1415 
r
->
hódîs_ö
.
£rvî
.
Àn
 =Üen;

1416 
r
->
hódîs_ö
.
£rvî
.
d©a
 = 
ho°
;

1418  
NGX_OK
;

1419 
	}
}

1422 
ngx_öt_t


1423 
	$ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1424 
ngx_uöt_t
 
off£t
)

1426 i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "close", 5 - 1)) {

1427 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

1429 } i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "keep-alive", 10 - 1)) {

1430 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_KEEP_ALIVE
;

1433  
NGX_OK
;

1434 
	}
}

1437 
ngx_öt_t


1438 
	$ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1439 
ngx_uöt_t
 
off£t
)

1441 
u_ch¨
 *
u£r_agít
, *
msõ
;

1443 i‡(
r
->
hódîs_ö
.
u£r_agít
) {

1444  
NGX_OK
;

1447 
r
->
hódîs_ö
.
u£r_agít
 = 
h
;

1451 
u£r_agít
 = 
h
->
vÆue
.
d©a
;

1453 
msõ
 = 
	`ngx_°r°∫
(
u£r_agít
, "MSIE ", 5 - 1);

1455 i‡(
msõ
 && msõ + 7 < 
u£r_agít
 + 
h
->
vÆue
.
Àn
) {

1457 
r
->
hódîs_ö
.
msõ
 = 1;

1459 i‡(
msõ
[6] == '.') {

1461 
msõ
[5]) {

1464 
r
->
hódîs_ö
.
msõ6
 = 1;

1467 i‡(
	`ngx_°r°∫
(
msõ
 + 8, "SV1", 3 - 1Ë=
NULL
) {

1468 
r
->
hódîs_ö
.
msõ6
 = 1;

1476 i‡(
c
->
s¶
) {

1477 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1482 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Opera", 5 - 1)) {

1483 
r
->
hódîs_ö
.
›îa
 = 1;

1484 
r
->
hódîs_ö
.
msõ
 = 0;

1485 
r
->
hódîs_ö
.
msõ6
 = 0;

1488 i‡(!
r
->
hódîs_ö
.
msõ
 && !r->hódîs_ö.
›îa
) {

1490 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Gecko/", 6 - 1)) {

1491 
r
->
hódîs_ö
.
gecko
 = 1;

1493 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Chrome/", 7 - 1)) {

1494 
r
->
hódîs_ö
.
chrome
 = 1;

1496 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Safari/", 7 - 1)) {

1497 
r
->
hódîs_ö
.
ßÁri
 = 1;

1499 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Konqueror", 9 - 1)) {

1500 
r
->
hódîs_ö
.
k⁄quî‹
 = 1;

1504  
NGX_OK
;

1505 
	}
}

1508 
ngx_öt_t


1509 
	$ngx_hâp_¥o˚ss_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1510 
ngx_uöt_t
 
off£t
)

1512 
ngx_èbÀ_ñt_t
 **
cookõ
;

1514 
cookõ
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_ö
.
cookõs
);

1515 i‡(
cookõ
) {

1516 *
cookõ
 = 
h
;

1517  
NGX_OK
;

1520 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1522  
NGX_ERROR
;

1523 
	}
}

1526 
ngx_öt_t


1527 
	$ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1529 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
,Ñ->
hódîs_ö
.
£rvî
.
d©a
,

1530 
r
->
hódîs_ö
.
£rvî
.
Àn
)

1531 =
NGX_ERROR
)

1533 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1534  
NGX_ERROR
;

1537 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
 &&Ñ->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
) {

1538 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1540 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1541  
NGX_ERROR
;

1544 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1545 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =

1546 
	`ngx_©oof
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
d©a
,

1547 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
Àn
);

1549 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
NGX_ERROR
) {

1550 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1552 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_LENGTH_REQUIRED
);

1553  
NGX_ERROR
;

1557 i‡(
r
->
mëhod
 & 
NGX_HTTP_PUT
 &&Ñ->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1) {

1558 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1560 &
r
->
mëhod_«me
);

1561 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_LENGTH_REQUIRED
);

1562  
NGX_ERROR
;

1565 i‡(
r
->
mëhod
 & 
NGX_HTTP_TRACE
) {

1566 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1568 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_ALLOWED
);

1569  
NGX_ERROR
;

1572 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög


1573 && 
	`ngx_°rˇ£°∫
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1576 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1578 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_LENGTH_REQUIRED
);

1579  
NGX_ERROR
;

1582 i‡(
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 =
NGX_HTTP_CONNECTION_KEEP_ALIVE
) {

1583 i‡(
r
->
hódîs_ö
.
kìp_Æive
) {

1584 
r
->
hódîs_ö
.
kìp_Æive_n
 =

1585 
	`ngx_©Ÿm
(
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
d©a
,

1586 
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
Àn
);

1590  
NGX_OK
;

1591 
	}
}

1595 
	$ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1597 
ngx_c⁄√˘i⁄_t
 *
c
;

1599 
c
 = 
r
->
c⁄√˘i⁄
;

1601 i‡(
r
->
∂aö_hâp
) {

1602 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1604 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_TO_HTTPS
);

1608 #i‡(
NGX_HTTP_SSL
)

1610 i‡(
c
->
s¶
) {

1611 
rc
;

1612 
X509
 *
˚π
;

1613 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

1615 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

1617 i‡(
sscf
->
vîify
) {

1618 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

1620 i‡(
rc
 !
X509_V_OK
) {

1621 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1623 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1625 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1626 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1628 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_CERT_ERROR
);

1632 i‡(
sscf
->
vîify
 == 1) {

1633 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

1635 i‡(
˚π
 =
NULL
) {

1636 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1639 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1640 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1642 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_NO_CERT
);

1646 
	`X509_‰ì
(
˚π
);

1653 i‡(
c
->
ªad
->
timî_£t
) {

1654 
	`ngx_dñ_timî
(
c
->
ªad
);

1657 #i‡(
NGX_STAT_STUB
)

1658 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

1659 
r
->
°©_ªadög
 = 0;

1660 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, 1);

1661 
r
->
°©_wrôög
 = 1;

1664 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1665 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1666 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

1668 
	`ngx_hâp_h™dÀr
(
r
);

1670 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1671 
	}
}

1674 
ssize_t


1675 
	$ngx_hâp_vÆid©e_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 **
ho°
, 
size_t
 
Àn
,

1676 
ngx_uöt_t
 
Æloc
)

1678 
u_ch¨
 *
h
, 
ch
;

1679 
size_t
 
i
, 
œ°
;

1680 
ngx_uöt_t
 
dŸ
;

1682 
œ°
 = 
Àn
;

1683 
h
 = *
ho°
;

1684 
dŸ
 = 0;

1686 
i
 = 0; i < 
Àn
; i++) {

1687 
ch
 = 
h
[
i
];

1689 i‡(
ch
 == '.') {

1690 i‡(
dŸ
) {

1694 
dŸ
 = 1;

1698 
dŸ
 = 0;

1700 i‡(
ch
 == ':') {

1701 
œ°
 = 
i
;

1705 i‡(
	`ngx_∑th_£∑øt‹
(
ch
) || ch == '\0') {

1709 i‡(
ch
 >= 'A' || ch < 'Z') {

1710 
Æloc
 = 1;

1714 i‡(
dŸ
) {

1715 
œ°
--;

1718 i‡(
Æloc
) {

1719 *
ho°
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
œ°
) ;

1720 i‡(*
ho°
 =
NULL
) {

1724 
	`ngx_°æow
(*
ho°
, 
h
, 
œ°
);

1727  
œ°
;

1728 
	}
}

1731 
ngx_öt_t


1732 
	$ngx_hâp_föd_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
ho°
, 
size_t
 
Àn
)

1734 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1735 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1737 i‡(
r
->
vútuÆ_«mes
 =
NULL
) {

1738  
NGX_DECLINED
;

1741 
cscf
 = 
	`ngx_hash_föd_comböed
(&
r
->
vútuÆ_«mes
->
«mes
,

1742 
	`ngx_hash_key
(
ho°
, 
Àn
), host,Üen);

1744 i‡(
cscf
) {

1745 
found
;

1748 #i‡(
NGX_PCRE
)

1750 i‡(
Àn
 && 
r
->
vútuÆ_«mes
->
ƒegex
) {

1751 
ngx_öt_t
 
n
;

1752 
ngx_uöt_t
 
i
;

1753 
ngx_°r_t
 
«me
;

1754 
ngx_hâp_£rvî_«me_t
 *
¢
;

1756 
«me
.
Àn
 =Üen;

1757 
«me
.
d©a
 = 
ho°
;

1759 
¢
 = 
r
->
vútuÆ_«mes
->
ªgex
;

1761 
i
 = 0; i < 
r
->
vútuÆ_«mes
->
ƒegex
; i++) {

1763 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
¢
[
i
].
ªgex
, &
«me
);

1765 i‡(
n
 =
NGX_OK
) {

1766 
cscf
 = 
¢
[
i
].
£rvî
;

1767 
found
;

1770 i‡(
n
 =
NGX_DECLINED
) {

1774  
NGX_ERROR
;

1780  
NGX_OK
;

1782 
found
:

1784 
r
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

1785 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

1787 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1788 
r
->
c⁄√˘i⁄
->
log
->
fûe
 = 
˛cf
->
îr‹_log
->file;

1790 i‡(!(
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

1791 
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 = 
˛cf
->
îr‹_log
->log_level;

1794  
NGX_OK
;

1795 
	}
}

1799 
	$ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
)

1801 
ngx_c⁄√˘i⁄_t
 *
c
;

1802 
ngx_hâp_ªque°_t
 *
r
;

1803 
ngx_hâp_log_˘x_t
 *
˘x
;

1805 
c
 = 
ev
->
d©a
;

1806 
r
 = 
c
->
d©a
;

1808 
˘x
 = 
c
->
log
->
d©a
;

1809 
˘x
->
cuºít_ªque°
 = 
r
;

1811 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1812 "hâ∞ru¿ªque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1814 i‡(
ev
->
wrôe
) {

1815 
r
->
	`wrôe_evít_h™dÀr
(r);

1818 
r
->
	`ªad_evít_h™dÀr
(r);

1821 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1822 
	}
}

1826 
	$ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
)

1828 
ngx_hâp_ªque°_t
 *
r
;

1829 
ngx_hâp_log_˘x_t
 *
˘x
;

1830 
ngx_hâp_po°ed_ªque°_t
 *
¥
;

1834 i‡(
c
->
de°royed
) {

1838 
r
 = 
c
->
d©a
;

1839 
¥
 = 
r
->
maö
->
po°ed_ªque°s
;

1841 i‡(
¥
 =
NULL
) {

1845 
r
->
maö
->
po°ed_ªque°s
 = 
¥
->
√xt
;

1847 
r
 = 
¥
->
ªque°
;

1849 
˘x
 = 
c
->
log
->
d©a
;

1850 
˘x
->
cuºít_ªque°
 = 
r
;

1852 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1853 "hâ∞po°edÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1855 
r
->
	`wrôe_evít_h™dÀr
(r);

1857 
	}
}

1860 
ngx_öt_t


1861 
	$ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_po°ed_ªque°_t
 *
¥
)

1863 
ngx_hâp_po°ed_ªque°_t
 **
p
;

1865 i‡(
¥
 =
NULL
) {

1866 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°ed_ªque°_t
));

1867 i‡(
¥
 =
NULL
) {

1868  
NGX_ERROR
;

1872 
¥
->
ªque°
 = 
r
;

1873 
¥
->
√xt
 = 
NULL
;

1875 
p
 = &
r
->
maö
->
po°ed_ªque°s
; *p;Ö = &(*p)->
√xt
) { }

1877 *
p
 = 
¥
;

1879  
NGX_OK
;

1880 
	}
}

1884 
	$ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1886 
ngx_c⁄√˘i⁄_t
 *
c
;

1887 
ngx_hâp_ªque°_t
 *
¥
;

1888 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1890 
c
 = 
r
->
c⁄√˘i⁄
;

1892 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1894 
rc
, &
r
->
uri
, &r->
¨gs
,Ñ =
c
->
d©a
,Ñ->
maö
->
cou¡
);

1896 i‡(
rc
 =
NGX_DONE
) {

1897 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

1901 i‡(
rc
 =
NGX_OK
 && 
r
->
fûãr_föÆize
) {

1902 
c
->
îr‹
 = 1;

1906 i‡(
rc
 =
NGX_DECLINED
) {

1907 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

1908 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

1909 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

1913 i‡(
r
 !r->
maö
 &&Ñ->
po°_subªque°
) {

1914 
rc
 = 
r
->
po°_subªque°
->
	`h™dÀr
‘,Ñ->po°_subªque°->
d©a
,Ñc);

1917 i‡(
rc
 =
NGX_ERROR


1918 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


1919 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST


1920 || 
c
->
îr‹
)

1922 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

1926 i‡(
r
->
maö
->
blocked
) {

1927 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

1930 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

1934 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE


1935 || 
rc
 =
NGX_HTTP_CREATED


1936 || 
rc
 =
NGX_HTTP_NO_CONTENT
)

1938 i‡(
rc
 =
NGX_HTTP_CLOSE
) {

1939 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

1943 i‡(
r
 =r->
maö
) {

1944 i‡(
c
->
ªad
->
timî_£t
) {

1945 
	`ngx_dñ_timî
(
c
->
ªad
);

1948 i‡(
c
->
wrôe
->
timî_£t
) {

1949 
	`ngx_dñ_timî
(
c
->
wrôe
);

1953 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1954 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1956 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
‘, 
rc
));

1960 i‡(
r
 !r->
maö
) {

1962 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
) {

1964 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

1965 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

1971 #i‡(
NGX_DEBUG
)

1972 i‡(
r
 !
c
->
d©a
) {

1973 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1975 &
r
->
uri
, &r->
¨gs
);

1979 
¥
 = 
r
->
∑ª¡
;

1981 i‡(
r
 =
c
->
d©a
) {

1983 
r
->
maö
->
cou¡
--;

1985 i‡(!
r
->
logged
) {

1987 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1989 i‡(
˛cf
->
log_subªque°
) {

1990 
	`ngx_hâp_log_ªque°
(
r
);

1993 
r
->
logged
 = 1;

1996 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

1998 &
r
->
uri
, &r->
¨gs
);

2001 
r
->
d⁄e
 = 1;

2003 i‡(
¥
->
po°p⁄ed
 &&Ör->po°p⁄ed->
ªque°
 =
r
) {

2004 
¥
->
po°p⁄ed
 =Ör->po°p⁄ed->
√xt
;

2007 
c
->
d©a
 = 
¥
;

2011 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2013 i‡(
r
->
waôed
) {

2014 
r
->
d⁄e
 = 1;

2018 i‡(
	`ngx_hâp_po°_ªque°
(
¥
, 
NULL
Ë!
NGX_OK
) {

2019 
r
->
maö
->
cou¡
++;

2020 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2024 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2026 &
¥
->
uri
, &¥->
¨gs
);

2031 i‡(
r
->
buf„ªd
 || 
c
->buf„ªd ||Ñ->
po°p⁄ed
 ||Ñ->
blocked
) {

2033 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2034 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2040 i‡(
r
 !
c
->
d©a
) {

2041 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2043 &
r
->
uri
, &r->
¨gs
);

2047 
r
->
d⁄e
 = 1;

2048 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2050 i‡(!
r
->
po°_a˘i⁄
) {

2051 
r
->
ªque°_com∂ëe
 = 1;

2054 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2058 i‡(
c
->
ªad
->
timî_£t
) {

2059 
	`ngx_dñ_timî
(
c
->
ªad
);

2062 i‡(
c
->
wrôe
->
timî_£t
) {

2063 
c
->
wrôe
->
dñayed
 = 0;

2064 
	`ngx_dñ_timî
(
c
->
wrôe
);

2067 i‡(
c
->
ªad
->
eof
) {

2068 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2072 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2073 
	}
}

2077 
	$ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2079 
ngx_hâp_˛ónup_t
 *
˛n
;

2080 
ngx_hâp_ªque°_t
 *
mr
;

2081 
ngx_hâp_ïhemîÆ_t
 *
e
;

2083 
mr
 = 
r
->
maö
;

2085 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2086 "hâ∞ãrmö©êªque° cou¡:%d", 
mr
->
cou¡
);

2088 i‡(
rc
 > 0 && (
mr
->
hódîs_out
.
°©us
 =0 || mr->
c⁄√˘i⁄
->
£¡
 == 0)) {

2089 
mr
->
hódîs_out
.
°©us
 = 
rc
;

2092 
˛n
 = 
mr
->
˛ónup
;

2093 
mr
->
˛ónup
 = 
NULL
;

2095 
˛n
) {

2096 i‡(
˛n
->
h™dÀr
) {

2097 
˛n
->
	`h™dÀr
(˛n->
d©a
);

2100 
˛n
 = c ->
√xt
;

2103 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2105 
mr
->
cou¡
, mr->
blocked
);

2107 i‡(
mr
->
wrôe_evít_h™dÀr
) {

2109 i‡(
mr
->
blocked
) {

2113 
e
 = 
	`ngx_hâp_ïhemîÆ
(
mr
);

2114 
mr
->
po°ed_ªque°s
 = 
NULL
;

2115 
mr
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ãrmö©e_h™dÀr
;

2116 (Ë
	`ngx_hâp_po°_ªque°
(
mr
, &
e
->
ãrmöÆ_po°ed_ªque°
);

2120 
	`ngx_hâp_˛o£_ªque°
(
mr
, 
rc
);

2121 
	}
}

2125 
	$ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2127 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2128 "hâ∞ãrmö©êh™dÀ∏cou¡:%d", 
r
->
cou¡
);

2130 
r
->
cou¡
 = 1;

2132 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2133 
	}
}

2137 
	$ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

2139 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2141 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2143 i‡(
r
->
maö
->
cou¡
 != 1) {

2145 i‡(
r
->
disˇrd_body
) {

2146 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

2147 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
ªad
, 
˛cf
->
lögîög_timeout
);

2149 i‡(
r
->
lögîög_time
 == 0) {

2150 
r
->
lögîög_time
 = 
	`ngx_time
()

2151 + (
time_t
Ë(
˛cf
->
lögîög_time
 / 1000);

2155 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2159 i‡(!
ngx_ãrmö©e


2160 && !
ngx_exôög


2161 && 
r
->
kì∑live


2162 && 
˛cf
->
kì∑live_timeout
 > 0)

2164 
	`ngx_hâp_£t_kì∑live
(
r
);

2168 i‡(
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ALWAYS


2169 || (
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ON


2170 && (
r
->
lögîög_˛o£


2171 || 
r
->
hódî_ö
->
pos
 <Ñ->hódî_ö->
œ°


2172 || 
r
->
c⁄√˘i⁄
->
ªad
->
ªady
)))

2174 
	`ngx_hâp_£t_lögîög_˛o£
(
r
);

2178 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2179 
	}
}

2182 
ngx_öt_t


2183 
	$ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2185 
ngx_evít_t
 *
wev
;

2186 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2188 
r
->
hâp_°©e
 = 
NGX_HTTP_WRITING_REQUEST_STATE
;

2190 
r
->
ªad_evít_h™dÀr
 =Ñ->
disˇrd_body
 ?

2191 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
:

2192 
ngx_hâp_ã°_ªadög
;

2193 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_wrôî
;

2195 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

2197 i‡(
wev
->
ªady
 && wev->
dñayed
) {

2198  
NGX_OK
;

2201 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2202 i‡(!
wev
->
dñayed
) {

2203 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2206 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2207 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2208  
NGX_ERROR
;

2211  
NGX_OK
;

2212 
	}
}

2216 
	$ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
)

2218 
rc
;

2219 
ngx_evít_t
 *
wev
;

2220 
ngx_c⁄√˘i⁄_t
 *
c
;

2221 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2223 
c
 = 
r
->
c⁄√˘i⁄
;

2224 
wev
 = 
c
->
wrôe
;

2226 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2227 "hâ∞wrôî h™dÀr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2229 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_c‹e_moduÀ
);

2231 i‡(
wev
->
timedout
) {

2232 i‡(!
wev
->
dñayed
) {

2233 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

2235 
c
->
timedout
 = 1;

2237 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2241 
wev
->
timedout
 = 0;

2242 
wev
->
dñayed
 = 0;

2244 i‡(!
wev
->
ªady
) {

2245 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2247 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2248 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2256 i‡(
wev
->
dñayed
 || 
r
->
aio
) {

2257 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2260 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2261 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2267 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
NULL
);

2269 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2271 
rc
, &
r
->
uri
, &r->
¨gs
);

2273 i‡(
rc
 =
NGX_ERROR
) {

2274 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2278 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
 || (∏=r->
maö
 && 
c
->buffered)) {

2280 i‡(!
wev
->
dñayed
) {

2281 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2284 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2285 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2291 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2292 "hâ∞wrôî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2294 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2296 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2297 
	}
}

2301 
	$ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
)

2303 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2304 "hâ∞föÆizî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2306 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2307 
	}
}

2311 
	$ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2313 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2318 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)

2319 && 
r
->
c⁄√˘i⁄
->
ªad
->
a˘ive
)

2321 i‡(
	`ngx_dñ_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2322 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2325 
	}
}

2329 
	$ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2331 
n
;

2332 
buf
[1];

2333 
ngx_îr_t
 
îr
;

2334 
ngx_evít_t
 *
ªv
;

2335 
ngx_c⁄√˘i⁄_t
 *
c
;

2337 
c
 = 
r
->
c⁄√˘i⁄
;

2338 
ªv
 = 
c
->
ªad
;

2340 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "httpÅestÑeading");

2342 #i‡(
NGX_HAVE_KQUEUE
)

2344 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2346 i‡(!
ªv
->
≥ndög_eof
) {

2350 
ªv
->
eof
 = 1;

2351 
c
->
îr‹
 = 1;

2352 
îr
 = 
ªv
->
kq_î∫o
;

2354 
˛o£d
;

2359 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

2361 i‡(
n
 == 0) {

2362 
ªv
->
eof
 = 1;

2363 
c
->
îr‹
 = 1;

2364 
îr
 = 0;

2366 
˛o£d
;

2368 } i‡(
n
 == -1) {

2369 
îr
 = 
ngx_sockë_î∫o
;

2371 i‡(
îr
 !
NGX_EAGAIN
) {

2372 
ªv
->
eof
 = 1;

2373 
c
->
îr‹
 = 1;

2375 
˛o£d
;

2381 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ªv
->
a˘ive
) {

2383 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2384 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2390 
˛o£d
:

2392 i‡(
îr
) {

2393 
ªv
->
îr‹
 = 1;

2396 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

2399 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2400 
	}
}

2404 
	$ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
)

2406 
t˝_nodñay
;

2407 
ngx_öt_t
 
i
;

2408 
ngx_buf_t
 *
b
, *
f
;

2409 
ngx_evít_t
 *
ªv
, *
wev
;

2410 
ngx_c⁄√˘i⁄_t
 *
c
;

2411 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2412 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2413 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2415 
c
 = 
r
->
c⁄√˘i⁄
;

2416 
ªv
 = 
c
->
ªad
;

2418 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2420 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "set http keepalive handler");

2422 i‡(
r
->
disˇrd_body
) {

2423 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2424 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

2425 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

2429 
c
->
log
->
a˘i⁄
 = "closingÑequest";

2431 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2432 
b
 = 
r
->
hódî_ö
;

2434 i‡(
b
->
pos
 < b->
œ°
) {

2438 i‡(
b
 !
c
->
buf„r
) {

2448 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2450 i‡(
hc
->
‰ì
 =
NULL
) {

2451 
hc
->
‰ì
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
,

2452 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

2454 i‡(
hc
->
‰ì
 =
NULL
) {

2455 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2460 
i
 = 0; i < 
hc
->
nbusy
 - 1; i++) {

2461 
f
 = 
hc
->
busy
[
i
];

2462 
hc
->
‰ì
[hc->
n‰ì
++] = 
f
;

2463 
f
->
pos
 = f->
°¨t
;

2464 
f
->
œ°
 = f->
°¨t
;

2467 
hc
->
busy
[0] = 
b
;

2468 
hc
->
nbusy
 = 1;

2472 
r
->
kì∑live
 = 0;

2474 
	`ngx_hâp_‰ì_ªque°
(
r
, 0);

2476 
c
->
d©a
 = 
hc
;

2478 
	`ngx_add_timî
(
ªv
, 
˛cf
->
kì∑live_timeout
);

2480 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2481 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2485 
wev
 = 
c
->
wrôe
;

2486 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2488 i‡(
b
->
pos
 < b->
œ°
) {

2490 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "pipelinedÑequest");

2492 #i‡(
NGX_STAT_STUB
)

2493 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

2496 
hc
->
pùñöe
 = 1;

2497 
c
->
log
->
a˘i⁄
 = "reading clientÖipelinedÑequestÜine";

2499 
ªv
->
h™dÀr
 = 
ngx_hâp_öô_ªque°
;

2500 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

2504 
hc
->
pùñöe
 = 0;

2514 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
r
Ë=
NGX_OK
) {

2515 
hc
->
ªque°
 = 
NULL
;

2518 
b
 = 
c
->
buf„r
;

2520 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

2527 
b
->
pos
 = 
NULL
;

2530 
b
->
pos
 = b->
°¨t
;

2531 
b
->
œ°
 = b->
°¨t
;

2534 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc free: %p %d",

2535 
hc
->
‰ì
, hc->
n‰ì
);

2537 i‡(
hc
->
‰ì
) {

2538 
i
 = 0; i < 
hc
->
n‰ì
; i++) {

2539 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
‰ì
[
i
]->
°¨t
);

2540 
hc
->
‰ì
[
i
] = 
NULL
;

2543 
hc
->
n‰ì
 = 0;

2546 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc busy: %p %d",

2547 
hc
->
busy
, hc->
nbusy
);

2549 i‡(
hc
->
busy
) {

2550 
i
 = 0; i < 
hc
->
nbusy
; i++) {

2551 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
busy
[
i
]->
°¨t
);

2552 
hc
->
busy
[
i
] = 
NULL
;

2555 
hc
->
nbusy
 = 0;

2558 #i‡(
NGX_HTTP_SSL
)

2559 i‡(
c
->
s¶
) {

2560 
	`ngx_s¶_‰ì_buf„r
(
c
);

2564 
ªv
->
h™dÀr
 = 
ngx_hâp_kì∑live_h™dÀr
;

2566 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

2567 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

2568 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2573 
c
->
log
->
a˘i⁄
 = "keepalive";

2575 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

2576 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

2577 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, 
ngx_t˝_push_n
 " failed");

2578 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2582 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

2583 
t˝_nodñay
 = 
ngx_t˝_nodñay_™d_t˝_n›ush
 ? 1 : 0;

2586 
t˝_nodñay
 = 1;

2589 i‡(
t˝_nodñay


2590 && 
˛cf
->
t˝_nodñay


2591 && 
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
)

2593 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2595 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2596 (c⁄° *Ë&
t˝_nodñay
, ())

2599 #i‡(
NGX_SOLARIS
)

2601 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_EINVAL
;

2604 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2607 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

2608 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2612 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2617 
r
->
hâp_°©e
 = 
NGX_HTTP_KEEPALIVE_STATE
;

2620 
c
->
idÀ
 = 1;

2621 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

2623 i‡(
ªv
->
ªady
) {

2624 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

2626 
	}
}

2630 
	$ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

2632 
size_t
 
size
;

2633 
ssize_t
 
n
;

2634 
ngx_buf_t
 *
b
;

2635 
ngx_c⁄√˘i⁄_t
 *
c
;

2637 
c
 = 
ªv
->
d©a
;

2639 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http keepalive handler");

2641 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

2642 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2646 #i‡(
NGX_HAVE_KQUEUE
)

2648 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2649 i‡(
ªv
->
≥ndög_eof
) {

2650 
c
->
log
->
h™dÀr
 = 
NULL
;

2651 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

2653 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

2654 #i‡(
NGX_HTTP_SSL
)

2655 i‡(
c
->
s¶
) {

2656 
c
->
s¶
->
no_£nd_shutdown
 = 1;

2659 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2666 
b
 = 
c
->
buf„r
;

2667 
size
 = 
b
->
íd
 - b->
°¨t
;

2669 i‡(
b
->
pos
 =
NULL
) {

2677 
b
->
pos
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

2678 i‡(
b
->
pos
 =
NULL
) {

2679 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2683 
b
->
°¨t
 = b->
pos
;

2684 
b
->
œ°
 = b->
pos
;

2685 
b
->
íd
 = b->
pos
 + 
size
;

2693 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_ECONNRESET
;

2694 
	`ngx_£t_sockë_î∫o
(0);

2696 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

2697 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

2699 i‡(
n
 =
NGX_AGAIN
) {

2700 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2701 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2707 i‡(
n
 =
NGX_ERROR
) {

2708 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2712 
c
->
log
->
h™dÀr
 = 
NULL
;

2714 i‡(
n
 == 0) {

2715 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ngx_sockë_î∫o
,

2716 "˛õ¡ %V clo£d kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

2717 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2721 
b
->
œ°
 +
n
;

2723 #i‡(
NGX_STAT_STUB
)

2724 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

2727 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

2728 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

2730 
c
->
idÀ
 = 0;

2731 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

2733 
	`ngx_hâp_öô_ªque°
(
ªv
);

2734 
	}
}

2738 
	$ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
)

2740 
ngx_evít_t
 *
ªv
, *
wev
;

2741 
ngx_c⁄√˘i⁄_t
 *
c
;

2742 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2744 
c
 = 
r
->
c⁄√˘i⁄
;

2746 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2748 
ªv
 = 
c
->
ªad
;

2749 
ªv
->
h™dÀr
 = 
ngx_hâp_lögîög_˛o£_h™dÀr
;

2751 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

2752 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

2754 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2755 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2759 
wev
 = 
c
->
wrôe
;

2760 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2762 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

2763 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

2764 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2769 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

2770 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2771 
ngx_shutdown_sockë_n
 " failed");

2772 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2776 i‡(
ªv
->
ªady
) {

2777 
	`ngx_hâp_lögîög_˛o£_h™dÀr
(
ªv
);

2779 
	}
}

2783 
	$ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ªv
)

2785 
ssize_t
 
n
;

2786 
ngx_m£c_t
 
timî
;

2787 
ngx_c⁄√˘i⁄_t
 *
c
;

2788 
ngx_hâp_ªque°_t
 *
r
;

2789 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2790 
u_ch¨
 
buf„r
[
NGX_HTTP_LINGERING_BUFFER_SIZE
];

2792 
c
 = 
ªv
->
d©a
;

2793 
r
 = 
c
->
d©a
;

2795 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2798 i‡(
ªv
->
timedout
) {

2799 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2803 
timî
 = (
ngx_m£c_t
Ë(
r
->
lögîög_time
 - 
	`ngx_time
());

2804 i‡(
timî
 <= 0) {

2805 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2810 
n
 = 
c
->
	`ªcv
(c, 
buf„r
, 
NGX_HTTP_LINGERING_BUFFER_SIZE
);

2812 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "lögîögÑód: %d", 
n
);

2814 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

2815 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2819 } 
ªv
->
ªady
);

2821 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2822 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2826 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2828 
timî
 *= 1000;

2830 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

2831 
timî
 = 
˛cf
->
lögîög_timeout
;

2834 
	`ngx_add_timî
(
ªv
, 
timî
);

2835 
	}
}

2839 
	$ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
)

2841 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0, "httpÉmpty handler");

2844 
	}
}

2848 
	$ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2850 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2854 
	}
}

2857 
ngx_öt_t


2858 
	$ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
)

2860 
ngx_buf_t
 *
b
;

2861 
ngx_chaö_t
 
out
;

2863 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2864 i‡(
b
 =
NULL
) {

2865  
NGX_ERROR
;

2868 i‡(
Êags
 & 
NGX_HTTP_LAST
) {

2870 i‡(
r
 =r->
maö
 && !r->
po°_a˘i⁄
) {

2871 
b
->
œ°_buf
 = 1;

2874 
b
->
sync
 = 1;

2875 
b
->
œ°_ö_chaö
 = 1;

2879 i‡(
Êags
 & 
NGX_HTTP_FLUSH
) {

2880 
b
->
Êush
 = 1;

2883 
out
.
buf
 = 
b
;

2884 
out
.
√xt
 = 
NULL
;

2886  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

2887 
	}
}

2890 
ngx_öt_t


2891 
	$ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

2893 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2895 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2897 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

2898  
NGX_DECLINED
;

2901 i‡(
r
->
po°_a˘i⁄
 &&Ñ->
uri_ch™ges
 == 0) {

2902  
NGX_DECLINED
;

2905 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2906 "po°á˘i⁄: \"%V\"", &
˛cf
->
po°_a˘i⁄
);

2908 
r
->
maö
->
cou¡
--;

2910 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

2911 
r
->
hódî_⁄ly
 = 1;

2912 
r
->
po°_a˘i⁄
 = 1;

2914 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

2916 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
[0] == '/') {

2917 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
˛cf
->
po°_a˘i⁄
, 
NULL
);

2920 
	`ngx_hâp_«med_loˇti⁄
(
r
, &
˛cf
->
po°_a˘i⁄
);

2923  
NGX_OK
;

2924 
	}
}

2928 
	$ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2930 
ngx_c⁄√˘i⁄_t
 *
c
;

2932 
r
 =Ñ->
maö
;

2933 
c
 = 
r
->
c⁄√˘i⁄
;

2935 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2936 "hâ∞ªque° cou¡:%d blk:%d", 
r
->
cou¡
,Ñ->
blocked
);

2938 i‡(
r
->
cou¡
 == 0) {

2939 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "httpÑequest count is zero");

2942 
r
->
cou¡
--;

2944 i‡(
r
->
cou¡
 ||Ñ->
blocked
) {

2948 
	`ngx_hâp_‰ì_ªque°
(
r
, 
rc
);

2949 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2950 
	}
}

2954 
	$ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2956 
ngx_log_t
 *
log
;

2957 
lögî
Üinger;

2958 
ngx_hâp_˛ónup_t
 *
˛n
;

2959 
ngx_hâp_log_˘x_t
 *
˘x
;

2960 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2962 
log
 = 
r
->
c⁄√˘i⁄
->log;

2964 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http closeÑequest");

2966 i‡(
r
->
poﬁ
 =
NULL
) {

2967 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "httpÑequestálready closed");

2971 
˛n
 = 
r
->
˛ónup
; c ; c  = c ->
√xt
) {

2972 i‡(
˛n
->
h™dÀr
) {

2973 
˛n
->
	`h™dÀr
(˛n->
d©a
);

2977 #i‡(
NGX_STAT_STUB
)

2979 i‡(
r
->
°©_ªadög
) {

2980 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

2983 i‡(
r
->
°©_wrôög
) {

2984 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, -1);

2989 i‡(
rc
 > 0 && (
r
->
hódîs_out
.
°©us
 =0 ||Ñ->
c⁄√˘i⁄
->
£¡
 == 0)) {

2990 
r
->
hódîs_out
.
°©us
 = 
rc
;

2993 
log
->
a˘i⁄
 = "loggingÑequest";

2995 
	`ngx_hâp_log_ªque°
(
r
);

2997 
log
->
a˘i⁄
 = "closingÑequest";

2999 i‡(
r
->
c⁄√˘i⁄
->
timedout
) {

3000 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3002 i‡(
˛cf
->
ª£t_timedout_c⁄√˘i⁄
) {

3003 
lögî
.
l_⁄off
 = 1;

3004 
lögî
.
l_lögî
 = 0;

3006 i‡(
	`£tsock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_LINGER
,

3007 (c⁄° *Ë&
lögî
, (linger)) == -1)

3009 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_sockë_î∫o
,

3016 
˘x
 = 
log
->
d©a
;

3017 
˘x
->
ªque°
 = 
NULL
;

3019 
r
->
ªque°_löe
.
Àn
 = 0;

3021 
r
->
c⁄√˘i⁄
->
de°royed
 = 1;

3023 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

3024 
	}
}

3028 
	$ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3030 
ngx_uöt_t
 
i
, 
n
;

3031 
ngx_hâp_h™dÀr_±
 *
log_h™dÀr
;

3032 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3034 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3036 
log_h™dÀr
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
ñts
;

3037 
n
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
√…s
;

3039 
i
 = 0; i < 
n
; i++) {

3040 
log_h™dÀr
[
i
](
r
);

3042 
	}
}

3046 
	$ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

3048 
ngx_poﬁ_t
 *
poﬁ
;

3050 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3051 "˛o£ hâ∞c⁄√˘i⁄: %d", 
c
->
fd
);

3053 #i‡(
NGX_HTTP_SSL
)

3055 i‡(
c
->
s¶
) {

3056 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

3057 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_˛o£_c⁄√˘i⁄
;

3064 #i‡(
NGX_STAT_STUB
)

3065 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

3068 
c
->
de°royed
 = 1;

3070 
poﬁ
 = 
c
->pool;

3072 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

3074 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3075 
	}
}

3078 
u_ch¨
 *

3079 
	$ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3081 
u_ch¨
 *
p
;

3082 
ngx_hâp_ªque°_t
 *
r
;

3083 
ngx_hâp_log_˘x_t
 *
˘x
;

3085 i‡(
log
->
a˘i⁄
) {

3086 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

3087 
Àn
 -
p
 - 
buf
;

3088 
buf
 = 
p
;

3091 
˘x
 = 
log
->
d©a
;

3093 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", &
˘x
->
c⁄√˘i⁄
->
addr_ãxt
);

3094 
Àn
 -
p
 - 
buf
;

3096 
r
 = 
˘x
->
ªque°
;

3098 i‡(
r
) {

3099  
r
->
	`log_h™dÀr
‘, 
˘x
->
cuºít_ªque°
, 
p
, 
Àn
);

3102 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ", server: %V",

3103 &
˘x
->
c⁄√˘i⁄
->
li°íög
->
addr_ãxt
);

3106  
p
;

3107 
	}
}

3110 
u_ch¨
 *

3111 
	$ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,Çgx_hâp_ªque°_à*
§
,

3112 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3114 *
uri_£∑øt‹
;

3115 
u_ch¨
 *
p
;

3116 
ngx_hâp_up°ªam_t
 *
u
;

3117 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3119 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3121 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", sîvî: %V", &
cscf
->
£rvî_«me
);

3122 
Àn
 -
p
 - 
buf
;

3123 
buf
 = 
p
;

3125 i‡(
r
->
ªque°_löe
.
d©a
 =
NULL
 &&Ñ->
ªque°_°¨t
) {

3126 
p
 = 
r
->
ªque°_°¨t
;Ö <Ñ->
hódî_ö
->
œ°
;Ö++) {

3127 i‡(*
p
 =
CR
 || *∞=
LF
) {

3132 
r
->
ªque°_löe
.
Àn
 = 
p
 -Ñ->
ªque°_°¨t
;

3133 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

3136 i‡(
r
->
ªque°_löe
.
Àn
) {

3137 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeque°: \"%V\"", &
r
->
ªque°_löe
);

3138 
Àn
 -
p
 - 
buf
;

3139 
buf
 = 
p
;

3142 i‡(
r
 !
§
) {

3143 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", subªque°: \"%V\"", &
§
->
uri
);

3144 
Àn
 -
p
 - 
buf
;

3145 
buf
 = 
p
;

3148 
u
 = 
§
->
up°ªam
;

3150 i‡(
u
 && u->
≥î
.
«me
) {

3152 
uri_£∑øt‹
 = "";

3154 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

3155 i‡(
u
->
≥î
.
sockaddr
 && u->≥î.sockaddr->
ß_Ámûy
 =
AF_UNIX
) {

3156 
uri_£∑øt‹
 = ":";

3160 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", upstream: \"%V%V%s%V\"",

3161 &
u
->
schema
, u->
≥î
.
«me
,

3162 
uri_£∑øt‹
, &
u
->
uri
);

3163 
Àn
 -
p
 - 
buf
;

3164 
buf
 = 
p
;

3167 i‡(
r
->
hódîs_ö
.
ho°
) {

3168 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", host: \"%V\"",

3169 &
r
->
hódîs_ö
.
ho°
->
vÆue
);

3170 
Àn
 -
p
 - 
buf
;

3171 
buf
 = 
p
;

3174 i‡(
r
->
hódîs_ö
.
ª„ªr
) {

3175 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeferrer: \"%V\"",

3176 &
r
->
hódîs_ö
.
ª„ªr
->
vÆue
);

3177 
buf
 = 
p
;

3180  
buf
;

3181 
	}
}

	@src/http/ngx_http_request.h

8 #i‚de‡
_NGX_HTTP_REQUEST_H_INCLUDED_


9 
	#_NGX_HTTP_REQUEST_H_INCLUDED_


	)

12 
	#NGX_HTTP_MAX_URI_CHANGES
 10

	)

13 
	#NGX_HTTP_MAX_SUBREQUESTS
 50

	)

16 
	#NGX_HTTP_LC_HEADER_LEN
 32

	)

19 
	#NGX_HTTP_DISCARD_BUFFER_SIZE
 4096

	)

20 
	#NGX_HTTP_LINGERING_BUFFER_SIZE
 4096

	)

23 
	#NGX_HTTP_VERSION_9
 9

	)

24 
	#NGX_HTTP_VERSION_10
 1000

	)

25 
	#NGX_HTTP_VERSION_11
 1001

	)

27 
	#NGX_HTTP_UNKNOWN
 0x0001

	)

28 
	#NGX_HTTP_GET
 0x0002

	)

29 
	#NGX_HTTP_HEAD
 0x0004

	)

30 
	#NGX_HTTP_POST
 0x0008

	)

31 
	#NGX_HTTP_PUT
 0x0010

	)

32 
	#NGX_HTTP_DELETE
 0x0020

	)

33 
	#NGX_HTTP_MKCOL
 0x0040

	)

34 
	#NGX_HTTP_COPY
 0x0080

	)

35 
	#NGX_HTTP_MOVE
 0x0100

	)

36 
	#NGX_HTTP_OPTIONS
 0x0200

	)

37 
	#NGX_HTTP_PROPFIND
 0x0400

	)

38 
	#NGX_HTTP_PROPPATCH
 0x0800

	)

39 
	#NGX_HTTP_LOCK
 0x1000

	)

40 
	#NGX_HTTP_UNLOCK
 0x2000

	)

41 
	#NGX_HTTP_PATCH
 0x4000

	)

42 
	#NGX_HTTP_TRACE
 0x8000

	)

44 
	#NGX_HTTP_CONNECTION_CLOSE
 1

	)

45 
	#NGX_HTTP_CONNECTION_KEEP_ALIVE
 2

	)

48 
	#NGX_NONE
 1

	)

51 
	#NGX_HTTP_PARSE_HEADER_DONE
 1

	)

53 
	#NGX_HTTP_CLIENT_ERROR
 10

	)

54 
	#NGX_HTTP_PARSE_INVALID_METHOD
 10

	)

55 
	#NGX_HTTP_PARSE_INVALID_REQUEST
 11

	)

56 
	#NGX_HTTP_PARSE_INVALID_09_METHOD
 12

	)

58 
	#NGX_HTTP_PARSE_INVALID_HEADER
 13

	)

62 
	#NGX_HTTP_SUBREQUEST_IN_MEMORY
 2

	)

63 
	#NGX_HTTP_SUBREQUEST_WAITED
 4

	)

64 
	#NGX_HTTP_LOG_UNSAFE
 8

	)

67 
	#NGX_HTTP_OK
 200

	)

68 
	#NGX_HTTP_CREATED
 201

	)

69 
	#NGX_HTTP_ACCEPTED
 202

	)

70 
	#NGX_HTTP_NO_CONTENT
 204

	)

71 
	#NGX_HTTP_PARTIAL_CONTENT
 206

	)

73 
	#NGX_HTTP_SPECIAL_RESPONSE
 300

	)

74 
	#NGX_HTTP_MOVED_PERMANENTLY
 301

	)

75 
	#NGX_HTTP_MOVED_TEMPORARILY
 302

	)

76 
	#NGX_HTTP_SEE_OTHER
 303

	)

77 
	#NGX_HTTP_NOT_MODIFIED
 304

	)

78 
	#NGX_HTTP_TEMPORARY_REDIRECT
 307

	)

80 
	#NGX_HTTP_BAD_REQUEST
 400

	)

81 
	#NGX_HTTP_UNAUTHORIZED
 401

	)

82 
	#NGX_HTTP_FORBIDDEN
 403

	)

83 
	#NGX_HTTP_NOT_FOUND
 404

	)

84 
	#NGX_HTTP_NOT_ALLOWED
 405

	)

85 
	#NGX_HTTP_REQUEST_TIME_OUT
 408

	)

86 
	#NGX_HTTP_CONFLICT
 409

	)

87 
	#NGX_HTTP_LENGTH_REQUIRED
 411

	)

88 
	#NGX_HTTP_PRECONDITION_FAILED
 412

	)

89 
	#NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
 413

	)

90 
	#NGX_HTTP_REQUEST_URI_TOO_LARGE
 414

	)

91 
	#NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
 415

	)

92 
	#NGX_HTTP_RANGE_NOT_SATISFIABLE
 416

	)

98 
	#NGX_HTTP_CLOSE
 444

	)

100 
	#NGX_HTTP_NGINX_CODES
 494

	)

102 
	#NGX_HTTP_REQUEST_HEADER_TOO_LARGE
 494

	)

104 
	#NGX_HTTPS_CERT_ERROR
 495

	)

105 
	#NGX_HTTPS_NO_CERT
 496

	)

111 
	#NGX_HTTP_TO_HTTPS
 497

	)

121 
	#NGX_HTTP_CLIENT_CLOSED_REQUEST
 499

	)

124 
	#NGX_HTTP_INTERNAL_SERVER_ERROR
 500

	)

125 
	#NGX_HTTP_NOT_IMPLEMENTED
 501

	)

126 
	#NGX_HTTP_BAD_GATEWAY
 502

	)

127 
	#NGX_HTTP_SERVICE_UNAVAILABLE
 503

	)

128 
	#NGX_HTTP_GATEWAY_TIME_OUT
 504

	)

129 
	#NGX_HTTP_INSUFFICIENT_STORAGE
 507

	)

132 
	#NGX_HTTP_LOWLEVEL_BUFFERED
 0xf0

	)

133 
	#NGX_HTTP_WRITE_BUFFERED
 0x10

	)

134 
	#NGX_HTTP_GZIP_BUFFERED
 0x20

	)

135 
	#NGX_HTTP_SSI_BUFFERED
 0x01

	)

136 
	#NGX_HTTP_SUB_BUFFERED
 0x02

	)

137 
	#NGX_HTTP_COPY_BUFFERED
 0x04

	)

141 
	mNGX_HTTP_INITING_REQUEST_STATE
 = 0,

142 
	mNGX_HTTP_READING_REQUEST_STATE
,

143 
	mNGX_HTTP_PROCESS_REQUEST_STATE
,

145 
	mNGX_HTTP_CONNECT_UPSTREAM_STATE
,

146 
	mNGX_HTTP_WRITING_UPSTREAM_STATE
,

147 
	mNGX_HTTP_READING_UPSTREAM_STATE
,

149 
	mNGX_HTTP_WRITING_REQUEST_STATE
,

150 
	mNGX_HTTP_LINGERING_CLOSE_STATE
,

151 
	mNGX_HTTP_KEEPALIVE_STATE


152 } 
	tngx_hâp_°©e_e
;

156 
ngx_°r_t
 
	m«me
;

157 
ngx_uöt_t
 
	moff£t
;

158 
ngx_hâp_hódî_h™dÀr_±
 
	mh™dÀr
;

159 } 
	tngx_hâp_hódî_t
;

163 
ngx_°r_t
 
	m«me
;

164 
ngx_uöt_t
 
	moff£t
;

165 } 
	tngx_hâp_hódî_out_t
;

169 
ngx_li°_t
 
	mhódîs
;

171 
ngx_èbÀ_ñt_t
 *
	mho°
;

172 
ngx_èbÀ_ñt_t
 *
	mc⁄√˘i⁄
;

173 
ngx_èbÀ_ñt_t
 *
	mif_modifõd_sö˚
;

174 
ngx_èbÀ_ñt_t
 *
	mif_unmodifõd_sö˚
;

175 
ngx_èbÀ_ñt_t
 *
	mu£r_agít
;

176 
ngx_èbÀ_ñt_t
 *
	mª„ªr
;

177 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

178 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ty≥
;

180 
ngx_èbÀ_ñt_t
 *
	mønge
;

181 
ngx_èbÀ_ñt_t
 *
	mif_ønge
;

183 
ngx_èbÀ_ñt_t
 *
	må™s„r_ícodög
;

184 
ngx_èbÀ_ñt_t
 *
	mex≥˘
;

186 #i‡(
NGX_HTTP_GZIP
)

187 
ngx_èbÀ_ñt_t
 *
	mac˚±_ícodög
;

188 
ngx_èbÀ_ñt_t
 *
	mvü
;

191 
ngx_èbÀ_ñt_t
 *
	mauth‹iz©i⁄
;

193 
ngx_èbÀ_ñt_t
 *
	mkìp_Æive
;

195 #i‡(
NGX_HTTP_PROXY
 || 
NGX_HTTP_REALIP
 || 
NGX_HTTP_GEO
)

196 
ngx_èbÀ_ñt_t
 *
	mx_f‹w¨ded_f‹
;

199 #i‡(
NGX_HTTP_REALIP
)

200 
ngx_èbÀ_ñt_t
 *
	mx_ªÆ_ù
;

203 #i‡(
NGX_HTTP_HEADERS
)

204 
ngx_èbÀ_ñt_t
 *
	mac˚±
;

205 
ngx_èbÀ_ñt_t
 *
	mac˚±_œnguage
;

208 #i‡(
NGX_HTTP_DAV
)

209 
ngx_èbÀ_ñt_t
 *
	mdïth
;

210 
ngx_èbÀ_ñt_t
 *
	mde°ö©i⁄
;

211 
ngx_èbÀ_ñt_t
 *
	movîwrôe
;

212 
ngx_èbÀ_ñt_t
 *
	md©e
;

215 
ngx_°r_t
 
	mu£r
;

216 
ngx_°r_t
 
	m∑sswd
;

218 
ngx_¨øy_t
 
	mcookõs
;

220 
ngx_°r_t
 
	m£rvî
;

221 
off_t
 
	mc⁄ã¡_Àngth_n
;

222 
time_t
 
	mkìp_Æive_n
;

224 
	mc⁄√˘i⁄_ty≥
:2;

225 
	mmsõ
:1;

226 
	mmsõ6
:1;

227 
	m›îa
:1;

228 
	mgecko
:1;

229 
	mchrome
:1;

230 
	mßÁri
:1;

231 
	mk⁄quî‹
:1;

232 } 
	tngx_hâp_hódîs_ö_t
;

236 
ngx_li°_t
 
	mhódîs
;

238 
ngx_uöt_t
 
	m°©us
;

239 
ngx_°r_t
 
	m°©us_löe
;

241 
ngx_èbÀ_ñt_t
 *
	m£rvî
;

242 
ngx_èbÀ_ñt_t
 *
	md©e
;

243 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

244 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ícodög
;

245 
ngx_èbÀ_ñt_t
 *
	mloˇti⁄
;

246 
ngx_èbÀ_ñt_t
 *
	mª‰esh
;

247 
ngx_èbÀ_ñt_t
 *
	mœ°_modifõd
;

248 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ønge
;

249 
ngx_èbÀ_ñt_t
 *
	mac˚±_ønges
;

250 
ngx_èbÀ_ñt_t
 *
	mwww_authítiˇã
;

251 
ngx_èbÀ_ñt_t
 *
	mexpúes
;

252 
ngx_èbÀ_ñt_t
 *
	mëag
;

254 
ngx_°r_t
 *
	movîride_ch¨£t
;

256 
size_t
 
	mc⁄ã¡_ty≥_Àn
;

257 
ngx_°r_t
 
	mc⁄ã¡_ty≥
;

258 
ngx_°r_t
 
	mch¨£t
;

259 
u_ch¨
 *
	mc⁄ã¡_ty≥_lowˇ£
;

260 
ngx_uöt_t
 
	mc⁄ã¡_ty≥_hash
;

262 
ngx_¨øy_t
 
	mˇche_c⁄åﬁ
;

264 
off_t
 
	mc⁄ã¡_Àngth_n
;

265 
time_t
 
	md©e_time
;

266 
time_t
 
	mœ°_modifõd_time
;

267 } 
	tngx_hâp_hódîs_out_t
;

270 (*
	tngx_hâp_˛õ¡_body_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

273 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

274 
ngx_chaö_t
 *
bufs
;

275 
ngx_buf_t
 *
buf
;

276 
off_t
 
ª°
;

277 
ngx_chaö_t
 *
to_wrôe
;

278 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
;

279 } 
	tngx_hâp_ªque°_body_t
;

283 
ngx_hâp_ªque°_t
 *
ªque°
;

285 
ngx_buf_t
 **
busy
;

286 
ngx_öt_t
 
nbusy
;

288 
ngx_buf_t
 **
‰ì
;

289 
ngx_öt_t
 
n‰ì
;

291 
ngx_uöt_t
 
pùñöe
;

292 } 
	tngx_hâp_c⁄√˘i⁄_t
;

295 
ngx_hâp_£rvî_«me_s
 
	tngx_hâp_£rvî_«me_t
;

299 
ngx_hash_comböed_t
 
«mes
;

301 
ngx_uöt_t
 
ƒegex
;

302 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

303 } 
	tngx_hâp_vútuÆ_«mes_t
;

306 (*
	tngx_hâp_˛ónup_±
)(*
	td©a
);

308 
ngx_hâp_˛ónup_s
 
	tngx_hâp_˛ónup_t
;

310 
	sngx_hâp_˛ónup_s
 {

311 
ngx_hâp_˛ónup_±
 
h™dÀr
;

312 *
d©a
;

313 
ngx_hâp_˛ónup_t
 *
√xt
;

317 
	$ngx_öt_t
 (*
	tngx_hâp_po°_subªque°_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

318 *
	td©a
, 
	tngx_öt_t
 
	trc
);

321 
ngx_hâp_po°_subªque°_±
 
h™dÀr
;

322 *
d©a
;

323 } 
	tngx_hâp_po°_subªque°_t
;

326 
ngx_hâp_po°p⁄ed_ªque°_s
 
	tngx_hâp_po°p⁄ed_ªque°_t
;

328 
	sngx_hâp_po°p⁄ed_ªque°_s
 {

329 
ngx_hâp_ªque°_t
 *
ªque°
;

330 
ngx_chaö_t
 *
out
;

331 
ngx_hâp_po°p⁄ed_ªque°_t
 *
√xt
;

335 
ngx_hâp_po°ed_ªque°_s
 
	tngx_hâp_po°ed_ªque°_t
;

337 
	sngx_hâp_po°ed_ªque°_s
 {

338 
ngx_hâp_ªque°_t
 *
ªque°
;

339 
ngx_hâp_po°ed_ªque°_t
 *
√xt
;

343 
	$ngx_öt_t
 (*
	tngx_hâp_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

344 (*
	tngx_hâp_evít_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

347 
	sngx_hâp_ªque°_s
 {

348 
uöt32_t
 
sig«tuª
;

350 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

352 **
˘x
;

353 **
maö_c⁄f
;

354 **
§v_c⁄f
;

355 **
loc_c⁄f
;

357 
ngx_hâp_evít_h™dÀr_±
 
ªad_evít_h™dÀr
;

358 
ngx_hâp_evít_h™dÀr_±
 
wrôe_evít_h™dÀr
;

360 #i‡(
NGX_HTTP_CACHE
)

361 
ngx_hâp_ˇche_t
 *
ˇche
;

364 
ngx_hâp_up°ªam_t
 *
up°ªam
;

365 
ngx_¨øy_t
 *
up°ªam_°©es
;

368 
ngx_poﬁ_t
 *
poﬁ
;

369 
ngx_buf_t
 *
hódî_ö
;

371 
ngx_hâp_hódîs_ö_t
 
hódîs_ö
;

372 
ngx_hâp_hódîs_out_t
 
hódîs_out
;

374 
ngx_hâp_ªque°_body_t
 *
ªque°_body
;

376 
time_t
 
lögîög_time
;

377 
time_t
 
°¨t_£c
;

378 
ngx_m£c_t
 
°¨t_m£c
;

380 
ngx_uöt_t
 
mëhod
;

381 
ngx_uöt_t
 
hâp_vîsi⁄
;

383 
ngx_°r_t
 
ªque°_löe
;

384 
ngx_°r_t
 
uri
;

385 
ngx_°r_t
 
¨gs
;

386 
ngx_°r_t
 
exãn
;

387 
ngx_°r_t
 
u≈¨£d_uri
;

389 
ngx_°r_t
 
mëhod_«me
;

390 
ngx_°r_t
 
hâp_¥Ÿocﬁ
;

392 
ngx_chaö_t
 *
out
;

393 
ngx_hâp_ªque°_t
 *
maö
;

394 
ngx_hâp_ªque°_t
 *
∑ª¡
;

395 
ngx_hâp_po°p⁄ed_ªque°_t
 *
po°p⁄ed
;

396 
ngx_hâp_po°_subªque°_t
 *
po°_subªque°
;

397 
ngx_hâp_po°ed_ªque°_t
 *
po°ed_ªque°s
;

399 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

401 
ngx_öt_t
 
pha£_h™dÀr
;

402 
ngx_hâp_h™dÀr_±
 
c⁄ã¡_h™dÀr
;

403 
ngx_uöt_t
 
ac˚ss_code
;

405 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨übÀs
;

407 #i‡(
NGX_PCRE
)

408 
ngx_uöt_t
 
nˇ±uªs
;

409 *
ˇ±uªs
;

410 
u_ch¨
 *
ˇ±uªs_d©a
;

413 
size_t
 
limô_øã
;

416 
size_t
 
hódî_size
;

418 
off_t
 
ªque°_Àngth
;

420 
ngx_uöt_t
 
îr_°©us
;

422 
ngx_hâp_c⁄√˘i⁄_t
 *
hâp_c⁄√˘i⁄
;

424 
ngx_hâp_log_h™dÀr_±
 
log_h™dÀr
;

426 
ngx_hâp_˛ónup_t
 *
˛ónup
;

428 
subªque°s
:8;

429 
cou¡
:8;

430 
blocked
:8;

432 
aio
:1;

434 
hâp_°©e
:4;

437 
com∂ex_uri
:1;

440 
quŸed_uri
:1;

443 
∂us_ö_uri
:1;

446 
•a˚_ö_uri
:1;

448 
övÆid_hódî
:1;

450 
add_uri_to_Æüs
:1;

451 
vÆid_loˇti⁄
:1;

452 
vÆid_u≈¨£d_uri
:1;

453 
uri_ch™ged
:1;

454 
uri_ch™ges
:4;

456 
ªque°_body_ö_sögÀ_buf
:1;

457 
ªque°_body_ö_fûe_⁄ly
:1;

458 
ªque°_body_ö_≥rsi°ít_fûe
:1;

459 
ªque°_body_ö_˛ón_fûe
:1;

460 
ªque°_body_fûe_group_ac˚ss
:1;

461 
ªque°_body_fûe_log_Àvñ
:3;

463 
subªque°_ö_mem‹y
:1;

464 
waôed
:1;

466 #i‡(
NGX_HTTP_CACHE
)

467 
ˇched
:1;

470 #i‡(
NGX_HTTP_GZIP
)

471 
gzù_ã°ed
:1;

472 
gzù_ok
:1;

473 
gzù_v¨y
:1;

476 
¥oxy
:1;

477 
by∑ss_ˇche
:1;

478 
no_ˇche
:1;

485 
limô_z⁄e_£t
:1;

486 
limô_ªq_£t
:1;

489 
ˇchóbÀ
:1;

492 
pùñöe
:1;

493 
∂aö_hâp
:1;

494 
chunked
:1;

495 
hódî_⁄ly
:1;

496 
kì∑live
:1;

497 
lögîög_˛o£
:1;

498 
disˇrd_body
:1;

499 
öã∫Æ
:1;

500 
îr‹_∑ge
:1;

501 
ign‹e_c⁄ã¡_ícodög
:1;

502 
fûãr_föÆize
:1;

503 
po°_a˘i⁄
:1;

504 
ªque°_com∂ëe
:1;

505 
ªque°_ouçut
:1;

506 
hódî_£¡
:1;

507 
ex≥˘_ã°ed
:1;

508 
roŸ_ã°ed
:1;

509 
d⁄e
:1;

510 
logged
:1;

512 
buf„ªd
:4;

514 
maö_fûãr_√ed_ö_mem‹y
:1;

515 
fûãr_√ed_ö_mem‹y
:1;

516 
fûãr_√ed_ãmp‹¨y
:1;

517 
Ælow_ønges
:1;

519 #i‡(
NGX_STAT_STUB
)

520 
°©_ªadög
:1;

521 
°©_wrôög
:1;

526 
ngx_uöt_t
 
°©e
;

528 
ngx_uöt_t
 
hódî_hash
;

529 
ngx_uöt_t
 
lowˇ£_ödex
;

530 
u_ch¨
 
lowˇ£_hódî
[
NGX_HTTP_LC_HEADER_LEN
];

532 
u_ch¨
 *
hódî_«me_°¨t
;

533 
u_ch¨
 *
hódî_«me_íd
;

534 
u_ch¨
 *
hódî_°¨t
;

535 
u_ch¨
 *
hódî_íd
;

542 
u_ch¨
 *
uri_°¨t
;

543 
u_ch¨
 *
uri_íd
;

544 
u_ch¨
 *
uri_ext
;

545 
u_ch¨
 *
¨gs_°¨t
;

546 
u_ch¨
 *
ªque°_°¨t
;

547 
u_ch¨
 *
ªque°_íd
;

548 
u_ch¨
 *
mëhod_íd
;

549 
u_ch¨
 *
schema_°¨t
;

550 
u_ch¨
 *
schema_íd
;

551 
u_ch¨
 *
ho°_°¨t
;

552 
u_ch¨
 *
ho°_íd
;

553 
u_ch¨
 *
p‹t_°¨t
;

554 
u_ch¨
 *
p‹t_íd
;

556 
hâp_mö‹
:16;

557 
hâp_maj‹
:16;

562 
ngx_hâp_po°ed_ªque°_t
 
ãrmöÆ_po°ed_ªque°
;

563 #i‡(
NGX_HAVE_AIO_SENDFILE
)

564 
u_ch¨
 
aio_¥ñﬂd
;

566 } 
	tngx_hâp_ïhemîÆ_t
;

569 
ngx_hâp_hódî_t
 
ngx_hâp_hódîs_ö
[];

570 
ngx_hâp_hódî_out_t
 
ngx_hâp_hódîs_out
[];

	@src/http/ngx_http_request_body.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_öt_t
 
ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

16 
ngx_chaö_t
 *
body
);

17 
ngx_öt_t
 
ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

18 
ngx_öt_t
 
ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_öt_t


29 
	$ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

32 
size_t
 
¥îód
;

33 
ssize_t
 
size
;

34 
ngx_buf_t
 *
b
;

35 
ngx_chaö_t
 *
˛
, **
√xt
;

36 
ngx_ãmp_fûe_t
 *
tf
;

37 
ngx_hâp_ªque°_body_t
 *
rb
;

38 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

40 
r
->
maö
->
cou¡
++;

42 i‡(
r
->
ªque°_body
 ||Ñ->
disˇrd_body
) {

43 
	`po°_h™dÀr
(
r
);

44  
NGX_OK
;

47 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

48  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

51 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

52 i‡(
rb
 =
NULL
) {

53  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

56 
r
->
ªque°_body
 = 
rb
;

58 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0) {

59 
	`po°_h™dÀr
(
r
);

60  
NGX_OK
;

63 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

65 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

67 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
) {

68 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

69 i‡(
tf
 =
NULL
) {

70  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

73 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

74 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

75 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

76 
tf
->
poﬁ
 = 
r
->pool;

77 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

78 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

79 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

80 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

82 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

83 
tf
->
ac˚ss
 = 0660;

86 
rb
->
ãmp_fûe
 = 
tf
;

88 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

89 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

90 !
NGX_OK
)

92  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

96 
	`po°_h™dÀr
(
r
);

98  
NGX_OK
;

101 
rb
->
po°_h™dÀr
 =Öost_handler;

111 
¥îód
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

113 i‡(
¥îód
) {

117 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

118 "hâ∞˛õ¡Ñeque° bodyÖªªad %uz", 
¥îód
);

120 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

121 i‡(
b
 =
NULL
) {

122  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

125 
b
->
ãmp‹¨y
 = 1;

126 
b
->
°¨t
 = 
r
->
hódî_ö
->
pos
;

127 
b
->
pos
 = 
r
->
hódî_ö
->pos;

128 
b
->
œ°
 = 
r
->
hódî_ö
->last;

129 
b
->
íd
 = 
r
->
hódî_ö
->end;

131 
rb
->
bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

132 i‡(
rb
->
bufs
 =
NULL
) {

133  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

136 
rb
->
bufs
->
buf
 = 
b
;

137 
rb
->
bufs
->
√xt
 = 
NULL
;

139 
rb
->
buf
 = 
b
;

141 i‡((
off_t
Ë
¥îód
 >
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) {

145 
r
->
hódî_ö
->
pos
 +(
size_t
Ër->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

146 
r
->
ªque°_Àngth
 +r->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

147 
b
->
œ°
 = 
r
->
hódî_ö
->
pos
;

149 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
) {

150 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
, 
rb
->
bufs
Ë!
NGX_OK
) {

151  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

155 
	`po°_h™dÀr
(
r
);

157  
NGX_OK
;

164 
r
->
hódî_ö
->
pos
 =Ñ->hódî_ö->
œ°
;

166 
r
->
ªque°_Àngth
 +
¥îód
;

168 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 - 
¥îód
;

170 i‡(
rb
->
ª°
 <(
off_t
Ë(
b
->
íd
 - b->
œ°
)) {

174 
rb
->
to_wrôe
 =Ñb->
bufs
;

176 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

178  
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

181 
√xt
 = &
rb
->
bufs
->next;

184 
b
 = 
NULL
;

185 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

186 
√xt
 = &
rb
->
bufs
;

189 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

190 
size
 += size >> 2;

192 i‡(
rb
->
ª°
 < 
size
) {

193 
size
 = (
ssize_t
Ë
rb
->
ª°
;

195 i‡(
r
->
ªque°_body_ö_sögÀ_buf
) {

196 
size
 +
¥îód
;

200 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

203 
b
 = 
NULL
;

206 
rb
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

207 i‡(
rb
->
buf
 =
NULL
) {

208  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

212 i‡(
˛
 =
NULL
) {

213  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

216 
˛
->
buf
 = 
rb
->buf;

217 
˛
->
√xt
 = 
NULL
;

219 i‡(
b
 && 
r
->
ªque°_body_ö_sögÀ_buf
) {

220 
size
 = 
b
->
œ°
 - b->
pos
;

221 
	`ngx_mem˝y
(
rb
->
buf
->
pos
, 
b
->pos, 
size
);

222 
rb
->
buf
->
œ°
 +
size
;

224 
√xt
 = &
rb
->
bufs
;

227 *
√xt
 = 
˛
;

229 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
 ||Ñ->
ªque°_body_ö_sögÀ_buf
) {

230 
rb
->
to_wrôe
 =Ñb->
bufs
;

233 
rb
->
to_wrôe
 =Ñb->
bufs
->
√xt
 ?Ñb->bufs->next :Ñb->bufs;

236 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

238  
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

239 
	}
}

243 
	$ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

245 
ngx_öt_t
 
rc
;

247 i‡(
r
->
c⁄√˘i⁄
->
ªad
->
timedout
) {

248 
r
->
c⁄√˘i⁄
->
timedout
 = 1;

249 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

253 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

255 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

256 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

258 
	}
}

261 
ngx_öt_t


262 
	$ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

264 
size_t
 
size
;

265 
ssize_t
 
n
;

266 
ngx_buf_t
 *
b
;

267 
ngx_c⁄√˘i⁄_t
 *
c
;

268 
ngx_hâp_ªque°_body_t
 *
rb
;

269 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

271 
c
 = 
r
->
c⁄√˘i⁄
;

272 
rb
 = 
r
->
ªque°_body
;

274 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

279 i‡(
rb
->
buf
->
œ°
 =rb->buf->
íd
) {

281 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
, 
rb
->
to_wrôe
Ë!
NGX_OK
) {

282  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

285 
rb
->
to_wrôe
 =Ñb->
bufs
->
√xt
 ?Ñb->bufs->next :Ñb->bufs;

286 
rb
->
buf
->
œ°
 =Ñb->buf->
°¨t
;

289 
size
 = 
rb
->
buf
->
íd
 -Ñb->buf->
œ°
;

291 i‡((
off_t
Ë
size
 > 
rb
->
ª°
) {

292 
size
 = (
size_t
Ë
rb
->
ª°
;

295 
n
 = 
c
->
	`ªcv
(c, 
rb
->
buf
->
œ°
, 
size
);

297 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

298 "hâ∞˛õ¡Ñeque° bodyÑecv %z", 
n
);

300 i‡(
n
 =
NGX_AGAIN
) {

304 i‡(
n
 == 0) {

305 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

309 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

310 
c
->
îr‹
 = 1;

311  
NGX_HTTP_BAD_REQUEST
;

314 
rb
->
buf
->
œ°
 +
n
;

315 
rb
->
ª°
 -
n
;

316 
r
->
ªque°_Àngth
 +
n
;

318 i‡(
rb
->
ª°
 == 0) {

322 i‡(
rb
->
buf
->
œ°
 <Ñb->buf->
íd
) {

327 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

328 "hâ∞˛õ¡Ñeque° bodyÑe° %O", 
rb
->
ª°
);

330 i‡(
rb
->
ª°
 == 0) {

334 i‡(!
c
->
ªad
->
ªady
) {

335 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

336 
	`ngx_add_timî
(
c
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

338 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

339  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

342  
NGX_AGAIN
;

346 i‡(
c
->
ªad
->
timî_£t
) {

347 
	`ngx_dñ_timî
(
c
->
ªad
);

350 i‡(
rb
->
ãmp_fûe
 || 
r
->
ªque°_body_ö_fûe_⁄ly
) {

354 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
, 
rb
->
to_wrôe
Ë!
NGX_OK
) {

355  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

358 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

359 i‡(
b
 =
NULL
) {

360  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

363 
b
->
ö_fûe
 = 1;

364 
b
->
fûe_pos
 = 0;

365 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

366 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

368 i‡(
rb
->
bufs
->
√xt
) {

369 
rb
->
bufs
->
√xt
->
buf
 = 
b
;

372 
rb
->
bufs
->
buf
 = 
b
;

376 i‡(
rb
->
bufs
->
√xt


377 && (
r
->
ªque°_body_ö_fûe_⁄ly
 ||Ñ->
ªque°_body_ö_sögÀ_buf
))

379 
rb
->
bufs
 =Ñb->bufs->
√xt
;

382 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

384 
rb
->
	`po°_h™dÀr
(
r
);

386  
NGX_OK
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
body
)

393 
ssize_t
 
n
;

394 
ngx_ãmp_fûe_t
 *
tf
;

395 
ngx_hâp_ªque°_body_t
 *
rb
;

396 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

398 
rb
 = 
r
->
ªque°_body
;

400 i‡(
rb
->
ãmp_fûe
 =
NULL
) {

401 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

402 i‡(
tf
 =
NULL
) {

403  
NGX_ERROR
;

406 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

408 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

409 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

410 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

411 
tf
->
poﬁ
 = 
r
->pool;

412 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

413 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

414 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

415 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

417 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

418 
tf
->
ac˚ss
 = 0660;

421 
rb
->
ãmp_fûe
 = 
tf
;

424 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
rb
->
ãmp_fûe
, 
body
);

428 i‡(
n
 =
NGX_ERROR
) {

429  
NGX_ERROR
;

432 
rb
->
ãmp_fûe
->
off£t
 +
n
;

434  
NGX_OK
;

435 
	}
}

438 
ngx_öt_t


439 
	$ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

441 
ssize_t
 
size
;

442 
ngx_evít_t
 *
ªv
;

444 i‡(
r
 !r->
maö
 ||Ñ->
disˇrd_body
) {

445  
NGX_OK
;

448 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

449  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

452 
ªv
 = 
r
->
c⁄√˘i⁄
->
ªad
;

454 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "http set discard body");

456 i‡(
ªv
->
timî_£t
) {

457 
	`ngx_dñ_timî
(
ªv
);

460 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 <0 ||Ñ->
ªque°_body
) {

461  
NGX_OK
;

464 
size
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

466 i‡(
size
) {

467 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 
size
) {

468 
r
->
hódî_ö
->
pos
 +
size
;

469 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 -
size
;

472 
r
->
hódî_ö
->
pos
 +(
size_t
Ër->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

473 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

474  
NGX_OK
;

478 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

480 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

481  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

484 i‡(
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
Ë=
NGX_OK
) {

485 
r
->
lögîög_˛o£
 = 0;

488 
r
->
cou¡
++;

489 
r
->
disˇrd_body
 = 1;

492  
NGX_OK
;

493 
	}
}

497 
	$ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

499 
ngx_öt_t
 
rc
;

500 
ngx_m£c_t
 
timî
;

501 
ngx_evít_t
 *
ªv
;

502 
ngx_c⁄√˘i⁄_t
 *
c
;

503 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

505 
c
 = 
r
->
c⁄√˘i⁄
;

506 
ªv
 = 
c
->
ªad
;

508 i‡(
ªv
->
timedout
) {

509 
c
->
timedout
 = 1;

510 
c
->
îr‹
 = 1;

511 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

515 i‡(
r
->
lögîög_time
) {

516 
timî
 = (
ngx_m£c_t
Ë(
r
->
lögîög_time
 - 
	`ngx_time
());

518 i‡(
timî
 <= 0) {

519 
r
->
disˇrd_body
 = 0;

520 
r
->
lögîög_˛o£
 = 0;

521 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

526 
timî
 = 0;

529 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

531 i‡(
rc
 =
NGX_OK
) {

532 
r
->
disˇrd_body
 = 0;

533 
r
->
lögîög_˛o£
 = 0;

534 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

540 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

541 
c
->
îr‹
 = 1;

542 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

546 i‡(
timî
) {

548 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

550 
timî
 *= 1000;

552 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

553 
timî
 = 
˛cf
->
lögîög_timeout
;

556 
	`ngx_add_timî
(
ªv
, 
timî
);

558 
	}
}

561 
ngx_öt_t


562 
	$ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

564 
size_t
 
size
;

565 
ssize_t
 
n
;

566 
u_ch¨
 
buf„r
[
NGX_HTTP_DISCARD_BUFFER_SIZE
];

568 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

572 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

573 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

574  
NGX_OK
;

577 i‡(!
r
->
c⁄√˘i⁄
->
ªad
->
ªady
) {

578  
NGX_AGAIN
;

581 
size
 = (
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 
NGX_HTTP_DISCARD_BUFFER_SIZE
) ?

582 
NGX_HTTP_DISCARD_BUFFER_SIZE
:

583 (
size_t
Ë
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

585 
n
 = 
r
->
c⁄√˘i⁄
->
	`ªcv
‘->c⁄√˘i⁄, 
buf„r
, 
size
);

587 i‡(
n
 =
NGX_ERROR
) {

588 
r
->
c⁄√˘i⁄
->
îr‹
 = 1;

589  
NGX_OK
;

592 i‡(
n
 =
NGX_AGAIN
) {

593  
NGX_AGAIN
;

596 i‡(
n
 == 0) {

597  
NGX_OK
;

600 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 -
n
;

602 
	}
}

605 
ngx_öt_t


606 
	$ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
)

608 
ngx_öt_t
 
n
;

609 
ngx_°r_t
 *
ex≥˘
;

611 i‡(
r
->
ex≥˘_ã°ed


612 || 
r
->
hódîs_ö
.
ex≥˘
 =
NULL


613 || 
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
)

615  
NGX_OK
;

618 
r
->
ex≥˘_ã°ed
 = 1;

620 
ex≥˘
 = &
r
->
hódîs_ö
.ex≥˘->
vÆue
;

622 i‡(
ex≥˘
->
Àn
 != ("100-continue") - 1

623 || 
	`ngx_°∫ˇ£cmp
(
ex≥˘
->
d©a
, (
u_ch¨
 *) "100-continue",

627  
NGX_OK
;

630 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

633 
n
 = 
r
->
c⁄√˘i⁄
->
	`£nd
(r->connection,

634 (
u_ch¨
 *Ë"HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF,

635 ("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1);

637 i‡(
n
 =("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1) {

638  
NGX_OK
;

643  
NGX_ERROR
;

644 
	}
}

	@src/http/ngx_http_script.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

14 
ngx_öt_t
 
ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

15 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

16 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
œ°
);

17 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

18 
ngx_°r_t
 *
«me
);

19 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

20 #i‡(
NGX_PCRE
)

21 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

22 
ngx_uöt_t
 
n
);

24 
ngx_öt_t


25 
ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

26 
size_t
 
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

27 
ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

30 
	#ngx_hâp_s¸ùt_exô
 (
u_ch¨
 *Ë&
ngx_hâp_s¸ùt_exô_code


	)

32 
uöçå_t
 
	gngx_hâp_s¸ùt_exô_code
 = (uöçå_tË
NULL
;

36 
	$ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
)

39 
ngx_uöt_t
 *
ödex
;

41 
ödex
 = 
vÆ
->
Êushes
;

43 i‡(
ödex
) {

44 *
ödex
 !(
ngx_uöt_t
) -1) {

46 i‡(
r
->
v¨übÀs
[*
ödex
].
no_ˇchóbÀ
) {

47 
r
->
v¨übÀs
[*
ödex
].
vÆid
 = 0;

48 
r
->
v¨übÀs
[*
ödex
].
nŸ_found
 = 0;

51 
ödex
++;

54 
	}
}

57 
ngx_öt_t


58 
	$ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
,

59 
ngx_°r_t
 *
vÆue
)

61 
size_t
 
Àn
;

62 
ngx_hâp_s¸ùt_code_±
 
code
;

63 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

64 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

66 i‡(
vÆ
->
Àngths
 =
NULL
) {

67 *
vÆue
 = 
vÆ
->value;

68  
NGX_OK
;

71 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
r
, 
vÆ
);

73 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

75 
e
.
ù
 = 
vÆ
->
Àngths
;

76 
e
.
ªque°
 = 
r
;

77 
e
.
Êushed
 = 1;

79 
Àn
 = 0;

81 *(
uöçå_t
 *Ë
e
.
ù
) {

82 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

83 
Àn
 +
	`lcode
(&
e
);

86 
vÆue
->
Àn
 =Üen;

87 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

88 i‡(
vÆue
->
d©a
 =
NULL
) {

89  
NGX_ERROR
;

92 
e
.
ù
 = 
vÆ
->
vÆues
;

93 
e
.
pos
 = 
vÆue
->
d©a
;

94 
e
.
buf
 = *
vÆue
;

96 *(
uöçå_t
 *Ë
e
.
ù
) {

97 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

98 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

101 *
vÆue
 = 
e
.
buf
;

103  
NGX_OK
;

104 
	}
}

107 
ngx_öt_t


108 
	$ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
)

110 
ngx_°r_t
 *
v
;

111 
ngx_uöt_t
 
i
, 
n
, 
nv
, 
nc
;

112 
ngx_¨øy_t
 
Êushes
, 
Àngths
, 
vÆues
, *
pf
, *
∂
, *
pv
;

113 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

115 
v
 = 
ccv
->
vÆue
;

117 i‡(
v
->
Àn
 == 0) {

118 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
ccv
->
cf
, 0, "emptyÖarameter");

119  
NGX_ERROR
;

122 
nv
 = 0;

123 
nc
 = 0;

125 
i
 = 0; i < 
v
->
Àn
; i++) {

126 i‡(
v
->
d©a
[
i
] == '$') {

127 i‡(
v
->
d©a
[
i
 + 1] >= '1' && v->data[i + 1] <= '9') {

128 
nc
++;

131 
nv
++;

136 i‡(
v
->
d©a
[0] !'$' && (
ccv
->
c⁄f_¥efix
 || ccv->
roŸ_¥efix
)) {

138 i‡(
	`ngx_c⁄f_fuŒ_«me
(
ccv
->
cf
->
cy˛e
, 
v
, ccv->
c⁄f_¥efix
Ë!
NGX_OK
) {

139  
NGX_ERROR
;

142 
ccv
->
c⁄f_¥efix
 = 0;

143 
ccv
->
roŸ_¥efix
 = 0;

146 
ccv
->
com∂ex_vÆue
->
vÆue
 = *
v
;

147 
ccv
->
com∂ex_vÆue
->
Êushes
 = 
NULL
;

148 
ccv
->
com∂ex_vÆue
->
Àngths
 = 
NULL
;

149 
ccv
->
com∂ex_vÆue
->
vÆues
 = 
NULL
;

151 i‡(
nv
 =0 && 
nc
 == 0) {

152  
NGX_OK
;

155 
n
 = 
nv
 + 1;

157 i‡(
	`ngx_¨øy_öô
(&
Êushes
, 
ccv
->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
))

158 !
NGX_OK
)

160  
NGX_ERROR
;

163 
n
 = 
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

164 + (
ngx_hâp_s¸ùt_v¨_code_t
))

165 + (
uöçå_t
);

167 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

168  
NGX_ERROR
;

171 
n
 = (
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

172 + (
ngx_hâp_s¸ùt_v¨_code_t
))

173 + (
uöçå_t
)

174 + 
v
->
Àn


175 + (
uöçå_t
) - 1)

176 & ~((
uöçå_t
) - 1);

178 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

179  
NGX_ERROR
;

182 
pf
 = &
Êushes
;

183 
∂
 = &
Àngths
;

184 
pv
 = &
vÆues
;

186 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

188 
sc
.
cf
 = 
ccv
->cf;

189 
sc
.
sour˚
 = 
v
;

190 
sc
.
Êushes
 = &
pf
;

191 
sc
.
Àngths
 = &
∂
;

192 
sc
.
vÆues
 = &
pv
;

193 
sc
.
com∂ëe_Àngths
 = 1;

194 
sc
.
com∂ëe_vÆues
 = 1;

195 
sc
.
zîo
 = 
ccv
->zero;

196 
sc
.
c⁄f_¥efix
 = 
ccv
->conf_prefix;

197 
sc
.
roŸ_¥efix
 = 
ccv
->root_prefix;

199 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

200  
NGX_ERROR
;

203 i‡(
Êushes
.
√…s
) {

204 
ccv
->
com∂ex_vÆue
->
Êushes
 = flushes.
ñts
;

205 
ccv
->
com∂ex_vÆue
->
Êushes
[Êushes.
√…s
] = (
ngx_uöt_t
) -1;

208 
ccv
->
com∂ex_vÆue
->
Àngths
 =Üígths.
ñts
;

209 
ccv
->
com∂ex_vÆue
->
vÆues
 = vÆues.
ñts
;

211  
NGX_OK
;

212 
	}
}

216 
	$ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

218 *
p
 = 
c⁄f
;

220 
ngx_°r_t
 *
vÆue
;

221 
ngx_hâp_com∂ex_vÆue_t
 **
cv
;

222 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

224 
cv
 = (
ngx_hâp_com∂ex_vÆue_t
 **Ë(
p
 + 
cmd
->
off£t
);

226 i‡(*
cv
 !
NULL
) {

230 *
cv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

231 i‡(*
cv
 =
NULL
) {

232  
NGX_CONF_ERROR
;

235 
vÆue
 = 
cf
->
¨gs
->
ñts
;

237 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

239 
ccv
.
cf
 = cf;

240 
ccv
.
vÆue
 = &value[1];

241 
ccv
.
com∂ex_vÆue
 = *
cv
;

243 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

244  
NGX_CONF_ERROR
;

247  
NGX_CONF_OK
;

248 
	}
}

251 
ngx_öt_t


252 
	$ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
¥ediˇãs
)

254 
ngx_°r_t
 
vÆ
;

255 
ngx_uöt_t
 
i
;

256 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

258 i‡(
¥ediˇãs
 =
NULL
) {

259  
NGX_OK
;

262 
cv
 = 
¥ediˇãs
->
ñts
;

264 
i
 = 0; i < 
¥ediˇãs
->
√…s
; i++) {

265 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
cv
[
i
], &
vÆ
Ë!
NGX_OK
) {

266  
NGX_ERROR
;

269 i‡(
vÆ
.
Àn
 && (vÆ.À¿!1 || vÆ.
d©a
[0] != '0')) {

270  
NGX_DECLINED
;

274  
NGX_OK
;

275 
	}
}

279 
	$ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

281 *
p
 = 
c⁄f
;

283 
ngx_°r_t
 *
vÆue
;

284 
ngx_uöt_t
 
i
;

285 
ngx_¨øy_t
 **
a
;

286 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

287 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

289 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

291 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

292 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_com∂ex_vÆue_t
));

293 i‡(*
a
 =
NULL
) {

294  
NGX_CONF_ERROR
;

298 
vÆue
 = 
cf
->
¨gs
->
ñts
;

300 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

301 
cv
 = 
	`ngx_¨øy_push
(*
a
);

302 i‡(
cv
 =
NULL
) {

303  
NGX_CONF_ERROR
;

306 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

308 
ccv
.
cf
 = cf;

309 
ccv
.
vÆue
 = &vÆue[
i
];

310 
ccv
.
com∂ex_vÆue
 = 
cv
;

312 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

313  
NGX_CONF_ERROR
;

317  
NGX_CONF_OK
;

318 
	}
}

321 
ngx_uöt_t


322 
	$ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
)

324 
ngx_uöt_t
 
i
, 
n
;

326 
n
 = 0, 
i
 = 0; i < 
vÆue
->
Àn
; i++) {

327 i‡(
vÆue
->
d©a
[
i
] == '$') {

328 
n
++;

332  
n
;

333 
	}
}

336 
ngx_öt_t


337 
	$ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

339 
u_ch¨
 
ch
;

340 
ngx_°r_t
 
«me
;

341 
ngx_uöt_t
 
i
, 
bøckë
;

343 i‡(
	`ngx_hâp_s¸ùt_öô_¨øys
(
sc
Ë!
NGX_OK
) {

344  
NGX_ERROR
;

347 
i
 = 0; i < 
sc
->
sour˚
->
Àn
; ) {

349 
«me
.
Àn
 = 0;

351 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

353 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

354 
övÆid_v¨übÀ
;

357 #i‡(
NGX_PCRE
)

359 
ngx_uöt_t
 
n
;

361 i‡(
sc
->
sour˚
->
d©a
[
i
] >= '1' && sc->source->data[i] <= '9') {

363 
n
 = 
sc
->
sour˚
->
d©a
[
i
] - '0';

365 i‡(
sc
->
ˇ±uªs_mask
 & (1 << 
n
)) {

366 
sc
->
dup_ˇ±uª
 = 1;

369 
sc
->
ˇ±uªs_mask
 |1 << 
n
;

371 i‡(
	`ngx_hâp_s¸ùt_add_ˇ±uª_code
(
sc
, 
n
Ë!
NGX_OK
) {

372  
NGX_ERROR
;

375 
i
++;

382 i‡(
sc
->
sour˚
->
d©a
[
i
] == '{') {

383 
bøckë
 = 1;

385 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

386 
övÆid_v¨übÀ
;

389 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

392 
bøckë
 = 0;

393 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

396  ; 
i
 < 
sc
->
sour˚
->
Àn
; i++, 
«me
.len++) {

397 
ch
 = 
sc
->
sour˚
->
d©a
[
i
];

399 i‡(
ch
 ='}' && 
bøckë
) {

400 
i
++;

401 
bøckë
 = 0;

405 i‡((
ch
 >= 'A' && ch <= 'Z')

406 || (
ch
 >= 'a' && ch <= 'z')

407 || (
ch
 >= '0' && ch <= '9')

408 || 
ch
 == '_')

416 i‡(
bøckë
) {

417 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

419 "v¨übÀ i†missög", &
«me
);

420  
NGX_ERROR
;

423 i‡(
«me
.
Àn
 == 0) {

424 
övÆid_v¨übÀ
;

427 
sc
->
v¨übÀs
++;

429 i‡(
	`ngx_hâp_s¸ùt_add_v¨_code
(
sc
, &
«me
Ë!
NGX_OK
) {

430  
NGX_ERROR
;

436 i‡(
sc
->
sour˚
->
d©a
[
i
] ='?' && sc->
compûe_¨gs
) {

437 
sc
->
¨gs
 = 1;

438 
sc
->
compûe_¨gs
 = 0;

440 i‡(
	`ngx_hâp_s¸ùt_add_¨gs_code
(
sc
Ë!
NGX_OK
) {

441  
NGX_ERROR
;

444 
i
++;

449 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

451 
i
 < 
sc
->
sour˚
->
Àn
) {

453 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

457 i‡(
sc
->
sour˚
->
d©a
[
i
] == '?') {

459 
sc
->
¨gs
 = 1;

461 i‡(
sc
->
compûe_¨gs
) {

466 
i
++;

467 
«me
.
Àn
++;

470 
sc
->
size
 +
«me
.
Àn
;

472 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
«me
, (
i
 =sc->
sour˚
->
Àn
))

473 !
NGX_OK
)

475  
NGX_ERROR
;

479  
	`ngx_hâp_s¸ùt_d⁄e
(
sc
);

481 
övÆid_v¨übÀ
:

483 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0, "invalid variableÇame");

485  
NGX_ERROR
;

486 
	}
}

489 
u_ch¨
 *

490 
	$ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

491 *
code_Àngths
, 
size_t
 
Àn
, *
code_vÆues
)

493 
ngx_uöt_t
 
i
;

494 
ngx_hâp_s¸ùt_code_±
 
code
;

495 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

496 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

497 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

499 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

501 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

502 i‡(
r
->
v¨übÀs
[
i
].
no_ˇchóbÀ
) {

503 
r
->
v¨übÀs
[
i
].
vÆid
 = 0;

504 
r
->
v¨übÀs
[
i
].
nŸ_found
 = 0;

508 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

510 
e
.
ù
 = 
code_Àngths
;

511 
e
.
ªque°
 = 
r
;

512 
e
.
Êushed
 = 1;

514 *(
uöçå_t
 *Ë
e
.
ù
) {

515 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

516 
Àn
 +
	`lcode
(&
e
);

520 
vÆue
->
Àn
 =Üen;

521 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

522 i‡(
vÆue
->
d©a
 =
NULL
) {

523  
NULL
;

526 
e
.
ù
 = 
code_vÆues
;

527 
e
.
pos
 = 
vÆue
->
d©a
;

529 *(
uöçå_t
 *Ë
e
.
ù
) {

530 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

531 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

534  
e
.
pos
;

535 
	}
}

539 
	$ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

540 
ngx_¨øy_t
 *
ödi˚s
)

542 
ngx_uöt_t
 
n
, *
ödex
;

544 i‡(
ödi˚s
) {

545 
ödex
 = 
ödi˚s
->
ñts
;

546 
n
 = 0;Ç < 
ödi˚s
->
√…s
;Ç++) {

547 i‡(
r
->
v¨übÀs
[
ödex
[
n
]].
no_ˇchóbÀ
) {

548 
r
->
v¨übÀs
[
ödex
[
n
]].
vÆid
 = 0;

549 
r
->
v¨übÀs
[
ödex
[
n
]].
nŸ_found
 = 0;

553 
	}
}

556 
ngx_öt_t


557 
	$ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

559 
ngx_uöt_t
 
n
;

561 i‡(
sc
->
Êushes
 && *sc->Êushe†=
NULL
) {

562 
n
 = 
sc
->
v¨übÀs
 ? sc->variables : 1;

563 *
sc
->
Êushes
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
));

564 i‡(*
sc
->
Êushes
 =
NULL
) {

565  
NGX_ERROR
;

569 i‡(*
sc
->
Àngths
 =
NULL
) {

570 
n
 = 
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

571 + (
ngx_hâp_s¸ùt_v¨_code_t
))

572 + (
uöçå_t
);

574 *
sc
->
Àngths
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

575 i‡(*
sc
->
Àngths
 =
NULL
) {

576  
NGX_ERROR
;

580 i‡(*
sc
->
vÆues
 =
NULL
) {

581 
n
 = (
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

582 + (
ngx_hâp_s¸ùt_v¨_code_t
))

583 + (
uöçå_t
)

584 + 
sc
->
sour˚
->
Àn


585 + (
uöçå_t
) - 1)

586 & ~((
uöçå_t
) - 1);

588 *
sc
->
vÆues
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

589 i‡(*
sc
->
vÆues
 =
NULL
) {

590  
NGX_ERROR
;

594 
sc
->
v¨übÀs
 = 0;

596  
NGX_OK
;

597 
	}
}

600 
ngx_öt_t


601 
	$ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

603 
ngx_°r_t
 
zîo
;

604 
uöçå_t
 *
code
;

606 i‡(
sc
->
zîo
) {

608 
zîo
.
Àn
 = 1;

609 
zîo
.
d©a
 = (
u_ch¨
 *) "\0";

611 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
zîo
, 0Ë!
NGX_OK
) {

612  
NGX_ERROR
;

616 i‡(
sc
->
c⁄f_¥efix
 || sc->
roŸ_¥efix
) {

617 i‡(
	`ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
sc
Ë!
NGX_OK
) {

618  
NGX_ERROR
;

622 i‡(
sc
->
com∂ëe_Àngths
) {

623 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

624 i‡(
code
 =
NULL
) {

625  
NGX_ERROR
;

628 *
code
 = (
uöçå_t
Ë
NULL
;

631 i‡(
sc
->
com∂ëe_vÆues
) {

632 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
),

633 &
sc
->
maö
);

634 i‡(
code
 =
NULL
) {

635  
NGX_ERROR
;

638 *
code
 = (
uöçå_t
Ë
NULL
;

641  
NGX_OK
;

642 
	}
}

646 
	$ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
, 
size_t
 
size
)

648 i‡(*
codes
 =
NULL
) {

649 *
codes
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 256, 1);

650 i‡(*
codes
 =
NULL
) {

651  
NULL
;

655  
	`ngx_¨øy_push_n
(*
codes
, 
size
);

656 
	}
}

660 
	$ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
)

662 
u_ch¨
 *
ñts
, **
p
;

663 *
√w
;

665 
ñts
 = 
codes
->elts;

667 
√w
 = 
	`ngx_¨øy_push_n
(
codes
, 
size
);

668 i‡(
√w
 =
NULL
) {

669  
NULL
;

672 i‡(
code
) {

673 i‡(
ñts
 !
codes
->elts) {

674 
p
 = 
code
;

675 *
p
 +(
u_ch¨
 *Ë
codes
->
ñts
 -Élts;

679  
√w
;

680 
	}
}

683 
ngx_öt_t


684 
	$ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
vÆue
,

685 
ngx_uöt_t
 
œ°
)

687 
u_ch¨
 *
p
;

688 
size_t
 
size
, 
Àn
, 
zîo
;

689 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

691 
zîo
 = (
sc
->zîÿ&& 
œ°
);

692 
Àn
 = 
vÆue
->À¿+ 
zîo
;

694 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

695 (
ngx_hâp_s¸ùt_c›y_code_t
), 
NULL
);

696 i‡(
code
 =
NULL
) {

697  
NGX_ERROR
;

700 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

701 
code
->
Àn
 =Üen;

703 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
Ë+ 
Àn
 + (
uöçå_t
) - 1)

704 & ~((
uöçå_t
) - 1);

706 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, 
size
, &sc->
maö
);

707 i‡(
code
 =
NULL
) {

708  
NGX_ERROR
;

711 
code
->codê
ngx_hâp_s¸ùt_c›y_code
;

712 
code
->
Àn
 =Üen;

714 
p
 = 
	`ngx_˝ymem
((
u_ch¨
 *Ë
code
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

715 
vÆue
->
d©a
, vÆue->
Àn
);

717 i‡(
zîo
) {

718 *
p
 = '\0';

719 
sc
->
zîo
 = 0;

722  
NGX_OK
;

723 
	}
}

726 
size_t


727 
	$ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

729 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

731 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

733 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
);

735  
code
->
Àn
;

736 
	}
}

740 
	$ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

742 
u_ch¨
 *
p
;

743 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

745 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

747 
p
 = 
e
->
pos
;

749 i‡(!
e
->
skù
) {

750 
e
->
pos
 = 
	`ngx_c›y
(
p
,É->
ù
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

751 
code
->
Àn
);

754 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
)

755 + ((
code
->
Àn
 + (
uöçå_t
) - 1) & ~((uintptr_t) - 1));

757 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

758 "hâ∞s¸ùàc›y: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

759 
	}
}

762 
ngx_öt_t


763 
	$ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
«me
)

765 
ngx_öt_t
 
ödex
, *
p
;

766 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

768 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
sc
->
cf
, 
«me
);

770 i‡(
ödex
 =
NGX_ERROR
) {

771  
NGX_ERROR
;

774 i‡(
sc
->
Êushes
) {

775 
p
 = 
	`ngx_¨øy_push
(*
sc
->
Êushes
);

776 i‡(
p
 =
NULL
) {

777  
NGX_ERROR
;

780 *
p
 = 
ödex
;

783 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

784 (
ngx_hâp_s¸ùt_v¨_code_t
), 
NULL
);

785 i‡(
code
 =
NULL
) {

786  
NGX_ERROR
;

789 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_v¨_Àn_code
;

790 
code
->
ödex
 = (
uöçå_t
) index;

792 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

793 (
ngx_hâp_s¸ùt_v¨_code_t
),

794 &
sc
->
maö
);

795 i‡(
code
 =
NULL
) {

796  
NGX_ERROR
;

799 
code
->codê
ngx_hâp_s¸ùt_c›y_v¨_code
;

800 
code
->
ödex
 = (
uöçå_t
) index;

802  
NGX_OK
;

803 
	}
}

806 
size_t


807 
	$ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

809 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

810 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

812 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

814 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

816 i‡(
e
->
Êushed
) {

817 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

820 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

823 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

824  
vÆue
->
Àn
;

828 
	}
}

832 
	$ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

834 
u_ch¨
 *
p
;

835 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

836 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

838 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

840 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

842 i‡(!
e
->
skù
) {

844 i‡(
e
->
Êushed
) {

845 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

848 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

851 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

852 
p
 = 
e
->
pos
;

853 
e
->
pos
 = 
	`ngx_c›y
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

855 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
,

856 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

857 "hâ∞s¸ùàv¨: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

860 
	}
}

863 
ngx_öt_t


864 
	$ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

866 
uöçå_t
 *
code
;

868 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

869 i‡(
code
 =
NULL
) {

870  
NGX_ERROR
;

873 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_m¨k_¨gs_code
;

875 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
), &sc->
maö
);

876 i‡(
code
 =
NULL
) {

877  
NGX_ERROR
;

880 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_°¨t_¨gs_code
;

882  
NGX_OK
;

883 
	}
}

886 
size_t


887 
	$ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

889 
e
->
is_¨gs
 = 1;

890 
e
->
ù
 +(
uöçå_t
);

893 
	}
}

897 
	$ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

899 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

902 
e
->
is_¨gs
 = 1;

903 
e
->
¨gs
 =É->
pos
;

904 
e
->
ù
 +(
uöçå_t
);

905 
	}
}

908 #i‡(
NGX_PCRE
)

911 
	$ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

913 
size_t
 
Àn
;

914 
ngx_öt_t
 
rc
;

915 
ngx_uöt_t
 
n
;

916 
ngx_hâp_ªque°_t
 *
r
;

917 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

918 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

919 
ngx_hâp_s¸ùt_ªgex_code_t
 *
code
;

921 
code
 = (
ngx_hâp_s¸ùt_ªgex_code_t
 *Ë
e
->
ù
;

923 
r
 = 
e
->
ªque°
;

925 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

926 "hâ∞s¸ùàªgex: \"%V\"", &
code
->
«me
);

928 i‡(
code
->
uri
) {

929 
e
->
löe
 = 
r
->
uri
;

931 
e
->
•
--;

932 
e
->
löe
.
Àn
 =É->
•
->len;

933 
e
->
löe
.
d©a
 =É->
•
->data;

936 
rc
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
code
->
ªgex
, &
e
->
löe
);

938 i‡(
rc
 =
NGX_DECLINED
) {

939 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

940 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

942 &
code
->
«me
, &
e
->
löe
);

945 
r
->
nˇ±uªs
 = 0;

947 i‡(
code
->
ã°
) {

948 i‡(
code
->
√g©ive_ã°
) {

949 
e
->
•
->
Àn
 = 1;

950 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

953 
e
->
•
->
Àn
 = 0;

954 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

957 
e
->
•
++;

959 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

963 
e
->
ù
 +
code
->
√xt
;

967 i‡(
rc
 =
NGX_ERROR
) {

968 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

969 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

973 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

974 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

975 "\"%V\" m©che†\"%V\"", &
code
->
«me
, &
e
->
löe
);

978 i‡(
code
->
ã°
) {

979 i‡(
code
->
√g©ive_ã°
) {

980 
e
->
•
->
Àn
 = 0;

981 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

984 
e
->
•
->
Àn
 = 1;

985 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

988 
e
->
•
++;

990 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

994 i‡(
code
->
°©us
) {

995 
e
->
°©us
 = 
code
->status;

997 i‡(!
code
->
ªdúe˘
) {

998 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1003 i‡(
code
->
uri
) {

1004 
r
->
öã∫Æ
 = 1;

1005 
r
->
vÆid_u≈¨£d_uri
 = 0;

1007 i‡(
code
->
bªak_cy˛e
) {

1008 
r
->
vÆid_loˇti⁄
 = 0;

1009 
r
->
uri_ch™ged
 = 0;

1012 
r
->
uri_ch™ged
 = 1;

1016 i‡(
code
->
Àngths
 =
NULL
) {

1017 
e
->
buf
.
Àn
 = 
code
->
size
;

1019 i‡(
code
->
uri
) {

1020 i‡(
r
->
nˇ±uªs
 && (r->
quŸed_uri
 ||Ñ->
∂us_ö_uri
)) {

1021 
e
->
buf
.
Àn
 +2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.len,

1022 
NGX_ESCAPE_ARGS
);

1026 
n
 = 2;Ç < 
r
->
nˇ±uªs
;Ç += 2) {

1027 
e
->
buf
.
Àn
 +
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

1031 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1033 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1034 
À
.
löe
 = 
e
->line;

1035 
À
.
ªque°
 = 
r
;

1036 
À
.
quŸe
 = 
code
->
ªdúe˘
;

1038 
Àn
 = 0;

1040 *(
uöçå_t
 *Ë
À
.
ù
) {

1041 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1042 
Àn
 +
	`lcode
(&
À
);

1045 
e
->
buf
.
Àn
 =Üen;

1046 
e
->
is_¨gs
 = 
À
.is_args;

1049 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1050 
e
->
buf
.
Àn
 +
r
->
¨gs
.len + 1;

1053 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,É->buf.
Àn
);

1054 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1055 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1056 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1060 
e
->
quŸe
 = 
code
->
ªdúe˘
;

1062 
e
->
pos
 =É->
buf
.
d©a
;

1064 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

1065 
	}
}

1069 
	$ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1071 
u_ch¨
 *
d°
, *
§c
;

1072 
ngx_hâp_ªque°_t
 *
r
;

1073 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
code
;

1075 
code
 = (
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *Ë
e
->
ù
;

1077 
r
 = 
e
->
ªque°
;

1079 
e
->
quŸe
 = 0;

1081 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1084 i‡(
code
->
ªdúe˘
) {

1086 
d°
 = 
e
->
buf
.
d©a
;

1087 
§c
 = 
e
->
buf
.
d©a
;

1089 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
e
->
pos
 -É->
buf
.
d©a
,

1090 
NGX_UNESCAPE_REDIRECT
);

1092 i‡(
§c
 < 
e
->
pos
) {

1093 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
e
->
pos
 - src);

1096 
e
->
pos
 = 
d°
;

1098 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1099 *
e
->
pos
++ = (
u_ch¨
Ë(
code
->
¨gs
 ? '&' : '?');

1100 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1103 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1105 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1106 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1107 "ªwrôã¿ªdúe˘: \"%V\"", &
e
->
buf
);

1110 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1112 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1113 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1114 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1115 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1119 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1120 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1121 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
e
->
buf
;

1123 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1127 i‡(
e
->
¨gs
) {

1128 
e
->
buf
.
Àn
 =É->
¨gs
 -É->buf.
d©a
;

1130 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1131 *
e
->
pos
++ = '&';

1132 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1135 
r
->
¨gs
.
Àn
 = 
e
->
pos
 -É->args;

1136 
r
->
¨gs
.
d©a
 = 
e
->args;

1138 
e
->
¨gs
 = 
NULL
;

1141 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1143 i‡(!
code
->
add_¨gs
) {

1144 
r
->
¨gs
.
Àn
 = 0;

1148 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1149 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1151 &
e
->
buf
, &
r
->
¨gs
);

1154 i‡(
code
->
uri
) {

1155 
r
->
uri
 = 
e
->
buf
;

1157 i‡(
r
->
uri
.
Àn
 == 0) {

1158 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1160 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1161 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1165 
	`ngx_hâp_£t_exãn
(
r
);

1168 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1169 
	}
}

1172 
ngx_öt_t


1173 
	$ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_uöt_t
 
n
)

1175 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1177 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1178 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1179 
NULL
);

1180 i‡(
code
 =
NULL
) {

1181  
NGX_ERROR
;

1184 
code
->codê(
ngx_hâp_s¸ùt_code_±
)

1185 
ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
;

1186 
code
->
n
 = 2 *Ç;

1189 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1190 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1191 &
sc
->
maö
);

1192 i‡(
code
 =
NULL
) {

1193  
NGX_ERROR
;

1196 
code
->codê
ngx_hâp_s¸ùt_c›y_ˇ±uª_code
;

1197 
code
->
n
 = 2 *Ç;

1199 i‡(
sc
->
nˇ±uªs
 < 
n
) {

1200 
sc
->
nˇ±uªs
 = 
n
;

1203  
NGX_OK
;

1204 
	}
}

1207 
size_t


1208 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1210 *
ˇp
;

1211 
u_ch¨
 *
p
;

1212 
ngx_uöt_t
 
n
;

1213 
ngx_hâp_ªque°_t
 *
r
;

1214 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1216 
r
 = 
e
->
ªque°
;

1218 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1220 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1222 
n
 = 
code
->n;

1224 i‡(
n
 < 
r
->
nˇ±uªs
) {

1226 
ˇp
 = 
r
->
ˇ±uªs
;

1228 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1229 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1231 
p
 = 
r
->
ˇ±uªs_d©a
;

1233  
ˇp
[
n
 + 1] - cap[n]

1234 + 2 * 
	`ngx_esˇ≥_uri
(
NULL
, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n],

1235 
NGX_ESCAPE_ARGS
);

1237  
ˇp
[
n
 + 1] - cap[n];

1242 
	}
}

1246 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1248 *
ˇp
;

1249 
u_ch¨
 *
p
, *
pos
;

1250 
ngx_uöt_t
 
n
;

1251 
ngx_hâp_ªque°_t
 *
r
;

1252 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1254 
r
 = 
e
->
ªque°
;

1256 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1258 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1260 
n
 = 
code
->n;

1262 
pos
 = 
e
->pos;

1264 i‡(
n
 < 
r
->
nˇ±uªs
) {

1266 
ˇp
 = 
r
->
ˇ±uªs
;

1267 
p
 = 
r
->
ˇ±uªs_d©a
;

1269 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1270 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1272 
e
->
pos
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’os, &
p
[
ˇp
[
n
]],

1273 
ˇp
[
n
 + 1] - cap[n],

1274 
NGX_ESCAPE_ARGS
);

1276 
e
->
pos
 = 
	`ngx_c›y
’os, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n]);

1280 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1281 "hâ∞s¸ùàˇ±uª: \"%*s\"", 
e
->
pos
 -Öos,Öos);

1282 
	}
}

1287 
ngx_öt_t


1288 
	$ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

1290 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1292 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1293 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1294 
NULL
);

1295 i‡(
code
 =
NULL
) {

1296  
NGX_ERROR
;

1299 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
;

1300 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1302 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1303 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1304 &
sc
->
maö
);

1305 i‡(
code
 =
NULL
) {

1306  
NGX_ERROR
;

1309 
code
->codê
ngx_hâp_s¸ùt_fuŒ_«me_code
;

1310 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1312  
NGX_OK
;

1313 
	}
}

1316 
size_t


1317 
	$ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1319 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1321 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1323 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1325  
code
->
c⁄f_¥efix
 ? 
ngx_cy˛e
->c⁄f_¥efix.
Àn
:

1326 
ngx_cy˛e
->
¥efix
.
Àn
;

1327 
	}
}

1331 
	$ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1333 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1335 
ngx_°r_t
 
vÆue
;

1337 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1339 
vÆue
.
d©a
 = 
e
->
buf
.data;

1340 
vÆue
.
Àn
 = 
e
->
pos
 -É->
buf
.
d©a
;

1342 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
vÆue
, 
code
->
c⁄f_¥efix
)

1343 !
NGX_OK
)

1345 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1346 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1350 
e
->
buf
 = 
vÆue
;

1352 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1353 "hâ∞s¸ùàfuŒ«me: \"%V\"", &
vÆue
);

1355 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1356 
	}
}

1360 
	$ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1362 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
code
;

1364 
code
 = (
ngx_hâp_s¸ùt_ªtu∫_code_t
 *Ë
e
->
ù
;

1366 i‡(
code
->
°©us
 < 
NGX_HTTP_BAD_REQUEST


1367 || 
code
->
ãxt
.
vÆue
.
Àn


1368 || 
code
->
ãxt
.
Àngths
)

1370 
e
->
°©us
 = 
	`ngx_hâp_£nd_ª•⁄£
”->
ªque°
, 
code
->°©us, 
NULL
,

1371 &
code
->
ãxt
);

1373 
e
->
°©us
 = 
code
->status;

1376 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1377 
	}
}

1381 
	$ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1383 
e
->
ªque°
->
uri_ch™ged
 = 0;

1385 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1386 
	}
}

1390 
	$ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1392 
ngx_hâp_s¸ùt_if_code_t
 *
code
;

1394 
code
 = (
ngx_hâp_s¸ùt_if_code_t
 *Ë
e
->
ù
;

1396 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1399 
e
->
•
--;

1401 i‡(
e
->
•
->
Àn
 && (e->•->À¿!=1 ||É->•->
d©a
[0] != '0')) {

1402 i‡(
code
->
loc_c⁄f
) {

1403 
e
->
ªque°
->
loc_c⁄f
 = 
code
->loc_conf;

1404 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
e
->
ªque°
);

1407 
e
->
ù
 +(
ngx_hâp_s¸ùt_if_code_t
);

1411 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1414 
e
->
ù
 +
code
->
√xt
;

1415 
	}
}

1419 
	$ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1421 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1423 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1426 
e
->
•
--;

1427 
vÆ
 = 
e
->
•
;

1428 
ªs
 = 
e
->
•
 - 1;

1430 
e
->
ù
 +(
uöçå_t
);

1432 i‡(
vÆ
->
Àn
 =
ªs
->len

1433 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1435 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1439 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1442 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1443 
	}
}

1447 
	$ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1449 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1451 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1454 
e
->
•
--;

1455 
vÆ
 = 
e
->
•
;

1456 
ªs
 = 
e
->
•
 - 1;

1458 
e
->
ù
 +(
uöçå_t
);

1460 i‡(
vÆ
->
Àn
 =
ªs
->len

1461 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1463 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1466 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1470 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1471 
	}
}

1475 
	$ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1477 
ngx_°r_t
 
∑th
;

1478 
ngx_hâp_ªque°_t
 *
r
;

1479 
ngx_›í_fûe_öfo_t
 
of
;

1480 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1481 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1482 
ngx_hâp_s¸ùt_fûe_code_t
 *
code
;

1484 
vÆue
 = 
e
->
•
 - 1;

1486 
code
 = (
ngx_hâp_s¸ùt_fûe_code_t
 *Ë
e
->
ù
;

1487 
e
->
ù
 +(
ngx_hâp_s¸ùt_fûe_code_t
);

1489 
∑th
.
Àn
 = 
vÆue
->len - 1;

1490 
∑th
.
d©a
 = 
vÆue
->data;

1492 
r
 = 
e
->
ªque°
;

1494 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1495 "hâ∞s¸ùàfûê› %∞\"%V\"", 
code
->
›
, &
∑th
);

1497 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1499 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1501 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1502 
of
.
dúe˘io
 = 
˛cf
->directio;

1503 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1504 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1505 
of
.
ã°_⁄ly
 = 1;

1506 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1507 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1509 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1510 !
NGX_OK
)

1512 i‡(
of
.
îr
 !
NGX_ENOENT


1513 && 
of
.
îr
 !
NGX_ENOTDIR


1514 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1516 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1517 "%†\"%s\" faûed", 
of
.
Áûed
, 
vÆue
->
d©a
);

1520 
code
->
›
) {

1522 
ngx_hâp_s¸ùt_fûe_∂aö
:

1523 
ngx_hâp_s¸ùt_fûe_dú
:

1524 
ngx_hâp_s¸ùt_fûe_exi°s
:

1525 
ngx_hâp_s¸ùt_fûe_exec
:

1526 
Ál£_vÆue
;

1528 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1529 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1530 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1531 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1532 
åue_vÆue
;

1535 
Ál£_vÆue
;

1538 
code
->
›
) {

1539 
ngx_hâp_s¸ùt_fûe_∂aö
:

1540 i‡(
of
.
is_fûe
) {

1541 
åue_vÆue
;

1543 
Ál£_vÆue
;

1545 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1546 i‡(
of
.
is_fûe
) {

1547 
Ál£_vÆue
;

1549 
åue_vÆue
;

1551 
ngx_hâp_s¸ùt_fûe_dú
:

1552 i‡(
of
.
is_dú
) {

1553 
åue_vÆue
;

1555 
Ál£_vÆue
;

1557 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1558 i‡(
of
.
is_dú
) {

1559 
Ál£_vÆue
;

1561 
åue_vÆue
;

1563 
ngx_hâp_s¸ùt_fûe_exi°s
:

1564 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1565 
åue_vÆue
;

1567 
Ál£_vÆue
;

1569 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1570 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1571 
Ál£_vÆue
;

1573 
åue_vÆue
;

1575 
ngx_hâp_s¸ùt_fûe_exec
:

1576 i‡(
of
.
is_exec
) {

1577 
åue_vÆue
;

1579 
Ál£_vÆue
;

1581 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1582 i‡(
of
.
is_exec
) {

1583 
Ál£_vÆue
;

1585 
åue_vÆue
;

1588 
Ál£_vÆue
:

1590 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1593 *
vÆue
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1596 
åue_vÆue
:

1598 *
vÆue
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1600 
	}
}

1604 
	$ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1606 
size_t
 
Àn
;

1607 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

1608 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1609 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
code
;

1611 
code
 = (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *Ë
e
->
ù
;

1613 
e
->
ù
 +(
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
);

1615 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1618 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1620 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1621 
À
.
löe
 = 
e
->line;

1622 
À
.
ªque°
 = 
e
->request;

1623 
À
.
quŸe
 = 
e
->quote;

1625 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1626 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1629 
e
->
buf
.
Àn
 =Üen;

1630 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
”->
ªque°
->
poﬁ
, 
Àn
);

1631 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1632 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1633 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1637 
e
->
pos
 =É->
buf
.
d©a
;

1639 
e
->
•
->
Àn
 =É->
buf
.len;

1640 
e
->
•
->
d©a
 =É->
buf
.data;

1641 
e
->
•
++;

1642 
	}
}

1646 
	$ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1648 
ngx_hâp_s¸ùt_vÆue_code_t
 *
code
;

1650 
code
 = (
ngx_hâp_s¸ùt_vÆue_code_t
 *Ë
e
->
ù
;

1652 
e
->
ù
 +(
ngx_hâp_s¸ùt_vÆue_code_t
);

1654 
e
->
•
->
Àn
 = 
code
->
ãxt_Àn
;

1655 
e
->
•
->
d©a
 = (
u_ch¨
 *Ë
code
->
ãxt_d©a
;

1657 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1658 "hâ∞s¸ùàvÆue: \"%v\"", 
e
->
•
);

1660 
e
->
•
++;

1661 
	}
}

1665 
	$ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1667 
ngx_hâp_ªque°_t
 *
r
;

1668 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1670 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1672 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1674 
r
 = 
e
->
ªque°
;

1676 
e
->
•
--;

1678 
r
->
v¨übÀs
[
code
->
ödex
].
Àn
 = 
e
->
•
->len;

1679 
r
->
v¨übÀs
[
code
->
ödex
].
vÆid
 = 1;

1680 
r
->
v¨übÀs
[
code
->
ödex
].
no_ˇchóbÀ
 = 0;

1681 
r
->
v¨übÀs
[
code
->
ödex
].
nŸ_found
 = 0;

1682 
r
->
v¨übÀs
[
code
->
ödex
].
d©a
 = 
e
->
•
->data;

1684 #i‡(
NGX_DEBUG
)

1686 
ngx_hâp_v¨übÀ_t
 *
v
;

1687 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1689 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1691 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1693 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1694 "hâ∞s¸ùà£à$%V", &
v
[
code
->
ödex
].
«me
);

1697 
	}
}

1701 
	$ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1703 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
code
;

1705 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1708 
code
 = (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *Ë
e
->
ù
;

1710 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
);

1712 
e
->
•
--;

1714 
code
->
	`h™dÀr
(
e
->
ªque°
,É->
•
, code->
d©a
);

1715 
	}
}

1719 
	$ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1721 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1722 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1724 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1727 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1729 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1731 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

1733 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

1734 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1735 "hâ∞s¸ùàv¨: \"%v\"", 
vÆue
);

1737 *
e
->
•
 = *
vÆue
;

1738 
e
->
•
++;

1743 *
e
->
•
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1744 
e
->
•
++;

1745 
	}
}

1749 
	$ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1751 
e
->
ù
 +(
uöçå_t
);

1752 
	}
}

	@src/http/ngx_http_script.h

8 #i‚de‡
_NGX_HTTP_SCRIPT_H_INCLUDED_


9 
	#_NGX_HTTP_SCRIPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
u_ch¨
 *
	mù
;

19 
u_ch¨
 *
	mpos
;

20 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m•
;

22 
ngx_°r_t
 
	mbuf
;

23 
ngx_°r_t
 
	mlöe
;

26 
u_ch¨
 *
	m¨gs
;

28 
	mÊushed
:1;

29 
	mskù
:1;

30 
	mquŸe
:1;

31 
	mis_¨gs
:1;

32 
	mlog
:1;

34 
ngx_öt_t
 
	m°©us
;

35 
ngx_hâp_ªque°_t
 *
	mªque°
;

36 } 
	tngx_hâp_s¸ùt_ígöe_t
;

40 
ngx_c⁄f_t
 *
	mcf
;

41 
ngx_°r_t
 *
	msour˚
;

43 
ngx_¨øy_t
 **
	mÊushes
;

44 
ngx_¨øy_t
 **
	mÀngths
;

45 
ngx_¨øy_t
 **
	mvÆues
;

47 
ngx_uöt_t
 
	mv¨übÀs
;

48 
ngx_uöt_t
 
	mnˇ±uªs
;

49 
ngx_uöt_t
 
	mˇ±uªs_mask
;

50 
ngx_uöt_t
 
	msize
;

52 *
	mmaö
;

54 
	mcompûe_¨gs
:1;

55 
	mcom∂ëe_Àngths
:1;

56 
	mcom∂ëe_vÆues
:1;

57 
	mzîo
:1;

58 
	mc⁄f_¥efix
:1;

59 
	mroŸ_¥efix
:1;

61 
	mdup_ˇ±uª
:1;

62 
	m¨gs
:1;

63 } 
	tngx_hâp_s¸ùt_compûe_t
;

67 
ngx_°r_t
 
	mvÆue
;

68 
ngx_uöt_t
 *
	mÊushes
;

69 *
	mÀngths
;

70 *
	mvÆues
;

71 } 
	tngx_hâp_com∂ex_vÆue_t
;

75 
ngx_c⁄f_t
 *
	mcf
;

76 
ngx_°r_t
 *
	mvÆue
;

77 
ngx_hâp_com∂ex_vÆue_t
 *
	mcom∂ex_vÆue
;

79 
	mzîo
:1;

80 
	mc⁄f_¥efix
:1;

81 
	mroŸ_¥efix
:1;

82 } 
	tngx_hâp_compûe_com∂ex_vÆue_t
;

85 (*
	tngx_hâp_s¸ùt_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

86 
	$size_t
 (*
	tngx_hâp_s¸ùt_Àn_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

90 
ngx_hâp_s¸ùt_code_±
 
code
;

91 
uöçå_t
 
Àn
;

92 } 
	tngx_hâp_s¸ùt_c›y_code_t
;

96 
ngx_hâp_s¸ùt_code_±
 
code
;

97 
uöçå_t
 
ödex
;

98 } 
	tngx_hâp_s¸ùt_v¨_code_t
;

102 
ngx_hâp_s¸ùt_code_±
 
code
;

103 
ngx_hâp_£t_v¨übÀ_±
 
h™dÀr
;

104 
uöçå_t
 
d©a
;

105 } 
	tngx_hâp_s¸ùt_v¨_h™dÀr_code_t
;

109 
ngx_hâp_s¸ùt_code_±
 
code
;

110 
uöçå_t
 
n
;

111 } 
	tngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
;

114 #i‡(
NGX_PCRE
)

117 
ngx_hâp_s¸ùt_code_±
 
code
;

118 
ngx_hâp_ªgex_t
 *
ªgex
;

119 
ngx_¨øy_t
 *
Àngths
;

120 
uöçå_t
 
size
;

121 
uöçå_t
 
°©us
;

122 
uöçå_t
 
√xt
;

124 
uöçå_t
 
ã°
:1;

125 
uöçå_t
 
√g©ive_ã°
:1;

126 
uöçå_t
 
uri
:1;

127 
uöçå_t
 
¨gs
:1;

130 
uöçå_t
 
add_¨gs
:1;

132 
uöçå_t
 
ªdúe˘
:1;

133 
uöçå_t
 
bªak_cy˛e
:1;

135 
ngx_°r_t
 
«me
;

136 } 
	tngx_hâp_s¸ùt_ªgex_code_t
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

142 
uöçå_t
 
uri
:1;

143 
uöçå_t
 
¨gs
:1;

146 
uöçå_t
 
add_¨gs
:1;

148 
uöçå_t
 
ªdúe˘
:1;

149 } 
	tngx_hâp_s¸ùt_ªgex_íd_code_t
;

155 
ngx_hâp_s¸ùt_code_±
 
code
;

156 
uöçå_t
 
c⁄f_¥efix
;

157 } 
	tngx_hâp_s¸ùt_fuŒ_«me_code_t
;

161 
ngx_hâp_s¸ùt_code_±
 
code
;

162 
uöçå_t
 
°©us
;

163 
ngx_hâp_com∂ex_vÆue_t
 
ãxt
;

164 } 
	tngx_hâp_s¸ùt_ªtu∫_code_t
;

168 
ngx_hâp_s¸ùt_fûe_∂aö
 = 0,

169 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
,

170 
ngx_hâp_s¸ùt_fûe_dú
,

171 
ngx_hâp_s¸ùt_fûe_nŸ_dú
,

172 
ngx_hâp_s¸ùt_fûe_exi°s
,

173 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
,

174 
ngx_hâp_s¸ùt_fûe_exec
,

175 
ngx_hâp_s¸ùt_fûe_nŸ_exec


176 } 
	tngx_hâp_s¸ùt_fûe_›_e
;

180 
ngx_hâp_s¸ùt_code_±
 
code
;

181 
uöçå_t
 
›
;

182 } 
	tngx_hâp_s¸ùt_fûe_code_t
;

186 
ngx_hâp_s¸ùt_code_±
 
code
;

187 
uöçå_t
 
√xt
;

188 **
loc_c⁄f
;

189 } 
	tngx_hâp_s¸ùt_if_code_t
;

193 
ngx_hâp_s¸ùt_code_±
 
code
;

194 
ngx_¨øy_t
 *
Àngths
;

195 } 
	tngx_hâp_s¸ùt_com∂ex_vÆue_code_t
;

199 
ngx_hâp_s¸ùt_code_±
 
code
;

200 
uöçå_t
 
vÆue
;

201 
uöçå_t
 
ãxt_Àn
;

202 
uöçå_t
 
ãxt_d©a
;

203 } 
	tngx_hâp_s¸ùt_vÆue_code_t
;

206 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

207 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
);

208 
ngx_öt_t
 
	`ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

209 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
);

210 
ngx_öt_t
 
	`ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
);

211 *
	`ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

212 *
c⁄f
);

215 
ngx_öt_t
 
	`ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
,

216 
ngx_¨øy_t
 *
¥ediˇãs
);

217 *
	`ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

218 *
c⁄f
);

220 
ngx_uöt_t
 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
);

221 
ngx_öt_t
 
	`ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

222 
u_ch¨
 *
	`ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

223 *
code_Àngths
, 
size_t
 
ª£rved
, *
code_vÆues
);

224 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

225 
ngx_¨øy_t
 *
ödi˚s
);

227 *
	`ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
,

228 
size_t
 
size
);

229 *
	`ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
);

231 
size_t
 
	`ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

232 
	`ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

233 
size_t
 
	`ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

234 
	`ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

235 
size_t
 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

236 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

237 
size_t
 
	`ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

238 
	`ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

239 #i‡(
NGX_PCRE
)

240 
	`ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

241 
	`ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

243 
	`ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

244 
	`ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

245 
	`ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

246 
	`ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

247 
	`ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

248 
	`ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

249 
	`ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

250 
	`ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

251 
	`ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

252 
	`ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

253 
	`ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

254 
	`ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

	@src/http/ngx_http_special_response.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
);

16 
ngx_öt_t
 
ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
);

18 
ngx_öt_t
 
ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
);

21 
u_ch¨
 
	gngx_hâp_îr‹_fuŒ_èû
[] =

22 "<hr><˚¡î>" 
NGINX_VER
 "</˚¡î>" 
CRLF


23 "</body>" 
CRLF


24 "</html>" 
CRLF


28 
u_ch¨
 
	gngx_hâp_îr‹_èû
[] =

29 "<hr><˚¡î>ngöx</˚¡î>" 
CRLF


30 "</body>" 
CRLF


31 "</html>" 
CRLF


35 
u_ch¨
 
	gngx_hâp_msõ_∑ddög
[] =

36 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


37 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


38 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


39 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


40 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


41 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


45 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_hód
[] =

49 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_èû
[] =

50 "\"></hód><body></body></html>" 
CRLF
;

53 
	gngx_hâp_îr‹_301_∑ge
[] =

54 "<html>" 
CRLF


55 "<hód><tôÀ>301 Moved Pîm™íéy</tôÀ></hód>" 
CRLF


56 "<body bgcﬁ‹=\"whôe\">" 
CRLF


57 "<˚¡î><h1>301 Moved Pîm™íéy</h1></˚¡î>" 
CRLF


61 
	gngx_hâp_îr‹_302_∑ge
[] =

62 "<html>" 
CRLF


63 "<hód><tôÀ>302 Found</tôÀ></hód>" 
CRLF


64 "<body bgcﬁ‹=\"whôe\">" 
CRLF


65 "<˚¡î><h1>302 Found</h1></˚¡î>" 
CRLF


69 
	gngx_hâp_îr‹_303_∑ge
[] =

70 "<html>" 
CRLF


71 "<hód><tôÀ>303 Sì Othî</tôÀ></hód>" 
CRLF


72 "<body bgcﬁ‹=\"whôe\">" 
CRLF


73 "<˚¡î><h1>303 Sì Othî</h1></˚¡î>" 
CRLF


77 
	gngx_hâp_îr‹_307_∑ge
[] =

78 "<html>" 
CRLF


79 "<hód><tôÀ>307 Temp‹¨y Redúe˘</tôÀ></hód>" 
CRLF


80 "<body bgcﬁ‹=\"whôe\">" 
CRLF


81 "<˚¡î><h1>307 Temp‹¨y Redúe˘</h1></˚¡î>" 
CRLF


85 
	gngx_hâp_îr‹_400_∑ge
[] =

86 "<html>" 
CRLF


87 "<hód><tôÀ>400 Bad Reque°</tôÀ></hód>" 
CRLF


88 "<body bgcﬁ‹=\"whôe\">" 
CRLF


89 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


93 
	gngx_hâp_îr‹_401_∑ge
[] =

94 "<html>" 
CRLF


95 "<hód><tôÀ>401 Auth‹iz©i⁄ Requúed</tôÀ></hód>" 
CRLF


96 "<body bgcﬁ‹=\"whôe\">" 
CRLF


97 "<˚¡î><h1>401 Auth‹iz©i⁄ Requúed</h1></˚¡î>" 
CRLF


101 
	gngx_hâp_îr‹_402_∑ge
[] =

102 "<html>" 
CRLF


103 "<hód><tôÀ>402 PaymíàRequúed</tôÀ></hód>" 
CRLF


104 "<body bgcﬁ‹=\"whôe\">" 
CRLF


105 "<˚¡î><h1>402 PaymíàRequúed</h1></˚¡î>" 
CRLF


109 
	gngx_hâp_îr‹_403_∑ge
[] =

110 "<html>" 
CRLF


111 "<hód><tôÀ>403 F‹biddí</tôÀ></hód>" 
CRLF


112 "<body bgcﬁ‹=\"whôe\">" 
CRLF


113 "<˚¡î><h1>403 F‹biddí</h1></˚¡î>" 
CRLF


117 
	gngx_hâp_îr‹_404_∑ge
[] =

118 "<html>" 
CRLF


119 "<hód><tôÀ>404 NŸ Found</tôÀ></hód>" 
CRLF


120 "<body bgcﬁ‹=\"whôe\">" 
CRLF


121 "<˚¡î><h1>404 NŸ Found</h1></˚¡î>" 
CRLF


125 
	gngx_hâp_îr‹_405_∑ge
[] =

126 "<html>" 
CRLF


127 "<hód><tôÀ>405 NŸ AŒowed</tôÀ></hód>" 
CRLF


128 "<body bgcﬁ‹=\"whôe\">" 
CRLF


129 "<˚¡î><h1>405 NŸ AŒowed</h1></˚¡î>" 
CRLF


133 
	gngx_hâp_îr‹_406_∑ge
[] =

134 "<html>" 
CRLF


135 "<hód><tôÀ>406 NŸ Ac˚±abÀ</tôÀ></hód>" 
CRLF


136 "<body bgcﬁ‹=\"whôe\">" 
CRLF


137 "<˚¡î><h1>406 NŸ Ac˚±abÀ</h1></˚¡î>" 
CRLF


141 
	gngx_hâp_îr‹_408_∑ge
[] =

142 "<html>" 
CRLF


143 "<hód><tôÀ>408 Reque° Time-out</tôÀ></hód>" 
CRLF


144 "<body bgcﬁ‹=\"whôe\">" 
CRLF


145 "<˚¡î><h1>408 Reque° Time-out</h1></˚¡î>" 
CRLF


149 
	gngx_hâp_îr‹_409_∑ge
[] =

150 "<html>" 
CRLF


151 "<hód><tôÀ>409 C⁄Êi˘</tôÀ></hód>" 
CRLF


152 "<body bgcﬁ‹=\"whôe\">" 
CRLF


153 "<˚¡î><h1>409 C⁄Êi˘</h1></˚¡î>" 
CRLF


157 
	gngx_hâp_îr‹_410_∑ge
[] =

158 "<html>" 
CRLF


159 "<hód><tôÀ>410 G⁄e</tôÀ></hód>" 
CRLF


160 "<body bgcﬁ‹=\"whôe\">" 
CRLF


161 "<˚¡î><h1>410 G⁄e</h1></˚¡î>" 
CRLF


165 
	gngx_hâp_îr‹_411_∑ge
[] =

166 "<html>" 
CRLF


167 "<hód><tôÀ>411 Lígth Requúed</tôÀ></hód>" 
CRLF


168 "<body bgcﬁ‹=\"whôe\">" 
CRLF


169 "<˚¡î><h1>411 Lígth Requúed</h1></˚¡î>" 
CRLF


173 
	gngx_hâp_îr‹_412_∑ge
[] =

174 "<html>" 
CRLF


175 "<hód><tôÀ>412 Pªc⁄dôi⁄ Faûed</tôÀ></hód>" 
CRLF


176 "<body bgcﬁ‹=\"whôe\">" 
CRLF


177 "<˚¡î><h1>412 Pªc⁄dôi⁄ Faûed</h1></˚¡î>" 
CRLF


181 
	gngx_hâp_îr‹_413_∑ge
[] =

182 "<html>" 
CRLF


183 "<hód><tôÀ>413 Reque° E¡ôy ToÿL¨ge</tôÀ></hód>" 
CRLF


184 "<body bgcﬁ‹=\"whôe\">" 
CRLF


185 "<˚¡î><h1>413 Reque° E¡ôy ToÿL¨ge</h1></˚¡î>" 
CRLF


189 
	gngx_hâp_îr‹_414_∑ge
[] =

190 "<html>" 
CRLF


191 "<hód><tôÀ>414 Reque°-URI ToÿL¨ge</tôÀ></hód>" 
CRLF


192 "<body bgcﬁ‹=\"whôe\">" 
CRLF


193 "<˚¡î><h1>414 Reque°-URI ToÿL¨ge</h1></˚¡î>" 
CRLF


197 
	gngx_hâp_îr‹_415_∑ge
[] =

198 "<html>" 
CRLF


199 "<hód><tôÀ>415 Unsuµ‹ãd Medü Ty≥</tôÀ></hód>" 
CRLF


200 "<body bgcﬁ‹=\"whôe\">" 
CRLF


201 "<˚¡î><h1>415 Unsuµ‹ãd Medü Ty≥</h1></˚¡î>" 
CRLF


205 
	gngx_hâp_îr‹_416_∑ge
[] =

206 "<html>" 
CRLF


207 "<hód><tôÀ>416 Reque°ed R™gêNŸ S©isfübÀ</tôÀ></hód>" 
CRLF


208 "<body bgcﬁ‹=\"whôe\">" 
CRLF


209 "<˚¡î><h1>416 Reque°ed R™gêNŸ S©isfübÀ</h1></˚¡î>" 
CRLF


213 
	gngx_hâp_îr‹_494_∑ge
[] =

214 "<html>" 
CRLF


216 
CRLF


217 "<body bgcﬁ‹=\"whôe\">" 
CRLF


218 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


219 "<˚¡î>Reque° Hódî O∏Cookõ ToÿL¨ge</˚¡î>" 
CRLF


223 
	gngx_hâp_îr‹_495_∑ge
[] =

224 "<html>" 
CRLF


226 
CRLF


227 "<body bgcﬁ‹=\"whôe\">" 
CRLF


228 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


229 "<˚¡î>ThêSSL cîtifiˇãÉº‹</˚¡î>" 
CRLF


233 
	gngx_hâp_îr‹_496_∑ge
[] =

234 "<html>" 
CRLF


236 
CRLF


237 "<body bgcﬁ‹=\"whôe\">" 
CRLF


238 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


239 "<˚¡î>Nÿªquúed SSL cîtifiˇã wa†£¡</˚¡î>" 
CRLF


243 
	gngx_hâp_îr‹_497_∑ge
[] =

244 "<html>" 
CRLF


246 
CRLF


247 "<body bgcﬁ‹=\"whôe\">" 
CRLF


248 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


249 "<˚¡î>Thê∂aö HTTPÑeque° wa†£¡ÅÿHTTPSÖ‹t</˚¡î>" 
CRLF


253 
	gngx_hâp_îr‹_500_∑ge
[] =

254 "<html>" 
CRLF


255 "<hód><tôÀ>500 I¡î«»Sîvî Eº‹</tôÀ></hód>" 
CRLF


256 "<body bgcﬁ‹=\"whôe\">" 
CRLF


257 "<˚¡î><h1>500 I¡î«»Sîvî Eº‹</h1></˚¡î>" 
CRLF


261 
	gngx_hâp_îr‹_501_∑ge
[] =

262 "<html>" 
CRLF


263 "<hód><tôÀ>501 Mëhod NŸ Im∂emíãd</tôÀ></hód>" 
CRLF


264 "<body bgcﬁ‹=\"whôe\">" 
CRLF


265 "<˚¡î><h1>501 Mëhod NŸ Im∂emíãd</h1></˚¡î>" 
CRLF


269 
	gngx_hâp_îr‹_502_∑ge
[] =

270 "<html>" 
CRLF


271 "<hód><tôÀ>502 Bad G©eway</tôÀ></hód>" 
CRLF


272 "<body bgcﬁ‹=\"whôe\">" 
CRLF


273 "<˚¡î><h1>502 Bad G©eway</h1></˚¡î>" 
CRLF


277 
	gngx_hâp_îr‹_503_∑ge
[] =

278 "<html>" 
CRLF


279 "<hód><tôÀ>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</tôÀ></hód>" 
CRLF


280 "<body bgcﬁ‹=\"whôe\">" 
CRLF


281 "<˚¡î><h1>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</h1></˚¡î>" 
CRLF


285 
	gngx_hâp_îr‹_504_∑ge
[] =

286 "<html>" 
CRLF


287 "<hód><tôÀ>504 G©eway Time-out</tôÀ></hód>" 
CRLF


288 "<body bgcﬁ‹=\"whôe\">" 
CRLF


289 "<˚¡î><h1>504 G©eway Time-out</h1></˚¡î>" 
CRLF


293 
	gngx_hâp_îr‹_507_∑ge
[] =

294 "<html>" 
CRLF


295 "<hód><tôÀ>507 Insufficõ¡ St‹age</tôÀ></hód>" 
CRLF


296 "<body bgcﬁ‹=\"whôe\">" 
CRLF


297 "<˚¡î><h1>507 Insufficõ¡ St‹age</h1></˚¡î>" 
CRLF


301 
ngx_°r_t
 
	gngx_hâp_îr‹_∑ges
[] = {

303 
ngx_nuŒ_°rög
,

305 
	#NGX_HTTP_LAST_2XX
 202

	)

306 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 201)

	)

309 
ngx_°rög
(
ngx_hâp_îr‹_301_∑ge
),

310 
ngx_°rög
(
ngx_hâp_îr‹_302_∑ge
),

311 
ngx_°rög
(
ngx_hâp_îr‹_303_∑ge
),

312 
ngx_nuŒ_°rög
,

313 
ngx_nuŒ_°rög
,

314 
ngx_nuŒ_°rög
,

315 
ngx_°rög
(
ngx_hâp_îr‹_307_∑ge
),

317 
	#NGX_HTTP_LAST_3XX
 308

	)

318 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

320 
ngx_°rög
(
ngx_hâp_îr‹_400_∑ge
),

321 
ngx_°rög
(
ngx_hâp_îr‹_401_∑ge
),

322 
ngx_°rög
(
ngx_hâp_îr‹_402_∑ge
),

323 
ngx_°rög
(
ngx_hâp_îr‹_403_∑ge
),

324 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

325 
ngx_°rög
(
ngx_hâp_îr‹_405_∑ge
),

326 
ngx_°rög
(
ngx_hâp_îr‹_406_∑ge
),

327 
ngx_nuŒ_°rög
,

328 
ngx_°rög
(
ngx_hâp_îr‹_408_∑ge
),

329 
ngx_°rög
(
ngx_hâp_îr‹_409_∑ge
),

330 
ngx_°rög
(
ngx_hâp_îr‹_410_∑ge
),

331 
ngx_°rög
(
ngx_hâp_îr‹_411_∑ge
),

332 
ngx_°rög
(
ngx_hâp_îr‹_412_∑ge
),

333 
ngx_°rög
(
ngx_hâp_îr‹_413_∑ge
),

334 
ngx_°rög
(
ngx_hâp_îr‹_414_∑ge
),

335 
ngx_°rög
(
ngx_hâp_îr‹_415_∑ge
),

336 
ngx_°rög
(
ngx_hâp_îr‹_416_∑ge
),

338 
	#NGX_HTTP_LAST_4XX
 417

	)

339 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

341 
ngx_°rög
(
ngx_hâp_îr‹_494_∑ge
),

342 
ngx_°rög
(
ngx_hâp_îr‹_495_∑ge
),

343 
ngx_°rög
(
ngx_hâp_îr‹_496_∑ge
),

344 
ngx_°rög
(
ngx_hâp_îr‹_497_∑ge
),

345 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

346 
ngx_nuŒ_°rög
,

348 
ngx_°rög
(
ngx_hâp_îr‹_500_∑ge
),

349 
ngx_°rög
(
ngx_hâp_îr‹_501_∑ge
),

350 
ngx_°rög
(
ngx_hâp_îr‹_502_∑ge
),

351 
ngx_°rög
(
ngx_hâp_îr‹_503_∑ge
),

352 
ngx_°rög
(
ngx_hâp_îr‹_504_∑ge
),

353 
ngx_nuŒ_°rög
,

354 
ngx_nuŒ_°rög
,

355 
ngx_°rög
(
ngx_hâp_îr‹_507_∑ge
)

357 
	#NGX_HTTP_LAST_5XX
 508

	)

362 
ngx_°r_t
 
	gngx_hâp_gë_«me
 = { 3, (
u_ch¨
 *) "GET " };

365 
ngx_öt_t


366 
	$ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
)

368 
ngx_uöt_t
 
i
, 
îr
;

369 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

370 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

372 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

374 
îr‹
, &
r
->
uri
, &r->
¨gs
);

376 
r
->
îr_°©us
 = 
îr‹
;

378 i‡(
r
->
kì∑live
) {

379 
îr‹
) {

380 
NGX_HTTP_BAD_REQUEST
:

381 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
:

382 
NGX_HTTP_REQUEST_URI_TOO_LARGE
:

383 
NGX_HTTP_TO_HTTPS
:

384 
NGX_HTTPS_CERT_ERROR
:

385 
NGX_HTTPS_NO_CERT
:

386 
NGX_HTTP_INTERNAL_SERVER_ERROR
:

387 
r
->
kì∑live
 = 0;

391 i‡(
r
->
lögîög_˛o£
) {

392 
îr‹
) {

393 
NGX_HTTP_BAD_REQUEST
:

394 
NGX_HTTP_TO_HTTPS
:

395 
NGX_HTTPS_CERT_ERROR
:

396 
NGX_HTTPS_NO_CERT
:

397 
r
->
lögîög_˛o£
 = 0;

401 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

403 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

405 i‡(!
r
->
îr‹_∑ge
 && 
˛cf
->
îr‹_∑ges
 &&Ñ->
uri_ch™ges
 != 0) {

407 i‡(
˛cf
->
ªcursive_îr‹_∑ges
 == 0) {

408 
r
->
îr‹_∑ge
 = 1;

411 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

413 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

414 i‡(
îr_∑ge
[
i
].
°©us
 =
îr‹
) {

415  
	`ngx_hâp_£nd_îr‹_∑ge
(
r
, &
îr_∑ge
[
i
]);

420 
r
->
ex≥˘_ã°ed
 = 1;

422 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

423 
îr‹
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

426 i‡(
˛cf
->
msõ_ª‰esh


427 && 
r
->
hódîs_ö
.
msõ


428 && (
îr‹
 =
NGX_HTTP_MOVED_PERMANENTLY


429 || 
îr‹
 =
NGX_HTTP_MOVED_TEMPORARILY
))

431  
	`ngx_hâp_£nd_ª‰esh
(
r
);

434 i‡(
îr‹
 =
NGX_HTTP_CREATED
) {

436 
îr
 = 0;

438 } i‡(
îr‹
 =
NGX_HTTP_NO_CONTENT
) {

440 
îr
 = 0;

442 } i‡(
îr‹
 >
NGX_HTTP_MOVED_PERMANENTLY


443 && 
îr‹
 < 
NGX_HTTP_LAST_3XX
)

446 
îr
 = 
îr‹
 - 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

448 } i‡(
îr‹
 >
NGX_HTTP_BAD_REQUEST


449 && 
îr‹
 < 
NGX_HTTP_LAST_4XX
)

452 
îr
 = 
îr‹
 - 
NGX_HTTP_BAD_REQUEST
 + 
NGX_HTTP_OFF_4XX
;

454 } i‡(
îr‹
 >
NGX_HTTP_NGINX_CODES


455 && 
îr‹
 < 
NGX_HTTP_LAST_5XX
)

458 
îr
 = 
îr‹
 - 
NGX_HTTP_NGINX_CODES
 + 
NGX_HTTP_OFF_5XX
;

459 
îr‹
) {

460 
NGX_HTTP_TO_HTTPS
:

461 
NGX_HTTPS_CERT_ERROR
:

462 
NGX_HTTPS_NO_CERT
:

463 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
:

464 
r
->
îr_°©us
 = 
NGX_HTTP_BAD_REQUEST
;

470 
îr
 = 0;

473  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
, 
îr
);

474 
	}
}

477 
ngx_öt_t


478 
	$ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_moduÀ_t
 *
m
,

479 
ngx_öt_t
 
îr‹
)

481 *
˘x
;

482 
ngx_öt_t
 
rc
;

484 
	`ngx_hâp_˛ón_hódî
(
r
);

486 
˘x
 = 
NULL
;

488 i‡(
m
) {

489 
˘x
 = 
r
->˘x[
m
->
˘x_ödex
];

493 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

495 i‡(
m
) {

496 
r
->
˘x
[
m
->
˘x_ödex
] = ctx;

499 
r
->
fûãr_föÆize
 = 1;

501 
rc
 = 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
r
, 
îr‹
);

505 
rc
) {

507 
NGX_OK
:

508 
NGX_DONE
:

509  
NGX_ERROR
;

512  
rc
;

514 
	}
}

518 
	$ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
)

520 
	`ngx_memzîo
(&
r
->
hódîs_out
.
°©us
,

521 (
ngx_hâp_hódîs_out_t
)

522 - 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
°©us
));

524 
r
->
hódîs_out
.
hódîs
.
∑π
.
√…s
 = 0;

525 
r
->
hódîs_out
.
hódîs
.
∑π
.
√xt
 = 
NULL
;

526 
r
->
hódîs_out
.
hódîs
.
œ°
 = &r->hódîs_out.hódîs.
∑π
;

528 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

529 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

530 
	}
}

533 
ngx_öt_t


534 
	$ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
)

536 
ngx_öt_t
 
ovîwrôe
;

537 
ngx_°r_t
 
uri
, 
¨gs
;

538 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

539 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

541 
ovîwrôe
 = 
îr_∑ge
->overwrite;

543 i‡(
ovîwrôe
 && ovîwrôê!
NGX_HTTP_OK
) {

544 
r
->
ex≥˘_ã°ed
 = 1;

547 i‡(
ovîwrôe
 >= 0) {

548 
r
->
îr_°©us
 = 
ovîwrôe
;

551 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
îr_∑ge
->
vÆue
, &
uri
Ë!
NGX_OK
) {

552  
NGX_ERROR
;

555 i‡(
uri
.
d©a
[0] == '/') {

557 i‡(
îr_∑ge
->
vÆue
.
Àngths
) {

558 
	`ngx_hâp_•lô_¨gs
(
r
, &
uri
, &
¨gs
);

561 
¨gs
 = 
îr_∑ge
->args;

564 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

565 
r
->
mëhod
 = 
NGX_HTTP_GET
;

566 
r
->
mëhod_«me
 = 
ngx_hâp_gë_«me
;

569  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

572 i‡(
uri
.
d©a
[0] == '@') {

573  
	`ngx_hâp_«med_loˇti⁄
(
r
, &
uri
);

576 
loˇti⁄
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

578 i‡(
loˇti⁄
 =
NULL
) {

579  
NGX_ERROR
;

582 i‡(
ovîwrôe
 !
NGX_HTTP_MOVED_PERMANENTLY


583 && 
ovîwrôe
 !
NGX_HTTP_MOVED_TEMPORARILY


584 && 
ovîwrôe
 !
NGX_HTTP_SEE_OTHER


585 && 
ovîwrôe
 !
NGX_HTTP_TEMPORARY_REDIRECT
)

587 
r
->
îr_°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

590 
loˇti⁄
->
hash
 = 1;

591 
	`ngx_°r_£t
(&
loˇti⁄
->
key
, "Location");

592 
loˇti⁄
->
vÆue
 = 
uri
;

594 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

596 
r
->
hódîs_out
.
loˇti⁄
 =Üocation;

598 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

600 i‡(
˛cf
->
msõ_ª‰esh
 && 
r
->
hódîs_ö
.
msõ
) {

601  
	`ngx_hâp_£nd_ª‰esh
(
r
);

604  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
,Ñ->
îr_°©us


605 - 
NGX_HTTP_MOVED_PERMANENTLY


606 + 
NGX_HTTP_OFF_3XX
);

607 
	}
}

610 
ngx_öt_t


611 
	$ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

612 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
)

614 
u_ch¨
 *
èû
;

615 
size_t
 
Àn
;

616 
ngx_öt_t
 
rc
;

617 
ngx_buf_t
 *
b
;

618 
ngx_uöt_t
 
msõ_∑ddög
;

619 
ngx_chaö_t
 
out
[3];

621 i‡(
˛cf
->
£rvî_tokís
) {

622 
Àn
 = (
ngx_hâp_îr‹_fuŒ_èû
) - 1;

623 
èû
 = 
ngx_hâp_îr‹_fuŒ_èû
;

626 
Àn
 = (
ngx_hâp_îr‹_èû
) - 1;

627 
èû
 = 
ngx_hâp_îr‹_èû
;

630 
msõ_∑ddög
 = 0;

632 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
) {

633 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 +Üen;

634 i‡(
˛cf
->
msõ_∑ddög


635 && (
r
->
hódîs_ö
.
msõ
 ||Ñ->hódîs_ö.
chrome
)

636 && 
r
->
hâp_vîsi⁄
 >
NGX_HTTP_VERSION_10


637 && 
îr
 >
NGX_HTTP_OFF_4XX
)

639 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 +=

640 (
ngx_hâp_msõ_∑ddög
) - 1;

641 
msõ_∑ddög
 = 1;

644 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

645 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

646 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

649 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

652 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

653 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

654 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

657 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

658 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

660 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

662 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

663  
rc
;

666 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 == 0) {

667  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

670 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

671 i‡(
b
 =
NULL
) {

672  
NGX_ERROR
;

675 
b
->
mem‹y
 = 1;

676 
b
->
pos
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
;

677 
b
->
œ°
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
 +Çgx_hâp_îr‹_∑ges[îr].
Àn
;

679 
out
[0].
buf
 = 
b
;

680 
out
[0].
√xt
 = &out[1];

682 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

683 i‡(
b
 =
NULL
) {

684  
NGX_ERROR
;

687 
b
->
mem‹y
 = 1;

689 
b
->
pos
 = 
èû
;

690 
b
->
œ°
 = 
èû
 + 
Àn
;

692 
out
[1].
buf
 = 
b
;

693 
out
[1].
√xt
 = 
NULL
;

695 i‡(
msõ_∑ddög
) {

696 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

697 i‡(
b
 =
NULL
) {

698  
NGX_ERROR
;

701 
b
->
mem‹y
 = 1;

702 
b
->
pos
 = 
ngx_hâp_msõ_∑ddög
;

703 
b
->
œ°
 = 
ngx_hâp_msõ_∑ddög
 + (ngx_http_msie_padding) - 1;

705 
out
[1].
√xt
 = &out[2];

706 
out
[2].
buf
 = 
b
;

707 
out
[2].
√xt
 = 
NULL
;

710 i‡(
r
 =r->
maö
) {

711 
b
->
œ°_buf
 = 1;

714 
b
->
œ°_ö_chaö
 = 1;

716  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[0]);

717 
	}
}

720 
ngx_öt_t


721 
	$ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
)

723 
u_ch¨
 *
p
, *
loˇti⁄
;

724 
size_t
 
Àn
, 
size
;

725 
uöçå_t
 
esˇ≥
;

726 
ngx_öt_t
 
rc
;

727 
ngx_buf_t
 *
b
;

728 
ngx_chaö_t
 
out
;

730 
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

731 
loˇti⁄
 = 
r
->
hódîs_out
.loˇti⁄->
vÆue
.
d©a
;

733 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

735 
size
 = (
ngx_hâp_msõ_ª‰esh_hód
) - 1

736 + 
esˇ≥
 + 
Àn


737 + (
ngx_hâp_msõ_ª‰esh_èû
) - 1;

739 
r
->
îr_°©us
 = 
NGX_HTTP_OK
;

741 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

742 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

743 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

745 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

746 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
;

748 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
size
;

750 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

751 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

752 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

755 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

756 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

758 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

760 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

761  
rc
;

764 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

765 i‡(
b
 =
NULL
) {

766  
NGX_ERROR
;

769 
p
 = 
	`ngx_˝ymem
(
b
->
pos
, 
ngx_hâp_msõ_ª‰esh_hód
,

770 (
ngx_hâp_msõ_ª‰esh_hód
) - 1);

772 i‡(
esˇ≥
 == 0) {

773 
p
 = 
	`ngx_˝ymem
’, 
loˇti⁄
, 
Àn
);

776 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

779 
b
->
œ°
 = 
	`ngx_˝ymem
(
p
, 
ngx_hâp_msõ_ª‰esh_èû
,

780 (
ngx_hâp_msõ_ª‰esh_èû
) - 1);

782 
b
->
œ°_buf
 = 1;

783 
b
->
œ°_ö_chaö
 = 1;

785 
out
.
buf
 = 
b
;

786 
out
.
√xt
 = 
NULL
;

788  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

789 
	}
}

	@src/http/ngx_http_upstream.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 #i‡(
NGX_HTTP_CACHE
)

14 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_up°ªam_t
 *
u
);

16 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_up°ªam_t
 *
u
);

18 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

23 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

24 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

26 
ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_evít_t
 *
ev
);

28 
ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_up°ªam_t
 *
u
);

30 
ngx_öt_t
 
ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_hâp_up°ªam_t
 *
u
);

32 
ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_up°ªam_t
 *
u
);

34 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_up°ªam_t
 *
u
);

36 
ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_up°ªam_t
 *
u
);

38 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_up°ªam_t
 *
u
);

40 
ngx_öt_t
 
ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_up°ªam_t
 *
u
);

42 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
);

43 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

44 
ngx_hâp_up°ªam_t
 *
u
);

45 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_up°ªam_t
 *
u
);

47 
ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_hâp_up°ªam_t
 *
u
);

50 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_up°ªam_t
 *
u
);

55 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_uöt_t
 
do_wrôe
);

57 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
);

58 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
,

59 
ssize_t
 
byãs
);

60 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

61 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

62 
ngx_hâp_up°ªam_t
 *
u
);

63 
ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_up°ªam_t
 *
u
);

66 
ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_up°ªam_t
 *
u
);

68 
ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
,

69 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
·_ty≥
);

70 
ngx_hâp_up°ªam_˛ónup
(*
d©a
);

71 
ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
);

74 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

76 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

78 
ngx_öt_t


79 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

81 
ngx_öt_t
 
ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

83 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

85 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

87 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

89 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
,

90 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

91 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

93 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

95 
ngx_öt_t


96 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

97 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

98 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

100 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

102 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

104 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

105 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

106 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

108 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

111 #i‡(
NGX_HTTP_GZIP
)

112 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

113 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

116 
ngx_öt_t
 
ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

117 
ngx_öt_t
 
ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

119 
ngx_öt_t
 
ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

121 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

123 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(

124 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

126 *
ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
);

127 *
ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

128 *
c⁄f
);

130 *
ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

131 *
ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

133 #i‡(
NGX_HTTP_SSL
)

134 
ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *,

135 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

136 
ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

140 
ngx_hâp_up°ªam_hódî_t
 
	gngx_hâp_up°ªam_hódîs_ö
[] = {

142 { 
ngx_°rög
("Status"),

143 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

144 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
°©us
),

145 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

147 { 
ngx_°rög
("Content-Type"),

148 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

149 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

150 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
, 0, 1 },

152 { 
ngx_°rög
("Content-Length"),

153 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

154 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

155 
ngx_hâp_up°ªam_c›y_c⁄ã¡_Àngth
, 0, 0 },

157 { 
ngx_°rög
("Date"),

158 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

159 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
d©e
),

160 
ngx_hâp_up°ªam_c›y_hódî_löe
,

161 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
), 0 },

163 { 
ngx_°rög
("Last-Modified"),

164 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

165 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
œ°_modifõd
),

166 
ngx_hâp_up°ªam_c›y_œ°_modifõd
, 0, 0 },

168 { 
ngx_°rög
("ETag"),

169 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

170 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ëag
),

171 
ngx_hâp_up°ªam_c›y_hódî_löe
,

172 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
), 0 },

174 { 
ngx_°rög
("Server"),

175 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

176 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
£rvî
),

177 
ngx_hâp_up°ªam_c›y_hódî_löe
,

178 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
), 0 },

180 { 
ngx_°rög
("WWW-Authenticate"),

181 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

182 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
www_authítiˇã
),

183 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

185 { 
ngx_°rög
("Location"),

186 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

187 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
loˇti⁄
),

188 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
, 0, 0 },

190 { 
ngx_°rög
("Refresh"),

191 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

192 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
, 0, 0 },

194 { 
ngx_°rög
("Set-Cookie"),

195 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
, 0,

196 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 1 },

198 { 
ngx_°rög
("Content-Disposition"),

199 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

200 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 1 },

202 { 
ngx_°rög
("Cache-Control"),

203 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
, 0,

204 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
,

205 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
), 1 },

207 { 
ngx_°rög
("Expires"),

208 
ngx_hâp_up°ªam_¥o˚ss_expúes
, 0,

209 
ngx_hâp_up°ªam_c›y_hódî_löe
,

210 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
), 1 },

212 { 
ngx_°rög
("Accept-Ranges"),

213 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

214 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ac˚±_ønges
),

215 
ngx_hâp_up°ªam_c›y_Ælow_ønges
,

216 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
), 1 },

218 { 
ngx_°rög
("Connection"),

219 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

220 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

222 { 
ngx_°rög
("Keep-Alive"),

223 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

224 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

226 { 
ngx_°rög
("X-Powered-By"),

227 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

228 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

230 { 
ngx_°rög
("X-Accel-Expires"),

231 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
, 0,

232 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

234 { 
ngx_°rög
("X-Accel-Redirect"),

235 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

236 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
x_ac˚l_ªdúe˘
),

237 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

239 { 
ngx_°rög
("X-Accel-Limit-Rate"),

240 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
, 0,

241 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

243 { 
ngx_°rög
("X-Accel-Buffering"),

244 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
, 0,

245 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

247 { 
ngx_°rög
("X-Accel-Charset"),

248 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
, 0,

249 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

251 #i‡(
NGX_HTTP_GZIP
)

252 { 
ngx_°rög
("Content-Encoding"),

253 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

254 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ícodög
),

255 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
, 0, 0 },

258 { 
ngx_nuŒ_°rög
, 
NULL
, 0, NULL, 0, 0 }

262 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_comm™ds
[] = {

264 { 
ngx_°rög
("upstream"),

265 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

266 
ngx_hâp_up°ªam
,

269 
NULL
 },

271 { 
ngx_°rög
("server"),

272 
NGX_HTTP_UPS_CONF
|
NGX_CONF_1MORE
,

273 
ngx_hâp_up°ªam_£rvî
,

274 
NGX_HTTP_SRV_CONF_OFFSET
,

276 
NULL
 },

278 
ngx_nuŒ_comm™d


282 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ_˘x
 = {

283 
ngx_hâp_up°ªam_add_v¨übÀs
,

284 
NULL
,

286 
ngx_hâp_up°ªam_¸óã_maö_c⁄f
,

287 
ngx_hâp_up°ªam_öô_maö_c⁄f
,

289 
NULL
,

290 
NULL
,

292 
NULL
,

293 
NULL


297 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ
 = {

298 
NGX_MODULE_V1
,

299 &
ngx_hâp_up°ªam_moduÀ_˘x
,

300 
ngx_hâp_up°ªam_comm™ds
,

301 
NGX_HTTP_MODULE
,

302 
NULL
,

303 
NULL
,

304 
NULL
,

305 
NULL
,

306 
NULL
,

307 
NULL
,

308 
NULL
,

309 
NGX_MODULE_V1_PADDING


313 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_up°ªam_v¨s
[] = {

315 { 
ngx_°rög
("up°ªam_addr"), 
NULL
,

316 
ngx_hâp_up°ªam_addr_v¨übÀ
, 0,

317 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

319 { 
ngx_°rög
("up°ªam_°©us"), 
NULL
,

320 
ngx_hâp_up°ªam_°©us_v¨übÀ
, 0,

321 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

323 { 
ngx_°rög
("up°ªam_ª•⁄£_time"), 
NULL
,

324 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 0,

325 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

327 { 
ngx_°rög
("up°ªam_ª•⁄£_Àngth"), 
NULL
,

328 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
, 0,

329 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

331 #i‡(
NGX_HTTP_CACHE
)

333 { 
ngx_°rög
("up°ªam_ˇche_°©us"), 
NULL
,

334 
ngx_hâp_up°ªam_ˇche_°©us
, 0,

335 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

339 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

343 
ngx_hâp_up°ªam_√xt_t
 
	gngx_hâp_up°ªam_√xt_îr‹s
[] = {

344 { 500, 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

345 { 502, 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

346 { 503, 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

347 { 504, 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

348 { 404, 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

353 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ˇche_mëhod_mask
[] = {

354 { 
ngx_°rög
("GET"), 
NGX_HTTP_GET
},

355 { 
ngx_°rög
("HEAD"), 
NGX_HTTP_HEAD
 },

356 { 
ngx_°rög
("POST"), 
NGX_HTTP_POST
 },

357 { 
ngx_nuŒ_°rög
, 0 }

361 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ign‹e_hódîs_masks
[] = {

362 { 
ngx_°rög
("X-Ac˚l-Redúe˘"), 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 },

363 { 
ngx_°rög
("X-Ac˚l-Expúes"), 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 },

364 { 
ngx_°rög
("X-Ac˚l-Limô-R©e"), 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 },

365 { 
ngx_°rög
("X-Ac˚l-Buf„rög"), 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 },

366 { 
ngx_°rög
("X-Ac˚l-Ch¨£t"), 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 },

367 { 
ngx_°rög
("Expúes"), 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
 },

368 { 
ngx_°rög
("Cache-C⁄åﬁ"), 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 },

369 { 
ngx_°rög
("Së-Cookõ"), 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 },

370 { 
ngx_nuŒ_°rög
, 0 }

374 
ngx_öt_t


375 
	$ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

377 
ngx_hâp_up°ªam_t
 *
u
;

379 
u
 = 
r
->
up°ªam
;

381 i‡(
u
 && u->
˛ónup
) {

382 
r
->
maö
->
cou¡
++;

383 
	`ngx_hâp_up°ªam_˛ónup
(
r
);

386 
u
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_t
));

387 i‡(
u
 =
NULL
) {

388  
NGX_ERROR
;

391 
r
->
up°ªam
 = 
u
;

393 
u
->
≥î
.
log
 = 
r
->
c⁄√˘i⁄
->log;

394 
u
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

395 #i‡(
NGX_THREADS
)

396 
u
->
≥î
.
lock
 = &
r
->
c⁄√˘i⁄
->lock;

399 #i‡(
NGX_HTTP_CACHE
)

400 
r
->
ˇche
 = 
NULL
;

403  
NGX_OK
;

404 
	}
}

408 
	$ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
)

410 
ngx_c⁄√˘i⁄_t
 *
c
;

412 
c
 = 
r
->
c⁄√˘i⁄
;

414 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

415 "hâ∞öô up°ªam, clõ¡Åimî: %d", 
c
->
ªad
->
timî_£t
);

417 i‡(
c
->
ªad
->
timî_£t
) {

418 
	`ngx_dñ_timî
(
c
->
ªad
);

421 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

423 i‡(!
c
->
wrôe
->
a˘ive
) {

424 i‡(
	`ngx_add_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLEAR_EVENT
)

425 =
NGX_ERROR
)

427 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

433 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

434 
	}
}

438 
	$ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

440 
ngx_°r_t
 *
ho°
;

441 
ngx_uöt_t
 
i
;

442 
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ãmp
;

443 
ngx_hâp_˛ónup_t
 *
˛n
;

444 
ngx_hâp_up°ªam_t
 *
u
;

445 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

446 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

447 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

449 i‡(
r
->
aio
) {

453 
u
 = 
r
->
up°ªam
;

455 #i‡(
NGX_HTTP_CACHE
)

457 i‡(
u
->
c⁄f
->
ˇche
) {

458 
ngx_öt_t
 
rc
;

460 
rc
 = 
	`ngx_hâp_up°ªam_ˇche
(
r
, 
u
);

462 i‡(
rc
 =
NGX_BUSY
) {

463 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_öô_ªque°
;

467 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

469 i‡(
rc
 =
NGX_DONE
) {

473 i‡(
rc
 !
NGX_DECLINED
) {

474 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

481 
u
->
°‹e
 = (u->
c⁄f
->°‹ê|| u->c⁄f->
°‹e_Àngths
);

483 i‡(!
u
->
°‹e
 && !
r
->
po°_a˘i⁄
 && !u->
c⁄f
->
ign‹e_˛õ¡_ab‹t
) {

484 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
;

485 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
;

488 i‡(
r
->
ªque°_body
) {

489 
u
->
ªque°_bufs
 = 
r
->
ªque°_body
->
bufs
;

492 i‡(
u
->
	`¸óã_ªque°
(
r
Ë!
NGX_OK
) {

493 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

497 
u
->
≥î
.
loˇl
 = u->
c⁄f
->local;

499 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

501 
u
->
ouçut
.
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

502 
u
->
ouçut
.
poﬁ
 = 
r
->pool;

503 
u
->
ouçut
.
bufs
.
num
 = 1;

504 
u
->
ouçut
.
bufs
.
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

505 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_chaö_wrôî
;

506 
u
->
ouçut
.
fûãr_˘x
 = &u->
wrôî
;

508 
u
->
wrôî
.
poﬁ
 = 
r
->pool;

510 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

512 
r
->
up°ªam_°©es
 = 
	`ngx_¨øy_¸óã
‘->
poﬁ
, 1,

513 (
ngx_hâp_up°ªam_°©e_t
));

514 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

515 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

521 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

522 i‡(
u
->
°©e
 =
NULL
) {

523 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

524 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

528 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

531 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

532 i‡(
˛n
 =
NULL
) {

533 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

537 
˛n
->
h™dÀr
 = 
ngx_hâp_up°ªam_˛ónup
;

538 
˛n
->
d©a
 = 
r
;

539 
u
->
˛ónup
 = &
˛n
->
h™dÀr
;

541 i‡(
u
->
ªsﬁved
 =
NULL
) {

543 
uscf
 = 
u
->
c⁄f
->
up°ªam
;

547 i‡(
u
->
ªsﬁved
->
sockaddr
) {

549 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
u
->
ªsﬁved
)

550 !
NGX_OK
)

552 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

553 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

557 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

562 
ho°
 = &
u
->
ªsﬁved
->host;

564 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

566 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

568 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

570 
uscf
 = 
uscÂ
[
i
];

572 i‡(
uscf
->
ho°
.
Àn
 == host->len

573 && ((
uscf
->
p‹t
 =0 && 
u
->
ªsﬁved
->
no_p‹t
)

574 || 
uscf
->
p‹t
 =
u
->
ªsﬁved
->port)

575 && 
	`ngx_memcmp
(
uscf
->
ho°
.
d©a
, ho°->d©a, ho°->
Àn
) == 0)

577 
found
;

581 i‡(
u
->
ªsﬁved
->
p‹t
 == 0) {

582 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

583 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

584 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

585 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

589 
ãmp
.
«me
 = *
ho°
;

591 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
˛cf
->
ªsﬁvî
, &
ãmp
);

592 i‡(
˘x
 =
NULL
) {

593 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

594 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

598 i‡(
˘x
 =
NGX_NO_RESOLVER
) {

599 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

600 "nÿªsﬁvî deföedÅÿªsﬁvê%V", 
ho°
);

602 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

606 
˘x
->
«me
 = *
ho°
;

607 
˘x
->
ty≥
 = 
NGX_RESOLVE_A
;

608 
˘x
->
h™dÀr
 = 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
;

609 
˘x
->
d©a
 = 
r
;

610 
˘x
->
timeout
 = 
˛cf
->
ªsﬁvî_timeout
;

612 
u
->
ªsﬁved
->
˘x
 = ctx;

614 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

615 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

616 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

617 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

624 
found
:

626 i‡(
uscf
->
≥î
.
	`öô
(
r
, uscfË!
NGX_OK
) {

627 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

628 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

632 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

633 
	}
}

636 #i‡(
NGX_HTTP_CACHE
)

638 
ngx_öt_t


639 
	$ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

641 
ngx_öt_t
 
rc
;

642 
ngx_hâp_ˇche_t
 *
c
;

644 
c
 = 
r
->
ˇche
;

646 i‡(
c
 =
NULL
) {

648 i‡(!(
r
->
mëhod
 & 
u
->
c⁄f
->
ˇche_mëhods
)) {

649  
NGX_DECLINED
;

652 i‡(
r
->
mëhod
 & 
NGX_HTTP_HEAD
) {

653 
u
->
mëhod
 = 
ngx_hâp_c‹e_gë_mëhod
;

656 i‡(
	`ngx_hâp_fûe_ˇche_√w
(
r
Ë!
NGX_OK
) {

657  
NGX_ERROR
;

660 i‡(
u
->
	`¸óã_key
(
r
Ë!
NGX_OK
) {

661  
NGX_ERROR
;

666 
	`ngx_hâp_fûe_ˇche_¸óã_key
(
r
);

668 i‡(
r
->
ˇche
->
hódî_°¨t
 + 256 >
u
->
c⁄f
->
buf„r_size
) {

669 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

672 &
u
->
c⁄f
->
moduÀ
, u->c⁄f->
buf„r_size
,

673 
	`ngx_Æign
(
r
->
ˇche
->
hódî_°¨t
 + 256, 1024));

675 
r
->
ˇche
 = 
NULL
;

676  
NGX_DECLINED
;

679 
u
->
ˇchóbÀ
 = 1;

681 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
ˇche_by∑ss
)) {

683 
NGX_ERROR
:

684  
NGX_ERROR
;

686 
NGX_DECLINED
:

687 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_BYPASS
;

688  
NGX_DECLINED
;

694 
c
 = 
r
->
ˇche
;

696 
c
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

697 
c
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

698 
c
->
fûe_ˇche
 = 
u
->
c⁄f
->
ˇche
->
d©a
;

700 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_MISS
;

703 
rc
 = 
	`ngx_hâp_fûe_ˇche_›í
(
r
);

705 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

706 "hâ∞up°ªam cache: %i", 
rc
);

708 
rc
) {

710 
NGX_HTTP_CACHE_UPDATING
:

712 i‡(
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_UPDATING
) {

713 
u
->
ˇche_°©us
 = 
rc
;

714 
rc
 = 
NGX_OK
;

717 
rc
 = 
NGX_HTTP_CACHE_STALE
;

722 
NGX_OK
:

723 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

726 
rc
) {

728 
NGX_OK
:

730 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

732 i‡(
rc
 !
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

733  
rc
;

738 
NGX_HTTP_CACHE_STALE
:

740 
c
->
vÆid_£c
 = 0;

741 
u
->
buf„r
.
°¨t
 = 
NULL
;

742 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_EXPIRED
;

746 
NGX_DECLINED
:

748 i‡((
size_t
Ë(
u
->
buf„r
.
íd
 - u->buf„r.
°¨t
Ë< u->
c⁄f
->
buf„r_size
) {

749 
u
->
buf„r
.
°¨t
 = 
NULL
;

752 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
 + 
c
->
hódî_°¨t
;

753 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

758 
NGX_HTTP_CACHE_SCARCE
:

760 
u
->
ˇchóbÀ
 = 0;

764 
NGX_AGAIN
:

766  
NGX_BUSY
;

768 
NGX_ERROR
:

770  
NGX_ERROR
;

776 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

778  
rc
;

781 
r
->
ˇched
 = 0;

783  
NGX_DECLINED
;

784 
	}
}

787 
ngx_öt_t


788 
	$ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

790 
ngx_öt_t
 
rc
;

791 
ngx_hâp_ˇche_t
 *
c
;

793 
r
->
ˇched
 = 1;

794 
c
 = 
r
->
ˇche
;

796 i‡(
c
->
hódî_°¨t
 =c->
body_°¨t
) {

797 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

798  
	`ngx_hâp_ˇche_£nd
(
r
);

803 
u
->
buf„r
 = *
c
->
buf
;

804 
u
->
buf„r
.
pos
 +
c
->
hódî_°¨t
;

806 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

808 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

809 (
ngx_èbÀ_ñt_t
))

810 !
NGX_OK
)

812  
NGX_ERROR
;

815 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

817 i‡(
rc
 =
NGX_OK
) {

819 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

820  
NGX_DONE
;

823  
	`ngx_hâp_ˇche_£nd
(
r
);

826 i‡(
rc
 =
NGX_ERROR
) {

827  
NGX_ERROR
;

834  
rc
;

835 
	}
}

841 
	$ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

843 
ngx_hâp_ªque°_t
 *
r
;

844 
ngx_hâp_up°ªam_t
 *
u
;

845 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
;

847 
r
 = 
˘x
->
d©a
;

849 
u
 = 
r
->
up°ªam
;

850 
ur
 = 
u
->
ªsﬁved
;

852 i‡(
˘x
->
°©e
) {

853 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

855 &
˘x
->
«me
, ctx->
°©e
,

856 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

858 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

862 
ur
->
«ddrs
 = 
˘x
->naddrs;

863 
ur
->
addrs
 = 
˘x
->addrs;

865 #i‡(
NGX_DEBUG
)

867 
ö_addr_t
 
addr
;

868 
ngx_uöt_t
 
i
;

870 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

871 
addr
 = 
	`¡ohl
(
ur
->
addrs
[
i
]);

873 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

875 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

876 (
addr
 >> 8) & 0xff,áddr & 0xff);

881 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
ur
Ë!
NGX_OK
) {

882 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

883 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

887 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

888 
ur
->
˘x
 = 
NULL
;

890 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

891 
	}
}

895 
	$ngx_hâp_up°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

897 
ngx_c⁄√˘i⁄_t
 *
c
;

898 
ngx_hâp_ªque°_t
 *
r
;

899 
ngx_hâp_log_˘x_t
 *
˘x
;

900 
ngx_hâp_up°ªam_t
 *
u
;

902 
c
 = 
ev
->
d©a
;

903 
r
 = 
c
->
d©a
;

905 
u
 = 
r
->
up°ªam
;

906 
c
 = 
r
->
c⁄√˘i⁄
;

908 
˘x
 = 
c
->
log
->
d©a
;

909 
˘x
->
cuºít_ªque°
 = 
r
;

911 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

912 "hâ∞up°ªamÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

914 i‡(
ev
->
wrôe
) {

915 
u
->
	`wrôe_evít_h™dÀr
(
r
, u);

918 
u
->
	`ªad_evít_h™dÀr
(
r
, u);

921 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

922 
	}
}

926 
	$ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

928 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
ªad
);

929 
	}
}

933 
	$ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

935 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
wrôe
);

936 
	}
}

940 
	$ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

941 
ngx_evít_t
 *
ev
)

943 
n
;

944 
buf
[1];

945 
ngx_îr_t
 
îr
;

946 
ngx_öt_t
 
evít
;

947 
ngx_c⁄√˘i⁄_t
 *
c
;

948 
ngx_hâp_up°ªam_t
 *
u
;

950 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

952 
ev
->
wrôe
, &
r
->
uri
);

954 
c
 = 
r
->
c⁄√˘i⁄
;

955 
u
 = 
r
->
up°ªam
;

957 i‡(
c
->
îr‹
) {

958 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

960 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

962 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

963 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

964 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

969 i‡(!
u
->
ˇchóbÀ
) {

970 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

971 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

977 #i‡(
NGX_HAVE_KQUEUE
)

979 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

981 i‡(!
ev
->
≥ndög_eof
) {

985 
ev
->
eof
 = 1;

986 
c
->
îr‹
 = 1;

988 i‡(
ev
->
kq_î∫o
) {

989 
ev
->
îr‹
 = 1;

992 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

993 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

996 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

997 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1001 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1005 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1006 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1007 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1015 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

1017 
îr
 = 
ngx_sockë_î∫o
;

1019 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 
îr
,

1020 "hâ∞up°ªamÑecv(): %d", 
n
);

1022 i‡(
ev
->
wrôe
 && (
n
 >0 || 
îr
 =
NGX_EAGAIN
)) {

1026 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1028 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1030 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1031 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1032 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1037 i‡(
n
 > 0) {

1041 i‡(
n
 == -1) {

1042 i‡(
îr
 =
NGX_EAGAIN
) {

1046 
ev
->
îr‹
 = 1;

1049 
îr
 = 0;

1052 
ev
->
eof
 = 1;

1053 
c
->
îr‹
 = 1;

1055 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1056 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1059 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1060 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1064 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1067 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1068 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1069 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1071 
	}
}

1075 
	$ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1077 
ngx_öt_t
 
rc
;

1078 
ngx_time_t
 *
ç
;

1079 
ngx_c⁄√˘i⁄_t
 *
c
;

1081 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1083 
r
->
c⁄√˘i⁄
->
sögÀ_c⁄√˘i⁄
 = 0;

1085 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

1086 
ç
 = 
	`ngx_timeofday
();

1087 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

1088 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

1091 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

1092 i‡(
u
->
°©e
 =
NULL
) {

1093 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1094 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1098 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

1100 
ç
 = 
	`ngx_timeofday
();

1101 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
;

1102 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
;

1104 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
u
->
≥î
);

1106 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1107 "hâ∞up°ªam c⁄√˘: %i", 
rc
);

1109 i‡(
rc
 =
NGX_ERROR
) {

1110 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1111 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1115 
u
->
°©e
->
≥î
 = u->≥î.
«me
;

1117 i‡(
rc
 =
NGX_BUSY
) {

1118 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "noÜive upstreams");

1119 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_NOLIVE
);

1123 i‡(
rc
 =
NGX_DECLINED
) {

1124 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1130 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1132 
c
->
d©a
 = 
r
;

1134 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1135 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1137 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
;

1138 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_hódî
;

1140 
c
->
£ndfûe
 &
r
->
c⁄√˘i⁄
->sendfile;

1141 
u
->
ouçut
.
£ndfûe
 = 
c
->sendfile;

1143 
c
->
poﬁ
 = 
r
->pool;

1144 
c
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1145 
c
->
ªad
->
log
 = c->log;

1146 
c
->
wrôe
->
log
 = c->log;

1150 
u
->
wrôî
.
out
 = 
NULL
;

1151 
u
->
wrôî
.
œ°
 = &u->wrôî.
out
;

1152 
u
->
wrôî
.
c⁄√˘i⁄
 = 
c
;

1153 
u
->
wrôî
.
limô
 = 0;

1155 i‡(
u
->
ªque°_£¡
) {

1156 i‡(
	`ngx_hâp_up°ªam_ªöô
(
r
, 
u
Ë!
NGX_OK
) {

1157 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1158 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1163 i‡(
r
->
ªque°_body


1164 && 
r
->
ªque°_body
->
buf


1165 && 
r
->
ªque°_body
->
ãmp_fûe


1166 && 
r
 =r->
maö
)

1173 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1174 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1175 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1176 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1180 
u
->
ouçut
.
‰ì
->
buf
 = 
r
->
ªque°_body
->buf;

1181 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1182 
u
->
ouçut
.
Æloˇãd
 = 1;

1184 
r
->
ªque°_body
->
buf
->
pos
 =Ñ->ªque°_body->buf->
°¨t
;

1185 
r
->
ªque°_body
->
buf
->
œ°
 =Ñ->ªque°_body->buf->
°¨t
;

1186 
r
->
ªque°_body
->
buf
->
èg
 = 
u
->
ouçut
.tag;

1189 
u
->
ªque°_£¡
 = 0;

1191 i‡(
rc
 =
NGX_AGAIN
) {

1192 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
c⁄√˘_timeout
);

1196 #i‡(
NGX_HTTP_SSL
)

1198 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1199 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1205 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1206 
	}
}

1209 #i‡(
NGX_HTTP_SSL
)

1212 
	$ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1213 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
)

1215 
ngx_öt_t
 
rc
;

1217 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
u
->
c⁄f
->
s¶
, 
c
,

1218 
NGX_SSL_BUFFER
|
NGX_SSL_CLIENT
)

1219 !
NGX_OK
)

1221 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1222 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1226 
c
->
£ndfûe
 = 0;

1227 
u
->
ouçut
.
£ndfûe
 = 0;

1229 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1230 i‡(
u
->
≥î
.
	`£t_£ssi⁄
(&u->≥î, u->≥î.
d©a
Ë!
NGX_OK
) {

1231 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1232 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1237 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "SSL handshakingÅo upstream";

1239 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

1241 i‡(
rc
 =
NGX_AGAIN
) {

1242 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_s¶_h™dshake
;

1246 
	`ngx_hâp_up°ªam_s¶_h™dshake
(
c
);

1247 
	}
}

1251 
	$ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

1253 
ngx_hâp_ªque°_t
 *
r
;

1254 
ngx_hâp_up°ªam_t
 *
u
;

1256 
r
 = 
c
->
d©a
;

1257 
u
 = 
r
->
up°ªam
;

1259 i‡(
c
->
s¶
->
h™dshaked
) {

1261 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1262 
u
->
≥î
.
	`ßve_£ssi⁄
(&u->≥î, u->≥î.
d©a
);

1265 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1266 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1268 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1273 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1275 
	}
}

1280 
ngx_öt_t


1281 
	$ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1283 
ngx_chaö_t
 *
˛
;

1285 i‡(
u
->
	`ªöô_ªque°
(
r
Ë!
NGX_OK
) {

1286  
NGX_ERROR
;

1289 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

1291 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1292 (
ngx_èbÀ_ñt_t
))

1293 !
NGX_OK
)

1295  
NGX_ERROR
;

1300 
˛
 = 
u
->
ªque°_bufs
; cl; c»˛->
√xt
) {

1301 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

1302 
˛
->
buf
->
fûe_pos
 = 0;

1307 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe


1308 && 
r
 !r->
maö
 && 
u
->
ouçut
.
buf
)

1310 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1311 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1312  
NGX_ERROR
;

1315 
u
->
ouçut
.
‰ì
->
buf
 = u->output.buf;

1316 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1318 
u
->
ouçut
.
buf
->
pos
 = u->ouçut.buf->
°¨t
;

1319 
u
->
ouçut
.
buf
->
œ°
 = u->ouçut.buf->
°¨t
;

1322 
u
->
ouçut
.
buf
 = 
NULL
;

1323 
u
->
ouçut
.
ö
 = 
NULL
;

1324 
u
->
ouçut
.
busy
 = 
NULL
;

1328 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1330 #i‡(
NGX_HTTP_CACHE
)

1332 i‡(
r
->
ˇche
) {

1333 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1338 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1340  
NGX_OK
;

1341 
	}
}

1345 
	$ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1347 
ngx_öt_t
 
rc
;

1348 
ngx_c⁄√˘i⁄_t
 *
c
;

1350 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1352 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1355 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1356 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1360 
c
->
log
->
a˘i⁄
 = "sendingÑequestÅo upstream";

1362 
rc
 = 
	`ngx_ouçut_chaö
(&
u
->
ouçut
, u->
ªque°_£¡
 ? 
NULL
 : u->
ªque°_bufs
);

1364 
u
->
ªque°_£¡
 = 1;

1366 i‡(
rc
 =
NGX_ERROR
) {

1367 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1371 i‡(
c
->
wrôe
->
timî_£t
) {

1372 
	`ngx_dñ_timî
(
c
->
wrôe
);

1375 i‡(
rc
 =
NGX_AGAIN
) {

1376 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

1378 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
Ë!
NGX_OK
) {

1379 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1380 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1389 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

1390 i‡(
	`ngx_t˝_push
(
c
->
fd
Ë=
NGX_ERROR
) {

1391 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
ngx_sockë_î∫o
,

1392 
ngx_t˝_push_n
 " failed");

1393 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1394 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1398 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

1401 
	`ngx_add_timî
(
c
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

1404 i‡(
c
->
ªad
->
ªady
) {

1415 
	`ngx_hâp_up°ªam_¥o˚ss_hódî
(
r
, 
u
);

1420 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1422 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1423 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1424 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1427 
	}
}

1431 
	$ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

1432 
ngx_hâp_up°ªam_t
 *
u
)

1434 
ngx_c⁄√˘i⁄_t
 *
c
;

1436 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1438 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1441 i‡(
c
->
wrôe
->
timedout
) {

1442 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1446 #i‡(
NGX_HTTP_SSL
)

1448 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1449 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1455 i‡(
u
->
hódî_£¡
) {

1456 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1458 (Ë
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0);

1463 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1464 
	}
}

1468 
	$ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1470 
ssize_t
 
n
;

1471 
ngx_öt_t
 
rc
;

1472 
ngx_c⁄√˘i⁄_t
 *
c
;

1474 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1476 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1479 
c
->
log
->
a˘i⁄
 = "readingÑesponse header from upstream";

1481 i‡(
c
->
ªad
->
timedout
) {

1482 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1486 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1487 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1491 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

1492 
u
->
buf„r
.
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, u->
c⁄f
->
buf„r_size
);

1493 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

1494 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1495 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1499 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1500 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

1501 
u
->
buf„r
.
íd
 = u->buf„r.
°¨t
 + u->
c⁄f
->
buf„r_size
;

1502 
u
->
buf„r
.
ãmp‹¨y
 = 1;

1504 
u
->
buf„r
.
èg
 = u->
ouçut
.tag;

1506 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1507 (
ngx_èbÀ_ñt_t
))

1508 !
NGX_OK
)

1510 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1511 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1515 #i‡(
NGX_HTTP_CACHE
)

1517 i‡(
r
->
ˇche
) {

1518 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1519 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1526 
n
 = 
c
->
	`ªcv
(c, 
u
->
buf„r
.
œ°
, u->buf„r.
íd
 - u->buffer.last);

1528 i‡(
n
 =
NGX_AGAIN
) {

1530 
	`ngx_add_timî
(
ªv
, 
u
->
ªad_timeout
);

1533 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1534 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1535 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1542 i‡(
n
 == 0) {

1543 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1547 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

1548 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1552 
u
->
buf„r
.
œ°
 +
n
;

1555 
u
->
vÆid_hódî_ö
 = 0;

1557 
u
->
≥î
.
ˇched
 = 0;

1560 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

1562 i‡(
rc
 =
NGX_AGAIN
) {

1564 i‡(
u
->
buf„r
.
œ°
 =u->buf„r.
íd
) {

1565 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1568 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
,

1569 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

1579 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

1580 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

1584 i‡(
rc
 =
NGX_ERROR
) {

1585 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1586 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1592 i‡(
u
->
hódîs_ö
.
°©us_n
 > 
NGX_HTTP_SPECIAL_RESPONSE
) {

1594 i‡(
r
->
subªque°_ö_mem‹y
) {

1595 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1598 i‡(
	`ngx_hâp_up°ªam_ã°_√xt
(
r
, 
u
Ë=
NGX_OK
) {

1602 i‡(
	`ngx_hâp_up°ªam_öãr˚±_îr‹s
(
r
, 
u
Ë=
NGX_OK
) {

1607 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

1611 i‡(!
r
->
subªque°_ö_mem‹y
) {

1612 
	`ngx_hâp_up°ªam_£nd_ª•⁄£
(
r
, 
u
);

1618 i‡(
u
->
öput_fûãr
 =
NULL
) {

1619 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

1620 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

1621 
u
->
öput_fûãr_˘x
 = 
r
;

1624 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

1625 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1626 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1630 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1632 i‡(
n
) {

1633 
u
->
buf„r
.
œ°
 -
n
;

1635 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

1637 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

1638 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

1642 i‡(
u
->
Àngth
 == 0) {

1643 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

1648 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
;

1650 
	`ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
r
, 
u
);

1651 
	}
}

1654 
ngx_öt_t


1655 
	$ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1657 
ngx_uöt_t
 
°©us
;

1658 
ngx_hâp_up°ªam_√xt_t
 *
un
;

1660 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1662 
un
 = 
ngx_hâp_up°ªam_√xt_îr‹s
; un->
°©us
; un++) {

1664 i‡(
°©us
 !
un
->status) {

1668 i‡(
u
->
≥î
.
åõs
 > 1 && (u->
c⁄f
->
√xt_up°ªam
 & 
un
->
mask
)) {

1669 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
un
->
mask
);

1670  
NGX_OK
;

1673 #i‡(
NGX_HTTP_CACHE
)

1675 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


1676 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
un
->
mask
))

1678 
ngx_öt_t
 
rc
;

1680 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

1682 i‡(
rc
 =
NGX_OK
) {

1683 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

1684 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

1687 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

1688  
NGX_OK
;

1694  
NGX_DECLINED
;

1695 
	}
}

1698 
ngx_öt_t


1699 
	$ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

1700 
ngx_hâp_up°ªam_t
 *
u
)

1702 
ngx_öt_t
 
°©us
;

1703 
ngx_uöt_t
 
i
;

1704 
ngx_èbÀ_ñt_t
 *
h
;

1705 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

1706 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1708 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1710 i‡(
°©us
 =
NGX_HTTP_NOT_FOUND
 && 
u
->
c⁄f
->
öãr˚±_404
) {

1711 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_NOT_FOUND
);

1712  
NGX_OK
;

1715 i‡(!
u
->
c⁄f
->
öãr˚±_îr‹s
) {

1716  
NGX_DECLINED
;

1719 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1721 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

1722  
NGX_DECLINED
;

1725 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

1726 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

1728 i‡(
îr_∑ge
[
i
].
°©us
 == status) {

1730 i‡(
°©us
 =
NGX_HTTP_UNAUTHORIZED


1731 && 
u
->
hódîs_ö
.
www_authítiˇã
)

1733 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

1735 i‡(
h
 =
NULL
) {

1736 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1737 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1738  
NGX_OK
;

1741 *
h
 = *
u
->
hódîs_ö
.
www_authítiˇã
;

1743 
r
->
hódîs_out
.
www_authítiˇã
 = 
h
;

1746 #i‡(
NGX_HTTP_CACHE
)

1748 i‡(
r
->
ˇche
) {

1749 
time_t
 
vÆid
;

1751 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
°©us
);

1753 i‡(
vÆid
) {

1754 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

1755 
r
->
ˇche
->
îr‹
 = 
°©us
;

1758 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

1761 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

1763  
NGX_OK
;

1767  
NGX_DECLINED
;

1768 
	}
}

1771 
ngx_öt_t


1772 
	$ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
)

1774 
îr
;

1775 
sockÀn_t
 
Àn
;

1777 #i‡(
NGX_HAVE_KQUEUE
)

1779 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1780 i‡(
c
->
wrôe
->
≥ndög_eof
) {

1781 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1782 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, c->
wrôe
->
kq_î∫o
,

1784  
NGX_ERROR
;

1790 
îr
 = 0;

1791 
Àn
 = ();

1798 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

1801 
îr
 = 
ngx_î∫o
;

1804 i‡(
îr
) {

1805 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1806 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "connect() failed");

1807  
NGX_ERROR
;

1811  
NGX_OK
;

1812 
	}
}

1815 
ngx_öt_t


1816 
	$ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1818 
ngx_°r_t
 *
uri
, 
¨gs
;

1819 
ngx_uöt_t
 
i
, 
Êags
;

1820 
ngx_li°_∑π_t
 *
∑π
;

1821 
ngx_èbÀ_ñt_t
 *
h
;

1822 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1823 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1825 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1827 i‡(
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘


1828 && !(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
))

1830 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_DECLINED
);

1832 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

1833 
h
 = 
∑π
->
ñts
;

1835 
i
 = 0; ; i++) {

1837 i‡(
i
 >
∑π
->
√…s
) {

1838 i‡(
∑π
->
√xt
 =
NULL
) {

1842 
∑π
 =Ö¨t->
√xt
;

1843 
h
 = 
∑π
->
ñts
;

1844 
i
 = 0;

1847 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

1848 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

1850 i‡(
hh
 && hh->
ªdúe˘
) {

1851 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

1852 
	`ngx_hâp_föÆize_ªque°
(
r
,

1853 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1854  
NGX_DONE
;

1859 
uri
 = &
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘
->
vÆue
;

1860 
	`ngx_°r_nuŒ
(&
¨gs
);

1861 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

1863 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

1864 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1865  
NGX_DONE
;

1868 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

1869 
r
->
mëhod
 = 
NGX_HTTP_GET
;

1872 
r
->
vÆid_u≈¨£d_uri
 = 0;

1874 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, 
uri
, &
¨gs
);

1875 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

1876  
NGX_DONE
;

1879 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

1880 
h
 = 
∑π
->
ñts
;

1882 
i
 = 0; ; i++) {

1884 i‡(
i
 >
∑π
->
√…s
) {

1885 i‡(
∑π
->
√xt
 =
NULL
) {

1889 
∑π
 =Ö¨t->
√xt
;

1890 
h
 = 
∑π
->
ñts
;

1891 
i
 = 0;

1894 i‡(
	`ngx_hash_föd
(&
u
->
c⁄f
->
hide_hódîs_hash
, 
h
[
i
].
hash
,

1895 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
))

1900 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

1901 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

1903 i‡(
hh
) {

1904 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

1905 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1906 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1907  
NGX_DONE
;

1913 i‡(
	`ngx_hâp_up°ªam_c›y_hódî_löe
(
r
, &
h
[
i
], 0Ë!
NGX_OK
) {

1914 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1915 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1916  
NGX_DONE
;

1920 i‡(
r
->
hódîs_out
.
£rvî
 &&Ñ->hódîs_out.£rvî->
vÆue
.
d©a
 =
NULL
) {

1921 
r
->
hódîs_out
.
£rvî
->
hash
 = 0;

1924 i‡(
r
->
hódîs_out
.
d©e
 &&Ñ->hódîs_out.d©e->
vÆue
.
d©a
 =
NULL
) {

1925 
r
->
hódîs_out
.
d©e
->
hash
 = 0;

1928 
r
->
hódîs_out
.
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1929 
r
->
hódîs_out
.
°©us_löe
 = 
u
->
hódîs_ö
.status_line;

1931 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
r
->
hódîs_out
.content_length_n;

1933 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 != -1) {

1934 
u
->
Àngth
 = (
size_t
Ë
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

1937 
u
->
Àngth
 = 
NGX_MAX_SIZE_T_VALUE
;

1940  
NGX_OK
;

1941 
	}
}

1945 
	$ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

1946 
ngx_hâp_up°ªam_t
 *
u
)

1948 
size_t
 
size
;

1949 
ssize_t
 
n
;

1950 
ngx_buf_t
 *
b
;

1951 
ngx_evít_t
 *
ªv
;

1952 
ngx_c⁄√˘i⁄_t
 *
c
;

1954 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1955 
ªv
 = 
c
->
ªad
;

1957 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1960 i‡(
ªv
->
timedout
) {

1961 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

1962 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ETIMEDOUT
);

1966 
b
 = &
u
->
buf„r
;

1970 
size
 = 
b
->
íd
 - b->
œ°
;

1972 i‡(
size
 == 0) {

1973 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

1975 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

1979 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

1981 i‡(
n
 =
NGX_AGAIN
) {

1985 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1986 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
n
);

1990 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

1992 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

1993 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

1997 i‡(!
ªv
->
ªady
) {

2002 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2003 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2007 i‡(
ªv
->
a˘ive
) {

2008 
	`ngx_add_timî
(
ªv
, 
u
->
c⁄f
->
ªad_timeout
);

2010 } i‡(
ªv
->
timî_£t
) {

2011 
	`ngx_dñ_timî
(
ªv
);

2013 
	}
}

2017 
	$ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2019 
t˝_nodñay
;

2020 
ssize_t
 
n
;

2021 
ngx_öt_t
 
rc
;

2022 
ngx_evít_pùe_t
 *
p
;

2023 
ngx_c⁄√˘i⁄_t
 *
c
;

2024 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2026 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

2028 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
po°_a˘i⁄
) {

2029 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2033 
c
 = 
r
->
c⁄√˘i⁄
;

2035 i‡(
r
->
hódî_⁄ly
) {

2037 i‡(
u
->
ˇchóbÀ
 || u->
°‹e
) {

2039 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

2040 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2041 
ngx_shutdown_sockë_n
 " failed");

2044 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2045 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2046 
c
->
îr‹
 = 1;

2049 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2054 
u
->
hódî_£¡
 = 1;

2056 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe
) {

2057 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
);

2058 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2061 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2063 i‡(!
u
->
buf„rög
) {

2065 i‡(
u
->
öput_fûãr
 =
NULL
) {

2066 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

2067 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

2068 
u
->
öput_fûãr_˘x
 = 
r
;

2071 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
;

2072 
r
->
wrôe_evít_h™dÀr
 =

2073 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
;

2075 
r
->
limô_øã
 = 0;

2077 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

2078 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2082 i‡(
˛cf
->
t˝_nodñay
 && 
c
->t˝_nodñay =
NGX_TCP_NODELAY_UNSET
) {

2083 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2085 
t˝_nodñay
 = 1;

2087 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2088 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2090 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2092 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2096 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2099 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2101 i‡(
n
) {

2102 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2104 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2106 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2107 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2111 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
r
);

2114 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

2115 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

2117 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

2118 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2122 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady
) {

2123 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
r
, 
u
);

2132 #i‡(
NGX_HTTP_CACHE
)

2134 i‡(
r
->
ˇche
 &&Ñ->ˇche->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

2135 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ˇche
->
fûe
.
fd
);

2136 
r
->
ˇche
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2139 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
no_ˇche
)) {

2141 
NGX_ERROR
:

2142 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2145 
NGX_DECLINED
:

2146 
u
->
ˇchóbÀ
 = 0;

2151 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_BYPASS
) {

2153 
r
->
ˇche
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

2154 
r
->
ˇche
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

2155 
r
->
ˇche
->
fûe_ˇche
 = 
u
->
c⁄f
->ˇche->
d©a
;

2157 i‡(
	`ngx_hâp_fûe_ˇche_¸óã
(
r
Ë!
NGX_OK
) {

2158 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2166 i‡(
u
->
ˇchóbÀ
) {

2167 
time_t
 
now
, 
vÆid
;

2169 
now
 = 
	`ngx_time
();

2171 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2173 i‡(
vÆid
 == 0) {

2174 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

2175 
u
->
hódîs_ö
.
°©us_n
);

2176 i‡(
vÆid
) {

2177 
r
->
ˇche
->
vÆid_£c
 = 
now
 + 
vÆid
;

2181 i‡(
vÆid
) {

2182 
r
->
ˇche
->
œ°_modifõd
 =Ñ->
hódîs_out
.
œ°_modifõd_time
;

2183 
r
->
ˇche
->
d©e
 = 
now
;

2184 
r
->
ˇche
->
body_°¨t
 = (
u_sh‹t
Ë(
u
->
buf„r
.
pos
 - u->buf„r.
°¨t
);

2186 
	`ngx_hâp_fûe_ˇche_£t_hódî
(
r
, 
u
->
buf„r
.
°¨t
);

2189 
u
->
ˇchóbÀ
 = 0;

2190 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

2194 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2195 "hâ∞ˇchóbÀ: %d", 
u
->
ˇchóbÀ
);

2197 i‡(
u
->
ˇchóbÀ
 =0 && 
r
->
ˇche
) {

2198 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2203 
p
 = 
u
->
pùe
;

2205 
p
->
ouçut_fûãr
 = (
ngx_evít_pùe_ouçut_fûãr_±
Ë
ngx_hâp_ouçut_fûãr
;

2206 
p
->
ouçut_˘x
 = 
r
;

2207 
p
->
èg
 = 
u
->
ouçut
.tag;

2208 
p
->
bufs
 = 
u
->
c⁄f
->bufs;

2209 
p
->
busy_size
 = 
u
->
c⁄f
->
busy_buf„rs_size
;

2210 
p
->
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2211 
p
->
down°ªam
 = 
c
;

2212 
p
->
poﬁ
 = 
r
->pool;

2213 
p
->
log
 = 
c
->log;

2215 
p
->
ˇchóbÀ
 = 
u
->ˇchóbÀ || u->
°‹e
;

2217 
p
->
ãmp_fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

2218 i‡(
p
->
ãmp_fûe
 =
NULL
) {

2219 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2223 
p
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2224 
p
->
ãmp_fûe
->
fûe
.
log
 = 
c
->log;

2225 
p
->
ãmp_fûe
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

2226 
p
->
ãmp_fûe
->
poﬁ
 = 
r
->pool;

2228 i‡(
p
->
ˇchóbÀ
) {

2229 
p
->
ãmp_fûe
->
≥rsi°ít
 = 1;

2232 
p
->
ãmp_fûe
->
log_Àvñ
 = 
NGX_LOG_WARN
;

2233 
p
->
ãmp_fûe
->
w¨n
 = "an upstreamÑesponse is buffered "

2237 
p
->
max_ãmp_fûe_size
 = 
u
->
c⁄f
->max_temp_file_size;

2238 
p
->
ãmp_fûe_wrôe_size
 = 
u
->
c⁄f
->temp_file_write_size;

2240 
p
->
¥îód_bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2241 i‡(
p
->
¥îód_bufs
 =
NULL
) {

2242 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2246 
p
->
¥îód_bufs
->
buf
 = &
u
->
buf„r
;

2247 
p
->
¥îód_bufs
->
√xt
 = 
NULL
;

2248 
u
->
buf„r
.
ªcy˛ed
 = 1;

2250 
p
->
¥îód_size
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2252 i‡(
u
->
ˇchóbÀ
) {

2254 
p
->
buf_to_fûe
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2255 i‡(
p
->
buf_to_fûe
 =
NULL
) {

2256 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2260 
p
->
buf_to_fûe
->
pos
 = 
u
->
buf„r
.
°¨t
;

2261 
p
->
buf_to_fûe
->
œ°
 = 
u
->
buf„r
.
pos
;

2262 
p
->
buf_to_fûe
->
ãmp‹¨y
 = 1;

2265 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

2267 
p
->
sögÀ_buf
 = 1;

2271 
p
->
‰ì_bufs
 = 1;

2277 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2279 i‡(
u
->
c⁄f
->
cy˛ic_ãmp_fûe
) {

2287 
p
->
cy˛ic_ãmp_fûe
 = 1;

2288 
c
->
£ndfûe
 = 0;

2291 
p
->
cy˛ic_ãmp_fûe
 = 0;

2294 
p
->
ªad_timeout
 = 
u
->
c⁄f
->read_timeout;

2295 
p
->
£nd_timeout
 = 
˛cf
->send_timeout;

2296 
p
->
£nd_low©
 = 
˛cf
->send_lowat;

2298 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
;

2299 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
;

2301 
	`ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
r
, 
u
);

2302 
	}
}

2306 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2308 
ngx_evít_t
 *
wev
;

2309 
ngx_c⁄√˘i⁄_t
 *
c
;

2310 
ngx_hâp_up°ªam_t
 *
u
;

2312 
c
 = 
r
->
c⁄√˘i⁄
;

2313 
u
 = 
r
->
up°ªam
;

2314 
wev
 = 
c
->
wrôe
;

2316 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2319 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

2321 i‡(
wev
->
timedout
) {

2322 
c
->
timedout
 = 1;

2323 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2324 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2328 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 1);

2329 
	}
}

2333 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2334 
ngx_hâp_up°ªam_t
 *
u
)

2336 
ngx_c⁄√˘i⁄_t
 *
c
;

2338 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2340 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2343 
c
->
log
->
a˘i⁄
 = "reading upstream";

2345 i‡(
c
->
ªad
->
timedout
) {

2346 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2347 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2351 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 0);

2352 
	}
}

2356 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

2357 
ngx_uöt_t
 
do_wrôe
)

2359 
size_t
 
size
;

2360 
ssize_t
 
n
;

2361 
ngx_buf_t
 *
b
;

2362 
ngx_öt_t
 
rc
;

2363 
ngx_c⁄√˘i⁄_t
 *
down°ªam
, *
up°ªam
;

2364 
ngx_hâp_up°ªam_t
 *
u
;

2365 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2367 
u
 = 
r
->
up°ªam
;

2368 
down°ªam
 = 
r
->
c⁄√˘i⁄
;

2369 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2371 
b
 = &
u
->
buf„r
;

2373 
do_wrôe
 = do_wrôê|| 
u
->
Àngth
 == 0;

2377 i‡(
do_wrôe
) {

2379 i‡(
u
->
out_bufs
 || u->
busy_bufs
) {

2380 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
u
->
out_bufs
);

2382 i‡(
rc
 =
NGX_ERROR
) {

2383 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2387 
	`ngx_chaö_upd©e_chaös
(&
u
->
‰ì_bufs
, &u->
busy_bufs
,

2388 &
u
->
out_bufs
, u->
ouçut
.
èg
);

2391 i‡(
u
->
busy_bufs
 =
NULL
) {

2393 i‡(
u
->
Àngth
 == 0

2394 || 
up°ªam
->
ªad
->
eof


2395 || 
up°ªam
->
ªad
->
îr‹
)

2397 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2401 
b
->
pos
 = b->
°¨t
;

2402 
b
->
œ°
 = b->
°¨t
;

2406 
size
 = 
b
->
íd
 - b->
œ°
;

2408 i‡(
size
 > 
u
->
Àngth
) {

2409 
size
 = 
u
->
Àngth
;

2412 i‡(
size
 && 
up°ªam
->
ªad
->
ªady
) {

2414 
n
 = 
up°ªam
->
	`ªcv
(up°ªam, 
b
->
œ°
, 
size
);

2416 i‡(
n
 =
NGX_AGAIN
) {

2420 i‡(
n
 > 0) {

2421 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2423 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2424 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2429 
do_wrôe
 = 1;

2437 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2439 i‡(
down°ªam
->
d©a
 =
r
) {

2440 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

2441 !
NGX_OK
)

2443 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2448 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

2449 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

2451 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

2452 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

2455 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

2456 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2460 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

2461 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

2463 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

2464 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

2466 
	}
}

2469 
ngx_öt_t


2470 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
)

2472  
NGX_OK
;

2473 
	}
}

2476 
ngx_öt_t


2477 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2479 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2481 
ngx_buf_t
 *
b
;

2482 
ngx_chaö_t
 *
˛
, **
Œ
;

2483 
ngx_hâp_up°ªam_t
 *
u
;

2485 
u
 = 
r
->
up°ªam
;

2487 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2488 
Œ
 = &
˛
->
√xt
;

2491 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2492 i‡(
˛
 =
NULL
) {

2493  
NGX_ERROR
;

2496 *
Œ
 = 
˛
;

2498 
˛
->
buf
->
Êush
 = 1;

2499 
˛
->
buf
->
mem‹y
 = 1;

2501 
b
 = &
u
->
buf„r
;

2503 
˛
->
buf
->
pos
 = 
b
->
œ°
;

2504 
b
->
œ°
 +
byãs
;

2505 
˛
->
buf
->
œ°
 = 
b
->last;

2506 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

2508 i‡(
u
->
Àngth
 =
NGX_MAX_SIZE_T_VALUE
) {

2509  
NGX_OK
;

2512 
u
->
Àngth
 -
byãs
;

2514  
NGX_OK
;

2515 
	}
}

2519 
	$ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2521 
ngx_evít_t
 *
wev
;

2522 
ngx_c⁄√˘i⁄_t
 *
c
;

2523 
ngx_evít_pùe_t
 *
p
;

2524 
ngx_hâp_up°ªam_t
 *
u
;

2526 
c
 = 
r
->
c⁄√˘i⁄
;

2527 
u
 = 
r
->
up°ªam
;

2528 
p
 = 
u
->
pùe
;

2529 
wev
 = 
c
->
wrôe
;

2531 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2534 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

2536 i‡(
wev
->
timedout
) {

2538 i‡(
wev
->
dñayed
) {

2540 
wev
->
timedout
 = 0;

2541 
wev
->
dñayed
 = 0;

2543 i‡(!
wev
->
ªady
) {

2544 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

2546 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

2547 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2553 i‡(
	`ngx_evít_pùe
(
p
, 
wev
->
wrôe
Ë=
NGX_ABORT
) {

2554 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2559 
p
->
down°ªam_îr‹
 = 1;

2560 
c
->
timedout
 = 1;

2561 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2566 i‡(
wev
->
dñayed
) {

2568 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2571 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

2572 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2578 i‡(
	`ngx_evít_pùe
(
p
, 1Ë=
NGX_ABORT
) {

2579 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2584 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
);

2585 
	}
}

2589 
	$ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2590 
ngx_hâp_up°ªam_t
 *
u
)

2592 
ngx_c⁄√˘i⁄_t
 *
c
;

2594 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2596 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2599 
c
->
log
->
a˘i⁄
 = "reading upstream";

2601 i‡(
c
->
ªad
->
timedout
) {

2602 
u
->
pùe
->
up°ªam_îr‹
 = 1;

2603 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2606 i‡(
	`ngx_evít_pùe
(
u
->
pùe
, 0Ë=
NGX_ABORT
) {

2607 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2612 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
);

2613 
	}
}

2617 
	$ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2619 
ngx_ãmp_fûe_t
 *
tf
;

2620 
ngx_evít_pùe_t
 *
p
;

2621 
ngx_hâp_up°ªam_t
 *
u
;

2623 
u
 = 
r
->
up°ªam
;

2624 
p
 = 
u
->
pùe
;

2626 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

2628 i‡(
u
->
°‹e
) {

2630 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_d⁄e
) {

2632 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

2634 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_OK


2635 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

2636 || (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
tf
->
off£t
)))

2638 
	`ngx_hâp_up°ªam_°‹e
(
r
, 
u
);

2639 
u
->
°‹e
 = 0;

2644 #i‡(
NGX_HTTP_CACHE
)

2646 i‡(
u
->
ˇchóbÀ
) {

2648 i‡(
p
->
up°ªam_d⁄e
) {

2649 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
u
->
pùe
->
ãmp_fûe
);

2651 } i‡(
p
->
up°ªam_eof
) {

2655 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
u
->
pùe
->
ãmp_fûe
);

2657 } i‡(
p
->
up°ªam_îr‹
) {

2658 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2664 i‡(
p
->
up°ªam_d⁄e
 ||Ö->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
) {

2665 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2666 "hâ∞up°ªamÉxô: %p", 
p
->
out
);

2668 
	`ngx_hâp_busy_u∆ock
(
u
->
c⁄f
->
busy_lock
, &u->busy_lock);

2670 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2675 i‡(
p
->
down°ªam_îr‹
) {

2676 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2679 i‡(!
u
->
ˇchóbÀ
 && !u->
°‹e
 && u->
≥î
.
c⁄√˘i⁄
) {

2680 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2683 
	}
}

2687 
	$ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2689 
size_t
 
roŸ
;

2690 
time_t
 
lm
;

2691 
ngx_°r_t
 
∑th
;

2692 
ngx_ãmp_fûe_t
 *
tf
;

2693 
ngx_ext_ª«me_fûe_t
 
ext
;

2695 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

2697 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

2701 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

2702 i‡(
tf
 =
NULL
) {

2706 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2707 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

2708 
tf
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

2709 
tf
->
poﬁ
 = 
r
->pool;

2710 
tf
->
≥rsi°ít
 = 1;

2712 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

2713 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

2714 !
NGX_OK
)

2719 
u
->
pùe
->
ãmp_fûe
 = 
tf
;

2722 
ext
.
ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

2723 
ext
.
∑th_ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

2724 
ext
.
time
 = -1;

2725 
ext
.
¸óã_∑th
 = 1;

2726 
ext
.
dñëe_fûe
 = 1;

2727 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

2729 i‡(
u
->
hódîs_ö
.
œ°_modifõd
) {

2731 
lm
 = 
	`ngx_hâp_∑r£_time
(
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
d©a
,

2732 
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
Àn
);

2734 i‡(
lm
 !
NGX_ERROR
) {

2735 
ext
.
time
 = 
lm
;

2736 
ext
.
fd
 = 
tf
->
fûe
.fd;

2740 i‡(
u
->
c⁄f
->
°‹e_Àngths
 =
NULL
) {

2742 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

2745 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
u
->
c⁄f
->
°‹e_Àngths
->
ñts
, 0,

2746 
u
->
c⁄f
->
°‹e_vÆues
->
ñts
)

2747 =
NULL
)

2753 
∑th
.
Àn
--;

2755 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2757 
tf
->
fûe
.
«me
.
d©a
, 
∑th
.data);

2759 (Ë
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
∑th
, &
ext
);

2760 
	}
}

2764 
	$ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2766 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2768 
	}
}

2772 
	$ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

2773 
ngx_uöt_t
 
·_ty≥
)

2775 
ngx_uöt_t
 
°©us
, 
°©e
;

2777 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2778 "hâ∞√xàup°ªam, %xi", 
·_ty≥
);

2781 
	`ngx_hâp_busy_u∆ock
(
u
->
c⁄f
->
busy_lock
, &u->busy_lock);

2784 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_404
) {

2785 
°©e
 = 
NGX_PEER_NEXT
;

2787 
°©e
 = 
NGX_PEER_FAILED
;

2790 i‡(
·_ty≥
 !
NGX_HTTP_UPSTREAM_FT_NOLIVE
) {

2791 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 
°©e
);

2794 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_TIMEOUT
) {

2795 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ETIMEDOUT
,

2799 i‡(
u
->
≥î
.
ˇched
 && 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2800 
°©us
 = 0;

2803 
·_ty≥
) {

2805 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
:

2806 
°©us
 = 
NGX_HTTP_GATEWAY_TIME_OUT
;

2809 
NGX_HTTP_UPSTREAM_FT_HTTP_500
:

2810 
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

2813 
NGX_HTTP_UPSTREAM_FT_HTTP_404
:

2814 
°©us
 = 
NGX_HTTP_NOT_FOUND
;

2823 
°©us
 = 
NGX_HTTP_BAD_GATEWAY
;

2827 i‡(
r
->
c⁄√˘i⁄
->
îr‹
) {

2828 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2829 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

2833 i‡(
°©us
) {

2834 
u
->
°©e
->
°©us
 = status;

2836 i‡(
u
->
≥î
.
åõs
 =0 || !(u->
c⁄f
->
√xt_up°ªam
 & 
·_ty≥
)) {

2838 #i‡(
NGX_HTTP_CACHE
)

2840 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


2841 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
·_ty≥
))

2843 
ngx_öt_t
 
rc
;

2845 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

2847 i‡(
rc
 =
NGX_OK
) {

2848 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

2849 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

2852 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2857 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

2862 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

2863 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2865 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

2866 #i‡(
NGX_HTTP_SSL
)

2868 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

2869 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

2870 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_£nd_shutdown
 = 1;

2872 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

2876 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

2877 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

2881 i‡(
u
->
c⁄f
->
busy_lock
 && !u->
busy_locked
) {

2882 
	`ngx_hâp_up°ªam_busy_lock
(
p
);

2887 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

2888 
	}
}

2892 
	$ngx_hâp_up°ªam_˛ónup
(*
d©a
)

2894 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2896 
ngx_hâp_up°ªam_t
 *
u
;

2898 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2899 "˛ónu∞hâ∞up°ªamÑeque°: \"%V\"", &
r
->
uri
);

2901 
u
 = 
r
->
up°ªam
;

2903 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

2904 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

2905 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

2908 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_DONE
);

2909 
	}
}

2913 
	$ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

2914 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
)

2916 
ngx_time_t
 *
ç
;

2918 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2919 "föÆizêhâ∞up°ªamÑeque°: %i", 
rc
);

2921 i‡(
u
->
˛ónup
) {

2922 *
u
->
˛ónup
 = 
NULL
;

2923 
u
->
˛ónup
 = 
NULL
;

2926 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

2927 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

2928 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

2931 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

2932 
ç
 = 
	`ngx_timeofday
();

2933 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

2934 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

2936 i‡(
u
->
pùe
) {

2937 
u
->
°©e
->
ª•⁄£_Àngth
 = u->
pùe
->
ªad_Àngth
;

2941 
u
->
	`föÆize_ªque°
(
r
, 
rc
);

2943 i‡(
u
->
≥î
.
‰ì
) {

2944 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 0);

2947 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

2949 #i‡(
NGX_HTTP_SSL
)

2953 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

2961 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

2963 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

2967 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2969 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

2971 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

2974 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

2976 i‡(
u
->
pùe
 && u->pùe->
ãmp_fûe
) {

2977 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2979 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
);

2982 i‡(
u
->
°‹e
 && u->
pùe
 && u->pùe->
ãmp_fûe


2983 && 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
)

2985 i‡(
	`ngx_dñëe_fûe
(
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
)

2986 =
NGX_FILE_ERROR
)

2988 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

2989 
ngx_dñëe_fûe_n
 " \"%s\" failed",

2990 
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
);

2994 #i‡(
NGX_HTTP_CACHE
)

2996 i‡(
r
->
ˇche
) {

2998 i‡(
u
->
ˇchóbÀ
) {

3000 i‡(
rc
 =
NGX_HTTP_BAD_GATEWAY
 ||Ñ¯=
NGX_HTTP_GATEWAY_TIME_OUT
) {

3001 
time_t
 
vÆid
;

3003 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
rc
);

3005 i‡(
vÆid
) {

3006 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

3007 
r
->
ˇche
->
îr‹
 = 
rc
;

3012 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

3017 i‡(
u
->
hódî_£¡


3018 && 
rc
 !
NGX_HTTP_REQUEST_TIME_OUT


3019 && (
rc
 =
NGX_ERROR
 ||Ñ¯>
NGX_HTTP_SPECIAL_RESPONSE
))

3021 
rc
 = 0;

3024 i‡(
rc
 =
NGX_DECLINED
) {

3028 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÅo client";

3030 i‡(
rc
 == 0

3031 #i‡(
NGX_HTTP_CACHE
)

3032 && !
r
->
ˇched


3036 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

3039 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

3040 
	}
}

3043 
ngx_öt_t


3044 
	$ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3045 
ngx_uöt_t
 
off£t
)

3047 
ngx_èbÀ_ñt_t
 **
ph
;

3049 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
up°ªam
->
hódîs_ö
 + 
off£t
);

3051 i‡(*
ph
 =
NULL
) {

3052 *
ph
 = 
h
;

3055  
NGX_OK
;

3056 
	}
}

3059 
ngx_öt_t


3060 
	$ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3061 
ngx_uöt_t
 
off£t
)

3063  
NGX_OK
;

3064 
	}
}

3067 
ngx_öt_t


3068 
	$ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3069 
ngx_uöt_t
 
off£t
)

3071 #i‡(
NGX_HTTP_CACHE
)

3072 
ngx_hâp_up°ªam_t
 *
u
;

3074 
u
 = 
r
->
up°ªam
;

3076 i‡(!(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
)) {

3077 
u
->
ˇchóbÀ
 = 0;

3081  
NGX_OK
;

3082 
	}
}

3085 
ngx_öt_t


3086 
	$ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

3087 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3089 
ngx_¨øy_t
 *
∑
;

3090 
ngx_èbÀ_ñt_t
 **
ph
;

3091 
ngx_hâp_up°ªam_t
 *
u
;

3093 
u
 = 
r
->
up°ªam
;

3094 
∑
 = &
u
->
hódîs_ö
.
ˇche_c⁄åﬁ
;

3096 i‡(
∑
->
ñts
 =
NULL
) {

3097 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

3099  
NGX_ERROR
;

3103 
ph
 = 
	`ngx_¨øy_push
(
∑
);

3104 i‡(
ph
 =
NULL
) {

3105  
NGX_ERROR
;

3108 *
ph
 = 
h
;

3110 #i‡(
NGX_HTTP_CACHE
)

3112 
u_ch¨
 *
p
, *
œ°
;

3113 
ngx_öt_t
 
n
;

3115 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
) {

3116  
NGX_OK
;

3119 i‡(
r
->
ˇche
 =
NULL
) {

3120  
NGX_OK
;

3123 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

3124  
NGX_OK
;

3127 
p
 = 
h
->
vÆue
.
d©a
;

3128 
œ°
 = 
p
 + 
h
->
vÆue
.
Àn
;

3130 i‡(
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"no-ˇche", 8 - 1Ë!
NULL


3131 || 
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"no-°‹e", 8 - 1Ë!
NULL


3132 || 
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"¥iv©e", 7 - 1Ë!
NULL
)

3134 
u
->
ˇchóbÀ
 = 0;

3135  
NGX_OK
;

3138 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
, (
u_ch¨
 *) "max-age=", 8 - 1);

3140 i‡(
p
 =
NULL
) {

3141  
NGX_OK
;

3144 
n
 = 0;

3146 
p
 +8;Ö < 
œ°
;Ö++) {

3147 i‡(*
p
 == ',' || *p == ';' || *p == ' ') {

3151 i‡(*
p
 >= '0' && *p <= '9') {

3152 
n
 =Ç * 10 + *
p
 - '0';

3156 
u
->
ˇchóbÀ
 = 0;

3157  
NGX_OK
;

3160 i‡(
n
 == 0) {

3161 
u
->
ˇchóbÀ
 = 0;

3162  
NGX_OK
;

3165 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

3169  
NGX_OK
;

3170 
	}
}

3173 
ngx_öt_t


3174 
	$ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3175 
ngx_uöt_t
 
off£t
)

3177 
ngx_hâp_up°ªam_t
 *
u
;

3179 
u
 = 
r
->
up°ªam
;

3180 
u
->
hódîs_ö
.
expúes
 = 
h
;

3182 #i‡(
NGX_HTTP_CACHE
)

3184 
time_t
 
expúes
;

3186 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
) {

3187  
NGX_OK
;

3190 i‡(
r
->
ˇche
 =
NULL
) {

3191  
NGX_OK
;

3194 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

3195  
NGX_OK
;

3198 
expúes
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3200 i‡(
expúes
 =
NGX_ERROR
 ||Éxpúe†< 
	`ngx_time
()) {

3201 
u
->
ˇchóbÀ
 = 0;

3202  
NGX_OK
;

3205 
r
->
ˇche
->
vÆid_£c
 = 
expúes
;

3209  
NGX_OK
;

3210 
	}
}

3213 
ngx_öt_t


3214 
	$ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

3215 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3217 
ngx_hâp_up°ªam_t
 *
u
;

3219 
u
 = 
r
->
up°ªam
;

3220 
u
->
hódîs_ö
.
x_ac˚l_expúes
 = 
h
;

3222 #i‡(
NGX_HTTP_CACHE
)

3224 
u_ch¨
 *
p
;

3225 
size_t
 
Àn
;

3226 
ngx_öt_t
 
n
;

3228 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
) {

3229  
NGX_OK
;

3232 i‡(
r
->
ˇche
 =
NULL
) {

3233  
NGX_OK
;

3236 
Àn
 = 
h
->
vÆue
.len;

3237 
p
 = 
h
->
vÆue
.
d©a
;

3239 i‡(
p
[0] != '@') {

3240 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

3242 
n
) {

3244 
u
->
ˇchóbÀ
 = 0;

3245 
NGX_ERROR
:

3246  
NGX_OK
;

3249 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

3250  
NGX_OK
;

3254 
p
++;

3255 
Àn
--;

3257 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

3259 i‡(
n
 !
NGX_ERROR
) {

3260 
r
->
ˇche
->
vÆid_£c
 = 
n
;

3265  
NGX_OK
;

3266 
	}
}

3269 
ngx_öt_t


3270 
	$ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3271 
ngx_uöt_t
 
off£t
)

3273 
ngx_öt_t
 
n
;

3274 
ngx_hâp_up°ªam_t
 *
u
;

3276 
u
 = 
r
->
up°ªam
;

3277 
u
->
hódîs_ö
.
x_ac˚l_limô_øã
 = 
h
;

3279 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
) {

3280  
NGX_OK
;

3283 
n
 = 
	`ngx_©oi
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3285 i‡(
n
 !
NGX_ERROR
) {

3286 
r
->
limô_øã
 = (
size_t
Ë
n
;

3289  
NGX_OK
;

3290 
	}
}

3293 
ngx_öt_t


3294 
	$ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3295 
ngx_uöt_t
 
off£t
)

3297 
u_ch¨
 
c0
, 
c1
, 
c2
;

3298 
ngx_hâp_up°ªam_t
 *
u
;

3300 
u
 = 
r
->
up°ªam
;

3302 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
) {

3303  
NGX_OK
;

3306 i‡(
u
->
c⁄f
->
ch™ge_buf„rög
) {

3308 i‡(
h
->
vÆue
.
Àn
 == 2) {

3309 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

3310 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

3312 i‡(
c0
 ='n' && 
c1
 == 'o') {

3313 
u
->
buf„rög
 = 0;

3316 } i‡(
h
->
vÆue
.
Àn
 == 3) {

3317 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

3318 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

3319 
c2
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[2]);

3321 i‡(
c0
 ='y' && 
c1
 ='e' && 
c2
 == 's') {

3322 
u
->
buf„rög
 = 1;

3327  
NGX_OK
;

3328 
	}
}

3331 
ngx_öt_t


3332 
	$ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3333 
ngx_uöt_t
 
off£t
)

3335 i‡(
r
->
up°ªam
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
) {

3336  
NGX_OK
;

3339 
r
->
hódîs_out
.
ovîride_ch¨£t
 = &
h
->
vÆue
;

3341  
NGX_OK
;

3342 
	}
}

3345 
ngx_öt_t


3346 
	$ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3347 
ngx_uöt_t
 
off£t
)

3349 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

3351 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3352 i‡(
ho
 =
NULL
) {

3353  
NGX_ERROR
;

3356 *
ho
 = *
h
;

3358 i‡(
off£t
) {

3359 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

3360 *
ph
 = 
ho
;

3363  
NGX_OK
;

3364 
	}
}

3367 
ngx_öt_t


3368 
	$ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

3369 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3371 
ngx_¨øy_t
 *
∑
;

3372 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

3374 
∑
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

3376 i‡(
∑
->
ñts
 =
NULL
) {

3377 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

3379  
NGX_ERROR
;

3383 
ph
 = 
	`ngx_¨øy_push
(
∑
);

3384 i‡(
ph
 =
NULL
) {

3385  
NGX_ERROR
;

3388 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3389 i‡(
ho
 =
NULL
) {

3390  
NGX_ERROR
;

3393 *
ho
 = *
h
;

3394 *
ph
 = 
ho
;

3396  
NGX_OK
;

3397 
	}
}

3400 
ngx_öt_t


3401 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3402 
ngx_uöt_t
 
off£t
)

3404 
u_ch¨
 *
p
, *
œ°
;

3406 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
h
->
vÆue
.
Àn
;

3407 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
h
->
vÆue
;

3408 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

3410 
p
 = 
h
->
vÆue
.
d©a
; *p;Ö++) {

3412 i‡(*
p
 != ';') {

3416 
œ°
 = 
p
;

3418 *++
p
 == ' ') { }

3420 i‡(*
p
 == '\0') {

3421  
NGX_OK
;

3424 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "charset=", 8) != 0) {

3428 
p
 += 8;

3430 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
œ°
 - 
h
->
vÆue
.
d©a
;

3432 i‡(*
p
 == '"') {

3433 
p
++;

3436 
œ°
 = 
h
->
vÆue
.
d©a
 + h->vÆue.
Àn
;

3438 i‡(*(
œ°
 - 1) == '"') {

3439 
œ°
--;

3442 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
œ°
 - 
p
;

3443 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
p
;

3445  
NGX_OK
;

3448  
NGX_OK
;

3449 
	}
}

3452 
ngx_öt_t


3453 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3454 
ngx_uöt_t
 
off£t
)

3456 
ngx_èbÀ_ñt_t
 *
ho
;

3458 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3459 i‡(
ho
 =
NULL
) {

3460  
NGX_ERROR
;

3463 *
ho
 = *
h
;

3465 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
ho
;

3466 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3468  
NGX_OK
;

3469 
	}
}

3472 
ngx_öt_t


3473 
	$ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3474 
ngx_uöt_t
 
off£t
)

3476 
ngx_èbÀ_ñt_t
 *
ho
;

3478 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3479 i‡(
ho
 =
NULL
) {

3480  
NGX_ERROR
;

3483 *
ho
 = *
h
;

3485 
r
->
hódîs_out
.
œ°_modifõd
 = 
ho
;

3487 #i‡(
NGX_HTTP_CACHE
)

3489 i‡(
r
->
up°ªam
->
ˇchóbÀ
) {

3490 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
,

3491 
h
->
vÆue
.
Àn
);

3496  
NGX_OK
;

3497 
	}
}

3500 
ngx_öt_t


3501 
	$ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3502 
ngx_uöt_t
 
off£t
)

3504 
ngx_öt_t
 
rc
;

3505 
ngx_èbÀ_ñt_t
 *
ho
;

3507 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3508 i‡(
ho
 =
NULL
) {

3509  
NGX_ERROR
;

3512 *
ho
 = *
h
;

3514 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

3515 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 0);

3517 i‡(
rc
 =
NGX_DECLINED
) {

3518  
NGX_OK
;

3521 i‡(
rc
 =
NGX_OK
) {

3522 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

3524 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3525 "ªwrôã¿loˇti⁄: \"%V\"", &
ho
->
vÆue
);

3528  
rc
;

3531 i‡(
ho
->
vÆue
.
d©a
[0] != '/') {

3532 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

3540  
NGX_OK
;

3541 
	}
}

3544 
ngx_öt_t


3545 
	$ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3546 
ngx_uöt_t
 
off£t
)

3548 
u_ch¨
 *
p
;

3549 
ngx_öt_t
 
rc
;

3550 
ngx_èbÀ_ñt_t
 *
ho
;

3552 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3553 i‡(
ho
 =
NULL
) {

3554  
NGX_ERROR
;

3557 *
ho
 = *
h
;

3559 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

3561 
p
 = 
	`ngx_°rˇ£°∫
(
ho
->
vÆue
.
d©a
, "url=", 4 - 1);

3563 i‡(
p
) {

3564 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 
p
 + 4 - ho->
vÆue
.
d©a
);

3567  
NGX_OK
;

3570 i‡(
rc
 =
NGX_DECLINED
) {

3571  
NGX_OK
;

3574 i‡(
rc
 =
NGX_OK
) {

3575 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

3577 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3578 "ªwrôã¿ª‰esh: \"%V\"", &
ho
->
vÆue
);

3581  
rc
;

3584 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

3586  
NGX_OK
;

3587 
	}
}

3590 
ngx_öt_t


3591 
	$ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

3592 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3594 
ngx_èbÀ_ñt_t
 *
ho
;

3596 #i‡(
NGX_HTTP_CACHE
)

3598 i‡(
r
->
ˇched
) {

3599 
r
->
Ælow_ønges
 = 1;

3600  
NGX_OK
;

3606 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3607 i‡(
ho
 =
NULL
) {

3608  
NGX_ERROR
;

3611 *
ho
 = *
h
;

3613 
r
->
hódîs_out
.
ac˚±_ønges
 = 
ho
;

3615  
NGX_OK
;

3616 
	}
}

3619 #i‡(
NGX_HTTP_GZIP
)

3621 
ngx_öt_t


3622 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

3623 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3625 
ngx_èbÀ_ñt_t
 *
ho
;

3627 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3628 i‡(
ho
 =
NULL
) {

3629  
NGX_ERROR
;

3632 *
ho
 = *
h
;

3634 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
ho
;

3636  
NGX_OK
;

3637 
	}
}

3642 
ngx_öt_t


3643 
	$ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

3645 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

3647 
v
 = 
ngx_hâp_up°ªam_v¨s
; v->
«me
.
Àn
; v++) {

3648 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

3649 i‡(
v¨
 =
NULL
) {

3650  
NGX_ERROR
;

3653 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

3654 
v¨
->
d©a
 = 
v
->data;

3657  
NGX_OK
;

3658 
	}
}

3661 
ngx_öt_t


3662 
	$ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3663 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3665 
u_ch¨
 *
p
;

3666 
size_t
 
Àn
;

3667 
ngx_uöt_t
 
i
;

3668 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

3670 
v
->
vÆid
 = 1;

3671 
v
->
no_ˇchóbÀ
 = 0;

3672 
v
->
nŸ_found
 = 0;

3674 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

3675 
v
->
nŸ_found
 = 1;

3676  
NGX_OK
;

3679 
Àn
 = 0;

3680 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

3682 
i
 = 0; i < 
r
->
up°ªam_°©es
->
√…s
; i++) {

3683 i‡(
°©e
[
i
].
≥î
) {

3684 
Àn
 +
°©e
[
i
].
≥î
->len + 2;

3687 
Àn
 += 3;

3691 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

3692 i‡(
p
 =
NULL
) {

3693  
NGX_ERROR
;

3696 
v
->
d©a
 = 
p
;

3698 
i
 = 0;

3701 i‡(
°©e
[
i
].
≥î
) {

3702 
p
 = 
	`ngx_˝ymem
’, 
°©e
[
i
].
≥î
->
d©a
, sèã[i].≥î->
Àn
);

3705 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3709 i‡(
°©e
[
i
].
≥î
) {

3710 *
p
++ = ',';

3711 *
p
++ = ' ';

3714 *
p
++ = ' ';

3715 *
p
++ = ':';

3716 *
p
++ = ' ';

3718 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3726 
v
->
Àn
 = 
p
 - v->
d©a
;

3728  
NGX_OK
;

3729 
	}
}

3732 
ngx_öt_t


3733 
	$ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3734 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3736 
u_ch¨
 *
p
;

3737 
size_t
 
Àn
;

3738 
ngx_uöt_t
 
i
;

3739 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

3741 
v
->
vÆid
 = 1;

3742 
v
->
no_ˇchóbÀ
 = 0;

3743 
v
->
nŸ_found
 = 0;

3745 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

3746 
v
->
nŸ_found
 = 1;

3747  
NGX_OK
;

3750 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (3 + 2);

3752 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

3753 i‡(
p
 =
NULL
) {

3754  
NGX_ERROR
;

3757 
v
->
d©a
 = 
p
;

3759 
i
 = 0;

3760 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

3763 i‡(
°©e
[
i
].
°©us
) {

3764 
p
 = 
	`ngx_•rötf
’, "%ui", 
°©e
[
i
].
°©us
);

3767 *
p
++ = '-';

3770 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3774 i‡(
°©e
[
i
].
≥î
) {

3775 *
p
++ = ',';

3776 *
p
++ = ' ';

3779 *
p
++ = ' ';

3780 *
p
++ = ':';

3781 *
p
++ = ' ';

3783 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3791 
v
->
Àn
 = 
p
 - v->
d©a
;

3793  
NGX_OK
;

3794 
	}
}

3797 
ngx_öt_t


3798 
	$ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3799 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3801 
u_ch¨
 *
p
;

3802 
size_t
 
Àn
;

3803 
ngx_uöt_t
 
i
;

3804 
ngx_m£c_öt_t
 
ms
;

3805 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

3807 
v
->
vÆid
 = 1;

3808 
v
->
no_ˇchóbÀ
 = 0;

3809 
v
->
nŸ_found
 = 0;

3811 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

3812 
v
->
nŸ_found
 = 1;

3813  
NGX_OK
;

3816 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_TIME_T_LEN
 + 4 + 2);

3818 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

3819 i‡(
p
 =
NULL
) {

3820  
NGX_ERROR
;

3823 
v
->
d©a
 = 
p
;

3825 
i
 = 0;

3826 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

3829 i‡(
°©e
[
i
].
°©us
) {

3830 
ms
 = (
ngx_m£c_öt_t
)

3831 (
°©e
[
i
].
ª•⁄£_£c
 * 1000 + sèã[i].
ª•⁄£_m£c
);

3832 
ms
 = 
	`ngx_max
(ms, 0);

3833 
p
 = 
	`ngx_•rötf
’, "%d.%03d", 
ms
 / 1000, ms % 1000);

3836 *
p
++ = '-';

3839 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3843 i‡(
°©e
[
i
].
≥î
) {

3844 *
p
++ = ',';

3845 *
p
++ = ' ';

3848 *
p
++ = ' ';

3849 *
p
++ = ':';

3850 *
p
++ = ' ';

3852 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3860 
v
->
Àn
 = 
p
 - v->
d©a
;

3862  
NGX_OK
;

3863 
	}
}

3866 
ngx_öt_t


3867 
	$ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3868 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3870 
u_ch¨
 *
p
;

3871 
size_t
 
Àn
;

3872 
ngx_uöt_t
 
i
;

3873 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

3875 
v
->
vÆid
 = 1;

3876 
v
->
no_ˇchóbÀ
 = 0;

3877 
v
->
nŸ_found
 = 0;

3879 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

3880 
v
->
nŸ_found
 = 1;

3881  
NGX_OK
;

3884 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_OFF_T_LEN
 + 2);

3886 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

3887 i‡(
p
 =
NULL
) {

3888  
NGX_ERROR
;

3891 
v
->
d©a
 = 
p
;

3893 
i
 = 0;

3894 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

3897 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
ª•⁄£_Àngth
);

3899 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3903 i‡(
°©e
[
i
].
≥î
) {

3904 *
p
++ = ',';

3905 *
p
++ = ' ';

3908 *
p
++ = ' ';

3909 *
p
++ = ':';

3910 *
p
++ = ' ';

3912 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3920 
v
->
Àn
 = 
p
 - v->
d©a
;

3922  
NGX_OK
;

3923 
	}
}

3926 
ngx_öt_t


3927 
	$ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3928 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3930 i‡(
r
->
up°ªam
 =
NULL
) {

3931 
v
->
nŸ_found
 = 1;

3932  
NGX_OK
;

3935  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

3936 &
r
->
up°ªam
->
hódîs_ö
.
hódîs
.
∑π
,

3938 
	}
}

3941 #i‡(
NGX_HTTP_CACHE
)

3943 
ngx_öt_t


3944 
	$ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

3945 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3947 
ngx_uöt_t
 
n
;

3949 i‡(
r
->
up°ªam
 =
NULL
 ||Ñ->up°ªam->
ˇche_°©us
 == 0) {

3950 
v
->
nŸ_found
 = 1;

3951  
NGX_OK
;

3954 
n
 = 
r
->
up°ªam
->
ˇche_°©us
 - 1;

3956 
v
->
vÆid
 = 1;

3957 
v
->
no_ˇchóbÀ
 = 0;

3958 
v
->
nŸ_found
 = 0;

3959 
v
->
Àn
 = 
ngx_hâp_ˇche_°©us
[
n
].len;

3960 
v
->
d©a
 = 
ngx_hâp_ˇche_°©us
[
n
].data;

3962  
NGX_OK
;

3963 
	}
}

3969 
	$ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

3971 *
rv
;

3972 *
mc⁄f
;

3973 
ngx_°r_t
 *
vÆue
;

3974 
ngx_uæ_t
 
u
;

3975 
ngx_uöt_t
 
m
;

3976 
ngx_c⁄f_t
 
pcf
;

3977 
ngx_hâp_moduÀ_t
 *
moduÀ
;

3978 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

3979 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

3981 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3983 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3984 
u
.
ho°
 = 
vÆue
[1];

3985 
u
.
no_ªsﬁve
 = 1;

3987 
uscf
 = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 
NGX_HTTP_UPSTREAM_CREATE


3988 |
NGX_HTTP_UPSTREAM_WEIGHT


3989 |
NGX_HTTP_UPSTREAM_MAX_FAILS


3990 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


3991 |
NGX_HTTP_UPSTREAM_DOWN


3992 |
NGX_HTTP_UPSTREAM_BACKUP
);

3993 i‡(
uscf
 =
NULL
) {

3994  
NGX_CONF_ERROR
;

3998 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

3999 i‡(
˘x
 =
NULL
) {

4000  
NGX_CONF_ERROR
;

4003 
hâp_˘x
 = 
cf
->
˘x
;

4004 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

4008 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4009 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

4010  
NGX_CONF_ERROR
;

4013 
˘x
->
§v_c⁄f
[
ngx_hâp_up°ªam_moduÀ
.
˘x_ödex
] = 
uscf
;

4015 
uscf
->
§v_c⁄f
 = 
˘x
->srv_conf;

4020 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4021 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4022  
NGX_CONF_ERROR
;

4025 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

4026 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4030 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

4032 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

4033 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

4034 i‡(
mc⁄f
 =
NULL
) {

4035  
NGX_CONF_ERROR
;

4038 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

4041 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4042 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4043 i‡(
mc⁄f
 =
NULL
) {

4044  
NGX_CONF_ERROR
;

4047 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

4054 
pcf
 = *
cf
;

4055 
cf
->
˘x
 = ctx;

4056 
cf
->
cmd_ty≥
 = 
NGX_HTTP_UPS_CONF
;

4058 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4060 *
cf
 = 
pcf
;

4062 i‡(
rv
 !
NGX_CONF_OK
) {

4063  
rv
;

4066 i‡(
uscf
->
£rvîs
 =
NULL
) {

4067 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4069  
NGX_CONF_ERROR
;

4072  
rv
;

4073 
	}
}

4077 
	$ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4079 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
 = 
c⁄f
;

4081 
time_t
 
Áû_timeout
;

4082 
ngx_°r_t
 *
vÆue
, 
s
;

4083 
ngx_uæ_t
 
u
;

4084 
ngx_öt_t
 
weight
, 
max_Áûs
;

4085 
ngx_uöt_t
 
i
;

4086 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

4088 i‡(
uscf
->
£rvîs
 =
NULL
) {

4089 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4090 (
ngx_hâp_up°ªam_£rvî_t
));

4091 i‡(
uscf
->
£rvîs
 =
NULL
) {

4092  
NGX_CONF_ERROR
;

4096 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

4097 i‡(
us
 =
NULL
) {

4098  
NGX_CONF_ERROR
;

4101 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

4103 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4105 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4107 
u
.
uæ
 = 
vÆue
[1];

4108 
u
.
deÁu…_p‹t
 = 80;

4110 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

4111 i‡(
u
.
îr
) {

4112 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4113 "%†ö up°ªam \"%V\"", 
u
.
îr
, &u.
uæ
);

4116  
NGX_CONF_ERROR
;

4119 
weight
 = 1;

4120 
max_Áûs
 = 1;

4121 
Áû_timeout
 = 10;

4123 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

4125 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "weight=", 7) == 0) {

4127 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_WEIGHT
)) {

4128 
övÆid
;

4131 
weight
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[7], vÆue[i].
Àn
 - 7);

4133 i‡(
weight
 =
NGX_ERROR
 || weight == 0) {

4134 
övÆid
;

4140 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_fails=", 10) == 0) {

4142 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_MAX_FAILS
)) {

4143 
övÆid
;

4146 
max_Áûs
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

4148 i‡(
max_Áûs
 =
NGX_ERROR
) {

4149 
övÆid
;

4155 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "fail_timeout=", 13) == 0) {

4157 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
)) {

4158 
övÆid
;

4161 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

4162 
s
.
d©a
 = &
vÆue
[
i
].data[13];

4164 
Áû_timeout
 = 
	`ngx_∑r£_time
(&
s
, 1);

4166 i‡(
Áû_timeout
 =
NGX_ERROR
) {

4167 
övÆid
;

4173 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "backup", 6) == 0) {

4175 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_BACKUP
)) {

4176 
övÆid
;

4179 
us
->
backup
 = 1;

4184 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "down", 4) == 0) {

4186 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_DOWN
)) {

4187 
övÆid
;

4190 
us
->
down
 = 1;

4195 
övÆid
;

4198 
us
->
addrs
 = 
u
.addrs;

4199 
us
->
«ddrs
 = 
u
.naddrs;

4200 
us
->
weight
 = weight;

4201 
us
->
max_Áûs
 = max_fails;

4202 
us
->
Áû_timeout
 = fail_timeout;

4204  
NGX_CONF_OK
;

4206 
övÆid
:

4208 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4209 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

4211  
NGX_CONF_ERROR
;

4212 
	}
}

4215 
ngx_hâp_up°ªam_§v_c⁄f_t
 *

4216 
	$ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
)

4218 
ngx_uöt_t
 
i
;

4219 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

4220 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

4221 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

4223 i‡(!(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)) {

4225 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

4226 i‡(
u
->
îr
) {

4227 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4228 "%†ö up°ªam \"%V\"", 
u
->
îr
, &u->
uæ
);

4231  
NULL
;

4235 
umcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

4237 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

4239 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

4241 i‡(
uscÂ
[
i
]->
ho°
.
Àn
 !
u
->host.len

4242 || 
	`ngx_°∫ˇ£cmp
(
uscÂ
[
i
]->
ho°
.
d©a
, 
u
->ho°.d©a, u->ho°.
Àn
)

4248 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)

4249 && (
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
))

4251 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4252 "du∂iˇã up°ªam \"%V\"", &
u
->
ho°
);

4253  
NULL
;

4256 i‡((
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& 
u
->
p‹t
) {

4257 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4259 &
u
->
ho°
, u->
p‹t
);

4260  
NULL
;

4263 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& 
uscÂ
[
i
]->
p‹t
) {

4264 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

4266 &
u
->
ho°
, 
uscÂ
[
i
]->
p‹t
,

4267 
uscÂ
[
i
]->
fûe_«me
, uscÂ[i]->
löe
);

4268  
NULL
;

4271 i‡(
uscÂ
[
i
]->
p‹t
 !
u
->port) {

4275 i‡(
uscÂ
[
i
]->
deÁu…_p‹t
 && 
u
->default_port

4276 && 
uscÂ
[
i
]->
deÁu…_p‹t
 !
u
->default_port)

4281 i‡(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
) {

4282 
uscÂ
[
i
]->
Êags
 = flags;

4285  
uscÂ
[
i
];

4288 
uscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_§v_c⁄f_t
));

4289 i‡(
uscf
 =
NULL
) {

4290  
NULL
;

4293 
uscf
->
Êags
 = flags;

4294 
uscf
->
ho°
 = 
u
->host;

4295 
uscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

4296 
uscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

4297 
uscf
->
p‹t
 = 
u
->port;

4298 
uscf
->
deÁu…_p‹t
 = 
u
->default_port;

4300 i‡(
u
->
«ddrs
 == 1) {

4301 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

4302 (
ngx_hâp_up°ªam_£rvî_t
));

4303 i‡(
uscf
->
£rvîs
 =
NULL
) {

4304  
NGX_CONF_ERROR
;

4307 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

4308 i‡(
us
 =
NULL
) {

4309  
NGX_CONF_ERROR
;

4312 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

4314 
us
->
addrs
 = 
u
->addrs;

4315 
us
->
«ddrs
 = 
u
->naddrs;

4318 
uscÂ
 = 
	`ngx_¨øy_push
(&
umcf
->
up°ªams
);

4319 i‡(
uscÂ
 =
NULL
) {

4320  
NULL
;

4323 *
uscÂ
 = 
uscf
;

4325  
uscf
;

4326 
	}
}

4330 
	$ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

4331 *
c⁄f
)

4333 *
p
 = 
c⁄f
;

4335 
ngx_öt_t
 
rc
;

4336 
ngx_°r_t
 *
vÆue
;

4337 
ngx_addr_t
 **
∑ddr
;

4339 
∑ddr
 = (
ngx_addr_t
 **Ë(
p
 + 
cmd
->
off£t
);

4341 *
∑ddr
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_addr_t
));

4342 i‡(*
∑ddr
 =
NULL
) {

4343  
NGX_CONF_ERROR
;

4346 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4348 
rc
 = 
	`ngx_∑r£_addr
(
cf
->
poﬁ
, *
∑ddr
, 
vÆue
[1].
d©a
, vÆue[1].
Àn
);

4350 
rc
) {

4351 
NGX_OK
:

4352 (*
∑ddr
)->
«me
 = 
vÆue
[1];

4353  
NGX_CONF_OK
;

4355 
NGX_DECLINED
:

4356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4357 "övÆidáddªs†\"%V\"", &
vÆue
[1]);

4359  
NGX_CONF_ERROR
;

4361 
	}
}

4364 
ngx_öt_t


4365 
	$ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

4366 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

4367 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
)

4369 
ngx_°r_t
 *
h
;

4370 
ngx_uöt_t
 
i
, 
j
;

4371 
ngx_¨øy_t
 
hide_hódîs
;

4372 
ngx_hash_key_t
 *
hk
;

4374 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR


4375 && 
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
)

4377 
c⁄f
->
hide_hódîs_hash
 = 
¥ev
->hide_headers_hash;

4379 i‡(
c⁄f
->
hide_hódîs_hash
.
buckës


4380 #i‡(
NGX_HTTP_CACHE
)

4381 && ((
c⁄f
->
ˇche
 =
NULL
Ë=(
¥ev
->cache == NULL))

4385  
NGX_OK
;

4388 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

4389 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

4392 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR
) {

4393 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

4396 i‡(
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
) {

4397 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

4401 i‡(
	`ngx_¨øy_öô
(&
hide_hódîs
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

4402 !
NGX_OK
)

4404  
NGX_ERROR
;

4407 
h
 = 
deÁu…_hide_hódîs
; h->
Àn
; h++) {

4408 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

4409 i‡(
hk
 =
NULL
) {

4410  
NGX_ERROR
;

4413 
hk
->
key
 = *
h
;

4414 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
->
d©a
, h->
Àn
);

4415 
hk
->
vÆue
 = (*) 1;

4418 i‡(
c⁄f
->
hide_hódîs
 !
NGX_CONF_UNSET_PTR
) {

4420 
h
 = 
c⁄f
->
hide_hódîs
->
ñts
;

4422 
i
 = 0; i < 
c⁄f
->
hide_hódîs
->
√…s
; i++) {

4424 
hk
 = 
hide_hódîs
.
ñts
;

4426 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

4427 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

4428 
exi°
;

4432 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

4433 i‡(
hk
 =
NULL
) {

4434  
NGX_ERROR
;

4437 
hk
->
key
 = 
h
[
i
];

4438 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
[
i
].
d©a
, h[i].
Àn
);

4439 
hk
->
vÆue
 = (*) 1;

4441 
exi°
:

4447 i‡(
c⁄f
->
∑ss_hódîs
 !
NGX_CONF_UNSET_PTR
) {

4449 
h
 = 
c⁄f
->
∑ss_hódîs
->
ñts
;

4450 
hk
 = 
hide_hódîs
.
ñts
;

4452 
i
 = 0; i < 
c⁄f
->
∑ss_hódîs
->
√…s
; i++) {

4453 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

4455 i‡(
hk
[
j
].
key
.
d©a
 =
NULL
) {

4459 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

4460 
hk
[
j
].
key
.
d©a
 = 
NULL
;

4467 
hash
->hash = &
c⁄f
->
hide_hódîs_hash
;

4468 
hash
->
key
 = 
ngx_hash_key_lc
;

4469 
hash
->
poﬁ
 = 
cf
->pool;

4470 
hash
->
ãmp_poﬁ
 = 
NULL
;

4472  
	`ngx_hash_öô
(
hash
, 
hide_hódîs
.
ñts
, hide_hódîs.
√…s
);

4473 
	}
}

4477 
	$ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

4479 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

4481 
umcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_maö_c⁄f_t
));

4482 i‡(
umcf
 =
NULL
) {

4483  
NULL
;

4486 i‡(
	`ngx_¨øy_öô
(&
umcf
->
up°ªams
, 
cf
->
poﬁ
, 4,

4487 (
ngx_hâp_up°ªam_§v_c⁄f_t
 *))

4488 !
NGX_OK
)

4490  
NULL
;

4493  
umcf
;

4494 
	}
}

4498 
	$ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

4500 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
 = 
c⁄f
;

4502 
ngx_uöt_t
 
i
;

4503 
ngx_¨øy_t
 
hódîs_ö
;

4504 
ngx_hash_key_t
 *
hk
;

4505 
ngx_hash_öô_t
 
hash
;

4506 
ngx_hâp_up°ªam_öô_±
 
öô
;

4507 
ngx_hâp_up°ªam_hódî_t
 *
hódî
;

4508 
ngx_hâp_up°ªam_§v_c⁄f_t
 **
uscÂ
;

4510 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

4512 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

4514 
öô
 = 
uscÂ
[
i
]->
≥î
.
öô_up°ªam
 ? uscfp[i]->peer.init_upstream:

4515 
ngx_hâp_up°ªam_öô_round_robö
;

4517 i‡(
	`öô
(
cf
, 
uscÂ
[
i
]Ë!
NGX_OK
) {

4518  
NGX_CONF_ERROR
;

4525 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

4526 !
NGX_OK
)

4528  
NGX_CONF_ERROR
;

4531 
hódî
 = 
ngx_hâp_up°ªam_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

4532 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

4533 i‡(
hk
 =
NULL
) {

4534  
NGX_CONF_ERROR
;

4537 
hk
->
key
 = 
hódî
->
«me
;

4538 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

4539 
hk
->
vÆue
 = 
hódî
;

4542 
hash
.hash = &
umcf
->
hódîs_ö_hash
;

4543 
hash
.
key
 = 
ngx_hash_key_lc
;

4544 
hash
.
max_size
 = 512;

4545 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

4546 
hash
.
«me
 = "upstream_headers_in_hash";

4547 
hash
.
poﬁ
 = 
cf
->pool;

4548 
hash
.
ãmp_poﬁ
 = 
NULL
;

4550 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

4551  
NGX_CONF_ERROR
;

4554  
NGX_CONF_OK
;

4555 
	}
}

	@src/http/ngx_http_upstream.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

16 
	~<ngx_evít_pùe.h
>

17 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_UPSTREAM_FT_ERROR
 0x00000002

	)

21 
	#NGX_HTTP_UPSTREAM_FT_TIMEOUT
 0x00000004

	)

22 
	#NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 0x00000008

	)

23 
	#NGX_HTTP_UPSTREAM_FT_HTTP_500
 0x00000010

	)

24 
	#NGX_HTTP_UPSTREAM_FT_HTTP_502
 0x00000020

	)

25 
	#NGX_HTTP_UPSTREAM_FT_HTTP_503
 0x00000040

	)

26 
	#NGX_HTTP_UPSTREAM_FT_HTTP_504
 0x00000080

	)

27 
	#NGX_HTTP_UPSTREAM_FT_HTTP_404
 0x00000100

	)

28 
	#NGX_HTTP_UPSTREAM_FT_UPDATING
 0x00000200

	)

29 
	#NGX_HTTP_UPSTREAM_FT_BUSY_LOCK
 0x00000400

	)

30 
	#NGX_HTTP_UPSTREAM_FT_MAX_WAITING
 0x00000800

	)

31 
	#NGX_HTTP_UPSTREAM_FT_NOLIVE
 0x40000000

	)

32 
	#NGX_HTTP_UPSTREAM_FT_OFF
 0x80000000

	)

34 
	#NGX_HTTP_UPSTREAM_FT_STATUS
 (
NGX_HTTP_UPSTREAM_FT_HTTP_500
 \

35 |
NGX_HTTP_UPSTREAM_FT_HTTP_502
 \

36 |
NGX_HTTP_UPSTREAM_FT_HTTP_503
 \

37 |
NGX_HTTP_UPSTREAM_FT_HTTP_504
 \

38 |
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

	)

40 
	#NGX_HTTP_UPSTREAM_INVALID_HEADER
 40

	)

43 
	#NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 0x00000002

	)

44 
	#NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 0x00000004

	)

45 
	#NGX_HTTP_UPSTREAM_IGN_EXPIRES
 0x00000008

	)

46 
	#NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 0x00000010

	)

47 
	#NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 0x00000020

	)

48 
	#NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 0x00000040

	)

49 
	#NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 0x00000080

	)

50 
	#NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 0x00000100

	)

54 
ngx_m£c_t
 
	mbl_time
;

55 
ngx_uöt_t
 
	mbl_°©e
;

57 
ngx_uöt_t
 
	m°©us
;

58 
time_t
 
	mª•⁄£_£c
;

59 
ngx_uöt_t
 
	mª•⁄£_m£c
;

60 
off_t
 
	mª•⁄£_Àngth
;

62 
ngx_°r_t
 *
	m≥î
;

63 } 
	tngx_hâp_up°ªam_°©e_t
;

67 
ngx_hash_t
 
	mhódîs_ö_hash
;

68 
ngx_¨øy_t
 
	mup°ªams
;

70 } 
	tngx_hâp_up°ªam_maö_c⁄f_t
;

72 
ngx_hâp_up°ªam_§v_c⁄f_s
 
	tngx_hâp_up°ªam_§v_c⁄f_t
;

74 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_±
)(
	tngx_c⁄f_t
 *
	tcf
,

75 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

76 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_≥î_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

77 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

81 
ngx_hâp_up°ªam_öô_±
 
öô_up°ªam
;

82 
ngx_hâp_up°ªam_öô_≥î_±
 
öô
;

83 *
d©a
;

84 } 
	tngx_hâp_up°ªam_≥î_t
;

88 
ngx_addr_t
 *
addrs
;

89 
ngx_uöt_t
 
«ddrs
;

90 
ngx_uöt_t
 
weight
;

91 
ngx_uöt_t
 
max_Áûs
;

92 
time_t
 
Áû_timeout
;

94 
down
:1;

95 
backup
:1;

96 } 
	tngx_hâp_up°ªam_£rvî_t
;

99 
	#NGX_HTTP_UPSTREAM_CREATE
 0x0001

	)

100 
	#NGX_HTTP_UPSTREAM_WEIGHT
 0x0002

	)

101 
	#NGX_HTTP_UPSTREAM_MAX_FAILS
 0x0004

	)

102 
	#NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
 0x0008

	)

103 
	#NGX_HTTP_UPSTREAM_DOWN
 0x0010

	)

104 
	#NGX_HTTP_UPSTREAM_BACKUP
 0x0020

	)

107 
	sngx_hâp_up°ªam_§v_c⁄f_s
 {

108 
ngx_hâp_up°ªam_≥î_t
 
≥î
;

109 **
§v_c⁄f
;

111 
ngx_¨øy_t
 *
£rvîs
;

113 
ngx_uöt_t
 
Êags
;

114 
ngx_°r_t
 
ho°
;

115 
u_ch¨
 *
fûe_«me
;

116 
ngx_uöt_t
 
löe
;

117 
ö_p‹t_t
 
p‹t
;

118 
ö_p‹t_t
 
deÁu…_p‹t
;

123 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
up°ªam
;

125 
ngx_m£c_t
 
c⁄√˘_timeout
;

126 
ngx_m£c_t
 
£nd_timeout
;

127 
ngx_m£c_t
 
ªad_timeout
;

128 
ngx_m£c_t
 
timeout
;

130 
size_t
 
£nd_low©
;

131 
size_t
 
buf„r_size
;

133 
size_t
 
busy_buf„rs_size
;

134 
size_t
 
max_ãmp_fûe_size
;

135 
size_t
 
ãmp_fûe_wrôe_size
;

137 
size_t
 
busy_buf„rs_size_c⁄f
;

138 
size_t
 
max_ãmp_fûe_size_c⁄f
;

139 
size_t
 
ãmp_fûe_wrôe_size_c⁄f
;

141 
ngx_bufs_t
 
bufs
;

143 
ngx_uöt_t
 
ign‹e_hódîs
;

144 
ngx_uöt_t
 
√xt_up°ªam
;

145 
ngx_uöt_t
 
°‹e_ac˚ss
;

146 
ngx_Êag_t
 
buf„rög
;

147 
ngx_Êag_t
 
∑ss_ªque°_hódîs
;

148 
ngx_Êag_t
 
∑ss_ªque°_body
;

150 
ngx_Êag_t
 
ign‹e_˛õ¡_ab‹t
;

151 
ngx_Êag_t
 
öãr˚±_îr‹s
;

152 
ngx_Êag_t
 
cy˛ic_ãmp_fûe
;

154 
ngx_∑th_t
 *
ãmp_∑th
;

156 
ngx_hash_t
 
hide_hódîs_hash
;

157 
ngx_¨øy_t
 *
hide_hódîs
;

158 
ngx_¨øy_t
 *
∑ss_hódîs
;

160 
ngx_addr_t
 *
loˇl
;

162 #i‡(
NGX_HTTP_CACHE
)

163 
ngx_shm_z⁄e_t
 *
ˇche
;

165 
ngx_uöt_t
 
ˇche_mö_u£s
;

166 
ngx_uöt_t
 
ˇche_u£_°Æe
;

167 
ngx_uöt_t
 
ˇche_mëhods
;

169 
ngx_¨øy_t
 *
ˇche_vÆid
;

170 
ngx_¨øy_t
 *
ˇche_by∑ss
;

171 
ngx_¨øy_t
 *
no_ˇche
;

174 
ngx_¨øy_t
 *
°‹e_Àngths
;

175 
ngx_¨øy_t
 *
°‹e_vÆues
;

177 sig√d 
°‹e
:2;

178 
öãr˚±_404
:1;

179 
ch™ge_buf„rög
:1;

181 #i‡(
NGX_HTTP_SSL
)

182 
ngx_s¶_t
 *
s¶
;

183 
ngx_Êag_t
 
s¶_£ssi⁄_ªu£
;

186 
ngx_°r_t
 
moduÀ
;

187 } 
	tngx_hâp_up°ªam_c⁄f_t
;

191 
ngx_°r_t
 
«me
;

192 
ngx_hâp_hódî_h™dÀr_±
 
h™dÀr
;

193 
ngx_uöt_t
 
off£t
;

194 
ngx_hâp_hódî_h™dÀr_±
 
c›y_h™dÀr
;

195 
ngx_uöt_t
 
c⁄f
;

196 
ngx_uöt_t
 
ªdúe˘
;

197 } 
	tngx_hâp_up°ªam_hódî_t
;

201 
ngx_li°_t
 
hódîs
;

203 
ngx_uöt_t
 
°©us_n
;

204 
ngx_°r_t
 
°©us_löe
;

206 
ngx_èbÀ_ñt_t
 *
°©us
;

207 
ngx_èbÀ_ñt_t
 *
d©e
;

208 
ngx_èbÀ_ñt_t
 *
£rvî
;

209 
ngx_èbÀ_ñt_t
 *
c⁄√˘i⁄
;

211 
ngx_èbÀ_ñt_t
 *
expúes
;

212 
ngx_èbÀ_ñt_t
 *
ëag
;

213 
ngx_èbÀ_ñt_t
 *
x_ac˚l_expúes
;

214 
ngx_èbÀ_ñt_t
 *
x_ac˚l_ªdúe˘
;

215 
ngx_èbÀ_ñt_t
 *
x_ac˚l_limô_øã
;

217 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ty≥
;

218 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_Àngth
;

220 
ngx_èbÀ_ñt_t
 *
œ°_modifõd
;

221 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

222 
ngx_èbÀ_ñt_t
 *
ac˚±_ønges
;

223 
ngx_èbÀ_ñt_t
 *
www_authítiˇã
;

225 #i‡(
NGX_HTTP_GZIP
)

226 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ícodög
;

229 
off_t
 
c⁄ã¡_Àngth_n
;

231 
ngx_¨øy_t
 
ˇche_c⁄åﬁ
;

232 } 
	tngx_hâp_up°ªam_hódîs_ö_t
;

236 
ngx_°r_t
 
ho°
;

237 
ö_p‹t_t
 
p‹t
;

238 
ngx_uöt_t
 
no_p‹t
;

240 
ngx_uöt_t
 
«ddrs
;

241 
ö_addr_t
 *
addrs
;

243 
sockaddr
 *sockaddr;

244 
sockÀn_t
 
sockÀn
;

246 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

247 } 
	tngx_hâp_up°ªam_ªsﬁved_t
;

250 (*
	tngx_hâp_up°ªam_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

251 
	tngx_hâp_up°ªam_t
 *
	tu
);

254 
	sngx_hâp_up°ªam_s
 {

255 
ngx_hâp_up°ªam_h™dÀr_±
 
ªad_evít_h™dÀr
;

256 
ngx_hâp_up°ªam_h™dÀr_±
 
wrôe_evít_h™dÀr
;

258 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

260 
ngx_evít_pùe_t
 *
pùe
;

262 
ngx_chaö_t
 *
ªque°_bufs
;

264 
ngx_ouçut_chaö_˘x_t
 
ouçut
;

265 
ngx_chaö_wrôî_˘x_t
 
wrôî
;

267 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
;

269 
ngx_hâp_up°ªam_hódîs_ö_t
 
hódîs_ö
;

271 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ªsﬁved
;

273 
ngx_buf_t
 
buf„r
;

274 
size_t
 
Àngth
;

276 
ngx_chaö_t
 *
out_bufs
;

277 
ngx_chaö_t
 *
busy_bufs
;

278 
ngx_chaö_t
 *
‰ì_bufs
;

280 
	`ngx_öt_t
 (*
öput_fûãr_öô
)(*
d©a
);

281 
	`ngx_öt_t
 (*
öput_fûãr
)(*
d©a
, 
ssize_t
 
byãs
);

282 *
öput_fûãr_˘x
;

284 #i‡(
NGX_HTTP_CACHE
)

285 
	`ngx_öt_t
 (*
¸óã_key
)(
ngx_hâp_ªque°_t
 *
r
);

287 
	`ngx_öt_t
 (*
¸óã_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

288 
	`ngx_öt_t
 (*
ªöô_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

289 
	`ngx_öt_t
 (*
¥o˚ss_hódî
)(
ngx_hâp_ªque°_t
 *
r
);

290 (*
ab‹t_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

291 (*
föÆize_ªque°
)(
ngx_hâp_ªque°_t
 *
r
,

292 
ngx_öt_t
 
rc
);

293 
	`ngx_öt_t
 (*
ªwrôe_ªdúe˘
)(
ngx_hâp_ªque°_t
 *
r
,

294 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

296 
ngx_m£c_t
 
timeout
;

298 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

300 
ngx_°r_t
 
mëhod
;

301 
ngx_°r_t
 
schema
;

302 
ngx_°r_t
 
uri
;

304 
ngx_hâp_˛ónup_±
 *
˛ónup
;

306 
°‹e
:1;

307 
ˇchóbÀ
:1;

308 
ac˚l
:1;

309 
s¶
:1;

310 #i‡(
NGX_HTTP_CACHE
)

311 
ˇche_°©us
:3;

314 
buf„rög
:1;

316 
ªque°_£¡
:1;

317 
hódî_£¡
:1;

322 
ngx_uöt_t
 
°©us
;

323 
ngx_uöt_t
 
mask
;

324 } 
	tngx_hâp_up°ªam_√xt_t
;

327 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

328 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

330 
ngx_öt_t
 
	`ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

331 
	`ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
);

332 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
	`ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
,

333 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
);

334 *
	`ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

335 *
c⁄f
);

336 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

337 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

338 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
);

341 
	#ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
, 
moduÀ
) \

342 
uscf
->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

345 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

346 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ˇche_mëhod_mask
[];

347 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ign‹e_hódîs_masks
[];

	@src/http/ngx_http_upstream_round_robin.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_up°ªam_cmp_£rvîs
(c⁄° *
⁄e
,

14 c⁄° *
two
);

15 
ngx_uöt_t


16 
ngx_hâp_up°ªam_gë_≥î
(
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
);

18 #i‡(
NGX_HTTP_SSL
)

20 
ngx_öt_t
 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

21 *
d©a
);

22 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

23 *
d©a
);

28 
ngx_öt_t


29 
	$ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

30 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

32 
ngx_uæ_t
 
u
;

33 
ngx_uöt_t
 
i
, 
j
, 
n
;

34 
ngx_hâp_up°ªam_£rvî_t
 *
£rvî
;

35 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

37 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_round_robö_≥î
;

39 i‡(
us
->
£rvîs
) {

40 
£rvî
 = 
us
->
£rvîs
->
ñts
;

42 
n
 = 0;

44 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

45 i‡(
£rvî
[
i
].
backup
) {

49 
n
 +
£rvî
[
i
].
«ddrs
;

52 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

53 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

54 i‡(
≥îs
 =
NULL
) {

55  
NGX_ERROR
;

58 
≥îs
->
sögÀ
 = (
n
 == 1);

59 
≥îs
->
numbî
 = 
n
;

60 
≥îs
->
«me
 = &
us
->
ho°
;

62 
n
 = 0;

64 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

65 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

66 i‡(
£rvî
[
i
].
backup
) {

70 
≥îs
->
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

71 
≥îs
->
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

72 
≥îs
->
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

73 
≥îs
->
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

74 
≥îs
->
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

75 
≥îs
->
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

76 
≥îs
->
≥î
[
n
].
weight
 = 
£rvî
[
i
].
down
 ? 0 : server[i].weight;

77 
≥îs
->
≥î
[
n
].
cuºít_weight
 =Öìrs->≥î[n].
weight
;

78 
n
++;

82 
us
->
≥î
.
d©a
 = 
≥îs
;

84 
	`ngx_s‹t
(&
≥îs
->
≥î
[0], (
size_t
Ë
n
,

85 (
ngx_hâp_up°ªam_º_≥î_t
),

86 
ngx_hâp_up°ªam_cmp_£rvîs
);

90 
n
 = 0;

92 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

93 i‡(!
£rvî
[
i
].
backup
) {

97 
n
 +
£rvî
[
i
].
«ddrs
;

100 i‡(
n
 == 0) {

101  
NGX_OK
;

104 
backup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

105 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

106 i‡(
backup
 =
NULL
) {

107  
NGX_ERROR
;

110 
≥îs
->
sögÀ
 = 0;

111 
backup
->
sögÀ
 = 0;

112 
backup
->
numbî
 = 
n
;

113 
backup
->
«me
 = &
us
->
ho°
;

115 
n
 = 0;

117 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

118 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

119 i‡(!
£rvî
[
i
].
backup
) {

123 
backup
->
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

124 
backup
->
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

125 
backup
->
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

126 
backup
->
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

127 
backup
->
≥î
[
n
].
cuºít_weight
 = 
£rvî
[
i
].
weight
;

128 
backup
->
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

129 
backup
->
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

130 
backup
->
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

131 
n
++;

135 
≥îs
->
√xt
 = 
backup
;

137 
	`ngx_s‹t
(&
backup
->
≥î
[0], (
size_t
Ë
n
,

138 (
ngx_hâp_up°ªam_º_≥î_t
),

139 
ngx_hâp_up°ªam_cmp_£rvîs
);

141  
NGX_OK
;

147 i‡(
us
->
p‹t
 =0 && us->
deÁu…_p‹t
 == 0) {

148 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

150 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

151  
NGX_ERROR
;

154 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

156 
u
.
ho°
 = 
us
->host;

157 
u
.
p‹t
 = (
ö_p‹t_t
Ë(
us
->p‹à? us->p‹à: us->
deÁu…_p‹t
);

159 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

160 i‡(
u
.
îr
) {

161 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

163 
u
.
îr
, &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

166  
NGX_ERROR
;

169 
n
 = 
u
.
«ddrs
;

171 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

172 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

173 i‡(
≥îs
 =
NULL
) {

174  
NGX_ERROR
;

177 
≥îs
->
sögÀ
 = (
n
 == 1);

178 
≥îs
->
numbî
 = 
n
;

179 
≥îs
->
«me
 = &
us
->
ho°
;

181 
i
 = 0; i < 
u
.
«ddrs
; i++) {

182 
≥îs
->
≥î
[
i
].
sockaddr
 = 
u
.
addrs
[i].sockaddr;

183 
≥îs
->
≥î
[
i
].
sockÀn
 = 
u
.
addrs
[i].socklen;

184 
≥îs
->
≥î
[
i
].
«me
 = 
u
.
addrs
[i].name;

185 
≥îs
->
≥î
[
i
].
weight
 = 1;

186 
≥îs
->
≥î
[
i
].
cuºít_weight
 = 1;

187 
≥îs
->
≥î
[
i
].
max_Áûs
 = 1;

188 
≥îs
->
≥î
[
i
].
Áû_timeout
 = 10;

191 
us
->
≥î
.
d©a
 = 
≥îs
;

195  
NGX_OK
;

196 
	}
}

199 
ngx_öt_t


200 
	$ngx_hâp_up°ªam_cmp_£rvîs
(c⁄° *
⁄e
, c⁄° *
two
)

202 
ngx_hâp_up°ªam_º_≥î_t
 *
fú°
, *
£c⁄d
;

204 
fú°
 = (
ngx_hâp_up°ªam_º_≥î_t
 *Ë
⁄e
;

205 
£c⁄d
 = (
ngx_hâp_up°ªam_º_≥î_t
 *Ë
two
;

207  (
fú°
->
weight
 < 
£c⁄d
->weight);

208 
	}
}

211 
ngx_öt_t


212 
	$ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

213 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

215 
ngx_uöt_t
 
n
;

216 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

218 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

220 i‡(
ºp
 =
NULL
) {

221 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

222 i‡(
ºp
 =
NULL
) {

223  
NGX_ERROR
;

226 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

229 
ºp
->
≥îs
 = 
us
->
≥î
.
d©a
;

230 
ºp
->
cuºít
 = 0;

232 
n
 = 
ºp
->
≥îs
->
numbî
;

234 i‡(
ºp
->
≥îs
->
√xt
 &&ÑΩ->≥îs->√xt->
numbî
 > 
n
) {

235 
n
 = 
ºp
->
≥îs
->
√xt
->
numbî
;

238 i‡(
n
 <8 * (
uöçå_t
)) {

239 
ºp
->
åõd
 = &ºp->
d©a
;

240 
ºp
->
d©a
 = 0;

243 
n
 = (¿+ (8 * (
uöçå_t
) - 1)) / (8 * (uintptr_t));

245 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

246 i‡(
ºp
->
åõd
 =
NULL
) {

247  
NGX_ERROR
;

251 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

252 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

253 
r
->
up°ªam
->
≥î
.
åõs
 = 
ºp
->
≥îs
->
numbî
;

254 #i‡(
NGX_HTTP_SSL
)

255 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 =

256 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
;

257 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 =

258 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
;

261  
NGX_OK
;

262 
	}
}

265 
ngx_öt_t


266 
	$ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

267 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
)

269 
u_ch¨
 *
p
;

270 
size_t
 
Àn
;

271 
ngx_uöt_t
 
i
, 
n
;

272 
sockaddr_ö
 *
sö
;

273 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

274 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

276 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

278 i‡(
ºp
 =
NULL
) {

279 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

280 i‡(
ºp
 =
NULL
) {

281  
NGX_ERROR
;

284 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

287 
≥îs
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

288 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
ur
->
«ddrs
 - 1));

289 i‡(
≥îs
 =
NULL
) {

290  
NGX_ERROR
;

293 
≥îs
->
sögÀ
 = (
ur
->
«ddrs
 == 1);

294 
≥îs
->
numbî
 = 
ur
->
«ddrs
;

295 
≥îs
->
«me
 = &
ur
->
ho°
;

297 i‡(
ur
->
sockaddr
) {

298 
≥îs
->
≥î
[0].
sockaddr
 = 
ur
->sockaddr;

299 
≥îs
->
≥î
[0].
sockÀn
 = 
ur
->socklen;

300 
≥îs
->
≥î
[0].
«me
 = 
ur
->
ho°
;

301 
≥îs
->
≥î
[0].
weight
 = 1;

302 
≥îs
->
≥î
[0].
cuºít_weight
 = 1;

303 
≥îs
->
≥î
[0].
max_Áûs
 = 1;

304 
≥îs
->
≥î
[0].
Áû_timeout
 = 10;

308 
i
 = 0; i < 
ur
->
«ddrs
; i++) {

310 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65536") - 1;

312 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

313 i‡(
p
 =
NULL
) {

314  
NGX_ERROR
;

317 
Àn
 = 
	`ngx_öë_¡›
(
AF_INET
, &
ur
->
addrs
[
i
], 
p
, 
NGX_INET_ADDRSTRLEN
);

318 
Àn
 = 
	`ngx_•rötf
(&
p
[Àn], ":%d", 
ur
->
p‹t
) -Ö;

320 
sö
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
sockaddr_ö
));

321 i‡(
sö
 =
NULL
) {

322  
NGX_ERROR
;

325 
sö
->
sö_Ámûy
 = 
AF_INET
;

326 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
ur
->
p‹t
);

327 
sö
->
sö_addr
.
s_addr
 = 
ur
->
addrs
[
i
];

329 
≥îs
->
≥î
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

330 
≥îs
->
≥î
[
i
].
sockÀn
 = (
sockaddr_ö
);

331 
≥îs
->
≥î
[
i
].
«me
.
Àn
 =Üen;

332 
≥îs
->
≥î
[
i
].
«me
.
d©a
 = 
p
;

333 
≥îs
->
≥î
[
i
].
weight
 = 1;

334 
≥îs
->
≥î
[
i
].
cuºít_weight
 = 1;

335 
≥îs
->
≥î
[
i
].
max_Áûs
 = 1;

336 
≥îs
->
≥î
[
i
].
Áû_timeout
 = 10;

340 
ºp
->
≥îs
 =Öeers;

341 
ºp
->
cuºít
 = 0;

343 i‡(
ºp
->
≥îs
->
numbî
 <8 * (
uöçå_t
)) {

344 
ºp
->
åõd
 = &ºp->
d©a
;

345 
ºp
->
d©a
 = 0;

348 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

349 / (8 * (
uöçå_t
));

351 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

352 i‡(
ºp
->
åõd
 =
NULL
) {

353  
NGX_ERROR
;

357 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

358 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

359 
r
->
up°ªam
->
≥î
.
åõs
 = 
ºp
->
≥îs
->
numbî
;

360 #i‡(
NGX_HTTP_SSL
)

361 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
;

362 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
;

365  
NGX_OK
;

366 
	}
}

369 
ngx_öt_t


370 
	$ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

372 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

374 
time_t
 
now
;

375 
uöçå_t
 
m
;

376 
ngx_öt_t
 
rc
;

377 
ngx_uöt_t
 
i
, 
n
;

378 
ngx_c⁄√˘i⁄_t
 *
c
;

379 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

380 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

382 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

383 "gëÑ∏≥î,Åry: %ui", 
pc
->
åõs
);

385 
now
 = 
	`ngx_time
();

389 i‡(
ºp
->
≥îs
->
œ°_ˇched
) {

393 
c
 = 
ºp
->
≥îs
->
ˇched
[ºp->≥îs->
œ°_ˇched
];

394 
ºp
->
≥îs
->
œ°_ˇched
--;

398 #i‡(
NGX_THREADS
)

399 
c
->
ªad
->
lock
 = c->ªad->
own_lock
;

400 
c
->
wrôe
->
lock
 = c->wrôe->
own_lock
;

403 
pc
->
c⁄√˘i⁄
 = 
c
;

404 
pc
->
ˇched
 = 1;

406  
NGX_OK
;

409 
pc
->
ˇched
 = 0;

410 
pc
->
c⁄√˘i⁄
 = 
NULL
;

412 i‡(
ºp
->
≥îs
->
sögÀ
) {

413 
≥î
 = &
ºp
->
≥îs
->peer[0];

419 i‡(
pc
->
åõs
 =
ºp
->
≥îs
->
numbî
) {

423 
i
 = 
pc
->
åõs
;

426 
ºp
->
cuºít
 = 
	`ngx_hâp_up°ªam_gë_≥î
‘Ω->
≥îs
);

428 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

430 
ºp
->
cuºít
,

431 
ºp
->
≥îs
->
≥î
[ºp->
cuºít
].
cuºít_weight
);

433 
n
 = 
ºp
->
cuºít
 / (8 * (
uöçå_t
));

434 
m
 = (
uöçå_t
Ë1 << 
ºp
->
cuºít
 % (8 * (uintptr_t));

436 i‡(!(
ºp
->
åõd
[
n
] & 
m
)) {

437 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

439 i‡(!
≥î
->
down
) {

441 i‡(
≥î
->
max_Áûs
 == 0

442 || 
≥î
->
Áûs
 <Öìr->
max_Áûs
)

447 i‡(
now
 - 
≥î
->
ac˚s£d
 >Öìr->
Áû_timeout
) {

448 
≥î
->
Áûs
 = 0;

452 
≥î
->
cuºít_weight
 = 0;

455 
ºp
->
åõd
[
n
] |
m
;

458 
pc
->
åõs
--;

461 i‡(
pc
->
åõs
 == 0) {

462 
Áûed
;

465 i‡(--
i
 == 0) {

466 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 0,

468 
pc
->
åõs
);

469 
Áûed
;

473 
≥î
->
cuºít_weight
--;

477 
i
 = 
pc
->
åõs
;

480 
n
 = 
ºp
->
cuºít
 / (8 * (
uöçå_t
));

481 
m
 = (
uöçå_t
Ë1 << 
ºp
->
cuºít
 % (8 * (uintptr_t));

483 i‡(!(
ºp
->
åõd
[
n
] & 
m
)) {

485 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

487 i‡(!
≥î
->
down
) {

489 i‡(
≥î
->
max_Áûs
 == 0

490 || 
≥î
->
Áûs
 <Öìr->
max_Áûs
)

495 i‡(
now
 - 
≥î
->
ac˚s£d
 >Öìr->
Áû_timeout
) {

496 
≥î
->
Áûs
 = 0;

500 
≥î
->
cuºít_weight
 = 0;

503 
ºp
->
åõd
[
n
] |
m
;

506 
pc
->
åõs
--;

509 
ºp
->
cuºít
++;

511 i‡(
ºp
->
cuºít
 >ºp->
≥îs
->
numbî
) {

512 
ºp
->
cuºít
 = 0;

515 i‡(
pc
->
åõs
 == 0) {

516 
Áûed
;

519 i‡(--
i
 == 0) {

520 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 0,

522 
pc
->
åõs
);

523 
Áûed
;

527 
≥î
->
cuºít_weight
--;

530 
ºp
->
åõd
[
n
] |
m
;

533 
pc
->
sockaddr
 = 
≥î
->sockaddr;

534 
pc
->
sockÀn
 = 
≥î
->socklen;

535 
pc
->
«me
 = &
≥î
->name;

539 i‡(
pc
->
åõs
 =1 && 
ºp
->
≥îs
->
√xt
) {

540 
pc
->
åõs
 +
ºp
->
≥îs
->
√xt
->
numbî
;

542 
n
 = 
ºp
->
≥îs
->
√xt
->
numbî
 / (8 * (
uöçå_t
)) + 1;

543 
i
 = 0; i < 
n
; i++) {

544 
ºp
->
åõd
[
i
] = 0;

548  
NGX_OK
;

550 
Áûed
:

552 
≥îs
 = 
ºp
->peers;

554 i‡(
≥îs
->
√xt
) {

558 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0, "backup servers");

560 
ºp
->
≥îs
 =Öìrs->
√xt
;

561 
pc
->
åõs
 = 
ºp
->
≥îs
->
numbî
;

563 
n
 = 
ºp
->
≥îs
->
numbî
 / (8 * (
uöçå_t
)) + 1;

564 
i
 = 0; i < 
n
; i++) {

565 
ºp
->
åõd
[
i
] = 0;

568 
rc
 = 
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

570 i‡(
rc
 !
NGX_BUSY
) {

571  
rc
;

579 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

580 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

585 
pc
->
«me
 = 
≥îs
->name;

587  
NGX_BUSY
;

588 
	}
}

591 
ngx_uöt_t


592 
	$ngx_hâp_up°ªam_gë_≥î
(
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
)

594 
ngx_uöt_t
 
i
, 
n
, 
ª£t
 = 0;

595 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

597 
≥î
 = &
≥îs
->peer[0];

601 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

603 i‡(
≥î
[
i
].
cuºít_weight
 <= 0) {

607 
n
 = 
i
;

609 
i
 < 
≥îs
->
numbî
 - 1) {

611 
i
++;

613 i‡(
≥î
[
i
].
cuºít_weight
 <= 0) {

617 i‡(
≥î
[
n
].
cuºít_weight
 * 1000 /Öìr[
i
].current_weight

618 > 
≥î
[
n
].
weight
 * 1000 /Öìr[
i
].weight)

620  
n
;

623 
n
 = 
i
;

626 i‡(
≥î
[
i
].
cuºít_weight
 > 0) {

627 
n
 = 
i
;

630  
n
;

633 i‡(
ª£t
++) {

637 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

638 
≥î
[
i
].
cuºít_weight
 =Öìr[i].
weight
;

641 
	}
}

645 
	$ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

646 
ngx_uöt_t
 
°©e
)

648 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

650 
time_t
 
now
;

651 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

653 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

654 "‰ìÑ∏≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

656 i‡(
°©e
 =0 && 
pc
->
åõs
 == 0) {

662 i‡(
ºp
->
≥îs
->
sögÀ
) {

663 
pc
->
åõs
 = 0;

667 i‡(
°©e
 & 
NGX_PEER_FAILED
) {

668 
now
 = 
	`ngx_time
();

670 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

674 
≥î
->
Áûs
++;

675 
≥î
->
ac˚s£d
 = 
now
;

677 i‡(
≥î
->
max_Áûs
) {

678 
≥î
->
cuºít_weight
 -≥î->
weight
 /Öìr->
max_Áûs
;

681 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

683 
ºp
->
cuºít
, 
≥î
->
cuºít_weight
);

685 i‡(
≥î
->
cuºít_weight
 < 0) {

686 
≥î
->
cuºít_weight
 = 0;

692 
ºp
->
cuºít
++;

694 i‡(
ºp
->
cuºít
 >ºp->
≥îs
->
numbî
) {

695 
ºp
->
cuºít
 = 0;

698 i‡(
pc
->
åõs
) {

699 
pc
->
åõs
--;

703 
	}
}

706 #i‡(
NGX_HTTP_SSL
)

708 
ngx_öt_t


709 
	$ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

710 *
d©a
)

712 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

714 
ngx_öt_t
 
rc
;

715 
ngx_s¶_£ssi⁄_t
 *
s¶_£ssi⁄
;

716 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

718 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

723 
s¶_£ssi⁄
 = 
≥î
->ssl_session;

725 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

727 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

729 
s¶_£ssi⁄
, s¶_£ssi⁄ ? s¶_£ssi⁄->
ª„ªn˚s
 : 0);

733  
rc
;

734 
	}
}

738 
	$ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

739 *
d©a
)

741 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

743 
ngx_s¶_£ssi⁄_t
 *
ﬁd_s¶_£ssi⁄
, *
s¶_£ssi⁄
;

744 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

746 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

748 i‡(
s¶_£ssi⁄
 =
NULL
) {

752 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

753 "ßvê£ssi⁄: %p:%d", 
s¶_£ssi⁄
, s¶_£ssi⁄->
ª„ªn˚s
);

755 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

760 
ﬁd_s¶_£ssi⁄
 = 
≥î
->
s¶_£ssi⁄
;

761 
≥î
->
s¶_£ssi⁄
 = ssl_session;

765 i‡(
ﬁd_s¶_£ssi⁄
) {

767 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

769 
ﬁd_s¶_£ssi⁄
, old_s¶_£ssi⁄->
ª„ªn˚s
);

773 
	`ngx_s¶_‰ì_£ssi⁄
(
ﬁd_s¶_£ssi⁄
);

775 
	}
}

778 
ngx_öt_t


779 
	$ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

781  
NGX_OK
;

782 
	}
}

786 
	$ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

789 
	}
}

	@src/http/ngx_http_upstream_round_robin.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
sockaddr
 *
	msockaddr
;

19 
sockÀn_t
 
	msockÀn
;

20 
ngx_°r_t
 
	m«me
;

22 
ngx_öt_t
 
	mcuºít_weight
;

23 
ngx_öt_t
 
	mweight
;

25 
ngx_uöt_t
 
	mÁûs
;

26 
time_t
 
	mac˚s£d
;

28 
ngx_uöt_t
 
	mmax_Áûs
;

29 
time_t
 
	mÁû_timeout
;

31 
ngx_uöt_t
 
	mdown
;

33 #i‡(
NGX_HTTP_SSL
)

34 
ngx_s¶_£ssi⁄_t
 *
	ms¶_£ssi⁄
;

36 } 
	tngx_hâp_up°ªam_º_≥î_t
;

39 
ngx_hâp_up°ªam_º_≥îs_s
 
	tngx_hâp_up°ªam_º_≥îs_t
;

41 
	sngx_hâp_up°ªam_º_≥îs_s
 {

42 
ngx_uöt_t
 
	msögÀ
;

43 
ngx_uöt_t
 
	mnumbî
;

44 
ngx_uöt_t
 
	mœ°_ˇched
;

47 
ngx_c⁄√˘i⁄_t
 **
	mˇched
;

49 
ngx_°r_t
 *
	m«me
;

51 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m√xt
;

53 
ngx_hâp_up°ªam_º_≥î_t
 
	m≥î
[1];

58 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m≥îs
;

59 
ngx_uöt_t
 
	mcuºít
;

60 
uöçå_t
 *
	måõd
;

61 
uöçå_t
 
	md©a
;

62 } 
	tngx_hâp_up°ªam_º_≥î_d©a_t
;

65 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

66 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

67 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

69 
ngx_öt_t
 
ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
);

71 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

72 *
d©a
);

73 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

74 *
d©a
, 
ngx_uöt_t
 
°©e
);

76 #i‡(
NGX_HTTP_SSL
)

77 
ngx_öt_t


78 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

79 *
d©a
);

80 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

81 *
d©a
);

	@src/http/ngx_http_variables.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

16 
ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

20 
ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

24 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

27 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

33 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

35 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

38 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

40 
ngx_öt_t
 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

42 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

44 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

45 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

46 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

48 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

50 
ngx_öt_t
 
ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

52 
ngx_öt_t
 
ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

54 
ngx_öt_t
 
ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

56 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

58 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

60 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

62 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

64 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

66 
ngx_öt_t
 
ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

68 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

69 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

70 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

71 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

72 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

73 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

81 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

83 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

85 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

87 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

90 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

92 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

94 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

113 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_c‹e_v¨übÀs
[] = {

115 { 
ngx_°rög
("hâp_ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

116 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ho°
), 0, 0 },

118 { 
ngx_°rög
("hâp_u£r_agít"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

119 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
u£r_agít
), 0, 0 },

121 { 
ngx_°rög
("hâp_ª„ªr"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

122 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ª„ªr
), 0, 0 },

124 #i‡(
NGX_HTTP_GZIP
)

125 { 
ngx_°rög
("hâp_vü"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

126 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
vü
), 0, 0 },

129 #i‡(
NGX_HTTP_PROXY
 || 
NGX_HTTP_REALIP
)

130 { 
ngx_°rög
("hâp_x_f‹w¨ded_f‹"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

131 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
x_f‹w¨ded_f‹
), 0, 0 },

134 { 
ngx_°rög
("hâp_cookõ"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

135 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
cookõs
), 0, 0 },

137 { 
ngx_°rög
("c⁄ã¡_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

138 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
c⁄ã¡_Àngth
), 0, 0 },

140 { 
ngx_°rög
("c⁄ã¡_ty≥"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

141 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
c⁄ã¡_ty≥
), 0, 0 },

143 { 
ngx_°rög
("ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°
, 0, 0, 0 },

145 { 
ngx_°rög
("bö¨y_ªmŸe_addr"), 
NULL
,

146 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
, 0, 0, 0 },

148 { 
ngx_°rög
("ªmŸe_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_addr
, 0, 0, 0 },

150 { 
ngx_°rög
("ªmŸe_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
, 0, 0, 0 },

152 { 
ngx_°rög
("£rvî_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_addr
, 0, 0, 0 },

154 { 
ngx_°rög
("£rvî_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_p‹t
, 0, 0, 0 },

156 { 
ngx_°rög
("£rvî_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

157 
off£tof
(
ngx_hâp_ªque°_t
, 
hâp_¥Ÿocﬁ
), 0, 0 },

159 { 
ngx_°rög
("scheme"), 
NULL
, 
ngx_hâp_v¨übÀ_scheme
, 0, 0, 0 },

161 { 
ngx_°rög
("ªque°_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

162 
off£tof
(
ngx_hâp_ªque°_t
, 
u≈¨£d_uri
), 0, 0 },

164 { 
ngx_°rög
("uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

165 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

166 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

168 { 
ngx_°rög
("documít_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

169 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

170 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

172 { 
ngx_°rög
("ªque°"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_löe
, 0, 0, 0 },

174 { 
ngx_°rög
("documít_roŸ"), 
NULL
,

175 
ngx_hâp_v¨übÀ_documít_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

177 { 
ngx_°rög
("ªÆ∑th_roŸ"), 
NULL
,

178 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

180 { 
ngx_°rög
("quîy_°rög"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

181 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

182 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

184 { 
ngx_°rög
("args"),

185 
ngx_hâp_v¨übÀ_ªque°_£t
,

186 
ngx_hâp_v¨übÀ_ªque°
,

187 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

188 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

190 { 
ngx_°rög
("is_¨gs"), 
NULL
, 
ngx_hâp_v¨übÀ_is_¨gs
,

191 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

193 { 
ngx_°rög
("ªque°_fûíame"), 
NULL
,

194 
ngx_hâp_v¨übÀ_ªque°_fûíame
, 0,

195 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

197 { 
ngx_°rög
("£rvî_«me"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_«me
, 0, 0, 0 },

199 { 
ngx_°rög
("ªque°_mëhod"), 
NULL
,

200 
ngx_hâp_v¨übÀ_ªque°_mëhod
, 0,

201 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

203 { 
ngx_°rög
("ªmŸe_u£r"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_u£r
, 0, 0, 0 },

205 { 
ngx_°rög
("body_byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_body_byãs_£¡
,

208 { 
ngx_°rög
("ªque°_com∂ëi⁄"), 
NULL
,

209 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
,

212 { 
ngx_°rög
("ªque°_body"), 
NULL
,

213 
ngx_hâp_v¨übÀ_ªque°_body
,

216 { 
ngx_°rög
("ªque°_body_fûe"), 
NULL
,

217 
ngx_hâp_v¨übÀ_ªque°_body_fûe
,

220 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_ty≥"), 
NULL
,

221 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
, 0, 0, 0 },

223 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_Àngth"), 
NULL
,

224 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
, 0, 0, 0 },

226 { 
ngx_°rög
("£¡_hâp_loˇti⁄"), 
NULL
,

227 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
, 0, 0, 0 },

229 { 
ngx_°rög
("£¡_hâp_œ°_modifõd"), 
NULL
,

230 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
, 0, 0, 0 },

232 { 
ngx_°rög
("£¡_hâp_c⁄√˘i⁄"), 
NULL
,

233 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
, 0, 0, 0 },

235 { 
ngx_°rög
("£¡_hâp_kìp_Æive"), 
NULL
,

236 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
, 0, 0, 0 },

238 { 
ngx_°rög
("£¡_hâp_å™s„r_ícodög"), 
NULL
,

239 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
, 0, 0, 0 },

241 { 
ngx_°rög
("£¡_hâp_ˇche_c⁄åﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

242 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_out
.
ˇche_c⁄åﬁ
), 0, 0 },

244 { 
ngx_°rög
("limô_øã"), 
ngx_hâp_v¨übÀ_ªque°_£t_size
,

245 
ngx_hâp_v¨übÀ_ªque°_gë_size
,

246 
off£tof
(
ngx_hâp_ªque°_t
, 
limô_øã
),

247 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

249 { 
ngx_°rög
("ngöx_vîsi⁄"), 
NULL
, 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
,

252 { 
ngx_°rög
("ho°«me"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°«me
,

255 { 
ngx_°rög
("pid"), 
NULL
, 
ngx_hâp_v¨übÀ_pid
,

258 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

262 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_nuŒ_vÆue
 =

263 
ngx_hâp_v¨übÀ
("");

264 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_åue_vÆue
 =

265 
ngx_hâp_v¨übÀ
("1");

268 
ngx_hâp_v¨übÀ_t
 *

269 
	$ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
)

271 
ngx_öt_t
 
rc
;

272 
ngx_uöt_t
 
i
;

273 
ngx_hash_key_t
 *
key
;

274 
ngx_hâp_v¨übÀ_t
 *
v
;

275 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

277 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

279 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

280 
i
 = 0; i < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
; i++) {

281 i‡(
«me
->
Àn
 !
key
[
i
].key.len

282 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
key
[
i
].key.d©a,Çame->
Àn
) != 0)

287 
v
 = 
key
[
i
].
vÆue
;

289 i‡(!(
v
->
Êags
 & 
NGX_HTTP_VAR_CHANGEABLE
)) {

290 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

291 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

292  
NULL
;

295  
v
;

298 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

299 i‡(
v
 =
NULL
) {

300  
NULL
;

303 
v
->
«me
.
Àn
 =Çame->len;

304 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

305 i‡(
v
->
«me
.
d©a
 =
NULL
) {

306  
NULL
;

309 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

311 
v
->
£t_h™dÀr
 = 
NULL
;

312 
v
->
gë_h™dÀr
 = 
NULL
;

313 
v
->
d©a
 = 0;

314 
v
->
Êags
 = flags;

315 
v
->
ödex
 = 0;

317 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v, 0);

319 i‡(
rc
 =
NGX_ERROR
) {

320  
NULL
;

323 i‡(
rc
 =
NGX_BUSY
) {

324 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

325 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", 
«me
);

326  
NULL
;

329  
v
;

330 
	}
}

333 
ngx_öt_t


334 
	$ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

336 
ngx_uöt_t
 
i
;

337 
ngx_hâp_v¨übÀ_t
 *
v
;

338 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

340 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

342 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

344 i‡(
v
 =
NULL
) {

345 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
v¨übÀs
, 
cf
->
poﬁ
, 4,

346 (
ngx_hâp_v¨übÀ_t
))

347 !
NGX_OK
)

349  
NGX_ERROR
;

353 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

354 i‡(
«me
->
Àn
 !
v
[
i
].name.len

355 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

360  
i
;

364 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
v¨übÀs
);

365 i‡(
v
 =
NULL
) {

366  
NGX_ERROR
;

369 
v
->
«me
.
Àn
 =Çame->len;

370 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

371 i‡(
v
->
«me
.
d©a
 =
NULL
) {

372  
NGX_ERROR
;

375 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

377 
v
->
£t_h™dÀr
 = 
NULL
;

378 
v
->
gë_h™dÀr
 = 
NULL
;

379 
v
->
d©a
 = 0;

380 
v
->
Êags
 = 0;

381 
v
->
ödex
 = 
cmcf
->
v¨übÀs
.
√…s
 - 1;

383  
cmcf
->
v¨übÀs
.
√…s
 - 1;

384 
	}
}

387 
ngx_hâp_v¨übÀ_vÆue_t
 *

388 
	$ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

390 
ngx_hâp_v¨übÀ_t
 *
v
;

391 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

393 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

395 i‡(
cmcf
->
v¨übÀs
.
√…s
 <
ödex
) {

396 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

397 "unknow¿v¨übÀ index: %d", 
ödex
);

398  
NULL
;

401 i‡(
r
->
v¨übÀs
[
ödex
].
nŸ_found
 ||Ñ->v¨übÀs[ödex].
vÆid
) {

402  &
r
->
v¨übÀs
[
ödex
];

405 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

407 i‡(
v
[
ödex
].
	`gë_h™dÀr
(
r
, &r->
v¨übÀs
[ödex], v[ödex].
d©a
)

408 =
NGX_OK
)

410 i‡(
v
[
ödex
].
Êags
 & 
NGX_HTTP_VAR_NOCACHEABLE
) {

411 
r
->
v¨übÀs
[
ödex
].
no_ˇchóbÀ
 = 1;

414  &
r
->
v¨übÀs
[
ödex
];

417 
r
->
v¨übÀs
[
ödex
].
vÆid
 = 0;

418 
r
->
v¨übÀs
[
ödex
].
nŸ_found
 = 1;

420  
NULL
;

421 
	}
}

424 
ngx_hâp_v¨übÀ_vÆue_t
 *

425 
	$ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

427 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

429 
v
 = &
r
->
v¨übÀs
[
ödex
];

431 i‡(
v
->
vÆid
 || v->
nŸ_found
) {

432 i‡(!
v
->
no_ˇchóbÀ
) {

433  
v
;

436 
v
->
vÆid
 = 0;

437 
v
->
nŸ_found
 = 0;

440  
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ödex
);

441 
	}
}

444 
ngx_hâp_v¨übÀ_vÆue_t
 *

445 
	$ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
)

447 
ngx_hâp_v¨übÀ_t
 *
v
;

448 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

449 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

451 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

453 
v
 = 
	`ngx_hash_föd
(&
cmcf
->
v¨übÀs_hash
, 
key
, 
«me
->
d©a
,Çame->
Àn
);

455 i‡(
v
) {

456 i‡(
v
->
Êags
 & 
NGX_HTTP_VAR_INDEXED
) {

457  
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
v
->
ödex
);

461 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

463 i‡(
vv
 && 
v
->
	`gë_h™dÀr
(
r
, vv, v->
d©a
Ë=
NGX_OK
) {

464  
vv
;

467  
NULL
;

471 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

472 i‡(
vv
 =
NULL
) {

473  
NULL
;

476 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "http_", 5) == 0) {

478 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_ö
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

479 =
NGX_OK
)

481  
vv
;

484  
NULL
;

487 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "sent_http_", 10) == 0) {

489 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_out
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

490 =
NGX_OK
)

492  
vv
;

495  
NULL
;

498 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "upstream_http_", 14) == 0) {

500 i‡(
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

501 =
NGX_OK
)

503  
vv
;

506  
NULL
;

509 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "cookie_", 7) == 0) {

511 i‡(
	`ngx_hâp_v¨übÀ_cookõ
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

512  
vv
;

515  
NULL
;

518 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "arg_", 4) == 0) {

520 i‡(
	`ngx_hâp_v¨übÀ_¨gumít
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

521  
vv
;

524  
NULL
;

527 
vv
->
nŸ_found
 = 1;

529  
vv
;

530 
	}
}

533 
ngx_öt_t


534 
	$ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

535 
uöçå_t
 
d©a
)

537 
ngx_°r_t
 *
s
;

539 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

541 i‡(
s
->
d©a
) {

542 
v
->
Àn
 = 
s
->len;

543 
v
->
vÆid
 = 1;

544 
v
->
no_ˇchóbÀ
 = 0;

545 
v
->
nŸ_found
 = 0;

546 
v
->
d©a
 = 
s
->data;

549 
v
->
nŸ_found
 = 1;

552  
NGX_OK
;

553 
	}
}

557 
	$ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

558 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

560 
ngx_°r_t
 *
s
;

562 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

564 
s
->
Àn
 = 
v
->len;

565 
s
->
d©a
 = 
v
->data;

566 
	}
}

569 
ngx_öt_t


570 
	$ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

571 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

573 
size_t
 *
•
;

575 
•
 = (
size_t
 *Ë((*Ë
r
 + 
d©a
);

577 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
);

578 i‡(
v
->
d©a
 =
NULL
) {

579  
NGX_ERROR
;

582 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uz", *
•
) - v->data;

583 
v
->
vÆid
 = 1;

584 
v
->
no_ˇchóbÀ
 = 0;

585 
v
->
nŸ_found
 = 0;

587  
NGX_OK
;

588 
	}
}

592 
	$ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

593 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

595 
ssize_t
 
s
, *
•
;

596 
ngx_°r_t
 
vÆ
;

598 
vÆ
.
Àn
 = 
v
->len;

599 
vÆ
.
d©a
 = 
v
->data;

601 
s
 = 
	`ngx_∑r£_size
(&
vÆ
);

603 i‡(
s
 =
NGX_ERROR
) {

604 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

605 "övÆid sizê\"%V\"", &
vÆ
);

609 
•
 = (
ssize_t
 *Ë((*Ë
r
 + 
d©a
);

611 *
•
 = 
s
;

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

619 
uöçå_t
 
d©a
)

621 
ngx_èbÀ_ñt_t
 *
h
;

623 
h
 = *(
ngx_èbÀ_ñt_t
 **Ë((*Ë
r
 + 
d©a
);

625 i‡(
h
) {

626 
v
->
Àn
 = 
h
->
vÆue
.len;

627 
v
->
vÆid
 = 1;

628 
v
->
no_ˇchóbÀ
 = 0;

629 
v
->
nŸ_found
 = 0;

630 
v
->
d©a
 = 
h
->
vÆue
.data;

633 
v
->
nŸ_found
 = 1;

636  
NGX_OK
;

637 
	}
}

640 
ngx_öt_t


641 
	$ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

642 
uöçå_t
 
d©a
)

644 
size_t
 
Àn
;

645 
u_ch¨
 *
p
, *
íd
;

646 
ngx_uöt_t
 
i
, 
n
;

647 
ngx_¨øy_t
 *
a
;

648 
ngx_èbÀ_ñt_t
 **
h
;

650 
a
 = (
ngx_¨øy_t
 *Ë((*Ë
r
 + 
d©a
);

652 
n
 = 
a
->
√…s
;

653 
h
 = 
a
->
ñts
;

655 
Àn
 = 0;

657 
i
 = 0; i < 
n
; i++) {

659 i‡(
h
[
i
]->
hash
 == 0) {

663 
Àn
 +
h
[
i
]->
vÆue
.len + ("; ") - 1;

666 i‡(
Àn
 == 0) {

667 
v
->
nŸ_found
 = 1;

668  
NGX_OK
;

671 
Àn
 -= ("; ") - 1;

673 
v
->
vÆid
 = 1;

674 
v
->
no_ˇchóbÀ
 = 0;

675 
v
->
nŸ_found
 = 0;

677 i‡(
n
 == 1) {

678 
v
->
Àn
 = (*
h
)->
vÆue
.len;

679 
v
->
d©a
 = (*
h
)->
vÆue
.data;

681  
NGX_OK
;

684 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

685 i‡(
p
 =
NULL
) {

686  
NGX_ERROR
;

689 
v
->
Àn
 =Üen;

690 
v
->
d©a
 = 
p
;

692 
íd
 = 
p
 + 
Àn
;

694 
i
 = 0; ; i++) {

696 i‡(
h
[
i
]->
hash
 == 0) {

700 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

702 i‡(
p
 =
íd
) {

706 *
p
++ = ';'; *p++ = ' ';

709  
NGX_OK
;

710 
	}
}

713 
ngx_öt_t


714 
	$ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

715 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

717  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

718 &
r
->
hódîs_ö
.
hódîs
.
∑π
,

720 
	}
}

723 
ngx_öt_t


724 
	$ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

725 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

727  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

728 &
r
->
hódîs_out
.
hódîs
.
∑π
,

730 
	}
}

733 
ngx_öt_t


734 
	$ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
v¨
,

735 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
)

737 
u_ch¨
 
ch
;

738 
ngx_uöt_t
 
i
, 
n
;

739 
ngx_èbÀ_ñt_t
 *
hódî
;

741 
hódî
 = 
∑π
->
ñts
;

743 
i
 = 0; ; i++) {

745 i‡(
i
 >
∑π
->
√…s
) {

746 i‡(
∑π
->
√xt
 =
NULL
) {

750 
∑π
 =Ö¨t->
√xt
;

751 
hódî
 = 
∑π
->
ñts
;

752 
i
 = 0;

755 i‡(
hódî
[
i
].
hash
 == 0) {

759 
n
 = 0;Ç + 
¥efix
 < 
v¨
->
Àn
 &&Ç < 
hódî
[
i
].
key
.len;Ç++) {

760 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

762 i‡(
ch
 >= 'A' && ch <= 'Z') {

763 
ch
 |= 0x20;

765 } i‡(
ch
 == '-') {

766 
ch
 = '_';

769 i‡(
v¨
->
d©a
[
n
 + 
¥efix
] !
ch
) {

774 i‡(
n
 + 
¥efix
 =
v¨
->
Àn
 &&Ç =
hódî
[
i
].
key
.len) {

775 
v
->
Àn
 = 
hódî
[
i
].
vÆue
.len;

776 
v
->
vÆid
 = 1;

777 
v
->
no_ˇchóbÀ
 = 0;

778 
v
->
nŸ_found
 = 0;

779 
v
->
d©a
 = 
hódî
[
i
].
vÆue
.data;

781  
NGX_OK
;

785 
v
->
nŸ_found
 = 1;

787  
NGX_OK
;

788 
	}
}

791 
ngx_öt_t


792 
	$ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

793 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

795 
u_ch¨
 *
p
, *
s
;

797 
s
 = 
r
->
ªque°_löe
.
d©a
;

799 i‡(
s
 =
NULL
) {

800 
s
 = 
r
->
ªque°_°¨t
;

802 i‡(
s
 =
NULL
) {

803 
v
->
nŸ_found
 = 1;

804  
NGX_OK
;

807 
p
 = 
s
;Ö < 
r
->
hódî_ö
->
œ°
;Ö++) {

808 i‡(*
p
 =
CR
 || *∞=
LF
) {

813 
r
->
ªque°_löe
.
Àn
 = 
p
 - 
s
;

814 
r
->
ªque°_löe
.
d©a
 = 
s
;

817 
v
->
Àn
 = 
r
->
ªque°_löe
.len;

818 
v
->
vÆid
 = 1;

819 
v
->
no_ˇchóbÀ
 = 0;

820 
v
->
nŸ_found
 = 0;

821 
v
->
d©a
 = 
s
;

823  
NGX_OK
;

824 
	}
}

827 
ngx_öt_t


828 
	$ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

829 
uöçå_t
 
d©a
)

831 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

833 
ngx_°r_t
 
cookõ
, 
s
;

835 
s
.
Àn
 = 
«me
->len - (("cookie_") - 1);

836 
s
.
d©a
 = 
«me
->data + ("cookie_") - 1;

838 i‡(
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
s
, &
cookõ
)

839 =
NGX_DECLINED
)

841 
v
->
nŸ_found
 = 1;

842  
NGX_OK
;

845 
v
->
Àn
 = 
cookõ
.len;

846 
v
->
vÆid
 = 1;

847 
v
->
no_ˇchóbÀ
 = 0;

848 
v
->
nŸ_found
 = 0;

849 
v
->
d©a
 = 
cookõ
.data;

851  
NGX_OK
;

852 
	}
}

855 
ngx_öt_t


856 
	$ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

857 
uöçå_t
 
d©a
)

859 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

861 
u_ch¨
 *
¨g
;

862 
size_t
 
Àn
;

863 
ngx_°r_t
 
vÆue
;

865 
Àn
 = 
«me
->len - (("arg_") - 1);

866 
¨g
 = 
«me
->
d©a
 + ("arg_") - 1;

868 i‡(
	`ngx_hâp_¨g
(
r
, 
¨g
, 
Àn
, &
vÆue
Ë!
NGX_OK
) {

869 
v
->
nŸ_found
 = 1;

870  
NGX_OK
;

873 
v
->
d©a
 = 
vÆue
.data;

874 
v
->
Àn
 = 
vÆue
.len;

875 
v
->
vÆid
 = 1;

876 
v
->
no_ˇchóbÀ
 = 0;

877 
v
->
nŸ_found
 = 0;

879  
NGX_OK
;

880 
	}
}

883 
ngx_öt_t


884 
	$ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

885 
uöçå_t
 
d©a
)

887 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

889 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

890 
v
->
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

891 
v
->
d©a
 = 
r
->
hódîs_ö
.
£rvî
.data;

894 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

896 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

897 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

900 
v
->
vÆid
 = 1;

901 
v
->
no_ˇchóbÀ
 = 0;

902 
v
->
nŸ_found
 = 0;

904  
NGX_OK
;

905 
	}
}

908 
ngx_öt_t


909 
	$ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

910 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

912 
sockaddr_ö
 *
sö
;

913 #i‡(
NGX_HAVE_INET6
)

914 
sockaddr_ö6
 *
sö6
;

917 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

919 #i‡(
NGX_HAVE_INET6
)

920 
AF_INET6
:

921 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

923 
v
->
Àn
 = (
ö6_addr
);

924 
v
->
vÆid
 = 1;

925 
v
->
no_ˇchóbÀ
 = 0;

926 
v
->
nŸ_found
 = 0;

927 
v
->
d©a
 = 
sö6
->
sö6_addr
.
s6_addr
;

933 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

935 
v
->
Àn
 = (
ö_addr_t
);

936 
v
->
vÆid
 = 1;

937 
v
->
no_ˇchóbÀ
 = 0;

938 
v
->
nŸ_found
 = 0;

939 
v
->
d©a
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

944  
NGX_OK
;

945 
	}
}

948 
ngx_öt_t


949 
	$ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

950 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

952 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

953 
v
->
vÆid
 = 1;

954 
v
->
no_ˇchóbÀ
 = 0;

955 
v
->
nŸ_found
 = 0;

956 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

958  
NGX_OK
;

959 
	}
}

962 
ngx_öt_t


963 
	$ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

964 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

966 
ngx_uöt_t
 
p‹t
;

967 
sockaddr_ö
 *
sö
;

968 #i‡(
NGX_HAVE_INET6
)

969 
sockaddr_ö6
 *
sö6
;

972 
v
->
Àn
 = 0;

973 
v
->
vÆid
 = 1;

974 
v
->
no_ˇchóbÀ
 = 0;

975 
v
->
nŸ_found
 = 0;

977 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

978 i‡(
v
->
d©a
 =
NULL
) {

979  
NGX_ERROR
;

982 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

984 #i‡(
NGX_HAVE_INET6
)

985 
AF_INET6
:

986 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

987 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

992 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

993 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

997 i‡(
p‹t
 > 0 &&Öort < 65536) {

998 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1001  
NGX_OK
;

1002 
	}
}

1005 
ngx_öt_t


1006 
	$ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

1007 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1009 
ngx_°r_t
 
s
;

1010 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

1012 
s
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

1013 
s
.
d©a
 = 
addr
;

1015 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, &
s
, 0Ë!
NGX_OK
) {

1016  
NGX_ERROR
;

1019 
s
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, s.
Àn
);

1020 i‡(
s
.
d©a
 =
NULL
) {

1021  
NGX_ERROR
;

1024 
	`ngx_mem˝y
(
s
.
d©a
, 
addr
, s.
Àn
);

1026 
v
->
Àn
 = 
s
.len;

1027 
v
->
vÆid
 = 1;

1028 
v
->
no_ˇchóbÀ
 = 0;

1029 
v
->
nŸ_found
 = 0;

1030 
v
->
d©a
 = 
s
.data;

1032  
NGX_OK
;

1033 
	}
}

1036 
ngx_öt_t


1037 
	$ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1038 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1040 
ngx_uöt_t
 
p‹t
;

1041 
sockaddr_ö
 *
sö
;

1042 #i‡(
NGX_HAVE_INET6
)

1043 
sockaddr_ö6
 *
sö6
;

1046 
v
->
Àn
 = 0;

1047 
v
->
vÆid
 = 1;

1048 
v
->
no_ˇchóbÀ
 = 0;

1049 
v
->
nŸ_found
 = 0;

1051 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, 
NULL
, 0Ë!
NGX_OK
) {

1052  
NGX_ERROR
;

1055 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1056 i‡(
v
->
d©a
 =
NULL
) {

1057  
NGX_ERROR
;

1060 
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
->
ß_Ámûy
) {

1062 #i‡(
NGX_HAVE_INET6
)

1063 
AF_INET6
:

1064 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1065 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1070 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1071 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1075 i‡(
p‹t
 > 0 &&Öort < 65536) {

1076 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1079  
NGX_OK
;

1080 
	}
}

1083 
ngx_öt_t


1084 
	$ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

1085 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1087 #i‡(
NGX_HTTP_SSL
)

1089 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1090 
v
->
Àn
 = ("https") - 1;

1091 
v
->
vÆid
 = 1;

1092 
v
->
no_ˇchóbÀ
 = 0;

1093 
v
->
nŸ_found
 = 0;

1094 
v
->
d©a
 = (
u_ch¨
 *) "https";

1096  
NGX_OK
;

1101 
v
->
Àn
 = ("http") - 1;

1102 
v
->
vÆid
 = 1;

1103 
v
->
no_ˇchóbÀ
 = 0;

1104 
v
->
nŸ_found
 = 0;

1105 
v
->
d©a
 = (
u_ch¨
 *) "http";

1107  
NGX_OK
;

1108 
	}
}

1111 
ngx_öt_t


1112 
	$ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

1113 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1115 
v
->
vÆid
 = 1;

1116 
v
->
no_ˇchóbÀ
 = 0;

1117 
v
->
nŸ_found
 = 0;

1119 i‡(
r
->
¨gs
.
Àn
 == 0) {

1120 
v
->
Àn
 = 0;

1121 
v
->
d©a
 = 
NULL
;

1122  
NGX_OK
;

1125 
v
->
Àn
 = 1;

1126 
v
->
d©a
 = (
u_ch¨
 *) "?";

1128  
NGX_OK
;

1129 
	}
}

1132 
ngx_öt_t


1133 
	$ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1134 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1136 
ngx_°r_t
 
∑th
;

1137 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1139 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1141 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1142 
v
->
Àn
 = 
˛cf
->
roŸ
.len;

1143 
v
->
vÆid
 = 1;

1144 
v
->
no_ˇchóbÀ
 = 0;

1145 
v
->
nŸ_found
 = 0;

1146 
v
->
d©a
 = 
˛cf
->
roŸ
.data;

1149 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 0,

1150 
˛cf
->
roŸ_vÆues
->
ñts
)

1151 =
NULL
)

1153  
NGX_ERROR
;

1156 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
∑th
, 0Ë!
NGX_OK
) {

1157  
NGX_ERROR
;

1160 
v
->
Àn
 = 
∑th
.len;

1161 
v
->
vÆid
 = 1;

1162 
v
->
no_ˇchóbÀ
 = 0;

1163 
v
->
nŸ_found
 = 0;

1164 
v
->
d©a
 = 
∑th
.data;

1167  
NGX_OK
;

1168 
	}
}

1171 
ngx_öt_t


1172 
	$ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1173 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1175 
size_t
 
Àn
;

1176 
ngx_°r_t
 
∑th
;

1177 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1178 
u_ch¨
 
ªÆ
[
NGX_MAX_PATH
];

1180 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1182 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1183 
∑th
 = 
˛cf
->
roŸ
;

1186 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 1,

1187 
˛cf
->
roŸ_vÆues
->
ñts
)

1188 =
NULL
)

1190  
NGX_ERROR
;

1193 
∑th
.
d©a
[∑th.
Àn
 - 1] = '\0';

1195 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
∑th
, 0Ë!
NGX_OK
) {

1196  
NGX_ERROR
;

1200 i‡(
	`ngx_ªÆ∑th
(
∑th
.
d©a
, 
ªÆ
Ë=
NULL
) {

1201 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1202 
ngx_ªÆ∑th_n
 " \"%s\" faûed", 
∑th
.
d©a
);

1203  
NGX_ERROR
;

1206 
Àn
 = 
	`ngx_°æí
(
ªÆ
);

1208 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1209 i‡(
v
->
d©a
 =
NULL
) {

1210  
NGX_ERROR
;

1213 
v
->
Àn
 =Üen;

1214 
v
->
vÆid
 = 1;

1215 
v
->
no_ˇchóbÀ
 = 0;

1216 
v
->
nŸ_found
 = 0;

1218 
	`ngx_mem˝y
(
v
->
d©a
, 
ªÆ
, 
Àn
);

1220  
NGX_OK
;

1221 
	}
}

1224 
ngx_öt_t


1225 
	$ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

1226 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1228 
size_t
 
roŸ
;

1229 
ngx_°r_t
 
∑th
;

1231 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

1232  
NGX_ERROR
;

1237 
v
->
Àn
 = 
∑th
.len - 1;

1238 
v
->
vÆid
 = 1;

1239 
v
->
no_ˇchóbÀ
 = 0;

1240 
v
->
nŸ_found
 = 0;

1241 
v
->
d©a
 = 
∑th
.data;

1243  
NGX_OK
;

1244 
	}
}

1247 
ngx_öt_t


1248 
	$ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

1249 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1251 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1253 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1255 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1256 
v
->
vÆid
 = 1;

1257 
v
->
no_ˇchóbÀ
 = 0;

1258 
v
->
nŸ_found
 = 0;

1259 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1261  
NGX_OK
;

1262 
	}
}

1265 
ngx_öt_t


1266 
	$ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

1267 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1269 i‡(
r
->
maö
->
mëhod_«me
.
d©a
) {

1270 
v
->
Àn
 = 
r
->
maö
->
mëhod_«me
.len;

1271 
v
->
vÆid
 = 1;

1272 
v
->
no_ˇchóbÀ
 = 0;

1273 
v
->
nŸ_found
 = 0;

1274 
v
->
d©a
 = 
r
->
maö
->
mëhod_«me
.data;

1277 
v
->
nŸ_found
 = 1;

1280  
NGX_OK
;

1281 
	}
}

1284 
ngx_öt_t


1285 
	$ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

1286 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1288 
ngx_öt_t
 
rc
;

1290 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

1292 i‡(
rc
 =
NGX_DECLINED
) {

1293 
v
->
nŸ_found
 = 1;

1294  
NGX_OK
;

1297 i‡(
rc
 =
NGX_ERROR
) {

1298  
NGX_ERROR
;

1301 
v
->
Àn
 = 
r
->
hódîs_ö
.
u£r
.len;

1302 
v
->
vÆid
 = 1;

1303 
v
->
no_ˇchóbÀ
 = 0;

1304 
v
->
nŸ_found
 = 0;

1305 
v
->
d©a
 = 
r
->
hódîs_ö
.
u£r
.data;

1307  
NGX_OK
;

1308 
	}
}

1311 
ngx_öt_t


1312 
	$ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1313 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1315 
off_t
 
£¡
;

1316 
u_ch¨
 *
p
;

1318 
£¡
 = 
r
->
c⁄√˘i⁄
->£¡ -Ñ->
hódî_size
;

1320 i‡(
£¡
 < 0) {

1321 
£¡
 = 0;

1324 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1325 i‡(
p
 =
NULL
) {

1326  
NGX_ERROR
;

1329 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
£¡
) -Ö;

1330 
v
->
vÆid
 = 1;

1331 
v
->
no_ˇchóbÀ
 = 0;

1332 
v
->
nŸ_found
 = 0;

1333 
v
->
d©a
 = 
p
;

1335  
NGX_OK
;

1336 
	}
}

1339 
ngx_öt_t


1340 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

1341 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1343 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1344 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.len;

1345 
v
->
vÆid
 = 1;

1346 
v
->
no_ˇchóbÀ
 = 0;

1347 
v
->
nŸ_found
 = 0;

1348 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.data;

1351 
v
->
nŸ_found
 = 1;

1354  
NGX_OK
;

1355 
	}
}

1358 
ngx_öt_t


1359 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1360 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1362 
u_ch¨
 *
p
;

1364 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

1365 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.len;

1366 
v
->
vÆid
 = 1;

1367 
v
->
no_ˇchóbÀ
 = 0;

1368 
v
->
nŸ_found
 = 0;

1369 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.data;

1371  
NGX_OK
;

1374 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0) {

1375 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1376 i‡(
p
 =
NULL
) {

1377  
NGX_ERROR
;

1380 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
) -Ö;

1381 
v
->
vÆid
 = 1;

1382 
v
->
no_ˇchóbÀ
 = 0;

1383 
v
->
nŸ_found
 = 0;

1384 
v
->
d©a
 = 
p
;

1386  
NGX_OK
;

1389 
v
->
nŸ_found
 = 1;

1391  
NGX_OK
;

1392 
	}
}

1395 
ngx_öt_t


1396 
	$ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1397 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1399 
ngx_°r_t
 
«me
;

1401 i‡(
r
->
hódîs_out
.
loˇti⁄
) {

1402 
v
->
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

1403 
v
->
vÆid
 = 1;

1404 
v
->
no_ˇchóbÀ
 = 0;

1405 
v
->
nŸ_found
 = 0;

1406 
v
->
d©a
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.data;

1408  
NGX_OK
;

1411 
	`ngx_°r_£t
(&
«me
, "sent_http_location");

1413  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, &
«me
,

1414 &
r
->
hódîs_out
.
hódîs
.
∑π
,

1416 
	}
}

1419 
ngx_öt_t


1420 
	$ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

1421 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1423 
u_ch¨
 *
p
;

1425 i‡(
r
->
hódîs_out
.
œ°_modifõd
) {

1426 
v
->
Àn
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.len;

1427 
v
->
vÆid
 = 1;

1428 
v
->
no_ˇchóbÀ
 = 0;

1429 
v
->
nŸ_found
 = 0;

1430 
v
->
d©a
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.data;

1432  
NGX_OK
;

1435 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 >= 0) {

1436 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1438 i‡(
p
 =
NULL
) {

1439  
NGX_ERROR
;

1442 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
) -Ö;

1443 
v
->
vÆid
 = 1;

1444 
v
->
no_ˇchóbÀ
 = 0;

1445 
v
->
nŸ_found
 = 0;

1446 
v
->
d©a
 = 
p
;

1448  
NGX_OK
;

1451 
v
->
nŸ_found
 = 1;

1453  
NGX_OK
;

1454 
	}
}

1457 
ngx_öt_t


1458 
	$ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1459 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1461 
size_t
 
Àn
;

1462 *
p
;

1464 i‡(
r
->
kì∑live
) {

1465 
Àn
 = ("keep-alive") - 1;

1466 
p
 = "keep-alive";

1469 
Àn
 = ("close") - 1;

1470 
p
 = "close";

1473 
v
->
Àn
 =Üen;

1474 
v
->
vÆid
 = 1;

1475 
v
->
no_ˇchóbÀ
 = 0;

1476 
v
->
nŸ_found
 = 0;

1477 
v
->
d©a
 = (
u_ch¨
 *Ë
p
;

1479  
NGX_OK
;

1480 
	}
}

1483 
ngx_öt_t


1484 
	$ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

1485 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1487 
u_ch¨
 *
p
;

1488 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1490 i‡(
r
->
kì∑live
) {

1491 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1493 i‡(
˛cf
->
kì∑live_hódî
) {

1495 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("timeout="Ë- 1 + 
NGX_TIME_T_LEN
);

1496 i‡(
p
 =
NULL
) {

1497  
NGX_ERROR
;

1500 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "timeout=%T", 
˛cf
->
kì∑live_hódî
) -Ö;

1501 
v
->
vÆid
 = 1;

1502 
v
->
no_ˇchóbÀ
 = 0;

1503 
v
->
nŸ_found
 = 0;

1504 
v
->
d©a
 = 
p
;

1506  
NGX_OK
;

1510 
v
->
nŸ_found
 = 1;

1512  
NGX_OK
;

1513 
	}
}

1516 
ngx_öt_t


1517 
	$ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

1518 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1520 i‡(
r
->
chunked
) {

1521 
v
->
Àn
 = ("chunked") - 1;

1522 
v
->
vÆid
 = 1;

1523 
v
->
no_ˇchóbÀ
 = 0;

1524 
v
->
nŸ_found
 = 0;

1525 
v
->
d©a
 = (
u_ch¨
 *) "chunked";

1528 
v
->
nŸ_found
 = 1;

1531  
NGX_OK
;

1532 
	}
}

1535 
ngx_öt_t


1536 
	$ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

1537 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1539 i‡(
r
->
ªque°_com∂ëe
) {

1540 
v
->
Àn
 = 2;

1541 
v
->
vÆid
 = 1;

1542 
v
->
no_ˇchóbÀ
 = 0;

1543 
v
->
nŸ_found
 = 0;

1544 
v
->
d©a
 = (
u_ch¨
 *) "OK";

1546  
NGX_OK
;

1549 
v
->
Àn
 = 0;

1550 
v
->
vÆid
 = 1;

1551 
v
->
no_ˇchóbÀ
 = 0;

1552 
v
->
nŸ_found
 = 0;

1553 
v
->
d©a
 = (
u_ch¨
 *) "";

1555  
NGX_OK
;

1556 
	}
}

1559 
ngx_öt_t


1560 
	$ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

1561 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1563 
u_ch¨
 *
p
;

1564 
size_t
 
Àn
;

1565 
ngx_buf_t
 *
buf
, *
√xt
;

1566 
ngx_chaö_t
 *
˛
;

1568 i‡(
r
->
ªque°_body
 =
NULL


1569 || 
r
->
ªque°_body
->
bufs
 =
NULL


1570 || 
r
->
ªque°_body
->
ãmp_fûe
)

1572 
v
->
nŸ_found
 = 1;

1574  
NGX_OK
;

1577 
˛
 = 
r
->
ªque°_body
->
bufs
;

1578 
buf
 = 
˛
->buf;

1580 i‡(
˛
->
√xt
 =
NULL
) {

1581 
v
->
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1582 
v
->
vÆid
 = 1;

1583 
v
->
no_ˇchóbÀ
 = 0;

1584 
v
->
nŸ_found
 = 0;

1585 
v
->
d©a
 = 
buf
->
pos
;

1587  
NGX_OK
;

1590 
√xt
 = 
˛
->√xt->
buf
;

1591 
Àn
 = (
buf
->
œ°
 - buf->
pos
Ë+ (
√xt
->last -Çext->pos);

1593 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1594 i‡(
p
 =
NULL
) {

1595  
NGX_ERROR
;

1598 
v
->
d©a
 = 
p
;

1600 
p
 = 
	`ngx_˝ymem
’, 
buf
->
pos
, buf->
œ°
 - buf->pos);

1601 
	`ngx_mem˝y
(
p
, 
√xt
->
pos
,Çext->
œ°
 -Çext->pos);

1603 
v
->
Àn
 =Üen;

1604 
v
->
vÆid
 = 1;

1605 
v
->
no_ˇchóbÀ
 = 0;

1606 
v
->
nŸ_found
 = 0;

1608  
NGX_OK
;

1609 
	}
}

1612 
ngx_öt_t


1613 
	$ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

1614 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1616 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

1617 
v
->
nŸ_found
 = 1;

1619  
NGX_OK
;

1622 
v
->
Àn
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.len;

1623 
v
->
vÆid
 = 1;

1624 
v
->
no_ˇchóbÀ
 = 0;

1625 
v
->
nŸ_found
 = 0;

1626 
v
->
d©a
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.data;

1628  
NGX_OK
;

1629 
	}
}

1632 
ngx_öt_t


1633 
	$ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

1634 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1636 
v
->
Àn
 = (
NGINX_VERSION
) - 1;

1637 
v
->
vÆid
 = 1;

1638 
v
->
no_ˇchóbÀ
 = 0;

1639 
v
->
nŸ_found
 = 0;

1640 
v
->
d©a
 = (
u_ch¨
 *Ë
NGINX_VERSION
;

1642  
NGX_OK
;

1643 
	}
}

1646 
ngx_öt_t


1647 
	$ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

1648 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1650 
v
->
Àn
 = 
ngx_cy˛e
->
ho°«me
.len;

1651 
v
->
vÆid
 = 1;

1652 
v
->
no_ˇchóbÀ
 = 0;

1653 
v
->
nŸ_found
 = 0;

1654 
v
->
d©a
 = 
ngx_cy˛e
->
ho°«me
.data;

1656  
NGX_OK
;

1657 
	}
}

1660 
ngx_öt_t


1661 
	$ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

1662 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1664 
u_ch¨
 *
p
;

1666 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

1667 i‡(
p
 =
NULL
) {

1668  
NGX_ERROR
;

1671 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%P", 
ngx_pid
) -Ö;

1672 
v
->
vÆid
 = 1;

1673 
v
->
no_ˇchóbÀ
 = 0;

1674 
v
->
nŸ_found
 = 0;

1675 
v
->
d©a
 = 
p
;

1677  
NGX_OK
;

1678 
	}
}

1682 
	$ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
, 
ngx_°r_t
 *
m©ch
)

1684 *
vÆue
;

1685 
u_ch¨
 *
low
;

1686 
size_t
 
Àn
;

1687 
ngx_uöt_t
 
key
;

1689 
Àn
 = 
m©ch
->len;

1691 i‡(
Àn
) {

1692 
low
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1693 i‡(
low
 =
NULL
) {

1694  
NULL
;

1698 
low
 = 
NULL
;

1701 
key
 = 
	`ngx_hash_°æow
(
low
, 
m©ch
->
d©a
, 
Àn
);

1703 
vÆue
 = 
	`ngx_hash_föd_comböed
(&
m≠
->
hash
, 
key
, 
low
, 
Àn
);

1704 i‡(
vÆue
) {

1705  
vÆue
;

1708 #i‡(
NGX_PCRE
)

1710 i‡(
Àn
 && 
m≠
->
ƒegex
) {

1711 
ngx_öt_t
 
n
;

1712 
ngx_uöt_t
 
i
;

1713 
ngx_hâp_m≠_ªgex_t
 *
ªg
;

1715 
ªg
 = 
m≠
->
ªgex
;

1717 
i
 = 0; i < 
m≠
->
ƒegex
; i++) {

1719 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
ªg
[
i
].
ªgex
, 
m©ch
);

1721 i‡(
n
 =
NGX_OK
) {

1722  
ªg
[
i
].
vÆue
;

1725 i‡(
n
 =
NGX_DECLINED
) {

1731  
NULL
;

1737  
NULL
;

1738 
	}
}

1741 #i‡(
NGX_PCRE
)

1743 
ngx_öt_t


1744 
	$ngx_hâp_v¨übÀ_nŸ_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1745 
uöçå_t
 
d©a
)

1747 
v
->
nŸ_found
 = 1;

1748  
NGX_OK
;

1749 
	}
}

1752 
ngx_hâp_ªgex_t
 *

1753 
	$ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_ªgex_compûe_t
 *
rc
)

1755 
u_ch¨
 *
p
;

1756 
size_t
 
size
;

1757 
ngx_°r_t
 
«me
;

1758 
ngx_uöt_t
 
i
, 
n
;

1759 
ngx_hâp_v¨übÀ_t
 *
v
;

1760 
ngx_hâp_ªgex_t
 *
ª
;

1761 
ngx_hâp_ªgex_v¨übÀ_t
 *
rv
;

1762 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1764 
rc
->
poﬁ
 = 
cf
->pool;

1766 i‡(
	`ngx_ªgex_compûe
(
rc
Ë!
NGX_OK
) {

1767 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
->
îr
);

1768  
NULL
;

1771 
ª
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªgex_t
));

1772 i‡(
ª
 =
NULL
) {

1773  
NULL
;

1776 
ª
->
ªgex
 = 
rc
->regex;

1777 
ª
->
nˇ±uªs
 = 
rc
->
ˇ±uªs
;

1779 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1780 
cmcf
->
nˇ±uªs
 = 
	`ngx_max
(cmcf->nˇ±uªs, 
ª
->ncaptures);

1782 
n
 = (
ngx_uöt_t
Ë
rc
->
«med_ˇ±uªs
;

1784 i‡(
n
 == 0) {

1785  
ª
;

1788 
rv
 = 
	`ngx_∑Œoc
(
rc
->
poﬁ
, 
n
 * (
ngx_hâp_ªgex_v¨übÀ_t
));

1789 i‡(
rv
 =
NULL
) {

1790  
NULL
;

1793 
ª
->
v¨übÀs
 = 
rv
;

1794 
ª
->
nv¨übÀs
 = 
n
;

1795 
ª
->
«me
 = 
rc
->
∑âîn
;

1797 
size
 = 
rc
->
«me_size
;

1798 
p
 = 
rc
->
«mes
;

1800 
i
 = 0; i < 
n
; i++) {

1801 
rv
[
i
].
ˇ±uª
 = 2 * ((
p
[0] << 8) +Ö[1]);

1803 
«me
.
d©a
 = &
p
[2];

1804 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

1806 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

1807 i‡(
v
 =
NULL
) {

1808  
NULL
;

1811 
rv
[
i
].
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

1812 i‡(
rv
[
i
].
ödex
 =
NGX_ERROR
) {

1813  
NULL
;

1816 
v
->
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_nŸ_found
;

1818 
p
 +
size
;

1821  
ª
;

1822 
	}
}

1825 
ngx_öt_t


1826 
	$ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
, 
ngx_°r_t
 *
s
)

1828 
ngx_öt_t
 
rc
, 
ödex
;

1829 
ngx_uöt_t
 
i
, 
n
, 
Àn
;

1830 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1831 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1833 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1835 i‡(
ª
->
nˇ±uªs
) {

1836 
Àn
 = 
cmcf
->
nˇ±uªs
;

1838 i‡(
r
->
ˇ±uªs
 =
NULL
) {

1839 
r
->
ˇ±uªs
 = 
	`ngx_∑Œoc
‘->
poﬁ
, 
Àn
 * ());

1840 i‡(
r
->
ˇ±uªs
 =
NULL
) {

1841  
NGX_ERROR
;

1846 
Àn
 = 0;

1849 
rc
 = 
	`ngx_ªgex_exec
(
ª
->
ªgex
, 
s
, 
r
->
ˇ±uªs
, 
Àn
);

1851 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

1852  
NGX_DECLINED
;

1855 i‡(
rc
 < 0) {

1856 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1857 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

1858 
rc
, 
s
, &
ª
->
«me
);

1859  
NGX_ERROR
;

1862 
i
 = 0; i < 
ª
->
nv¨übÀs
; i++) {

1864 
n
 = 
ª
->
v¨übÀs
[
i
].
ˇ±uª
;

1865 
ödex
 = 
ª
->
v¨übÀs
[
i
].index;

1866 
vv
 = &
r
->
v¨übÀs
[
ödex
];

1868 
vv
->
Àn
 = 
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

1869 
vv
->
vÆid
 = 1;

1870 
vv
->
no_ˇchóbÀ
 = 0;

1871 
vv
->
nŸ_found
 = 0;

1872 
vv
->
d©a
 = &
s
->d©a[
r
->
ˇ±uªs
[
n
]];

1874 #i‡(
NGX_DEBUG
)

1876 
ngx_hâp_v¨übÀ_t
 *
v
;

1878 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1880 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1882 &
v
[
ödex
].
«me
, 
vv
->
Àn
, vv->
d©a
);

1887 
r
->
nˇ±uªs
 = 
rc
 * 2;

1888 
r
->
ˇ±uªs_d©a
 = 
s
->
d©a
;

1890  
NGX_OK
;

1891 
	}
}

1896 
ngx_öt_t


1897 
	$ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
)

1899 
ngx_öt_t
 
rc
;

1900 
ngx_hâp_v¨übÀ_t
 *
v
;

1901 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1903 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1905 
cmcf
->
v¨übÀs_keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
,

1906 (
ngx_hash_keys_¨øys_t
));

1907 i‡(
cmcf
->
v¨übÀs_keys
 =
NULL
) {

1908  
NGX_ERROR
;

1911 
cmcf
->
v¨übÀs_keys
->
poﬁ
 = 
cf
->pool;

1912 
cmcf
->
v¨übÀs_keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

1914 i‡(
	`ngx_hash_keys_¨øy_öô
(
cmcf
->
v¨übÀs_keys
, 
NGX_HASH_SMALL
)

1915 !
NGX_OK
)

1917  
NGX_ERROR
;

1920 
v
 = 
ngx_hâp_c‹e_v¨übÀs
; v->
«me
.
Àn
; v++) {

1921 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v,

1922 
NGX_HASH_READONLY_KEY
);

1924 i‡(
rc
 =
NGX_OK
) {

1928 i‡(
rc
 =
NGX_BUSY
) {

1929 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1930 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", &
v
->
«me
);

1933  
NGX_ERROR
;

1936  
NGX_OK
;

1937 
	}
}

1940 
ngx_öt_t


1941 
	$ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
)

1943 
ngx_uöt_t
 
i
, 
n
;

1944 
ngx_hash_key_t
 *
key
;

1945 
ngx_hash_öô_t
 
hash
;

1946 
ngx_hâp_v¨übÀ_t
 *
v
, *
av
;

1947 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1951 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1953 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1954 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

1956 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

1958 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

1960 
av
 = 
key
[
n
].
vÆue
;

1962 i‡(
av
->
gë_h™dÀr


1963 && 
v
[
i
].
«me
.
Àn
 =
key
[
n
].key.len

1964 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
key
[
n
].key.d©a, v[i].«me.
Àn
)

1967 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

1968 
v
[
i
].
d©a
 = 
av
->data;

1970 
av
->
Êags
 |
NGX_HTTP_VAR_INDEXED
;

1971 
v
[
i
].
Êags
 = 
av
->flags;

1973 
av
->
ödex
 = 
i
;

1975 
√xt
;

1979 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "http_", 5) == 0) {

1980 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_ö
;

1981 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

1986 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "sent_http_", 10) == 0) {

1987 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_out
;

1988 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

1993 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "upstream_http_", 14) == 0) {

1994 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_up°ªam_hódî_v¨übÀ
;

1995 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

1996 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2001 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "cookie_", 7) == 0) {

2002 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_cookõ
;

2003 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2008 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "arg_", 4) == 0) {

2009 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_¨gumít
;

2010 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2011 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2016 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2017 "unknow¿\"%V\" v¨übÀ", &
v
[
i
].
«me
);

2019  
NGX_ERROR
;

2021 
√xt
:

2026 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2027 
av
 = 
key
[
n
].
vÆue
;

2029 i‡(
av
->
Êags
 & 
NGX_HTTP_VAR_NOHASH
) {

2030 
key
[
n
].key.
d©a
 = 
NULL
;

2035 
hash
.hash = &
cmcf
->
v¨übÀs_hash
;

2036 
hash
.
key
 = 
ngx_hash_key
;

2037 
hash
.
max_size
 = 
cmcf
->
v¨übÀs_hash_max_size
;

2038 
hash
.
buckë_size
 = 
cmcf
->
v¨übÀs_hash_buckë_size
;

2039 
hash
.
«me
 = "variables_hash";

2040 
hash
.
poﬁ
 = 
cf
->pool;

2041 
hash
.
ãmp_poﬁ
 = 
NULL
;

2043 i‡(
	`ngx_hash_öô
(&
hash
, 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
,

2044 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
)

2045 !
NGX_OK
)

2047  
NGX_ERROR
;

2050 
cmcf
->
v¨übÀs_keys
 = 
NULL
;

2052  
NGX_OK
;

2053 
	}
}

	@src/http/ngx_http_variables.h

8 #i‚de‡
_NGX_HTTP_VARIABLES_H_INCLUDED_


9 
	#_NGX_HTTP_VARIABLES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
ngx_v¨übÀ_vÆue_t
 
	tngx_hâp_v¨übÀ_vÆue_t
;

19 
	#ngx_hâp_v¨übÀ
(
v
Ë{ (vË- 1, 1, 0, 0, 0, (
u_ch¨
 *Ëv }

	)

21 
ngx_hâp_v¨übÀ_s
 
	tngx_hâp_v¨übÀ_t
;

23 (*
	tngx_hâp_£t_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

24 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

25 
	$ngx_öt_t
 (*
	tngx_hâp_gë_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

26 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

29 
	#NGX_HTTP_VAR_CHANGEABLE
 1

	)

30 
	#NGX_HTTP_VAR_NOCACHEABLE
 2

	)

31 
	#NGX_HTTP_VAR_INDEXED
 4

	)

32 
	#NGX_HTTP_VAR_NOHASH
 8

	)

35 
	sngx_hâp_v¨übÀ_s
 {

36 
ngx_°r_t
 
«me
;

37 
ngx_hâp_£t_v¨übÀ_±
 
£t_h™dÀr
;

38 
ngx_hâp_gë_v¨übÀ_±
 
gë_h™dÀr
;

39 
uöçå_t
 
d©a
;

40 
ngx_uöt_t
 
Êags
;

41 
ngx_uöt_t
 
ödex
;

45 
ngx_hâp_v¨übÀ_t
 *
	`ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

46 
ngx_uöt_t
 
Êags
);

47 
ngx_öt_t
 
	`ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_uöt_t
 
ödex
);

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_uöt_t
 
ödex
);

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

56 
ngx_öt_t
 
	`ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

57 
ngx_°r_t
 *
v¨
, 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
);

60 
	#ngx_hâp_˛ór_v¨übÀ
(
r
, 
ödex
Ër->
v¨übÀs0
[ödex].
ãxt
.
d©a
 = 
NULL
;

	)

63 #i‡(
NGX_PCRE
)

66 
ngx_uöt_t
 
ˇ±uª
;

67 
ngx_öt_t
 
ödex
;

68 } 
	tngx_hâp_ªgex_v¨übÀ_t
;

72 
ngx_ªgex_t
 *
ªgex
;

73 
ngx_uöt_t
 
nˇ±uªs
;

74 
ngx_hâp_ªgex_v¨übÀ_t
 *
v¨übÀs
;

75 
ngx_uöt_t
 
nv¨übÀs
;

76 
ngx_°r_t
 
«me
;

77 } 
	tngx_hâp_ªgex_t
;

81 
ngx_hâp_ªgex_t
 *
ªgex
;

82 *
vÆue
;

83 } 
	tngx_hâp_m≠_ªgex_t
;

86 
ngx_hâp_ªgex_t
 *
	`ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
,

87 
ngx_ªgex_compûe_t
 *
rc
);

88 
ngx_öt_t
 
	`ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
,

89 
ngx_°r_t
 *
s
);

95 
ngx_hash_comböed_t
 
hash
;

96 #i‡(
NGX_PCRE
)

97 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

98 
ngx_uöt_t
 
ƒegex
;

100 } 
	tngx_hâp_m≠_t
;

103 *
	`ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
,

104 
ngx_°r_t
 *
m©ch
);

107 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
);

111 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

112 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_åue_vÆue
;

	@src/http/ngx_http_write_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_hâp_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ_˘x
 = {

17 
NULL
,

18 
ngx_hâp_wrôe_fûãr_öô
,

20 
NULL
,

21 
NULL
,

23 
NULL
,

24 
NULL
,

26 
NULL
,

27 
NULL
,

31 
ngx_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ
 = {

32 
NGX_MODULE_V1
,

33 &
ngx_hâp_wrôe_fûãr_moduÀ_˘x
,

34 
NULL
,

35 
NGX_HTTP_MODULE
,

36 
NULL
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NGX_MODULE_V1_PADDING


47 
ngx_öt_t


48 
	$ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

50 
off_t
 
size
, 
£¡
, 
n£¡
, 
limô
;

51 
ngx_uöt_t
 
œ°
, 
Êush
;

52 
ngx_m£c_t
 
dñay
;

53 
ngx_chaö_t
 *
˛
, *
 
, **
Œ
, *
chaö
;

54 
ngx_c⁄√˘i⁄_t
 *
c
;

55 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

57 
c
 = 
r
->
c⁄√˘i⁄
;

59 i‡(
c
->
îr‹
) {

60  
NGX_ERROR
;

63 
size
 = 0;

64 
Êush
 = 0;

65 
œ°
 = 0;

66 
Œ
 = &
r
->
out
;

70 
˛
 = 
r
->
out
; cl; c»˛->
√xt
) {

71 
Œ
 = &
˛
->
√xt
;

73 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

76 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

77 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

78 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

79 
˛
->
buf
->
fûe_pos
,

80 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

83 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

84 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

87 
˛
->
buf
->
ãmp‹¨y
,

88 
˛
->
buf
->
ªcy˛ed
,

89 
˛
->
buf
->
ö_fûe
,

90 
˛
->
buf
->
°¨t
,

91 
˛
->
buf
->
pos
,

92 
˛
->
buf
->
œ°
,

93 
˛
->
buf
->
fûe
,

94 
˛
->
buf
->
fûe_pos
,

95 
˛
->
buf
->
fûe_œ°
);

97 
	`ngx_debug_poöt
();

98  
NGX_ERROR
;

102 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

104 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

105 
Êush
 = 1;

108 i‡(
˛
->
buf
->
œ°_buf
) {

109 
œ°
 = 1;

115 
 
 = 
ö
;Ün;Ü¿ ->
√xt
) {

116 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

117 i‡(
˛
 =
NULL
) {

118  
NGX_ERROR
;

121 
˛
->
buf
 = 
 
->buf;

122 *
Œ
 = 
˛
;

123 
Œ
 = &
˛
->
√xt
;

125 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

128 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

129 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

130 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

131 
˛
->
buf
->
fûe_pos
,

132 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

135 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

139 
˛
->
buf
->
ãmp‹¨y
,

140 
˛
->
buf
->
ªcy˛ed
,

141 
˛
->
buf
->
ö_fûe
,

142 
˛
->
buf
->
°¨t
,

143 
˛
->
buf
->
pos
,

144 
˛
->
buf
->
œ°
,

145 
˛
->
buf
->
fûe
,

146 
˛
->
buf
->
fûe_pos
,

147 
˛
->
buf
->
fûe_œ°
);

149 
	`ngx_debug_poöt
();

150  
NGX_ERROR
;

154 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

156 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

157 
Êush
 = 1;

160 i‡(
˛
->
buf
->
œ°_buf
) {

161 
œ°
 = 1;

165 *
Œ
 = 
NULL
;

167 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

168 "hâ∞wrôêfûãr:Ü:%d f:%d s:%O", 
œ°
, 
Êush
, 
size
);

170 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

178 i‡(!
œ°
 && !
Êush
 && 
ö
 && 
size
 < (
off_t
Ë
˛cf
->
po°p⁄e_ouçut
) {

179  
NGX_OK
;

182 i‡(
c
->
wrôe
->
dñayed
) {

183 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

184  
NGX_AGAIN
;

187 i‡(
size
 =0 && !(
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
)) {

188 i‡(
œ°
) {

189 
r
->
out
 = 
NULL
;

190 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

192  
NGX_OK
;

195 i‡(
Êush
) {

197 
r
->
out
 =Ñ->out->
√xt
;

198 } 
r
->
out
);

200 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

202  
NGX_OK
;

205 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

208 
	`ngx_debug_poöt
();

210  
NGX_ERROR
;

213 i‡(
r
->
limô_øã
) {

214 
limô
 = 
r
->
limô_øã
 * (
	`ngx_time
(Ë-Ñ->
°¨t_£c
 + 1)

215 - (
c
->
£¡
 - 
˛cf
->
limô_øã_a·î
);

217 i‡(
limô
 <= 0) {

218 
c
->
wrôe
->
dñayed
 = 1;

219 
	`ngx_add_timî
(
c
->
wrôe
,

220 (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
r
->
limô_øã
 + 1));

222 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

224  
NGX_AGAIN
;

227 i‡(
˛cf
->
£ndfûe_max_chunk


228 && (
off_t
Ë
˛cf
->
£ndfûe_max_chunk
 < 
limô
)

230 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

234 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

237 
£¡
 = 
c
->sent;

239 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

240 "hâ∞wrôêfûã∏limô %O", 
limô
);

242 
chaö
 = 
c
->
	`£nd_chaö
(c, 
r
->
out
, 
limô
);

244 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

245 "hâ∞wrôêfûã∏%p", 
chaö
);

247 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

248 
c
->
îr‹
 = 1;

249  
NGX_ERROR
;

252 i‡(
r
->
limô_øã
) {

254 
n£¡
 = 
c
->
£¡
;

256 i‡(
˛cf
->
limô_øã_a·î
) {

258 
£¡
 -
˛cf
->
limô_øã_a·î
;

259 i‡(
£¡
 < 0) {

260 
£¡
 = 0;

263 
n£¡
 -
˛cf
->
limô_øã_a·î
;

264 i‡(
n£¡
 < 0) {

265 
n£¡
 = 0;

269 
dñay
 = (
ngx_m£c_t
Ë((
n£¡
 - 
£¡
Ë* 1000 / 
r
->
limô_øã
);

271 i‡(
dñay
 > 0) {

272 
limô
 = 0;

273 
c
->
wrôe
->
dñayed
 = 1;

274 
	`ngx_add_timî
(
c
->
wrôe
, 
dñay
);

278 i‡(
limô


279 && 
c
->
wrôe
->
ªady


280 && 
c
->
£¡
 - síà>
limô
 - (
off_t
Ë(2 * 
ngx_∑gesize
))

282 
c
->
wrôe
->
dñayed
 = 1;

283 
	`ngx_add_timî
(
c
->
wrôe
, 1);

286 
˛
 = 
r
->
out
; c»&& c»!
chaö
; ) {

287 
 
 = 
˛
;

288 
˛
 = cl->
√xt
;

289 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

292 
r
->
out
 = 
chaö
;

294 i‡(
chaö
) {

295 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

296  
NGX_AGAIN
;

299 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

301 i‡((
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
Ë&& 
r
->
po°p⁄ed
 =
NULL
) {

302  
NGX_AGAIN
;

305  
NGX_OK
;

306 
	}
}

309 
ngx_öt_t


310 
	$ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

312 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_wrôe_fûãr
;

314  
NGX_OK
;

315 
	}
}

	@src/mail/ngx_mail.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_öt_t
 
ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

16 
ngx_maû_li°í_t
 *
li°í
);

17 *
ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
);

18 
ngx_öt_t
 
ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

19 
ngx_maû_c⁄f_addr_t
 *
addr
);

20 #i‡(
NGX_HAVE_INET6
)

21 
ngx_öt_t
 
ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

22 
ngx_maû_c⁄f_addr_t
 *
addr
);

24 
ngx_öt_t
 
ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

27 
ngx_uöt_t
 
	gngx_maû_max_moduÀ
;

30 
ngx_comm™d_t
 
	gngx_maû_comm™ds
[] = {

32 { 
ngx_°rög
("mail"),

33 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

34 
ngx_maû_block
,

37 
NULL
 },

39 { 
ngx_°rög
("imap"),

40 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

41 
ngx_maû_block
,

44 
NULL
 },

46 
ngx_nuŒ_comm™d


50 
ngx_c‹e_moduÀ_t
 
	gngx_maû_moduÀ_˘x
 = {

51 
ngx_°rög
("mail"),

52 
NULL
,

53 
NULL


57 
ngx_moduÀ_t
 
	gngx_maû_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_maû_moduÀ_˘x
,

60 
ngx_maû_comm™ds
,

61 
NGX_CORE_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


74 
	$ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

76 *
rv
;

77 
ngx_uöt_t
 
i
, 
m
, 
mi
, 
s
;

78 
ngx_c⁄f_t
 
pcf
;

79 
ngx_¨øy_t
 
p‹ts
;

80 
ngx_maû_li°í_t
 *
li°í
;

81 
ngx_maû_moduÀ_t
 *
moduÀ
;

82 
ngx_maû_c⁄f_˘x_t
 *
˘x
;

83 
ngx_maû_c‹e_§v_c⁄f_t
 **
cscÂ
;

84 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

86 i‡(
cmd
->
«me
.
d©a
[0] == 'i') {

87 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

94 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

95 i‡(
˘x
 =
NULL
) {

96  
NGX_CONF_ERROR
;

99 *(
ngx_maû_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

103 
ngx_maû_max_moduÀ
 = 0;

104 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

105 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

109 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_maû_max_moduÀ
++;

115 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

116 (*Ë* 
ngx_maû_max_moduÀ
);

117 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

118  
NGX_CONF_ERROR
;

127 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

128 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

129  
NGX_CONF_ERROR
;

138 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

139 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

143 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

144 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

146 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

147 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

148 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

149  
NGX_CONF_ERROR
;

153 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

154 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

155 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

156  
NGX_CONF_ERROR
;

164 
pcf
 = *
cf
;

165 
cf
->
˘x
 = ctx;

167 
cf
->
moduÀ_ty≥
 = 
NGX_MAIL_MODULE
;

168 
cf
->
cmd_ty≥
 = 
NGX_MAIL_MAIN_CONF
;

169 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

171 i‡(
rv
 !
NGX_CONF_OK
) {

172 *
cf
 = 
pcf
;

173  
rv
;

179 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

180 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

182 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

183 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

187 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

188 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

192 
cf
->
˘x
 = ctx;

194 i‡(
moduÀ
->
öô_maö_c⁄f
) {

195 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

196 i‡(
rv
 !
NGX_CONF_OK
) {

197 *
cf
 = 
pcf
;

198  
rv
;

202 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

206 
cf
->
˘x
 = 
cscÂ
[
s
]->ctx;

208 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

209 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
,

210 
˘x
->
§v_c⁄f
[
mi
],

211 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
mi
]);

212 i‡(
rv
 !
NGX_CONF_OK
) {

213 *
cf
 = 
pcf
;

214  
rv
;

220 *
cf
 = 
pcf
;

223 i‡(
	`ngx_¨øy_öô
(&
p‹ts
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_maû_c⁄f_p‹t_t
))

224 !
NGX_OK
)

226  
NGX_CONF_ERROR
;

229 
li°í
 = 
cmcf
->li°í.
ñts
;

231 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

232 i‡(
	`ngx_maû_add_p‹ts
(
cf
, &
p‹ts
, &
li°í
[
i
]Ë!
NGX_OK
) {

233  
NGX_CONF_ERROR
;

237  
	`ngx_maû_›timize_£rvîs
(
cf
, &
p‹ts
);

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

243 
ngx_maû_li°í_t
 *
li°í
)

245 
ö_p‹t_t
 
p
;

246 
ngx_uöt_t
 
i
;

247 
sockaddr
 *
ß
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

250 
ngx_maû_c⁄f_addr_t
 *
addr
;

251 #i‡(
NGX_HAVE_INET6
)

252 
sockaddr_ö6
 *
sö6
;

255 
ß
 = (
sockaddr
 *Ë&
li°í
->sockaddr;

257 
ß
->
ß_Ámûy
) {

259 #i‡(
NGX_HAVE_INET6
)

260 
AF_INET6
:

261 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

262 
p
 = 
sö6
->
sö6_p‹t
;

267 
sö
 = (
sockaddr_ö
 *Ë
ß
;

268 
p
 = 
sö
->
sö_p‹t
;

272 
p‹t
 = 
p‹ts
->
ñts
;

273 
i
 = 0; i < 
p‹ts
->
√…s
; i++) {

274 i‡(
p
 =
p‹t
[
i
].p‹à&& 
ß
->
ß_Ámûy
 =p‹t[i].
Ámûy
) {

278 
p‹t
 = &p‹t[
i
];

279 
found
;

285 
p‹t
 = 
	`ngx_¨øy_push
(
p‹ts
);

286 i‡(
p‹t
 =
NULL
) {

287  
NGX_ERROR
;

290 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

291 
p‹t
->p‹à
p
;

293 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 2,

294 (
ngx_maû_c⁄f_addr_t
))

295 !
NGX_OK
)

297  
NGX_ERROR
;

300 
found
:

302 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

303 i‡(
addr
 =
NULL
) {

304  
NGX_ERROR
;

307 
addr
->
sockaddr
 = (sockadd∏*Ë&
li°í
->sockaddr;

308 
addr
->
sockÀn
 = 
li°í
->socklen;

309 
addr
->
˘x
 = 
li°í
->ctx;

310 
addr
->
böd
 = 
li°í
->bind;

311 
addr
->
wûdˇrd
 = 
li°í
->wildcard;

312 #i‡(
NGX_MAIL_SSL
)

313 
addr
->
s¶
 = 
li°í
->ssl;

315 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

316 
addr
->
ùv6⁄ly
 = 
li°í
->ipv6only;

319  
NGX_OK
;

320 
	}
}

324 
	$ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
)

326 
ngx_uöt_t
 
i
, 
p
, 
œ°
, 
böd_wûdˇrd
;

327 
ngx_li°íög_t
 *
ls
;

328 
ngx_maû_p‹t_t
 *
mp‹t
;

329 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

330 
ngx_maû_c⁄f_addr_t
 *
addr
;

332 
p‹t
 = 
p‹ts
->
ñts
;

333 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

335 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

336 (
ngx_maû_c⁄f_addr_t
), 
ngx_maû_cmp_c⁄f_addrs
);

338 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

339 
œ°
 = 
p‹t
[
p
].
addrs
.
√…s
;

346 i‡(
addr
[
œ°
 - 1].
wûdˇrd
) {

347 
addr
[
œ°
 - 1].
böd
 = 1;

348 
böd_wûdˇrd
 = 1;

351 
böd_wûdˇrd
 = 0;

354 
i
 = 0;

356 
i
 < 
œ°
) {

358 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
böd
) {

359 
i
++;

363 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, 
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
);

364 i‡(
ls
 =
NULL
) {

365  
NGX_CONF_ERROR
;

368 
ls
->
addr_¡›
 = 1;

369 
ls
->
h™dÀr
 = 
ngx_maû_öô_c⁄√˘i⁄
;

370 
ls
->
poﬁ_size
 = 256;

373 
ls
->
logp
 = &
cf
->
cy˛e
->
√w_log
;

374 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

375 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

377 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

378 
ls
->
ùv6⁄ly
 = 
addr
[
i
].ipv6only;

381 
mp‹t
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_maû_p‹t_t
));

382 i‡(
mp‹t
 =
NULL
) {

383  
NGX_CONF_ERROR
;

386 
ls
->
£rvîs
 = 
mp‹t
;

388 i‡(
i
 =
œ°
 - 1) {

389 
mp‹t
->
«ddrs
 = 
œ°
;

392 
mp‹t
->
«ddrs
 = 1;

393 
i
 = 0;

396 
ls
->
sockaddr
->
ß_Ámûy
) {

397 #i‡(
NGX_HAVE_INET6
)

398 
AF_INET6
:

399 i‡(
	`ngx_maû_add_addrs6
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

400  
NGX_CONF_ERROR
;

405 i‡(
	`ngx_maû_add_addrs
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

406  
NGX_CONF_ERROR
;

411 
addr
++;

412 
œ°
--;

416  
NGX_CONF_OK
;

417 
	}
}

420 
ngx_öt_t


421 
	$ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

422 
ngx_maû_c⁄f_addr_t
 *
addr
)

424 
u_ch¨
 *
p
;

425 
size_t
 
Àn
;

426 
ngx_uöt_t
 
i
;

427 
ngx_maû_ö_addr_t
 *
addrs
;

428 
sockaddr_ö
 *
sö
;

429 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

431 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

432 
mp‹t
->
«ddrs
 * (
ngx_maû_ö_addr_t
));

433 i‡(
mp‹t
->
addrs
 =
NULL
) {

434  
NGX_ERROR
;

437 
addrs
 = 
mp‹t
->addrs;

439 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

441 
sö
 = (
sockaddr_ö
 *Ë
addr
[
i
].
sockaddr
;

442 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

444 
addrs
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

445 #i‡(
NGX_MAIL_SSL
)

446 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

449 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

451 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

452 i‡(
p
 =
NULL
) {

453  
NGX_ERROR
;

456 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

458 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

459 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

462  
NGX_OK
;

463 
	}
}

466 #i‡(
NGX_HAVE_INET6
)

468 
ngx_öt_t


469 
	$ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

470 
ngx_maû_c⁄f_addr_t
 *
addr
)

472 
u_ch¨
 *
p
;

473 
size_t
 
Àn
;

474 
ngx_uöt_t
 
i
;

475 
ngx_maû_ö6_addr_t
 *
addrs6
;

476 
sockaddr_ö6
 *
sö6
;

477 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

479 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

480 
mp‹t
->
«ddrs
 * (
ngx_maû_ö6_addr_t
));

481 i‡(
mp‹t
->
addrs
 =
NULL
) {

482  
NGX_ERROR
;

485 
addrs6
 = 
mp‹t
->
addrs
;

487 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

489 
sö6
 = (
sockaddr_ö6
 *Ë
addr
[
i
].
sockaddr
;

490 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

492 
addrs6
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

493 #i‡(
NGX_MAIL_SSL
)

494 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

497 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

499 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

500 i‡(
p
 =
NULL
) {

501  
NGX_ERROR
;

504 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

506 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

507 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

510  
NGX_OK
;

511 
	}
}

516 
ngx_öt_t


517 
	$ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

519 
ngx_maû_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

521 
fú°
 = (
ngx_maû_c⁄f_addr_t
 *Ë
⁄e
;

522 
£c⁄d
 = (
ngx_maû_c⁄f_addr_t
 *Ë
two
;

524 i‡(
fú°
->
wûdˇrd
) {

529 i‡(
fú°
->
böd
 && !
£c⁄d
->bind) {

534 i‡(!
fú°
->
böd
 && 
£c⁄d
->bind) {

542 
	}
}

	@src/mail/ngx_mail.h

8 #i‚de‡
_NGX_MAIL_H_INCLUDED_


9 
	#_NGX_MAIL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

17 #i‡(
NGX_MAIL_SSL
)

18 
	~<ngx_maû_s¶_moduÀ.h
>

24 **
	mmaö_c⁄f
;

25 **
	m§v_c⁄f
;

26 } 
	tngx_maû_c⁄f_˘x_t
;

30 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

31 
sockÀn_t
 
	msockÀn
;

34 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

36 
	mböd
:1;

37 
	mwûdˇrd
:1;

38 #i‡(
NGX_MAIL_SSL
)

39 
	ms¶
:1;

41 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

42 
	mùv6⁄ly
:2;

44 } 
	tngx_maû_li°í_t
;

48 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

49 
ngx_°r_t
 
	maddr_ãxt
;

50 #i‡(
NGX_MAIL_SSL
)

51 
ngx_uöt_t
 
	ms¶
;

53 } 
	tngx_maû_addr_c⁄f_t
;

56 
ö_addr_t
 
	maddr
;

57 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

58 } 
	tngx_maû_ö_addr_t
;

61 #i‡(
NGX_HAVE_INET6
)

64 
ö6_addr
 
	maddr6
;

65 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

66 } 
	tngx_maû_ö6_addr_t
;

73 *
	maddrs
;

74 
ngx_uöt_t
 
	m«ddrs
;

75 } 
	tngx_maû_p‹t_t
;

79 
	mÁmûy
;

80 
ö_p‹t_t
 
	mp‹t
;

81 
ngx_¨øy_t
 
	maddrs
;

82 } 
	tngx_maû_c⁄f_p‹t_t
;

86 
sockaddr
 *
	msockaddr
;

87 
sockÀn_t
 
	msockÀn
;

89 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

91 
	mböd
:1;

92 
	mwûdˇrd
:1;

93 #i‡(
NGX_MAIL_SSL
)

94 
	ms¶
:1;

96 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

97 
	mùv6⁄ly
:2;

99 } 
	tngx_maû_c⁄f_addr_t
;

103 
ngx_¨øy_t
 
	m£rvîs
;

104 
ngx_¨øy_t
 
	mli°í
;

105 } 
	tngx_maû_c‹e_maö_c⁄f_t
;

108 
	#NGX_MAIL_POP3_PROTOCOL
 0

	)

109 
	#NGX_MAIL_IMAP_PROTOCOL
 1

	)

110 
	#NGX_MAIL_SMTP_PROTOCOL
 2

	)

113 
ngx_maû_¥Ÿocﬁ_s
 
	tngx_maû_¥Ÿocﬁ_t
;

117 
ngx_maû_¥Ÿocﬁ_t
 *
	m¥Ÿocﬁ
;

119 
ngx_m£c_t
 
	mtimeout
;

120 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

122 
ngx_Êag_t
 
	mso_kì∑live
;

124 
ngx_°r_t
 
	m£rvî_«me
;

126 
u_ch¨
 *
	mfûe_«me
;

127 
ngx_öt_t
 
	mlöe
;

129 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

132 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

133 } 
	tngx_maû_c‹e_§v_c⁄f_t
;

137 
	mngx_p›3_°¨t
 = 0,

138 
	mngx_p›3_u£r
,

139 
	mngx_p›3_∑sswd
,

140 
	mngx_p›3_auth_logö_u£∫ame
,

141 
	mngx_p›3_auth_logö_∑ssw‹d
,

142 
	mngx_p›3_auth_∂aö
,

143 
	mngx_p›3_auth_¸am_md5


144 } 
	tngx_p›3_°©e_e
;

148 
	mngx_im≠_°¨t
 = 0,

149 
	mngx_im≠_auth_logö_u£∫ame
,

150 
	mngx_im≠_auth_logö_∑ssw‹d
,

151 
	mngx_im≠_auth_∂aö
,

152 
	mngx_im≠_auth_¸am_md5
,

153 
	mngx_im≠_logö
,

154 
	mngx_im≠_u£r
,

155 
	mngx_im≠_∑sswd


156 } 
	tngx_im≠_°©e_e
;

160 
	mngx_smç_°¨t
 = 0,

161 
	mngx_smç_auth_logö_u£∫ame
,

162 
	mngx_smç_auth_logö_∑ssw‹d
,

163 
	mngx_smç_auth_∂aö
,

164 
	mngx_smç_auth_¸am_md5
,

165 
	mngx_smç_hño
,

166 
	mngx_smç_hño_x˛õ¡
,

167 
	mngx_smç_hño_‰om
,

168 
	mngx_smç_x˛õ¡
,

169 
	mngx_smç_x˛õ¡_‰om
,

170 
	mngx_smç_x˛õ¡_hño
,

171 
	mngx_smç_‰om
,

172 
	mngx_smç_to


173 } 
	tngx_smç_°©e_e
;

177 
ngx_≥î_c⁄√˘i⁄_t
 
	mup°ªam
;

178 
ngx_buf_t
 *
	mbuf„r
;

179 } 
	tngx_maû_¥oxy_˘x_t
;

183 
uöt32_t
 
	msig«tuª
;

185 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

187 
ngx_°r_t
 
	mout
;

188 
ngx_buf_t
 *
	mbuf„r
;

190 **
	m˘x
;

191 **
	mmaö_c⁄f
;

192 **
	m§v_c⁄f
;

194 
ngx_ªsﬁvî_˘x_t
 *
	mªsﬁvî_˘x
;

196 
ngx_maû_¥oxy_˘x_t
 *
	m¥oxy
;

198 
ngx_uöt_t
 
	mmaû_°©e
;

200 
	m¥Ÿocﬁ
:3;

201 
	mblocked
:1;

202 
	mquô
:1;

203 
	mquŸed
:1;

204 
	mback¶ash
:1;

205 
	mno_sync_lôîÆ
:1;

206 
	m°¨âls
:1;

207 
	mesmç
:1;

208 
	mauth_mëhod
:3;

209 
	mauth_waô
:1;

211 
ngx_°r_t
 
	mlogö
;

212 
ngx_°r_t
 
	m∑sswd
;

214 
ngx_°r_t
 
	mß…
;

215 
ngx_°r_t
 
	mèg
;

216 
ngx_°r_t
 
	mègged_löe
;

217 
ngx_°r_t
 
	mãxt
;

219 
ngx_°r_t
 *
	maddr_ãxt
;

220 
ngx_°r_t
 
	mho°
;

221 
ngx_°r_t
 
	msmç_hño
;

222 
ngx_°r_t
 
	msmç_‰om
;

223 
ngx_°r_t
 
	msmç_to
;

225 
ngx_uöt_t
 
	mcomm™d
;

226 
ngx_¨øy_t
 
	m¨gs
;

228 
ngx_uöt_t
 
	mlogö_©ãm±
;

232 
ngx_uöt_t
 
	m°©e
;

233 
u_ch¨
 *
	mcmd_°¨t
;

234 
u_ch¨
 *
	m¨g_°¨t
;

235 
u_ch¨
 *
	m¨g_íd
;

236 
ngx_uöt_t
 
	mlôîÆ_Àn
;

237 } 
	tngx_maû_£ssi⁄_t
;

241 
ngx_°r_t
 *
	m˛õ¡
;

242 
ngx_maû_£ssi⁄_t
 *
	m£ssi⁄
;

243 } 
	tngx_maû_log_˘x_t
;

246 
	#NGX_POP3_USER
 1

	)

247 
	#NGX_POP3_PASS
 2

	)

248 
	#NGX_POP3_CAPA
 3

	)

249 
	#NGX_POP3_QUIT
 4

	)

250 
	#NGX_POP3_NOOP
 5

	)

251 
	#NGX_POP3_STLS
 6

	)

252 
	#NGX_POP3_APOP
 7

	)

253 
	#NGX_POP3_AUTH
 8

	)

254 
	#NGX_POP3_STAT
 9

	)

255 
	#NGX_POP3_LIST
 10

	)

256 
	#NGX_POP3_RETR
 11

	)

257 
	#NGX_POP3_DELE
 12

	)

258 
	#NGX_POP3_RSET
 13

	)

259 
	#NGX_POP3_TOP
 14

	)

260 
	#NGX_POP3_UIDL
 15

	)

263 
	#NGX_IMAP_LOGIN
 1

	)

264 
	#NGX_IMAP_LOGOUT
 2

	)

265 
	#NGX_IMAP_CAPABILITY
 3

	)

266 
	#NGX_IMAP_NOOP
 4

	)

267 
	#NGX_IMAP_STARTTLS
 5

	)

269 
	#NGX_IMAP_NEXT
 6

	)

271 
	#NGX_IMAP_AUTHENTICATE
 7

	)

274 
	#NGX_SMTP_HELO
 1

	)

275 
	#NGX_SMTP_EHLO
 2

	)

276 
	#NGX_SMTP_AUTH
 3

	)

277 
	#NGX_SMTP_QUIT
 4

	)

278 
	#NGX_SMTP_NOOP
 5

	)

279 
	#NGX_SMTP_MAIL
 6

	)

280 
	#NGX_SMTP_RSET
 7

	)

281 
	#NGX_SMTP_RCPT
 8

	)

282 
	#NGX_SMTP_DATA
 9

	)

283 
	#NGX_SMTP_VRFY
 10

	)

284 
	#NGX_SMTP_EXPN
 11

	)

285 
	#NGX_SMTP_HELP
 12

	)

286 
	#NGX_SMTP_STARTTLS
 13

	)

289 
	#NGX_MAIL_AUTH_PLAIN
 0

	)

290 
	#NGX_MAIL_AUTH_LOGIN
 1

	)

291 
	#NGX_MAIL_AUTH_LOGIN_USERNAME
 2

	)

292 
	#NGX_MAIL_AUTH_APOP
 3

	)

293 
	#NGX_MAIL_AUTH_CRAM_MD5
 4

	)

294 
	#NGX_MAIL_AUTH_NONE
 5

	)

297 
	#NGX_MAIL_AUTH_PLAIN_ENABLED
 0x0002

	)

298 
	#NGX_MAIL_AUTH_LOGIN_ENABLED
 0x0004

	)

299 
	#NGX_MAIL_AUTH_APOP_ENABLED
 0x0008

	)

300 
	#NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 0x0010

	)

301 
	#NGX_MAIL_AUTH_NONE_ENABLED
 0x0020

	)

304 
	#NGX_MAIL_PARSE_INVALID_COMMAND
 20

	)

307 (*
	tngx_maû_öô_£ssi⁄_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

308 
	tngx_c⁄√˘i⁄_t
 *
	tc
);

309 (*
	tngx_maû_öô_¥Ÿocﬁ_±
)(
	tngx_evít_t
 *
	tªv
);

310 (*
	tngx_maû_auth_°©e_±
)(
	tngx_evít_t
 *
	tªv
);

311 
	$ngx_öt_t
 (*
	tngx_maû_∑r£_comm™d_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
);

314 
	sngx_maû_¥Ÿocﬁ_s
 {

315 
ngx_°r_t
 
«me
;

316 
ö_p‹t_t
 
p‹t
[4];

317 
ngx_uöt_t
 
ty≥
;

319 
ngx_maû_öô_£ssi⁄_±
 
öô_£ssi⁄
;

320 
ngx_maû_öô_¥Ÿocﬁ_±
 
öô_¥Ÿocﬁ
;

321 
ngx_maû_∑r£_comm™d_±
 
∑r£_comm™d
;

322 
ngx_maû_auth_°©e_±
 
auth_°©e
;

324 
ngx_°r_t
 
öã∫Æ_£rvî_îr‹
;

329 
ngx_maû_¥Ÿocﬁ_t
 *
¥Ÿocﬁ
;

331 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

332 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

334 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

335 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

336 *
c⁄f
);

337 } 
	tngx_maû_moduÀ_t
;

340 
	#NGX_MAIL_MODULE
 0x4C49414D

	)

342 
	#NGX_MAIL_MAIN_CONF
 0x02000000

	)

343 
	#NGX_MAIL_SRV_CONF
 0x04000000

	)

346 
	#NGX_MAIL_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

347 
	#NGX_MAIL_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

350 
	#ngx_maû_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

351 
	#ngx_maû_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

352 
	#ngx_maû_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

355 
	#ngx_maû_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

356 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

357 
	#ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
Ë(s)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

359 
	#ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

360 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

361 
	#ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

362 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

365 #i‡(
NGX_MAIL_SSL
)

366 
	`ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
);

367 
ngx_öt_t
 
	`ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

371 
	`ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

373 
ngx_öt_t
 
	`ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

374 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
);

375 
ngx_öt_t
 
	`ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

376 
ngx_uöt_t
 
n
);

377 
ngx_öt_t
 
	`ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
,

378 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
);

379 
ngx_öt_t
 
	`ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
,

380 
ngx_c⁄√˘i⁄_t
 *
c
);

381 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
,

382 
ngx_c⁄√˘i⁄_t
 *
c
, *
¥efix
, 
size_t
 
Àn
);

383 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

384 
ngx_öt_t
 
	`ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

386 
	`ngx_maû_£nd
(
ngx_evít_t
 *
wev
);

387 
ngx_öt_t
 
	`ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

388 
	`ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

389 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

390 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

391 
u_ch¨
 *
	`ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

394 *
	`ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

398 
	`ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
);

399 
	`ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
);

403 
ngx_uöt_t
 
ngx_maû_max_moduÀ
;

404 
ngx_moduÀ_t
 
ngx_maû_c‹e_moduÀ
;

	@src/mail/ngx_mail_auth_http_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_addr_t
 *
	m≥î
;

18 
ngx_m£c_t
 
	mtimeout
;

20 
ngx_°r_t
 
	mho°_hódî
;

21 
ngx_°r_t
 
	muri
;

22 
ngx_°r_t
 
	mhódî
;

24 
ngx_¨øy_t
 *
	mhódîs
;

26 
u_ch¨
 *
	mfûe
;

27 
ngx_uöt_t
 
	mlöe
;

28 } 
	tngx_maû_auth_hâp_c⁄f_t
;

31 
ngx_maû_auth_hâp_˘x_s
 
	tngx_maû_auth_hâp_˘x_t
;

33 (*
	tngx_maû_auth_hâp_h™dÀr_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

34 
	tngx_maû_auth_hâp_˘x_t
 *
	t˘x
);

36 
	sngx_maû_auth_hâp_˘x_s
 {

37 
ngx_buf_t
 *
ªque°
;

38 
ngx_buf_t
 *
ª•⁄£
;

39 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

41 
ngx_maû_auth_hâp_h™dÀr_±
 
h™dÀr
;

43 
ngx_uöt_t
 
°©e
;

45 
u_ch¨
 *
hódî_«me_°¨t
;

46 
u_ch¨
 *
hódî_«me_íd
;

47 
u_ch¨
 *
hódî_°¨t
;

48 
u_ch¨
 *
hódî_íd
;

50 
ngx_°r_t
 
addr
;

51 
ngx_°r_t
 
p‹t
;

52 
ngx_°r_t
 
îr
;

53 
ngx_°r_t
 
îrmsg
;

54 
ngx_°r_t
 
îrcode
;

56 
time_t
 
¶ìp
;

58 
ngx_poﬁ_t
 *
poﬁ
;

62 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

63 
	`ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

64 
	`ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

65 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

66 
	`ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

67 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

68 
	`ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
);

69 
ngx_öt_t
 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

70 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

71 
	`ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
);

72 
	`ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

73 
ngx_buf_t
 *
	`ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
,

74 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
);

75 
ngx_öt_t
 
	`ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,

76 
ngx_°r_t
 *
esˇ≥d
);

78 *
	`ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

79 *
	`ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

80 *
chûd
);

81 *
	`ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

82 *
	`ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

83 *
c⁄f
);

86 
ngx_comm™d_t
 
ngx_maû_auth_hâp_comm™ds
[] = {

88 { 
	`ngx_°rög
("auth_http"),

89 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

90 
ngx_maû_auth_hâp
,

91 
NGX_MAIL_SRV_CONF_OFFSET
,

93 
NULL
 },

95 { 
	`ngx_°rög
("auth_http_timeout"),

96 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_m£c_¶Ÿ
,

98 
NGX_MAIL_SRV_CONF_OFFSET
,

99 
	`off£tof
(
ngx_maû_auth_hâp_c⁄f_t
, 
timeout
),

100 
NULL
 },

102 { 
	`ngx_°rög
("auth_http_header"),

103 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE2
,

104 
ngx_maû_auth_hâp_hódî
,

105 
NGX_MAIL_SRV_CONF_OFFSET
,

107 
NULL
 },

109 
ngx_nuŒ_comm™d


110 
	}
};

113 
ngx_maû_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ_˘x
 = {

114 
NULL
,

116 
NULL
,

117 
NULL
,

119 
ngx_maû_auth_hâp_¸óã_c⁄f
,

120 
ngx_maû_auth_hâp_mîge_c⁄f


124 
ngx_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ
 = {

125 
NGX_MODULE_V1
,

126 &
ngx_maû_auth_hâp_moduÀ_˘x
,

127 
ngx_maû_auth_hâp_comm™ds
,

128 
NGX_MAIL_MODULE
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NGX_MODULE_V1_PADDING


140 
ngx_°r_t
 
	gngx_maû_auth_hâp_mëhod
[] = {

141 
ngx_°rög
("plain"),

142 
ngx_°rög
("plain"),

143 
ngx_°rög
("plain"),

144 
ngx_°rög
("apop"),

145 
ngx_°rög
("cram-md5"),

146 
ngx_°rög
("none")

149 
ngx_°r_t
 
	gngx_maû_smç_îrcode
 = 
ngx_°rög
("535 5.7.0");

153 
	$ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
)

155 
ngx_öt_t
 
rc
;

156 
ngx_poﬁ_t
 *
poﬁ
;

157 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

158 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

160 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "in httpáuth state";

162 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
s
->
c⁄√˘i⁄
->
log
);

163 i‡(
poﬁ
 =
NULL
) {

164 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

168 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_maû_auth_hâp_˘x_t
));

169 i‡(
˘x
 =
NULL
) {

170 
	`ngx_de°roy_poﬁ
(
poﬁ
);

171 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

175 
˘x
->
poﬁ
 =Öool;

177 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

179 
˘x
->
ªque°
 = 
	`ngx_maû_auth_hâp_¸óã_ªque°
(
s
, 
poﬁ
, 
ahcf
);

180 i‡(
˘x
->
ªque°
 =
NULL
) {

181 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

182 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

186 
	`ngx_maû_£t_˘x
(
s
, 
˘x
, 
ngx_maû_auth_hâp_moduÀ
);

188 
˘x
->
≥î
.
sockaddr
 = 
ahcf
->peer->sockaddr;

189 
˘x
->
≥î
.
sockÀn
 = 
ahcf
->peer->socklen;

190 
˘x
->
≥î
.
«me
 = &
ahcf
->peer->name;

191 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

192 
˘x
->
≥î
.
log
 = 
s
->
c⁄√˘i⁄
->log;

193 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

195 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

197 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

198 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

199 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

202 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

203 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

207 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = 
s
;

208 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

210 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_block_ªad
;

211 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_ªad_h™dÀr
;

212 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_auth_hâp_wrôe_h™dÀr
;

214 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_ign‹e_°©us_löe
;

216 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, 
ahcf
->
timeout
);

217 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, 
ahcf
->
timeout
);

219 i‡(
rc
 =
NGX_OK
) {

220 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

223 
	}
}

227 
	$ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

229 
ssize_t
 
n
, 
size
;

230 
ngx_c⁄√˘i⁄_t
 *
c
;

231 
ngx_maû_£ssi⁄_t
 *
s
;

232 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

233 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

235 
c
 = 
wev
->
d©a
;

236 
s
 = 
c
->
d©a
;

238 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

240 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0,

243 i‡(
wev
->
timedout
) {

244 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

245 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

246 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

247 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

248 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

252 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

254 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

256 i‡(
n
 =
NGX_ERROR
) {

257 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

258 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

259 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

263 i‡(
n
 > 0) {

264 
˘x
->
ªque°
->
pos
 +
n
;

266 i‡(
n
 =
size
) {

267 
wev
->
h™dÀr
 = 
ngx_maû_auth_hâp_dummy_h™dÀr
;

269 i‡(
wev
->
timî_£t
) {

270 
	`ngx_dñ_timî
(
wev
);

273 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

274 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

275 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

276 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

283 i‡(!
wev
->
timî_£t
) {

284 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

285 
	`ngx_add_timî
(
wev
, 
ahcf
->
timeout
);

287 
	}
}

291 
	$ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

293 
ssize_t
 
n
, 
size
;

294 
ngx_c⁄√˘i⁄_t
 *
c
;

295 
ngx_maû_£ssi⁄_t
 *
s
;

296 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

298 
c
 = 
ªv
->
d©a
;

299 
s
 = 
c
->
d©a
;

301 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

304 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

306 i‡(
ªv
->
timedout
) {

307 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

308 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

309 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

310 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

311 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

315 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

316 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 1024);

317 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

318 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

319 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

320 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

325 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

327 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
pos
, 
size
);

329 i‡(
n
 > 0) {

330 
˘x
->
ª•⁄£
->
œ°
 +
n
;

332 
˘x
->
	`h™dÀr
(
s
, ctx);

336 i‡(
n
 =
NGX_AGAIN
) {

340 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

341 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

342 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

343 
	}
}

347 
	$ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

348 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

350 
u_ch¨
 *
p
, 
ch
;

352 
sw_°¨t
 = 0,

353 
sw_H
,

354 
sw_HT
,

355 
sw_HTT
,

356 
sw_HTTP
,

357 
sw_skù
,

358 
sw_Æmo°_d⁄e


359 } 
°©e
;

361 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

364 
°©e
 = 
˘x
->state;

366 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

367 
ch
 = *
p
;

369 
°©e
) {

372 
sw_°¨t
:

373 i‡(
ch
 == 'H') {

374 
°©e
 = 
sw_H
;

377 
√xt
;

379 
sw_H
:

380 i‡(
ch
 == 'T') {

381 
°©e
 = 
sw_HT
;

384 
√xt
;

386 
sw_HT
:

387 i‡(
ch
 == 'T') {

388 
°©e
 = 
sw_HTT
;

391 
√xt
;

393 
sw_HTT
:

394 i‡(
ch
 == 'P') {

395 
°©e
 = 
sw_HTTP
;

398 
√xt
;

400 
sw_HTTP
:

401 i‡(
ch
 == '/') {

402 
°©e
 = 
sw_skù
;

405 
√xt
;

408 
sw_skù
:

409 
ch
) {

410 
CR
:

411 
°©e
 = 
sw_Æmo°_d⁄e
;

414 
LF
:

415 
d⁄e
;

420 
sw_Æmo°_d⁄e
:

421 i‡(
ch
 =
LF
) {

422 
d⁄e
;

425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

427 
˘x
->
≥î
.
«me
);

428 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

429 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

430 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

435 
˘x
->
ª•⁄£
->
pos
 = 
p
;

436 
˘x
->
°©e
 = state;

440 
√xt
:

442 
p
 = 
˘x
->
ª•⁄£
->
°¨t
 - 1;

444 
d⁄e
:

446 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

447 
˘x
->
°©e
 = 0;

448 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_¥o˚ss_hódîs
;

449 
˘x
->
	`h™dÀr
(
s
, ctx);

450 
	}
}

454 
	$ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

455 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

457 
u_ch¨
 *
p
;

458 
time_t
 
timî
;

459 
size_t
 
Àn
, 
size
;

460 
ngx_öt_t
 
rc
, 
p‹t
, 
n
;

461 
ngx_addr_t
 *
≥î
;

462 
sockaddr_ö
 *
sö
;

464 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

468 
rc
 = 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
s
, 
˘x
);

470 i‡(
rc
 =
NGX_OK
) {

472 #i‡(
NGX_DEBUG
)

474 
ngx_°r_t
 
key
, 
vÆue
;

476 
key
.
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

477 
key
.
d©a
 = 
˘x
->
hódî_«me_°¨t
;

478 
vÆue
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

479 
vÆue
.
d©a
 = 
˘x
->
hódî_°¨t
;

481 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

483 &
key
, &
vÆue
);

487 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

489 i‡(
Àn
 == ("Auth-Status") - 1

490 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

491 (
u_ch¨
 *) "Auth-Status",

495 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

497 i‡(
Àn
 == 2

498 && 
˘x
->
hódî_°¨t
[0] == 'O'

499 && 
˘x
->
hódî_°¨t
[1] == 'K')

504 i‡(
Àn
 == 4

505 && 
˘x
->
hódî_°¨t
[0] == 'W'

506 && 
˘x
->
hódî_°¨t
[1] == 'A'

507 && 
˘x
->
hódî_°¨t
[2] == 'I'

508 && 
˘x
->
hódî_°¨t
[3] == 'T')

510 
s
->
auth_waô
 = 1;

514 
˘x
->
îrmsg
.
Àn
 =Üen;

515 
˘x
->
îrmsg
.
d©a
 = ctx->
hódî_°¨t
;

517 
s
->
¥Ÿocﬁ
) {

519 
NGX_MAIL_POP3_PROTOCOL
:

520 
size
 = ("-ERR "Ë- 1 + 
Àn
 + (
CRLF
) - 1;

523 
NGX_MAIL_IMAP_PROTOCOL
:

524 
size
 = 
s
->
èg
.
Àn
 + ("NO ") - 1 +Üen

525 + (
CRLF
) - 1;

529 
˘x
->
îr
 = ctx->
îrmsg
;

533 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
size
);

534 i‡(
p
 =
NULL
) {

535 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

536 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

537 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

541 
˘x
->
îr
.
d©a
 = 
p
;

543 
s
->
¥Ÿocﬁ
) {

545 
NGX_MAIL_POP3_PROTOCOL
:

546 *
p
++ = '-'; *p++ = 'E'; *p++ = 'R'; *p++ = 'R'; *p++ = ' ';

549 
NGX_MAIL_IMAP_PROTOCOL
:

550 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

551 *
p
++ = 'N'; *p++ = 'O'; *p++ = ' ';

558 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
hódî_°¨t
, 
Àn
);

559 *
p
++ = 
CR
; *p++ = 
LF
;

561 
˘x
->
îr
.
Àn
 = 
p
 - ctx->îr.
d©a
;

566 i‡(
Àn
 == ("Auth-Server") - 1

567 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

568 (
u_ch¨
 *) "Auth-Server",

572 
˘x
->
addr
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

573 
˘x
->
addr
.
d©a
 = ctx->
hódî_°¨t
;

578 i‡(
Àn
 == ("Auth-Port") - 1

579 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

580 (
u_ch¨
 *) "Auth-Port",

584 
˘x
->
p‹t
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

585 
˘x
->
p‹t
.
d©a
 = ctx->
hódî_°¨t
;

590 i‡(
Àn
 == ("Auth-User") - 1

591 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

592 (
u_ch¨
 *) "Auth-User",

596 
s
->
logö
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

598 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
, s->logö.
Àn
);

599 i‡(
s
->
logö
.
d©a
 =
NULL
) {

600 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

601 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

602 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

606 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
˘x
->
hódî_°¨t
, s->logö.
Àn
);

611 i‡(
Àn
 == ("Auth-Pass") - 1

612 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

613 (
u_ch¨
 *) "Auth-Pass",

617 
s
->
∑sswd
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

619 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
,

620 
s
->
∑sswd
.
Àn
);

621 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

622 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

623 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

624 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

628 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
˘x
->
hódî_°¨t
, s->∑sswd.
Àn
);

633 i‡(
Àn
 == ("Auth-Wait") - 1

634 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

635 (
u_ch¨
 *) "Auth-Wait",

639 
n
 = 
	`ngx_©oi
(
˘x
->
hódî_°¨t
,

640 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
);

642 i‡(
n
 !
NGX_ERROR
) {

643 
˘x
->
¶ìp
 = 
n
;

649 i‡(
Àn
 == ("Auth-Error-Code") - 1

650 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

651 (
u_ch¨
 *) "Auth-Error-Code",

655 
˘x
->
îrcode
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

657 
˘x
->
îrcode
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

658 
˘x
->
îrcode
.
Àn
);

659 i‡(
˘x
->
îrcode
.
d©a
 =
NULL
) {

660 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

661 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

662 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

666 
	`ngx_mem˝y
(
˘x
->
îrcode
.
d©a
, ctx->
hódî_°¨t
,

667 
˘x
->
îrcode
.
Àn
);

677 i‡(
rc
 =
NGX_DONE
) {

678 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

681 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

683 i‡(
˘x
->
îr
.
Àn
) {

685 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

686 "˛õ¡Üogö faûed: \"%V\"", &
˘x
->
îrmsg
);

688 i‡(
s
->
¥Ÿocﬁ
 =
NGX_MAIL_SMTP_PROTOCOL
) {

690 i‡(
˘x
->
îrcode
.
Àn
 == 0) {

691 
˘x
->
îrcode
 = 
ngx_maû_smç_îrcode
;

694 
˘x
->
îr
.
Àn
 = ctx->
îrcode
.À¿+ ctx->
îrmsg
.len

695 + (" " 
CRLF
) - 1;

697 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
˘x
->
îr
.
Àn
);

698 i‡(
p
 =
NULL
) {

699 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

700 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

701 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

705 
˘x
->
îr
.
d©a
 = 
p
;

707 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrcode
.
d©a
, ctx->îrcode.
Àn
);

708 *
p
++ = ' ';

709 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrmsg
.
d©a
, ctx->îrmsg.
Àn
);

710 *
p
++ = 
CR
; *∞
LF
;

713 
s
->
out
 = 
˘x
->
îr
;

714 
timî
 = 
˘x
->
¶ìp
;

716 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

718 i‡(
timî
 == 0) {

719 
s
->
quô
 = 1;

720 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

724 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

726 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

731 i‡(
s
->
auth_waô
) {

732 
timî
 = 
˘x
->
¶ìp
;

734 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

736 i‡(
timî
 == 0) {

737 
	`ngx_maû_auth_hâp_öô
(
s
);

741 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

743 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

748 i‡(
˘x
->
addr
.
Àn
 =0 || ctx->
p‹t
.len == 0) {

749 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

751 
˘x
->
≥î
.
«me
);

752 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

753 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

757 i‡(
s
->
∑sswd
.
d©a
 =
NULL


758 && 
s
->
¥Ÿocﬁ
 !
NGX_MAIL_SMTP_PROTOCOL
)

760 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

762 
˘x
->
≥î
.
«me
);

763 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

764 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

768 
≥î
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_addr_t
));

769 i‡(
≥î
 =
NULL
) {

770 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

771 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

777 
sö
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
sockaddr_ö
));

778 i‡(
sö
 =
NULL
) {

779 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

780 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

784 
sö
->
sö_Ámûy
 = 
AF_INET
;

786 
p‹t
 = 
	`ngx_©oi
(
˘x
->p‹t.
d©a
, ctx->p‹t.
Àn
);

787 i‡(
p‹t
 =
NGX_ERROR
 ||Öort < 1 ||Öort > 65535) {

788 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

791 
˘x
->
≥î
.
«me
, &˘x->
p‹t
);

792 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

793 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

797 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
p‹t
);

799 
sö
->
sö_addr
.
s_addr
 = 
	`ngx_öë_addr
(
˘x
->
addr
.
d©a
, ctx->addr.
Àn
);

800 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_NONE
) {

801 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

804 
˘x
->
≥î
.
«me
, &˘x->
addr
);

805 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

806 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

810 
≥î
->
sockaddr
 = (sockadd∏*Ë
sö
;

811 
≥î
->
sockÀn
 = (
sockaddr_ö
);

813 
Àn
 = 
˘x
->
addr
.À¿+ 1 + ctx->
p‹t
.len;

815 
≥î
->
«me
.
Àn
 =Üen;

817 
≥î
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

818 i‡(
≥î
->
«me
.
d©a
 =
NULL
) {

819 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

820 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

824 
Àn
 = 
˘x
->
addr
.len;

826 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
, 
˘x
->
addr
.d©a, 
Àn
);

828 
≥î
->
«me
.
d©a
[
Àn
++] = ':';

830 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
 + 
Àn
, 
˘x
->
p‹t
.data, ctx->port.len);

832 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

833 
	`ngx_maû_¥oxy_öô
(
s
, 
≥î
);

838 i‡(
rc
 =
NGX_AGAIN
 ) {

844 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

846 
˘x
->
≥î
.
«me
);

847 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

848 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

849 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

853 
	}
}

857 
	$ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
)

859 
ngx_c⁄√˘i⁄_t
 *
c
;

860 
ngx_maû_£ssi⁄_t
 *
s
;

861 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

863 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailáuth sleep handler");

865 
c
 = 
ªv
->
d©a
;

866 
s
 = 
c
->
d©a
;

868 i‡(
ªv
->
timedout
) {

870 
ªv
->
timedout
 = 0;

872 i‡(
s
->
auth_waô
) {

873 
s
->
auth_waô
 = 0;

874 
	`ngx_maû_auth_hâp_öô
(
s
);

878 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

880 
ªv
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
auth_°©e
;

882 
s
->
maû_°©e
 = 0;

883 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_PLAIN
;

885 
c
->
log
->
a˘i⁄
 = "ináuth state";

887 
	`ngx_maû_£nd
(
c
->
wrôe
);

889 i‡(
c
->
de°royed
) {

893 
	`ngx_add_timî
(
ªv
, 
cscf
->
timeout
);

895 i‡(
ªv
->
ªady
) {

896 
ªv
->
	`h™dÀr
(rev);

900 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

901 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

907 i‡(
ªv
->
a˘ive
) {

908 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

909 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

912 
	}
}

915 
ngx_öt_t


916 
	$ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

917 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

919 
u_ch¨
 
c
, 
ch
, *
p
;

921 
sw_°¨t
 = 0,

922 
sw_«me
,

923 
sw_•a˚_bef‹e_vÆue
,

924 
sw_vÆue
,

925 
sw_•a˚_a·î_vÆue
,

926 
sw_Æmo°_d⁄e
,

927 
sw_hódî_Æmo°_d⁄e


928 } 
°©e
;

930 
°©e
 = 
˘x
->state;

932 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

933 
ch
 = *
p
;

935 
°©e
) {

938 
sw_°¨t
:

940 
ch
) {

941 
CR
:

942 
˘x
->
hódî_íd
 = 
p
;

943 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

945 
LF
:

946 
˘x
->
hódî_íd
 = 
p
;

947 
hódî_d⁄e
;

949 
°©e
 = 
sw_«me
;

950 
˘x
->
hódî_«me_°¨t
 = 
p
;

952 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

953 i‡(
c
 >= 'a' && c <= 'z') {

957 i‡(
ch
 >= '0' && ch <= '9') {

961  
NGX_ERROR
;

966 
sw_«me
:

967 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

968 i‡(
c
 >= 'a' && c <= 'z') {

972 i‡(
ch
 == ':') {

973 
˘x
->
hódî_«me_íd
 = 
p
;

974 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

978 i‡(
ch
 == '-') {

982 i‡(
ch
 >= '0' && ch <= '9') {

986 i‡(
ch
 =
CR
) {

987 
˘x
->
hódî_«me_íd
 = 
p
;

988 
˘x
->
hódî_°¨t
 = 
p
;

989 
˘x
->
hódî_íd
 = 
p
;

990 
°©e
 = 
sw_Æmo°_d⁄e
;

994 i‡(
ch
 =
LF
) {

995 
˘x
->
hódî_«me_íd
 = 
p
;

996 
˘x
->
hódî_°¨t
 = 
p
;

997 
˘x
->
hódî_íd
 = 
p
;

998 
d⁄e
;

1001  
NGX_ERROR
;

1004 
sw_•a˚_bef‹e_vÆue
:

1005 
ch
) {

1008 
CR
:

1009 
˘x
->
hódî_°¨t
 = 
p
;

1010 
˘x
->
hódî_íd
 = 
p
;

1011 
°©e
 = 
sw_Æmo°_d⁄e
;

1013 
LF
:

1014 
˘x
->
hódî_°¨t
 = 
p
;

1015 
˘x
->
hódî_íd
 = 
p
;

1016 
d⁄e
;

1018 
˘x
->
hódî_°¨t
 = 
p
;

1019 
°©e
 = 
sw_vÆue
;

1025 
sw_vÆue
:

1026 
ch
) {

1028 
˘x
->
hódî_íd
 = 
p
;

1029 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1031 
CR
:

1032 
˘x
->
hódî_íd
 = 
p
;

1033 
°©e
 = 
sw_Æmo°_d⁄e
;

1035 
LF
:

1036 
˘x
->
hódî_íd
 = 
p
;

1037 
d⁄e
;

1042 
sw_•a˚_a·î_vÆue
:

1043 
ch
) {

1046 
CR
:

1047 
°©e
 = 
sw_Æmo°_d⁄e
;

1049 
LF
:

1050 
d⁄e
;

1052 
°©e
 = 
sw_vÆue
;

1058 
sw_Æmo°_d⁄e
:

1059 
ch
) {

1060 
LF
:

1061 
d⁄e
;

1063  
NGX_ERROR
;

1067 
sw_hódî_Æmo°_d⁄e
:

1068 
ch
) {

1069 
LF
:

1070 
hódî_d⁄e
;

1072  
NGX_ERROR
;

1077 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1078 
˘x
->
°©e
 = state;

1080  
NGX_AGAIN
;

1082 
d⁄e
:

1084 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1085 
˘x
->
°©e
 = 
sw_°¨t
;

1087  
NGX_OK
;

1089 
hódî_d⁄e
:

1091 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1092 
˘x
->
°©e
 = 
sw_°¨t
;

1094  
NGX_DONE
;

1095 
	}
}

1099 
	$ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
)

1101 
ngx_c⁄√˘i⁄_t
 *
c
;

1102 
ngx_maû_£ssi⁄_t
 *
s
;

1103 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

1105 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

1108 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1109 
c
 = 
ªv
->
d©a
;

1110 
s
 = 
c
->
d©a
;

1112 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

1114 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

1115 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

1116 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1118 
	}
}

1122 
	$ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

1126 
	}
}

1129 
ngx_buf_t
 *

1130 
	$ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
,

1131 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
)

1133 
size_t
 
Àn
;

1134 
ngx_buf_t
 *
b
;

1135 
ngx_°r_t
 
logö
, 
∑sswd
;

1136 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

1138 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
logö
, &logöË!
NGX_OK
) {

1139  
NULL
;

1142 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
∑sswd
, &∑sswdË!
NGX_OK
) {

1143  
NULL
;

1146 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

1148 
Àn
 = ("GET "Ë- 1 + 
ahcf
->
uri
.À¿+ (" HTTP/1.0" 
CRLF
) - 1

1149 + ("Ho°: "Ë- 1 + 
ahcf
->
ho°_hódî
.
Àn
 + (
CRLF
) - 1

1151 + 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn


1152 + (
CRLF
) - 1

1153 + ("Auth-U£r: "Ë- 1 + 
logö
.
Àn
 + (
CRLF
) - 1

1154 + ("Auth-Pass: "Ë- 1 + 
∑sswd
.
Àn
 + (
CRLF
) - 1

1155 + ("Auth-SÆt: "Ë- 1 + 
s
->
ß…
.
Àn


1156 + ("Auth-PrŸocﬁ: "Ë- 1 + 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn


1157 + (
CRLF
) - 1

1158 + ("Auth-Logö-Aâem±: "Ë- 1 + 
NGX_INT_T_LEN


1159 + (
CRLF
) - 1

1160 + ("Clõ¡-IP: "Ë- 1 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn


1161 + (
CRLF
) - 1

1162 + ("Clõ¡-Ho°: "Ë- 1 + 
s
->
ho°
.
Àn
 + (
CRLF
) - 1

1163 + ("Auth-SMTP-Hño: "Ë- 1 + 
s
->
smç_hño
.
Àn


1164 + ("Auth-SMTP-From: "Ë- 1 + 
s
->
smç_‰om
.
Àn


1165 + ("Auth-SMTP-To: "Ë- 1 + 
s
->
smç_to
.
Àn


1166 + 
ahcf
->
hódî
.
Àn


1167 + (
CRLF
) - 1;

1169 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
Àn
);

1170 i‡(
b
 =
NULL
) {

1171  
NULL
;

1174 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "GET ", ("GET ") - 1);

1175 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
uri
.
d©a
,áhcf->uri.
Àn
);

1176 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, " HTTP/1.0" 
CRLF
,

1177 (" HTTP/1.0" 
CRLF
) - 1);

1179 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Host: ", ("Host: ") - 1);

1180 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
ho°_hódî
.
d©a
,

1181 
ahcf
->
ho°_hódî
.
Àn
);

1182 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1184 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Method: ",

1186 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last,

1187 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
d©a
,

1188 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn
);

1189 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1191 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-User: ", ("Auth-User: ") - 1);

1192 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
logö
.
d©a
,Üogö.
Àn
);

1193 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1195 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Pass: ", ("Auth-Pass: ") - 1);

1196 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
∑sswd
.
d©a
,Öasswd.
Àn
);

1197 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1199 i‡(
s
->
auth_mëhod
 !
NGX_MAIL_AUTH_PLAIN
 && s->
ß…
.
Àn
) {

1200 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Salt: ", ("Auth-Salt: ") - 1);

1201 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

1203 
s
->
∑sswd
.
d©a
 = 
NULL
;

1206 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Protocol: ",

1208 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
cscf
->
¥Ÿocﬁ
->
«me
.
d©a
,

1209 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn
);

1210 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1212 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Auth-Logö-Aâem±: %ui" 
CRLF
,

1213 
s
->
logö_©ãm±
);

1215 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-IP: ", ("Client-IP: ") - 1);

1216 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

1217 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

1218 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1220 i‡(
s
->
ho°
.
Àn
) {

1221 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-Host: ",

1223 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

1224 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1227 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

1231 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-Helo: ",

1233 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_hño
.
d©a
, s->smç_hño.
Àn
);

1234 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1236 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-From: ",

1238 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_‰om
.
d©a
, s->smç_‰om.
Àn
);

1239 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1241 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-To: ",

1243 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_to
.
d©a
, s->smç_to.
Àn
);

1244 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1248 i‡(
ahcf
->
hódî
.
Àn
) {

1249 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
hódî
.
d©a
,áhcf->hódî.
Àn
);

1253 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1255 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

1257 
ngx_°r_t
 
l
;

1259 
l
.
Àn
 = 
b
->
œ°
 - b->
pos
;

1260 
l
.
d©a
 = 
b
->
pos
;

1261 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1262 "maûáuth hâ∞hódî:\n\"%V\"", &
l
);

1266  
b
;

1267 
	}
}

1270 
ngx_öt_t


1271 
	$ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,Çgx_°r_à*
esˇ≥d
)

1273 
u_ch¨
 *
p
;

1274 
uöçå_t
 
n
;

1276 
n
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1278 i‡(
n
 == 0) {

1279 *
esˇ≥d
 = *
ãxt
;

1280  
NGX_OK
;

1283 
esˇ≥d
->
Àn
 = 
ãxt
->À¿+ 
n
 * 2;

1285 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
esˇ≥d
->
Àn
);

1286 i‡(
p
 =
NULL
) {

1287  
NGX_ERROR
;

1290 (Ë
	`ngx_esˇ≥_uri
(
p
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1292 
esˇ≥d
->
d©a
 = 
p
;

1294  
NGX_OK
;

1295 
	}
}

1299 
	$ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1301 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

1303 
ahcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_auth_hâp_c⁄f_t
));

1304 i‡(
ahcf
 =
NULL
) {

1305  
NULL
;

1308 
ahcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1310 
ahcf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

1311 
ahcf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1313  
ahcf
;

1314 
	}
}

1318 
	$ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1320 
ngx_maû_auth_hâp_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1321 
ngx_maû_auth_hâp_c⁄f_t
 *
c⁄f
 = 
chûd
;

1323 
u_ch¨
 *
p
;

1324 
size_t
 
Àn
;

1325 
ngx_uöt_t
 
i
;

1326 
ngx_èbÀ_ñt_t
 *
hódî
;

1328 i‡(
c⁄f
->
≥î
 =
NULL
) {

1329 
c⁄f
->
≥î
 = 
¥ev
->peer;

1330 
c⁄f
->
ho°_hódî
 = 
¥ev
->host_header;

1331 
c⁄f
->
uri
 = 
¥ev
->uri;

1333 i‡(
c⁄f
->
≥î
 =
NULL
) {

1334 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1336 
c⁄f
->
fûe
, c⁄f->
löe
);

1338  
NGX_CONF_ERROR
;

1342 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

1344 i‡(
c⁄f
->
hódîs
 =
NULL
) {

1345 
c⁄f
->
hódîs
 = 
¥ev
->headers;

1346 
c⁄f
->
hódî
 = 
¥ev
->header;

1349 i‡(
c⁄f
->
hódîs
 && c⁄f->
hódî
.
Àn
 == 0) {

1350 
Àn
 = 0;

1351 
hódî
 = 
c⁄f
->
hódîs
->
ñts
;

1352 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1353 
Àn
 +
hódî
[
i
].
key
.À¿+ 2 + hódî[i].
vÆue
.len + 2;

1356 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1357 i‡(
p
 =
NULL
) {

1358  
NGX_CONF_ERROR
;

1361 
c⁄f
->
hódî
.
Àn
 =Üen;

1362 
c⁄f
->
hódî
.
d©a
 = 
p
;

1364 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1365 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1366 *
p
++ = ':'; *p++ = ' ';

1367 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

1368 *
p
++ = 
CR
; *p++ = 
LF
;

1372  
NGX_CONF_OK
;

1373 
	}
}

1377 
	$ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1379 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1381 
ngx_°r_t
 *
vÆue
;

1382 
ngx_uæ_t
 
u
;

1384 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1386 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1388 
u
.
uæ
 = 
vÆue
[1];

1389 
u
.
deÁu…_p‹t
 = 80;

1390 
u
.
uri_∑π
 = 1;

1391 
u
.
⁄e_addr
 = 1;

1393 i‡(
	`ngx_°∫cmp
(
u
.
uæ
.
d©a
, "http://", 7) == 0) {

1394 
u
.
uæ
.
Àn
 -= 7;

1395 
u
.
uæ
.
d©a
 += 7;

1398 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1399 i‡(
u
.
îr
) {

1400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1401 "%†öáuth_hâ∞\"%V\"", 
u
.
îr
, &u.
uæ
);

1404  
NGX_CONF_ERROR
;

1407 
ahcf
->
≥î
 = 
u
.
addrs
;

1409 i‡(
u
.
Ámûy
 !
AF_UNIX
) {

1410 
ahcf
->
ho°_hódî
 = 
u
.
ho°
;

1413 
	`ngx_°r_£t
(&
ahcf
->
ho°_hódî
, "localhost");

1416 
ahcf
->
uri
 = 
u
.uri;

1418 i‡(
ahcf
->
uri
.
Àn
 == 0) {

1419 
	`ngx_°r_£t
(&
ahcf
->
uri
, "/");

1422  
NGX_CONF_OK
;

1423 
	}
}

1427 
	$ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1429 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1431 
ngx_°r_t
 *
vÆue
;

1432 
ngx_èbÀ_ñt_t
 *
hódî
;

1434 i‡(
ahcf
->
hódîs
 =
NULL
) {

1435 
ahcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
));

1436 i‡(
ahcf
->
hódîs
 =
NULL
) {

1437  
NGX_CONF_ERROR
;

1441 
hódî
 = 
	`ngx_¨øy_push
(
ahcf
->
hódîs
);

1442 i‡(
hódî
 =
NULL
) {

1443  
NGX_CONF_ERROR
;

1446 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1448 
hódî
->
key
 = 
vÆue
[1];

1449 
hódî
->
vÆue
 = value[2];

1451  
NGX_CONF_OK
;

1452 
	}
}

	@src/mail/ngx_mail_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

18 *
ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

19 *
c⁄f
);

20 *
ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_comm™d_t
 
	gngx_maû_c‹e_comm™ds
[] = {

30 { 
ngx_°rög
("server"),

31 
NGX_MAIL_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

32 
ngx_maû_c‹e_£rvî
,

35 
NULL
 },

37 { 
ngx_°rög
("listen"),

38 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

39 
ngx_maû_c‹e_li°í
,

40 
NGX_MAIL_SRV_CONF_OFFSET
,

42 
NULL
 },

44 { 
ngx_°rög
("protocol"),

45 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

46 
ngx_maû_c‹e_¥Ÿocﬁ
,

47 
NGX_MAIL_SRV_CONF_OFFSET
,

49 
NULL
 },

51 { 
ngx_°rög
("so_keepalive"),

52 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

53 
ngx_c⁄f_£t_Êag_¶Ÿ
,

54 
NGX_MAIL_SRV_CONF_OFFSET
,

55 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
so_kì∑live
),

56 
NULL
 },

58 { 
ngx_°rög
("timeout"),

59 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_m£c_¶Ÿ
,

61 
NGX_MAIL_SRV_CONF_OFFSET
,

62 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
timeout
),

63 
NULL
 },

65 { 
ngx_°rög
("server_name"),

66 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_°r_¶Ÿ
,

68 
NGX_MAIL_SRV_CONF_OFFSET
,

69 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
£rvî_«me
),

70 
NULL
 },

72 { 
ngx_°rög
("resolver"),

73 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_maû_c‹e_ªsﬁvî
,

75 
NGX_MAIL_SRV_CONF_OFFSET
,

77 
NULL
 },

79 { 
ngx_°rög
("resolver_timeout"),

80 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

81 
ngx_c⁄f_£t_m£c_¶Ÿ
,

82 
NGX_MAIL_SRV_CONF_OFFSET
,

83 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
ªsﬁvî_timeout
),

84 
NULL
 },

86 
ngx_nuŒ_comm™d


90 
ngx_maû_moduÀ_t
 
	gngx_maû_c‹e_moduÀ_˘x
 = {

91 
NULL
,

93 
ngx_maû_c‹e_¸óã_maö_c⁄f
,

94 
NULL
,

96 
ngx_maû_c‹e_¸óã_§v_c⁄f
,

97 
ngx_maû_c‹e_mîge_§v_c⁄f


101 
ngx_moduÀ_t
 
	gngx_maû_c‹e_moduÀ
 = {

102 
NGX_MODULE_V1
,

103 &
ngx_maû_c‹e_moduÀ_˘x
,

104 
ngx_maû_c‹e_comm™ds
,

105 
NGX_MAIL_MODULE
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NGX_MODULE_V1_PADDING


118 
	$ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

120 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

122 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_maö_c⁄f_t
));

123 i‡(
cmcf
 =
NULL
) {

124  
NULL
;

127 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

128 (
ngx_maû_c‹e_§v_c⁄f_t
 *))

129 !
NGX_OK
)

131  
NULL
;

134 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
li°í
, 
cf
->
poﬁ
, 4, (
ngx_maû_li°í_t
))

135 !
NGX_OK
)

137  
NULL
;

140  
cmcf
;

141 
	}
}

145 
	$ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

147 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

149 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_§v_c⁄f_t
));

150 i‡(
cscf
 =
NULL
) {

151  
NULL
;

160 
cscf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

161 
cscf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

162 
cscf
->
so_kì∑live
 = 
NGX_CONF_UNSET
;

164 
cscf
->
ªsﬁvî
 = 
NGX_CONF_UNSET_PTR
;

166 
cscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

167 
cscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

169  
cscf
;

170 
	}
}

174 
	$ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

176 
ngx_maû_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

177 
ngx_maû_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

179 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

180 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
, 
¥ev
->resolver_timeout,

183 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
so_kì∑live
, 
¥ev
->so_keepalive, 0);

186 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
£rvî_«me
, 
¥ev
->server_name, "");

188 i‡(
c⁄f
->
£rvî_«me
.
Àn
 == 0) {

189 
c⁄f
->
£rvî_«me
 = 
cf
->
cy˛e
->
ho°«me
;

192 i‡(
c⁄f
->
¥Ÿocﬁ
 =
NULL
) {

193 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

195 
c⁄f
->
fûe_«me
, c⁄f->
löe
);

196  
NGX_CONF_ERROR
;

199 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªsﬁvî
, 
¥ev
->ªsﬁvî, 
NULL
);

201  
NGX_CONF_OK
;

202 
	}
}

206 
	$ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

208 *
rv
;

209 *
mc⁄f
;

210 
ngx_uöt_t
 
m
;

211 
ngx_c⁄f_t
 
pcf
;

212 
ngx_maû_moduÀ_t
 *
moduÀ
;

213 
ngx_maû_c⁄f_˘x_t
 *
˘x
, *
maû_˘x
;

214 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

215 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

217 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

218 i‡(
˘x
 =
NULL
) {

219  
NGX_CONF_ERROR
;

222 
maû_˘x
 = 
cf
->
˘x
;

223 
˘x
->
maö_c⁄f
 = 
maû_˘x
->main_conf;

227 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

228 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

229  
NGX_CONF_ERROR
;

232 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

233 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

237 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

239 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

240 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

241 i‡(
mc⁄f
 =
NULL
) {

242  
NGX_CONF_ERROR
;

245 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

251 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

252 
cscf
->
˘x
 = ctx;

254 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

256 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

257 i‡(
cscÂ
 =
NULL
) {

258  
NGX_CONF_ERROR
;

261 *
cscÂ
 = 
cscf
;

266 
pcf
 = *
cf
;

267 
cf
->
˘x
 = ctx;

268 
cf
->
cmd_ty≥
 = 
NGX_MAIL_SRV_CONF
;

270 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

272 *
cf
 = 
pcf
;

274  
rv
;

275 
	}
}

279 
	$ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

281 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

283 
size_t
 
Àn
, 
off
;

284 
ö_p‹t_t
 
p‹t
;

285 
ngx_°r_t
 *
vÆue
;

286 
ngx_uæ_t
 
u
;

287 
ngx_uöt_t
 
i
, 
m
;

288 
sockaddr
 *
ß
;

289 
ngx_maû_li°í_t
 *
ls
;

290 
ngx_maû_moduÀ_t
 *
moduÀ
;

291 
sockaddr_ö
 *
sö
;

292 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

293 #i‡(
NGX_HAVE_INET6
)

294 
sockaddr_ö6
 *
sö6
;

297 
vÆue
 = 
cf
->
¨gs
->
ñts
;

299 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

301 
u
.
uæ
 = 
vÆue
[1];

302 
u
.
li°í
 = 1;

304 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

305 i‡(
u
.
îr
) {

306 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

308 
u
.
îr
, &u.
uæ
);

311  
NGX_CONF_ERROR
;

314 
cmcf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

316 
ls
 = 
cmcf
->
li°í
.
ñts
;

318 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

320 
ß
 = (
sockaddr
 *Ë
ls
[
i
].sockaddr;

322 i‡(
ß
->
ß_Ámûy
 !
u
.
Ámûy
) {

326 
ß
->
ß_Ámûy
) {

328 #i‡(
NGX_HAVE_INET6
)

329 
AF_INET6
:

330 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

331 
Àn
 = 16;

332 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

333 
p‹t
 = 
sö6
->
sö6_p‹t
;

338 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

339 
Àn
 = 4;

340 
sö
 = (
sockaddr_ö
 *Ë
ß
;

341 
p‹t
 = 
sö
->
sö_p‹t
;

345 i‡(
	`ngx_memcmp
(
ls
[
i
].
sockaddr
 + 
off
, 
u
.sockadd∏+ off, 
Àn
) != 0) {

349 i‡(
p‹t
 !
u
.port) {

353 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

354 "du∂iˇã \"%V\"áddªs†™dÖ‹à∑ú", &
u
.
uæ
);

355  
NGX_CONF_ERROR
;

358 
ls
 = 
	`ngx_¨øy_push
(&
cmcf
->
li°í
);

359 i‡(
ls
 =
NULL
) {

360  
NGX_CONF_ERROR
;

363 
	`ngx_memzîo
(
ls
, (
ngx_maû_li°í_t
));

365 
	`ngx_mem˝y
(
ls
->
sockaddr
, 
u
.sockaddr, u.
sockÀn
);

367 
ls
->
sockÀn
 = 
u
.socklen;

368 
ls
->
wûdˇrd
 = 
u
.wildcard;

369 
ls
->
˘x
 = 
cf
->ctx;

371 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

372 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

376 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

378 i‡(
moduÀ
->
¥Ÿocﬁ
 =
NULL
) {

382 
i
 = 0; 
moduÀ
->
¥Ÿocﬁ
->
p‹t
[i]; i++) {

383 i‡(
moduÀ
->
¥Ÿocﬁ
->
p‹t
[
i
] =
u
.port) {

384 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

390 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

392 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "bind") == 0) {

393 
ls
->
böd
 = 1;

397 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "ipv6only=o", 10) == 0) {

398 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

399 
sockaddr
 *
ß
;

400 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

402 
ß
 = (
sockaddr
 *Ë
ls
->sockaddr;

404 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

406 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "n") == 0) {

407 
ls
->
ùv6⁄ly
 = 1;

409 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "ff") == 0) {

410 
ls
->
ùv6⁄ly
 = 2;

413 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

415 &
vÆue
[
i
].
d©a
[9]);

416  
NGX_CONF_ERROR
;

419 
ls
->
böd
 = 1;

422 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

424 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

426 "⁄ádd∏\"%*s\", ign‹ed", 
Àn
, 
buf
);

431 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

434  
NGX_CONF_ERROR
;

438 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "ssl") == 0) {

439 #i‡(
NGX_MAIL_SSL
)

440 
ls
->
s¶
 = 1;

443 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

446  
NGX_CONF_ERROR
;

450 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

451 "thêövÆid \"%V\"Ö¨amëî", &
vÆue
[
i
]);

452  
NGX_CONF_ERROR
;

455  
NGX_CONF_OK
;

456 
	}
}

460 
	$ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

462 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

464 
ngx_°r_t
 *
vÆue
;

465 
ngx_uöt_t
 
m
;

466 
ngx_maû_moduÀ_t
 *
moduÀ
;

468 
vÆue
 = 
cf
->
¨gs
->
ñts
;

470 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

471 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

475 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

477 i‡(
moduÀ
->
¥Ÿocﬁ


478 && 
	`ngx_°rcmp
(
moduÀ
->
¥Ÿocﬁ
->
«me
.
d©a
, 
vÆue
[1].data) == 0)

480 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

482  
NGX_CONF_OK
;

486 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

487 "unknow¿¥Ÿocﬁ \"%V\"", &
vÆue
[1]);

488  
NGX_CONF_ERROR
;

489 
	}
}

493 
	$ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

495 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

497 
ngx_uæ_t
 
u
;

498 
ngx_°r_t
 *
vÆue
;

500 
vÆue
 = 
cf
->
¨gs
->
ñts
;

502 i‡(
cscf
->
ªsﬁvî
 !
NGX_CONF_UNSET_PTR
) {

506 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

507 
cscf
->
ªsﬁvî
 = 
NULL
;

508  
NGX_CONF_OK
;

511 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

513 
u
.
ho°
 = 
vÆue
[1];

514 
u
.
p‹t
 = 53;

516 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

517 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V: %s", &
u
.
ho°
, u.
îr
);

518  
NGX_CONF_ERROR
;

521 
cscf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
u
.
addrs
[0]);

522 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

523  
NGX_CONF_OK
;

526  
NGX_CONF_OK
;

527 
	}
}

531 
	$ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

533 *
p
 = 
c⁄f
;

535 
ngx_°r_t
 *
c
, *
vÆue
;

536 
ngx_uöt_t
 
i
;

537 
ngx_¨øy_t
 *
a
;

539 
a
 = (
ngx_¨øy_t
 *Ë(
p
 + 
cmd
->
off£t
);

541 
vÆue
 = 
cf
->
¨gs
->
ñts
;

543 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

544 
c
 = 
	`ngx_¨øy_push
(
a
);

545 i‡(
c
 =
NULL
) {

546  
NGX_CONF_ERROR
;

549 *
c
 = 
vÆue
[
i
];

552  
NGX_CONF_OK
;

553 
	}
}

	@src/mail/ngx_mail_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 
ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

16 #i‡(
NGX_MAIL_SSL
)

17 
ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
);

18 
ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

23 
	$ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

25 
ngx_uöt_t
 
i
;

26 
ngx_maû_p‹t_t
 *
p‹t
;

27 
sockaddr
 *
ß
;

28 
sockaddr_ö
 *
sö
;

29 
ngx_maû_log_˘x_t
 *
˘x
;

30 
ngx_maû_ö_addr_t
 *
addr
;

31 
ngx_maû_£ssi⁄_t
 *
s
;

32 
ngx_maû_addr_c⁄f_t
 *
addr_c⁄f
;

33 #i‡(
NGX_HAVE_INET6
)

34 
sockaddr_ö6
 *
sö6
;

35 
ngx_maû_ö6_addr_t
 *
addr6
;

43 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

45 i‡(
p‹t
->
«ddrs
 > 1) {

55 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

56 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

60 
ß
 = 
c
->
loˇl_sockaddr
;

62 
ß
->
ß_Ámûy
) {

64 #i‡(
NGX_HAVE_INET6
)

65 
AF_INET6
:

66 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

68 
addr6
 = 
p‹t
->
addrs
;

72 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

73 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

78 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

84 
sö
 = (
sockaddr_ö
 *Ë
ß
;

86 
addr
 = 
p‹t
->
addrs
;

90 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

91 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

96 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

102 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

104 #i‡(
NGX_HAVE_INET6
)

105 
AF_INET6
:

106 
addr6
 = 
p‹t
->
addrs
;

107 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

112 
addr
 = 
p‹t
->
addrs
;

113 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

118 
s
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_maû_£ssi⁄_t
));

119 i‡(
s
 =
NULL
) {

120 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

124 
s
->
maö_c⁄f
 = 
addr_c⁄f
->
˘x
->main_conf;

125 
s
->
§v_c⁄f
 = 
addr_c⁄f
->
˘x
->srv_conf;

127 
s
->
addr_ãxt
 = &
addr_c⁄f
->addr_text;

129 
c
->
d©a
 = 
s
;

130 
s
->
c⁄√˘i⁄
 = 
c
;

132 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "*%ui client %V connectedÅo %V",

133 
c
->
numbî
, &c->
addr_ãxt
, 
s
->addr_text);

135 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_maû_log_˘x_t
));

136 i‡(
˘x
 =
NULL
) {

137 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

141 
˘x
->
˛õ¡
 = &
c
->
addr_ãxt
;

142 
˘x
->
£ssi⁄
 = 
s
;

144 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

145 
c
->
log
->
h™dÀr
 = 
ngx_maû_log_îr‹
;

146 
c
->
log
->
d©a
 = 
˘x
;

147 
c
->
log
->
a˘i⁄
 = "sending client greetingÜine";

149 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

151 #i‡(
NGX_MAIL_SSL
)

153 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

155 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

157 i‡(
s¶cf
->
íabÀ
) {

158 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

160 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

164 i‡(
addr_c⁄f
->
s¶
) {

166 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

168 i‡(
s¶cf
->
s¶
.
˘x
 =
NULL
) {

169 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

172 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

176 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

183 
	`ngx_maû_öô_£ssi⁄
(
c
);

184 
	}
}

187 #i‡(
NGX_MAIL_SSL
)

190 
	$ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
)

192 
ngx_c⁄√˘i⁄_t
 *
c
;

193 
ngx_maû_£ssi⁄_t
 *
s
;

194 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

196 
c
 = 
ªv
->
d©a
;

197 
s
 = 
c
->
d©a
;

198 
s
->
°¨âls
 = 1;

200 
c
->
log
->
a˘i⁄
 = "in starttls state";

202 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

204 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

205 
	}
}

209 
	$ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
)

211 
ngx_maû_£ssi⁄_t
 *
s
;

212 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

214 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
s¶
, 
c
, 0Ë=
NGX_ERROR
) {

215 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

219 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

221 
s
 = 
c
->
d©a
;

223 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

225 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

227 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_s¶_h™dshake_h™dÀr
;

232 
	`ngx_maû_s¶_h™dshake_h™dÀr
(
c
);

233 
	}
}

237 
	$ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

239 
ngx_maû_£ssi⁄_t
 *
s
;

240 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

242 i‡(
c
->
s¶
->
h™dshaked
) {

244 
s
 = 
c
->
d©a
;

246 i‡(
s
->
°¨âls
) {

247 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

249 
c
->
ªad
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
öô_¥Ÿocﬁ
;

250 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

252 
cscf
->
¥Ÿocﬁ
->
	`öô_¥Ÿocﬁ
(
c
->
ªad
);

257 
c
->
ªad
->
ªady
 = 0;

259 
	`ngx_maû_öô_£ssi⁄
(
c
);

263 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

264 
	}
}

270 
	$ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

272 
ngx_maû_£ssi⁄_t
 *
s
;

273 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

275 
s
 = 
c
->
d©a
;

277 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

279 
s
->
¥Ÿocﬁ
 = 
cscf
->¥Ÿocﬁ->
ty≥
;

281 
s
->
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

282 i‡(
s
->
˘x
 =
NULL
) {

283 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

287 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

289 
cscf
->
¥Ÿocﬁ
->
	`öô_£ssi⁄
(
s
, 
c
);

290 
	}
}

293 
ngx_öt_t


294 
	$ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

295 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
)

297 
s
->
ß…
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

298 (" <18446744073709551616.@>" 
CRLF
) - 1

299 + 
NGX_TIME_T_LEN


300 + 
cscf
->
£rvî_«me
.
Àn
);

301 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

302  
NGX_ERROR
;

305 
s
->
ß…
.
Àn
 = 
	`ngx_•rötf
(s->ß….
d©a
, "<%ul.%T@%V>" 
CRLF
,

306 
	`ngx_øndom
(), 
	`ngx_time
(), &
cscf
->
£rvî_«me
)

307 - 
s
->
ß…
.
d©a
;

309  
NGX_OK
;

310 
	}
}

313 #i‡(
NGX_MAIL_SSL
)

315 
ngx_öt_t


316 
	$ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

318 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

320 i‡(
c
->
s¶
) {

324 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

326 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

331 
	}
}

336 
ngx_öt_t


337 
	$ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
)

339 
u_ch¨
 *
p
, *
œ°
;

340 
ngx_°r_t
 *
¨g
, 
∂aö
;

342 
¨g
 = 
s
->
¨gs
.
ñts
;

344 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

345 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

346 "maûáuthÖœö: \"%V\"", &
¨g
[
n
]);

349 
∂aö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

350 i‡(
∂aö
.
d©a
 =
NULL
) {

351  
NGX_ERROR
;

354 i‡(
	`ngx_decode_ba£64
(&
∂aö
, &
¨g
[
n
]Ë!
NGX_OK
) {

355 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

357  
NGX_MAIL_PARSE_INVALID_COMMAND
;

360 
p
 = 
∂aö
.
d©a
;

361 
œ°
 = 
p
 + 
∂aö
.
Àn
;

363 
p
 < 
œ°
 && *p++) { }

365 i‡(
p
 =
œ°
) {

366 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

368  
NGX_MAIL_PARSE_INVALID_COMMAND
;

371 
s
->
logö
.
d©a
 = 
p
;

373 
p
 < 
œ°
 && *p) {Ö++; }

375 i‡(
p
 =
œ°
) {

376 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

378  
NGX_MAIL_PARSE_INVALID_COMMAND
;

381 
s
->
logö
.
Àn
 = 
p
++ - s->logö.
d©a
;

383 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

384 
s
->
∑sswd
.
d©a
 = 
p
;

386 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

387 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

388 "maûáuthÖœö: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

391  
NGX_DONE
;

392 
	}
}

395 
ngx_öt_t


396 
	$ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

397 
ngx_uöt_t
 
n
)

399 
ngx_°r_t
 *
¨g
;

401 
¨g
 = 
s
->
¨gs
.
ñts
;

403 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

404 "maûáuthÜogö u£∫ame: \"%V\"", &
¨g
[
n
]);

406 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

407 i‡(
s
->
logö
.
d©a
 =
NULL
) {

408  
NGX_ERROR
;

411 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[
n
]Ë!
NGX_OK
) {

412 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

414  
NGX_MAIL_PARSE_INVALID_COMMAND
;

417 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

418 "maûáuthÜogö u£∫ame: \"%V\"", &
s
->
logö
);

420  
NGX_OK
;

421 
	}
}

424 
ngx_öt_t


425 
	$ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

427 
ngx_°r_t
 *
¨g
;

429 
¨g
 = 
s
->
¨gs
.
ñts
;

431 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

432 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

433 "maûáuthÜogöÖassw‹d: \"%V\"", &
¨g
[0]);

436 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

437 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

438 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

439  
NGX_ERROR
;

442 i‡(
	`ngx_decode_ba£64
(&
s
->
∑sswd
, &
¨g
[0]Ë!
NGX_OK
) {

443 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

445  
NGX_MAIL_PARSE_INVALID_COMMAND
;

448 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

449 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

450 "maûáuthÜogöÖassw‹d: \"%V\"", &
s
->
∑sswd
);

453  
NGX_DONE
;

454 
	}
}

457 
ngx_öt_t


458 
	$ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

459 *
¥efix
, 
size_t
 
Àn
)

461 
u_ch¨
 *
p
;

462 
ngx_°r_t
 
ß…
;

463 
ngx_uöt_t
 
n
;

465 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
 + 
	`ngx_ba£64_ícoded_Àngth
(
s
->
ß…
.len) + 2);

466 i‡(
p
 =
NULL
) {

467  
NGX_ERROR
;

470 
ß…
.
d©a
 = 
	`ngx_˝ymem
(
p
, 
¥efix
, 
Àn
);

471 
s
->
ß…
.
Àn
 -= 2;

473 
	`ngx_ícode_ba£64
(&
ß…
, &
s
->salt);

475 
s
->
ß…
.
Àn
 += 2;

476 
n
 = 
Àn
 + 
ß…
.len;

477 
p
[
n
++] = 
CR
;Ö[n++] = 
LF
;

479 
s
->
out
.
Àn
 = 
n
;

480 
s
->
out
.
d©a
 = 
p
;

482  
NGX_OK
;

483 
	}
}

486 
ngx_öt_t


487 
	$ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

489 
u_ch¨
 *
p
, *
œ°
;

490 
ngx_°r_t
 *
¨g
;

492 
¨g
 = 
s
->
¨gs
.
ñts
;

494 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

495 "maûáuth cøm-md5: \"%V\"", &
¨g
[0]);

497 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

498 i‡(
s
->
logö
.
d©a
 =
NULL
) {

499  
NGX_ERROR
;

502 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[0]Ë!
NGX_OK
) {

503 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

505  
NGX_MAIL_PARSE_INVALID_COMMAND
;

508 
p
 = 
s
->
logö
.
d©a
;

509 
œ°
 = 
p
 + 
s
->
logö
.
Àn
;

511 
p
 < 
œ°
) {

512 i‡(*
p
++ == ' ') {

513 
s
->
logö
.
Àn
 = 
p
 - s->logö.
d©a
 - 1;

514 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

515 
s
->
∑sswd
.
d©a
 = 
p
;

520 i‡(
s
->
∑sswd
.
Àn
 != 32) {

521 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

523  
NGX_MAIL_PARSE_INVALID_COMMAND
;

526 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

527 "maûáuth cøm-md5: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

529 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_CRAM_MD5
;

531  
NGX_DONE
;

532 
	}
}

536 
	$ngx_maû_£nd
(
ngx_evít_t
 *
wev
)

538 
ngx_öt_t
 
n
;

539 
ngx_c⁄√˘i⁄_t
 *
c
;

540 
ngx_maû_£ssi⁄_t
 *
s
;

541 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

543 
c
 = 
wev
->
d©a
;

544 
s
 = 
c
->
d©a
;

546 i‡(
wev
->
timedout
) {

547 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

548 
c
->
timedout
 = 1;

549 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

553 i‡(
s
->
out
.
Àn
 == 0) {

554 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

555 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

561 
n
 = 
c
->
	`£nd
(c, 
s
->
out
.
d©a
, s->out.
Àn
);

563 i‡(
n
 > 0) {

564 
s
->
out
.
Àn
 -
n
;

566 i‡(
wev
->
timî_£t
) {

567 
	`ngx_dñ_timî
(
wev
);

570 i‡(
s
->
quô
) {

571 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

575 i‡(
s
->
blocked
) {

576 
c
->
ªad
->
	`h™dÀr
(c->read);

582 i‡(
n
 =
NGX_ERROR
) {

583 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

589 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

591 
	`ngx_add_timî
(
c
->
wrôe
, 
cscf
->
timeout
);

593 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

594 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

597 
	}
}

600 
ngx_öt_t


601 
	$ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

603 
ssize_t
 
n
;

604 
ngx_öt_t
 
rc
;

605 
ngx_°r_t
 
l
;

606 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

608 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

610 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

611 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

612  
NGX_ERROR
;

615 i‡(
n
 > 0) {

616 
s
->
buf„r
->
œ°
 +
n
;

619 i‡(
n
 =
NGX_AGAIN
) {

620 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

621 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

622  
NGX_ERROR
;

625  
NGX_AGAIN
;

628 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

630 
rc
 = 
cscf
->
¥Ÿocﬁ
->
	`∑r£_comm™d
(
s
);

632 i‡(
rc
 =
NGX_AGAIN
) {

634 i‡(
s
->
buf„r
->
œ°
 < s->buf„r->
íd
) {

635  
rc
;

638 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

639 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

641 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

642 "˛õ¡ síàtoÿl⁄g comm™d \"%V\"", &
l
);

644 
s
->
quô
 = 1;

646  
NGX_MAIL_PARSE_INVALID_COMMAND
;

649 i‡(
rc
 =
NGX_IMAP_NEXT
 ||Ñ¯=
NGX_MAIL_PARSE_INVALID_COMMAND
) {

650  
rc
;

653 i‡(
rc
 =
NGX_ERROR
) {

654 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

655  
NGX_ERROR
;

658  
NGX_OK
;

659 
	}
}

663 
	$ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

665 
s
->
¨gs
.
√…s
 = 0;

666 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

667 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

668 
s
->
°©e
 = 0;

670 i‡(
c
->
ªad
->
timî_£t
) {

671 
	`ngx_dñ_timî
(
c
->
ªad
);

674 
s
->
logö_©ãm±
++;

676 
	`ngx_maû_auth_hâp_öô
(
s
);

677 
	}
}

681 
	$ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

683 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

685 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

687 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
öã∫Æ_£rvî_îr‹
;

688 
s
->
quô
 = 1;

690 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

691 
	}
}

695 
	$ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

697 
ngx_poﬁ_t
 *
poﬁ
;

699 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

700 "˛o£ maû c⁄√˘i⁄: %d", 
c
->
fd
);

702 #i‡(
NGX_MAIL_SSL
)

704 i‡(
c
->
s¶
) {

705 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

706 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_˛o£_c⁄√˘i⁄
;

713 #i‡(
NGX_STAT_STUB
)

714 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

717 
c
->
de°royed
 = 1;

719 
poﬁ
 = 
c
->pool;

721 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

723 
	`ngx_de°roy_poﬁ
(
poﬁ
);

724 
	}
}

727 
u_ch¨
 *

728 
	$ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

730 
u_ch¨
 *
p
;

731 
ngx_maû_£ssi⁄_t
 *
s
;

732 
ngx_maû_log_˘x_t
 *
˘x
;

734 i‡(
log
->
a˘i⁄
) {

735 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

736 
Àn
 -
p
 - 
buf
;

737 
buf
 = 
p
;

740 
˘x
 = 
log
->
d©a
;

742 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", 
˘x
->
˛õ¡
);

743 
Àn
 -
p
 - 
buf
;

744 
buf
 = 
p
;

746 
s
 = 
˘x
->
£ssi⁄
;

748 i‡(
s
 =
NULL
) {

749  
p
;

752 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, "%s, server: %V",

753 
s
->
°¨âls
 ? " using starttls" : "",

754 
s
->
addr_ãxt
);

755 
Àn
 -
p
 - 
buf
;

756 
buf
 = 
p
;

758 i‡(
s
->
logö
.
Àn
 == 0) {

759  
p
;

762 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Üogö: \"%V\"", &
s
->
logö
);

763 
Àn
 -
p
 - 
buf
;

764 
buf
 = 
p
;

766 i‡(
s
->
¥oxy
 =
NULL
) {

767  
p
;

770 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", up°ªam: %V", 
s
->
¥oxy
->
up°ªam
.
«me
);

772  
p
;

773 
	}
}

	@src/mail/ngx_mail_imap_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
,

16 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
,

18 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_öt_t
 
ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
,

20 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

22 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
u_ch¨
 
	gim≠_gªëög
[] = "* OK IMAP4Ñódy" 
CRLF
;

26 
u_ch¨
 
	gim≠_°¨
[] = "* ";

27 
u_ch¨
 
	gim≠_ok
[] = "OK com∂ëed" 
CRLF
;

28 
u_ch¨
 
	gim≠_√xt
[] = "+ OK" 
CRLF
;

29 
u_ch¨
 
	gim≠_∂aö_√xt
[] = "+ " 
CRLF
;

30 
u_ch¨
 
	gim≠_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

31 
u_ch¨
 
	gim≠_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

32 
u_ch¨
 
	gim≠_bye
[] = "* BYE" 
CRLF
;

33 
u_ch¨
 
	gim≠_övÆid_comm™d
[] = "BAD invÆid comm™d" 
CRLF
;

37 
	$ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

39 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

41 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

43 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_gªëög
);

45 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_öô_¥Ÿocﬁ
;

47 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

49 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

50 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

53 
	`ngx_maû_£nd
(
c
->
wrôe
);

54 
	}
}

58 
	$ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

60 
ngx_c⁄√˘i⁄_t
 *
c
;

61 
ngx_maû_£ssi⁄_t
 *
s
;

62 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

64 
c
 = 
ªv
->
d©a
;

66 
c
->
log
->
a˘i⁄
 = "ináuth state";

68 i‡(
ªv
->
timedout
) {

69 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

70 
c
->
timedout
 = 1;

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

75 
s
 = 
c
->
d©a
;

77 i‡(
s
->
buf„r
 =
NULL
) {

78 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

79 =
NGX_ERROR
)

81 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

85 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

87 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
iscf
->
˛õ¡_buf„r_size
);

88 i‡(
s
->
buf„r
 =
NULL
) {

89 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

94 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

95 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_auth_°©e
;

97 
	`ngx_maû_im≠_auth_°©e
(
ªv
);

98 
	}
}

102 
	$ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
)

104 
u_ch¨
 *
p
, *
d°
, *
§c
, *
íd
;

105 
ngx_°r_t
 *
¨g
;

106 
ngx_öt_t
 
rc
;

107 
ngx_uöt_t
 
èg
, 
i
;

108 
ngx_c⁄√˘i⁄_t
 *
c
;

109 
ngx_maû_£ssi⁄_t
 *
s
;

111 
c
 = 
ªv
->
d©a
;

112 
s
 = 
c
->
d©a
;

114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth state");

116 i‡(
ªv
->
timedout
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

118 
c
->
timedout
 = 1;

119 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

123 i‡(
s
->
out
.
Àn
) {

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imap send handler busy");

125 
s
->
blocked
 = 1;

129 
s
->
blocked
 = 0;

131 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

133 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

137 
èg
 = 1;

138 
s
->
ãxt
.
Àn
 = 0;

139 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_ok
);

141 i‡(
rc
 =
NGX_OK
) {

143 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth command: %i",

144 
s
->
comm™d
);

146 i‡(
s
->
back¶ash
) {

148 
¨g
 = 
s
->
¨gs
.
ñts
;

150 
i
 = 0; i < 
s
->
¨gs
.
√…s
; i++) {

151 
d°
 = 
¨g
[
i
].
d©a
;

152 
íd
 = 
d°
 + 
¨g
[
i
].
Àn
;

154 
§c
 = 
d°
; sr¯< 
íd
; dst++) {

155 *
d°
 = *
§c
;

156 i‡(*
§c
++ == '\\') {

157 *
d°
 = *
§c
++;

161 
¨g
[
i
].
Àn
 = 
d°
 -árg[i].
d©a
;

164 
s
->
back¶ash
 = 0;

167 
s
->
maû_°©e
) {

169 
ngx_im≠_°¨t
:

171 
s
->
comm™d
) {

173 
NGX_IMAP_LOGIN
:

174 
rc
 = 
	`ngx_maû_im≠_logö
(
s
, 
c
);

177 
NGX_IMAP_AUTHENTICATE
:

178 
rc
 = 
	`ngx_maû_im≠_authítiˇã
(
s
, 
c
);

179 
èg
 = (
rc
 !
NGX_OK
);

182 
NGX_IMAP_CAPABILITY
:

183 
rc
 = 
	`ngx_maû_im≠_ˇ∑bûôy
(
s
, 
c
);

186 
NGX_IMAP_LOGOUT
:

187 
s
->
quô
 = 1;

188 
	`ngx_°r_£t
(&
s
->
ãxt
, 
im≠_bye
);

191 
NGX_IMAP_NOOP
:

194 
NGX_IMAP_STARTTLS
:

195 
rc
 = 
	`ngx_maû_im≠_°¨âls
(
s
, 
c
);

199 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

205 
ngx_im≠_auth_logö_u£∫ame
:

206 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

208 
èg
 = 0;

209 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

210 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

214 
ngx_im≠_auth_logö_∑ssw‹d
:

215 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

218 
ngx_im≠_auth_∂aö
:

219 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

222 
ngx_im≠_auth_¸am_md5
:

223 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

227 } i‡(
rc
 =
NGX_IMAP_NEXT
) {

228 
èg
 = 0;

229 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_√xt
);

232 
rc
) {

234 
NGX_DONE
:

235 
	`ngx_maû_auth
(
s
, 
c
);

238 
NGX_ERROR
:

239 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

242 
NGX_MAIL_PARSE_INVALID_COMMAND
:

243 
s
->
°©e
 = 0;

244 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_övÆid_comm™d
);

245 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

249 i‡(
èg
) {

250 i‡(
s
->
èg
.
Àn
 == 0) {

251 
	`ngx_°r_£t
(&
s
->
èg
, 
im≠_°¨
);

254 i‡(
s
->
ègged_löe
.
Àn
 < s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len) {

255 
s
->
ègged_löe
.
Àn
 = s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len;

256 
s
->
ègged_löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->ègged_löe.
Àn
);

257 i‡(
s
->
ègged_löe
.
d©a
 =
NULL
) {

258 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

263 
p
 = 
s
->
ègged_löe
.
d©a
;

265 i‡(
s
->
ãxt
.
Àn
) {

266 
p
 = 
	`ngx_˝ymem
’, 
s
->
ãxt
.
d©a
, s->ãxt.
Àn
);

269 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

270 
	`ngx_mem˝y
(
p
, 
s
->
out
.
d©a
, s->out.
Àn
);

272 
s
->
out
.
Àn
 = s->
ãxt
.À¿+ s->
èg
.len + s->out.len;

273 
s
->
out
.
d©a
 = s->
ègged_löe
.data;

276 i‡(
rc
 !
NGX_IMAP_NEXT
) {

277 
s
->
¨gs
.
√…s
 = 0;

279 i‡(
s
->
°©e
) {

281 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
 + s->
èg
.
Àn
;

282 
s
->
buf„r
->
pos
 = s->
¨g_°¨t
;

283 
s
->
buf„r
->
œ°
 = s->
¨g_°¨t
;

286 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

287 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

288 
s
->
èg
.
Àn
 = 0;

292 
	`ngx_maû_£nd
(
c
->
wrôe
);

293 
	}
}

296 
ngx_öt_t


297 
	$ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

299 
ngx_°r_t
 *
¨g
;

301 #i‡(
NGX_MAIL_SSL
)

302 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

303  
NGX_MAIL_PARSE_INVALID_COMMAND
;

307 
¨g
 = 
s
->
¨gs
.
ñts
;

309 i‡(
s
->
¨gs
.
√…s
 !2 || 
¨g
[0].
Àn
 == 0) {

310  
NGX_MAIL_PARSE_INVALID_COMMAND
;

313 
s
->
logö
.
Àn
 = 
¨g
[0].len;

314 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

315 i‡(
s
->
logö
.
d©a
 =
NULL
) {

316  
NGX_ERROR
;

319 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

321 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

332 &
s
->
logö
, &s->
∑sswd
);

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

335 "im≠Üogö:\"%V\"", &
s
->
logö
);

338  
NGX_DONE
;

339 
	}
}

342 
ngx_öt_t


343 
	$ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

345 
ngx_öt_t
 
rc
;

346 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

347 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

349 #i‡(
NGX_MAIL_SSL
)

350 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

351  
NGX_MAIL_PARSE_INVALID_COMMAND
;

355 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

357 
rc
) {

359 
NGX_MAIL_AUTH_LOGIN
:

361 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_u£∫ame
);

362 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_u£∫ame
;

364  
NGX_OK
;

366 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

368 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

369 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

371  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

373 
NGX_MAIL_AUTH_PLAIN
:

375 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∂aö_√xt
);

376 
s
->
maû_°©e
 = 
ngx_im≠_auth_∂aö
;

378  
NGX_OK
;

380 
NGX_MAIL_AUTH_CRAM_MD5
:

382 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

384 i‡(!(
iscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

385  
NGX_MAIL_PARSE_INVALID_COMMAND
;

388 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

389 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

391 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

392  
NGX_ERROR
;

396 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

397 
s
->
maû_°©e
 = 
ngx_im≠_auth_¸am_md5
;

398  
NGX_OK
;

401  
NGX_ERROR
;

404  
rc
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

411 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

413 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

415 #i‡(
NGX_MAIL_SSL
)

417 i‡(
c
->
s¶
 =
NULL
) {

418 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

420 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

422 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

423 
s
->
ãxt
 = 
iscf
->
°¨âls_ˇ∑bûôy
;

424  
NGX_OK
;

427 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

428 
s
->
ãxt
 = 
iscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

429  
NGX_OK
;

434 
s
->
ãxt
 = 
iscf
->
ˇ∑bûôy
;

436  
NGX_OK
;

437 
	}
}

440 
ngx_öt_t


441 
	$ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

443 #i‡(
NGX_MAIL_SSL
)

444 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

446 i‡(
c
->
s¶
 =
NULL
) {

447 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

448 i‡(
s¶cf
->
°¨âls
) {

449 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

450  
NGX_OK
;

456  
NGX_MAIL_PARSE_INVALID_COMMAND
;

457 
	}
}

	@src/mail/ngx_mail_imap_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 *
ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_im≠_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("IMAP4"),

22 
ngx_°rög
("IMAP4rev1"),

23 
ngx_°rög
("UIDPLUS"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_im≠_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_im≠_auth_mëhods_«mes
[] = {

37 
ngx_°rög
("AUTH=PLAIN"),

38 
ngx_°rög
("AUTH=LOGIN"),

39 
ngx_nuŒ_°rög
,

40 
ngx_°rög
("AUTH=CRAM-MD5"),

41 
ngx_nuŒ_°rög


45 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_im≠_¥Ÿocﬁ
 = {

46 
ngx_°rög
("imap"),

48 
NGX_MAIL_IMAP_PROTOCOL
,

50 
ngx_maû_im≠_öô_£ssi⁄
,

51 
ngx_maû_im≠_öô_¥Ÿocﬁ
,

52 
ngx_maû_im≠_∑r£_comm™d
,

53 
ngx_maû_im≠_auth_°©e
,

55 
ngx_°rög
("* BAD i¡î«»£rvîÉº‹" 
CRLF
)

59 
ngx_comm™d_t
 
	gngx_maû_im≠_comm™ds
[] = {

61 { 
ngx_°rög
("imap_client_buffer"),

62 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_size_¶Ÿ
,

64 
NGX_MAIL_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

66 
NULL
 },

68 { 
ngx_°rög
("imap_capabilities"),

69 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

70 
ngx_maû_ˇ∑bûôõs
,

71 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
ˇ∑bûôõs
),

73 
NULL
 },

75 { 
ngx_°rög
("imap_auth"),

76 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

77 
ngx_c⁄f_£t_bômask_¶Ÿ
,

78 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
auth_mëhods
),

80 &
ngx_maû_im≠_auth_mëhods
 },

82 
ngx_nuŒ_comm™d


86 
ngx_maû_moduÀ_t
 
	gngx_maû_im≠_moduÀ_˘x
 = {

87 &
ngx_maû_im≠_¥Ÿocﬁ
,

89 
NULL
,

90 
NULL
,

92 
ngx_maû_im≠_¸óã_§v_c⁄f
,

93 
ngx_maû_im≠_mîge_§v_c⁄f


97 
ngx_moduÀ_t
 
	gngx_maû_im≠_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_maû_im≠_moduÀ_˘x
,

100 
ngx_maû_im≠_comm™ds
,

101 
NGX_MAIL_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


114 
	$ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

116 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

118 
iscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_im≠_§v_c⁄f_t
));

119 i‡(
iscf
 =
NULL
) {

120  
NULL
;

123 
iscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

125 i‡(
	`ngx_¨øy_öô
(&
iscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

126 !
NGX_OK
)

128  
NULL
;

131  
iscf
;

132 
	}
}

136 
	$ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

138 
ngx_maû_im≠_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

139 
ngx_maû_im≠_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

141 
u_ch¨
 *
p
, *
auth
;

142 
size_t
 
size
;

143 
ngx_°r_t
 *
c
, *
d
;

144 
ngx_uöt_t
 
i
, 
m
;

146 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

147 
¥ev
->
˛õ¡_buf„r_size
,

148 (
size_t
Ë
ngx_∑gesize
);

150 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

151 
¥ev
->
auth_mëhods
,

152 (
NGX_CONF_BITMASK_SET


153 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

156 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

157 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

160 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

162 
d
 = 
ngx_maû_im≠_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

163 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

164 i‡(
c
 =
NULL
) {

165  
NGX_CONF_ERROR
;

168 *
c
 = *
d
;

172 
size
 = ("* CAPABILITY" 
CRLF
) - 1;

174 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

175 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

176 
size
 +1 + 
c
[
i
].
Àn
;

179 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

180 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

181 
m
 <<1, 
i
++)

183 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

184 
size
 +1 + 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
;

188 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

189 i‡(
p
 =
NULL
) {

190  
NGX_CONF_ERROR
;

193 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

194 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

196 
p
 = 
	`ngx_˝ymem
(p, "* CAPABILITY", ("* CAPABILITY") - 1);

198 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

199 *
p
++ = ' ';

200 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

203 
auth
 = 
p
;

205 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

206 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

207 
m
 <<1, 
i
++)

209 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

210 *
p
++ = ' ';

211 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
d©a
,

212 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
);

216 *
p
++ = 
CR
; *∞
LF
;

219 
size
 += (" STARTTLS") - 1;

221 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

222 i‡(
p
 =
NULL
) {

223  
NGX_CONF_ERROR
;

226 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

227 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

229 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

230 
c⁄f
->
ˇ∑bûôy
.
Àn
 - ((
CRLF
) - 1));

231 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS", (" STARTTLS") - 1);

232 *
p
++ = 
CR
; *∞
LF
;

235 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
Ë+ (
CRLF
) - 1

238 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

239 i‡(
p
 =
NULL
) {

240  
NGX_CONF_ERROR
;

243 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

244 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

246 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

247 
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
);

248 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS LOGINDISABLED",

250 *
p
++ = 
CR
; *∞
LF
;

252  
NGX_CONF_OK
;

253 
	}
}

	@src/mail/ngx_mail_imap_module.h

8 #i‚de‡
_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
size_t
 
	m˛õ¡_buf„r_size
;

20 
ngx_°r_t
 
	mˇ∑bûôy
;

21 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

22 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

24 
ngx_uöt_t
 
	mauth_mëhods
;

26 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

27 } 
	tngx_maû_im≠_§v_c⁄f_t
;

30 
ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

32 
ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
);

33 
ngx_öt_t
 
ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

36 
ngx_moduÀ_t
 
ngx_maû_im≠_moduÀ
;

	@src/mail/ngx_mail_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 
ngx_öt_t


15 
	$ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

17 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

18 
ngx_°r_t
 *
¨g
;

20 
sw_°¨t
 = 0,

21 
sw_•a˚s_bef‹e_¨gumít
,

22 
sw_¨gumít
,

23 
sw_Æmo°_d⁄e


24 } 
°©e
;

26 
°©e
 = 
s
->state;

28 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

29 
ch
 = *
p
;

31 
°©e
) {

34 
sw_°¨t
:

35 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

36 
c
 = 
s
->
buf„r
->
°¨t
;

38 i‡(
p
 - 
c
 == 4) {

40 
c0
 = 
	`ngx_touµî
(
c
[0]);

41 
c1
 = 
	`ngx_touµî
(
c
[1]);

42 
c2
 = 
	`ngx_touµî
(
c
[2]);

43 
c3
 = 
	`ngx_touµî
(
c
[3]);

45 i‡(
c0
 ='U' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'R')

47 
s
->
comm™d
 = 
NGX_POP3_USER
;

49 } i‡(
c0
 ='P' && 
c1
 ='A' && 
c2
 ='S' && 
c3
 == 'S')

51 
s
->
comm™d
 = 
NGX_POP3_PASS
;

53 } i‡(
c0
 ='A' && 
c1
 ='P' && 
c2
 ='O' && 
c3
 == 'P')

55 
s
->
comm™d
 = 
NGX_POP3_APOP
;

57 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

59 
s
->
comm™d
 = 
NGX_POP3_QUIT
;

61 } i‡(
c0
 ='C' && 
c1
 ='A' && 
c2
 ='P' && 
c3
 == 'A')

63 
s
->
comm™d
 = 
NGX_POP3_CAPA
;

65 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

67 
s
->
comm™d
 = 
NGX_POP3_AUTH
;

69 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

71 
s
->
comm™d
 = 
NGX_POP3_NOOP
;

72 #i‡(
NGX_MAIL_SSL
)

73 } i‡(
c0
 ='S' && 
c1
 ='T' && 
c2
 ='L' && 
c3
 == 'S')

75 
s
->
comm™d
 = 
NGX_POP3_STLS
;

78 
övÆid
;

82 
övÆid
;

85 
ch
) {

87 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

89 
CR
:

90 
°©e
 = 
sw_Æmo°_d⁄e
;

92 
LF
:

93 
d⁄e
;

98 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

99 
övÆid
;

104 
sw_•a˚s_bef‹e_¨gumít
:

105 
ch
) {

108 
CR
:

109 
°©e
 = 
sw_Æmo°_d⁄e
;

110 
s
->
¨g_íd
 = 
p
;

112 
LF
:

113 
s
->
¨g_íd
 = 
p
;

114 
d⁄e
;

116 i‡(
s
->
¨gs
.
√…s
 <= 2) {

117 
°©e
 = 
sw_¨gumít
;

118 
s
->
¨g_°¨t
 = 
p
;

121 
övÆid
;

125 
sw_¨gumít
:

126 
ch
) {

135 i‡(
s
->
comm™d
 =
NGX_POP3_USER


136 || 
s
->
comm™d
 =
NGX_POP3_PASS
)

143 
CR
:

144 
LF
:

145 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

146 i‡(
¨g
 =
NULL
) {

147  
NGX_ERROR
;

149 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

150 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

151 
s
->
¨g_°¨t
 = 
NULL
;

153 
ch
) {

155 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

157 
CR
:

158 
°©e
 = 
sw_Æmo°_d⁄e
;

160 
LF
:

161 
d⁄e
;

170 
sw_Æmo°_d⁄e
:

171 
ch
) {

172 
LF
:

173 
d⁄e
;

175 
övÆid
;

180 
s
->
buf„r
->
pos
 = 
p
;

181 
s
->
°©e
 = state;

183  
NGX_AGAIN
;

185 
d⁄e
:

187 
s
->
buf„r
->
pos
 = 
p
 + 1;

189 i‡(
s
->
¨g_°¨t
) {

190 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

191 i‡(
¨g
 =
NULL
) {

192  
NGX_ERROR
;

194 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

195 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

196 
s
->
¨g_°¨t
 = 
NULL
;

199 
s
->
°©e
 = (s->
comm™d
 !
NGX_POP3_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

201  
NGX_OK
;

203 
övÆid
:

205 
s
->
°©e
 = 
sw_°¨t
;

206 
s
->
¨g_°¨t
 = 
NULL
;

208  
NGX_MAIL_PARSE_INVALID_COMMAND
;

209 
	}
}

212 
ngx_öt_t


213 
	$ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

215 
u_ch¨
 
ch
, *
p
, *
c
;

216 
ngx_°r_t
 *
¨g
;

218 
sw_°¨t
 = 0,

219 
sw_•a˚s_bef‹e_comm™d
,

220 
sw_comm™d
,

221 
sw_•a˚s_bef‹e_¨gumít
,

222 
sw_¨gumít
,

223 
sw_back¶ash
,

224 
sw_lôîÆ
,

225 
sw_no_sync_lôîÆ_¨gumít
,

226 
sw_°¨t_lôîÆ_¨gumít
,

227 
sw_lôîÆ_¨gumít
,

228 
sw_íd_lôîÆ_¨gumít
,

229 
sw_Æmo°_d⁄e


230 } 
°©e
;

232 
°©e
 = 
s
->state;

234 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

235 
ch
 = *
p
;

237 
°©e
) {

240 
sw_°¨t
:

241 
ch
) {

243 
s
->
èg
.
Àn
 = 
p
 - s->
buf„r
->
°¨t
 + 1;

244 
s
->
èg
.
d©a
 = s->
buf„r
->
°¨t
;

245 
°©e
 = 
sw_•a˚s_bef‹e_comm™d
;

247 
CR
:

248 
s
->
°©e
 = 
sw_°¨t
;

249  
NGX_MAIL_PARSE_INVALID_COMMAND
;

250 
LF
:

251 
s
->
°©e
 = 
sw_°¨t
;

252  
NGX_MAIL_PARSE_INVALID_COMMAND
;

256 
sw_•a˚s_bef‹e_comm™d
:

257 
ch
) {

260 
CR
:

261 
s
->
°©e
 = 
sw_°¨t
;

262  
NGX_MAIL_PARSE_INVALID_COMMAND
;

263 
LF
:

264 
s
->
°©e
 = 
sw_°¨t
;

265  
NGX_MAIL_PARSE_INVALID_COMMAND
;

267 
s
->
cmd_°¨t
 = 
p
;

268 
°©e
 = 
sw_comm™d
;

273 
sw_comm™d
:

274 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

276 
c
 = 
s
->
cmd_°¨t
;

278 
p
 - 
c
) {

281 i‡((
c
[0] == 'N' || c[0] == 'n')

282 && (
c
[1] == 'O'|| c[1] == 'o')

283 && (
c
[2] == 'O'|| c[2] == 'o')

284 && (
c
[3] == 'P'|| c[3] == 'p'))

286 
s
->
comm™d
 = 
NGX_IMAP_NOOP
;

289 
övÆid
;

294 i‡((
c
[0] == 'L'|| c[0] == 'l')

295 && (
c
[1] == 'O'|| c[1] == 'o')

296 && (
c
[2] == 'G'|| c[2] == 'g')

297 && (
c
[3] == 'I'|| c[3] == 'i')

298 && (
c
[4] == 'N'|| c[4] == 'n'))

300 
s
->
comm™d
 = 
NGX_IMAP_LOGIN
;

303 
övÆid
;

308 i‡((
c
[0] == 'L'|| c[0] == 'l')

309 && (
c
[1] == 'O'|| c[1] == 'o')

310 && (
c
[2] == 'G'|| c[2] == 'g')

311 && (
c
[3] == 'O'|| c[3] == 'o')

312 && (
c
[4] == 'U'|| c[4] == 'u')

313 && (
c
[5] == 'T'|| c[5] == 't'))

315 
s
->
comm™d
 = 
NGX_IMAP_LOGOUT
;

318 
övÆid
;

322 #i‡(
NGX_MAIL_SSL
)

324 i‡((
c
[0] == 'S'|| c[0] == 's')

325 && (
c
[1] == 'T'|| c[1] == 't')

326 && (
c
[2] == 'A'|| c[2] == 'a')

327 && (
c
[3] == 'R'|| c[3] == 'r')

328 && (
c
[4] == 'T'|| c[4] == 't')

329 && (
c
[5] == 'T'|| c[5] == 't')

330 && (
c
[6] == 'L'|| c[6] == 'l')

331 && (
c
[7] == 'S'|| c[7] == 's'))

333 
s
->
comm™d
 = 
NGX_IMAP_STARTTLS
;

336 
övÆid
;

342 i‡((
c
[0] == 'C'|| c[0] == 'c')

343 && (
c
[1] == 'A'|| c[1] == 'a')

344 && (
c
[2] == 'P'|| c[2] == 'p')

345 && (
c
[3] == 'A'|| c[3] == 'a')

346 && (
c
[4] == 'B'|| c[4] == 'b')

347 && (
c
[5] == 'I'|| c[5] == 'i')

348 && (
c
[6] == 'L'|| c[6] == 'l')

349 && (
c
[7] == 'I'|| c[7] == 'i')

350 && (
c
[8] == 'T'|| c[8] == 't')

351 && (
c
[9] == 'Y'|| c[9] == 'y'))

353 
s
->
comm™d
 = 
NGX_IMAP_CAPABILITY
;

356 
övÆid
;

361 i‡((
c
[0] == 'A'|| c[0] == 'a')

362 && (
c
[1] == 'U'|| c[1] == 'u')

363 && (
c
[2] == 'T'|| c[2] == 't')

364 && (
c
[3] == 'H'|| c[3] == 'h')

365 && (
c
[4] == 'E'|| c[4] == 'e')

366 && (
c
[5] == 'N'|| c[5] == 'n')

367 && (
c
[6] == 'T'|| c[6] == 't')

368 && (
c
[7] == 'I'|| c[7] == 'i')

369 && (
c
[8] == 'C'|| c[8] == 'c')

370 && (
c
[9] == 'A'|| c[9] == 'a')

371 && (
c
[10] == 'T'|| c[10] == 't')

372 && (
c
[11] == 'E'|| c[11] == 'e'))

374 
s
->
comm™d
 = 
NGX_IMAP_AUTHENTICATE
;

377 
övÆid
;

382 
övÆid
;

385 
ch
) {

387 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

389 
CR
:

390 
°©e
 = 
sw_Æmo°_d⁄e
;

392 
LF
:

393 
d⁄e
;

398 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

399 
övÆid
;

404 
sw_•a˚s_bef‹e_¨gumít
:

405 
ch
) {

408 
CR
:

409 
°©e
 = 
sw_Æmo°_d⁄e
;

410 
s
->
¨g_íd
 = 
p
;

412 
LF
:

413 
s
->
¨g_íd
 = 
p
;

414 
d⁄e
;

416 i‡(
s
->
¨gs
.
√…s
 <= 2) {

417 
s
->
quŸed
 = 1;

418 
s
->
¨g_°¨t
 = 
p
 + 1;

419 
°©e
 = 
sw_¨gumít
;

422 
övÆid
;

424 i‡(
s
->
¨gs
.
√…s
 <= 2) {

425 
°©e
 = 
sw_lôîÆ
;

428 
övÆid
;

430 i‡(
s
->
¨gs
.
√…s
 <= 2) {

431 
s
->
¨g_°¨t
 = 
p
;

432 
°©e
 = 
sw_¨gumít
;

435 
övÆid
;

439 
sw_¨gumít
:

440 i‡(
ch
 =' ' && 
s
->
quŸed
) {

444 
ch
) {

446 i‡(!
s
->
quŸed
) {

449 
s
->
quŸed
 = 0;

452 
CR
:

453 
LF
:

454 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

455 i‡(
¨g
 =
NULL
) {

456  
NGX_ERROR
;

458 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

459 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

460 
s
->
¨g_°¨t
 = 
NULL
;

462 
ch
) {

465 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

467 
CR
:

468 
°©e
 = 
sw_Æmo°_d⁄e
;

470 
LF
:

471 
d⁄e
;

475 i‡(
s
->
quŸed
) {

476 
s
->
back¶ash
 = 1;

477 
°©e
 = 
sw_back¶ash
;

483 
sw_back¶ash
:

484 
ch
) {

485 
CR
:

486 
LF
:

487 
övÆid
;

489 
°©e
 = 
sw_¨gumít
;

493 
sw_lôîÆ
:

494 i‡(
ch
 >= '0' && ch <= '9') {

495 
s
->
lôîÆ_Àn
 = s->lôîÆ_À¿* 10 + (
ch
 - '0');

498 i‡(
ch
 == '}') {

499 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

502 i‡(
ch
 == '+') {

503 
°©e
 = 
sw_no_sync_lôîÆ_¨gumít
;

506 
övÆid
;

508 
sw_no_sync_lôîÆ_¨gumít
:

509 i‡(
ch
 == '}') {

510 
s
->
no_sync_lôîÆ
 = 1;

511 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

514 
övÆid
;

516 
sw_°¨t_lôîÆ_¨gumít
:

517 
ch
) {

518 
CR
:

520 
LF
:

521 
s
->
buf„r
->
pos
 = 
p
 + 1;

522 
s
->
¨g_°¨t
 = 
p
 + 1;

523 i‡(
s
->
no_sync_lôîÆ
 == 0) {

524 
s
->
°©e
 = 
sw_lôîÆ_¨gumít
;

525  
NGX_IMAP_NEXT
;

527 
°©e
 = 
sw_lôîÆ_¨gumít
;

528 
s
->
no_sync_lôîÆ
 = 0;

531 
övÆid
;

535 
sw_lôîÆ_¨gumít
:

536 i‡(
s
->
lôîÆ_Àn
 && --s->literal_len) {

540 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

541 i‡(
¨g
 =
NULL
) {

542  
NGX_ERROR
;

544 
¨g
->
Àn
 = 
p
 + 1 - 
s
->
¨g_°¨t
;

545 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

546 
s
->
¨g_°¨t
 = 
NULL
;

547 
°©e
 = 
sw_íd_lôîÆ_¨gumít
;

551 
sw_íd_lôîÆ_¨gumít
:

552 
ch
) {

554 i‡(
s
->
¨gs
.
√…s
 <= 2) {

555 
°©e
 = 
sw_lôîÆ
;

558 
övÆid
;

559 
CR
:

560 
°©e
 = 
sw_Æmo°_d⁄e
;

562 
LF
:

563 
d⁄e
;

565 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

570 
sw_Æmo°_d⁄e
:

571 
ch
) {

572 
LF
:

573 
d⁄e
;

575 
övÆid
;

580 
s
->
buf„r
->
pos
 = 
p
;

581 
s
->
°©e
 = state;

583  
NGX_AGAIN
;

585 
d⁄e
:

587 
s
->
buf„r
->
pos
 = 
p
 + 1;

589 i‡(
s
->
¨g_°¨t
) {

590 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

591 i‡(
¨g
 =
NULL
) {

592  
NGX_ERROR
;

594 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

595 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

597 
s
->
¨g_°¨t
 = 
NULL
;

598 
s
->
cmd_°¨t
 = 
NULL
;

599 
s
->
quŸed
 = 0;

600 
s
->
no_sync_lôîÆ
 = 0;

601 
s
->
lôîÆ_Àn
 = 0;

604 
s
->
°©e
 = (s->
comm™d
 !
NGX_IMAP_AUTHENTICATE
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

606  
NGX_OK
;

608 
övÆid
:

610 
s
->
°©e
 = 
sw_°¨t
;

611 
s
->
quŸed
 = 0;

612 
s
->
no_sync_lôîÆ
 = 0;

613 
s
->
lôîÆ_Àn
 = 0;

615  
NGX_MAIL_PARSE_INVALID_COMMAND
;

616 
	}
}

619 
ngx_öt_t


620 
	$ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

622 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

623 
ngx_°r_t
 *
¨g
;

625 
sw_°¨t
 = 0,

626 
sw_•a˚s_bef‹e_¨gumít
,

627 
sw_¨gumít
,

628 
sw_Æmo°_d⁄e


629 } 
°©e
;

631 
°©e
 = 
s
->state;

633 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

634 
ch
 = *
p
;

636 
°©e
) {

639 
sw_°¨t
:

640 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

641 
c
 = 
s
->
buf„r
->
°¨t
;

643 i‡(
p
 - 
c
 == 4) {

645 
c0
 = 
	`ngx_touµî
(
c
[0]);

646 
c1
 = 
	`ngx_touµî
(
c
[1]);

647 
c2
 = 
	`ngx_touµî
(
c
[2]);

648 
c3
 = 
	`ngx_touµî
(
c
[3]);

650 i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'O')

652 
s
->
comm™d
 = 
NGX_SMTP_HELO
;

654 } i‡(
c0
 ='E' && 
c1
 ='H' && 
c2
 ='L' && 
c3
 == 'O')

656 
s
->
comm™d
 = 
NGX_SMTP_EHLO
;

658 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

660 
s
->
comm™d
 = 
NGX_SMTP_QUIT
;

662 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

664 
s
->
comm™d
 = 
NGX_SMTP_AUTH
;

666 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

668 
s
->
comm™d
 = 
NGX_SMTP_NOOP
;

670 } i‡(
c0
 ='M' && 
c1
 ='A' && 
c2
 ='I' && 
c3
 == 'L')

672 
s
->
comm™d
 = 
NGX_SMTP_MAIL
;

674 } i‡(
c0
 ='R' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'T')

676 
s
->
comm™d
 = 
NGX_SMTP_RSET
;

678 } i‡(
c0
 ='R' && 
c1
 ='C' && 
c2
 ='P' && 
c3
 == 'T')

680 
s
->
comm™d
 = 
NGX_SMTP_RCPT
;

682 } i‡(
c0
 ='V' && 
c1
 ='R' && 
c2
 ='F' && 
c3
 == 'Y')

684 
s
->
comm™d
 = 
NGX_SMTP_VRFY
;

686 } i‡(
c0
 ='E' && 
c1
 ='X' && 
c2
 ='P' && 
c3
 == 'N')

688 
s
->
comm™d
 = 
NGX_SMTP_EXPN
;

690 } i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'P')

692 
s
->
comm™d
 = 
NGX_SMTP_HELP
;

695 
övÆid
;

697 #i‡(
NGX_MAIL_SSL
)

698 } i‡(
p
 - 
c
 == 8) {

700 i‡((
c
[0] == 'S'|| c[0] == 's')

701 && (
c
[1] == 'T'|| c[1] == 't')

702 && (
c
[2] == 'A'|| c[2] == 'a')

703 && (
c
[3] == 'R'|| c[3] == 'r')

704 && (
c
[4] == 'T'|| c[4] == 't')

705 && (
c
[5] == 'T'|| c[5] == 't')

706 && (
c
[6] == 'L'|| c[6] == 'l')

707 && (
c
[7] == 'S'|| c[7] == 's'))

709 
s
->
comm™d
 = 
NGX_SMTP_STARTTLS
;

712 
övÆid
;

716 
övÆid
;

719 
ch
) {

721 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

723 
CR
:

724 
°©e
 = 
sw_Æmo°_d⁄e
;

726 
LF
:

727 
d⁄e
;

732 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

733 
övÆid
;

738 
sw_•a˚s_bef‹e_¨gumít
:

739 
ch
) {

742 
CR
:

743 
°©e
 = 
sw_Æmo°_d⁄e
;

744 
s
->
¨g_íd
 = 
p
;

746 
LF
:

747 
s
->
¨g_íd
 = 
p
;

748 
d⁄e
;

750 i‡(
s
->
¨gs
.
√…s
 <= 10) {

751 
°©e
 = 
sw_¨gumít
;

752 
s
->
¨g_°¨t
 = 
p
;

755 
övÆid
;

759 
sw_¨gumít
:

760 
ch
) {

762 
CR
:

763 
LF
:

764 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

765 i‡(
¨g
 =
NULL
) {

766  
NGX_ERROR
;

768 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

769 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

770 
s
->
¨g_°¨t
 = 
NULL
;

772 
ch
) {

774 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

776 
CR
:

777 
°©e
 = 
sw_Æmo°_d⁄e
;

779 
LF
:

780 
d⁄e
;

789 
sw_Æmo°_d⁄e
:

790 
ch
) {

791 
LF
:

792 
d⁄e
;

794 
övÆid
;

799 
s
->
buf„r
->
pos
 = 
p
;

800 
s
->
°©e
 = state;

802  
NGX_AGAIN
;

804 
d⁄e
:

806 
s
->
buf„r
->
pos
 = 
p
 + 1;

808 i‡(
s
->
¨g_°¨t
) {

809 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

810 i‡(
¨g
 =
NULL
) {

811  
NGX_ERROR
;

813 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

814 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

815 
s
->
¨g_°¨t
 = 
NULL
;

818 
s
->
°©e
 = (s->
comm™d
 !
NGX_SMTP_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

820  
NGX_OK
;

822 
övÆid
:

824 
s
->
°©e
 = 
sw_°¨t
;

825 
s
->
¨g_°¨t
 = 
NULL
;

827  
NGX_MAIL_PARSE_INVALID_COMMAND
;

828 
	}
}

831 
ngx_öt_t


832 
	$ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

834 
ngx_°r_t
 *
¨g
;

836 #i‡(
NGX_MAIL_SSL
)

837 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

838  
NGX_MAIL_PARSE_INVALID_COMMAND
;

842 
¨g
 = 
s
->
¨gs
.
ñts
;

844 i‡(
¨g
[0].
Àn
 == 5) {

846 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "LOGIN", 5) == 0) {

848 i‡(
s
->
¨gs
.
√…s
 == 1) {

849  
NGX_MAIL_AUTH_LOGIN
;

852 i‡(
s
->
¨gs
.
√…s
 == 2) {

853  
NGX_MAIL_AUTH_LOGIN_USERNAME
;

856  
NGX_MAIL_PARSE_INVALID_COMMAND
;

859 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "PLAIN", 5) == 0) {

861 i‡(
s
->
¨gs
.
√…s
 == 1) {

862  
NGX_MAIL_AUTH_PLAIN
;

865 i‡(
s
->
¨gs
.
√…s
 == 2) {

866  
	`ngx_maû_auth_∂aö
(
s
, 
c
, 1);

870  
NGX_MAIL_PARSE_INVALID_COMMAND
;

873 i‡(
¨g
[0].
Àn
 == 8) {

875 i‡(
s
->
¨gs
.
√…s
 != 1) {

876  
NGX_MAIL_PARSE_INVALID_COMMAND
;

879 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "CRAM-MD5", 8) == 0) {

880  
NGX_MAIL_AUTH_CRAM_MD5
;

884  
NGX_MAIL_PARSE_INVALID_COMMAND
;

885 
	}
}

	@src/mail/ngx_mail_pop3_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

16 
ngx_öt_t
 
ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

18 
ngx_öt_t
 
°ls
);

19 
ngx_öt_t
 
ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

20 
ngx_öt_t
 
ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
u_ch¨
 
	gp›3_gªëög
[] = "+OK POP3Ñódy" 
CRLF
;

25 
u_ch¨
 
	gp›3_ok
[] = "+OK" 
CRLF
;

26 
u_ch¨
 
	gp›3_√xt
[] = "+ " 
CRLF
;

27 
u_ch¨
 
	gp›3_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

28 
u_ch¨
 
	gp›3_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

29 
u_ch¨
 
	gp›3_övÆid_comm™d
[] = "-ERR invÆid comm™d" 
CRLF
;

33 
	$ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

35 
u_ch¨
 *
p
;

36 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

37 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

39 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

40 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

42 i‡(
pscf
->
auth_mëhods


43 & (
NGX_MAIL_AUTH_APOP_ENABLED
|
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
))

45 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

46 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

50 
s
->
out
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, (
p›3_gªëög
Ë+ s->
ß…
.
Àn
);

51 i‡(
s
->
out
.
d©a
 =
NULL
) {

52 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

56 
p
 = 
	`ngx_˝ymem
(
s
->
out
.
d©a
, 
p›3_gªëög
, (pop3_greeting) - 3);

57 *
p
++ = ' ';

58 
p
 = 
	`ngx_˝ymem
’, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

60 
s
->
out
.
Àn
 = 
p
 - s->out.
d©a
;

63 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_gªëög
);

66 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_öô_¥Ÿocﬁ
;

68 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

70 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

74 
	`ngx_maû_£nd
(
c
->
wrôe
);

75 
	}
}

79 
	$ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

81 
ngx_c⁄√˘i⁄_t
 *
c
;

82 
ngx_maû_£ssi⁄_t
 *
s
;

84 
c
 = 
ªv
->
d©a
;

86 
c
->
log
->
a˘i⁄
 = "ináuth state";

88 i‡(
ªv
->
timedout
) {

89 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

90 
c
->
timedout
 = 1;

91 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

95 
s
 = 
c
->
d©a
;

97 i‡(
s
->
buf„r
 =
NULL
) {

98 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

99 =
NGX_ERROR
)

101 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

105 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 128);

106 i‡(
s
->
buf„r
 =
NULL
) {

107 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

112 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

113 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_auth_°©e
;

115 
	`ngx_maû_p›3_auth_°©e
(
ªv
);

116 
	}
}

120 
	$ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
)

122 
ngx_öt_t
 
rc
;

123 
ngx_c⁄√˘i⁄_t
 *
c
;

124 
ngx_maû_£ssi⁄_t
 *
s
;

126 
c
 = 
ªv
->
d©a
;

127 
s
 = 
c
->
d©a
;

129 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3áuth state");

131 i‡(
ªv
->
timedout
) {

132 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

133 
c
->
timedout
 = 1;

134 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

138 i‡(
s
->
out
.
Àn
) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3 send handler busy");

140 
s
->
blocked
 = 1;

144 
s
->
blocked
 = 0;

146 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

148 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

152 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_ok
);

154 i‡(
rc
 =
NGX_OK
) {

155 
s
->
maû_°©e
) {

157 
ngx_p›3_°¨t
:

159 
s
->
comm™d
) {

161 
NGX_POP3_USER
:

162 
rc
 = 
	`ngx_maû_p›3_u£r
(
s
, 
c
);

165 
NGX_POP3_CAPA
:

166 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 1);

169 
NGX_POP3_APOP
:

170 
rc
 = 
	`ngx_maû_p›3_≠›
(
s
, 
c
);

173 
NGX_POP3_AUTH
:

174 
rc
 = 
	`ngx_maû_p›3_auth
(
s
, 
c
);

177 
NGX_POP3_QUIT
:

178 
s
->
quô
 = 1;

181 
NGX_POP3_NOOP
:

184 
NGX_POP3_STLS
:

185 
rc
 = 
	`ngx_maû_p›3_°ls
(
s
, 
c
);

189 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

195 
ngx_p›3_u£r
:

197 
s
->
comm™d
) {

199 
NGX_POP3_PASS
:

200 
rc
 = 
	`ngx_maû_p›3_∑ss
(
s
, 
c
);

203 
NGX_POP3_CAPA
:

204 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 0);

207 
NGX_POP3_QUIT
:

208 
s
->
quô
 = 1;

211 
NGX_POP3_NOOP
:

215 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

222 
ngx_p›3_∑sswd
:

225 
ngx_p›3_auth_logö_u£∫ame
:

226 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

228 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

229 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

232 
ngx_p›3_auth_logö_∑ssw‹d
:

233 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

236 
ngx_p›3_auth_∂aö
:

237 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

240 
ngx_p›3_auth_¸am_md5
:

241 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

246 
rc
) {

248 
NGX_DONE
:

249 
	`ngx_maû_auth
(
s
, 
c
);

252 
NGX_ERROR
:

253 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

256 
NGX_MAIL_PARSE_INVALID_COMMAND
:

257 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

258 
s
->
°©e
 = 0;

260 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_övÆid_comm™d
);

264 
NGX_OK
:

266 
s
->
¨gs
.
√…s
 = 0;

267 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

268 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

270 i‡(
s
->
°©e
) {

271 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

274 
	`ngx_maû_£nd
(
c
->
wrôe
);

276 
	}
}

278 
ngx_öt_t


279 
	$ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

281 
ngx_°r_t
 *
¨g
;

283 #i‡(
NGX_MAIL_SSL
)

284 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

285  
NGX_MAIL_PARSE_INVALID_COMMAND
;

289 i‡(
s
->
¨gs
.
√…s
 != 1) {

290  
NGX_MAIL_PARSE_INVALID_COMMAND
;

293 
¨g
 = 
s
->
¨gs
.
ñts
;

294 
s
->
logö
.
Àn
 = 
¨g
[0].len;

295 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

296 i‡(
s
->
logö
.
d©a
 =
NULL
) {

297  
NGX_ERROR
;

300 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

303 "p›3Üogö: \"%V\"", &
s
->
logö
);

305 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

307  
NGX_OK
;

308 
	}
}

311 
ngx_öt_t


312 
	$ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

314 
ngx_°r_t
 *
¨g
;

316 i‡(
s
->
¨gs
.
√…s
 != 1) {

317  
NGX_MAIL_PARSE_INVALID_COMMAND
;

320 
¨g
 = 
s
->
¨gs
.
ñts
;

321 
s
->
∑sswd
.
Àn
 = 
¨g
[0].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[0].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

331 "p›3Öasswd: \"%V\"", &
s
->
∑sswd
);

334  
NGX_DONE
;

335 
	}
}

338 
ngx_öt_t


339 
	$ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_öt_t
 
°ls
)

341 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

343 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

345 #i‡(
NGX_MAIL_SSL
)

347 i‡(
°ls
 && 
c
->
s¶
 =
NULL
) {

348 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

350 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

352 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

353 
s
->
out
 = 
pscf
->
°¨âls_ˇ∑bûôy
;

354  
NGX_OK
;

357 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

358 
s
->
out
 = 
pscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

359  
NGX_OK
;

365 
s
->
out
 = 
pscf
->
ˇ∑bûôy
;

366  
NGX_OK
;

367 
	}
}

370 
ngx_öt_t


371 
	$ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

373 #i‡(
NGX_MAIL_SSL
)

374 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

376 i‡(
c
->
s¶
 =
NULL
) {

377 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

378 i‡(
s¶cf
->
°¨âls
) {

379 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

380  
NGX_OK
;

386  
NGX_MAIL_PARSE_INVALID_COMMAND
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

393 
ngx_°r_t
 *
¨g
;

394 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

396 #i‡(
NGX_MAIL_SSL
)

397 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

398  
NGX_MAIL_PARSE_INVALID_COMMAND
;

402 i‡(
s
->
¨gs
.
√…s
 != 2) {

403  
NGX_MAIL_PARSE_INVALID_COMMAND
;

406 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

408 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_APOP_ENABLED
)) {

409  
NGX_MAIL_PARSE_INVALID_COMMAND
;

412 
¨g
 = 
s
->
¨gs
.
ñts
;

414 
s
->
logö
.
Àn
 = 
¨g
[0].len;

415 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

416 i‡(
s
->
logö
.
d©a
 =
NULL
) {

417  
NGX_ERROR
;

420 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

422 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

423 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

424 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

425  
NGX_ERROR
;

428 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

430 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

431 "p›3áp›: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

433 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_APOP
;

435  
NGX_DONE
;

436 
	}
}

439 
ngx_öt_t


440 
	$ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

442 
ngx_öt_t
 
rc
;

443 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

445 #i‡(
NGX_MAIL_SSL
)

446 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

447  
NGX_MAIL_PARSE_INVALID_COMMAND
;

451 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

453 i‡(
s
->
¨gs
.
√…s
 == 0) {

454 
s
->
out
 = 
pscf
->
auth_ˇ∑bûôy
;

455 
s
->
°©e
 = 0;

457  
NGX_OK
;

460 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

462 
rc
) {

464 
NGX_MAIL_AUTH_LOGIN
:

466 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_u£∫ame
);

467 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_u£∫ame
;

469  
NGX_OK
;

471 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

473 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

474 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

476  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

478 
NGX_MAIL_AUTH_PLAIN
:

480 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_√xt
);

481 
s
->
maû_°©e
 = 
ngx_p›3_auth_∂aö
;

483  
NGX_OK
;

485 
NGX_MAIL_AUTH_CRAM_MD5
:

487 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

488  
NGX_MAIL_PARSE_INVALID_COMMAND
;

491 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

492 
s
->
maû_°©e
 = 
ngx_p›3_auth_¸am_md5
;

493  
NGX_OK
;

496  
NGX_ERROR
;

499  
rc
;

500 
	}
}

	@src/mail/ngx_mail_pop3_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 *
ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_p›3_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("TOP"),

22 
ngx_°rög
("USER"),

23 
ngx_°rög
("UIDL"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_p›3_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("≠›"), 
NGX_MAIL_AUTH_APOP_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_p›3_auth_∂aö_ˇ∑bûôy
 =

37 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


38 "LOGIN" 
CRLF


39 "PLAIN" 
CRLF


40 "." 
CRLF
);

43 
ngx_°r_t
 
	gngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
 =

44 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


45 "LOGIN" 
CRLF


46 "PLAIN" 
CRLF


47 "CRAM-MD5" 
CRLF


48 "." 
CRLF
);

51 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_p›3_¥Ÿocﬁ
 = {

52 
ngx_°rög
("pop3"),

54 
NGX_MAIL_POP3_PROTOCOL
,

56 
ngx_maû_p›3_öô_£ssi⁄
,

57 
ngx_maû_p›3_öô_¥Ÿocﬁ
,

58 
ngx_maû_p›3_∑r£_comm™d
,

59 
ngx_maû_p›3_auth_°©e
,

61 
ngx_°rög
("-ERR i¡î«»£rvîÉº‹" 
CRLF
)

65 
ngx_comm™d_t
 
	gngx_maû_p›3_comm™ds
[] = {

67 { 
ngx_°rög
("pop3_capabilities"),

68 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

69 
ngx_maû_ˇ∑bûôõs
,

70 
NGX_MAIL_SRV_CONF_OFFSET
,

71 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
ˇ∑bûôõs
),

72 
NULL
 },

74 { 
ngx_°rög
("pop3_auth"),

75 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

76 
ngx_c⁄f_£t_bômask_¶Ÿ
,

77 
NGX_MAIL_SRV_CONF_OFFSET
,

78 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
auth_mëhods
),

79 &
ngx_maû_p›3_auth_mëhods
 },

81 
ngx_nuŒ_comm™d


85 
ngx_maû_moduÀ_t
 
	gngx_maû_p›3_moduÀ_˘x
 = {

86 &
ngx_maû_p›3_¥Ÿocﬁ
,

88 
NULL
,

89 
NULL
,

91 
ngx_maû_p›3_¸óã_§v_c⁄f
,

92 
ngx_maû_p›3_mîge_§v_c⁄f


96 
ngx_moduÀ_t
 
	gngx_maû_p›3_moduÀ
 = {

97 
NGX_MODULE_V1
,

98 &
ngx_maû_p›3_moduÀ_˘x
,

99 
ngx_maû_p›3_comm™ds
,

100 
NGX_MAIL_MODULE
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NGX_MODULE_V1_PADDING


113 
	$ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

115 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

117 
pscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_p›3_§v_c⁄f_t
));

118 i‡(
pscf
 =
NULL
) {

119  
NULL
;

122 i‡(
	`ngx_¨øy_öô
(&
pscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

123 !
NGX_OK
)

125  
NULL
;

128  
pscf
;

129 
	}
}

133 
	$ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

135 
ngx_maû_p›3_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

136 
ngx_maû_p›3_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

138 
u_ch¨
 *
p
;

139 
size_t
 
size
, 
°ls_⁄ly_size
;

140 
ngx_°r_t
 *
c
, *
d
;

141 
ngx_uöt_t
 
i
;

143 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

144 
¥ev
->
auth_mëhods
,

145 (
NGX_CONF_BITMASK_SET


146 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

148 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

149 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

152 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

154 
d
 = 
ngx_maû_p›3_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

155 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

156 i‡(
c
 =
NULL
) {

157  
NGX_CONF_ERROR
;

160 *
c
 = *
d
;

164 
size
 = ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1

165 + ("." 
CRLF
) - 1;

167 
°ls_⁄ly_size
 = 
size
 + ("STLS" 
CRLF
) - 1;

169 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

170 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

171 
size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

173 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

177 
°ls_⁄ly_size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

180 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

181 
size
 +("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1;

184 
size
 +("SASL LOGIN PLAIN" 
CRLF
) - 1;

187 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

188 i‡(
p
 =
NULL
) {

189  
NGX_CONF_ERROR
;

192 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

193 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

195 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

196 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

198 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

199 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

200 *
p
++ = 
CR
; *p++ = 
LF
;

203 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

204 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN CRAM-MD5" 
CRLF
,

205 ("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1);

208 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN" 
CRLF
,

209 ("SASL LOGIN PLAIN" 
CRLF
) - 1);

212 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

215 
size
 +("STLS" 
CRLF
) - 1;

217 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

218 i‡(
p
 =
NULL
) {

219  
NGX_CONF_ERROR
;

222 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

223 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

225 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

226 
c⁄f
->
ˇ∑bûôy
.
Àn
 - (("." 
CRLF
) - 1));

228 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

229 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

232 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

233 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
;

236 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_∂aö_ˇ∑bûôy
;

240 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
°ls_⁄ly_size
);

241 i‡(
p
 =
NULL
) {

242  
NGX_CONF_ERROR
;

245 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
°ls_⁄ly_size
;

246 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

248 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

249 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

251 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

252 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

256 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

257 *
p
++ = 
CR
; *p++ = 
LF
;

260 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

261 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

263  
NGX_CONF_OK
;

264 
	}
}

	@src/mail/ngx_mail_pop3_module.h

8 #i‚de‡
_NGX_MAIL_POP3_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_POP3_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
ngx_°r_t
 
	mˇ∑bûôy
;

19 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

20 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

21 
ngx_°r_t
 
	mauth_ˇ∑bûôy
;

23 
ngx_uöt_t
 
	mauth_mëhods
;

25 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

26 } 
	tngx_maû_p›3_§v_c⁄f_t
;

29 
ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

30 
ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

31 
ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
);

32 
ngx_öt_t
 
ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

35 
ngx_moduÀ_t
 
ngx_maû_p›3_moduÀ
;

	@src/mail/ngx_mail_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	m∑ss_îr‹_mesßge
;

18 
ngx_Êag_t
 
	mx˛õ¡
;

19 
size_t
 
	mbuf„r_size
;

20 
ngx_m£c_t
 
	mtimeout
;

21 } 
	tngx_maû_¥oxy_c⁄f_t
;

24 
ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
);

25 
ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
);

26 
ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
);

27 
ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
);

28 
ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

29 
ngx_öt_t
 
ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
,

30 
ngx_uöt_t
 
°©e
);

31 
ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

33 
ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

34 
ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
);

35 *
ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

40 
ngx_comm™d_t
 
	gngx_maû_¥oxy_comm™ds
[] = {

42 { 
ngx_°rög
("proxy"),

43 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

44 
ngx_c⁄f_£t_Êag_¶Ÿ
,

45 
NGX_MAIL_SRV_CONF_OFFSET
,

46 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
íabÀ
),

47 
NULL
 },

49 { 
ngx_°rög
("proxy_buffer"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

51 
ngx_c⁄f_£t_size_¶Ÿ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
buf„r_size
),

54 
NULL
 },

56 { 
ngx_°rög
("proxy_timeout"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_m£c_¶Ÿ
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
timeout
),

61 
NULL
 },

63 { 
ngx_°rög
("proxy_pass_error_message"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
∑ss_îr‹_mesßge
),

68 
NULL
 },

70 { 
ngx_°rög
("xclient"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
x˛õ¡
),

75 
NULL
 },

77 
ngx_nuŒ_comm™d


81 
ngx_maû_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ_˘x
 = {

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_maû_¥oxy_¸óã_c⁄f
,

88 
ngx_maû_¥oxy_mîge_c⁄f


92 
ngx_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_maû_¥oxy_moduÀ_˘x
,

95 
ngx_maû_¥oxy_comm™ds
,

96 
NGX_MAIL_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
u_ch¨
 
	gsmç_auth_ok
[] = "235 2.0.0 OK" 
CRLF
;

112 
	$ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
)

114 
kì∑live
;

115 
ngx_öt_t
 
rc
;

116 
ngx_maû_¥oxy_˘x_t
 *
p
;

117 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

118 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

120 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

122 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

124 i‡(
cscf
->
so_kì∑live
) {

125 
kì∑live
 = 1;

127 i‡(
	`£tsock›t
(
s
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

128 (c⁄° *Ë&
kì∑live
, ())

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_sockë_î∫o
,

136 
p
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_maû_¥oxy_˘x_t
));

137 i‡(
p
 =
NULL
) {

138 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

142 
s
->
¥oxy
 = 
p
;

144 
p
->
up°ªam
.
sockaddr
 = 
≥î
->sockaddr;

145 
p
->
up°ªam
.
sockÀn
 = 
≥î
->socklen;

146 
p
->
up°ªam
.
«me
 = &
≥î
->name;

147 
p
->
up°ªam
.
gë
 = 
ngx_evít_gë_≥î
;

148 
p
->
up°ªam
.
log
 = 
s
->
c⁄√˘i⁄
->log;

149 
p
->
up°ªam
.
log_îr‹
 = 
NGX_ERROR_ERR
;

151 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
p
->
up°ªam
);

153 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

154 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

158 
	`ngx_add_timî
(
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
, 
cscf
->
timeout
);

160 
p
->
up°ªam
.
c⁄√˘i⁄
->
d©a
 = 
s
;

161 
p
->
up°ªam
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

163 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_block_ªad
;

164 
p
->
up°ªam
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_dummy_h™dÀr
;

166 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

168 
s
->
¥oxy
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(s->
c⁄√˘i⁄
->
poﬁ
,

169 
pcf
->
buf„r_size
);

170 i‡(
s
->
¥oxy
->
buf„r
 =
NULL
) {

171 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

175 
s
->
out
.
Àn
 = 0;

177 
s
->
¥Ÿocﬁ
) {

179 
NGX_MAIL_POP3_PROTOCOL
:

180 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_p›3_h™dÀr
;

181 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

184 
NGX_MAIL_IMAP_PROTOCOL
:

185 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_im≠_h™dÀr
;

186 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

190 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_smç_h™dÀr
;

191 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

194 
	}
}

198 
	$ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
)

200 
ngx_c⁄√˘i⁄_t
 *
c
;

201 
ngx_maû_£ssi⁄_t
 *
s
;

203 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy blockÑead");

205 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

206 
c
 = 
ªv
->
d©a
;

207 
s
 = 
c
->
d©a
;

209 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

211 
	}
}

215 
	$ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
)

217 
u_ch¨
 *
p
;

218 
ngx_öt_t
 
rc
;

219 
ngx_°r_t
 
löe
;

220 
ngx_c⁄√˘i⁄_t
 *
c
;

221 
ngx_maû_£ssi⁄_t
 *
s
;

222 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

224 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

227 
c
 = 
ªv
->
d©a
;

228 
s
 = 
c
->
d©a
;

230 i‡(
ªv
->
timedout
) {

231 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

233 
c
->
timedout
 = 1;

234 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

238 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, 0);

240 i‡(
rc
 =
NGX_AGAIN
) {

244 i‡(
rc
 =
NGX_ERROR
) {

245 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

249 
s
->
maû_°©e
) {

251 
ngx_p›3_°¨t
:

252 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

254 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

256 
löe
.
Àn
 = ("USER "Ë- 1 + 
s
->
logö
.len + 2;

257 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

258 i‡(
löe
.
d©a
 =
NULL
) {

259 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

263 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "USER ", ("USER ") - 1);

264 
p
 = 
	`ngx_˝ymem
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

265 *
p
++ = 
CR
; *∞
LF
;

267 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

270 
ngx_p›3_u£r
:

271 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÖass");

273 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

275 
löe
.
Àn
 = ("PASS "Ë- 1 + 
s
->
∑sswd
.len + 2;

276 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

277 i‡(
löe
.
d©a
 =
NULL
) {

278 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

282 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "PASS ", ("PASS ") - 1);

283 
p
 = 
	`ngx_˝ymem
’, 
s
->
∑sswd
.
d©a
, s->∑sswd.
Àn
);

284 *
p
++ = 
CR
; *∞
LF
;

286 
s
->
maû_°©e
 = 
ngx_p›3_∑sswd
;

289 
ngx_p›3_∑sswd
:

290 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

291 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

292 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

293 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

295 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

296 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

297 
	`ngx_dñ_timî
(
c
->
ªad
);

299 
c
->
log
->
a˘i⁄
 = 
NULL
;

300 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

302 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

307 #i‡(
NGX_SUPPRESS_WARN
)

308 
	`ngx_°r_nuŒ
(&
löe
);

313 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

318 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

322 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

323 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

324 
	}
}

328 
	$ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
)

330 
u_ch¨
 *
p
;

331 
ngx_öt_t
 
rc
;

332 
ngx_°r_t
 
löe
;

333 
ngx_c⁄√˘i⁄_t
 *
c
;

334 
ngx_maû_£ssi⁄_t
 *
s
;

335 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

337 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

340 
c
 = 
ªv
->
d©a
;

341 
s
 = 
c
->
d©a
;

343 i‡(
ªv
->
timedout
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

346 
c
->
timedout
 = 1;

347 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

351 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

353 i‡(
rc
 =
NGX_AGAIN
) {

357 i‡(
rc
 =
NGX_ERROR
) {

358 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

362 
s
->
maû_°©e
) {

364 
ngx_im≠_°¨t
:

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

368 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending LOGIN commandÅo upstream";

370 
löe
.
Àn
 = 
s
->
èg
.len + ("LOGIN ") - 1

371 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

372 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

373 i‡(
löe
.
d©a
 =
NULL
) {

374 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

378 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%VLOGIN {%uz}" 
CRLF
,

379 &
s
->
èg
, s->
logö
.
Àn
)

380 - 
löe
.
d©a
;

382 
s
->
maû_°©e
 = 
ngx_im≠_logö
;

385 
ngx_im≠_logö
:

386 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

388 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

390 
löe
.
Àn
 = 
s
->
logö
.À¿+ 1 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

391 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

392 i‡(
löe
.
d©a
 =
NULL
) {

393 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

397 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%V {%uz}" 
CRLF
,

398 &
s
->
logö
, s->
∑sswd
.
Àn
)

399 - 
löe
.
d©a
;

401 
s
->
maû_°©e
 = 
ngx_im≠_u£r
;

404 
ngx_im≠_u£r
:

405 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

408 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

410 
löe
.
Àn
 = 
s
->
∑sswd
.len + 2;

411 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

412 i‡(
löe
.
d©a
 =
NULL
) {

413 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

417 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
∑sswd
.d©a, s->∑sswd.
Àn
);

418 *
p
++ = 
CR
; *∞
LF
;

420 
s
->
maû_°©e
 = 
ngx_im≠_∑sswd
;

423 
ngx_im≠_∑sswd
:

424 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

425 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

426 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

427 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

429 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

430 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

431 
	`ngx_dñ_timî
(
c
->
ªad
);

433 
c
->
log
->
a˘i⁄
 = 
NULL
;

434 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

436 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

441 #i‡(
NGX_SUPPRESS_WARN
)

442 
	`ngx_°r_nuŒ
(&
löe
);

447 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

452 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

456 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

457 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

458 
	}
}

462 
	$ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
)

464 
u_ch¨
 *
p
;

465 
ngx_öt_t
 
rc
;

466 
ngx_°r_t
 
löe
;

467 
ngx_buf_t
 *
b
;

468 
ngx_c⁄√˘i⁄_t
 *
c
;

469 
ngx_maû_£ssi⁄_t
 *
s
;

470 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

471 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

473 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

476 
c
 = 
ªv
->
d©a
;

477 
s
 = 
c
->
d©a
;

479 i‡(
ªv
->
timedout
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

482 
c
->
timedout
 = 1;

483 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

487 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

489 i‡(
rc
 =
NGX_AGAIN
) {

493 i‡(
rc
 =
NGX_ERROR
) {

494 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

498 
s
->
maû_°©e
) {

500 
ngx_smç_°¨t
:

501 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÉhlo");

503 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending HELO/EHLOÅo upstream";

505 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

507 
löe
.
Àn
 = ("HELO "Ë- 1 + 
cscf
->
£rvî_«me
.len + 2;

508 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

509 i‡(
löe
.
d©a
 =
NULL
) {

510 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

514 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

516 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
,

517 ((
s
->
esmç
 || 
pcf
->
x˛õ¡
) ? "EHLO " : "HELO "),

520 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

521 *
p
++ = 
CR
; *∞
LF
;

523 i‡(
pcf
->
x˛õ¡
) {

524 
s
->
maû_°©e
 = 
ngx_smç_hño_x˛õ¡
;

526 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

527 
s
->
maû_°©e
 = 
ngx_smç_hño_‰om
;

530 
s
->
maû_°©e
 = 
ngx_smç_hño
;

535 
ngx_smç_hño_x˛õ¡
:

536 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

539 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending XCLIENTÅo upstream";

541 
löe
.
Àn
 = ("XCLIENT ADDR= LOGIN= NAME="

542 
CRLF
) - 1

543 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
 + s->
logö
.À¿+ s->
ho°
.len;

545 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

546 i‡(
löe
.
d©a
 =
NULL
) {

547 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

551 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

552 "XCLIENT ADDR=%V%s%V NAME=%V" 
CRLF
,

553 &
s
->
c⁄√˘i⁄
->
addr_ãxt
,

554 (
s
->
logö
.
Àn
 ? " LOGIN=" : ""), &s->logö, &s->
ho°
)

555 - 
löe
.
d©a
;

557 i‡(
s
->
smç_hño
.
Àn
) {

558 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_hño
;

560 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

561 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_‰om
;

564 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡
;

569 
ngx_smç_x˛õ¡_hño
:

570 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

573 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending client HELO/EHLOÅo upstream";

575 
löe
.
Àn
 = ("HELO " 
CRLF
Ë- 1 + 
s
->
smç_hño
.len;

577 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

578 i‡(
löe
.
d©a
 =
NULL
) {

579 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

583 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

584 ((
s
->
esmç
Ë? "EHLO %V" 
CRLF
 : "HELO %V" CRLF),

585 &
s
->
smç_hño
)

586 - 
löe
.
d©a
;

588 
s
->
maû_°©e
 = (s->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) ?

589 
ngx_smç_hño_‰om
 : 
ngx_smç_hño
;

593 
ngx_smç_hño_‰om
:

594 
ngx_smç_x˛õ¡_‰om
:

595 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

598 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending MAIL FROMÅo upstream";

600 
löe
.
Àn
 = 
s
->
smç_‰om
.À¿+ (
CRLF
) - 1;

601 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

602 i‡(
löe
.
d©a
 =
NULL
) {

603 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

607 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_‰om
.d©a, s->smç_‰om.
Àn
);

608 *
p
++ = 
CR
; *∞
LF
;

610 
s
->
maû_°©e
 = 
ngx_smç_‰om
;

614 
ngx_smç_‰om
:

615 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

618 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending RCPT TOÅo upstream";

620 
löe
.
Àn
 = 
s
->
smç_to
.À¿+ (
CRLF
) - 1;

621 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

622 i‡(
löe
.
d©a
 =
NULL
) {

623 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

627 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_to
.d©a, s->smç_to.
Àn
);

628 *
p
++ = 
CR
; *∞
LF
;

630 
s
->
maû_°©e
 = 
ngx_smç_to
;

634 
ngx_smç_hño
:

635 
ngx_smç_x˛õ¡
:

636 
ngx_smç_to
:

638 
b
 = 
s
->
¥oxy
->
buf„r
;

640 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

641 
b
->
pos
 = b->
°¨t
;

644 
	`ngx_mem˝y
(
b
->
°¨t
, 
smç_auth_ok
, (smtp_auth_ok) - 1);

645 
b
->
œ°
 = b->
°¨t
 + (
smç_auth_ok
) - 1;

648 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

649 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

650 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

651 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

653 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

654 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

655 
	`ngx_dñ_timî
(
c
->
ªad
);

657 
c
->
log
->
a˘i⁄
 = 
NULL
;

658 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

660 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

665 #i‡(
NGX_SUPPRESS_WARN
)

666 
	`ngx_°r_nuŒ
(&
löe
);

671 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

676 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

680 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

681 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

682 
	}
}

686 
	$ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
wev
)

688 
ngx_c⁄√˘i⁄_t
 *
c
;

689 
ngx_maû_£ssi⁄_t
 *
s
;

691 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0, "mailÖroxy dummy handler");

693 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

694 
c
 = 
wev
->
d©a
;

695 
s
 = 
c
->
d©a
;

697 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

699 
	}
}

702 
ngx_öt_t


703 
	$ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
°©e
)

705 
u_ch¨
 *
p
;

706 
ssize_t
 
n
;

707 
ngx_buf_t
 *
b
;

708 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

710 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "readingÑesponse from upstream";

712 
b
 = 
s
->
¥oxy
->
buf„r
;

714 
n
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
	`ªcv
(s->proxy->upstream.connection,

715 
b
->
œ°
, b->
íd
 - b->last);

717 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

718  
NGX_ERROR
;

721 i‡(
n
 =
NGX_AGAIN
) {

722  
NGX_AGAIN
;

725 
b
->
œ°
 +
n
;

727 i‡(
b
->
œ°
 - b->
pos
 < 4) {

728  
NGX_AGAIN
;

731 i‡(*(
b
->
œ°
 - 2Ë!
CR
 || *(b->œ° - 1Ë!
LF
) {

732 i‡(
b
->
œ°
 =b->
íd
) {

733 *(
b
->
œ°
 - 1) = '\0';

734 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

736 
b
->
pos
);

737  
NGX_ERROR
;

740  
NGX_AGAIN
;

743 
p
 = 
b
->
pos
;

745 
s
->
¥Ÿocﬁ
) {

747 
NGX_MAIL_POP3_PROTOCOL
:

748 i‡(
p
[0] == '+' &&Ö[1] == 'O' &&Ö[2] == 'K') {

749  
NGX_OK
;

753 
NGX_MAIL_IMAP_PROTOCOL
:

754 
°©e
) {

756 
ngx_im≠_°¨t
:

757 i‡(
p
[0] == '*' &&Ö[1] == ' ' &&Ö[2] == 'O' &&Ö[3] == 'K') {

758  
NGX_OK
;

762 
ngx_im≠_logö
:

763 
ngx_im≠_u£r
:

764 i‡(
p
[0] == '+') {

765  
NGX_OK
;

769 
ngx_im≠_∑sswd
:

770 i‡(
	`ngx_°∫cmp
(
p
, 
s
->
èg
.
d©a
, s->èg.
Àn
) == 0) {

771 
p
 +
s
->
èg
.
Àn
;

772 i‡(
p
[0] == 'O' &&Ö[1] == 'K') {

773  
NGX_OK
;

782 
°©e
) {

784 
ngx_smç_°¨t
:

785 i‡(
p
[0] == '2' &&Ö[1] == '2' &&Ö[2] == '0') {

786  
NGX_OK
;

790 
ngx_smç_hño
:

791 
ngx_smç_hño_x˛õ¡
:

792 
ngx_smç_hño_‰om
:

793 
ngx_smç_‰om
:

794 i‡(
p
[0] == '2' &&Ö[1] == '5' &&Ö[2] == '0') {

795  
NGX_OK
;

799 
ngx_smç_x˛õ¡
:

800 
ngx_smç_x˛õ¡_‰om
:

801 
ngx_smç_x˛õ¡_hño
:

802 i‡(
p
[0] == '2' && (p[1] == '2' ||Ö[1] == '5') &&Ö[2] == '0') {

803  
NGX_OK
;

807 
ngx_smç_to
:

808  
NGX_OK
;

814 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

816 i‡(
pcf
->
∑ss_îr‹_mesßge
 == 0) {

817 *(
b
->
œ°
 - 2) = '\0';

818 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

819 "up°ªam síàövÆidÑe•⁄£: \"%s\"", 
p
);

820  
NGX_ERROR
;

823 
s
->
out
.
Àn
 = 
b
->
œ°
 - 
p
 - 2;

824 
s
->
out
.
d©a
 = 
p
;

826 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

827 "up°ªam síàövÆidÑe•⁄£: \"%V\"", &
s
->
out
);

829 
s
->
out
.
Àn
 = 
b
->
œ°
 - b->
pos
;

830 
s
->
out
.
d©a
 = 
b
->
pos
;

832  
NGX_ERROR
;

833 
	}
}

837 
	$ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
)

839 *
a˘i⁄
, *
ªcv_a˘i⁄
, *
£nd_a˘i⁄
;

840 
size_t
 
size
;

841 
ssize_t
 
n
;

842 
ngx_buf_t
 *
b
;

843 
ngx_uöt_t
 
do_wrôe
;

844 
ngx_c⁄√˘i⁄_t
 *
c
, *
§c
, *
d°
;

845 
ngx_maû_£ssi⁄_t
 *
s
;

846 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

848 
c
 = 
ev
->
d©a
;

849 
s
 = 
c
->
d©a
;

851 i‡(
ev
->
timedout
) {

852 
c
->
log
->
a˘i⁄
 = "proxying";

854 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

855 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

857 
c
->
timedout
 = 1;

860 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

864 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

868 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

869 i‡(
ev
->
wrôe
) {

870 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

871 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

872 
§c
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

873 
d°
 = 
c
;

874 
b
 = 
s
->
¥oxy
->
buf„r
;

877 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

878 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

879 
§c
 = 
c
;

880 
d°
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

881 
b
 = 
s
->
buf„r
;

885 i‡(
ev
->
wrôe
) {

886 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

887 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

888 
§c
 = 
s
->
c⁄√˘i⁄
;

889 
d°
 = 
c
;

890 
b
 = 
s
->
buf„r
;

893 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

894 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

895 
§c
 = 
c
;

896 
d°
 = 
s
->
c⁄√˘i⁄
;

897 
b
 = 
s
->
¥oxy
->
buf„r
;

901 
do_wrôe
 = 
ev
->
wrôe
 ? 1 : 0;

903 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

905 
do_wrôe
, 
§c
->
fd
, 
d°
->fd);

909 i‡(
do_wrôe
) {

911 
size
 = 
b
->
œ°
 - b->
pos
;

913 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

914 
c
->
log
->
a˘i⁄
 = 
£nd_a˘i⁄
;

916 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

918 i‡(
n
 =
NGX_ERROR
) {

919 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

923 i‡(
n
 > 0) {

924 
b
->
pos
 +
n
;

926 i‡(
b
->
pos
 =b->
œ°
) {

927 
b
->
pos
 = b->
°¨t
;

928 
b
->
œ°
 = b->
°¨t
;

934 
size
 = 
b
->
íd
 - b->
œ°
;

936 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

937 
c
->
log
->
a˘i⁄
 = 
ªcv_a˘i⁄
;

939 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

941 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

945 i‡(
n
 > 0) {

946 
do_wrôe
 = 1;

947 
b
->
œ°
 +
n
;

952 i‡(
n
 =
NGX_ERROR
) {

953 
§c
->
ªad
->
eof
 = 1;

960 
c
->
log
->
a˘i⁄
 = "proxying";

962 i‡((
s
->
c⁄√˘i⁄
->
ªad
->
eof
 && s->
buf„r
->
pos
 =s->buf„r->
œ°
)

963 || (
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof


964 && 
s
->
¥oxy
->
buf„r
->
pos
 =s->¥oxy->buf„r->
œ°
)

965 || (
s
->
c⁄√˘i⁄
->
ªad
->
eof


966 && 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof
))

968 
a˘i⁄
 = 
c
->
log
->action;

969 
c
->
log
->
a˘i⁄
 = 
NULL
;

970 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "proxied session done");

971 
c
->
log
->
a˘i⁄
 =áction;

973 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

977 i‡(
	`ngx_h™dÀ_wrôe_evít
(
d°
->
wrôe
, 0Ë!
NGX_OK
) {

978 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

982 i‡(
	`ngx_h™dÀ_ªad_evít
(
d°
->
ªad
, 0Ë!
NGX_OK
) {

983 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

987 i‡(
	`ngx_h™dÀ_wrôe_evít
(
§c
->
wrôe
, 0Ë!
NGX_OK
) {

988 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

992 i‡(
	`ngx_h™dÀ_ªad_evít
(
§c
->
ªad
, 0Ë!
NGX_OK
) {

993 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

997 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

998 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

999 
	`ngx_add_timî
(
c
->
ªad
, 
pcf
->
timeout
);

1001 
	}
}

1005 
	$ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1007 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1008 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1010 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1012 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1015 i‡(
s
->
out
.
Àn
 == 0) {

1016 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1020 
s
->
quô
 = 1;

1021 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

1022 
	}
}

1026 
	$ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1028 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1029 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1031 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1033 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1036 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1037 
	}
}

1041 
	$ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
)

1043 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1044 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1046 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1048 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1051 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
s
->
c⁄√˘i⁄
);

1052 
	}
}

1056 
	$ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1058 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

1060 
pcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_¥oxy_c⁄f_t
));

1061 i‡(
pcf
 =
NULL
) {

1062  
NULL
;

1065 
pcf
->
íabÀ
 = 
NGX_CONF_UNSET
;

1066 
pcf
->
∑ss_îr‹_mesßge
 = 
NGX_CONF_UNSET
;

1067 
pcf
->
x˛õ¡
 = 
NGX_CONF_UNSET
;

1068 
pcf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1069 
pcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1071  
pcf
;

1072 
	}
}

1076 
	$ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1078 
ngx_maû_¥oxy_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1079 
ngx_maû_¥oxy_c⁄f_t
 *
c⁄f
 = 
chûd
;

1081 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1082 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∑ss_îr‹_mesßge
, 
¥ev
->pass_error_message, 0);

1083 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
x˛õ¡
, 
¥ev
->xclient, 1);

1084 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1085 (
size_t
Ë
ngx_∑gesize
);

1086 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 24 * 60 * 60000);

1088  
NGX_CONF_OK
;

1089 
	}
}

	@src/mail/ngx_mail_smtp_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

16 
ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
);

17 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

18 
ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
);

20 
ngx_öt_t
 
ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
,

21 
ngx_c⁄√˘i⁄_t
 *
c
);

23 
ngx_öt_t
 
ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
ngx_öt_t
 
ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
ngx_öt_t
 
ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

26 
ngx_öt_t
 
ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

27 
ngx_c⁄√˘i⁄_t
 *
c
);

28 
ngx_öt_t
 
ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

29 
ngx_öt_t
 
ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_öt_t
 
ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

32 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

33 
ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

34 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

37 
u_ch¨
 
	gsmç_ok
[] = "250 2.0.0 OK" 
CRLF
;

38 
u_ch¨
 
	gsmç_bye
[] = "221 2.0.0 Bye" 
CRLF
;

39 
u_ch¨
 
	gsmç_°¨âls
[] = "220 2.0.0 Sèπ TLS" 
CRLF
;

40 
u_ch¨
 
	gsmç_√xt
[] = "334 " 
CRLF
;

41 
u_ch¨
 
	gsmç_u£∫ame
[] = "334 VXNlcm5hbWU6" 
CRLF
;

42 
u_ch¨
 
	gsmç_∑ssw‹d
[] = "334 UGFzc3dvcmQ6" 
CRLF
;

43 
u_ch¨
 
	gsmç_övÆid_comm™d
[] = "500 5.5.1 InvÆid comm™d" 
CRLF
;

44 
u_ch¨
 
	gsmç_övÆid_pùñöög
[] =

45 "503 5.5.0 Im¥›î u£ o‡SMTP comm™dÖùñöög" 
CRLF
;

46 
u_ch¨
 
	gsmç_övÆid_¨gumít
[] = "501 5.5.4 InvÆidárgumít" 
CRLF
;

47 
u_ch¨
 
	gsmç_auth_ªquúed
[] = "530 5.7.1 Authítiˇti⁄Ñequúed" 
CRLF
;

48 
u_ch¨
 
	gsmç_bad_£quí˚
[] = "503 5.5.1 Bad sequí˚ o‡comm™ds" 
CRLF
;

51 
ngx_°r_t
 
	gsmç_u«vaûabÀ
 = 
ngx_°rög
("[UNAVAILABLE]");

52 
ngx_°r_t
 
	gsmç_ãmpu«vaû
 = 
ngx_°rög
("[TEMPUNAVAIL]");

56 
	$ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

58 
sockaddr_ö
 *
sö
;

59 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

60 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

62 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

64 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

65 
s
->
ho°
 = 
smç_u«vaûabÀ
;

66 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

70 i‡(
c
->
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

71 
s
->
ho°
 = 
smç_ãmpu«vaû
;

72 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

76 
c
->
log
->
a˘i⁄
 = "inÑesolving clientáddress";

78 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

79 i‡(
˘x
 =
NULL
) {

80 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

86 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

88 
˘x
->
addr
 = 
sö
->
sö_addr
.
s_addr
;

89 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
;

90 
˘x
->
d©a
 = 
s
;

91 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

93 i‡(
	`ngx_ªsﬁve_addr
(
˘x
Ë!
NGX_OK
) {

94 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

96 
	}
}

100 
	$ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

102 
ngx_c⁄√˘i⁄_t
 *
c
;

103 
ngx_maû_£ssi⁄_t
 *
s
;

105 
s
 = 
˘x
->
d©a
;

106 
c
 = 
s
->
c⁄√˘i⁄
;

108 i‡(
˘x
->
°©e
) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

111 &
c
->
addr_ãxt
, 
˘x
->
°©e
,

112 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

114 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

115 
s
->
ho°
 = 
smç_u«vaûabÀ
;

118 
s
->
ho°
 = 
smç_ãmpu«vaû
;

121 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

123 
	`ngx_maû_smç_gªëög
(
s
, s->
c⁄√˘i⁄
);

128 
c
->
log
->
a˘i⁄
 = "inÑesolving client hostname";

130 
s
->
ho°
.
d©a
 = 
	`ngx_p°rdup
(
c
->
poﬁ
, &
˘x
->
«me
);

131 i‡(
s
->
ho°
.
d©a
 =
NULL
) {

132 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

133 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

137 
s
->
ho°
.
Àn
 = 
˘x
->
«me
.len;

139 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

141 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

142 "addªs†ªsﬁved: %V", &
s
->
ho°
);

144 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me
;

146 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

147 
	}
}

151 
	$ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
)

153 
ngx_c⁄√˘i⁄_t
 *
c
;

154 
ngx_maû_£ssi⁄_t
 *
s
;

155 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

156 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

158 
c
 = 
ªv
->
d©a
;

159 
s
 = 
c
->
d©a
;

161 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

163 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

164 i‡(
˘x
 =
NULL
) {

165 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

169 
˘x
->
«me
 = 
s
->
ho°
;

170 
˘x
->
ty≥
 = 
NGX_RESOLVE_A
;

171 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
;

172 
˘x
->
d©a
 = 
s
;

173 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

175 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

176 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

178 
	}
}

182 
	$ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

184 
ö_addr_t
 
addr
;

185 
ngx_uöt_t
 
i
;

186 
ngx_c⁄√˘i⁄_t
 *
c
;

187 
sockaddr_ö
 *
sö
;

188 
ngx_maû_£ssi⁄_t
 *
s
;

190 
s
 = 
˘x
->
d©a
;

191 
c
 = 
s
->
c⁄√˘i⁄
;

193 i‡(
˘x
->
°©e
) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

196 &
˘x
->
«me
, ctx->
°©e
,

197 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

199 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

200 
s
->
ho°
 = 
smç_u«vaûabÀ
;

203 
s
->
ho°
 = 
smç_ãmpu«vaû
;

210 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

212 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

214 
addr
 = 
˘x
->
addrs
[
i
];

216 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

218 (
	`¡ohl
(
addr
) >> 24) & 0xff,

219 (
	`¡ohl
(
addr
) >> 16) & 0xff,

220 (
	`¡ohl
(
addr
) >> 8) & 0xff,

221 
	`¡ohl
(
addr
) & 0xff);

223 i‡(
addr
 =
sö
->
sö_addr
.
s_addr
) {

224 
found
;

228 
s
->
ho°
 = 
smç_u«vaûabÀ
;

231 
found
:

233 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

235 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

236 
	}
}

240 
	$ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

242 
ngx_m£c_t
 
timeout
;

243 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

244 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

246 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

247 "smç gªëög f‹ \"%V\"", &
s
->
ho°
);

249 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

250 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

252 
timeout
 = 
sscf
->
gªëög_dñay
 ? sscf->gªëög_dñay : 
cscf
->timeout;

253 
	`ngx_add_timî
(
c
->
ªad
, 
timeout
);

255 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

256 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

259 i‡(
sscf
->
gªëög_dñay
) {

260 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_övÆid_pùñöög
;

264 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

266 
s
->
out
 = 
sscf
->
gªëög
;

268 
	`ngx_maû_£nd
(
c
->
wrôe
);

269 
	}
}

273 
	$ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
)

275 
ngx_c⁄√˘i⁄_t
 *
c
;

276 
ngx_maû_£ssi⁄_t
 *
s
;

277 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

278 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

280 
c
 = 
ªv
->
d©a
;

281 
s
 = 
c
->
d©a
;

283 
c
->
log
->
a˘i⁄
 = "in delayÖipelining state";

285 i‡(
ªv
->
timedout
) {

287 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "delay greeting");

289 
ªv
->
timedout
 = 0;

291 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

293 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

295 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

297 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

298 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

302 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

304 
s
->
out
 = 
sscf
->
gªëög
;

308 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "invalidÖipelining");

310 i‡(
s
->
buf„r
 =
NULL
) {

311 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

316 i‡(
	`ngx_maû_smç_disˇrd_comm™d
(
s
, 
c
,

318 !
NGX_OK
)

323 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_pùñöög
);

326 
	`ngx_maû_£nd
(
c
->
wrôe
);

327 
	}
}

331 
	$ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

333 
ngx_c⁄√˘i⁄_t
 *
c
;

334 
ngx_maû_£ssi⁄_t
 *
s
;

336 
c
 = 
ªv
->
d©a
;

338 
c
->
log
->
a˘i⁄
 = "ináuth state";

340 i‡(
ªv
->
timedout
) {

341 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

342 
c
->
timedout
 = 1;

343 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

347 
s
 = 
c
->
d©a
;

349 i‡(
s
->
buf„r
 =
NULL
) {

350 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

355 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

356 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_auth_°©e
;

358 
	`ngx_maû_smç_auth_°©e
(
ªv
);

359 
	}
}

362 
ngx_öt_t


363 
	$ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

365 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

367 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
)Ë=
NGX_ERROR
) {

368 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

369  
NGX_ERROR
;

372 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

374 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
sscf
->
˛õ¡_buf„r_size
);

375 i‡(
s
->
buf„r
 =
NULL
) {

376 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

377  
NGX_ERROR
;

380  
NGX_OK
;

381 
	}
}

385 
	$ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
)

387 
ngx_öt_t
 
rc
;

388 
ngx_c⁄√˘i⁄_t
 *
c
;

389 
ngx_maû_£ssi⁄_t
 *
s
;

391 
c
 = 
ªv
->
d©a
;

392 
s
 = 
c
->
d©a
;

394 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtpáuth state");

396 i‡(
ªv
->
timedout
) {

397 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

398 
c
->
timedout
 = 1;

399 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

403 i‡(
s
->
out
.
Àn
) {

404 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtp send handler busy");

405 
s
->
blocked
 = 1;

409 
s
->
blocked
 = 0;

411 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

413 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

417 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

419 i‡(
rc
 =
NGX_OK
) {

420 
s
->
maû_°©e
) {

422 
ngx_smç_°¨t
:

424 
s
->
comm™d
) {

426 
NGX_SMTP_HELO
:

427 
NGX_SMTP_EHLO
:

428 
rc
 = 
	`ngx_maû_smç_hño
(
s
, 
c
);

431 
NGX_SMTP_AUTH
:

432 
rc
 = 
	`ngx_maû_smç_auth
(
s
, 
c
);

435 
NGX_SMTP_QUIT
:

436 
s
->
quô
 = 1;

437 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bye
);

440 
NGX_SMTP_MAIL
:

441 
rc
 = 
	`ngx_maû_smç_maû
(
s
, 
c
);

444 
NGX_SMTP_RCPT
:

445 
rc
 = 
	`ngx_maû_smç_r˝t
(
s
, 
c
);

448 
NGX_SMTP_RSET
:

449 
rc
 = 
	`ngx_maû_smç_r£t
(
s
, 
c
);

452 
NGX_SMTP_NOOP
:

455 
NGX_SMTP_STARTTLS
:

456 
rc
 = 
	`ngx_maû_smç_°¨âls
(
s
, 
c
);

457 
	`ngx_°r_£t
(&
s
->
out
, 
smç_°¨âls
);

461 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

467 
ngx_smç_auth_logö_u£∫ame
:

468 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

470 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

471 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

474 
ngx_smç_auth_logö_∑ssw‹d
:

475 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

478 
ngx_smç_auth_∂aö
:

479 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

482 
ngx_smç_auth_¸am_md5
:

483 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

488 
rc
) {

490 
NGX_DONE
:

491 
	`ngx_maû_auth
(
s
, 
c
);

494 
NGX_ERROR
:

495 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

498 
NGX_MAIL_PARSE_INVALID_COMMAND
:

499 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

500 
s
->
°©e
 = 0;

501 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_comm™d
);

505 
NGX_OK
:

506 
s
->
¨gs
.
√…s
 = 0;

507 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

508 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

510 i‡(
s
->
°©e
) {

511 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

514 
	`ngx_maû_£nd
(
c
->
wrôe
);

516 
	}
}

519 
ngx_öt_t


520 
	$ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

522 
ngx_°r_t
 *
¨g
;

523 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

525 i‡(
s
->
¨gs
.
√…s
 != 1) {

526 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

527 
s
->
°©e
 = 0;

528  
NGX_OK
;

531 
¨g
 = 
s
->
¨gs
.
ñts
;

533 
s
->
smç_hño
.
Àn
 = 
¨g
[0].len;

535 
s
->
smç_hño
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
¨g
[0].
Àn
);

536 i‡(
s
->
smç_hño
.
d©a
 =
NULL
) {

537  
NGX_ERROR
;

540 
	`ngx_mem˝y
(
s
->
smç_hño
.
d©a
, 
¨g
[0].d©a,árg[0].
Àn
);

542 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

543 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

545 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

547 i‡(
s
->
comm™d
 =
NGX_SMTP_HELO
) {

548 
s
->
out
 = 
sscf
->
£rvî_«me
;

551 
s
->
esmç
 = 1;

553 #i‡(
NGX_MAIL_SSL
)

555 i‡(
c
->
s¶
 =
NULL
) {

556 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

558 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

560 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

561 
s
->
out
 = 
sscf
->
°¨âls_ˇ∑bûôy
;

562  
NGX_OK
;

565 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

566 
s
->
out
 = 
sscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

567  
NGX_OK
;

572 
s
->
out
 = 
sscf
->
ˇ∑bûôy
;

575  
NGX_OK
;

576 
	}
}

579 
ngx_öt_t


580 
	$ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

582 
ngx_öt_t
 
rc
;

583 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

584 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

586 #i‡(
NGX_MAIL_SSL
)

587 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

588  
NGX_MAIL_PARSE_INVALID_COMMAND
;

592 i‡(
s
->
¨gs
.
√…s
 == 0) {

593 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

594 
s
->
°©e
 = 0;

595  
NGX_OK
;

598 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

600 
rc
) {

602 
NGX_MAIL_AUTH_LOGIN
:

604 
	`ngx_°r_£t
(&
s
->
out
, 
smç_u£∫ame
);

605 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_u£∫ame
;

607  
NGX_OK
;

609 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

611 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

612 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

614  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

616 
NGX_MAIL_AUTH_PLAIN
:

618 
	`ngx_°r_£t
(&
s
->
out
, 
smç_√xt
);

619 
s
->
maû_°©e
 = 
ngx_smç_auth_∂aö
;

621  
NGX_OK
;

623 
NGX_MAIL_AUTH_CRAM_MD5
:

625 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

627 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

628  
NGX_MAIL_PARSE_INVALID_COMMAND
;

631 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

632 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

634 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

635  
NGX_ERROR
;

639 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "334 ", 4Ë=
NGX_OK
) {

640 
s
->
maû_°©e
 = 
ngx_smç_auth_¸am_md5
;

641  
NGX_OK
;

644  
NGX_ERROR
;

647  
rc
;

648 
	}
}

651 
ngx_öt_t


652 
	$ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

654 
u_ch¨
 
ch
;

655 
ngx_°r_t
 
l
;

656 
ngx_uöt_t
 
i
;

657 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

659 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

661 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_NONE_ENABLED
)) {

662 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, "client wasÑejected: \"%V\"");

663 
	`ngx_°r_£t
(&
s
->
out
, 
smç_auth_ªquúed
);

664  
NGX_OK
;

669 i‡(
s
->
smç_‰om
.
Àn
) {

670 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

671  
NGX_OK
;

674 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

675 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

677 
i
 = 0; i < 
l
.
Àn
; i++) {

678 
ch
 = 
l
.
d©a
[
i
];

680 i‡(
ch
 !
CR
 && ch !
LF
) {

684 
l
.
d©a
[
i
] = ' ';

687 
i
) {

688 i‡(
l
.
d©a
[
i
 - 1] != ' ') {

692 
i
--;

695 
l
.
Àn
 = 
i
;

697 
s
->
smç_‰om
.
Àn
 = 
l
.len;

699 
s
->
smç_‰om
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
l
.
Àn
);

700 i‡(
s
->
smç_‰om
.
d©a
 =
NULL
) {

701  
NGX_ERROR
;

704 
	`ngx_mem˝y
(
s
->
smç_‰om
.
d©a
, 
l
.d©a,Ü.
Àn
);

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

707 "smç maû from:\"%V\"", &
s
->
smç_‰om
);

709 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

711  
NGX_OK
;

712 
	}
}

715 
ngx_öt_t


716 
	$ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

718 
u_ch¨
 
ch
;

719 
ngx_°r_t
 
l
;

720 
ngx_uöt_t
 
i
;

722 i‡(
s
->
smç_‰om
.
Àn
 == 0) {

723 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

724  
NGX_OK
;

727 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

728 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

730 
i
 = 0; i < 
l
.
Àn
; i++) {

731 
ch
 = 
l
.
d©a
[
i
];

733 i‡(
ch
 !
CR
 && ch !
LF
) {

737 
l
.
d©a
[
i
] = ' ';

740 
i
) {

741 i‡(
l
.
d©a
[
i
 - 1] != ' ') {

745 
i
--;

748 
l
.
Àn
 = 
i
;

750 
s
->
smç_to
.
Àn
 = 
l
.len;

752 
s
->
smç_to
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
l
.
Àn
);

753 i‡(
s
->
smç_to
.
d©a
 =
NULL
) {

754  
NGX_ERROR
;

757 
	`ngx_mem˝y
(
s
->
smç_to
.
d©a
, 
l
.d©a,Ü.
Àn
);

759 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

760 "smçÑ˝àto:\"%V\"", &
s
->
smç_to
);

762 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_NONE
;

764  
NGX_DONE
;

765 
	}
}

768 
ngx_öt_t


769 
	$ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

771 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

772 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

773 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

775  
NGX_OK
;

776 
	}
}

779 
ngx_öt_t


780 
	$ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

782 #i‡(
NGX_MAIL_SSL
)

783 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

785 i‡(
c
->
s¶
 =
NULL
) {

786 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

787 i‡(
s¶cf
->
°¨âls
) {

794 
	`ngx_°r_nuŒ
(&
s
->
smç_hño
);

795 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

796 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

798 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

799  
NGX_OK
;

805  
NGX_MAIL_PARSE_INVALID_COMMAND
;

806 
	}
}

809 
ngx_öt_t


810 
	$ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

811 *
îr
)

813 
ssize_t
 
n
;

815 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

817 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

818 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

819  
NGX_ERROR
;

822 i‡(
n
 > 0) {

823 
s
->
buf„r
->
œ°
 +
n
;

826 i‡(
n
 =
NGX_AGAIN
) {

827 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

828 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

829  
NGX_ERROR
;

832  
NGX_AGAIN
;

835 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, 
îr
);

837 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

838 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

840  
NGX_OK
;

841 
	}
}

845 
	$ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

846 *
îr
)

848 
u_ch¨
 
ch
;

849 
ngx_°r_t
 
cmd
;

850 
ngx_uöt_t
 
i
;

852 i‡(
c
->
log
->
log_Àvñ
 < 
NGX_LOG_INFO
) {

856 
cmd
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

857 
cmd
.
d©a
 = 
s
->
buf„r
->
°¨t
;

859 
i
 = 0; i < 
cmd
.
Àn
; i++) {

860 
ch
 = 
cmd
.
d©a
[
i
];

862 i‡(
ch
 !
CR
 && ch !
LF
) {

866 
cmd
.
d©a
[
i
] = '_';

869 
cmd
.
Àn
 = 
i
;

871 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, 
îr
, &
cmd
);

872 
	}
}

	@src/mail/ngx_mail_smtp_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 *
ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_c⁄f_bômask_t
 
	gngx_maû_smç_auth_mëhods
[] = {

21 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

22 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

23 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

24 { 
ngx_°rög
("n⁄e"), 
NGX_MAIL_AUTH_NONE_ENABLED
 },

25 { 
ngx_nuŒ_°rög
, 0 }

29 
ngx_°r_t
 
	gngx_maû_smç_auth_mëhods_«mes
[] = {

30 
ngx_°rög
("PLAIN"),

31 
ngx_°rög
("LOGIN"),

32 
ngx_nuŒ_°rög
,

33 
ngx_°rög
("CRAM-MD5"),

34 
ngx_nuŒ_°rög


38 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_smç_¥Ÿocﬁ
 = {

39 
ngx_°rög
("smtp"),

41 
NGX_MAIL_SMTP_PROTOCOL
,

43 
ngx_maû_smç_öô_£ssi⁄
,

44 
ngx_maû_smç_öô_¥Ÿocﬁ
,

45 
ngx_maû_smç_∑r£_comm™d
,

46 
ngx_maû_smç_auth_°©e
,

48 
ngx_°rög
("451 4.3.2 I¡î«»£rvîÉº‹" 
CRLF
)

52 
ngx_comm™d_t
 
	gngx_maû_smç_comm™ds
[] = {

54 { 
ngx_°rög
("smtp_client_buffer"),

55 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

56 
ngx_c⁄f_£t_size_¶Ÿ
,

57 
NGX_MAIL_SRV_CONF_OFFSET
,

58 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

59 
NULL
 },

61 { 
ngx_°rög
("smtp_greeting_delay"),

62 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_m£c_¶Ÿ
,

64 
NGX_MAIL_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
gªëög_dñay
),

66 
NULL
 },

68 { 
ngx_°rög
("smtp_capabilities"),

69 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

70 
ngx_maû_ˇ∑bûôõs
,

71 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
ˇ∑bûôõs
),

73 
NULL
 },

75 { 
ngx_°rög
("smtp_auth"),

76 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

77 
ngx_c⁄f_£t_bômask_¶Ÿ
,

78 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
auth_mëhods
),

80 &
ngx_maû_smç_auth_mëhods
 },

82 
ngx_nuŒ_comm™d


86 
ngx_maû_moduÀ_t
 
	gngx_maû_smç_moduÀ_˘x
 = {

87 &
ngx_maû_smç_¥Ÿocﬁ
,

89 
NULL
,

90 
NULL
,

92 
ngx_maû_smç_¸óã_§v_c⁄f
,

93 
ngx_maû_smç_mîge_§v_c⁄f


97 
ngx_moduÀ_t
 
	gngx_maû_smç_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_maû_smç_moduÀ_˘x
,

100 
ngx_maû_smç_comm™ds
,

101 
NGX_MAIL_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


114 
	$ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

116 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

118 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_smç_§v_c⁄f_t
));

119 i‡(
sscf
 =
NULL
) {

120  
NULL
;

123 
sscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

124 
sscf
->
gªëög_dñay
 = 
NGX_CONF_UNSET_MSEC
;

126 i‡(
	`ngx_¨øy_öô
(&
sscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

127 !
NGX_OK
)

129  
NULL
;

132  
sscf
;

133 
	}
}

137 
	$ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

139 
ngx_maû_smç_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

140 
ngx_maû_smç_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

142 
u_ch¨
 *
p
, *
auth
, *
œ°
;

143 
size_t
 
size
;

144 
ngx_°r_t
 *
c
;

145 
ngx_uöt_t
 
i
, 
m
, 
auth_íabÀd
;

146 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

148 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

149 
¥ev
->
˛õ¡_buf„r_size
,

150 (
size_t
Ë
ngx_∑gesize
);

152 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
gªëög_dñay
,

153 
¥ev
->
gªëög_dñay
, 0);

155 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

156 
¥ev
->
auth_mëhods
,

157 (
NGX_CONF_BITMASK_SET


158 |
NGX_MAIL_AUTH_PLAIN_ENABLED


159 |
NGX_MAIL_AUTH_LOGIN_ENABLED
));

162 
cscf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

164 
size
 = ("220 ESMTPÑódy" 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

166 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

167 i‡(
p
 =
NULL
) {

168  
NGX_CONF_ERROR
;

171 
c⁄f
->
gªëög
.
Àn
 = 
size
;

172 
c⁄f
->
gªëög
.
d©a
 = 
p
;

174 *
p
++ = '2'; *p++ = '2'; *p++ = '0'; *p++ = ' ';

175 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

176 
	`ngx_mem˝y
(
p
, " ESMTPÑódy" 
CRLF
, (" ESMTPÑeady" CRLF) - 1);

179 
size
 = ("250 " 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

181 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

182 i‡(
p
 =
NULL
) {

183  
NGX_CONF_ERROR
;

186 
c⁄f
->
£rvî_«me
.
Àn
 = 
size
;

187 
c⁄f
->
£rvî_«me
.
d©a
 = 
p
;

189 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

190 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

191 *
p
++ = 
CR
; *∞
LF
;

194 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

195 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

198 
size
 = ("250-"Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
 + (
CRLF
) - 1;

200 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

201 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

202 
size
 +("250 "Ë- 1 + 
c
[
i
].
Àn
 + (
CRLF
) - 1;

205 
auth_íabÀd
 = 0;

207 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

208 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

209 
m
 <<1, 
i
++)

211 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

212 
size
 +1 + 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
;

213 
auth_íabÀd
 = 1;

217 i‡(
auth_íabÀd
) {

218 
size
 +("250 AUTH"Ë- 1 + (
CRLF
) - 1;

221 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

222 i‡(
p
 =
NULL
) {

223  
NGX_CONF_ERROR
;

226 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

227 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

229 
œ°
 = 
p
;

231 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

232 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

233 *
p
++ = 
CR
; *p++ = 
LF
;

235 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

236 
œ°
 = 
p
;

237 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

238 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

239 *
p
++ = 
CR
; *p++ = 
LF
;

242 
auth
 = 
p
;

244 i‡(
auth_íabÀd
) {

245 
œ°
 = 
p
;

247 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

248 *
p
++ = 'A'; *p++ = 'U'; *p++ = 'T'; *p++ = 'H';

250 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

251 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

252 
m
 <<1, 
i
++)

254 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

255 *
p
++ = ' ';

256 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
d©a
,

257 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
);

261 *
p
++ = 
CR
; *∞
LF
;

264 
œ°
[3] = ' ';

267 
size
 +("250 STARTTLS" 
CRLF
) - 1;

269 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

270 i‡(
p
 =
NULL
) {

271  
NGX_CONF_ERROR
;

274 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

275 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

277 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, c⁄f->ˇ∑bûôy.
Àn
);

279 
p
 = 
	`ngx_˝ymem
’, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

280 *
p
++ = 
CR
; *∞
LF
;

282 
p
 = 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a


283 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

284 *
p
 = '-';

286 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
)

287 + ("250 STARTTLS" 
CRLF
) - 1;

289 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

290 i‡(
p
 =
NULL
) {

291  
NGX_CONF_ERROR
;

294 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

295 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

297 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, 
auth
 - conf->capability.data);

299 
	`ngx_mem˝y
(
p
, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

301 i‡(
œ°
 < 
auth
) {

302 
p
 = 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a


303 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

304 *
p
 = '-';

307  
NGX_CONF_OK
;

308 
	}
}

	@src/mail/ngx_mail_smtp_module.h

8 #i‚de‡
_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

15 
	~<ngx_maû_smç_moduÀ.h
>

19 
ngx_m£c_t
 
	mgªëög_dñay
;

21 
size_t
 
	m˛õ¡_buf„r_size
;

23 
ngx_°r_t
 
	mˇ∑bûôy
;

24 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

25 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

27 
ngx_°r_t
 
	m£rvî_«me
;

28 
ngx_°r_t
 
	mgªëög
;

30 
ngx_uöt_t
 
	mauth_mëhods
;

32 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

33 } 
	tngx_maû_smç_§v_c⁄f_t
;

36 
ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

37 
ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

38 
ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
);

39 
ngx_öt_t
 
ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

42 
ngx_moduÀ_t
 
ngx_maû_smç_moduÀ
;

	@src/mail/ngx_mail_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_maû.h
>

13 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

14 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

17 *
ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

18 *
ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

20 *
ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_íum_t
 
	gngx_hâp_°¨âls_°©e
[] = {

29 { 
ngx_°rög
("off"), 
NGX_MAIL_STARTTLS_OFF
 },

30 { 
ngx_°rög
("⁄"), 
NGX_MAIL_STARTTLS_ON
 },

31 { 
ngx_°rög
("⁄ly"), 
NGX_MAIL_STARTTLS_ONLY
 },

32 { 
ngx_nuŒ_°rög
, 0 }

37 
ngx_c⁄f_bômask_t
 
	gngx_maû_s¶_¥Ÿocﬁs
[] = {

38 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

39 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

40 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

41 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

42 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

43 { 
ngx_nuŒ_°rög
, 0 }

47 
ngx_comm™d_t
 
	gngx_maû_s¶_comm™ds
[] = {

49 { 
ngx_°rög
("ssl"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

51 
ngx_maû_s¶_íabÀ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
íabÀ
),

54 
NULL
 },

56 { 
ngx_°rög
("starttls"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_maû_s¶_°¨âls
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
°¨âls
),

61 
ngx_hâp_°¨âls_°©e
 },

63 { 
ngx_°rög
("ssl_certificate"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_°r_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã
),

68 
NULL
 },

70 { 
ngx_°rög
("ssl_certificate_key"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_°r_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã_key
),

75 
NULL
 },

77 { 
ngx_°rög
("ssl_dhparam"),

78 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_°r_¶Ÿ
,

80 
NGX_MAIL_SRV_CONF_OFFSET
,

81 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
dh∑øm
),

82 
NULL
 },

84 { 
ngx_°rög
("ssl_ecdh_curve"),

85 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_°r_¶Ÿ
,

87 
NGX_MAIL_SRV_CONF_OFFSET
,

88 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
ecdh_curve
),

89 
NULL
 },

91 { 
ngx_°rög
("ssl_protocols"),

92 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

93 
ngx_c⁄f_£t_bômask_¶Ÿ
,

94 
NGX_MAIL_SRV_CONF_OFFSET
,

95 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥Ÿocﬁs
),

96 &
ngx_maû_s¶_¥Ÿocﬁs
 },

98 { 
ngx_°rög
("ssl_ciphers"),

99 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_°r_¶Ÿ
,

101 
NGX_MAIL_SRV_CONF_OFFSET
,

102 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
cùhîs
),

103 
NULL
 },

105 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

106 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

107 
ngx_c⁄f_£t_Êag_¶Ÿ
,

108 
NGX_MAIL_SRV_CONF_OFFSET
,

109 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

110 
NULL
 },

112 { 
ngx_°rög
("ssl_session_cache"),

113 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

114 
ngx_maû_s¶_£ssi⁄_ˇche
,

115 
NGX_MAIL_SRV_CONF_OFFSET
,

117 
NULL
 },

119 { 
ngx_°rög
("ssl_session_timeout"),

120 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

121 
ngx_c⁄f_£t_£c_¶Ÿ
,

122 
NGX_MAIL_SRV_CONF_OFFSET
,

123 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_timeout
),

124 
NULL
 },

126 
ngx_nuŒ_comm™d


130 
ngx_maû_moduÀ_t
 
	gngx_maû_s¶_moduÀ_˘x
 = {

131 
NULL
,

133 
NULL
,

134 
NULL
,

136 
ngx_maû_s¶_¸óã_c⁄f
,

137 
ngx_maû_s¶_mîge_c⁄f


141 
ngx_moduÀ_t
 
	gngx_maû_s¶_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_maû_s¶_moduÀ_˘x
,

144 
ngx_maû_s¶_comm™ds
,

145 
NGX_MAIL_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


157 
ngx_°r_t
 
	gngx_maû_s¶_£ss_id_˘x
 = 
ngx_°rög
("MAIL");

161 
	$ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

163 
ngx_maû_s¶_c⁄f_t
 *
scf
;

165 
scf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_s¶_c⁄f_t
));

166 i‡(
scf
 =
NULL
) {

167  
NULL
;

182 
scf
->
íabÀ
 = 
NGX_CONF_UNSET
;

183 
scf
->
°¨âls
 = 
NGX_CONF_UNSET_UINT
;

184 
scf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

185 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

186 
scf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

188  
scf
;

189 
	}
}

193 
	$ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

195 
ngx_maû_s¶_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

196 
ngx_maû_s¶_c⁄f_t
 *
c⁄f
 = 
chûd
;

198 *
mode
;

199 
ngx_poﬁ_˛ónup_t
 *
˛n
;

201 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

202 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°¨âls
, 
¥ev
->starttls,

203 
NGX_MAIL_STARTTLS_OFF
);

205 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

206 
¥ev
->
£ssi⁄_timeout
, 300);

208 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

209 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

211 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

212 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


213 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

215 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

216 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

218 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

220 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

221 
NGX_DEFAULT_ECDH_CURVE
);

223 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

226 
c⁄f
->
s¶
.
log
 = 
cf
->log;

228 i‡(
c⁄f
->
íabÀ
) {

229 
mode
 = "ssl";

231 } i‡(
c⁄f
->
°¨âls
 !
NGX_MAIL_STARTTLS_OFF
) {

232 
mode
 = "starttls";

235 
mode
 = "";

238 i‡(*
mode
) {

240 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

241 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

244 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

245  
NGX_CONF_ERROR
;

248 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

249 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

252 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

253  
NGX_CONF_ERROR
;

258 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

259  
NGX_CONF_OK
;

262 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

263 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

266 &
c⁄f
->
˚πifiˇã
);

267  
NGX_CONF_ERROR
;

271 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, 
NULL
Ë!
NGX_OK
) {

272  
NGX_CONF_ERROR
;

275 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

276 i‡(
˛n
 =
NULL
) {

277  
NGX_CONF_ERROR
;

280 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

281 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

283 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

284 &
c⁄f
->
˚πifiˇã_key
)

285 !
NGX_OK
)

287  
NGX_CONF_ERROR
;

290 i‡(
c⁄f
->
cùhîs
.
Àn
) {

291 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

292 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

295 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

297 &
c⁄f
->
cùhîs
);

301 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

302 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

305 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

307 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

308  
NGX_CONF_ERROR
;

311 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

312 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

314 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

315 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

318 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_maû_s¶_£ss_id_˘x
,

319 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

320 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

321 !
NGX_OK
)

323  
NGX_CONF_ERROR
;

326  
NGX_CONF_OK
;

327 
	}
}

331 
	$ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

333 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

335 *
rv
;

337 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

339 i‡(
rv
 !
NGX_CONF_OK
) {

340  
rv
;

343 i‡(
scf
->
íabÀ
 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

344 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

346  
NGX_CONF_ERROR
;

349 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

350 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

352  
NGX_CONF_OK
;

353 
	}
}

357 
	$ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

359 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

361 *
rv
;

363 
rv
 = 
	`ngx_c⁄f_£t_íum_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

365 i‡(
rv
 !
NGX_CONF_OK
) {

366  
rv
;

369 i‡(
scf
->
íabÀ
 =1 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

370 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

372  
NGX_CONF_ERROR
;

375 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

376 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

378  
NGX_CONF_OK
;

379 
	}
}

383 
	$ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

385 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

387 
size_t
 
Àn
;

388 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

389 
ngx_öt_t
 
n
;

390 
ngx_uöt_t
 
i
, 
j
;

392 
vÆue
 = 
cf
->
¨gs
->
ñts
;

394 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

396 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

397 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

401 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

402 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

406 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

407 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

411 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

412 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

415 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

416 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

418 i‡(
n
 =
NGX_ERROR
) {

419 
övÆid
;

422 
scf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

427 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

428 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

431 
Àn
 = 0;

433 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

434 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

438 
Àn
++;

441 i‡(
Àn
 == 0) {

442 
övÆid
;

445 
«me
.
Àn
 =Üen;

446 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

448 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

449 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

451 
n
 = 
	`ngx_∑r£_size
(&
size
);

453 i‡(
n
 =
NGX_ERROR
) {

454 
övÆid
;

457 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

458 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

460 &
vÆue
[
i
]);

462  
NGX_CONF_ERROR
;

465 
scf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

466 &
ngx_maû_s¶_moduÀ
);

467 i‡(
scf
->
shm_z⁄e
 =
NULL
) {

468  
NGX_CONF_ERROR
;

471 
scf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

476 
övÆid
;

479 i‡(
scf
->
shm_z⁄e
 && scf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

480 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

483  
NGX_CONF_OK
;

485 
övÆid
:

487 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

488 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

490  
NGX_CONF_ERROR
;

491 
	}
}

	@src/mail/ngx_mail_ssl_module.h

8 #i‚de‡
_NGX_MAIL_SSL_H_INCLUDED_


9 
	#_NGX_MAIL_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

17 
	#NGX_MAIL_STARTTLS_OFF
 0

	)

18 
	#NGX_MAIL_STARTTLS_ON
 1

	)

19 
	#NGX_MAIL_STARTTLS_ONLY
 2

	)

23 
ngx_Êag_t
 
	míabÀ
;

24 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

26 
ngx_s¶_t
 
	ms¶
;

28 
ngx_uöt_t
 
	m°¨âls
;

29 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_°r_t
 
	m˚πifiˇã
;

36 
ngx_°r_t
 
	m˚πifiˇã_key
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

40 
ngx_°r_t
 
	mcùhîs
;

42 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

44 
u_ch¨
 *
	mfûe
;

45 
ngx_uöt_t
 
	mlöe
;

46 } 
	tngx_maû_s¶_c⁄f_t
;

49 
ngx_moduÀ_t
 
ngx_maû_s¶_moduÀ
;

	@src/misc/ngx_cpp_test_module.cpp

5 
	~<ngx_c⁄fig.h
>

6 
	~<ngx_c‹e.h
>

7 
	~<ngx_evít.h
>

8 
	~<ngx_evít_c⁄√˘.h
>

9 
	~<ngx_evít_pùe.h
>

11 
	~<ngx_hâp.h
>

13 
	~<ngx_maû.h
>

14 
	~<ngx_maû_p›3_moduÀ.h
>

15 
	~<ngx_maû_im≠_moduÀ.h
>

16 
	~<ngx_maû_smç_moduÀ.h
>

24 
	$ngx_˝p_ã°_h™dÀr
(*
d©a
)

27 
	}
}

	@src/misc/ngx_google_perftools_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

16 
ProfûîSèπ
(
u_ch¨
* 
‚ame
);

17 
ProfûîSt›
();

18 
ProfûîRegi°îThªad
();

21 *
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_öt_t
 
ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_°r_t
 
	m¥ofûes
;

27 } 
	tngx_googÀ_≥r·oﬁs_c⁄f_t
;

30 
ngx_comm™d_t
 
	gngx_googÀ_≥r·oﬁs_comm™ds
[] = {

32 { 
ngx_°rög
("google_perftools_profiles"),

33 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

34 
ngx_c⁄f_£t_°r_¶Ÿ
,

36 
off£tof
(
ngx_googÀ_≥r·oﬁs_c⁄f_t
, 
¥ofûes
),

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_c‹e_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ_˘x
 = {

44 
ngx_°rög
("google_perftools"),

45 
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
,

46 
NULL


50 
ngx_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_googÀ_≥r·oﬁs_moduÀ_˘x
,

53 
ngx_googÀ_≥r·oﬁs_comm™ds
,

54 
NGX_CORE_MODULE
,

55 
NULL
,

56 
NULL
,

57 
ngx_googÀ_≥r·oﬁs_w‹kî
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
	$ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

69 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

71 
g±cf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_googÀ_≥r·oﬁs_c⁄f_t
));

72 i‡(
g±cf
 =
NULL
) {

73  
NULL
;

82  
g±cf
;

83 
	}
}

86 
ngx_öt_t


87 
	$ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

89 
u_ch¨
 *
¥ofûe
;

90 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

92 
g±cf
 = (
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *)

93 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_googÀ_≥r·oﬁs_moduÀ
);

95 i‡(
g±cf
->
¥ofûes
.
Àn
 == 0) {

96  
NGX_OK
;

99 
¥ofûe
 = 
	`ngx_Æloc
(
g±cf
->
¥ofûes
.
Àn
 + 
NGX_INT_T_LEN
 + 2, 
cy˛e
->
log
);

100 i‡(
¥ofûe
 =
NULL
) {

101  
NGX_OK
;

104 i‡(
	`gëív
("CPUPROFILE")) {

106 
	`ProfûîSt›
();

109 
	`ngx_•rötf
(
¥ofûe
, "%V.%d%Z", &
g±cf
->
¥ofûes
, 
ngx_pid
);

111 i‡(
	`ProfûîSèπ
(
¥ofûe
)) {

113 
	`ProfûîRegi°îThªad
();

116 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_î∫o
,

117 "ProfûîSèπ(%sËÁûed", 
¥ofûe
);

120 
	`ngx_‰ì
(
¥ofûe
);

122  
NGX_OK
;

123 
	}
}

	@src/os/unix/ngx_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(!
ªv
->
ªady
) {

25 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "secondáioÖost");

26  
NGX_AGAIN
;

29 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

30 "ªv->com∂ëe: %d", 
ªv
->
com∂ëe
);

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

32 "aiÿsize: %d", 
size
);

34 i‡(!
ªv
->
com∂ëe
) {

35 
	`ngx_memzîo
(&
ªv
->
aiocb
, (aiocb));

37 
ªv
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

38 
ªv
->
aiocb
.
aio_buf
 = 
buf
;

39 
ªv
->
aiocb
.
aio_nbyãs
 = 
size
;

41 #i‡(
NGX_HAVE_KQUEUE
)

42 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

43 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

44 
ªv
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 =Ñev;

47 i‡(
	`aio_ªad
(&
ªv
->
aiocb
) == -1) {

48 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ªv
->
log
, 
ngx_î∫o
,

50 
ªv
->
îr‹
 = 1;

51  
NGX_ERROR
;

54 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "aio_ªad: #%d OK", 
c
->
fd
);

57 
ªv
->
a˘ive
 = 1;

58 
ªv
->
ªady
 = 0;

61 
ªv
->
com∂ëe
 = 0;

63 
n
 = 
	`aio_îr‹
(&
ªv
->
aiocb
);

64 i‡(
n
 == -1) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
, "aio_error() failed");

66 
ªv
->
îr‹
 = 1;

67  
NGX_ERROR
;

70 i‡(
n
 != 0) {

71 i‡(
n
 =
NGX_EINPROGRESS
) {

72 i‡(
ªv
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
n
,

75 
ªv
->
ªady
 = 0;

77  
NGX_AGAIN
;

80 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
n
, "aio_read() failed");

81 
ªv
->
îr‹
 = 1;

82 
ªv
->
ªady
 = 0;

83  
NGX_ERROR
;

86 
n
 = 
	`aio_ªtu∫
(&
ªv
->
aiocb
);

87 i‡(
n
 == -1) {

88 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

91 
ªv
->
îr‹
 = 1;

92 
ªv
->
ªady
 = 0;

93  
NGX_ERROR
;

96 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

97 "aio_ªad: #%d %d", 
c
->
fd
, 
n
);

99 i‡(
n
 == 0) {

100 
ªv
->
eof
 = 1;

101 
ªv
->
ªady
 = 0;

103 
ªv
->
ªady
 = 1;

106 
ªv
->
a˘ive
 = 0;

108  
n
;

109 
	}
}

	@src/os/unix/ngx_aio_read_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
)

16 
n
;

17 
u_ch¨
 *
buf
, *
¥ev
;

18 
size_t
 
size
;

19 
ssize_t
 
tŸÆ
;

21 i‡(
c
->
ªad
->
≥ndög_eof
) {

22 
c
->
ªad
->
ªady
 = 0;

26 
tŸÆ
 = 0;

28 
˛
) {

32 i‡(!
c
->
ªad
->
ªady
) {

33  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

36 
buf
 = 
˛
->buf->
œ°
;

37 
¥ev
 = 
˛
->
buf
->
œ°
;

38 
size
 = 0;

42 
˛
 && 
¥ev
 =˛->
buf
->
œ°
) {

43 
size
 +
˛
->
buf
->
íd
 - cl->buf->
œ°
;

44 
¥ev
 = 
˛
->
buf
->
íd
;

45 
˛
 = cl->
√xt
;

48 
n
 = 
	`ngx_aio_ªad
(
c
, 
buf
, 
size
);

50 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ªad: %d", 
n
);

52 i‡(
n
 =
NGX_AGAIN
) {

53  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

56 i‡(
n
 =
NGX_ERROR
) {

57  
NGX_ERROR
;

60 i‡(
n
 == 0) {

61 
c
->
ªad
->
≥ndög_eof
 = 1;

62 i‡(
tŸÆ
) {

63 
c
->
ªad
->
eof
 = 0;

64 
c
->
ªad
->
ªady
 = 1;

66  
tŸÆ
;

69 i‡(
n
 > 0) {

70 
tŸÆ
 +
n
;

73 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

74 "aio_ªadÅŸÆ: %d", 
tŸÆ
);

77  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

78 
	}
}

	@src/os/unix/ngx_aio_write.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
wev
;

22 
wev
 = 
c
->
wrôe
;

24 i‡(!
wev
->
ªady
) {

25  
NGX_AGAIN
;

28 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

29 "aio: wev->com∂ëe: %d", 
wev
->
com∂ëe
);

31 i‡(!
wev
->
com∂ëe
) {

32 
	`ngx_memzîo
(&
wev
->
aiocb
, (aiocb));

34 
wev
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

35 
wev
->
aiocb
.
aio_buf
 = 
buf
;

36 
wev
->
aiocb
.
aio_nbyãs
 = 
size
;

38 #i‡(
NGX_HAVE_KQUEUE
)

39 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

40 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

41 
wev
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = wev;

44 i‡(
	`aio_wrôe
(&
wev
->
aiocb
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
,

47  
NGX_ERROR
;

50 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_write: OK");

52 
wev
->
a˘ive
 = 1;

53 
wev
->
ªady
 = 0;

56 
wev
->
com∂ëe
 = 0;

58 
n
 = 
	`aio_îr‹
(&
wev
->
aiocb
);

59 i‡(
n
 == -1) {

60 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
, "aio_error() failed");

61 
wev
->
îr‹
 = 1;

62  
NGX_ERROR
;

65 i‡(
n
 != 0) {

66 i‡(
n
 =
NGX_EINPROGRESS
) {

67 i‡(
wev
->
ªady
) {

68 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
n
,

70 
wev
->
ªady
 = 0;

72  
NGX_AGAIN
;

75 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_write() failed");

76 
wev
->
îr‹
 = 1;

77 
wev
->
ªady
 = 0;

80 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

81 i‡(
n
 == -1) {

82 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

86 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_return() %d",Ç);

89  
NGX_ERROR
;

92 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

93 i‡(
n
 == -1) {

94 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

97 
wev
->
îr‹
 = 1;

98 
wev
->
ªady
 = 0;

99  
NGX_ERROR
;

103 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_wrôe: %d", 
n
);

105 
wev
->
a˘ive
 = 0;

106 
wev
->
ªady
 = 1;

108  
n
;

109 
	}
}

	@src/os/unix/ngx_aio_write_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_chaö_t
 *

14 
	$ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

16 
u_ch¨
 *
buf
, *
¥ev
;

17 
off_t
 
£nd
, 
£¡
;

18 
size_t
 
Àn
;

19 
ssize_t
 
n
, 
size
;

20 
ngx_chaö_t
 *
˛
;

24 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

25 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

28 
£nd
 = 0;

29 
£¡
 = 0;

30 
˛
 = 
ö
;

32 
˛
) {

34 i‡(
˛
->
buf
->
pos
 =˛->buf->
œ°
) {

35 
˛
 = cl->
√xt
;

41 i‡(!
c
->
wrôe
->
ªady
) {

42  
˛
;

45 
buf
 = 
˛
->buf->
pos
;

46 
¥ev
 = 
buf
;

47 
Àn
 = 0;

51 
˛
 && 
¥ev
 =˛->
buf
->
pos
 && 
£nd
 < 
limô
) {

52 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

56 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

58 i‡(
£nd
 + 
size
 > 
limô
) {

59 
size
 = 
limô
 - 
£nd
;

62 
Àn
 +
size
;

63 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

64 
£nd
 +
size
;

65 
˛
 = cl->
√xt
;

68 
n
 = 
	`ngx_aio_wrôe
(
c
, 
buf
, 
Àn
);

70 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_wrôe: %z", 
n
);

72 i‡(
n
 =
NGX_ERROR
) {

73  
NGX_CHAIN_ERROR
;

76 i‡(
n
 > 0) {

77 
£¡
 +
n
;

78 
c
->
£¡
 +
n
;

81 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

82 "aio_wrôê£¡: %O", 
c
->
£¡
);

84 
˛
 = 
ö
; cl; c»˛->
√xt
) {

86 i‡(
£¡
 >
˛
->
buf
->
œ°
 - cl->buf->
pos
) {

87 
£¡
 -
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

93 
˛
->
buf
->
pos
 +
£¡
;

99  
˛
;

100 
	}
}

	@src/os/unix/ngx_alloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	gngx_∑gesize
;

13 
ngx_uöt_t
 
	gngx_∑gesize_shi·
;

14 
ngx_uöt_t
 
	gngx_ˇchñöe_size
;

18 
	$ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

20 *
p
;

22 
p
 = 
	`mÆloc
(
size
);

23 i‡(
p
 =
NULL
) {

24 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

25 "mÆloc(%uzËÁûed", 
size
);

28 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0, "mÆloc: %p:%uz", 
p
, 
size
);

30  
p
;

31 
	}
}

35 
	$ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

37 *
p
;

39 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

41 i‡(
p
) {

42 
	`ngx_memzîo
(
p
, 
size
);

45  
p
;

46 
	}
}

49 #i‡(
NGX_HAVE_POSIX_MEMALIGN
)

52 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

54 *
p
;

55 
îr
;

57 
îr
 = 
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
);

59 i‡(
îr
) {

60 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

61 "posix_memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

62 
p
 = 
NULL
;

65 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

66 "posix_memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

68  
p
;

69 
	}
}

71 #ñi‡(
NGX_HAVE_MEMALIGN
)

74 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

76 *
p
;

78 
p
 = 
	`memÆign
(
Æignmít
, 
size
);

79 i‡(
p
 =
NULL
) {

80 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

81 "memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

84 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

85 "memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

87  
p
;

88 
	}
}

	@src/os/unix/ngx_alloc.h

8 #i‚de‡
_NGX_ALLOC_H_INCLUDED_


9 
	#_NGX_ALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 *
ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

17 *
ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

19 
	#ngx_‰ì
 
‰ì


	)

29 #i‡(
NGX_HAVE_POSIX_MEMALIGN
 || 
NGX_HAVE_MEMALIGN
)

31 *
ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
);

35 
	#ngx_memÆign
(
Æignmít
, 
size
, 
log
Ë
	`ngx_Æloc
(size,Üog)

	)

40 
ngx_uöt_t
 
ngx_∑gesize
;

41 
ngx_uöt_t
 
ngx_∑gesize_shi·
;

42 
ngx_uöt_t
 
ngx_ˇchñöe_size
;

	@src/os/unix/ngx_atomic.h

8 #i‚de‡
_NGX_ATOMIC_H_INCLUDED_


9 
	#_NGX_ATOMIC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_LIBATOMIC
)

18 
	#AO_REQUIRE_CAS


	)

19 
	~<©omic_›s.h
>

21 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

23 
	tngx_©omic_öt_t
;

24 
AO_t
 
	tngx_©omic_uöt_t
;

25 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

27 #i‡(
NGX_PTR_SIZE
 == 8)

28 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

30 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

33 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

34 
	`AO_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
√w
)

	)

35 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

36 
	`AO_„tch_™d_add
(
vÆue
, 
add
)

	)

37 
	#ngx_mem‹y_b¨rõr
(Ë
	`AO_n›
()

	)

38 
	#ngx_˝u_∑u£
()

	)

41 #ñi‡(
NGX_DARWIN_ATOMIC
)

48 
	~<libkîn/OSAtomic.h
>

51 #unde‡
boﬁ


54 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

56 #i‡(
NGX_PTR_SIZE
 == 8)

58 
öt64_t
 
	tngx_©omic_öt_t
;

59 
uöt64_t
 
	tngx_©omic_uöt_t
;

60 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

62 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

63 
	`OSAtomicCom∑ªAndSw≠64B¨rõr
(
ﬁd
, 
√w
, (
öt64_t
 *Ë
lock
)

	)

65 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

66 (
	`OSAtomicAdd64
(
add
, (
öt64_t
 *Ë
vÆue
Ë-ádd)

	)

70 
öt32_t
 
	tngx_©omic_öt_t
;

71 
uöt32_t
 
	tngx_©omic_uöt_t
;

72 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

74 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

75 
	`OSAtomicCom∑ªAndSw≠32B¨rõr
(
ﬁd
, 
√w
, (
öt32_t
 *Ë
lock
)

	)

77 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

78 (
	`OSAtomicAdd32
(
add
, (
öt32_t
 *Ë
vÆue
Ë-ádd)

	)

82 
	#ngx_mem‹y_b¨rõr
(Ë
	`OSMem‹yB¨rõr
()

	)

84 
	#ngx_˝u_∑u£
()

	)

86 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

89 #ñi‡(
NGX_HAVE_GCC_ATOMIC
)

93 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

95 
	tngx_©omic_öt_t
;

96 
	tngx_©omic_uöt_t
;

98 #i‡(
NGX_PTR_SIZE
 == 8)

99 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

101 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

104 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

107 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
£t
) \

108 
	`__sync_boﬁ_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
£t
)

	)

110 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

111 
	`__sync_„tch_™d_add
(
vÆue
, 
add
)

	)

113 
	#ngx_mem‹y_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

115 #i‡–
__i386__
 || 
__i386
 || 
__amd64__
 || 
__amd64
 )

116 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

118 
	#ngx_˝u_∑u£
()

	)

122 #ñi‡–
__i386__
 || 
__i386
 )

124 
öt32_t
 
	tngx_©omic_öt_t
;

125 
uöt32_t
 
	tngx_©omic_uöt_t
;

126 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

127 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

130 #i‡–
__SUNPRO_C
 )

132 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

134 
ngx_©omic_uöt_t


135 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

136 
ngx_©omic_uöt_t
 
£t
);

138 
ngx_©omic_öt_t


139 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

147 
ngx_˝u_∑u£
();

151 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

156 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

158 
	~"ngx_gcc_©omic_x86.h
"

163 #ñi‡–
__amd64__
 || 
__amd64
 )

165 
öt64_t
 
	tngx_©omic_öt_t
;

166 
uöt64_t
 
	tngx_©omic_uöt_t
;

167 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

168 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

171 #i‡–
__SUNPRO_C
 )

173 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

175 
ngx_©omic_uöt_t


176 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

177 
ngx_©omic_uöt_t
 
£t
);

179 
ngx_©omic_öt_t


180 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

188 
ngx_˝u_∑u£
();

192 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

197 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

199 
	~"ngx_gcc_©omic_amd64.h
"

204 #ñi‡–
__•¨c__
 || 
__•¨c
 || 
__•¨cv9
 )

206 #i‡(
NGX_PTR_SIZE
 == 8)

208 
öt64_t
 
	tngx_©omic_öt_t
;

209 
uöt64_t
 
	tngx_©omic_uöt_t
;

210 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

214 
öt32_t
 
	tngx_©omic_öt_t
;

215 
uöt32_t
 
	tngx_©omic_uöt_t
;

216 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

220 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

223 #i‡–
__SUNPRO_C
 )

225 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

227 
	~"ngx_su≈ro_©omic_•¨c64.h
"

232 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

234 
	~"ngx_gcc_©omic_•¨c64.h
"

239 #ñi‡–
__powîpc__
 || 
__POWERPC__
 )

241 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

243 #i‡(
NGX_PTR_SIZE
 == 8)

245 
öt64_t
 
	tngx_©omic_öt_t
;

246 
uöt64_t
 
	tngx_©omic_uöt_t
;

247 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

251 
öt32_t
 
	tngx_©omic_öt_t
;

252 
uöt32_t
 
	tngx_©omic_uöt_t
;

253 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

257 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

260 
	~"ngx_gcc_©omic_µc.h
"

265 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

267 
	#NGX_HAVE_ATOMIC_OPS
 0

	)

269 
öt32_t
 
	tngx_©omic_öt_t
;

270 
uöt32_t
 
	tngx_©omic_uöt_t
;

271 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

272 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

275 
ngx_ölöe
 
ngx_©omic_uöt_t


276 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

277 
ngx_©omic_uöt_t
 
£t
)

279 i‡(*
lock
 =
ﬁd
) {

280 *
lock
 = 
£t
;

285 
	}
}

288 
ngx_ölöe
 
ngx_©omic_öt_t


289 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

291 
ngx_©omic_öt_t
 
ﬁd
;

293 
ﬁd
 = *
vÆue
;

294 *
vÆue
 +
add
;

296  
ﬁd
;

297 
	}
}

299 
	#ngx_mem‹y_b¨rõr
()

	)

300 
	#ngx_˝u_∑u£
()

	)

305 
ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
);

307 
	#ngx_åylock
(
lock
Ë(*÷ockË=0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 1))

	)

308 
	#ngx_u∆ock
(
lock
Ë*÷ockË0

	)

	@src/os/unix/ngx_channel.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_ch™√l.h
>

13 
ngx_öt_t


14 
	$ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

15 
ngx_log_t
 *
log
)

17 
ssize_t
 
n
;

18 
ngx_îr_t
 
îr
;

19 
iovec
 
iov
[1];

20 
msghdr
 
msg
;

22 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

25 
cmsghdr
 
cm
;

26 
•a˚
[
	`CMSG_SPACE
(())];

27 } 
cmsg
;

29 i‡(
ch
->
fd
 == -1) {

30 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

31 
msg
.
msg_c⁄åﬁÀn
 = 0;

34 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

35 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

37 
cmsg
.
cm
.
cmsg_Àn
 = 
	`CMSG_LEN
(());

38 
cmsg
.
cm
.
cmsg_Àvñ
 = 
SOL_SOCKET
;

39 
cmsg
.
cm
.
cmsg_ty≥
 = 
SCM_RIGHTS
;

51 
	`ngx_mem˝y
(
	`CMSG_DATA
(&
cmsg
.
cm
), &
ch
->
fd
, ());

54 
msg
.
msg_Êags
 = 0;

58 i‡(
ch
->
fd
 == -1) {

59 
msg
.
msg_ac¸ights
 = 
NULL
;

60 
msg
.
msg_ac¸ight¶í
 = 0;

63 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
ch
->
fd
;

64 
msg
.
msg_ac¸ight¶í
 = ();

69 
iov
[0].
iov_ba£
 = (*Ë
ch
;

70 
iov
[0].
iov_Àn
 = 
size
;

72 
msg
.
msg_«me
 = 
NULL
;

73 
msg
.
msg_«mñí
 = 0;

74 
msg
.
msg_iov
 = 
iov
;

75 
msg
.
msg_iovÀn
 = 1;

77 
n
 = 
	`£ndmsg
(
s
, &
msg
, 0);

79 i‡(
n
 == -1) {

80 
îr
 = 
ngx_î∫o
;

81 i‡(
îr
 =
NGX_EAGAIN
) {

82  
NGX_AGAIN
;

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "sendmsg() failed");

86  
NGX_ERROR
;

89  
NGX_OK
;

90 
	}
}

93 
ngx_öt_t


94 
	$ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
, 
ngx_log_t
 *
log
)

96 
ssize_t
 
n
;

97 
ngx_îr_t
 
îr
;

98 
iovec
 
iov
[1];

99 
msghdr
 
msg
;

101 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

103 
cmsghdr
 
cm
;

104 
•a˚
[
	`CMSG_SPACE
(())];

105 } 
cmsg
;

107 
fd
;

110 
iov
[0].
iov_ba£
 = (*Ë
ch
;

111 
iov
[0].
iov_Àn
 = 
size
;

113 
msg
.
msg_«me
 = 
NULL
;

114 
msg
.
msg_«mñí
 = 0;

115 
msg
.
msg_iov
 = 
iov
;

116 
msg
.
msg_iovÀn
 = 1;

118 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

119 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

120 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

122 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
fd
;

123 
msg
.
msg_ac¸ight¶í
 = ();

126 
n
 = 
	`ªcvmsg
(
s
, &
msg
, 0);

128 i‡(
n
 == -1) {

129 
îr
 = 
ngx_î∫o
;

130 i‡(
îr
 =
NGX_EAGAIN
) {

131  
NGX_AGAIN
;

134 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "recvmsg() failed");

135  
NGX_ERROR
;

138 i‡(
n
 == 0) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "recvmsg()Ñeturned zero");

140  
NGX_ERROR
;

143 i‡((
size_t
Ë
n
 < (
ngx_ch™√l_t
)) {

144 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

145 "ªcvmsg(Ëªtu∫edÇŸÉnough d©a: %uz", 
n
);

146  
NGX_ERROR
;

149 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

151 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

153 i‡(
cmsg
.
cm
.
cmsg_Àn
 < (
sockÀn_t
Ë
	`CMSG_LEN
(())) {

154 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

156  
NGX_ERROR
;

159 i‡(
cmsg
.
cm
.
cmsg_Àvñ
 !
SOL_SOCKET
 || cmsg.cm.
cmsg_ty≥
 !
SCM_RIGHTS
)

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

164 
cmsg
.
cm
.
cmsg_Àvñ
, cmsg.cm.
cmsg_ty≥
);

165  
NGX_ERROR
;

170 
	`ngx_mem˝y
(&
ch
->
fd
, 
	`CMSG_DATA
(&
cmsg
.
cm
), ());

173 i‡(
msg
.
msg_Êags
 & (
MSG_TRUNC
|
MSG_CTRUNC
)) {

174 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

180 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

181 i‡(
msg
.
msg_ac¸ight¶í
 != ()) {

182 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

184  
NGX_ERROR
;

187 
ch
->
fd
 = fd;

192  
n
;

193 
	}
}

196 
ngx_öt_t


197 
	$ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
, 
ngx_öt_t
 
evít
,

198 
ngx_evít_h™dÀr_±
 
h™dÀr
)

200 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
;

201 
ngx_c⁄√˘i⁄_t
 *
c
;

203 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
fd
, 
cy˛e
->
log
);

205 i‡(
c
 =
NULL
) {

206  
NGX_ERROR
;

209 
c
->
poﬁ
 = 
cy˛e
->pool;

211 
ªv
 = 
c
->
ªad
;

212 
wev
 = 
c
->
wrôe
;

214 
ªv
->
log
 = 
cy˛e
->log;

215 
wev
->
log
 = 
cy˛e
->log;

217 #i‡(
NGX_THREADS
)

218 
ªv
->
lock
 = &
c
->lock;

219 
wev
->
lock
 = &
c
->lock;

220 
ªv
->
own_lock
 = &
c
->
lock
;

221 
wev
->
own_lock
 = &
c
->
lock
;

224 
ªv
->
ch™√l
 = 1;

225 
wev
->
ch™√l
 = 1;

227 
ev
 = (
evít
 =
NGX_READ_EVENT
Ë? 
ªv
 : 
wev
;

229 
ev
->
h™dÀr
 = handler;

231 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

232 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

233 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

234  
NGX_ERROR
;

238 i‡(
	`ngx_add_evít
(
ev
, 
evít
, 0Ë=
NGX_ERROR
) {

239 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

240  
NGX_ERROR
;

244  
NGX_OK
;

245 
	}
}

249 
	$ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
)

251 i‡(
	`˛o£
(
fd
[0]) == -1) {

252 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

255 i‡(
	`˛o£
(
fd
[1]) == -1) {

256 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

258 
	}
}

	@src/os/unix/ngx_channel.h

8 #i‚de‡
_NGX_CHANNEL_H_INCLUDED_


9 
	#_NGX_CHANNEL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

18 
ngx_uöt_t
 
	mcomm™d
;

19 
ngx_pid_t
 
	mpid
;

20 
ngx_öt_t
 
	m¶Ÿ
;

21 
ngx_fd_t
 
	mfd
;

22 } 
	tngx_ch™√l_t
;

25 
ngx_öt_t
 
ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

26 
ngx_log_t
 *
log
);

27 
ngx_öt_t
 
ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

28 
ngx_log_t
 *
log
);

29 
ngx_öt_t
 
ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
,

30 
ngx_öt_t
 
evít
, 
ngx_evít_h™dÀr_±
 
h™dÀr
);

31 
ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
);

	@src/os/unix/ngx_daemon.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
	$ngx_d´m⁄
(
ngx_log_t
 *
log
)

14 
fd
;

16 
	`f‹k
()) {

18 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "fork() failed");

19  
NGX_ERROR
;

25 
	`exô
(0);

28 
ngx_pid
 = 
	`ngx_gëpid
();

30 i‡(
	`£tsid
() == -1) {

31 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "setsid() failed");

32  
NGX_ERROR
;

35 
	`umask
(0);

37 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

38 i‡(
fd
 == -1) {

39 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

41  
NGX_ERROR
;

44 i‡(
	`dup2
(
fd
, 
STDIN_FILENO
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDIN) failed");

46  
NGX_ERROR
;

49 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) == -1) {

50 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDOUT) failed");

51  
NGX_ERROR
;

55 i‡(
	`dup2
(
fd
, 
STDERR_FILENO
) == -1) {

56 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDERR) failed");

57  
NGX_ERROR
;

61 i‡(
fd
 > 
STDERR_FILENO
) {

62 i‡(
	`˛o£
(
fd
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "close() failed");

64  
NGX_ERROR
;

68  
NGX_OK
;

69 
	}
}

	@src/os/unix/ngx_darwin.h

8 #i‚de‡
_NGX_DARWIN_H_INCLUDED_


9 
	#_NGX_DARWIN_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

15 
ngx_d¨wö_kîn_o§ñd©e
;

16 
ngx_d¨wö_hw_n˝u
;

17 
u_l⁄g
 
ngx_d¨wö_√t_öë_t˝_£nd•a˚
;

	@src/os/unix/ngx_darwin_config.h

8 #i‚de‡
_NGX_DARWIN_CONFIG_H_INCLUDED_


9 
	#_NGX_DARWIN_CONFIG_H_INCLUDED_


	)

12 
	#MAC_OS_X_VERSION_MIN_REQUIRED
 
MAC_OS_X_VERSION_10_0


	)

15 
	~<sys/ty≥s.h
>

16 
	~<sys/time.h
>

17 
	~<uni°d.h
>

18 
	~<öây≥s.h
>

19 
	~<°d¨g.h
>

20 
	~<°ddef.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<î∫o.h
>

24 
	~<°rög.h
>

25 
	~<sig«l.h
>

26 
	~<pwd.h
>

27 
	~<gΩ.h
>

28 
	~<dúít.h
>

29 
	~<glob.h
>

30 
	~<sys/mou¡.h
>

32 
	~<sys/fûio.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/uio.h
>

35 
	~<sys/°©.h
>

36 
	~<f˙é.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/mm™.h
>

40 
	~<sys/ªsour˚.h
>

41 
	~<sched.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<√töë/t˝.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√tdb.h
>

48 
	~<sys/un.h
>

50 
	~<sys/sys˘l.h
>

51 
	~<xloˇÀ.h
>

54 #i‚de‡
IOV_MAX


55 
	#IOV_MAX
 64

	)

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_POLL
)

68 
	~<pﬁl.h
>

72 #i‡(
NGX_HAVE_KQUEUE
)

73 
	~<sys/evít.h
>

77 
	#NGX_LISTEN_BACKLOG
 -1

	)

80 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


81 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

85 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


86 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

90 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

93 **
ívú⁄
;

	@src/os/unix/ngx_darwin_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_d¨wö_kîn_o°y≥
[16];

13 
	gngx_d¨wö_kîn_o§ñó£
[128];

14 
	gngx_d¨wö_hw_n˝u
;

15 
	gngx_d¨wö_kîn_ùc_somaxc⁄n
;

16 
u_l⁄g
 
	gngx_d¨wö_√t_öë_t˝_£nd•a˚
;

19 
ngx_os_io_t
 
	gngx_d¨wö_io
 = {

20 
ngx_unix_ªcv
,

21 
ngx_ªadv_chaö
,

22 
ngx_udp_unix_ªcv
,

23 
ngx_unix_£nd
,

24 #i‡(
NGX_HAVE_SENDFILE
)

25 
ngx_d¨wö_£ndfûe_chaö
,

26 
NGX_IO_SENDFILE


28 
ngx_wrôev_chaö
,

35 *
	m«me
;

36 *
	mvÆue
;

37 
size_t
 
	msize
;

38 
ngx_uöt_t
 
	mexi°s
;

39 } 
	tsys˘l_t
;

42 
sys˘l_t
 
	gsys˘ls
[] = {

44 &
ngx_d¨wö_hw_n˝u
,

45 (
ngx_d¨wö_hw_n˝u
), 0 },

48 &
ngx_d¨wö_√t_öë_t˝_£nd•a˚
,

49 (
ngx_d¨wö_√t_öë_t˝_£nd•a˚
), 0 },

52 &
ngx_d¨wö_kîn_ùc_somaxc⁄n
,

53 (
ngx_d¨wö_kîn_ùc_somaxc⁄n
), 0 },

55 { 
NULL
, NULL, 0, 0 }

59 
ngx_öt_t


60 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

62 
size_t
 
size
;

63 
ngx_îr_t
 
îr
;

64 
ngx_uöt_t
 
i
;

66 
size
 = (
ngx_d¨wö_kîn_o°y≥
);

67 i‡(
	`sys˘lby«me
("kîn.o°y≥", 
ngx_d¨wö_kîn_o°y≥
, &
size
, 
NULL
, 0)

70 
îr
 = 
ngx_î∫o
;

72 i‡(
îr
 !
NGX_ENOENT
) {

74 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

77 i‡(
îr
 !
NGX_ENOMEM
) {

78  
NGX_ERROR
;

81 
ngx_d¨wö_kîn_o°y≥
[
size
 - 1] = '\0';

85 
size
 = (
ngx_d¨wö_kîn_o§ñó£
);

86 i‡(
	`sys˘lby«me
("kîn.o§ñó£", 
ngx_d¨wö_kîn_o§ñó£
, &
size
,

87 
NULL
, 0)

90 
îr
 = 
ngx_î∫o
;

92 i‡(
îr
 !
NGX_ENOENT
) {

94 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

97 i‡(
îr
 !
NGX_ENOMEM
) {

98  
NGX_ERROR
;

101 
ngx_d¨wö_kîn_o§ñó£
[
size
 - 1] = '\0';

105 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

106 
size
 = 
sys˘ls
[
i
].size;

108 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

111 
sys˘ls
[
i
].
exi°s
 = 1;

115 
îr
 = 
ngx_î∫o
;

117 i‡(
îr
 =
NGX_ENOENT
) {

121 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

122 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

123  
NGX_ERROR
;

126 
ngx_n˝u
 = 
ngx_d¨wö_hw_n˝u
;

128 i‡(
ngx_d¨wö_kîn_ùc_somaxc⁄n
 > 32767) {

129 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

131  
NGX_ERROR
;

134 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

136 
ngx_os_io
 = 
ngx_d¨wö_io
;

138  
NGX_OK
;

139 
	}
}

143 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

145 
u_l⁄g
 
vÆue
;

146 
ngx_uöt_t
 
i
;

148 i‡(
ngx_d¨wö_kîn_o°y≥
[0]) {

149 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

150 
ngx_d¨wö_kîn_o°y≥
, 
ngx_d¨wö_kîn_o§ñó£
);

153 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

154 i‡(
sys˘ls
[
i
].
exi°s
) {

155 i‡(
sys˘ls
[
i
].
size
 == ()) {

156 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

159 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

162 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

163 
sys˘ls
[
i
].
«me
, 
vÆue
);

166 
	}
}

	@src/os/unix/ngx_darwin_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

30 #i‡(
IOV_MAX
 > 64)

31 
	#NGX_HEADERS
 64

	)

32 
	#NGX_TRAILERS
 64

	)

34 
	#NGX_HEADERS
 
IOV_MAX


	)

35 
	#NGX_TRAILERS
 
IOV_MAX


	)

39 
ngx_chaö_t
 *

40 
	$ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

42 
rc
;

43 
u_ch¨
 *
¥ev
;

44 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

45 
off_t
 
hódî_size
, 
fûe_size
;

46 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

47 
ngx_îr_t
 
îr
;

48 
ngx_buf_t
 *
fûe
;

49 
ngx_¨øy_t
 
hódî
, 
åaûî
;

50 
ngx_evít_t
 *
wev
;

51 
ngx_chaö_t
 *
˛
;

52 
sf_hdå
 
hdå
;

53 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
], 
åaûîs
[
NGX_TRAILERS
];

55 
wev
 = 
c
->
wrôe
;

57 i‡(!
wev
->
ªady
) {

58  
ö
;

61 #i‡(
NGX_HAVE_KQUEUE
)

63 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

64 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

66 
wev
->
îr‹
 = 1;

67  
NGX_CHAIN_ERROR
;

74 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

75 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

78 
£nd
 = 0;

80 
hódî
.
ñts
 = 
hódîs
;

81 
hódî
.
size
 = (
iovec
);

82 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

83 
hódî
.
poﬁ
 = 
c
->pool;

85 
åaûî
.
ñts
 = 
åaûîs
;

86 
åaûî
.
size
 = (
iovec
);

87 
åaûî
.
«Œoc
 = 
NGX_TRAILERS
;

88 
åaûî
.
poﬁ
 = 
c
->pool;

91 
fûe
 = 
NULL
;

92 
fûe_size
 = 0;

93 
hódî_size
 = 0;

94 
eöå
 = 0;

95 
com∂ëe
 = 0;

96 
¥ev_£nd
 = 
£nd
;

98 
hódî
.
√…s
 = 0;

99 
åaûî
.
√…s
 = 0;

103 
¥ev
 = 
NULL
;

104 
iov
 = 
NULL
;

106 
˛
 = 
ö
;

107 
˛
 && 
hódî
.
√…s
 < 
IOV_MAX
 && 
£nd
 < 
limô
;

108 
˛
 = cl->
√xt
)

110 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

114 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

118 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

120 i‡(
£nd
 + 
size
 > 
limô
) {

121 
size
 = 
limô
 - 
£nd
;

124 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

125 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

128 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

129 i‡(
iov
 =
NULL
) {

130  
NGX_CHAIN_ERROR
;

133 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

134 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

137 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

138 
hódî_size
 +
size
;

139 
£nd
 +
size
;

143 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

144 
fûe
 = 
˛
->
buf
;

149 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

151 i‡(
£nd
 + 
size
 > 
limô
) {

152 
size
 = 
limô
 - 
£nd
;

154 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

155 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

157 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

158 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

162 
fûe_size
 +
size
;

163 
£nd
 +
size
;

164 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

165 
˛
 = cl->
√xt
;

167 } 
˛


168 && 
˛
->
buf
->
ö_fûe


169 && 
£nd
 < 
limô


170 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

171 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

174 i‡(
fûe
 && 
hódî
.
√…s
 == 0) {

178 
¥ev
 = 
NULL
;

179 
iov
 = 
NULL
;

181 
˛
 && 
hódî
.
√…s
 < 
IOV_MAX
 && 
£nd
 < 
limô
) {

183 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

184 
˛
 = cl->
√xt
;

188 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

192 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

194 i‡(
£nd
 + 
size
 > 
limô
) {

195 
size
 = 
limô
 - 
£nd
;

198 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

199 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

202 
iov
 = 
	`ngx_¨øy_push
(&
åaûî
);

203 i‡(
iov
 =
NULL
) {

204  
NGX_CHAIN_ERROR
;

207 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

208 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

211 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

212 
£nd
 +
size
;

213 
˛
 = cl->
√xt
;

217 i‡(
fûe
) {

224 
hdå
.
hódîs
 = 
hódî
.
√…s
 ? (
iovec
 *Ëhódî.
ñts
: 
NULL
;

225 
hdå
.
hdr_˙t
 = 
hódî
.
√…s
;

226 
hdå
.
åaûîs
 = 
åaûî
.
√…s
 ? (
iovec
 *Ëåaûî.
ñts
: 
NULL
;

227 
hdå
.
ål_˙t
 = 
åaûî
.
√…s
;

229 
£¡
 = 
hódî_size
 + 
fûe_size
;

231 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

233 
fûe
->
fûe_pos
, 
£¡
, 
hódî_size
);

235 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

236 &
£¡
, &
hdå
, 0);

238 i‡(
rc
 == -1) {

239 
îr
 = 
ngx_î∫o
;

241 
îr
) {

242 
NGX_EAGAIN
:

245 
NGX_EINTR
:

246 
eöå
 = 1;

250 
wev
->
îr‹
 = 1;

251 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

252  
NGX_CHAIN_ERROR
;

255 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

256 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

259 i‡(
rc
 =0 && 
£¡
 == 0) {

267 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

269 
fûe
->fûe->
«me
.
d©a
);

271  
NGX_CHAIN_ERROR
;

274 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

276 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî_size
);

279 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

281 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

282 "wrôev: %d o‡%uz", 
rc
, 
£nd
);

284 i‡(
rc
 == -1) {

285 
îr
 = 
ngx_î∫o
;

287 
îr
) {

288 
NGX_EAGAIN
:

291 
NGX_EINTR
:

292 
eöå
 = 1;

296 
wev
->
îr‹
 = 1;

297 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

298  
NGX_CHAIN_ERROR
;

301 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

305 
£¡
 = 
rc
 > 0 ?Ñc : 0;

308 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

309 
com∂ëe
 = 1;

312 
c
->
£¡
 += sent;

314 
˛
 = 
ö
; cl; c»˛->
√xt
) {

316 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

320 i‡(
£¡
 == 0) {

324 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

326 i‡(
£¡
 >
size
) {

327 
£¡
 -
size
;

329 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

330 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

333 i‡(
˛
->
buf
->
ö_fûe
) {

334 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

340 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

341 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

344 i‡(
˛
->
buf
->
ö_fûe
) {

345 
˛
->
buf
->
fûe_pos
 +
£¡
;

351 i‡(
eöå
) {

355 i‡(!
com∂ëe
) {

356 
wev
->
ªady
 = 0;

357  
˛
;

360 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

361  
˛
;

364 
ö
 = 
˛
;

366 
	}
}

	@src/os/unix/ngx_errno.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

28 
ngx_°r_t
 *
	gngx_sys_îæi°
;

29 
ngx_°r_t
 
	gngx_unknown_îr‹
 = 
ngx_°rög
("UnknownÉrror");

32 
u_ch¨
 *

33 
	$ngx_°ªº‹
(
ngx_îr_t
 
îr
, 
u_ch¨
 *
îr°r
, 
size_t
 
size
)

35 
ngx_°r_t
 *
msg
;

37 
msg
 = ((
ngx_uöt_t
Ë
îr
 < 
NGX_SYS_NERR
Ë? &
ngx_sys_îæi°
[err]:

38 &
ngx_unknown_îr‹
;

39 
size
 = 
	`ngx_mö
(size, 
msg
->
Àn
);

41  
	`ngx_˝ymem
(
îr°r
, 
msg
->
d©a
, 
size
);

42 
	}
}

45 
ngx_uöt_t


46 
	$ngx_°ªº‹_öô
()

48 *
msg
;

49 
u_ch¨
 *
p
;

50 
size_t
 
Àn
;

51 
ngx_îr_t
 
îr
;

58 
Àn
 = 
NGX_SYS_NERR
 * (
ngx_°r_t
);

60 
ngx_sys_îæi°
 = 
	`mÆloc
(
Àn
);

61 i‡(
ngx_sys_îæi°
 =
NULL
) {

62 
Áûed
;

65 
îr
 = 0;Éº < 
NGX_SYS_NERR
;Érr++) {

66 
msg
 = 
	`°ªº‹
(
îr
);

67 
Àn
 = 
	`ngx_°æí
(
msg
);

69 
p
 = 
	`mÆloc
(
Àn
);

70 i‡(
p
 =
NULL
) {

71 
Áûed
;

74 
	`ngx_mem˝y
(
p
, 
msg
, 
Àn
);

75 
ngx_sys_îæi°
[
îr
].
Àn
 =Üen;

76 
ngx_sys_îæi°
[
îr
].
d©a
 = 
p
;

79  
NGX_OK
;

81 
Áûed
:

83 
îr
 = 
î∫o
;

84 
	`ngx_log_°dîr
(0, "mÆloc(%uzËÁûed (%d: %s)", 
Àn
, 
îr
, 
	`°ªº‹
(err));

86  
NGX_ERROR
;

87 
	}
}

	@src/os/unix/ngx_errno.h

8 #i‚de‡
_NGX_ERRNO_H_INCLUDED_


9 
	#_NGX_ERRNO_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_îr_t
;

18 
	#NGX_EPERM
 
EPERM


	)

19 
	#NGX_ENOENT
 
ENOENT


	)

20 
	#NGX_ENOPATH
 
ENOENT


	)

21 
	#NGX_ESRCH
 
ESRCH


	)

22 
	#NGX_EINTR
 
EINTR


	)

23 
	#NGX_ECHILD
 
ECHILD


	)

24 
	#NGX_ENOMEM
 
ENOMEM


	)

25 
	#NGX_EACCES
 
EACCES


	)

26 
	#NGX_EBUSY
 
EBUSY


	)

27 
	#NGX_EEXIST
 
EEXIST


	)

28 
	#NGX_EXDEV
 
EXDEV


	)

29 
	#NGX_ENOTDIR
 
ENOTDIR


	)

30 
	#NGX_EISDIR
 
EISDIR


	)

31 
	#NGX_EINVAL
 
EINVAL


	)

32 
	#NGX_ENOSPC
 
ENOSPC


	)

33 
	#NGX_EPIPE
 
EPIPE


	)

34 
	#NGX_EINPROGRESS
 
EINPROGRESS


	)

35 
	#NGX_EADDRINUSE
 
EADDRINUSE


	)

36 
	#NGX_ECONNABORTED
 
ECONNABORTED


	)

37 
	#NGX_ECONNRESET
 
ECONNRESET


	)

38 
	#NGX_ENOTCONN
 
ENOTCONN


	)

39 
	#NGX_ETIMEDOUT
 
ETIMEDOUT


	)

40 
	#NGX_ECONNREFUSED
 
ECONNREFUSED


	)

41 
	#NGX_ENAMETOOLONG
 
ENAMETOOLONG


	)

42 
	#NGX_ENETDOWN
 
ENETDOWN


	)

43 
	#NGX_ENETUNREACH
 
ENETUNREACH


	)

44 
	#NGX_EHOSTDOWN
 
EHOSTDOWN


	)

45 
	#NGX_EHOSTUNREACH
 
EHOSTUNREACH


	)

46 
	#NGX_ENOSYS
 
ENOSYS


	)

47 
	#NGX_ECANCELED
 
ECANCELED


	)

48 
	#NGX_EILSEQ
 
EILSEQ


	)

49 
	#NGX_ENOMOREFILES
 0

	)

51 #i‡(
__hpux__
)

52 
	#NGX_EAGAIN
 
EWOULDBLOCK


	)

54 
	#NGX_EAGAIN
 
EAGAIN


	)

58 
	#ngx_î∫o
 
î∫o


	)

59 
	#ngx_sockë_î∫o
 
î∫o


	)

60 
	#ngx_£t_î∫o
(
îr
Ë
î∫o
 = 
	)
err

61 
	#ngx_£t_sockë_î∫o
(
îr
Ë
î∫o
 = 
	)
err

64 
u_ch¨
 *
ngx_°ªº‹
(
ngx_îr_t
 
îr
, u_ch¨ *
îr°r
, 
size_t
 
size
);

65 
ngx_uöt_t
 
ngx_°ªº‹_öô
();

	@src/os/unix/ngx_file_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

31 
ngx_kqueue
;

34 
ssize_t
 
ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
,

35 
ngx_evít_t
 *
ev
);

36 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

39 
ssize_t


40 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

41 
ngx_poﬁ_t
 *
poﬁ
)

43 
n
;

44 
ngx_evít_t
 *
ev
;

45 
ngx_evít_aio_t
 *
aio
;

47 i‡(!
ngx_fûe_aio
) {

48  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

51 
aio
 = 
fûe
->aio;

53 i‡(
aio
 =
NULL
) {

54 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

55 i‡(
aio
 =
NULL
) {

56  
NGX_ERROR
;

59 
aio
->
fûe
 = file;

60 
aio
->
fd
 = 
fûe
->fd;

61 
aio
->
evít
.
d©a
 =áio;

62 
aio
->
evít
.
ªady
 = 1;

63 
aio
->
evít
.
log
 = 
fûe
->log;

64 #i‡(
NGX_HAVE_AIO_SENDFILE
)

65 
aio
->
œ°_off£t
 = -1;

67 
fûe
->
aio
 =áio;

70 
ev
 = &
aio
->
evít
;

72 i‡(!
ev
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

74 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

75  
NGX_AGAIN
;

78 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

80 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

82 i‡(
ev
->
com∂ëe
) {

83 
ev
->
com∂ëe
 = 0;

84 
	`ngx_£t_î∫o
(
aio
->
îr
);

86 i‡(
aio
->
îr
 == 0) {

87  
aio
->
nbyãs
;

90 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

91 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

93  
NGX_ERROR
;

96 
	`ngx_memzîo
(&
aio
->
aiocb
, (aiocb));

98 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

99 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

100 
aio
->
aiocb
.
aio_buf
 = 
buf
;

101 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

102 #i‡(
NGX_HAVE_KQUEUE
)

103 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

104 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

105 
aio
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = 
ev
;

107 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

109 
n
 = 
	`aio_ªad
(&
aio
->
aiocb
);

111 i‡(
n
 == -1) {

112 
n
 = 
ngx_î∫o
;

114 i‡(
n
 =
NGX_EAGAIN
) {

115  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

118 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
n
,

119 "aio_ªad(\"%V\"ËÁûed", &
fûe
->
«me
);

121 i‡(
n
 =
NGX_ENOSYS
) {

122 
ngx_fûe_aio
 = 0;

123  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

126  
NGX_ERROR
;

129 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

130 "aio_ªad: fd:%d %d", 
fûe
->
fd
, 
n
);

132 
ev
->
a˘ive
 = 1;

133 
ev
->
ªady
 = 0;

134 
ev
->
com∂ëe
 = 0;

136  
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
);

137 
	}
}

140 
ssize_t


141 
	$ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
, 
ngx_evít_t
 *
ev
)

143 
n
;

144 
ngx_îr_t
 
îr
;

146 
n
 = 
	`aio_îr‹
(&
aio
->
aiocb
);

148 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

149 "aio_îr‹: fd:%d %d", 
fûe
->
fd
, 
n
);

151 i‡(
n
 == -1) {

152 
îr
 = 
ngx_î∫o
;

153 
aio
->
îr
 =Érr;

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
îr
,

156 "aio_îr‹(\"%V\"ËÁûed", &
fûe
->
«me
);

157  
NGX_ERROR
;

160 i‡(
n
 =
NGX_EINPROGRESS
) {

161 i‡(
ev
->
ªady
) {

162 
ev
->
ªady
 = 0;

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
n
,

165 &
fûe
->
«me
);

168  
NGX_AGAIN
;

171 
n
 = 
	`aio_ªtu∫
(&
aio
->
aiocb
);

173 i‡(
n
 == -1) {

174 
îr
 = 
ngx_î∫o
;

175 
aio
->
îr
 =Érr;

176 
ev
->
ªady
 = 1;

178 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

179 "aio_ªtu∫(\"%V\"ËÁûed", &
fûe
->
«me
);

180  
NGX_ERROR
;

183 
aio
->
îr
 = 0;

184 
aio
->
nbyãs
 = 
n
;

185 
ev
->
ªady
 = 1;

186 
ev
->
a˘ive
 = 0;

188 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

189 "aio_ªtu∫: fd:%d %d", 
fûe
->
fd
, 
n
);

191  
n
;

192 
	}
}

196 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

198 
ngx_evít_aio_t
 *
aio
;

200 
aio
 = 
ev
->
d©a
;

202 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

203 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

205 i‡(
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
Ë!
NGX_AGAIN
) {

206 
aio
->
	`h™dÀr
(
ev
);

208 
	}
}

	@src/os/unix/ngx_files.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_FILE_AIO
)

14 
ngx_uöt_t
 
	gngx_fûe_aio
 = 1;

19 
ssize_t


20 
	$ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

22 
ssize_t
 
n
;

24 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

25 "ªad: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

27 #i‡(
NGX_HAVE_PREAD
)

29 
n
 = 
	`¥ód
(
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

31 i‡(
n
 == -1) {

32 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

33 "¥ód(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

34  
NGX_ERROR
;

39 i‡(
fûe
->
sys_off£t
 !
off£t
) {

40 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

41 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

42 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

43  
NGX_ERROR
;

46 
fûe
->
sys_off£t
 = 
off£t
;

49 
n
 = 
	`ªad
(
fûe
->
fd
, 
buf
, 
size
);

51 i‡(
n
 == -1) {

52 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

53 "ªad(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

54  
NGX_ERROR
;

57 
fûe
->
sys_off£t
 +
n
;

61 
fûe
->
off£t
 +
n
;

63  
n
;

64 
	}
}

67 
ssize_t


68 
	$ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

70 
ssize_t
 
n
, 
wrôãn
;

72 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

73 "wrôe: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

75 
wrôãn
 = 0;

77 #i‡(
NGX_HAVE_PWRITE
)

80 
n
 = 
	`pwrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
, 
off£t
);

82 i‡(
n
 == -1) {

83 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

84 "pwrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

85  
NGX_ERROR
;

88 
fûe
->
off£t
 +
n
;

89 
wrôãn
 +
n
;

91 i‡((
size_t
Ë
n
 =
size
) {

92  
wrôãn
;

95 
off£t
 +
n
;

96 
size
 -
n
;

101 i‡(
fûe
->
sys_off£t
 !
off£t
) {

102 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

103 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

104 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

105  
NGX_ERROR
;

108 
fûe
->
sys_off£t
 = 
off£t
;

112 
n
 = 
	`wrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
);

114 i‡(
n
 == -1) {

115 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

116 "wrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

117  
NGX_ERROR
;

120 
fûe
->
off£t
 +
n
;

121 
wrôãn
 +
n
;

123 i‡((
size_t
Ë
n
 =
size
) {

124  
wrôãn
;

127 
size
 -
n
;

130 
	}
}

133 
ngx_fd_t


134 
	$ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
ac˚ss
)

136 
ngx_fd_t
 
fd
;

138 
fd
 = 
	`›í
((c⁄° *Ë
«me
, 
O_CREAT
|
O_EXCL
|
O_RDWR
,

139 
ac˚ss
 ?áccess : 0600);

141 i‡(
fd
 !-1 && !
≥rsi°ít
) {

142 
	`u∆ök
((c⁄° *Ë
«me
);

145  
fd
;

146 
	}
}

149 
	#NGX_IOVS
 8

	)

151 
ssize_t


152 
	$ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˛
, 
off_t
 
off£t
,

153 
ngx_poﬁ_t
 *
poﬁ
)

155 
u_ch¨
 *
¥ev
;

156 
size_t
 
size
;

157 
ssize_t
 
tŸÆ
, 
n
;

158 
ngx_¨øy_t
 
vec
;

159 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

163 i‡(
˛
->
√xt
 =
NULL
) {

164  
	`ngx_wrôe_fûe
(
fûe
, 
˛
->
buf
->
pos
,

165 (
size_t
Ë(
˛
->
buf
->
œ°
 - cl->buf->
pos
),

166 
off£t
);

169 
tŸÆ
 = 0;

171 
vec
.
ñts
 = 
iovs
;

172 
vec
.
size
 = (
iovec
);

173 
vec
.
«Œoc
 = 
NGX_IOVS
;

174 
vec
.
poﬁ
 =Öool;

177 
¥ev
 = 
NULL
;

178 
iov
 = 
NULL
;

179 
size
 = 0;

181 
vec
.
√…s
 = 0;

185 
˛
 && 
vec
.
√…s
 < 
IOV_MAX
) {

186 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

187 
iov
->
iov_Àn
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

190 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

191 i‡(
iov
 =
NULL
) {

192  
NGX_ERROR
;

195 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

196 
iov
->
iov_Àn
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

199 
size
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

200 
¥ev
 = 
˛
->
buf
->
œ°
;

201 
˛
 = cl->
√xt
;

206 i‡(
vec
.
√…s
 == 1) {

207 
iov
 = 
vec
.
ñts
;

209 
n
 = 
	`ngx_wrôe_fûe
(
fûe
, (
u_ch¨
 *Ë
iov
[0].
iov_ba£
,

210 
iov
[0].
iov_Àn
, 
off£t
);

212 i‡(
n
 =
NGX_ERROR
) {

213  
n
;

216  
tŸÆ
 + 
n
;

219 i‡(
fûe
->
sys_off£t
 !
off£t
) {

220 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

221 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

222 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

223  
NGX_ERROR
;

226 
fûe
->
sys_off£t
 = 
off£t
;

229 
n
 = 
	`wrôev
(
fûe
->
fd
, 
vec
.
ñts
, vec.
√…s
);

231 i‡(
n
 == -1) {

232 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

233 "wrôev(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

234  
NGX_ERROR
;

237 i‡((
size_t
Ë
n
 !
size
) {

238 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 0,

240 
fûe
->
«me
.
d©a
, 
n
, 
size
);

241  
NGX_ERROR
;

244 
fûe
->
sys_off£t
 +
n
;

245 
fûe
->
off£t
 +
n
;

246 
tŸÆ
 +
n
;

248 } 
˛
);

250  
tŸÆ
;

251 
	}
}

254 
ngx_öt_t


255 
	$ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
)

257 
timevÆ
 
tv
[2];

259 
tv
[0].
tv_£c
 = 
	`ngx_time
();

260 
tv
[0].
tv_u£c
 = 0;

261 
tv
[1].
tv_£c
 = 
s
;

262 
tv
[1].
tv_u£c
 = 0;

264 i‡(
	`utimes
((*Ë
«me
, 
tv
) != -1) {

265  
NGX_OK
;

268  
NGX_ERROR
;

269 
	}
}

272 
ngx_öt_t


273 
	$ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

275 
fm
->
fd
 = 
	`ngx_›í_fûe
(fm->
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_TRUNCATE
,

276 
NGX_FILE_DEFAULT_ACCESS
);

277 i‡(
fm
->
fd
 =
NGX_INVALID_FILE
) {

278 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

279 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

280  
NGX_ERROR
;

283 i‡(
	`·runˇã
(
fm
->
fd
, fm->
size
) == -1) {

284 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

285 "·runˇã(Ë\"%s\" faûed", 
fm
->
«me
);

286 
Áûed
;

289 
fm
->
addr
 = 
	`mm≠
(
NULL
, fm->
size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
,

290 
fm
->
fd
, 0);

291 i‡(
fm
->
addr
 !
MAP_FAILED
) {

292  
NGX_OK
;

295 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

296 "mm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

298 
Áûed
:

300 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

301 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

302 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

305  
NGX_ERROR
;

306 
	}
}

310 
	$ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

312 i‡(
	`munm≠
(
fm
->
addr
, fm->
size
) == -1) {

313 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

314 "munm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

317 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

318 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

319 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

321 
	}
}

324 
ngx_öt_t


325 
	$ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
)

327 
dú
->dú = 
	`›ídú
((c⁄° *Ë
«me
->
d©a
);

329 i‡(
dú
->dú =
NULL
) {

330  
NGX_ERROR
;

333 
dú
->
vÆid_öfo
 = 0;

335  
NGX_OK
;

336 
	}
}

339 
ngx_öt_t


340 
	$ngx_ªad_dú
(
ngx_dú_t
 *
dú
)

342 
dú
->
de
 = 
	`ªaddú
(dir->dir);

344 i‡(
dú
->
de
) {

345 #i‡(
NGX_HAVE_D_TYPE
)

346 
dú
->
ty≥
 = dú->
de
->
d_ty≥
;

348 
dú
->
ty≥
 = 0;

350  
NGX_OK
;

353  
NGX_ERROR
;

354 
	}
}

357 
ngx_öt_t


358 
	$ngx_›í_glob
(
ngx_glob_t
 *
gl
)

360 
n
;

362 
n
 = 
	`glob
((*Ë
gl
->
∑âîn
, 
GLOB_NOSORT
, 
NULL
, &gl->
pglob
);

364 i‡(
n
 == 0) {

365  
NGX_OK
;

368 #ifde‡
GLOB_NOMATCH


370 i‡(
n
 =
GLOB_NOMATCH
 && 
gl
->
ã°
) {

371  
NGX_OK
;

376  
NGX_ERROR
;

377 
	}
}

380 
ngx_öt_t


381 
	$ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
)

383 
size_t
 
cou¡
;

385 #ifde‡
GLOB_NOMATCH


386 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_∑thc
;

388 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_m©chc
;

391 i‡(
gl
->
n
 < 
cou¡
) {

393 
«me
->
Àn
 = (
size_t
Ë
	`ngx_°æí
(
gl
->
pglob
.
gl_∑thv
[gl->
n
]);

394 
«me
->
d©a
 = (
u_ch¨
 *Ë
gl
->
pglob
.
gl_∑thv
[gl->
n
];

395 
gl
->
n
++;

397  
NGX_OK
;

400  
NGX_DONE
;

401 
	}
}

405 
	$ngx_˛o£_glob
(
ngx_glob_t
 *
gl
)

407 
	`glob‰ì
(&
gl
->
pglob
);

408 
	}
}

411 
ngx_îr_t


412 
	$ngx_åylock_fd
(
ngx_fd_t
 
fd
)

414 
Êock
 
Ê
;

416 
Ê
.
l_°¨t
 = 0;

417 
Ê
.
l_Àn
 = 0;

418 
Ê
.
l_pid
 = 0;

419 
Ê
.
l_ty≥
 = 
F_WRLCK
;

420 
Ê
.
l_whí˚
 = 
SEEK_SET
;

422 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

423  
ngx_î∫o
;

427 
	}
}

430 
ngx_îr_t


431 
	$ngx_lock_fd
(
ngx_fd_t
 
fd
)

433 
Êock
 
Ê
;

435 
Ê
.
l_°¨t
 = 0;

436 
Ê
.
l_Àn
 = 0;

437 
Ê
.
l_pid
 = 0;

438 
Ê
.
l_ty≥
 = 
F_WRLCK
;

439 
Ê
.
l_whí˚
 = 
SEEK_SET
;

441 i‡(
	`f˙é
(
fd
, 
F_SETLKW
, &
Ê
) == -1) {

442  
ngx_î∫o
;

446 
	}
}

449 
ngx_îr_t


450 
	$ngx_u∆ock_fd
(
ngx_fd_t
 
fd
)

452 
Êock
 
Ê
;

454 
Ê
.
l_°¨t
 = 0;

455 
Ê
.
l_Àn
 = 0;

456 
Ê
.
l_pid
 = 0;

457 
Ê
.
l_ty≥
 = 
F_UNLCK
;

458 
Ê
.
l_whí˚
 = 
SEEK_SET
;

460 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

461  
ngx_î∫o
;

465 
	}
}

468 #i‡(
NGX_HAVE_POSIX_FADVISE
Ë&& !(
NGX_HAVE_F_READAHEAD
)

470 
ngx_öt_t


471 
	$ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
)

473 
îr
;

475 
îr
 = 
	`posix_Ádvi£
(
fd
, 0, 0, 
POSIX_FADV_SEQUENTIAL
);

477 i‡(
îr
 == 0) {

481 
	`ngx_£t_î∫o
(
îr
);

482  
NGX_FILE_ERROR
;

483 
	}
}

488 #i‡(
NGX_HAVE_O_DIRECT
)

490 
ngx_öt_t


491 
	$ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
)

493 
Êags
;

495 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

497 i‡(
Êags
 == -1) {

498  
NGX_FILE_ERROR
;

501  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_DIRECT
);

502 
	}
}

505 
ngx_öt_t


506 
	$ngx_dúe˘io_off
(
ngx_fd_t
 
fd
)

508 
Êags
;

510 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

512 i‡(
Êags
 == -1) {

513  
NGX_FILE_ERROR
;

516  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 & ~
O_DIRECT
);

517 
	}
}

522 #i‡(
NGX_HAVE_STATFS
)

524 
size_t


525 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

527 
°©fs
 
fs
;

529 i‡(
	`°©fs
((*Ë
«me
, &
fs
) == -1) {

533 i‡((
fs
.
f_bsize
 % 512) != 0) {

537  (
size_t
Ë
fs
.
f_bsize
;

538 
	}
}

540 #ñi‡(
NGX_HAVE_STATVFS
)

542 
size_t


543 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

545 
°©vfs
 
fs
;

547 i‡(
	`°©vfs
((*Ë
«me
, &
fs
) == -1) {

551 i‡((
fs
.
f_‰size
 % 512) != 0) {

555  (
size_t
Ë
fs
.
f_‰size
;

556 
	}
}

560 
size_t


561 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

564 
	}
}

	@src/os/unix/ngx_files.h

8 #i‚de‡
_NGX_FILES_H_INCLUDED_


9 
	#_NGX_FILES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_fd_t
;

17 
°©
 
	tngx_fûe_öfo_t
;

18 
öo_t
 
	tngx_fûe_uniq_t
;

22 
u_ch¨
 *
	m«me
;

23 
size_t
 
	msize
;

24 *
	maddr
;

25 
ngx_fd_t
 
	mfd
;

26 
ngx_log_t
 *
	mlog
;

27 } 
	tngx_fûe_m≠pög_t
;

31 
DIR
 *
	mdú
;

32 
dúít
 *
	mde
;

33 
°©
 
	möfo
;

35 
	mty≥
:8;

36 
	mvÆid_öfo
:1;

37 } 
	tngx_dú_t
;

41 
size_t
 
	mn
;

42 
glob_t
 
	mpglob
;

43 
u_ch¨
 *
	m∑âîn
;

44 
ngx_log_t
 *
	mlog
;

45 
ngx_uöt_t
 
	mã°
;

46 } 
	tngx_glob_t
;

49 
	#NGX_INVALID_FILE
 -1

	)

50 
	#NGX_FILE_ERROR
 -1

	)

54 #ifde‡
__CYGWIN__


56 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

58 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

59 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
|
O_BINARY
, 
ac˚ss
)

	)

63 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

64 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

68 
	#ngx_›í_fûe_n
 "›í()"

	)

70 
	#NGX_FILE_RDONLY
 
O_RDONLY


	)

71 
	#NGX_FILE_WRONLY
 
O_WRONLY


	)

72 
	#NGX_FILE_RDWR
 
O_RDWR


	)

73 
	#NGX_FILE_CREATE_OR_OPEN
 
O_CREAT


	)

74 
	#NGX_FILE_OPEN
 0

	)

75 
	#NGX_FILE_TRUNCATE
 
O_CREAT
|
O_TRUNC


	)

76 
	#NGX_FILE_APPEND
 
O_WRONLY
|
O_APPEND


	)

77 
	#NGX_FILE_NONBLOCK
 
O_NONBLOCK


	)

79 
	#NGX_FILE_DEFAULT_ACCESS
 0644

	)

80 
	#NGX_FILE_OWNER_ACCESS
 0600

	)

83 
	#ngx_˛o£_fûe
 
˛o£


	)

84 
	#ngx_˛o£_fûe_n
 "˛o£()"

	)

87 
	#ngx_dñëe_fûe
(
«me
Ë
	`u∆ök
((c⁄° *Ë«me)

	)

88 
	#ngx_dñëe_fûe_n
 "u∆ök()"

	)

91 
ngx_fd_t
 
ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,

92 
ngx_uöt_t
 
ac˚ss
);

93 
	#ngx_›í_ãmpfûe_n
 "›í()"

	)

96 
ssize_t
 
ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
);

97 #i‡(
NGX_HAVE_PREAD
)

98 
	#ngx_ªad_fûe_n
 "¥ód()"

	)

100 
	#ngx_ªad_fûe_n
 "ªad()"

	)

103 
ssize_t
 
ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

104 
off_t
 
off£t
);

106 
ssize_t
 
ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˚
,

107 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

110 
	#ngx_ªad_fd
 
ªad


	)

111 
	#ngx_ªad_fd_n
 "ªad()"

	)

118 
ngx_ölöe
 
ssize_t


119 
	$ngx_wrôe_fd
(
ngx_fd_t
 
fd
, *
buf
, 
size_t
 
n
)

121  
	`wrôe
(
fd
, 
buf
, 
n
);

122 
	}
}

124 
	#ngx_wrôe_fd_n
 "wrôe()"

	)

127 
	#ngx_wrôe_c⁄sﬁe
 
ngx_wrôe_fd


	)

130 
	#ngx_löe„ed
(
p
Ë*p++ = 
LF
;

	)

131 
	#NGX_LINEFEED_SIZE
 1

	)

132 
	#NGX_LINEFEED
 "\x0a"

	)

135 
	#ngx_ª«me_fûe
(
o
, 
n
Ë
	`ª«me
((c⁄° *Ëo, (c⁄° *Ën)

	)

136 
	#ngx_ª«me_fûe_n
 "ª«me()"

	)

139 
	#ngx_ch™ge_fûe_ac˚ss
(
n
, 
a
Ë
	`chmod
((c⁄° *Ën,á)

	)

140 
	#ngx_ch™ge_fûe_ac˚ss_n
 "chmod()"

	)

143 
ngx_öt_t
 
ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
);

144 
	#ngx_£t_fûe_time_n
 "utimes()"

	)

147 
	#ngx_fûe_öfo
(
fûe
, 
sb
Ë
	`°©
((c⁄° *Ëfûe, sb)

	)

148 
	#ngx_fûe_öfo_n
 "°©()"

	)

150 
	#ngx_fd_öfo
(
fd
, 
sb
Ë
	`f°©
(fd, sb)

	)

151 
	#ngx_fd_öfo_n
 "f°©()"

	)

153 
	#ngx_lök_öfo
(
fûe
, 
sb
Ë
	`l°©
((c⁄° *Ëfûe, sb)

	)

154 
	#ngx_lök_öfo_n
 "l°©()"

	)

156 
	#ngx_is_dú
(
sb
Ë(
	`S_ISDIR
((sb)->
°_mode
))

	)

157 
	#ngx_is_fûe
(
sb
Ë(
	`S_ISREG
((sb)->
°_mode
))

	)

158 
	#ngx_is_lök
(
sb
Ë(
	`S_ISLNK
((sb)->
°_mode
))

	)

159 
	#ngx_is_exec
(
sb
Ë(((sb)->
°_mode
 & 
S_IXUSR
Ë=S_IXUSR)

	)

160 
	#ngx_fûe_ac˚ss
(
sb
Ë((sb)->
°_mode
 & 0777)

	)

161 
	#ngx_fûe_size
(
sb
Ë(sb)->
°_size


	)

162 
	#ngx_fûe_fs_size
(
sb
Ë
	`ngx_max
((sb)->
°_size
, (sb)->
°_blocks
 * 512)

	)

163 
	#ngx_fûe_mtime
(
sb
Ë(sb)->
°_mtime


	)

164 
	#ngx_fûe_uniq
(
sb
Ë(sb)->
°_öo


	)

167 
ngx_öt_t
 
ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

168 
ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

171 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

173 
	#ngx_fûíame_cmp
(
s1
, 
s2
, 
n
Ë
	`°∫ˇ£cmp
((*Ës1, (*Ës2,Ç)

	)

177 
	#ngx_fûíame_cmp
 
ngx_memcmp


	)

182 
	#ngx_ªÆ∑th
(
p
, 
r
Ë
	`ªÆ∑th
((*Ëp, (*Ër)

	)

183 
	#ngx_ªÆ∑th_n
 "ªÆ∑th()"

	)

184 
	#ngx_gëcwd
(
buf
, 
size
Ë(
	`gëcwd
((*Ëbuf, sizeË!
NULL
)

	)

185 
	#ngx_gëcwd_n
 "gëcwd()"

	)

186 
	#ngx_∑th_£∑øt‹
(
c
Ë((cË='/')

	)

188 
	#NGX_MAX_PATH
 
PATH_MAX


	)

190 
	#NGX_DIR_MASK_LEN
 0

	)

193 
ngx_öt_t
 
ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
);

194 
	#ngx_›í_dú_n
 "›ídú()"

	)

197 
	#ngx_˛o£_dú
(
d
Ë
	`˛o£dú
((d)->
dú
)

	)

198 
	#ngx_˛o£_dú_n
 "˛o£dú()"

	)

201 
ngx_öt_t
 
ngx_ªad_dú
(
ngx_dú_t
 *
dú
);

202 
	#ngx_ªad_dú_n
 "ªaddú()"

	)

205 
	#ngx_¸óã_dú
(
«me
, 
ac˚ss
Ë
	`mkdú
((c⁄° *Ë«me,ác˚ss)

	)

206 
	#ngx_¸óã_dú_n
 "mkdú()"

	)

209 
	#ngx_dñëe_dú
(
«me
Ë
	`rmdú
((c⁄° *Ë«me)

	)

210 
	#ngx_dñëe_dú_n
 "rmdú()"

	)

213 
	#ngx_dú_ac˚ss
(
a
Ë◊ | (®& 0444Ë>> 2)

	)

216 
	#ngx_de_«me
(
dú
Ë((
u_ch¨
 *Ë(dú)->
de
->
d_«me
)

	)

217 #i‡(
NGX_HAVE_D_NAMLEN
)

218 
	#ngx_de_«mñí
(
dú
Ë(dú)->
de
->
d_«mÀn


	)

220 
	#ngx_de_«mñí
(
dú
Ë
	`ngx_°æí
((dú)->
de
->
d_«me
)

	)

223 
ngx_ölöe
 
ngx_öt_t


224 
	$ngx_de_öfo
(
u_ch¨
 *
«me
, 
ngx_dú_t
 *
dú
)

226 
dú
->
ty≥
 = 0;

227  
	`°©
((c⁄° *Ë
«me
, &
dú
->
öfo
);

228 
	}
}

230 
	#ngx_de_öfo_n
 "°©()"

	)

231 
	#ngx_de_lök_öfo
(
«me
, 
dú
Ë
	`l°©
((c⁄° *Ë«me, &(dú)->
öfo
)

	)

232 
	#ngx_de_lök_öfo_n
 "l°©()"

	)

234 #i‡(
NGX_HAVE_D_TYPE
)

241 
	#ngx_de_is_dú
(
dú
) \

242 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_DIR
Ë: (
	`S_ISDIR
((dú)->
öfo
.
°_mode
)))

	)

243 
	#ngx_de_is_fûe
(
dú
) \

244 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_REG
Ë: (
	`S_ISREG
((dú)->
öfo
.
°_mode
)))

	)

245 
	#ngx_de_is_lök
(
dú
) \

246 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_LNK
Ë: (
	`S_ISLNK
((dú)->
öfo
.
°_mode
)))

	)

250 
	#ngx_de_is_dú
(
dú
Ë(
	`S_ISDIR
((dú)->
öfo
.
°_mode
))

	)

251 
	#ngx_de_is_fûe
(
dú
Ë(
	`S_ISREG
((dú)->
öfo
.
°_mode
))

	)

252 
	#ngx_de_is_lök
(
dú
Ë(
	`S_ISLNK
((dú)->
öfo
.
°_mode
))

	)

256 
	#ngx_de_ac˚ss
(
dú
Ë(((dú)->
öfo
.
°_mode
Ë& 0777)

	)

257 
	#ngx_de_size
(
dú
Ë(dú)->
öfo
.
°_size


	)

258 
	#ngx_de_fs_size
(
dú
) \

259 
	`ngx_max
((
dú
)->
öfo
.
°_size
, (dú)->öfo.
°_blocks
 * 512)

	)

260 
	#ngx_de_mtime
(
dú
Ë(dú)->
öfo
.
°_mtime


	)

263 
ngx_öt_t
 
ngx_›í_glob
(
ngx_glob_t
 *
gl
);

264 
	#ngx_›í_glob_n
 "glob()"

	)

265 
ngx_öt_t
 
ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
);

266 
ngx_˛o£_glob
(
ngx_glob_t
 *
gl
);

269 
ngx_îr_t
 
ngx_åylock_fd
(
ngx_fd_t
 
fd
);

270 
ngx_îr_t
 
ngx_lock_fd
(
ngx_fd_t
 
fd
);

271 
ngx_îr_t
 
ngx_u∆ock_fd
(
ngx_fd_t
 
fd
);

273 
	#ngx_åylock_fd_n
 "f˙é(F_SETLK, F_WRLCK)"

	)

274 
	#ngx_lock_fd_n
 "f˙é(F_SETLKW, F_WRLCK)"

	)

275 
	#ngx_u∆ock_fd_n
 "f˙é(F_SETLK, F_UNLCK)"

	)

278 #i‡(
NGX_HAVE_F_READAHEAD
)

280 
	#NGX_HAVE_READ_AHEAD
 1

	)

282 
	#ngx_ªad_ahód
(
fd
, 
n
Ë
	`f˙é
(fd, 
F_READAHEAD
, (Ën)

	)

283 
	#ngx_ªad_ahód_n
 "f˙é(fd, F_READAHEAD)"

	)

285 #ñi‡(
NGX_HAVE_POSIX_FADVISE
)

287 
	#NGX_HAVE_READ_AHEAD
 1

	)

289 
ngx_öt_t
 
ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
);

290 
	#ngx_ªad_ahód_n
 "posix_Ádvi£(POSIX_FADV_SEQUENTIAL)"

	)

294 
	#ngx_ªad_ahód
(
fd
, 
n
Ë0

	)

295 
	#ngx_ªad_ahód_n
 "ngx_ªad_ahód_n"

	)

300 #i‡(
NGX_HAVE_O_DIRECT
)

302 
ngx_öt_t
 
ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
);

303 
	#ngx_dúe˘io_⁄_n
 "f˙é(O_DIRECT)"

	)

305 
ngx_öt_t
 
ngx_dúe˘io_off
(
ngx_fd_t
 
fd
);

306 
	#ngx_dúe˘io_off_n
 "f˙é(!O_DIRECT)"

	)

308 #ñi‡(
NGX_HAVE_F_NOCACHE
)

310 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`f˙é
(fd, 
F_NOCACHE
, 1)

	)

311 
	#ngx_dúe˘io_⁄_n
 "f˙é(F_NOCACHE, 1)"

	)

313 #ñi‡(
NGX_HAVE_DIRECTIO
)

315 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`dúe˘io
(fd, 
DIRECTIO_ON
)

	)

316 
	#ngx_dúe˘io_⁄_n
 "dúe˘io(DIRECTIO_ON)"

	)

320 
	#ngx_dúe˘io_⁄
(
fd
Ë0

	)

321 
	#ngx_dúe˘io_⁄_n
 "ngx_dúe˘io_⁄_n"

	)

325 
size_t
 
ngx_fs_bsize
(
u_ch¨
 *
«me
);

328 
	#ngx_°dîr
 
STDERR_FILENO


	)

329 
	#ngx_£t_°dîr
(
fd
Ë
	`dup2
(fd, 
STDERR_FILENO
)

	)

330 
	#ngx_£t_°dîr_n
 "dup2(STDERR_FILENO)"

	)

333 #i‡(
NGX_HAVE_FILE_AIO
)

335 
ssize_t
 
ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

336 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

338 
ngx_uöt_t
 
ngx_fûe_aio
;

	@src/os/unix/ngx_freebsd.h

8 #i‚de‡
_NGX_FREEBSD_H_INCLUDED_


9 
	#_NGX_FREEBSD_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

15 
ngx_‰ìbsd_kîn_o§ñd©e
;

16 
ngx_‰ìbsd_hw_n˝u
;

17 
u_l⁄g
 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

19 
ngx_uöt_t
 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
;

20 
ngx_uöt_t
 
ngx_‰ìbsd_u£_t˝_n›ush
;

21 
ngx_uöt_t
 
ngx_‰ìbsd_debug_mÆloc
;

	@src/os/unix/ngx_freebsd_config.h

8 #i‚de‡
_NGX_FREEBSD_CONFIG_H_INCLUDED_


9 
	#_NGX_FREEBSD_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<°d¨g.h
>

16 
	~<°ddef.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<sig«l.h
>

22 
	~<pwd.h
>

23 
	~<gΩ.h
>

24 
	~<dúít.h
>

25 
	~<glob.h
>

26 
	~<sys/∑øm.h
>

27 
	~<sys/mou¡.h
>

29 
	~<sys/fûio.h
>

30 
	~<sys/uio.h
>

31 
	~<sys/°©.h
>

32 
	~<f˙é.h
>

34 
	~<sys/waô.h
>

35 
	~<sys/mm™.h
>

36 
	~<sys/ªsour˚.h
>

37 
	~<sched.h
>

39 
	~<sys/sockë.h
>

40 
	~<√töë/ö.h
>

41 
	~<√töë/t˝.h
>

42 
	~<¨∑/öë.h
>

43 
	~<√tdb.h
>

44 
	~<sys/un.h
>

46 
	~<libutû.h
>

47 
	~<o§ñd©e.h
>

48 
	~<sys/sys˘l.h
>

51 #i‡
__FªeBSD_vîsi⁄
 < 400017

57 #unde‡
CMSG_SPACE


58 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

60 #unde‡
CMSG_LEN


61 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

63 #unde‡
CMSG_DATA


64 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

69 
	~<ngx_auto_c⁄fig.h
>

72 #i‡(
NGX_HAVE_POSIX_SEM
)

73 
	~<£m≠h‹e.h
>

77 #i‡(
NGX_HAVE_POLL
)

78 
	~<pﬁl.h
>

82 #i‡(
NGX_HAVE_KQUEUE
)

83 
	~<sys/evít.h
>

87 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_HAVE_AIO
)

88 
	~<aio.h
>

89 
aiocb
 
	tngx_aiocb_t
;

93 
	#NGX_LISTEN_BACKLOG
 -1

	)

96 #i‡(
__FªeBSD_vîsi⁄
 < 430000 || __FreeBSD_version < 500012)

98 
pid_t
 
rf‹k_thªad
(
Êags
, *
°ack
, (*
func
)(*
¨g
), *arg);

102 #i‚de‡
IOV_MAX


103 
	#IOV_MAX
 1024

	)

107 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


108 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

112 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

115 **
ívú⁄
;

116 *
mÆloc_›ti⁄s
;

	@src/os/unix/ngx_freebsd_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	gngx_‰ìbsd_kîn_o°y≥
[16];

14 
	gngx_‰ìbsd_kîn_o§ñó£
[128];

15 
	gngx_‰ìbsd_kîn_o§ñd©e
;

16 
	gngx_‰ìbsd_hw_n˝u
;

17 
	gngx_‰ìbsd_kîn_ùc_somaxc⁄n
;

18 
u_l⁄g
 
	gngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

21 
	gngx_‰ìbsd_machdï_h…_logiˇl_˝us
;

24 
ngx_uöt_t
 
	gngx_‰ìbsd_£ndfûe_nbyãs_bug
;

25 
ngx_uöt_t
 
	gngx_‰ìbsd_u£_t˝_n›ush
;

26 
ngx_uöt_t
 
	gngx_‰ìbsd_debug_mÆloc
;

29 
ngx_os_io_t
 
	gngx_‰ìbsd_io
 = {

30 
ngx_unix_ªcv
,

31 
ngx_ªadv_chaö
,

32 
ngx_udp_unix_ªcv
,

33 
ngx_unix_£nd
,

34 #i‡(
NGX_HAVE_SENDFILE
)

35 
ngx_‰ìbsd_£ndfûe_chaö
,

36 
NGX_IO_SENDFILE


38 
ngx_wrôev_chaö
,

45 *
	m«me
;

46 *
	mvÆue
;

47 
size_t
 
	msize
;

48 
ngx_uöt_t
 
	mexi°s
;

49 } 
	tsys˘l_t
;

52 
sys˘l_t
 
	gsys˘ls
[] = {

54 &
ngx_‰ìbsd_hw_n˝u
,

55 (
ngx_‰ìbsd_hw_n˝u
), 0 },

58 &
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
,

59 (
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
), 0 },

62 &
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
,

63 (
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
), 0 },

66 &
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
,

67 (
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
), 0 },

69 { 
NULL
, NULL, 0, 0 }

74 
	$ngx_debug_öô
()

76 #i‡(
NGX_DEBUG_MALLOC
)

78 #i‡
__FªeBSD_vîsi⁄
 >= 500014

79 
_mÆloc_›ti⁄s
 = "J";

81 
mÆloc_›ti⁄s
 = "J";

84 
ngx_‰ìbsd_debug_mÆloc
 = 1;

87 *
mo
;

89 
mo
 = 
	`gëív
("MALLOC_OPTIONS");

91 i‡(
mo
 && 
	`ngx_°rchr
(mo, 'J')) {

92 
ngx_‰ìbsd_debug_mÆloc
 = 1;

95 
	}
}

98 
ngx_öt_t


99 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

101 
vîsi⁄
;

102 
size_t
 
size
;

103 
ngx_îr_t
 
îr
;

104 
ngx_uöt_t
 
i
;

106 
size
 = (
ngx_‰ìbsd_kîn_o°y≥
);

107 i‡(
	`sys˘lby«me
("kern.ostype",

108 
ngx_‰ìbsd_kîn_o°y≥
, &
size
, 
NULL
, 0) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

112 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

113  
NGX_ERROR
;

116 
ngx_‰ìbsd_kîn_o°y≥
[
size
 - 1] = '\0';

119 
size
 = (
ngx_‰ìbsd_kîn_o§ñó£
);

120 i‡(
	`sys˘lby«me
("kern.osrelease",

121 
ngx_‰ìbsd_kîn_o§ñó£
, &
size
, 
NULL
, 0) == -1) {

122 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

125 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

126  
NGX_ERROR
;

129 
ngx_‰ìbsd_kîn_o§ñó£
[
size
 - 1] = '\0';

133 
size
 = ();

134 i‡(
	`sys˘lby«me
("kern.osreldate",

135 &
ngx_‰ìbsd_kîn_o§ñd©e
, &
size
, 
NULL
, 0) == -1) {

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

138  
NGX_ERROR
;

141 
vîsi⁄
 = 
ngx_‰ìbsd_kîn_o§ñd©e
;

144 #i‡(
NGX_HAVE_SENDFILE
)

162 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 460102) \

163 || 
__FªeBSD_vîsi⁄
 == 460002 || __FreeBSD_version >= 500039

167 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 0;

173 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 1;

180 i‡((
vîsi⁄
 < 500000 && version >= 440003) || version >= 500017) {

181 
ngx_‰ìbsd_u£_t˝_n›ush
 = 1;

185 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

186 
size
 = 
sys˘ls
[
i
].size;

188 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

191 
sys˘ls
[
i
].
exi°s
 = 1;

195 
îr
 = 
ngx_î∫o
;

197 i‡(
îr
 =
NGX_ENOENT
) {

201 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

202 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

203  
NGX_ERROR
;

206 i‡(
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
) {

207 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
 / 2;

210 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
;

213 i‡(
vîsi⁄
 < 600008 && 
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
 > 32767) {

214 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

216  
NGX_ERROR
;

219 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

221 
ngx_os_io
 = 
ngx_‰ìbsd_io
;

223  
NGX_OK
;

224 
	}
}

228 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

230 
u_l⁄g
 
vÆue
;

231 
ngx_uöt_t
 
i
;

233 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

234 
ngx_‰ìbsd_kîn_o°y≥
, 
ngx_‰ìbsd_kîn_o§ñó£
);

236 #ifde‡
__Døg⁄Fly_vîsi⁄


237 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

239 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__Døg⁄Fly_vîsi⁄
);

241 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

243 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__FªeBSD_vîsi⁄
);

246 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

247 i‡(
sys˘ls
[
i
].
exi°s
) {

248 i‡(
sys˘ls
[
i
].
size
 == ()) {

249 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

252 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

255 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

256 
sys˘ls
[
i
].
«me
, 
vÆue
);

259 
	}
}

	@src/os/unix/ngx_freebsd_rfork_thread.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

35 *
	gngx_‰ìbsd_kîn_u§°ack
;

36 
size_t
 
	gngx_thªad_°ack_size
;

39 
size_t
 
	grz_size
;

40 
size_t
 
	gußbÀ_°ack_size
;

41 *
	gœ°_°ack
;

43 
ngx_uöt_t
 
	g¡hªads
;

44 
ngx_uöt_t
 
	gmax_thªads
;

46 
ngx_uöt_t
 
	gnkeys
;

47 
ngx_tid_t
 *
	gtids
;

48 **
	gngx_és
;

52 
	gî∫o0
;

53 *
	gî∫os
;

56 
	$__îr‹
()

58 
tid
;

60 
tid
 = 
	`ngx_gëtid
();

62  
tid
 ? &
î∫os
[tid - 1] : &
î∫o0
;

63 
	}
}

75 
__i°hªaded
;

78 
	$_•ölock
(
ngx_©omic_t
 *
lock
)

80 
ngx_öt_t
 
åõs
;

82 
åõs
 = 0;

86 i‡(*
lock
) {

87 i‡(
ngx_n˝u
 > 1 && 
åõs
++ < 1000) {

91 
	`sched_yõld
();

92 
åõs
 = 0;

95 i‡(
	`ngx_©omic_cmp_£t
(
lock
, 0, 1)) {

100 
	}
}

111 #i‚de‡
_•öu∆ock


114 
	$_•öu∆ock
(
ngx_©omic_t
 *
lock
)

116 *
lock
 = 0;

117 
	}
}

122 
ngx_îr_t


123 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
, 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
),

124 *
¨g
, 
ngx_log_t
 *
log
)

126 
ngx_pid_t
 
id
;

127 
ngx_îr_t
 
îr
;

128 *
°ack
, *
°ack_t›
;

130 i‡(
¡hªads
 >
max_thªads
) {

131 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

132 "nÿm‹êth™ %uòthªad†ˇ¿bê¸óãd", 
max_thªads
);

133  
NGX_ERROR
;

136 
œ°_°ack
 -
ngx_thªad_°ack_size
;

138 
°ack
 = 
	`mm≠
(
œ°_°ack
, 
ußbÀ_°ack_size
, 
PROT_READ
|
PROT_WRITE
,

139 
MAP_STACK
, -1, 0);

141 i‡(
°ack
 =
MAP_FAILED
) {

142 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

144 
œ°_°ack
, 
ußbÀ_°ack_size
);

145  
NGX_ERROR
;

148 i‡(
°ack
 !
œ°_°ack
) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

150 "°ack %∞addªs†wa†ch™gedÅÿ%p", 
œ°_°ack
, 
°ack
);

151  
NGX_ERROR
;

154 
°ack_t›
 = 
°ack
 + 
ußbÀ_°ack_size
;

156 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

157 "thªad sèck: %p-%p", 
°ack
, 
°ack_t›
);

159 
	`ngx_£t_î∫o
(0);

161 
id
 = 
	`rf‹k_thªad
(
RFPROC
|
RFTHREAD
|
RFMEM
, 
°ack_t›
,

162 (
ngx_rf‹k_thªad_func_±
Ë
func
, 
¨g
);

164 
îr
 = 
ngx_î∫o
;

166 i‡(
id
 == -1) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "rfork() failed");

170 *
tid
 = 
id
;

171 
¡hªads
 = (
ngx_‰ìbsd_kîn_u§°ack
 - 
°ack_t›
)

172 / 
ngx_thªad_°ack_size
;

173 
tids
[
¡hªads
] = 
id
;

175 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "rf‹k(ÎdÅhªad: %P", 
id
);

178  
îr
;

179 
	}
}

182 
ngx_öt_t


183 
	$ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
)

185 *
ªd_z⁄e
, *
z⁄e
;

186 
size_t
 
Àn
;

187 
ngx_öt_t
 
i
;

188 
siga˘i⁄
 
ß
;

190 
max_thªads
 = 
n
 + 1;

192 
i
 = 0; i < 
n
; i++) {

193 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

194 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

195 
	`sigem±y£t
(&
ß
.
ß_mask
);

196 i‡(
	`siga˘i⁄
(
NGX_CV_SIGNAL
, &
ß
, 
NULL
) == -1) {

197 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

198 "siga˘i⁄(%d, SIG_IGNËÁûed", 
NGX_CV_SIGNAL
);

199  
NGX_ERROR
;

203 
Àn
 = (
ngx_‰ìbsd_kîn_u§°ack
);

204 i‡(
	`sys˘lby«me
("kîn.u§°ack", &
ngx_‰ìbsd_kîn_u§°ack
, &
Àn
,

205 
NULL
, 0) == -1)

207 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

209  
NGX_ERROR
;

213 
rz_size
 = 
ngx_∑gesize
;

214 
ªd_z⁄e
 = 
ngx_‰ìbsd_kîn_u§°ack
 - (
size
 + 
rz_size
);

216 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

218 
ngx_‰ìbsd_kîn_u§°ack
, 
ªd_z⁄e
);

220 
z⁄e
 = 
	`mm≠
(
ªd_z⁄e
, 
rz_size
, 
PROT_NONE
, 
MAP_ANON
, -1, 0);

221 i‡(
z⁄e
 =
MAP_FAILED
) {

222 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

224 
ªd_z⁄e
, 
rz_size
);

225  
NGX_ERROR
;

228 i‡(
z⁄e
 !
ªd_z⁄e
) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

230 "ªd z⁄ê%∞addªs†wa†ch™gedÅÿ%p", 
ªd_z⁄e
, 
z⁄e
);

231  
NGX_ERROR
;

236 
î∫os
 = 
	`ngx_ˇŒoc
(
n
 * (), 
cy˛e
->
log
);

237 i‡(
î∫os
 =
NULL
) {

238  
NGX_ERROR
;

243 
tids
 = 
	`ngx_ˇŒoc
((
n
 + 1Ë* (
ngx_tid_t
), 
cy˛e
->
log
);

244 i‡(
tids
 =
NULL
) {

245  
NGX_ERROR
;

248 
tids
[0] = 
ngx_pid
;

252 
ngx_és
 = 
	`ngx_ˇŒoc
(
NGX_THREAD_KEYS_MAX
 * (
n
 + 1) * (*),

253 
cy˛e
->
log
);

254 i‡(
ngx_és
 =
NULL
) {

255  
NGX_ERROR
;

258 
¡hªads
 = 1;

260 
œ°_°ack
 = 
z⁄e
 + 
rz_size
;

261 
ußbÀ_°ack_size
 = 
size
;

262 
ngx_thªad_°ack_size
 = 
size
 + 
rz_size
;

265 
__i°hªaded
 = 1;

267 
ngx_thªaded
 = 1;

269  
NGX_OK
;

270 
	}
}

273 
ngx_tid_t


274 
	$ngx_thªad_£lf
()

276 
ngx_öt_t
 
tid
;

278 
tid
 = 
	`ngx_gëtid
();

280 i‡(
tids
 =
NULL
) {

281  
ngx_pid
;

284  
tids
[
tid
];

285 
	}
}

288 
ngx_îr_t


289 
	$ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
)

291 i‡(
nkeys
 >
NGX_THREAD_KEYS_MAX
) {

292  
NGX_ENOMEM
;

295 *
key
 = 
nkeys
++;

298 
	}
}

301 
ngx_îr_t


302 
	$ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
)

304 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

305  
NGX_EINVAL
;

308 
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()] = 
vÆue
;

310 
	}
}

313 
ngx_muãx_t
 *

314 
	$ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
)

316 
ngx_muãx_t
 *
m
;

317 
£mun
 
›
;

319 
m
 = 
	`ngx_Æloc
((
ngx_muãx_t
), 
log
);

320 i‡(
m
 =
NULL
) {

321  
NULL
;

324 
m
->
lock
 = 0;

325 
m
->
log
 =Üog;

327 i‡(
Êags
 & 
NGX_MUTEX_LIGHT
) {

328 
m
->
£mid
 = -1;

329  
m
;

332 
m
->
£mid
 = 
	`£mgë
(
IPC_PRIVATE
, 1, 
SEM_R
|
SEM_A
);

333 i‡(
m
->
£mid
 == -1) {

334 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "semget() failed");

335  
NULL
;

338 
›
.
vÆ
 = 0;

340 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
SETVAL
, 
›
) == -1) {

341 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "semctl(SETVAL) failed");

343 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
IPC_RMID
) == -1) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

348  
NULL
;

351  
m
;

352 
	}
}

356 
	$ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
)

358 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
IPC_RMID
) == -1) {

359 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

363 
	`ngx_‰ì
((*Ë
m
);

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
, 
ngx_öt_t
 
åy
)

370 
uöt32_t
 
lock
, 
ﬁd
;

371 
ngx_uöt_t
 
åõs
;

372 
£mbuf
 
›
;

374 i‡(!
ngx_thªaded
) {

375  
NGX_OK
;

378 #i‡(
NGX_DEBUG
)

379 i‡(
åy
) {

380 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

381 "åyÜock muãx %∞lock:%XD", 
m
, m->
lock
);

383 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

384 "lock muãx %∞lock:%XD", 
m
, m->
lock
);

388 
ﬁd
 = 
m
->
lock
;

389 
åõs
 = 0;

392 i‡(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
) {

394 i‡(
åy
) {

395  
NGX_AGAIN
;

398 i‡(
ngx_n˝u
 > 1 && 
åõs
++ < 1000) {

402 
ﬁd
 = 
m
->
lock
;

406 i‡(
m
->
£mid
 == -1) {

407 
	`sched_yõld
();

409 
åõs
 = 0;

410 
ﬁd
 = 
m
->
lock
;

414 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

415 "muãx %∞lock:%XD", 
m
, m->
lock
);

422 
lock
 = 
ﬁd
 + 1;

424 i‡((
lock
 & ~
NGX_MUTEX_LOCK_BUSY
Ë> 
¡hªads
) {

425 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

428 
lock
 & ~
NGX_MUTEX_LOCK_BUSY
, 
m
, 
¡hªads
);

429 
	`ngx_ab‹t
();

432 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

434 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

435 "waô muãx %∞lock:%XD", 
m
, m->
lock
);

444 
›
.
£m_num
 = 0;

445 
›
.
£m_›
 = -1;

446 
›
.
£m_Êg
 = 0;

448 i‡(
	`£m›
(
m
->
£mid
, &
›
, 1) == -1) {

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

450 "£m›(ËÁûed whûêwaôög o¿muãx %p", 
m
);

451 
	`ngx_ab‹t
();

454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

455 "muãx waked u∞%∞lock:%XD", 
m
, m->
lock
);

457 
åõs
 = 0;

458 
ﬁd
 = 
m
->
lock
;

462 
ﬁd
 = 
m
->
lock
;

465 
lock
 = 
ﬁd
 | 
NGX_MUTEX_LOCK_BUSY
;

467 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

474 
ﬁd
 = 
m
->
lock
;

477 i‡(
åõs
++ > 1000) {

479 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

480 "muãx %∞i†c⁄ã°ed", 
m
);

484 
	`sched_yõld
();

486 
åõs
 = 0;

487 
ﬁd
 = 
m
->
lock
;

491 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

492 "muãx %∞i†locked,Üock:%XD", 
m
, m->
lock
);

494  
NGX_OK
;

495 
	}
}

499 
	$ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
)

501 
uöt32_t
 
lock
, 
ﬁd
;

502 
£mbuf
 
›
;

504 i‡(!
ngx_thªaded
) {

508 
ﬁd
 = 
m
->
lock
;

510 i‡(!(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
)) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 0,

512 "åyögÅÿu∆ockÅhê‰ì muãx %p", 
m
);

513 
	`ngx_ab‹t
();

519 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

520 "u∆ock muãx %∞lock:%XD", 
m
, 
ﬁd
);

524 
lock
 = 
ﬁd
 & ~
NGX_MUTEX_LOCK_BUSY
;

526 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

530 
ﬁd
 = 
m
->
lock
;

533 i‡(
m
->
£mid
 == -1) {

534 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

535 "muãx %∞i†u∆ocked", 
m
);

542 
ﬁd
 = 
m
->
lock
;

545 i‡(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
) {

552 i‡(
ﬁd
 == 0) {

558 
lock
 = 
ﬁd
 - 1;

560 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

564 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

565 "wakêu∞muãx %p", 
m
);

567 
›
.
£m_num
 = 0;

568 
›
.
£m_›
 = 1;

569 
›
.
£m_Êg
 = 0;

571 i‡(
	`£m›
(
m
->
£mid
, &
›
, 1) == -1) {

572 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

573 "£m›(ËÁûed whûêwakög u∞⁄ muãx %p", 
m
);

574 
	`ngx_ab‹t
();

580 
ﬁd
 = 
m
->
lock
;

583 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

584 "muãx %∞i†u∆ocked", 
m
);

587 
	}
}

590 
ngx_c⁄d_t
 *

591 
	$ngx_c⁄d_öô
(
ngx_log_t
 *
log
)

593 
ngx_c⁄d_t
 *
cv
;

595 
cv
 = 
	`ngx_Æloc
((
ngx_c⁄d_t
), 
log
);

596 i‡(
cv
 =
NULL
) {

597  
NULL
;

600 
cv
->
signo
 = 
NGX_CV_SIGNAL
;

601 
cv
->
tid
 = -1;

602 
cv
->
log
 =Üog;

603 
cv
->
kq
 = -1;

605  
cv
;

606 
	}
}

610 
	$ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
)

612 i‡(
	`˛o£
(
cv
->
kq
) == -1) {

613 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
,

617 
	`ngx_‰ì
(
cv
);

618 
	}
}

621 
ngx_öt_t


622 
	$ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
)

624 
n
;

625 
ngx_îr_t
 
îr
;

626 
kevít
 
kev
;

627 
time•ec
 
ts
;

629 i‡(
cv
->
kq
 == -1) {

639 
cv
->
kq
 = 
	`kqueue
();

640 i‡(
cv
->
kq
 == -1) {

641 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
, "kqueue() failed");

642  
NGX_ERROR
;

645 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

646 "cv kq:%d signo:%d", 
cv
->
kq
, cv->
signo
);

648 
kev
.
idít
 = 
cv
->
signo
;

649 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

650 
kev
.
Êags
 = 
EV_ADD
;

651 
kev
.
fÊags
 = 0;

652 
kev
.
d©a
 = 0;

653 
kev
.
ud©a
 = 
NULL
;

655 
ts
.
tv_£c
 = 0;

656 
ts
.
tv_n£c
 = 0;

658 i‡(
	`kevít
(
cv
->
kq
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

659 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
, "kevent() failed");

660  
NGX_ERROR
;

663 
cv
->
tid
 = 
	`ngx_thªad_£lf
();

666 
	`ngx_muãx_u∆ock
(
m
);

668 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

669 "cv %∞waô, kq:%d, signo:%d", 
cv
, cv->
kq
, cv->
signo
);

672 
n
 = 
	`kevít
(
cv
->
kq
, 
NULL
, 0, &
kev
, 1, NULL);

674 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

675 "cv %∞kevít: %d", 
cv
, 
n
);

677 i‡(
n
 == -1) {

678 
îr
 = 
ngx_î∫o
;

679 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

680 
cv
->
log
, 
ngx_î∫o
,

682 
cv
);

684 i‡(
îr
 =
NGX_EINTR
) {

688  
NGX_ERROR
;

691 i‡(
n
 == 0) {

692 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

695 
cv
);

699 i‡(
kev
.
fûãr
 !
EVFILT_SIGNAL
) {

700 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

703 
kev
.
fûãr
, 
cv
);

707 i‡(
kev
.
idít
 !(
uöçå_t
Ë
cv
->
signo
) {

708 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

711 
kev
.
idít
, 
cv
);

718 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is waked up", cv);

720 
	`ngx_muãx_lock
(
m
);

722  
NGX_OK
;

723 
	}
}

726 
ngx_öt_t


727 
	$ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
)

729 
ngx_îr_t
 
îr
;

731 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

733 
cv
, cv->
tid
, cv->
signo
);

735 i‡(
cv
->
tid
 == -1) {

736  
NGX_OK
;

739 i‡(
	`kûl
(
cv
->
tid
, cv->
signo
) == -1) {

741 
îr
 = 
ngx_î∫o
;

743 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

744 "kûl(ËÁûed whûêsig«lög c⁄dôi⁄ v¨übÀ %p", 
cv
);

746 i‡(
îr
 =
NGX_ESRCH
) {

747 
cv
->
tid
 = -1;

750  
NGX_ERROR
;

753 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is signaled", cv);

755  
NGX_OK
;

756 
	}
}

	@src/os/unix/ngx_freebsd_rfork_thread.h

8 #i‚de‡
_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


9 
	#_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


	)

12 
	~<sys/ùc.h
>

13 
	~<sys/£m.h
>

14 
	~<sched.h
>

16 
pid_t
 
	tngx_tid_t
;

18 
	#ngx_log_pid
 
	`ngx_thªad_£lf
()

	)

19 
	#ngx_log_tid
 0

	)

21 
	#NGX_TID_T_FMT
 "%P"

	)

24 
	#NGX_MUTEX_LIGHT
 1

	)

26 
	#NGX_MUTEX_LOCK_BUSY
 0x80000000

	)

29 
ngx_©omic_t
 
	mlock
;

30 
ngx_log_t
 *
	mlog
;

31 
	m£mid
;

32 } 
	tngx_muãx_t
;

35 
	#NGX_CV_SIGNAL
 64

	)

38 
	msigno
;

39 
	mkq
;

40 
ngx_tid_t
 
	mtid
;

41 
ngx_log_t
 *
	mlog
;

42 } 
	tngx_c⁄d_t
;

45 
	#ngx_thªad_sigmask
(
how
, 
£t
, 
o£t
) \

46 (
	`sig¥ocmask
(
how
, 
£t
, 
o£t
Ë=-1Ë? 
ngx_î∫o
 : 0

	)

48 
	#ngx_thªad_sigmask_n
 "sig¥ocmask()"

	)

50 
	#ngx_thªad_joö
(
t
, 
p
)

	)

52 
	#ngx_£âhπôÀ
(
n
Ë
	`£çro˘ôÀ
“)

	)

55 *
ngx_‰ìbsd_kîn_u§°ack
;

56 
size_t
 
ngx_thªad_°ack_size
;

59 
ngx_ölöe
 
ngx_öt_t


60 
	$ngx_gëtid
()

62 *
•
;

64 i‡(
ngx_thªad_°ack_size
 == 0) {

68 #i‡–
__i386__
 )

70 
__asm__
 vﬁ©ûê("mov %%e•, %0" : "=q" (
•
));

72 #ñi‡–
__amd64__
 )

74 
__asm__
 vﬁ©ûê("mov %%r•, %0" : "=q" (
•
));

82  (
ngx_‰ìbsd_kîn_u§°ack
 - 
•
Ë/ 
ngx_thªad_°ack_size
;

83 
	}
}

86 
ngx_tid_t
 
ngx_thªad_£lf
();

89 
ngx_uöt_t
 
	tngx_és_key_t
;

91 
	#NGX_THREAD_KEYS_MAX
 16

	)

93 **
ngx_és
;

95 
ngx_îr_t
 
ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
);

96 
	#ngx_thªad_key_¸óã_n
 "thêé†key cª©i⁄"

	)

98 
ngx_îr_t
 
ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
);

99 
	#ngx_thªad_£t_és_n
 "thêé†key sëtög"

	)

103 
	$ngx_thªad_gë_és
(
ngx_és_key_t
 
key
)

105 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

106  
NULL
;

109  
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()];

110 
	}
}

113 
	#ngx_muãx_åylock
(
m
Ë
	`ngx_muãx_dﬁock
(m, 1)

	)

114 
	#ngx_muãx_lock
(
m
Ë(Ë
	`ngx_muãx_dﬁock
(m, 0)

	)

115 
ngx_öt_t
 
ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
,Çgx_öt_à
åy
);

116 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

119 (*
	tngx_rf‹k_thªad_func_±
)(*
	t¨g
);

	@src/os/unix/ngx_freebsd_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

32 #i‡(
IOV_MAX
 > 64)

33 
	#NGX_HEADERS
 64

	)

34 
	#NGX_TRAILERS
 64

	)

36 
	#NGX_HEADERS
 
IOV_MAX


	)

37 
	#NGX_TRAILERS
 
IOV_MAX


	)

41 
ngx_chaö_t
 *

42 
	$ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

44 
rc
, 
Êags
;

45 
u_ch¨
 *
¥ev
;

46 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

47 
size_t
 
hódî_size
, 
fûe_size
;

48 
ngx_uöt_t
 
eöå
, 
ógaö
, 
com∂ëe
;

49 
ngx_îr_t
 
îr
;

50 
ngx_buf_t
 *
fûe
;

51 
ngx_¨øy_t
 
hódî
, 
åaûî
;

52 
ngx_evít_t
 *
wev
;

53 
ngx_chaö_t
 *
˛
;

54 
sf_hdå
 
hdå
;

55 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
], 
åaûîs
[
NGX_TRAILERS
];

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

63 #i‡(
NGX_HAVE_KQUEUE
)

65 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

66 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

68 
wev
->
îr‹
 = 1;

69  
NGX_CHAIN_ERROR
;

76 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

77 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

80 
£nd
 = 0;

81 
ógaö
 = 0;

82 
Êags
 = 0;

84 
hódî
.
ñts
 = 
hódîs
;

85 
hódî
.
size
 = (
iovec
);

86 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

87 
hódî
.
poﬁ
 = 
c
->pool;

89 
åaûî
.
ñts
 = 
åaûîs
;

90 
åaûî
.
size
 = (
iovec
);

91 
åaûî
.
«Œoc
 = 
NGX_TRAILERS
;

92 
åaûî
.
poﬁ
 = 
c
->pool;

95 
fûe
 = 
NULL
;

96 
fûe_size
 = 0;

97 
hódî_size
 = 0;

98 
eöå
 = 0;

99 
com∂ëe
 = 0;

100 
¥ev_£nd
 = 
£nd
;

102 
hódî
.
√…s
 = 0;

103 
åaûî
.
√…s
 = 0;

107 
¥ev
 = 
NULL
;

108 
iov
 = 
NULL
;

110 
˛
 = 
ö
;

111 
˛
 && 
hódî
.
√…s
 < 
IOV_MAX
 && 
£nd
 < 
limô
;

112 
˛
 = cl->
√xt
)

114 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

118 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

122 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

124 i‡(
£nd
 + 
size
 > 
limô
) {

125 
size
 = 
limô
 - 
£nd
;

128 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

129 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

132 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

133 i‡(
iov
 =
NULL
) {

134  
NGX_CHAIN_ERROR
;

137 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

138 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

141 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

142 
hódî_size
 +(
size_t
Ë
size
;

143 
£nd
 +
size
;

147 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

148 
fûe
 = 
˛
->
buf
;

153 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

155 i‡(
£nd
 + 
size
 > 
limô
) {

156 
size
 = 
limô
 - 
£nd
;

158 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

159 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

161 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

162 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

166 
fûe_size
 +(
size_t
Ë
size
;

167 
£nd
 +
size
;

168 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

169 
˛
 = cl->
√xt
;

171 } 
˛


172 && 
˛
->
buf
->
ö_fûe


173 && 
£nd
 < 
limô


174 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

175 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

179 i‡(
fûe
) {

183 
¥ev
 = 
NULL
;

184 
iov
 = 
NULL
;

186 
˛
 && 
hódî
.
√…s
 < 
IOV_MAX
 && 
£nd
 < 
limô
) {

188 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

189 
˛
 = cl->
√xt
;

193 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

197 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

199 i‡(
£nd
 + 
size
 > 
limô
) {

200 
size
 = 
limô
 - 
£nd
;

203 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

204 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

207 
iov
 = 
	`ngx_¨øy_push
(&
åaûî
);

208 i‡(
iov
 =
NULL
) {

209  
NGX_CHAIN_ERROR
;

212 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

213 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

216 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

217 
£nd
 +
size
;

218 
˛
 = cl->
√xt
;

222 i‡(
fûe
) {

224 i‡(
ngx_‰ìbsd_u£_t˝_n›ush


225 && 
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET
)

227 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

228 
îr
 = 
ngx_î∫o
;

235 i‡(
îr
 !
NGX_EINTR
) {

236 
wev
->
îr‹
 = 1;

237 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

238 
ngx_t˝_n›ush_n
 " failed");

239  
NGX_CHAIN_ERROR
;

243 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

245 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

255 
hdå
.
hódîs
 = 
hódî
.
√…s
 ? (
iovec
 *Ëhódî.
ñts
: 
NULL
;

256 
hdå
.
hdr_˙t
 = 
hódî
.
√…s
;

257 
hdå
.
åaûîs
 = 
åaûî
.
√…s
 ? (
iovec
 *Ëåaûî.
ñts
: 
NULL
;

258 
hdå
.
ål_˙t
 = 
åaûî
.
√…s
;

265 i‡(!
ngx_‰ìbsd_£ndfûe_nbyãs_bug
) {

266 
hódî_size
 = 0;

269 
£¡
 = 0;

271 #i‡(
NGX_HAVE_AIO_SENDFILE
)

272 
Êags
 = 
c
->
aio_£ndfûe
 ? 
SF_NODISKIO
 : 0;

275 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

276 
fûe_size
 + 
hódî_size
, &
hdå
, &
£¡
, 
Êags
);

278 i‡(
rc
 == -1) {

279 
îr
 = 
ngx_î∫o
;

281 
îr
) {

282 
NGX_EAGAIN
:

283 
ógaö
 = 1;

286 
NGX_EINTR
:

287 
eöå
 = 1;

290 #i‡(
NGX_HAVE_AIO_SENDFILE
)

291 
NGX_EBUSY
:

292 
c
->
busy_£ndfûe
 = 
fûe
;

297 
wev
->
îr‹
 = 1;

298 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

299  
NGX_CHAIN_ERROR
;

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

303 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

310 } i‡(
rc
 >0 && 
£¡
 == 0) {

318 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

320 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

322  
NGX_CHAIN_ERROR
;

325 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

327 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî_size
);

330 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

332 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

333 "wrôev: %d o‡%uz", 
rc
, 
hódî_size
);

335 i‡(
rc
 == -1) {

336 
îr
 = 
ngx_î∫o
;

338 
îr
) {

339 
NGX_EAGAIN
:

342 
NGX_EINTR
:

343 
eöå
 = 1;

347 
wev
->
îr‹
 = 1;

348 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

349  
NGX_CHAIN_ERROR
;

352 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

356 
£¡
 = 
rc
 > 0 ?Ñc : 0;

359 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

360 
com∂ëe
 = 1;

363 
c
->
£¡
 += sent;

365 
˛
 = 
ö
; cl; c»˛->
√xt
) {

367 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

371 i‡(
£¡
 == 0) {

375 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

377 i‡(
£¡
 >
size
) {

378 
£¡
 -
size
;

380 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

381 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

384 i‡(
˛
->
buf
->
ö_fûe
) {

385 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

391 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

392 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

395 i‡(
˛
->
buf
->
ö_fûe
) {

396 
˛
->
buf
->
fûe_pos
 +
£¡
;

402 #i‡(
NGX_HAVE_AIO_SENDFILE
)

403 i‡(
c
->
busy_£ndfûe
) {

404  
˛
;

408 i‡(
ógaö
) {

417 
wev
->
ªady
 = 0;

418  
˛
;

421 i‡(
eöå
) {

425 i‡(!
com∂ëe
) {

426 
wev
->
ªady
 = 0;

427  
˛
;

430 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

431  
˛
;

434 
ö
 = 
˛
;

436 
	}
}

	@src/os/unix/ngx_gcc_atomic_amd64.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

36 
ngx_ölöe
 
ngx_©omic_uöt_t


37 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

38 
ngx_©omic_uöt_t
 
£t
)

40 
u_ch¨
 
ªs
;

42 
__asm__
 volatile (

44 
NGX_SMP_LOCK


48 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

50  
ªs
;

51 
	}
}

66 
ngx_ölöe
 
ngx_©omic_öt_t


67 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

69 
__asm__
 volatile (

71 
NGX_SMP_LOCK


74 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

76  
add
;

77 
	}
}

80 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

	@src/os/unix/ngx_gcc_atomic_ppc.h

26 #i‡(
NGX_PTR_SIZE
 == 8)

28 
ngx_ölöe
 
ngx_©omic_uöt_t


29 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

30 
ngx_©omic_uöt_t
 
£t
)

32 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

34 
__asm__
 volatile (

50 : "=&b" (
ªs
), "=&b" (
ãmp
)

51 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

54  
ªs
;

55 
	}
}

58 
ngx_ölöe
 
ngx_©omic_öt_t


59 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

61 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

63 
__asm__
 volatile (

74 : "=&b" (
ªs
), "=&b" (
ãmp
)

75 : "b" (
vÆue
), "b" (
add
)

78  
ªs
;

79 
	}
}

82 #i‡(
NGX_SMP
)

83 
	#ngx_mem‹y_b¨rõr
() \

84 
__asm__
 vﬁ©ûê("isyn¯ \¿Üwsyn¯ \n" ::: "mem‹y")

	)

86 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

91 
ngx_ölöe
 
ngx_©omic_uöt_t


92 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

93 
ngx_©omic_uöt_t
 
£t
)

95 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

97 
__asm__
 volatile (

113 : "=&b" (
ªs
), "=&b" (
ãmp
)

114 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

117  
ªs
;

118 
	}
}

121 
ngx_ölöe
 
ngx_©omic_öt_t


122 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

124 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

126 
__asm__
 volatile (

137 : "=&b" (
ªs
), "=&b" (
ãmp
)

138 : "b" (
vÆue
), "b" (
add
)

141  
ªs
;

142 
	}
}

145 #i‡(
NGX_SMP
)

146 
	#ngx_mem‹y_b¨rõr
() \

147 
__asm__
 vﬁ©ûê("isyn¯ \¿Éõiÿ \n" ::: "mem‹y")

	)

149 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

155 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_sparc64.h

26 #i‡(
NGX_PTR_SIZE
 == 4)

27 
	#NGX_CASA
 "ˇß"

	)

29 
	#NGX_CASA
 "ˇsxa"

	)

33 
ngx_ölöe
 
ngx_©omic_uöt_t


34 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

35 
ngx_©omic_uöt_t
 
£t
)

37 
__asm__
 volatile (

39 
NGX_CASA
 " [%1] 0x80, %2, %0"

41 : "+r" (
£t
Ë: "r" (
lock
), "r" (
ﬁd
) : "memory");

43  (
£t
 =
ﬁd
);

44 
	}
}

47 
ngx_ölöe
 
ngx_©omic_öt_t


48 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

50 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

52 
ﬁd
 = *
vÆue
;

56 
ªs
 = 
ﬁd
 + 
add
;

58 
__asm__
 volatile (

60 
NGX_CASA
 " [%1] 0x80, %2, %0"

62 : "+r" (
ªs
Ë: "r" (
vÆue
), "r" (
ﬁd
) : "memory");

64 i‡(
ªs
 =
ﬁd
) {

65  
ªs
;

68 
ﬁd
 = 
ªs
;

70 
	}
}

73 #i‡(
NGX_SMP
)

74 
	#ngx_mem‹y_b¨rõr
() \

75 
__asm__
 volatile ( \

77 ::: "mem‹y")

	)

79 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_x86.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

37 
ngx_ölöe
 
ngx_©omic_uöt_t


38 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

39 
ngx_©omic_uöt_t
 
£t
)

41 
u_ch¨
 
ªs
;

43 
__asm__
 volatile (

45 
NGX_SMP_LOCK


49 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

51  
ªs
;

52 
	}
}

68 #i‡!(–
__GNUC__
 =2 && 
__GNUC_MINOR__
 <7 ) || ( 
__INTEL_COMPILER
 >= 800 ))

79 
ngx_ölöe
 
ngx_©omic_öt_t


80 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

82 
__asm__
 volatile (

84 
NGX_SMP_LOCK


87 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

89  
add
;

90 
	}
}

101 
ngx_ölöe
 
ngx_©omic_öt_t


102 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

104 
ngx_©omic_uöt_t
 
ﬁd
;

106 
__asm__
 volatile (

108 
NGX_SMP_LOCK


111 : "˜" (
ﬁd
Ë: "m" (*
vÆue
), "a" (
add
) : "cc", "memory");

113  
ﬁd
;

114 
	}
}

124 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

127 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 (".byã 0xf3, 0x90")

	)

	@src/os/unix/ngx_linux.h

8 #i‚de‡
_NGX_LINUX_H_INCLUDED_


9 
	#_NGX_LINUX_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

15 
ngx_löux_πsig_max
;

	@src/os/unix/ngx_linux_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evítfd
;

14 
aio_c⁄ãxt_t
 
ngx_aio_˘x
;

17 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

21 
	$io_submô
(
aio_c⁄ãxt_t
 
˘x
, 
n
, 
iocb
 **
∑iocb
)

23  
	`sysˇŒ
(
SYS_io_submô
, 
˘x
, 
n
, 
∑iocb
);

24 
	}
}

27 
ssize_t


28 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

29 
ngx_poﬁ_t
 *
poﬁ
)

31 
ngx_îr_t
 
îr
;

32 
iocb
 *
piocb
[1];

33 
ngx_evít_t
 *
ev
;

34 
ngx_evít_aio_t
 *
aio
;

36 i‡(!
ngx_fûe_aio
) {

37  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

40 
aio
 = 
fûe
->aio;

42 i‡(
aio
 =
NULL
) {

43 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

44 i‡(
aio
 =
NULL
) {

45  
NGX_ERROR
;

48 
aio
->
fûe
 = file;

49 
aio
->
fd
 = 
fûe
->fd;

50 
aio
->
evít
.
d©a
 =áio;

51 
aio
->
evít
.
ªady
 = 1;

52 
aio
->
evít
.
log
 = 
fûe
->log;

53 
fûe
->
aio
 =áio;

56 
ev
 = &
aio
->
evít
;

58 i‡(!
ev
->
ªady
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

60 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

61  
NGX_AGAIN
;

64 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

66 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

68 i‡(
ev
->
com∂ëe
) {

69 
ev
->
a˘ive
 = 0;

70 
ev
->
com∂ëe
 = 0;

72 i‡(
aio
->
ªs
 >= 0) {

73 
	`ngx_£t_î∫o
(0);

74  
aio
->
ªs
;

77 
	`ngx_£t_î∫o
(-
aio
->
ªs
);

79 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

80 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

82  
NGX_ERROR
;

85 
	`ngx_memzîo
(&
aio
->
aiocb
, (
iocb
));

87 
aio
->
aiocb
.
aio_d©a
 = (
uöt64_t
Ë(
uöçå_t
Ë
ev
;

88 
aio
->
aiocb
.
aio_lio_›code
 = 
IOCB_CMD_PREAD
;

89 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

90 
aio
->
aiocb
.
aio_buf
 = (
uöt64_t
Ë(
uöçå_t
Ë
buf
;

91 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

92 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

93 
aio
->
aiocb
.
aio_Êags
 = 
IOCB_FLAG_RESFD
;

94 
aio
->
aiocb
.
aio_ªsfd
 = 
ngx_evítfd
;

96 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

98 
piocb
[0] = &
aio
->
aiocb
;

100 i‡(
	`io_submô
(
ngx_aio_˘x
, 1, 
piocb
) == 1) {

101 
ev
->
a˘ive
 = 1;

102 
ev
->
ªady
 = 0;

103 
ev
->
com∂ëe
 = 0;

105  
NGX_AGAIN
;

108 
îr
 = 
ngx_î∫o
;

110 i‡(
îr
 =
NGX_EAGAIN
) {

111  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

114 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

115 "io_submô(\"%V\"ËÁûed", &
fûe
->
«me
);

117 i‡(
îr
 =
NGX_ENOSYS
) {

118 
ngx_fûe_aio
 = 0;

119  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

122  
NGX_ERROR
;

123 
	}
}

127 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

129 
ngx_evít_aio_t
 *
aio
;

131 
aio
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

134 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

136 
aio
->
	`h™dÀr
(
ev
);

137 
	}
}

	@src/os/unix/ngx_linux_config.h

8 #i‚de‡
_NGX_LINUX_CONFIG_H_INCLUDED_


9 
	#_NGX_LINUX_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_GNU_SOURCE


13 
	#_GNU_SOURCE


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<°rög.h
>

27 
	~<sig«l.h
>

28 
	~<pwd.h
>

29 
	~<gΩ.h
>

30 
	~<dúít.h
>

31 
	~<glob.h
>

32 
	~<sys/vfs.h
>

34 
	~<sys/uio.h
>

35 
	~<sys/°©.h
>

36 
	~<f˙é.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/mm™.h
>

40 
	~<sys/ªsour˚.h
>

41 
	~<sched.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<√töë/t˝.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√tdb.h
>

48 
	~<sys/un.h
>

50 
	~<time.h
>

51 
	~<mÆloc.h
>

52 
	~<limôs.h
>

53 
	~<sys/io˘l.h
>

54 
	~<sys/sys˘l.h
>

55 
	~<¸y±.h
>

56 
	~<sys/ut¢ame.h
>

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_SYS_PRCTL_H
)

68 
	~<sys/¥˘l.h
>

72 #i‡(
NGX_HAVE_SENDFILE64
)

73 
	~<sys/£ndfûe.h
>

75 
ssize_t
 
£ndfûe
(
s
, 
fd
, 
öt32_t
 *
off£t
, 
size_t
 
size
);

76 
	#NGX_SENDFILE_LIMIT
 0x80000000

	)

80 #i‡(
NGX_HAVE_POLL
 || 
NGX_HAVE_RTSIG
)

81 
	~<pﬁl.h
>

85 #i‡(
NGX_HAVE_EPOLL
)

86 
	~<sys/ïﬁl.h
>

90 #i‡(
NGX_HAVE_FILE_AIO
)

91 
	~<sys/sysˇŒ.h
>

92 
	~<löux/aio_abi.h
>

93 
iocb
 
	tngx_aiocb_t
;

97 
	#NGX_LISTEN_BACKLOG
 511

	)

100 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


102 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

106 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


107 
	#NGX_HAVE_INHERITED_NONBLOCK
 0

	)

111 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

114 **
ívú⁄
;

	@src/os/unix/ngx_linux_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 
	gngx_löux_kîn_o°y≥
[50];

13 
u_ch¨
 
	gngx_löux_kîn_o§ñó£
[50];

15 
	gngx_löux_πsig_max
;

18 
ngx_os_io_t
 
	gngx_löux_io
 = {

19 
ngx_unix_ªcv
,

20 
ngx_ªadv_chaö
,

21 
ngx_udp_unix_ªcv
,

22 
ngx_unix_£nd
,

23 #i‡(
NGX_HAVE_SENDFILE
)

24 
ngx_löux_£ndfûe_chaö
,

25 
NGX_IO_SENDFILE


27 
ngx_wrôev_chaö
,

33 
ngx_öt_t


34 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

36 
ut¢ame
 
u
;

38 i‡(
	`u«me
(&
u
) == -1) {

39 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "uname() failed");

40  
NGX_ERROR
;

43 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o°y≥
, (
u_ch¨
 *Ë
u
.
sy¢ame
,

44 (
ngx_löux_kîn_o°y≥
));

46 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o§ñó£
, (
u_ch¨
 *Ë
u
.
ªÀa£
,

47 (
ngx_löux_kîn_o§ñó£
));

49 #i‡(
NGX_HAVE_RTSIG
)

51 
«me
[2];

52 
size_t
 
Àn
;

53 
ngx_îr_t
 
îr
;

55 
«me
[0] = 
CTL_KERN
;

56 
«me
[1] = 
KERN_RTSIGMAX
;

57 
Àn
 = (
ngx_löux_πsig_max
);

59 i‡(
	`sys˘l
(
«me
, 2, &
ngx_löux_πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

60 
îr
 = 
ngx_î∫o
;

62 i‡(
îr
 !
NGX_ENOTDIR
 &&Éº !
NGX_ENOSYS
) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

66  
NGX_ERROR
;

69 
ngx_löux_πsig_max
 = 0;

75 
ngx_os_io
 = 
ngx_löux_io
;

77  
NGX_OK
;

78 
	}
}

82 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

84 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

85 
ngx_löux_kîn_o°y≥
, 
ngx_löux_kîn_o§ñó£
);

87 #i‡(
NGX_HAVE_RTSIG
)

88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "sysctl(KERN_RTSIGMAX): %d",

89 
ngx_löux_πsig_max
);

91 
	}
}

	@src/os/unix/ngx_linux_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

27 
	#NGX_SENDFILE_LIMIT
 2147483647L

	)

30 #i‡(
IOV_MAX
 > 64)

31 
	#NGX_HEADERS
 64

	)

33 
	#NGX_HEADERS
 
IOV_MAX


	)

37 
ngx_chaö_t
 *

38 
	$ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

40 
rc
, 
t˝_nodñay
;

41 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

42 
u_ch¨
 *
¥ev
;

43 
size_t
 
fûe_size
;

44 
ngx_îr_t
 
îr
;

45 
ngx_buf_t
 *
fûe
;

46 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

47 
ngx_¨øy_t
 
hódî
;

48 
ngx_evít_t
 *
wev
;

49 
ngx_chaö_t
 *
˛
;

50 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
];

51 #i‡(
NGX_HAVE_SENDFILE64
)

52 
off_t
 
off£t
;

54 
öt32_t
 
off£t
;

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

66 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_SENDFILE_LIMIT
 - 
ngx_∑gesize
)) {

67 
limô
 = 
NGX_SENDFILE_LIMIT
 - 
ngx_∑gesize
;

71 
£nd
 = 0;

73 
hódî
.
ñts
 = 
hódîs
;

74 
hódî
.
size
 = (
iovec
);

75 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

76 
hódî
.
poﬁ
 = 
c
->pool;

79 
fûe
 = 
NULL
;

80 
fûe_size
 = 0;

81 
eöå
 = 0;

82 
com∂ëe
 = 0;

83 
¥ev_£nd
 = 
£nd
;

85 
hódî
.
√…s
 = 0;

87 
¥ev
 = 
NULL
;

88 
iov
 = 
NULL
;

92 
˛
 = 
ö
;

93 
˛
 && 
hódî
.
√…s
 < 
IOV_MAX
 && 
£nd
 < 
limô
;

94 
˛
 = cl->
√xt
)

96 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

101 i‡(!
	`ngx_buf_ö_mem‹y
(
˛
->
buf
Ë&& !˛->buf->
ö_fûe
) {

102 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

105 
˛
->
buf
->
ãmp‹¨y
,

106 
˛
->
buf
->
ªcy˛ed
,

107 
˛
->
buf
->
ö_fûe
,

108 
˛
->
buf
->
°¨t
,

109 
˛
->
buf
->
pos
,

110 
˛
->
buf
->
œ°
,

111 
˛
->
buf
->
fûe
,

112 
˛
->
buf
->
fûe_pos
,

113 
˛
->
buf
->
fûe_œ°
);

115 
	`ngx_debug_poöt
();

117  
NGX_CHAIN_ERROR
;

121 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

125 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

127 i‡(
£nd
 + 
size
 > 
limô
) {

128 
size
 = 
limô
 - 
£nd
;

131 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

132 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

135 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

136 i‡(
iov
 =
NULL
) {

137  
NGX_CHAIN_ERROR
;

140 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

141 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

144 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

145 
£nd
 +
size
;

150 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET


151 && 
hódî
.
√…s
 != 0

152 && 
˛


153 && 
˛
->
buf
->
ö_fûe
)

157 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_SET
) {

159 
t˝_nodñay
 = 0;

161 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

162 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

164 
îr
 = 
ngx_î∫o
;

172 i‡(
îr
 !
NGX_EINTR
) {

173 
wev
->
îr‹
 = 1;

174 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

176  
NGX_CHAIN_ERROR
;

180 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_UNSET
;

182 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

187 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

189 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

190 
îr
 = 
ngx_î∫o
;

197 i‡(
îr
 !
NGX_EINTR
) {

198 
wev
->
îr‹
 = 1;

199 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

200 
ngx_t˝_n›ush_n
 " failed");

201  
NGX_CHAIN_ERROR
;

205 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

207 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

215 i‡(
hódî
.
√…s
 =0 && 
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

216 
fûe
 = 
˛
->
buf
;

221 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

223 i‡(
£nd
 + 
size
 > 
limô
) {

224 
size
 = 
limô
 - 
£nd
;

226 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

227 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

229 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

230 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

234 
fûe_size
 +(
size_t
Ë
size
;

235 
£nd
 +
size
;

236 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

237 
˛
 = cl->
√xt
;

239 } 
˛


240 && 
˛
->
buf
->
ö_fûe


241 && 
£nd
 < 
limô


242 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

243 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

246 i‡(
fûe
) {

248 i‡(
fûe_size
 == 0) {

249 
	`ngx_debug_poöt
();

250  
NGX_CHAIN_ERROR
;

253 #i‡(
NGX_HAVE_SENDFILE64
)

254 
off£t
 = 
fûe
->
fûe_pos
;

256 
off£t
 = (
öt32_t
Ë
fûe
->
fûe_pos
;

259 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

260 "£ndfûe: @%O %uz", 
fûe
->
fûe_pos
, 
fûe_size
);

262 
rc
 = 
	`£ndfûe
(
c
->
fd
, 
fûe
->fûe->fd, &
off£t
, 
fûe_size
);

264 i‡(
rc
 == -1) {

265 
îr
 = 
ngx_î∫o
;

267 
îr
) {

268 
NGX_EAGAIN
:

271 
NGX_EINTR
:

272 
eöå
 = 1;

276 
wev
->
îr‹
 = 1;

277 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

278  
NGX_CHAIN_ERROR
;

281 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

285 
£¡
 = 
rc
 > 0 ?Ñc : 0;

287 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

289 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
);

292 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

294 i‡(
rc
 == -1) {

295 
îr
 = 
ngx_î∫o
;

297 
îr
) {

298 
NGX_EAGAIN
:

301 
NGX_EINTR
:

302 
eöå
 = 1;

306 
wev
->
îr‹
 = 1;

307 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

308  
NGX_CHAIN_ERROR
;

311 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

315 
£¡
 = 
rc
 > 0 ?Ñc : 0;

317 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "wrôev: %O", 
£¡
);

320 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

321 
com∂ëe
 = 1;

324 
c
->
£¡
 += sent;

326 
˛
 = 
ö
; cl; c»˛->
√xt
) {

328 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

332 i‡(
£¡
 == 0) {

336 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

338 i‡(
£¡
 >
size
) {

339 
£¡
 -
size
;

341 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

342 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

345 i‡(
˛
->
buf
->
ö_fûe
) {

346 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

352 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

353 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

356 i‡(
˛
->
buf
->
ö_fûe
) {

357 
˛
->
buf
->
fûe_pos
 +
£¡
;

363 i‡(
eöå
) {

367 i‡(!
com∂ëe
) {

368 
wev
->
ªady
 = 0;

369  
˛
;

372 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

373  
˛
;

376 
ö
 = 
˛
;

378 
	}
}

	@src/os/unix/ngx_os.h

8 #i‚de‡
_NGX_OS_H_INCLUDED_


9 
	#_NGX_OS_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_IO_SENDFILE
 1

	)

19 
	$ssize_t
 (*
	tngx_ªcv_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

20 
	$ssize_t
 (*
	tngx_ªcv_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
);

21 
	$ssize_t
 (*
	tngx_£nd_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

22 
ngx_chaö_t
 *(*
	tngx_£nd_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

23 
	toff_t
 
	tlimô
);

26 
ngx_ªcv_±
 
ªcv
;

27 
ngx_ªcv_chaö_±
 
ªcv_chaö
;

28 
ngx_ªcv_±
 
udp_ªcv
;

29 
ngx_£nd_±
 
£nd
;

30 
ngx_£nd_chaö_±
 
£nd_chaö
;

31 
ngx_uöt_t
 
Êags
;

32 } 
	tngx_os_io_t
;

35 
	`ngx_debug_öô
();

36 
ngx_öt_t
 
	`ngx_os_öô
(
ngx_log_t
 *
log
);

37 
	`ngx_os_°©us
(
ngx_log_t
 *
log
);

38 
ngx_öt_t
 
	`ngx_os_•ecific_öô
(
ngx_log_t
 *
log
);

39 
	`ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
);

40 
ngx_öt_t
 
	`ngx_d´m⁄
(
ngx_log_t
 *
log
);

41 
ngx_öt_t
 
	`ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
,Çgx_öt_à
pid
);

44 
ssize_t
 
	`ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

45 
ssize_t
 
	`ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
íåy
);

46 
ssize_t
 
	`ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

47 
ssize_t
 
	`ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

48 
ngx_chaö_t
 *
	`ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

49 
off_t
 
limô
);

51 #i‡(
NGX_HAVE_AIO
)

52 
ssize_t
 
	`ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

53 
ssize_t
 
	`ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
);

54 
ssize_t
 
	`ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

55 
ngx_chaö_t
 *
	`ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

56 
off_t
 
limô
);

60 
ngx_os_io_t
 
ngx_os_io
;

61 
ngx_öt_t
 
ngx_n˝u
;

62 
ngx_öt_t
 
ngx_max_sockës
;

63 
ngx_uöt_t
 
ngx_öhîôed_n⁄blockög
;

64 
ngx_uöt_t
 
ngx_t˝_nodñay_™d_t˝_n›ush
;

67 #i‡(
NGX_FREEBSD
)

68 
	~<ngx_‰ìbsd.h
>

71 #ñi‡(
NGX_LINUX
)

72 
	~<ngx_löux.h
>

75 #ñi‡(
NGX_SOLARIS
)

76 
	~<ngx_sﬁ¨is.h
>

79 #ñi‡(
NGX_DARWIN
)

80 
	~<ngx_d¨wö.h
>

	@src/os/unix/ngx_posix_config.h

8 #i‚de‡
_NGX_POSIX_CONFIG_H_INCLUDED_


9 
	#_NGX_POSIX_CONFIG_H_INCLUDED_


	)

12 #i‡(
NGX_HPUX
)

13 
	#_XOPEN_SOURCE


	)

14 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

18 #i‡(
NGX_TRU64
)

19 
	#_REENTRANT


	)

23 #ifde‡
__CYGWIN__


24 
	#timez⁄ev¨


	)

25 
	#NGX_BROKEN_SCM_RIGHTS
 1

	)

29 
	~<sys/ty≥s.h
>

30 
	~<sys/time.h
>

31 #i‡(
NGX_HAVE_UNISTD_H
)

32 
	~<uni°d.h
>

34 #i‡(
NGX_HAVE_INTTYPES_H
)

35 
	~<öây≥s.h
>

37 
	~<°d¨g.h
>

38 
	~<°ddef.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<î∫o.h
>

42 
	~<°rög.h
>

43 
	~<sig«l.h
>

44 
	~<pwd.h
>

45 
	~<gΩ.h
>

46 
	~<dúít.h
>

47 
	~<glob.h
>

48 #i‡(
NGX_HAVE_SYS_PARAM_H
)

49 
	~<sys/∑øm.h
>

51 #i‡(
NGX_HAVE_SYS_MOUNT_H
)

52 
	~<sys/mou¡.h
>

54 #i‡(
NGX_HAVE_SYS_STATVFS_H
)

55 
	~<sys/°©vfs.h
>

58 #i‡(
NGX_HAVE_SYS_FILIO_H
)

59 
	~<sys/fûio.h
>

61 
	~<sys/io˘l.h
>

63 
	~<sys/uio.h
>

64 
	~<sys/°©.h
>

65 
	~<f˙é.h
>

67 
	~<sys/waô.h
>

68 
	~<sys/mm™.h
>

69 
	~<sys/ªsour˚.h
>

70 
	~<sched.h
>

72 
	~<sys/sockë.h
>

73 
	~<√töë/ö.h
>

74 
	~<√töë/t˝.h
>

75 
	~<¨∑/öë.h
>

76 
	~<√tdb.h
>

77 
	~<sys/un.h
>

79 #i‡(
NGX_HAVE_LIMITS_H
)

80 
	~<limôs.h
>

83 #ifde‡
__CYGWIN__


84 
	~<mÆloc.h
>

87 #i‡(
NGX_HAVE_CRYPT_H
)

88 
	~<¸y±.h
>

92 #i‚de‡
IOV_MAX


93 
	#IOV_MAX
 16

	)

97 
	~<ngx_auto_c⁄fig.h
>

100 #i‡(
NGX_HAVE_POSIX_SEM
)

101 
	~<£m≠h‹e.h
>

105 #i‡(
NGX_HAVE_POLL
)

106 
	~<pﬁl.h
>

110 #i‡(
NGX_HAVE_KQUEUE
)

111 
	~<sys/evít.h
>

115 #i‡(
NGX_HAVE_DEVPOLL
)

116 
	~<sys/io˘l.h
>

117 
	~<sys/devpﬁl.h
>

121 #i‡(
NGX_HAVE_FILE_AIO
)

122 
	~<aio.h
>

123 
aiocb
 
	tngx_aiocb_t
;

127 
	#NGX_LISTEN_BACKLOG
 511

	)

130 #i‡(
__FªeBSD__
Ë&& (
__FªeBSD_vîsi⁄
 < 400017)

132 
	~<sys/∑øm.h
>

138 #unde‡
CMSG_SPACE


139 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

141 #unde‡
CMSG_LEN


142 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

144 #unde‡
CMSG_DATA


145 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

150 **
ívú⁄
;

	@src/os/unix/ngx_posix_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
	gngx_n˝u
;

14 
ngx_öt_t
 
	gngx_max_sockës
;

15 
ngx_uöt_t
 
	gngx_öhîôed_n⁄blockög
;

16 
ngx_uöt_t
 
	gngx_t˝_nodñay_™d_t˝_n›ush
;

19 
æimô
 
	gæmt
;

22 
ngx_os_io_t
 
	gngx_os_io
 = {

23 
ngx_unix_ªcv
,

24 
ngx_ªadv_chaö
,

25 
ngx_udp_unix_ªcv
,

26 
ngx_unix_£nd
,

27 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_öô
(
ngx_log_t
 *
log
)

35 
ngx_uöt_t
 
n
;

37 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

38 i‡(
	`ngx_os_•ecific_öô
(
log
Ë!
NGX_OK
) {

39  
NGX_ERROR
;

43 
	`ngx_öô_£çro˘ôÀ
(
log
);

45 
ngx_∑gesize
 = 
	`gë∑gesize
();

46 
ngx_ˇchñöe_size
 = 
NGX_CPU_CACHE_LINE
;

48 
n
 = 
ngx_∑gesize
;Ç >>1; 
ngx_∑gesize_shi·
++) { }

50 #i‡(
NGX_HAVE_SC_NPROCESSORS_ONLN
)

51 i‡(
ngx_n˝u
 == 0) {

52 
ngx_n˝u
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

56 i‡(
ngx_n˝u
 < 1) {

57 
ngx_n˝u
 = 1;

60 
	`ngx_˝uöfo
();

62 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
î∫o
,

65  
NGX_ERROR
;

68 
ngx_max_sockës
 = (
ngx_öt_t
Ë
æmt
.
æim_cur
;

70 #i‡(
NGX_HAVE_INHERITED_NONBLOCK
 || 
NGX_HAVE_ACCEPT4
)

71 
ngx_öhîôed_n⁄blockög
 = 1;

73 
ngx_öhîôed_n⁄blockög
 = 0;

76 
	`§™dom
(
	`ngx_time
());

78  
NGX_OK
;

79 
	}
}

83 
	$ngx_os_°©us
(
ngx_log_t
 *
log
)

85 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, 
NGINX_VER
);

87 #ifde‡
NGX_COMPILER


88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "buûàby " 
NGX_COMPILER
);

91 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

92 
	`ngx_os_•ecific_°©us
(
log
);

95 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

97 
æmt
.
æim_cur
,Ñlmt.
æim_max
);

98 
	}
}

101 
ngx_öt_t


102 
	$ngx_posix_po°_c⁄f_öô
(
ngx_log_t
 *
log
)

104 
ngx_fd_t
 
µ
[2];

106 i‡(
	`pùe
(
µ
) == -1) {

107 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "pipe() failed");

108  
NGX_ERROR
;

111 i‡(
	`dup2
(
µ
[1], 
STDERR_FILENO
) == -1) {

112 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "dup2(STDERR) failed");

113  
NGX_ERROR
;

116 i‡(
µ
[1] > 
STDERR_FILENO
) {

117 i‡(
	`˛o£
(
µ
[1]) == -1) {

118 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "close() failed");

119  
NGX_ERROR
;

123  
NGX_OK
;

124 
	}
}

	@src/os/unix/ngx_process.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

15 
	msigno
;

16 *
	msig«me
;

17 *
	m«me
;

18 (*
	mh™dÀr
)(
	msigno
);

19 } 
	tngx_sig«l_t
;

23 
ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

24 
ngx_sig«l_h™dÀr
(
signo
);

25 
ngx_¥o˚ss_gë_°©us
();

28 
	gngx_¨gc
;

29 **
	gngx_¨gv
;

30 **
	gngx_os_¨gv
;

32 
ngx_öt_t
 
	gngx_¥o˚ss_¶Ÿ
;

33 
ngx_sockë_t
 
	gngx_ch™√l
;

34 
ngx_öt_t
 
	gngx_œ°_¥o˚ss
;

35 
ngx_¥o˚ss_t
 
	gngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

38 
ngx_sig«l_t
 
	gsig«ls
[] = {

39 { 
ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

40 "SIG" 
ngx_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

42 
ngx_sig«l_h™dÀr
 },

44 { 
ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
),

45 "SIG" 
ngx_vÆue
(
NGX_REOPEN_SIGNAL
),

47 
ngx_sig«l_h™dÀr
 },

49 { 
ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
),

50 "SIG" 
ngx_vÆue
(
NGX_NOACCEPT_SIGNAL
),

52 
ngx_sig«l_h™dÀr
 },

54 { 
ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
),

55 "SIG" 
ngx_vÆue
(
NGX_TERMINATE_SIGNAL
),

57 
ngx_sig«l_h™dÀr
 },

59 { 
ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

60 "SIG" 
ngx_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

62 
ngx_sig«l_h™dÀr
 },

64 { 
ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

65 "SIG" 
ngx_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

67 
ngx_sig«l_h™dÀr
 },

69 { 
SIGALRM
, "SIGALRM", "", 
ngx_sig«l_h™dÀr
 },

71 { 
SIGINT
, "SIGINT", "", 
ngx_sig«l_h™dÀr
 },

73 { 
SIGIO
, "SIGIO", "", 
ngx_sig«l_h™dÀr
 },

75 { 
SIGCHLD
, "SIGCHLD", "", 
ngx_sig«l_h™dÀr
 },

77 { 
SIGSYS
, "SIGSYS, SIG_IGN", "", 
SIG_IGN
 },

79 { 
SIGPIPE
, "SIGPIPE, SIG_IGN", "", 
SIG_IGN
 },

81 { 0, 
NULL
, "", NULL }

85 
ngx_pid_t


86 
	$ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
,

87 *
«me
, 
ngx_öt_t
 
ª•awn
)

89 
u_l⁄g
 
⁄
;

90 
ngx_pid_t
 
pid
;

91 
ngx_öt_t
 
s
;

93 i‡(
ª•awn
 >= 0) {

94 
s
 = 
ª•awn
;

97 
s
 = 0; s < 
ngx_œ°_¥o˚ss
; s++) {

98 i‡(
ngx_¥o˚s£s
[
s
].
pid
 == -1) {

103 i‡(
s
 =
NGX_MAX_PROCESSES
) {

104 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

106 
NGX_MAX_PROCESSES
);

107  
NGX_INVALID_PID
;

112 i‡(
ª•awn
 !
NGX_PROCESS_DETACHED
) {

116 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ngx_¥o˚s£s
[
s
].
ch™√l
) == -1)

118 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

119 "sockë∑ú(ËÁûed whûê•awnög \"%s\"", 
«me
);

120  
NGX_INVALID_PID
;

123 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

125 
ngx_¥o˚s£s
[
s
].
ch™√l
[0],

126 
ngx_¥o˚s£s
[
s
].
ch™√l
[1]);

128 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0]) == -1) {

129 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

130 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

131 
«me
);

132 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

133  
NGX_INVALID_PID
;

136 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1]) == -1) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

138 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

139 
«me
);

140 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

141  
NGX_INVALID_PID
;

144 
⁄
 = 1;

145 i‡(
	`io˘l
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
FIOASYNC
, &
⁄
) == -1) {

146 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

147 "io˘l(FIOASYNCËÁûed whûê•awnög \"%s\"", 
«me
);

148 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

149  
NGX_INVALID_PID
;

152 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETOWN
, 
ngx_pid
) == -1) {

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

154 "f˙é(F_SETOWNËÁûed whûê•awnög \"%s\"", 
«me
);

155 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

156  
NGX_INVALID_PID
;

159 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

160 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

162 
«me
);

163 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

164  
NGX_INVALID_PID
;

167 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

168 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

170 
«me
);

171 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

172  
NGX_INVALID_PID
;

175 
ngx_ch™√l
 = 
ngx_¥o˚s£s
[
s
].
ch™√l
[1];

178 
ngx_¥o˚s£s
[
s
].
ch™√l
[0] = -1;

179 
ngx_¥o˚s£s
[
s
].
ch™√l
[1] = -1;

182 
ngx_¥o˚ss_¶Ÿ
 = 
s
;

185 
pid
 = 
	`f‹k
();

187 
pid
) {

190 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

191 "f‹k(ËÁûed whûê•awnög \"%s\"", 
«me
);

192 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

193  
NGX_INVALID_PID
;

196 
ngx_pid
 = 
	`ngx_gëpid
();

197 
	`¥oc
(
cy˛e
, 
d©a
);

204 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "°¨à%†%P", 
«me
, 
pid
);

206 
ngx_¥o˚s£s
[
s
].
pid
 =Öid;

207 
ngx_¥o˚s£s
[
s
].
exôed
 = 0;

209 i‡(
ª•awn
 >= 0) {

210  
pid
;

213 
ngx_¥o˚s£s
[
s
].
¥oc
 =Öroc;

214 
ngx_¥o˚s£s
[
s
].
d©a
 = data;

215 
ngx_¥o˚s£s
[
s
].
«me
 =Çame;

216 
ngx_¥o˚s£s
[
s
].
exôög
 = 0;

218 
ª•awn
) {

220 
NGX_PROCESS_NORESPAWN
:

221 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

222 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

223 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

226 
NGX_PROCESS_JUST_SPAWN
:

227 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

228 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

229 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

232 
NGX_PROCESS_RESPAWN
:

233 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

234 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

235 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

238 
NGX_PROCESS_JUST_RESPAWN
:

239 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

240 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

241 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

244 
NGX_PROCESS_DETACHED
:

245 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

246 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

247 
ngx_¥o˚s£s
[
s
].
dëached
 = 1;

251 i‡(
s
 =
ngx_œ°_¥o˚ss
) {

252 
ngx_œ°_¥o˚ss
++;

255  
pid
;

256 
	}
}

259 
ngx_pid_t


260 
	$ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
)

262  
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_execuã_¥oc
, 
˘x
, ctx->
«me
,

263 
NGX_PROCESS_DETACHED
);

264 
	}
}

268 
	$ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

270 
ngx_exec_˘x_t
 *
˘x
 = 
d©a
;

272 i‡(
	`execve
(
˘x
->
∑th
, ctx->
¨gv
, ctx->
ívp
) == -1) {

273 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

275 
˘x
->
«me
, ctx->
∑th
);

278 
	`exô
(1);

279 
	}
}

282 
ngx_öt_t


283 
	$ngx_öô_sig«ls
(
ngx_log_t
 *
log
)

285 
ngx_sig«l_t
 *
sig
;

286 
siga˘i⁄
 
ß
;

288 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

289 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

290 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

291 
	`sigem±y£t
(&
ß
.
ß_mask
);

292 i‡(
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
) == -1) {

293 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

294 "siga˘i⁄(%sËÁûed", 
sig
->
sig«me
);

295  
NGX_ERROR
;

299  
NGX_OK
;

300 
	}
}

304 
	$ngx_sig«l_h™dÀr
(
signo
)

306 *
a˘i⁄
;

307 
ngx_öt_t
 
ign‹e
;

308 
ngx_îr_t
 
îr
;

309 
ngx_sig«l_t
 *
sig
;

311 
ign‹e
 = 0;

313 
îr
 = 
ngx_î∫o
;

315 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

316 i‡(
sig
->
signo
 == signo) {

321 
	`ngx_time_sigß„_upd©e
();

323 
a˘i⁄
 = "";

325 
ngx_¥o˚ss
) {

327 
NGX_PROCESS_MASTER
:

328 
NGX_PROCESS_SINGLE
:

329 
signo
) {

331 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

332 
ngx_quô
 = 1;

333 
a˘i⁄
 = ", shutting down";

336 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

337 
SIGINT
:

338 
ngx_ãrmö©e
 = 1;

339 
a˘i⁄
 = ",Éxiting";

342 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

343 i‡(
ngx_d´m⁄ized
) {

344 
ngx_nﬂc˚±
 = 1;

345 
a˘i⁄
 = ", stopáccepting connections";

349 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

350 
ngx_ªc⁄figuª
 = 1;

351 
a˘i⁄
 = ",Ñeconfiguring";

354 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

355 
ngx_ª›í
 = 1;

356 
a˘i⁄
 = ",ÑeopeningÜogs";

359 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

360 i‡(
	`gëµid
(Ë> 1 || 
ngx_√w_bö¨y
 > 0) {

369 
a˘i⁄
 = ", ignoring";

370 
ign‹e
 = 1;

374 
ngx_ch™ge_bö¨y
 = 1;

375 
a˘i⁄
 = ", changing binary";

378 
SIGALRM
:

379 
ngx_sigÆrm
 = 1;

382 
SIGIO
:

383 
ngx_sigio
 = 1;

386 
SIGCHLD
:

387 
ngx_ª≠
 = 1;

393 
NGX_PROCESS_WORKER
:

394 
NGX_PROCESS_HELPER
:

395 
signo
) {

397 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

398 i‡(!
ngx_d´m⁄ized
) {

401 
ngx_debug_quô
 = 1;

402 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

403 
ngx_quô
 = 1;

404 
a˘i⁄
 = ", shutting down";

407 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

408 
SIGINT
:

409 
ngx_ãrmö©e
 = 1;

410 
a˘i⁄
 = ",Éxiting";

413 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

414 
ngx_ª›í
 = 1;

415 
a˘i⁄
 = ",ÑeopeningÜogs";

418 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

419 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

420 
SIGIO
:

421 
a˘i⁄
 = ", ignoring";

428 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

429 "sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
, 
a˘i⁄
);

431 i‡(
ign‹e
) {

432 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 0,

438 i‡(
signo
 =
SIGCHLD
) {

439 
	`ngx_¥o˚ss_gë_°©us
();

442 
	`ngx_£t_î∫o
(
îr
);

443 
	}
}

447 
	$ngx_¥o˚ss_gë_°©us
()

449 
°©us
;

450 *
¥o˚ss
;

451 
ngx_pid_t
 
pid
;

452 
ngx_îr_t
 
îr
;

453 
ngx_öt_t
 
i
;

454 
ngx_uöt_t
 
⁄e
;

456 
⁄e
 = 0;

459 
pid
 = 
	`waôpid
(-1, &
°©us
, 
WNOHANG
);

461 i‡(
pid
 == 0) {

465 i‡(
pid
 == -1) {

466 
îr
 = 
ngx_î∫o
;

468 i‡(
îr
 =
NGX_EINTR
) {

472 i‡(
îr
 =
NGX_ECHILD
 && 
⁄e
) {

476 #i‡(
NGX_SOLARIS
 || 
NGX_FREEBSD
)

487 i‡(
îr
 =
NGX_ECHILD
) {

488 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ngx_cy˛e
->
log
, 
îr
,

495 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

501 i‡(
ngx_ac˚±_muãx_±r
) {

508 
	`ngx_©omic_cmp_£t
(
ngx_ac˚±_muãx_±r
, 
pid
, 0);

512 
⁄e
 = 1;

513 
¥o˚ss
 = "unknownÖrocess";

515 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

516 i‡(
ngx_¥o˚s£s
[
i
].
pid
 ==Öid) {

517 
ngx_¥o˚s£s
[
i
].
°©us
 = status;

518 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

519 
¥o˚ss
 = 
ngx_¥o˚s£s
[
i
].
«me
;

524 i‡(
	`WTERMSIG
(
°©us
)) {

525 #ifde‡
WCOREDUMP


526 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

528 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
),

529 
	`WCOREDUMP
(
°©us
) ? " (core dumped)" : "");

531 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

533 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
));

537 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

539 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

542 i‡(
	`WEXITSTATUS
(
°©us
Ë=2 && 
ngx_¥o˚s£s
[
i
].
ª•awn
) {

543 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

546 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

547 
ngx_¥o˚s£s
[
i
].
ª•awn
 = 0;

550 
	}
}

554 
	$ngx_debug_poöt
()

556 
ngx_c‹e_c⁄f_t
 *
ccf
;

558 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

559 
ngx_c‹e_moduÀ
);

561 
ccf
->
debug_poöts
) {

563 
NGX_DEBUG_POINTS_STOP
:

564 
	`øi£
(
SIGSTOP
);

567 
NGX_DEBUG_POINTS_ABORT
:

568 
	`ngx_ab‹t
();

570 
	}
}

573 
ngx_öt_t


574 
	$ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
«me
, 
ngx_öt_t
 
pid
)

576 
ngx_sig«l_t
 *
sig
;

578 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

579 i‡(
	`ngx_°rcmp
(
«me
, 
sig
->name) == 0) {

580 i‡(
	`kûl
(
pid
, 
sig
->
signo
) != -1) {

584 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

585 "kûl(%P, %dËÁûed", 
pid
, 
sig
->
signo
);

590 
	}
}

	@src/os/unix/ngx_process.h

8 #i‚de‡
_NGX_PROCESS_H_INCLUDED_


9 
	#_NGX_PROCESS_H_INCLUDED_


	)

12 
	~<ngx_£çro˘ôÀ.h
>

15 
pid_t
 
	tngx_pid_t
;

17 
	#NGX_INVALID_PID
 -1

	)

19 (*
	tngx_•awn_¥oc_±
Ë(
	tngx_cy˛e_t
 *
	tcy˛e
, *
	td©a
);

22 
ngx_pid_t
 
pid
;

23 
°©us
;

24 
ngx_sockë_t
 
ch™√l
[2];

26 
ngx_•awn_¥oc_±
 
¥oc
;

27 *
d©a
;

28 *
«me
;

30 
ª•awn
:1;

31 
ju°_•awn
:1;

32 
dëached
:1;

33 
exôög
:1;

34 
exôed
:1;

35 } 
	tngx_¥o˚ss_t
;

39 *
∑th
;

40 *
«me
;

41 *c⁄° *
¨gv
;

42 *c⁄° *
ívp
;

43 } 
	tngx_exec_˘x_t
;

46 
	#NGX_MAX_PROCESSES
 1024

	)

48 
	#NGX_PROCESS_NORESPAWN
 -1

	)

49 
	#NGX_PROCESS_JUST_SPAWN
 -2

	)

50 
	#NGX_PROCESS_RESPAWN
 -3

	)

51 
	#NGX_PROCESS_JUST_RESPAWN
 -4

	)

52 
	#NGX_PROCESS_DETACHED
 -5

	)

55 
	#ngx_gëpid
 
gëpid


	)

57 #i‚de‡
ngx_log_pid


58 
	#ngx_log_pid
 
ngx_pid


	)

62 
ngx_pid_t
 
	`ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
,

63 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
, *
«me
, 
ngx_öt_t
 
ª•awn
);

64 
ngx_pid_t
 
	`ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
);

65 
ngx_öt_t
 
	`ngx_öô_sig«ls
(
ngx_log_t
 *
log
);

66 
	`ngx_debug_poöt
();

69 #i‡(
NGX_HAVE_SCHED_YIELD
)

70 
	#ngx_sched_yõld
(Ë
	`sched_yõld
()

	)

72 
	#ngx_sched_yõld
(Ë
	`u¶ìp
(1)

	)

76 
ngx_¨gc
;

77 **
ngx_¨gv
;

78 **
ngx_os_¨gv
;

80 
ngx_pid_t
 
ngx_pid
;

81 
ngx_sockë_t
 
ngx_ch™√l
;

82 
ngx_öt_t
 
ngx_¥o˚ss_¶Ÿ
;

83 
ngx_öt_t
 
ngx_œ°_¥o˚ss
;

84 
ngx_¥o˚ss_t
 
ngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

	@src/os/unix/ngx_process_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

14 
ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,

15 
ngx_öt_t
 
ty≥
);

16 
ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
,

17 
ngx_uöt_t
 
ª•awn
);

18 
ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
);

19 
ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
);

20 
ngx_uöt_t
 
ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

23 
ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
¥i‹ôy
);

24 
ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

25 
ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
);

26 #i‡(
NGX_THREADS
)

27 
ngx_wakeup_w‹kî_thªads
(
ngx_cy˛e_t
 *
cy˛e
);

28 
ngx_thªad_vÆue_t
 
ngx_w‹kî_thªad_cy˛e
(*
d©a
);

30 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

31 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

35 
ngx_uöt_t
 
	gngx_¥o˚ss
;

36 
ngx_pid_t
 
	gngx_pid
;

37 
ngx_uöt_t
 
	gngx_thªaded
;

39 
sig_©omic_t
 
	gngx_ª≠
;

40 
sig_©omic_t
 
	gngx_sigio
;

41 
sig_©omic_t
 
	gngx_sigÆrm
;

42 
sig_©omic_t
 
	gngx_ãrmö©e
;

43 
sig_©omic_t
 
	gngx_quô
;

44 
sig_©omic_t
 
	gngx_debug_quô
;

45 
ngx_uöt_t
 
	gngx_exôög
;

46 
sig_©omic_t
 
	gngx_ªc⁄figuª
;

47 
sig_©omic_t
 
	gngx_ª›í
;

49 
sig_©omic_t
 
	gngx_ch™ge_bö¨y
;

50 
ngx_pid_t
 
	gngx_√w_bö¨y
;

51 
ngx_uöt_t
 
	gngx_öhîôed
;

52 
ngx_uöt_t
 
	gngx_d´m⁄ized
;

54 
sig_©omic_t
 
	gngx_nﬂc˚±
;

55 
ngx_uöt_t
 
	gngx_nﬂc˚±ög
;

56 
ngx_uöt_t
 
	gngx_ª°¨t
;

59 #i‡(
NGX_THREADS
)

60 vﬁ©ûê
ngx_thªad_t
 
	gngx_thªads
[
NGX_MAX_THREADS
];

61 
ngx_öt_t
 
	gngx_thªads_n
;

65 
u_l⁄g
 
	g˝u_afföôy
;

66 
u_ch¨
 
	gma°î_¥o˚ss
[] = "masterÖrocess";

69 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_m™agî_˘x
 = {

70 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
, "cache managerÖrocess", 0

73 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_lﬂdî_˘x
 = {

74 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
, "cacheÜoaderÖrocess", 60000

78 
ngx_cy˛e_t
 
	gngx_exô_cy˛e
;

79 
ngx_log_t
 
	gngx_exô_log
;

80 
ngx_›í_fûe_t
 
	gngx_exô_log_fûe
;

84 
	$ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

86 *
tôÀ
;

87 
u_ch¨
 *
p
;

88 
size_t
 
size
;

89 
ngx_öt_t
 
i
;

90 
ngx_uöt_t
 
n
, 
sigio
;

91 
sig£t_t
 
£t
;

92 
ôimîvÆ
 
ôv
;

93 
ngx_uöt_t
 
live
;

94 
ngx_m£c_t
 
dñay
;

95 
ngx_li°íög_t
 *
ls
;

96 
ngx_c‹e_c⁄f_t
 *
ccf
;

98 
	`sigem±y£t
(&
£t
);

99 
	`sigadd£t
(&
£t
, 
SIGCHLD
);

100 
	`sigadd£t
(&
£t
, 
SIGALRM
);

101 
	`sigadd£t
(&
£t
, 
SIGIO
);

102 
	`sigadd£t
(&
£t
, 
SIGINT
);

103 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

104 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

105 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
));

106 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

107 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

108 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

110 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

111 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

115 
	`sigem±y£t
(&
£t
);

118 
size
 = (
ma°î_¥o˚ss
);

120 
i
 = 0; i < 
ngx_¨gc
; i++) {

121 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

124 
tôÀ
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
size
);

126 
p
 = 
	`ngx_˝ymem
(
tôÀ
, 
ma°î_¥o˚ss
, (master_process) - 1);

127 
i
 = 0; i < 
ngx_¨gc
; i++) {

128 *
p
++ = ' ';

129 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
], 
size
);

132 
	`ngx_£çro˘ôÀ
(
tôÀ
);

135 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

137 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

138 
NGX_PROCESS_RESPAWN
);

139 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

141 
ngx_√w_bö¨y
 = 0;

142 
dñay
 = 0;

143 
sigio
 = 0;

144 
live
 = 1;

147 i‡(
dñay
) {

148 i‡(
ngx_sigÆrm
) {

149 
sigio
 = 0;

150 
dñay
 *= 2;

151 
ngx_sigÆrm
 = 0;

154 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

155 "ãrmö©i⁄ cy˛e: %d", 
dñay
);

157 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 0;

158 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = 0;

159 
ôv
.
ô_vÆue
.
tv_£c
 = 
dñay
 / 1000;

160 
ôv
.
ô_vÆue
.
tv_u£c
 = (
dñay
 % 1000 ) * 1000;

162 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

168 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "sigsuspend");

170 
	`sigsu•íd
(&
£t
);

172 
	`ngx_time_upd©e
();

174 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

175 "wakêup, sigiÿ%i", 
sigio
);

177 i‡(
ngx_ª≠
) {

178 
ngx_ª≠
 = 0;

179 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "reap children");

181 
live
 = 
	`ngx_ª≠_chûdªn
(
cy˛e
);

184 i‡(!
live
 && (
ngx_ãrmö©e
 || 
ngx_quô
)) {

185 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

188 i‡(
ngx_ãrmö©e
) {

189 i‡(
dñay
 == 0) {

190 
dñay
 = 50;

193 i‡(
sigio
) {

194 
sigio
--;

198 
sigio
 = 
ccf
->
w‹kî_¥o˚s£s
 + 2 ;

200 i‡(
dñay
 > 1000) {

201 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
, 
SIGKILL
);

203 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

204 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

210 i‡(
ngx_quô
) {

211 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

212 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

214 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

215 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

216 i‡(
	`ngx_˛o£_sockë
(
ls
[
n
].
fd
) == -1) {

217 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

218 
ngx_˛o£_sockë_n
 " %V failed",

219 &
ls
[
n
].
addr_ãxt
);

222 
cy˛e
->
li°íög
.
√…s
 = 0;

227 i‡(
ngx_ªc⁄figuª
) {

228 
ngx_ªc⁄figuª
 = 0;

230 i‡(
ngx_√w_bö¨y
) {

231 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

232 
NGX_PROCESS_RESPAWN
);

233 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

234 
ngx_nﬂc˚±ög
 = 0;

239 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

241 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

242 i‡(
cy˛e
 =
NULL
) {

243 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

247 
ngx_cy˛e
 = 
cy˛e
;

248 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

249 
ngx_c‹e_moduÀ
);

250 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

251 
NGX_PROCESS_JUST_RESPAWN
);

252 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 1);

253 
live
 = 1;

254 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

255 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

258 i‡(
ngx_ª°¨t
) {

259 
ngx_ª°¨t
 = 0;

260 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

261 
NGX_PROCESS_RESPAWN
);

262 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

263 
live
 = 1;

266 i‡(
ngx_ª›í
) {

267 
ngx_ª›í
 = 0;

268 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

269 
	`ngx_ª›í_fûes
(
cy˛e
, 
ccf
->
u£r
);

270 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

271 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

274 i‡(
ngx_ch™ge_bö¨y
) {

275 
ngx_ch™ge_bö¨y
 = 0;

276 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "changing binary");

277 
ngx_√w_bö¨y
 = 
	`ngx_exec_√w_bö¨y
(
cy˛e
, 
ngx_¨gv
);

280 i‡(
ngx_nﬂc˚±
) {

281 
ngx_nﬂc˚±
 = 0;

282 
ngx_nﬂc˚±ög
 = 1;

283 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

284 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

287 
	}
}

291 
	$ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

293 
ngx_uöt_t
 
i
;

295 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

297 
	`exô
(2);

300 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

301 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

302 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

304 
	`exô
(2);

310 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

312 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

314 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

316 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

317 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

318 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

322 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

325 i‡(
ngx_ªc⁄figuª
) {

326 
ngx_ªc⁄figuª
 = 0;

327 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

329 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

330 i‡(
cy˛e
 =
NULL
) {

331 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

335 
ngx_cy˛e
 = 
cy˛e
;

338 i‡(
ngx_ª›í
) {

339 
ngx_ª›í
 = 0;

340 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

341 
	`ngx_ª›í_fûes
(
cy˛e
, (
ngx_uid_t
) -1);

344 
	}
}

348 
	$ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,Çgx_öt_à
ty≥
)

350 
ngx_öt_t
 
i
;

351 
ngx_ch™√l_t
 
ch
;

353 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "start workerÖrocesses");

355 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

357 
i
 = 0; i < 
n
; i++) {

359 
˝u_afföôy
 = 
	`ngx_gë_˝u_afföôy
(
i
);

361 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_w‹kî_¥o˚ss_cy˛e
, 
NULL
,

362 "w‹kîÖro˚ss", 
ty≥
);

364 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

365 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

366 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

368 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

370 
	}
}

374 
	$ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ª•awn
)

376 
ngx_uöt_t
 
i
, 
m™agî
, 
lﬂdî
;

377 
ngx_∑th_t
 **
∑th
;

378 
ngx_ch™√l_t
 
ch
;

380 
m™agî
 = 0;

381 
lﬂdî
 = 0;

383 
∑th
 = 
ngx_cy˛e
->
∑thes
.
ñts
;

384 
i
 = 0; i < 
ngx_cy˛e
->
∑thes
.
√…s
; i++) {

386 i‡(
∑th
[
i
]->
m™agî
) {

387 
m™agî
 = 1;

390 i‡(
∑th
[
i
]->
lﬂdî
) {

391 
lﬂdî
 = 1;

395 i‡(
m™agî
 == 0) {

399 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

400 &
ngx_ˇche_m™agî_˘x
, "cache managerÖrocess",

401 
ª•awn
 ? 
NGX_PROCESS_JUST_RESPAWN
 : 
NGX_PROCESS_RESPAWN
);

403 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

404 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

405 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

406 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

408 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

410 i‡(
lﬂdî
 == 0) {

414 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

415 &
ngx_ˇche_lﬂdî_˘x
, "cacheÜoaderÖrocess",

416 
ª•awn
 ? 
NGX_PROCESS_JUST_SPAWN
 : 
NGX_PROCESS_NORESPAWN
);

418 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

419 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

420 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

421 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

423 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

424 
	}
}

428 
	$ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
)

430 
ngx_öt_t
 
i
;

432 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

434 i‡(
i
 =
ngx_¥o˚ss_¶Ÿ


435 || 
ngx_¥o˚s£s
[
i
].
pid
 == -1

436 || 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] == -1)

441 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

443 
ch
->
¶Ÿ
, ch->
pid
, ch->
fd
,

444 
i
, 
ngx_¥o˚s£s
[i].
pid
,

445 
ngx_¥o˚s£s
[
i
].
ch™√l
[0]);

449 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

450 
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

452 
	}
}

456 
	$ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
)

458 
ngx_öt_t
 
i
;

459 
ngx_îr_t
 
îr
;

460 
ngx_ch™√l_t
 
ch
;

462 #i‡(
NGX_BROKEN_SCM_RIGHTS
)

464 
ch
.
comm™d
 = 0;

468 
signo
) {

470 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

471 
ch
.
comm™d
 = 
NGX_CMD_QUIT
;

474 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

475 
ch
.
comm™d
 = 
NGX_CMD_TERMINATE
;

478 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

479 
ch
.
comm™d
 = 
NGX_CMD_REOPEN
;

483 
ch
.
comm™d
 = 0;

488 
ch
.
fd
 = -1;

491 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

493 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

495 
i
,

496 
ngx_¥o˚s£s
[
i
].
pid
,

497 
ngx_¥o˚s£s
[
i
].
exôög
,

498 
ngx_¥o˚s£s
[
i
].
exôed
,

499 
ngx_¥o˚s£s
[
i
].
dëached
,

500 
ngx_¥o˚s£s
[
i
].
ª•awn
,

501 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

503 i‡(
ngx_¥o˚s£s
[
i
].
dëached
 ||Çgx_¥o˚s£s[i].
pid
 == -1) {

507 i‡(
ngx_¥o˚s£s
[
i
].
ju°_•awn
) {

508 
ngx_¥o˚s£s
[
i
].
ju°_•awn
 = 0;

512 i‡(
ngx_¥o˚s£s
[
i
].
exôög


513 && 
signo
 =
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
))

518 i‡(
ch
.
comm™d
) {

519 i‡(
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

520 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
)

521 =
NGX_OK
)

523 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

524 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

531 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

532 "kû»(%P, %d)" , 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

534 i‡(
	`kûl
(
ngx_¥o˚s£s
[
i
].
pid
, 
signo
) == -1) {

535 
îr
 = 
ngx_î∫o
;

536 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

537 "kûl(%P, %dËÁûed", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

539 i‡(
îr
 =
NGX_ESRCH
) {

540 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

541 
ngx_¥o˚s£s
[
i
].
exôög
 = 0;

542 
ngx_ª≠
 = 1;

548 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

549 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

552 
	}
}

555 
ngx_uöt_t


556 
	$ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
)

558 
ngx_öt_t
 
i
, 
n
;

559 
ngx_uöt_t
 
live
;

560 
ngx_ch™√l_t
 
ch
;

561 
ngx_c‹e_c⁄f_t
 *
ccf
;

563 
ch
.
comm™d
 = 
NGX_CMD_CLOSE_CHANNEL
;

564 
ch
.
fd
 = -1;

566 
live
 = 0;

567 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

569 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

571 
i
,

572 
ngx_¥o˚s£s
[
i
].
pid
,

573 
ngx_¥o˚s£s
[
i
].
exôög
,

574 
ngx_¥o˚s£s
[
i
].
exôed
,

575 
ngx_¥o˚s£s
[
i
].
dëached
,

576 
ngx_¥o˚s£s
[
i
].
ª•awn
,

577 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

579 i‡(
ngx_¥o˚s£s
[
i
].
pid
 == -1) {

583 i‡(
ngx_¥o˚s£s
[
i
].
exôed
) {

585 i‡(!
ngx_¥o˚s£s
[
i
].
dëached
) {

586 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
, 
cy˛e
->
log
);

588 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] = -1;

589 
ngx_¥o˚s£s
[
i
].
ch™√l
[1] = -1;

591 
ch
.
pid
 = 
ngx_¥o˚s£s
[
i
].pid;

592 
ch
.
¶Ÿ
 = 
i
;

594 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

595 i‡(
ngx_¥o˚s£s
[
n
].
exôed


596 || 
ngx_¥o˚s£s
[
n
].
pid
 == -1

597 || 
ngx_¥o˚s£s
[
n
].
ch™√l
[0] == -1)

602 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

604 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[
n
].pid);

608 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
n
].
ch™√l
[0],

609 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

613 i‡(
ngx_¥o˚s£s
[
i
].
ª•awn


614 && !
ngx_¥o˚s£s
[
i
].
exôög


615 && !
ngx_ãrmö©e


616 && !
ngx_quô
)

618 i‡(
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_¥o˚s£s
[
i
].
¥oc
,

619 
ngx_¥o˚s£s
[
i
].
d©a
,

620 
ngx_¥o˚s£s
[
i
].
«me
, i)

621 =
NGX_INVALID_PID
)

623 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

625 
ngx_¥o˚s£s
[
i
].
«me
);

630 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

631 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

632 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

633 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

635 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

637 
live
 = 1;

642 i‡(
ngx_¥o˚s£s
[
i
].
pid
 =
ngx_√w_bö¨y
) {

644 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

645 
ngx_c‹e_moduÀ
);

647 i‡(
	`ngx_ª«me_fûe
((*Ë
ccf
->
ﬁdpid
.
d©a
,

648 (*Ë
ccf
->
pid
.
d©a
)

649 !
NGX_OK
)

651 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

652 
ngx_ª«me_fûe_n
 " %s backÅo %s failed "

654 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
ngx_¨gv
[0]);

657 
ngx_√w_bö¨y
 = 0;

658 i‡(
ngx_nﬂc˚±ög
) {

659 
ngx_ª°¨t
 = 1;

660 
ngx_nﬂc˚±ög
 = 0;

664 i‡(
i
 =
ngx_œ°_¥o˚ss
 - 1) {

665 
ngx_œ°_¥o˚ss
--;

668 
ngx_¥o˚s£s
[
i
].
pid
 = -1;

671 } i‡(
ngx_¥o˚s£s
[
i
].
exôög
 || !ngx_¥o˚s£s[i].
dëached
) {

672 
live
 = 1;

676  
live
;

677 
	}
}

681 
	$ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

683 
ngx_uöt_t
 
i
;

685 
	`ngx_dñëe_pidfûe
(
cy˛e
);

687 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exit");

689 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

690 i‡(
ngx_moduÀs
[
i
]->
exô_ma°î
) {

691 
ngx_moduÀs
[
i
]->
	`exô_ma°î
(
cy˛e
);

695 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

704 
ngx_exô_log_fûe
.
fd
 = 
ngx_cy˛e
->
log
->
fûe
->fd;

706 
ngx_exô_log
 = *
ngx_cy˛e
->
log
;

707 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

709 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

710 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

712 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

714 
	`exô
(0);

715 
	}
}

719 
	$ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

721 
ngx_uöt_t
 
i
;

722 
ngx_c⁄√˘i⁄_t
 *
c
;

724 
ngx_¥o˚ss
 = 
NGX_PROCESS_WORKER
;

726 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, 1);

728 
	`ngx_£çro˘ôÀ
("workerÖrocess");

730 #i‡(
NGX_THREADS
)

732 
ngx_öt_t
 
n
;

733 
ngx_îr_t
 
îr
;

734 
ngx_c‹e_c⁄f_t
 *
ccf
;

736 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

738 i‡(
ngx_thªads_n
) {

739 i‡(
	`ngx_öô_thªads
(
ngx_thªads_n
, 
ccf
->
thªad_°ack_size
, 
cy˛e
)

740 =
NGX_ERROR
)

743 
	`exô
(2);

746 
îr
 = 
	`ngx_thªad_key_¸óã
(&
ngx_c‹e_és_key
);

747 i‡(
îr
 != 0) {

748 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

749 
ngx_thªad_key_¸óã_n
 " failed");

751 
	`exô
(2);

754 
n
 = 0;Ç < 
ngx_thªads_n
;Ç++) {

756 
ngx_thªads
[
n
].
cv
 = 
	`ngx_c⁄d_öô
(
cy˛e
->
log
);

758 i‡(
ngx_thªads
[
n
].
cv
 =
NULL
) {

760 
	`exô
(2);

763 i‡(
	`ngx_¸óã_thªad
((
ngx_tid_t
 *Ë&
ngx_thªads
[
n
].
tid
,

764 
ngx_w‹kî_thªad_cy˛e
,

765 (*Ë&
ngx_thªads
[
n
], 
cy˛e
->
log
)

769 
	`exô
(2);

778 i‡(
ngx_exôög
) {

780 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

782 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

786 i‡(
c
[
i
].
fd
 !-1 && c[i].
idÀ
) {

787 
c
[
i
].
˛o£
 = 1;

788 
c
[
i
].
ªad
->
	`h™dÀr
(c[i].read);

792 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =ngx_evít_timî_rbåì.
£¡öñ
)

794 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

796 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

800 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

802 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

804 i‡(
ngx_ãrmö©e
) {

805 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

807 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

810 i‡(
ngx_quô
) {

811 
ngx_quô
 = 0;

812 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

814 
	`ngx_£çro˘ôÀ
("workerÖrocess is shutting down");

816 i‡(!
ngx_exôög
) {

817 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

818 
ngx_exôög
 = 1;

822 i‡(
ngx_ª›í
) {

823 
ngx_ª›í
 = 0;

824 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

825 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

828 
	}
}

832 
	$ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
¥i‹ôy
)

834 
sig£t_t
 
£t
;

835 
ngx_öt_t
 
n
;

836 
ngx_uöt_t
 
i
;

837 
æimô
 
æmt
;

838 
ngx_c‹e_c⁄f_t
 *
ccf
;

839 
ngx_li°íög_t
 *
ls
;

841 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

843 
	`exô
(2);

846 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

848 i‡(
¥i‹ôy
 && 
ccf
->priority != 0) {

849 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 
ccf
->
¥i‹ôy
) == -1) {

850 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

851 "£çri‹ôy(%dËÁûed", 
ccf
->
¥i‹ôy
);

855 i‡(
ccf
->
æimô_nofûe
 !
NGX_CONF_UNSET
) {

856 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

857 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

859 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

860 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

862 
ccf
->
æimô_nofûe
);

866 i‡(
ccf
->
æimô_c‹e
 !
NGX_CONF_UNSET
) {

867 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

868 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

870 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
æmt
) == -1) {

871 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

873 
ccf
->
æimô_c‹e
);

877 #ifde‡
RLIMIT_SIGPENDING


878 i‡(
ccf
->
æimô_sig≥ndög
 !
NGX_CONF_UNSET
) {

879 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

880 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

882 i‡(
	`£ålimô
(
RLIMIT_SIGPENDING
, &
æmt
) == -1) {

883 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

885 
ccf
->
æimô_sig≥ndög
);

890 i‡(
	`gëeuid
() == 0) {

891 i‡(
	`£tgid
(
ccf
->
group
) == -1) {

892 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

893 "£tgid(%dËÁûed", 
ccf
->
group
);

895 
	`exô
(2);

898 i‡(
	`öôgroups
(
ccf
->
u£∫ame
, ccf->
group
) == -1) {

899 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

901 
ccf
->
u£∫ame
, ccf->
group
);

904 i‡(
	`£tuid
(
ccf
->
u£r
) == -1) {

905 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

906 "£tuid(%dËÁûed", 
ccf
->
u£r
);

908 
	`exô
(2);

912 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
)

914 i‡(
˝u_afföôy
) {

915 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

916 "sched_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

918 i‡(
	`sched_£èfföôy
(0, (
˝u_afföôy
),

919 (
˝u_£t_t
 *Ë&
˝u_afföôy
)

922 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

923 "sched_£èfföôy(0x%08XlËÁûed", 
˝u_afföôy
);

929 #i‡(
NGX_HAVE_PR_SET_DUMPABLE
)

933 i‡(
	`¥˘l
(
PR_SET_DUMPABLE
, 1, 0, 0, 0) == -1) {

934 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

940 i‡(
ccf
->
w‹kög_dúe˘‹y
.
Àn
) {

941 i‡(
	`chdú
((*Ë
ccf
->
w‹kög_dúe˘‹y
.
d©a
) == -1) {

942 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

943 "chdú(\"%s\"ËÁûed", 
ccf
->
w‹kög_dúe˘‹y
.
d©a
);

945 
	`exô
(2);

949 
	`sigem±y£t
(&
£t
);

951 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
£t
, 
NULL
) == -1) {

952 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

960 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

961 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

962 
ls
[
i
].
¥evious
 = 
NULL
;

965 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

966 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

967 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

969 
	`exô
(2);

974 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

976 i‡(
ngx_¥o˚s£s
[
n
].
pid
 == -1) {

980 i‡(
n
 =
ngx_¥o˚ss_¶Ÿ
) {

984 i‡(
ngx_¥o˚s£s
[
n
].
ch™√l
[1] == -1) {

988 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
n
].
ch™√l
[1]) == -1) {

989 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

994 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0]) == -1) {

995 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1000 
ngx_œ°_¥o˚ss
 = 0;

1003 i‡(
	`ngx_add_ch™√l_evít
(
cy˛e
, 
ngx_ch™√l
, 
NGX_READ_EVENT
,

1004 
ngx_ch™√l_h™dÀr
)

1005 =
NGX_ERROR
)

1008 
	`exô
(2);

1010 
	}
}

1014 
	$ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1016 
ngx_uöt_t
 
i
;

1017 
ngx_c⁄√˘i⁄_t
 *
c
;

1019 #i‡(
NGX_THREADS
)

1020 
ngx_ãrmö©e
 = 1;

1022 
	`ngx_wakeup_w‹kî_thªads
(
cy˛e
);

1025 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1026 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

1027 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

1031 i‡(
ngx_exôög
) {

1032 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

1033 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

1034 i‡(
c
[
i
].
fd
 != -1

1035 && 
c
[
i
].
ªad


1036 && !
c
[
i
].
ªad
->
ac˚±


1037 && !
c
[
i
].
ªad
->
ch™√l


1038 && !
c
[
i
].
ªad
->
ªsﬁvî
)

1040 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

1042 
c
[
i
].
fd
, i);

1043 
ngx_debug_quô
 = 1;

1047 i‡(
ngx_debug_quô
) {

1048 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "aborting");

1049 
	`ngx_debug_poöt
();

1060 
ngx_exô_log_fûe
.
fd
 = 
ngx_cy˛e
->
log
->
fûe
->fd;

1062 
ngx_exô_log
 = *
ngx_cy˛e
->
log
;

1063 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

1065 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

1066 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

1068 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

1070 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0, "exit");

1072 
	`exô
(0);

1073 
	}
}

1077 
	$ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
)

1079 
ngx_öt_t
 
n
;

1080 
ngx_ch™√l_t
 
ch
;

1081 
ngx_c⁄√˘i⁄_t
 *
c
;

1083 i‡(
ev
->
timedout
) {

1084 
ev
->
timedout
 = 0;

1088 
c
 = 
ev
->
d©a
;

1090 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "channel handler");

1094 
n
 = 
	`ngx_ªad_ch™√l
(
c
->
fd
, &
ch
, (
ngx_ch™√l_t
), 
ev
->
log
);

1096 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "ch™√l: %i", 
n
);

1098 i‡(
n
 =
NGX_ERROR
) {

1100 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

1101 
	`ngx_dñ_c⁄n
(
c
, 0);

1104 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

1108 i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

1109 i‡(
	`ngx_add_evít
(
ev
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

1114 i‡(
n
 =
NGX_AGAIN
) {

1118 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1119 "ch™√»comm™d: %d", 
ch
.
comm™d
);

1121 
ch
.
comm™d
) {

1123 
NGX_CMD_QUIT
:

1124 
ngx_quô
 = 1;

1127 
NGX_CMD_TERMINATE
:

1128 
ngx_ãrmö©e
 = 1;

1131 
NGX_CMD_REOPEN
:

1132 
ngx_ª›í
 = 1;

1135 
NGX_CMD_OPEN_CHANNEL
:

1137 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1139 
ch
.
¶Ÿ
, ch.
pid
, ch.
fd
);

1141 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
pid
 = ch.pid;

1142 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = ch.
fd
;

1145 
NGX_CMD_CLOSE_CHANNEL
:

1147 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1149 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[ch.slot].pid,

1150 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]);

1152 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]) == -1) {

1153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

1157 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = -1;

1161 
	}
}

1164 #i‡(
NGX_THREADS
)

1167 
	$ngx_wakeup_w‹kî_thªads
(
ngx_cy˛e_t
 *
cy˛e
)

1169 
ngx_öt_t
 
i
;

1170 
ngx_uöt_t
 
live
;

1174 
live
 = 0;

1176 
i
 = 0; i < 
ngx_thªads_n
; i++) {

1177 i‡(
ngx_thªads
[
i
].
°©e
 < 
NGX_THREAD_EXIT
) {

1178 i‡(
	`ngx_c⁄d_sig«l
(
ngx_thªads
[
i
].
cv
Ë=
NGX_ERROR
) {

1179 
ngx_thªads
[
i
].
°©e
 = 
NGX_THREAD_DONE
;

1182 
live
 = 1;

1186 i‡(
ngx_thªads
[
i
].
°©e
 =
NGX_THREAD_EXIT
) {

1187 
	`ngx_thªad_joö
(
ngx_thªads
[
i
].
tid
, 
NULL
);

1188 
ngx_thªads
[
i
].
°©e
 = 
NGX_THREAD_DONE
;

1192 i‡(
live
 == 0) {

1193 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1197 
	`ngx_d⁄e_evíts
(
cy˛e
);

1198 
	`ngx_muãx_de°roy
(
ngx_evít_timî_muãx
);

1199 
	`ngx_muãx_de°roy
(
ngx_po°ed_evíts_muãx
);

1204 
	`ngx_sched_yõld
();

1206 
	}
}

1209 
ngx_thªad_vÆue_t


1210 
	$ngx_w‹kî_thªad_cy˛e
(*
d©a
)

1212 
ngx_thªad_t
 *
thr
 = 
d©a
;

1214 
sig£t_t
 
£t
;

1215 
ngx_îr_t
 
îr
;

1216 
ngx_c‹e_és_t
 *
és
;

1217 
ngx_cy˛e_t
 *
cy˛e
;

1219 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1221 
	`sigem±y£t
(&
£t
);

1222 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

1223 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

1224 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

1226 
îr
 = 
	`ngx_thªad_sigmask
(
SIG_BLOCK
, &
£t
, 
NULL
);

1227 i‡(
îr
) {

1228 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

1229 
ngx_thªad_sigmask_n
 " failed");

1230  (
ngx_thªad_vÆue_t
) 1;

1233 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1234 "thªad " 
NGX_TID_T_FMT
 " sèπed", 
	`ngx_thªad_£lf
());

1236 
	`ngx_£âhπôÀ
("workerÅhread");

1238 
és
 = 
	`ngx_ˇŒoc
((
ngx_c‹e_és_t
), 
cy˛e
->
log
);

1239 i‡(
és
 =
NULL
) {

1240  (
ngx_thªad_vÆue_t
) 1;

1243 
îr
 = 
	`ngx_thªad_£t_és
(
ngx_c‹e_és_key
, 
és
);

1244 i‡(
îr
 != 0) {

1245 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

1246 
ngx_thªad_£t_és_n
 " failed");

1247  (
ngx_thªad_vÆue_t
) 1;

1250 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

1253 
thr
->
°©e
 = 
NGX_THREAD_FREE
;

1255 i‡(
	`ngx_c⁄d_waô
(
thr
->
cv
, 
ngx_po°ed_evíts_muãx
Ë=
NGX_ERROR
) {

1256  (
ngx_thªad_vÆue_t
) 1;

1259 i‡(
ngx_ãrmö©e
) {

1260 
thr
->
°©e
 = 
NGX_THREAD_EXIT
;

1262 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

1264 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1265 "thªad " 
NGX_TID_T_FMT
 " is done",

1266 
	`ngx_thªad_£lf
());

1268  (
ngx_thªad_vÆue_t
) 0;

1271 
thr
->
°©e
 = 
NGX_THREAD_BUSY
;

1273 i‡(
	`ngx_evít_thªad_¥o˚ss_po°ed
(
cy˛e
Ë=
NGX_ERROR
) {

1274  (
ngx_thªad_vÆue_t
) 1;

1277 i‡(
	`ngx_evít_thªad_¥o˚ss_po°ed
(
cy˛e
Ë=
NGX_ERROR
) {

1278  (
ngx_thªad_vÆue_t
) 1;

1281 i‡(
ngx_¥o˚ss_ch™ges
) {

1282 i‡(
	`ngx_¥o˚ss_ch™ges
(
cy˛e
, 1Ë=
NGX_ERROR
) {

1283  (
ngx_thªad_vÆue_t
) 1;

1287 
	}
}

1293 
	$ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

1295 
ngx_ˇche_m™agî_˘x_t
 *
˘x
 = 
d©a
;

1297 *
idít
[4];

1298 
ngx_evít_t
 
ev
;

1300 
cy˛e
->
c⁄√˘i⁄_n
 = 512;

1302 
ngx_¥o˚ss
 = 
NGX_PROCESS_HELPER
;

1304 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, 0);

1306 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

1308 
	`ngx_memzîo
(&
ev
, (
ngx_evít_t
));

1309 
ev
.
h™dÀr
 = 
˘x
->handler;

1310 
ev
.
d©a
 = 
idít
;

1311 
ev
.
log
 = 
cy˛e
->log;

1312 
idít
[3] = (*) -1;

1314 
ngx_u£_ac˚±_muãx
 = 0;

1316 
	`ngx_£çro˘ôÀ
(
˘x
->
«me
);

1318 
	`ngx_add_timî
(&
ev
, 
˘x
->
dñay
);

1322 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1323 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

1324 
	`exô
(0);

1327 i‡(
ngx_ª›í
) {

1328 
ngx_ª›í
 = 0;

1329 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

1330 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

1333 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

1335 
	}
}

1339 
	$ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1341 
time_t
 
√xt
, 
n
;

1342 
ngx_uöt_t
 
i
;

1343 
ngx_∑th_t
 **
∑th
;

1345 
√xt
 = 60 * 60;

1347 
∑th
 = 
ngx_cy˛e
->
∑thes
.
ñts
;

1348 
i
 = 0; i < 
ngx_cy˛e
->
∑thes
.
√…s
; i++) {

1350 i‡(
∑th
[
i
]->
m™agî
) {

1351 
n
 = 
∑th
[
i
]->
	`m™agî
’©h[i]->
d©a
);

1353 
√xt
 = (
n
 <=Çext) ?Ç :Çext;

1355 
	`ngx_time_upd©e
();

1359 i‡(
√xt
 == 0) {

1360 
√xt
 = 1;

1363 
	`ngx_add_timî
(
ev
, 
√xt
 * 1000);

1364 
	}
}

1368 
	$ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1370 
ngx_uöt_t
 
i
;

1371 
ngx_∑th_t
 **
∑th
;

1372 
ngx_cy˛e_t
 *
cy˛e
;

1374 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1376 
∑th
 = 
cy˛e
->
∑thes
.
ñts
;

1377 
i
 = 0; i < 
cy˛e
->
∑thes
.
√…s
; i++) {

1379 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1383 i‡(
∑th
[
i
]->
lﬂdî
) {

1384 
∑th
[
i
]->
	`lﬂdî
’©h[i]->
d©a
);

1385 
	`ngx_time_upd©e
();

1389 
	`exô
(0);

1390 
	}
}

	@src/os/unix/ngx_process_cycle.h

8 #i‚de‡
_NGX_PROCESS_CYCLE_H_INCLUDED_


9 
	#_NGX_PROCESS_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_CMD_OPEN_CHANNEL
 1

	)

17 
	#NGX_CMD_CLOSE_CHANNEL
 2

	)

18 
	#NGX_CMD_QUIT
 3

	)

19 
	#NGX_CMD_TERMINATE
 4

	)

20 
	#NGX_CMD_REOPEN
 5

	)

23 
	#NGX_PROCESS_SINGLE
 0

	)

24 
	#NGX_PROCESS_MASTER
 1

	)

25 
	#NGX_PROCESS_SIGNALLER
 2

	)

26 
	#NGX_PROCESS_WORKER
 3

	)

27 
	#NGX_PROCESS_HELPER
 4

	)

31 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

32 *
	m«me
;

33 
ngx_m£c_t
 
	mdñay
;

34 } 
	tngx_ˇche_m™agî_˘x_t
;

37 
ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

41 
ngx_uöt_t
 
ngx_¥o˚ss
;

42 
ngx_pid_t
 
ngx_pid
;

43 
ngx_pid_t
 
ngx_√w_bö¨y
;

44 
ngx_uöt_t
 
ngx_öhîôed
;

45 
ngx_uöt_t
 
ngx_d´m⁄ized
;

46 
ngx_uöt_t
 
ngx_thªaded
;

47 
ngx_uöt_t
 
ngx_exôög
;

49 
sig_©omic_t
 
ngx_ª≠
;

50 
sig_©omic_t
 
ngx_sigio
;

51 
sig_©omic_t
 
ngx_sigÆrm
;

52 
sig_©omic_t
 
ngx_quô
;

53 
sig_©omic_t
 
ngx_debug_quô
;

54 
sig_©omic_t
 
ngx_ãrmö©e
;

55 
sig_©omic_t
 
ngx_nﬂc˚±
;

56 
sig_©omic_t
 
ngx_ªc⁄figuª
;

57 
sig_©omic_t
 
ngx_ª›í
;

58 
sig_©omic_t
 
ngx_ch™ge_bö¨y
;

	@src/os/unix/ngx_pthread_thread.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	g¡hªads
;

13 
ngx_uöt_t
 
	gmax_thªads
;

16 
±hªad_©å_t
 
	gthr_©å
;

19 
ngx_îr_t


20 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
, 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
),

21 *
¨g
, 
ngx_log_t
 *
log
)

23 
îr
;

25 i‡(
¡hªads
 >
max_thªads
) {

26 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

27 "nÿm‹êth™ %uòthªad†ˇ¿bê¸óãd", 
max_thªads
);

28  
NGX_ERROR
;

31 
îr
 = 
	`±hªad_¸óã
(
tid
, &
thr_©å
, 
func
, 
¨g
);

33 i‡(
îr
 != 0) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_create() failed");

35  
îr
;

38 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

39 "thªad i†¸óãd: " 
NGX_TID_T_FMT
, *
tid
);

41 
¡hªads
++;

43  
îr
;

44 
	}
}

47 
ngx_öt_t


48 
	$ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
)

50 
îr
;

52 
max_thªads
 = 
n
;

54 
îr
 = 
	`±hªad_©å_öô
(&
thr_©å
);

56 i‡(
îr
 != 0) {

57 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

59  
NGX_ERROR
;

62 
îr
 = 
	`±hªad_©å_£t°acksize
(&
thr_©å
, 
size
);

64 i‡(
îr
 != 0) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

67  
NGX_ERROR
;

70 
ngx_thªaded
 = 1;

72  
NGX_OK
;

73 
	}
}

76 
ngx_muãx_t
 *

77 
	$ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
)

79 
îr
;

80 
ngx_muãx_t
 *
m
;

82 
m
 = 
	`ngx_Æloc
((
ngx_muãx_t
), 
log
);

83 i‡(
m
 =
NULL
) {

84  
NULL
;

87 
m
->
log
 =Üog;

89 
îr
 = 
	`±hªad_muãx_öô
(&
m
->
muãx
, 
NULL
);

91 i‡(
îr
 != 0) {

92 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

94  
NULL
;

97  
m
;

98 
	}
}

102 
	$ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
)

104 
îr
;

106 
îr
 = 
	`±hªad_muãx_de°roy
(&
m
->
muãx
);

108 i‡(
îr
 != 0) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

110 "±hªad_muãx_de°roy(%pËÁûed", 
m
);

113 
	`ngx_‰ì
(
m
);

114 
	}
}

118 
	$ngx_muãx_lock
(
ngx_muãx_t
 *
m
)

120 
îr
;

122 i‡(!
ngx_thªaded
) {

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "lock mutex %p", m);

128 
îr
 = 
	`±hªad_muãx_lock
(&
m
->
muãx
);

130 i‡(
îr
 != 0) {

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

132 "±hªad_muãx_lock(%pËÁûed", 
m
);

133 
	`ngx_ab‹t
();

136 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

139 
	}
}

142 
ngx_öt_t


143 
	$ngx_muãx_åylock
(
ngx_muãx_t
 *
m
)

145 
îr
;

147 i‡(!
ngx_thªaded
) {

148  
NGX_OK
;

151 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "tryÜock mutex %p", m);

153 
îr
 = 
	`±hªad_muãx_åylock
(&
m
->
muãx
);

155 i‡(
îr
 =
NGX_EBUSY
) {

156  
NGX_AGAIN
;

159 i‡(
îr
 != 0) {

160 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

161 "±hªad_muãx_åylock(%pËÁûed", 
m
);

162 
	`ngx_ab‹t
();

165 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

167  
NGX_OK
;

168 
	}
}

172 
	$ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
)

174 
îr
;

176 i‡(!
ngx_thªaded
) {

180 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "unlock mutex %p", m);

182 
îr
 = 
	`±hªad_muãx_u∆ock
(&
m
->
muãx
);

184 i‡(
îr
 != 0) {

185 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

186 "±hªad_muãx_u∆ock(%pËÁûed", 
m
);

187 
	`ngx_ab‹t
();

190 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p is unlocked", m);

193 
	}
}

196 
ngx_c⁄d_t
 *

197 
	$ngx_c⁄d_öô
(
ngx_log_t
 *
log
)

199 
îr
;

200 
ngx_c⁄d_t
 *
cv
;

202 
cv
 = 
	`ngx_Æloc
((
ngx_c⁄d_t
), 
log
);

203 i‡(
cv
 =
NULL
) {

204  
NULL
;

207 
cv
->
log
 =Üog;

209 
îr
 = 
	`±hªad_c⁄d_öô
(&
cv
->
c⁄d
, 
NULL
);

211 i‡(
îr
 != 0) {

212 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

214  
NULL
;

217  
cv
;

218 
	}
}

222 
	$ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
)

224 
îr
;

226 
îr
 = 
	`±hªad_c⁄d_de°roy
(&
cv
->
c⁄d
);

228 i‡(
îr
 != 0) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

230 "±hªad_c⁄d_de°roy(%pËÁûed", 
cv
);

233 
	`ngx_‰ì
(
cv
);

234 
	}
}

237 
ngx_öt_t


238 
	$ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
)

240 
îr
;

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p wait", cv);

244 
îr
 = 
	`±hªad_c⁄d_waô
(&
cv
->
c⁄d
, &
m
->
muãx
);

246 i‡(
îr
 != 0) {

247 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

248 "±hªad_c⁄d_waô(%pËÁûed", 
cv
);

249  
NGX_ERROR
;

252 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is waked up", cv);

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

256  
NGX_OK
;

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
)

263 
îr
;

265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %pÅo signal", cv);

267 
îr
 = 
	`±hªad_c⁄d_sig«l
(&
cv
->
c⁄d
);

269 i‡(
îr
 != 0) {

270 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

271 "±hªad_c⁄d_sig«l(%pËÁûed", 
cv
);

272  
NGX_ERROR
;

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is signaled", cv);

277  
NGX_OK
;

278 
	}
}

	@src/os/unix/ngx_readv_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_IOVS
 16

	)

16 #i‡(
NGX_HAVE_KQUEUE
)

18 
ssize_t


19 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
)

21 
u_ch¨
 *
¥ev
;

22 
ssize_t
 
n
, 
size
;

23 
ngx_îr_t
 
îr
;

24 
ngx_¨øy_t
 
vec
;

25 
ngx_evít_t
 *
ªv
;

26 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

28 
ªv
 = 
c
->
ªad
;

30 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

31 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

33 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

35 i‡(
ªv
->
avaûabÀ
 == 0) {

36 i‡(
ªv
->
≥ndög_eof
) {

37 
ªv
->
ªady
 = 0;

38 
ªv
->
eof
 = 1;

40 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

43 i‡(
ªv
->
kq_î∫o
) {

44 
ªv
->
îr‹
 = 1;

45 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

46  
NGX_ERROR
;

52  
NGX_AGAIN
;

57 
¥ev
 = 
NULL
;

58 
iov
 = 
NULL
;

59 
size
 = 0;

61 
vec
.
ñts
 = 
iovs
;

62 
vec
.
√…s
 = 0;

63 
vec
.
size
 = (
iovec
);

64 
vec
.
«Œoc
 = 
NGX_IOVS
;

65 
vec
.
poﬁ
 = 
c
->pool;

69 
chaö
) {

70 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

71 
iov
->
iov_Àn
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

74 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

75 i‡(
iov
 =
NULL
) {

76  
NGX_ERROR
;

79 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

80 
iov
->
iov_Àn
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

83 
size
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

84 
¥ev
 = 
chaö
->
buf
->
íd
;

85 
chaö
 = chaö->
√xt
;

88 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

89 "ªadv: %d,Üa°:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

91 
ªv
 = 
c
->
ªad
;

94 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

96 i‡(
n
 >= 0) {

97 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

98 
ªv
->
avaûabÀ
 -
n
;

105 i‡(
ªv
->
avaûabÀ
 <= 0) {

106 i‡(!
ªv
->
≥ndög_eof
) {

107 
ªv
->
ªady
 = 0;

110 i‡(
ªv
->
avaûabÀ
 < 0) {

111 
ªv
->
avaûabÀ
 = 0;

115 i‡(
n
 == 0) {

123 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

125 "%dávaûabÀ byãs", 
ªv
->
avaûabÀ
);

128 
ªv
->
eof
 = 1;

129 
ªv
->
avaûabÀ
 = 0;

132  
n
;

135 i‡(
n
 < 
size
) {

136 
ªv
->
ªady
 = 0;

139 i‡(
n
 == 0) {

140 
ªv
->
eof
 = 1;

143  
n
;

146 
îr
 = 
ngx_sockë_î∫o
;

148 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

149 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

151 
n
 = 
NGX_AGAIN
;

154 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

158 } 
îr
 =
NGX_EINTR
);

160 
ªv
->
ªady
 = 0;

162 i‡(
n
 =
NGX_ERROR
) {

163 
c
->
ªad
->
îr‹
 = 1;

166  
n
;

167 
	}
}

171 
ssize_t


172 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
)

174 
u_ch¨
 *
¥ev
;

175 
ssize_t
 
n
, 
size
;

176 
ngx_îr_t
 
îr
;

177 
ngx_¨øy_t
 
vec
;

178 
ngx_evít_t
 *
ªv
;

179 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

181 
¥ev
 = 
NULL
;

182 
iov
 = 
NULL
;

183 
size
 = 0;

185 
vec
.
ñts
 = 
iovs
;

186 
vec
.
√…s
 = 0;

187 
vec
.
size
 = (
iovec
);

188 
vec
.
«Œoc
 = 
NGX_IOVS
;

189 
vec
.
poﬁ
 = 
c
->pool;

193 
chaö
) {

194 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

195 
iov
->
iov_Àn
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

198 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

199 i‡(
iov
 =
NULL
) {

200  
NGX_ERROR
;

203 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

204 
iov
->
iov_Àn
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

207 
size
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

208 
¥ev
 = 
chaö
->
buf
->
íd
;

209 
chaö
 = chaö->
√xt
;

212 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

213 "ªadv: %d:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

215 
ªv
 = 
c
->
ªad
;

218 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

220 i‡(
n
 == 0) {

221 
ªv
->
ªady
 = 0;

222 
ªv
->
eof
 = 1;

224  
n
;

226 } i‡(
n
 > 0) {

228 i‡(
n
 < 
size
 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
)) {

229 
ªv
->
ªady
 = 0;

232  
n
;

235 
îr
 = 
ngx_sockë_î∫o
;

237 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

238 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

240 
n
 = 
NGX_AGAIN
;

243 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

247 } 
îr
 =
NGX_EINTR
);

249 
ªv
->
ªady
 = 0;

251 i‡(
n
 =
NGX_ERROR
) {

252 
c
->
ªad
->
îr‹
 = 1;

255  
n
;

256 
	}
}

	@src/os/unix/ngx_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

25 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

27 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

29 i‡(
ªv
->
avaûabÀ
 == 0) {

30 i‡(
ªv
->
≥ndög_eof
) {

31 
ªv
->
ªady
 = 0;

32 
ªv
->
eof
 = 1;

34 i‡(
ªv
->
kq_î∫o
) {

35 
ªv
->
îr‹
 = 1;

36 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

38  
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ªv
->
kq_î∫o
,

45 
ªv
->
ªady
 = 0;

46  
NGX_AGAIN
;

52 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

54 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

57 i‡(
n
 >= 0) {

58 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

59 
ªv
->
avaûabÀ
 -
n
;

66 i‡(
ªv
->
avaûabÀ
 <= 0) {

67 i‡(!
ªv
->
≥ndög_eof
) {

68 
ªv
->
ªady
 = 0;

71 i‡(
ªv
->
avaûabÀ
 < 0) {

72 
ªv
->
avaûabÀ
 = 0;

76 i‡(
n
 == 0) {

83 
ªv
->
eof
 = 1;

84 
ªv
->
avaûabÀ
 = 0;

87  
n
;

90 i‡((
size_t
Ë
n
 < 
size
) {

91 
ªv
->
ªady
 = 0;

94 i‡(
n
 == 0) {

95 
ªv
->
eof
 = 1;

98  
n
;

101 
îr
 = 
ngx_sockë_î∫o
;

103 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

104 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

106 
n
 = 
NGX_AGAIN
;

109 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

113 } 
îr
 =
NGX_EINTR
);

115 
ªv
->
ªady
 = 0;

117 i‡(
n
 =
NGX_ERROR
) {

118 
ªv
->
îr‹
 = 1;

121  
n
;

122 
	}
}

126 
ssize_t


127 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

129 
ssize_t
 
n
;

130 
ngx_îr_t
 
îr
;

131 
ngx_evít_t
 *
ªv
;

133 
ªv
 = 
c
->
ªad
;

136 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

138 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

139 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

141 i‡(
n
 == 0) {

142 
ªv
->
ªady
 = 0;

143 
ªv
->
eof
 = 1;

144  
n
;

146 } i‡(
n
 > 0) {

148 i‡((
size_t
Ë
n
 < 
size


149 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
))

151 
ªv
->
ªady
 = 0;

154  
n
;

157 
îr
 = 
ngx_sockë_î∫o
;

159 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

160 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

162 
n
 = 
NGX_AGAIN
;

165 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

169 } 
îr
 =
NGX_EINTR
);

171 
ªv
->
ªady
 = 0;

173 i‡(
n
 =
NGX_ERROR
) {

174 
ªv
->
îr‹
 = 1;

177  
n
;

178 
	}
}

	@src/os/unix/ngx_send.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
wev
;

20 
wev
 = 
c
->
wrôe
;

22 #i‡(
NGX_HAVE_KQUEUE
)

24 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

25 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

27 
wev
->
îr‹
 = 1;

28  
NGX_ERROR
;

34 
n
 = 
	`£nd
(
c
->
fd
, 
buf
, 
size
, 0);

36 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

37 "£nd: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

39 i‡(
n
 > 0) {

40 i‡(
n
 < (
ssize_t
Ë
size
) {

41 
wev
->
ªady
 = 0;

44 
c
->
£¡
 +
n
;

46  
n
;

49 
îr
 = 
ngx_sockë_î∫o
;

51 i‡(
n
 == 0) {

52 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
îr
, "send()Ñeturned zero");

53 
wev
->
ªady
 = 0;

54  
n
;

57 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

58 
wev
->
ªady
 = 0;

60 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

63 i‡(
îr
 =
NGX_EAGAIN
) {

64  
NGX_AGAIN
;

68 
wev
->
îr‹
 = 1;

69 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "send() failed");

70  
NGX_ERROR
;

73 
	}
}

	@src/os/unix/ngx_setproctitle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

30 **
ívú⁄
;

32 *
	gngx_os_¨gv_œ°
;

34 
ngx_öt_t


35 
	$ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
)

37 
u_ch¨
 *
p
;

38 
size_t
 
size
;

39 
ngx_uöt_t
 
i
;

41 
size
 = 0;

43 
i
 = 0; 
ívú⁄
[i]; i++) {

44 
size
 +
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

47 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

48 i‡(
p
 =
NULL
) {

49  
NGX_ERROR
;

52 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[0];

54 
i
 = 0; 
ngx_os_¨gv
[i]; i++) {

55 i‡(
ngx_os_¨gv_œ°
 =
ngx_os_¨gv
[
i
]) {

56 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[
i
] + 
	`ngx_°æí
(ngx_os_argv[i]) + 1;

60 
i
 = 0; 
ívú⁄
[i]; i++) {

61 i‡(
ngx_os_¨gv_œ°
 =
ívú⁄
[
i
]) {

63 
size
 = 
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

64 
ngx_os_¨gv_œ°
 = 
ívú⁄
[
i
] + 
size
;

66 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
ívú⁄
[
i
], 
size
);

67 
ívú⁄
[
i
] = (*Ë
p
;

68 
p
 +
size
;

72 
ngx_os_¨gv_œ°
--;

74  
NGX_OK
;

75 
	}
}

79 
	$ngx_£çro˘ôÀ
(*
tôÀ
)

81 
u_ch¨
 *
p
;

83 #i‡(
NGX_SOLARIS
)

85 
ngx_öt_t
 
i
;

86 
size_t
 
size
;

90 
ngx_os_¨gv
[1] = 
NULL
;

92 
p
 = 
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_os_¨gv
[0], (u_char *) "nginx: ",

93 
ngx_os_¨gv_œ°
 - 
ngx_os_¨gv
[0]);

95 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
tôÀ
, 
ngx_os_¨gv_œ°
 - (*)Ö);

97 #i‡(
NGX_SOLARIS
)

99 
size
 = 0;

101 
i
 = 0; i < 
ngx_¨gc
; i++) {

102 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

105 i‡(
size
 > (
size_t
Ë((*Ë
p
 - 
ngx_os_¨gv
[0])) {

112 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (", 
ngx_os_¨gv_œ°
 - (*)Ö);

114 
i
 = 0; i < 
ngx_¨gc
; i++) {

115 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
],

116 
ngx_os_¨gv_œ°
 - (*Ë
p
);

117 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" ", 
ngx_os_¨gv_œ°
 - (*)Ö);

120 i‡(*(
p
 - 1) == ' ') {

121 *(
p
 - 1) = ')';

127 i‡(
ngx_os_¨gv_œ°
 - (*Ë
p
) {

128 
	`ngx_mem£t
(
p
, 
NGX_SETPROCTITLE_PAD
, 
ngx_os_¨gv_œ°
 - (*)Ö);

131 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

132 "£çro˘ôÀ: \"%s\"", 
ngx_os_¨gv
[0]);

133 
	}
}

	@src/os/unix/ngx_setproctitle.h

8 #i‚de‡
_NGX_SETPROCTITLE_H_INCLUDED_


9 
	#_NGX_SETPROCTITLE_H_INCLUDED_


	)

12 #i‡(
NGX_HAVE_SETPROCTITLE
)

16 
	#ngx_öô_£çro˘ôÀ
(
log
)

	)

17 
	#ngx_£çro˘ôÀ
(
tôÀ
Ë
	`£çro˘ôÀ
("%s",ÅôÀ)

	)

22 #i‡!
deföed
 
NGX_SETPROCTITLE_USES_ENV


24 #i‡(
NGX_SOLARIS
)

26 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

27 
	#NGX_SETPROCTITLE_PAD
 ' '

	)

29 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

30 
ngx_£çro˘ôÀ
(*
tôÀ
);

32 #ñi‡(
NGX_LINUX
Ë|| (
NGX_DARWIN
)

34 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

35 
	#NGX_SETPROCTITLE_PAD
 '\0'

	)

37 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

38 
ngx_£çro˘ôÀ
(*
tôÀ
);

42 
	#ngx_öô_£çro˘ôÀ
(
log
)

	)

43 
	#ngx_£çro˘ôÀ
(
tôÀ
)

	)

	@src/os/unix/ngx_shmem.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_MAP_ANON
)

14 
ngx_öt_t


15 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

17 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
,

18 
PROT_READ
|
PROT_WRITE
,

19 
MAP_ANON
|
MAP_SHARED
, -1, 0);

21 i‡(
shm
->
addr
 =
MAP_FAILED
) {

22 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

23 "mm≠(MAP_ANON|MAP_SHARED, %uzËÁûed", 
shm
->
size
);

24  
NGX_ERROR
;

27  
NGX_OK
;

28 
	}
}

32 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

34 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

36 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

38 
	}
}

40 #ñi‡(
NGX_HAVE_MAP_DEVZERO
)

42 
ngx_öt_t


43 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

45 
ngx_fd_t
 
fd
;

47 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
);

49 i‡(
fd
 == -1) {

50 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

52  
NGX_ERROR
;

55 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
, 
PROT_READ
|
PROT_WRITE
,

56 
MAP_SHARED
, 
fd
, 0);

58 i‡(
shm
->
addr
 =
MAP_FAILED
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

60 "mm≠(/dev/zîo, MAP_SHARED, %uzËÁûed", 
shm
->
size
);

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

68  (
shm
->
addr
 =
MAP_FAILED
Ë? 
NGX_ERROR
 : 
NGX_OK
;

69 
	}
}

73 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

75 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

76 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

77 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

79 
	}
}

81 #ñi‡(
NGX_HAVE_SYSVSHM
)

83 
	~<sys/ùc.h
>

84 
	~<sys/shm.h
>

87 
ngx_öt_t


88 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

90 
id
;

92 
id
 = 
	`shmgë
(
IPC_PRIVATE
, 
shm
->
size
, (
SHM_R
|
SHM_W
|
IPC_CREAT
));

94 i‡(
id
 == -1) {

95 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

96 "shmgë(%uzËÁûed", 
shm
->
size
);

97  
NGX_ERROR
;

100 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
shm
->
log
, 0, "shmgë id: %d", 
id
);

102 
shm
->
addr
 = 
	`shm©
(
id
, 
NULL
, 0);

104 i‡(
shm
->
addr
 == (*) -1) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
, "shmat() failed");

108 i‡(
	`shm˘l
(
id
, 
IPC_RMID
, 
NULL
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

113  (
shm
->
addr
 =(*Ë-1Ë? 
NGX_ERROR
 : 
NGX_OK
;

114 
	}
}

118 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

120 i‡(
	`shmdt
(
shm
->
addr
) == -1) {

121 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

122 "shmdt(%pËÁûed", 
shm
->
addr
);

124 
	}
}

	@src/os/unix/ngx_shmem.h

8 #i‚de‡
_NGX_SHMEM_H_INCLUDED_


9 
	#_NGX_SHMEM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
u_ch¨
 *
	maddr
;

18 
size_t
 
	msize
;

19 
ngx_°r_t
 
	m«me
;

20 
ngx_log_t
 *
	mlog
;

21 
ngx_uöt_t
 
	mexi°s
;

22 } 
	tngx_shm_t
;

25 
ngx_öt_t
 
ngx_shm_Æloc
(
ngx_shm_t
 *
shm
);

26 
ngx_shm_‰ì
(
ngx_shm_t
 *
shm
);

	@src/os/unix/ngx_socket.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

24 #i‡(
NGX_HAVE_FIONBIO
)

27 
	$ngx_n⁄blockög
(
ngx_sockë_t
 
s
)

29 
nb
;

31 
nb
 = 1;

33  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

34 
	}
}

38 
	$ngx_blockög
(
ngx_sockë_t
 
s
)

40 
nb
;

42 
nb
 = 0;

44  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

45 
	}
}

50 #i‡(
NGX_FREEBSD
)

53 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

55 
t˝_n›ush
;

57 
t˝_n›ush
 = 1;

59  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

60 (c⁄° *Ë&
t˝_n›ush
, ());

61 
	}
}

65 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

67 
t˝_n›ush
;

69 
t˝_n›ush
 = 0;

71  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

72 (c⁄° *Ë&
t˝_n›ush
, ());

73 
	}
}

75 #ñi‡(
NGX_LINUX
)

79 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

81 
c‹k
;

83 
c‹k
 = 1;

85  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

86 (c⁄° *Ë&
c‹k
, ());

87 
	}
}

91 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

93 
c‹k
;

95 
c‹k
 = 0;

97  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

98 (c⁄° *Ë&
c‹k
, ());

99 
	}
}

104 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

107 
	}
}

111 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

114 
	}
}

	@src/os/unix/ngx_socket.h

8 #i‚de‡
_NGX_SOCKET_H_INCLUDED_


9 
	#_NGX_SOCKET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
	#NGX_WRITE_SHUTDOWN
 
SHUT_WR


	)

17 
	tngx_sockë_t
;

19 
	#ngx_sockë
 
sockë


	)

20 
	#ngx_sockë_n
 "sockë()"

	)

23 #i‡(
NGX_HAVE_FIONBIO
)

25 
ngx_n⁄blockög
(
ngx_sockë_t
 
s
);

26 
ngx_blockög
(
ngx_sockë_t
 
s
);

28 
	#ngx_n⁄blockög_n
 "io˘l(FIONBIO)"

	)

29 
	#ngx_blockög_n
 "io˘l(!FIONBIO)"

	)

33 
	#ngx_n⁄blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë| 
O_NONBLOCK
)

	)

34 
	#ngx_n⁄blockög_n
 "f˙é(O_NONBLOCK)"

	)

36 
	#ngx_blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë& ~
O_NONBLOCK
)

	)

37 
	#ngx_blockög_n
 "f˙é(!O_NONBLOCK)"

	)

41 
ngx_t˝_n›ush
(
ngx_sockë_t
 
s
);

42 
ngx_t˝_push
(
ngx_sockë_t
 
s
);

44 #i‡(
NGX_LINUX
)

46 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_CORK)"

	)

47 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_CORK)"

	)

51 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_NOPUSH)"

	)

52 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_NOPUSH)"

	)

57 
	#ngx_shutdown_sockë
 
shutdown


	)

58 
	#ngx_shutdown_sockë_n
 "shutdown()"

	)

60 
	#ngx_˛o£_sockë
 
˛o£


	)

61 
	#ngx_˛o£_sockë_n
 "˛o£(Ësockë"

	)

	@src/os/unix/ngx_solaris.h

8 #i‚de‡
_NGX_SOLARIS_H_INCLUDED_


9 
	#_NGX_SOLARIS_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

	@src/os/unix/ngx_solaris_config.h

8 #i‚de‡
_NGX_SOLARIS_CONFIG_H_INCLUDED_


9 
	#_NGX_SOLARIS_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_REENTRANT


13 
	#_REENTRANT


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<°rög.h
>

27 
	~<sig«l.h
>

28 
	~<pwd.h
>

29 
	~<gΩ.h
>

30 
	~<dúít.h
>

31 
	~<glob.h
>

32 
	~<sys/°©vfs.h
>

34 
	~<sys/fûio.h
>

35 
	~<sys/uio.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~<sys/waô.h
>

40 
	~<sys/mm™.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sched.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/t˝.h
>

47 
	~<¨∑/öë.h
>

48 
	~<√tdb.h
>

49 
	~<sys/un.h
>

51 
	~<sys/sy°emöfo.h
>

52 
	~<limôs.h
>

53 
	~<öây≥s.h
>

54 
	~<¸y±.h
>

56 
	#NGX_ALIGNMENT
 
_MAX_ALIGNMENT


	)

58 
	~<ngx_auto_c⁄fig.h
>

61 #i‡(
NGX_HAVE_POSIX_SEM
)

62 
	~<£m≠h‹e.h
>

66 #i‡(
NGX_HAVE_POLL
)

67 
	~<pﬁl.h
>

71 #i‡(
NGX_HAVE_DEVPOLL
)

72 
	~<sys/io˘l.h
>

73 
	~<sys/devpﬁl.h
>

77 #i‡(
NGX_HAVE_EVENTPORT
)

78 
	~<p‹t.h
>

82 #i‡(
NGX_HAVE_SENDFILE
)

83 
	~<sys/£ndfûe.h
>

87 
	#NGX_LISTEN_BACKLOG
 511

	)

90 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


91 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

95 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


97 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

101 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

104 **
ívú⁄
;

	@src/os/unix/ngx_solaris_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_sﬁ¨is_sy¢ame
[20];

13 
	gngx_sﬁ¨is_ªÀa£
[10];

14 
	gngx_sﬁ¨is_vîsi⁄
[50];

17 
ngx_os_io_t
 
	gngx_sﬁ¨is_io
 = {

18 
ngx_unix_ªcv
,

19 
ngx_ªadv_chaö
,

20 
ngx_udp_unix_ªcv
,

21 
ngx_unix_£nd
,

22 #i‡(
NGX_HAVE_SENDFILE
)

23 
ngx_sﬁ¨is_£ndfûev_chaö
,

24 
NGX_IO_SENDFILE


26 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

35 i‡(
	`sysöfo
(
SI_SYSNAME
, 
ngx_sﬁ¨is_sy¢ame
, (ngx_solaris_sysname))

38 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40  
NGX_ERROR
;

43 i‡(
	`sysöfo
(
SI_RELEASE
, 
ngx_sﬁ¨is_ªÀa£
, (ngx_solaris_release))

46 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

48  
NGX_ERROR
;

51 i‡(
	`sysöfo
(
SI_VERSION
, 
ngx_sﬁ¨is_vîsi⁄
, (ngx_solaris_version))

54 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

56  
NGX_ERROR
;

60 
ngx_os_io
 = 
ngx_sﬁ¨is_io
;

62  
NGX_OK
;

63 
	}
}

67 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

70 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

71 
ngx_sﬁ¨is_sy¢ame
, 
ngx_sﬁ¨is_ªÀa£
);

73 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "version: %s",

74 
ngx_sﬁ¨is_vîsi⁄
);

75 
	}
}

	@src/os/unix/ngx_solaris_sendfilev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_SOLARIS_SENDFILEV
)

17 
	s£ndfûevec
 {

18 
	msfv_fd
;

19 
u_öt
 
	msfv_Êag
;

20 
off_t
 
	msfv_off
;

21 
size_t
 
	msfv_Àn
;

22 } 
	t£ndfûevec_t
;

24 
	#SFV_FD_SELF
 -2

	)

26 
ssize_t
 
	$£ndfûev
(
fd
, c⁄° 
£ndfûevec
 *
vec
,

27 
sfv˙t
, 
size_t
 *
x„ºed
)

30 
	}
}

35 #i‡(
IOV_MAX
 > 64)

36 
	#NGX_SENDFILEVECS
 64

	)

38 
	#NGX_SENDFILEVECS
 
IOV_MAX


	)

43 
ngx_chaö_t
 *

44 
	$ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

46 
fd
;

47 
u_ch¨
 *
¥ev
;

48 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
Âªv
;

49 
size_t
 
£¡
;

50 
ssize_t
 
n
;

51 
ngx_öt_t
 
eöå
, 
com∂ëe
;

52 
ngx_îr_t
 
îr
;

53 
£ndfûevec_t
 *
sfv
, 
sfvs
[
NGX_SENDFILEVECS
];

54 
ngx_¨øy_t
 
vec
;

55 
ngx_evít_t
 *
wev
;

56 
ngx_chaö_t
 *
˛
;

58 
wev
 = 
c
->
wrôe
;

60 i‡(!
wev
->
ªady
) {

61  
ö
;

64 i‡(!
c
->
£ndfûe
) {

65  
	`ngx_wrôev_chaö
(
c
, 
ö
, 
limô
);

71 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

72 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

76 
£nd
 = 0;

77 
com∂ëe
 = 0;

79 
vec
.
ñts
 = 
sfvs
;

80 
vec
.
size
 = (
£ndfûevec_t
);

81 
vec
.
«Œoc
 = 
NGX_SENDFILEVECS
;

82 
vec
.
poﬁ
 = 
c
->pool;

85 
fd
 = 
SFV_FD_SELF
;

86 
¥ev
 = 
NULL
;

87 
Âªv
 = 0;

88 
sfv
 = 
NULL
;

89 
eöå
 = 0;

90 
£¡
 = 0;

91 
¥ev_£nd
 = 
£nd
;

93 
vec
.
√…s
 = 0;

97 
˛
 = 
ö
; c»&& 
vec
.
√…s
 < 
IOV_MAX
 && 
£nd
 < 
limô
; c»˛->
√xt
)

99 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

103 i‡(
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

104 
fd
 = 
SFV_FD_SELF
;

106 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

108 i‡(
£nd
 + 
size
 > 
limô
) {

109 
size
 = 
limô
 - 
£nd
;

112 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

113 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

116 
sfv
 = 
	`ngx_¨øy_push
(&
vec
);

117 i‡(
sfv
 =
NULL
) {

118  
NGX_CHAIN_ERROR
;

121 
sfv
->
sfv_fd
 = 
SFV_FD_SELF
;

122 
sfv
->
sfv_Êag
 = 0;

123 
sfv
->
sfv_off
 = (
off_t
Ë(
uöçå_t
Ë
˛
->
buf
->
pos
;

124 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

127 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

128 
£nd
 +
size
;

131 
¥ev
 = 
NULL
;

133 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

135 i‡(
£nd
 + 
size
 > 
limô
) {

136 
size
 = 
limô
 - 
£nd
;

138 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

139 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

141 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

142 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

146 i‡(
fd
 =
˛
->
buf
->
fûe
->fd && 
Âªv
 =˛->buf->
fûe_pos
) {

147 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

150 
sfv
 = 
	`ngx_¨øy_push
(&
vec
);

151 i‡(
sfv
 =
NULL
) {

152  
NGX_CHAIN_ERROR
;

155 
fd
 = 
˛
->
buf
->
fûe
->fd;

156 
sfv
->
sfv_fd
 = 
fd
;

157 
sfv
->
sfv_Êag
 = 0;

158 
sfv
->
sfv_off
 = 
˛
->
buf
->
fûe_pos
;

159 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

162 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

163 
£nd
 +
size
;

167 
n
 = 
	`£ndfûev
(
c
->
fd
, 
vec
.
ñts
, vec.
√…s
, &
£¡
);

169 i‡(
n
 == -1) {

170 
îr
 = 
ngx_î∫o
;

172 
îr
) {

173 
NGX_EAGAIN
:

176 
NGX_EINTR
:

177 
eöå
 = 1;

181 
wev
->
îr‹
 = 1;

182 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfilev() failed");

183  
NGX_CHAIN_ERROR
;

186 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

187 "£ndfûev(Ë£¡ o∆y %uz byãs", 
£¡
);

190 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

191 "£ndfûev: %z %z", 
n
, 
£¡
);

193 i‡(
£nd
 - 
¥ev_£nd
 =(
off_t
Ë
£¡
) {

194 
com∂ëe
 = 1;

197 
c
->
£¡
 += sent;

199 
˛
 = 
ö
; cl; c»˛->
√xt
) {

201 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

205 i‡(
£¡
 == 0) {

209 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

211 i‡((
off_t
Ë
£¡
 >
size
) {

212 
£¡
 = (
size_t
Ë((
off_t
Ë£¡ - 
size
);

214 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

215 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

218 i‡(
˛
->
buf
->
ö_fûe
) {

219 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

225 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

226 
˛
->
buf
->
pos
 +
£¡
;

229 i‡(
˛
->
buf
->
ö_fûe
) {

230 
˛
->
buf
->
fûe_pos
 +
£¡
;

236 i‡(
eöå
) {

240 i‡(!
com∂ëe
) {

241 
wev
->
ªady
 = 0;

242  
˛
;

245 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

246  
˛
;

249 
ö
 = 
˛
;

251 
	}
}

	@src/os/unix/ngx_sunpro_atomic_sparc64.h

8 #i‡(
NGX_PTR_SIZE
 == 4)

9 
	#NGX_CASA
 
ngx_ˇß


	)

11 
	#NGX_CASA
 
ngx_ˇsxa


	)

15 
ngx_©omic_uöt_t


16 
ngx_ˇß
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

18 
ngx_©omic_uöt_t


19 
ngx_ˇsxa
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

24 
ngx_ölöe
 
ngx_©omic_uöt_t


25 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

26 
ngx_©omic_uöt_t
 
£t
)

28 
£t
 = 
	`NGX_CASA
(£t, 
ﬁd
, 
lock
);

30  (
£t
 =
ﬁd
);

31 
	}
}

34 
ngx_ölöe
 
ngx_©omic_öt_t


35 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

37 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

39 
ﬁd
 = *
vÆue
;

43 
ªs
 = 
ﬁd
 + 
add
;

45 
ªs
 = 
	`NGX_CASA
‘es, 
ﬁd
, 
vÆue
);

47 i‡(
ªs
 =
ﬁd
) {

48  
ªs
;

51 
ﬁd
 = 
ªs
;

53 
	}
}

56 
	#ngx_mem‹y_b¨rõr
() \

57 
	`__asm
 (".volatile"); \

58 
	`__asm
 ("membar #LoadLoad | #LoadStore | #StoreStore | #StoreLoad"); \

59 
	`__asm
 (".n⁄vﬁ©ûe")

	)

61 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_thread.h

8 #i‚de‡
_NGX_THREAD_H_INCLUDED_


9 
	#_NGX_THREAD_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 #i‡(
NGX_THREADS
)

17 
	#NGX_MAX_THREADS
 128

	)

19 #i‡(
NGX_USE_RFORK
)

20 
	~<ngx_‰ìbsd_rf‹k_thªad.h
>

25 
	~<±hªad.h
>

27 
±hªad_t
 
	tngx_tid_t
;

29 
	#ngx_thªad_£lf
(Ë
	`±hªad_£lf
()

	)

30 
	#ngx_log_tid
 (Ë
	`ngx_thªad_£lf
()

	)

32 #i‡(
NGX_FREEBSD
Ë&& !(
NGX_LINUXTHREADS
)

33 
	#NGX_TID_T_FMT
 "%p"

	)

35 
	#NGX_TID_T_FMT
 "%d"

	)

39 
±hªad_key_t
 
	tngx_és_key_t
;

41 
	#ngx_thªad_key_¸óã
(
key
Ë
	`±hªad_key_¸óã
(key, 
NULL
)

	)

42 
	#ngx_thªad_key_¸óã_n
 "±hªad_key_¸óã()"

	)

43 
	#ngx_thªad_£t_és
 
±hªad_£t•ecific


	)

44 
	#ngx_thªad_£t_és_n
 "±hªad_£t•ecific()"

	)

45 
	#ngx_thªad_gë_és
 
±hªad_gë•ecific


	)

48 
	#NGX_MUTEX_LIGHT
 0

	)

51 
±hªad_muãx_t
 
	mmuãx
;

52 
ngx_log_t
 *
	mlog
;

53 } 
	tngx_muãx_t
;

56 
±hªad_c⁄d_t
 
	mc⁄d
;

57 
ngx_log_t
 *
	mlog
;

58 } 
	tngx_c⁄d_t
;

60 
	#ngx_thªad_sigmask
 
±hªad_sigmask


	)

61 
	#ngx_thªad_sigmask_n
 "±hªad_sigmask()"

	)

63 
	#ngx_thªad_joö
(
t
, 
p
Ë
	`±hªad_joö
—,Ö)

	)

65 
	#ngx_£âhπôÀ
(
n
)

	)

69 
ngx_öt_t
 
ngx_muãx_åylock
(
ngx_muãx_t
 *
m
);

70 
ngx_muãx_lock
(
ngx_muãx_t
 *
m
);

71 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

76 
	#ngx_thªad_vﬁ©ûe
 vﬁ©ûe

	)

80 
ngx_tid_t
 
	mtid
;

81 
ngx_c⁄d_t
 *
	mcv
;

82 
ngx_uöt_t
 
	m°©e
;

83 } 
	tngx_thªad_t
;

85 
	#NGX_THREAD_FREE
 1

	)

86 
	#NGX_THREAD_BUSY
 2

	)

87 
	#NGX_THREAD_EXIT
 3

	)

88 
	#NGX_THREAD_DONE
 4

	)

90 
ngx_öt_t
 
ngx_thªads_n
;

91 vﬁ©ûê
ngx_thªad_t
 
ngx_thªads
[
NGX_MAX_THREADS
];

94 * 
	tngx_thªad_vÆue_t
;

96 
ngx_öt_t
 
ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
);

97 
ngx_îr_t
 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
,

98 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
), *¨g, 
ngx_log_t
 *
log
);

100 
ngx_muãx_t
 *
	`ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
);

101 
	`ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
);

104 
ngx_c⁄d_t
 *
	`ngx_c⁄d_öô
(
ngx_log_t
 *
log
);

105 
	`ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
);

106 
ngx_öt_t
 
	`ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
);

107 
ngx_öt_t
 
	`ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
);

112 
	#ngx_thªad_vﬁ©ûe


	)

114 
	#ngx_log_tid
 0

	)

115 
	#NGX_TID_T_FMT
 "%d"

	)

117 
	#ngx_muãx_åylock
(
m
Ë
NGX_OK


	)

118 
	#ngx_muãx_lock
(
m
)

	)

119 
	#ngx_muãx_u∆ock
(
m
)

	)

121 
	#ngx_c⁄d_sig«l
(
cv
)

	)

123 
	#ngx_thªad_maö
(Ë1

	)

	@src/os/unix/ngx_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

25 
	$ngx_timez⁄e_upd©e
()

27 #i‡(
NGX_FREEBSD
)

29 i‡(
	`gëív
("TZ")) {

33 
	`puãnv
("TZ=UTC");

35 
	`tz£t
();

37 
	`un£ãnv
("TZ");

39 
	`tz£t
();

41 #ñi‡(
NGX_LINUX
)

42 
time_t
 
s
;

43 
tm
 *
t
;

44 
buf
[4];

46 
s
 = 
	`time
(0);

48 
t
 = 
	`loˇ…ime
(&
s
);

50 
	`°r·ime
(
buf
, 4, "%H", 
t
);

53 
	}
}

57 
	$ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
)

59 #i‡(
NGX_HAVE_LOCALTIME_R
)

60 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

63 
ngx_tm_t
 *
t
;

65 
t
 = 
	`loˇ…ime
(&
s
);

66 *
tm
 = *
t
;

70 
tm
->
ngx_tm_m⁄
++;

71 
tm
->
ngx_tm_yór
 += 1900;

72 
	}
}

76 
	$ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm)

78 #i‡(
NGX_HAVE_LOCALTIME_R
)

79 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

82 
tm
 *
t
;

84 
t
 = 
	`loˇ…ime
(&
s
);

85 *
tm
 = *
t
;

88 
	}
}

92 
	$ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm)

94 #i‡(
NGX_HAVE_LOCALTIME_R
)

95 (Ë
	`gmtime_r
(&
s
, 
tm
);

98 
tm
 *
t
;

100 
t
 = 
	`gmtime
(&
s
);

101 *
tm
 = *
t
;

104 
	}
}

	@src/os/unix/ngx_time.h

8 #i‚de‡
_NGX_TIME_H_INCLUDED_


9 
	#_NGX_TIME_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_rbåì_key_t
 
	tngx_m£c_t
;

17 
ngx_rbåì_key_öt_t
 
	tngx_m£c_öt_t
;

19 
tm
 
	tngx_tm_t
;

21 
	#ngx_tm_£c
 
tm_£c


	)

22 
	#ngx_tm_mö
 
tm_mö


	)

23 
	#ngx_tm_hour
 
tm_hour


	)

24 
	#ngx_tm_mday
 
tm_mday


	)

25 
	#ngx_tm_m⁄
 
tm_m⁄


	)

26 
	#ngx_tm_yór
 
tm_yór


	)

27 
	#ngx_tm_wday
 
tm_wday


	)

28 
	#ngx_tm_isd°
 
tm_isd°


	)

30 
	#ngx_tm_£c_t
 

	)

31 
	#ngx_tm_mö_t
 

	)

32 
	#ngx_tm_hour_t
 

	)

33 
	#ngx_tm_mday_t
 

	)

34 
	#ngx_tm_m⁄_t
 

	)

35 
	#ngx_tm_yór_t
 

	)

36 
	#ngx_tm_wday_t
 

	)

39 #i‡(
NGX_HAVE_GMTOFF
)

40 
	#ngx_tm_gmtoff
 
tm_gmtoff


	)

41 
	#ngx_tm_z⁄e
 
tm_z⁄e


	)

45 #i‡(
NGX_SOLARIS
)

47 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
Ætz⁄e
 : 
timez⁄e
Ë/ 60)

	)

51 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
timez⁄e
 + 3600 :Åimez⁄eË/ 60)

	)

56 
ngx_timez⁄e_upd©e
();

57 
ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
);

58 
ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm);

59 
ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm);

61 
	#ngx_gëtimeofday
(
ç
Ë(Ë
	`gëtimeofday
—p, 
NULL
);

	)

62 
	#ngx_m¶ìp
(
ms
Ë(Ë
	`u¶ìp
(m†* 1000)

	)

63 
	#ngx_¶ìp
(
s
Ë(Ë
	`¶ìp
(s)

	)

	@src/os/unix/ngx_udp_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

25 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

27 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

28 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

30 i‡(
n
 >= 0) {

31 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

32 
ªv
->
avaûabÀ
 -
n
;

39 i‡(
ªv
->
avaûabÀ
 <= 0) {

40 
ªv
->
ªady
 = 0;

41 
ªv
->
avaûabÀ
 = 0;

45  
n
;

48 
îr
 = 
ngx_sockë_î∫o
;

50 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

51 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

53 
n
 = 
NGX_AGAIN
;

56 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

60 } 
îr
 =
NGX_EINTR
);

62 
ªv
->
ªady
 = 0;

64 i‡(
n
 =
NGX_ERROR
) {

65 
ªv
->
îr‹
 = 1;

68  
n
;

69 
	}
}

73 
ssize_t


74 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

76 
ssize_t
 
n
;

77 
ngx_îr_t
 
îr
;

78 
ngx_evít_t
 *
ªv
;

80 
ªv
 = 
c
->
ªad
;

83 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

85 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

86 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

88 i‡(
n
 >= 0) {

89  
n
;

92 
îr
 = 
ngx_sockë_î∫o
;

94 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

95 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

97 
n
 = 
NGX_AGAIN
;

100 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

104 } 
îr
 =
NGX_EINTR
);

106 
ªv
->
ªady
 = 0;

108 i‡(
n
 =
NGX_ERROR
) {

109 
ªv
->
îr‹
 = 1;

112  
n
;

113 
	}
}

	@src/os/unix/ngx_user.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

22 #i‡(
NGX_CRYPT
)

24 #i‡(
NGX_HAVE_GNU_CRYPT_R
)

26 
ngx_öt_t


27 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

29 *
vÆue
;

30 
size_t
 
Àn
;

31 
ngx_îr_t
 
îr
;

32 
¸y±_d©a
 
cd
;

34 
	`ngx_£t_î∫o
(0);

36 
cd
.
öôülized
 = 0;

38 
cd
.
cuºít_ß…
[0] = ~
ß…
[0];

40 
vÆue
 = 
	`¸y±_r
((*Ë
key
, (*Ë
ß…
, &
cd
);

42 
îr
 = 
ngx_î∫o
;

44 i‡(
îr
 == 0) {

45 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

47 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

48 i‡(*
í¸y±ed
) {

49 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

50  
NGX_OK
;

54 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
îr
, "crypt_r() failed");

56  
NGX_ERROR
;

57 
	}
}

61 
ngx_öt_t


62 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

64 *
vÆue
;

65 
size_t
 
Àn
;

66 
ngx_îr_t
 
îr
;

68 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

72 i‡(
	`ngx_muãx_åylock
(
ngx_¸y±_muãx
Ë!
NGX_OK
) {

73  
NGX_AGAIN
;

78 
	`ngx_£t_î∫o
(0);

80 
vÆue
 = 
	`¸y±
((*Ë
key
, (*Ë
ß…
);

82 i‡(
vÆue
) {

83 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

85 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

86 i‡(*
í¸y±ed
) {

87 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

90 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

91 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

93  
NGX_OK
;

96 
îr
 = 
ngx_î∫o
;

98 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

99 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

102 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
îr
, "crypt() failed");

104  
NGX_ERROR
;

105 
	}
}

	@src/os/unix/ngx_user.h

8 #i‚de‡
_NGX_USER_H_INCLUDED_


9 
	#_NGX_USER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uid_t
 
	tngx_uid_t
;

17 
gid_t
 
	tngx_gid_t
;

20 
ngx_öt_t
 
ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

	@src/os/unix/ngx_writev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
IOV_MAX
 > 64)

14 
	#NGX_IOVS
 64

	)

16 
	#NGX_IOVS
 
IOV_MAX


	)

20 
ngx_chaö_t
 *

21 
	$ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

23 
u_ch¨
 *
¥ev
;

24 
ssize_t
 
n
, 
size
, 
£¡
;

25 
off_t
 
£nd
, 
¥ev_£nd
;

26 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

27 
ngx_îr_t
 
îr
;

28 
ngx_¨øy_t
 
vec
;

29 
ngx_chaö_t
 *
˛
;

30 
ngx_evít_t
 *
wev
;

31 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

33 
wev
 = 
c
->
wrôe
;

35 i‡(!
wev
->
ªady
) {

36  
ö
;

39 #i‡(
NGX_HAVE_KQUEUE
)

41 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

42 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

44 
wev
->
îr‹
 = 1;

45  
NGX_CHAIN_ERROR
;

52 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

53 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

56 
£nd
 = 0;

57 
com∂ëe
 = 0;

59 
vec
.
ñts
 = 
iovs
;

60 
vec
.
size
 = (
iovec
);

61 
vec
.
«Œoc
 = 
NGX_IOVS
;

62 
vec
.
poﬁ
 = 
c
->pool;

65 
¥ev
 = 
NULL
;

66 
iov
 = 
NULL
;

67 
eöå
 = 0;

68 
¥ev_£nd
 = 
£nd
;

70 
vec
.
√…s
 = 0;

74 
˛
 = 
ö
; c»&& 
vec
.
√…s
 < 
IOV_MAX
 && 
£nd
 < 
limô
; c»˛->
√xt
)

76 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

81 i‡(!
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

82 
	`ngx_debug_poöt
();

86 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 i‡(
£nd
 + 
size
 > 
limô
) {

89 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

92 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

93 
iov
->
iov_Àn
 +
size
;

96 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

97 i‡(
iov
 =
NULL
) {

98  
NGX_CHAIN_ERROR
;

101 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

102 
iov
->
iov_Àn
 = 
size
;

105 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

106 
£nd
 +
size
;

109 
n
 = 
	`wrôev
(
c
->
fd
, 
vec
.
ñts
, vec.
√…s
);

111 i‡(
n
 == -1) {

112 
îr
 = 
ngx_î∫o
;

114 
îr
) {

115 
NGX_EAGAIN
:

118 
NGX_EINTR
:

119 
eöå
 = 1;

123 
wev
->
îr‹
 = 1;

124 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

125  
NGX_CHAIN_ERROR
;

128 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

132 
£¡
 = 
n
 > 0 ?Ç : 0;

134 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "wrôev: %z", 
£¡
);

136 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

137 
com∂ëe
 = 1;

140 
c
->
£¡
 += sent;

142 
˛
 = 
ö
; cl; c»˛->
√xt
) {

144 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

148 i‡(
£¡
 == 0) {

152 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

154 i‡(
£¡
 >
size
) {

155 
£¡
 -
size
;

156 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

161 
˛
->
buf
->
pos
 +
£¡
;

166 i‡(
eöå
) {

170 i‡(!
com∂ëe
) {

171 
wev
->
ªady
 = 0;

172  
˛
;

175 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

176  
˛
;

179 
ö
 = 
˛
;

181 
	}
}

	@/usr/include/aio.h

22 #i‚de‡
_AIO_H


23 
	#_AIO_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/ty≥s.h
>

27 
	#__√ed_sigevít_t


	)

28 
	~<bôs/sigöfo.h
>

29 
	#__√ed_time•ec


	)

30 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__unu£d
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__unu£d
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (c⁄° 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (c⁄° 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

170 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (c⁄° 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

201 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (c⁄° 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (c⁄° 
aiocb64
 *c⁄° 
__li°
[], 
__√¡
,

237 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/crypt.h

24 #i‚de‡
_CRYPT_H


25 
	#_CRYPT_H
 1

	)

27 
	~<„©uªs.h
>

29 
__BEGIN_DECLS


32 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

36 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

40 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

42 #ifde‡
__USE_GNU


45 
	s¸y±_d©a


47 
keysched
[16 * 8];

48 
sb0
[32768];

49 
sb1
[32768];

50 
sb2
[32768];

51 
sb3
[32768];

53 
¸y±_3_buf
[14];

54 
cuºít_ß…
[2];

55 
cuºít_ß…bôs
;

56 
dúe˘i⁄
, 
öôülized
;

59 *
	$¸y±_r
 (c⁄° *
__key
, c⁄° *
__ß…
,

60 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

61 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

63 
	$£tkey_r
 (c⁄° *
__key
,

64 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

65 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

67 
	$í¸y±_r
 (*
__block
, 
__edÊag
,

68 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

69 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

72 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_BSD


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

138 #ifde‡
__USE_ATFILE


139 
	#AT_FDCWD
 -100

	)

142 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

143 
	#AT_REMOVEDIR
 0x200

	)

145 
	#AT_SYMLINK_FOLLOW
 0x400

	)

146 #ifde‡
__USE_GNU


147 
	#AT_NO_AUTOMOUNT
 0x800

	)

149 
	#AT_EMPTY_PATH
 0x1000

	)

151 
	#AT_EACCESS
 0x200

	)

160 
f˙é
 (
__fd
, 
__cmd
, ...);

168 #i‚de‡
__USE_FILE_OFFSET64


169 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

171 #ifde‡
__REDIRECT


172 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

173 
	`__n⁄nuŒ
 ((1));

175 
	#›í
 
›í64


	)

178 #ifde‡
__USE_LARGEFILE64


179 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

182 #ifde‡
__USE_ATFILE


192 #i‚de‡
__USE_FILE_OFFSET64


193 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

194 
	`__n⁄nuŒ
 ((2));

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

198 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

200 
	#›í©
 
›í©64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

205 
	`__n⁄nuŒ
 ((2));

214 #i‚de‡
__USE_FILE_OFFSET64


215 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

217 #ifde‡
__REDIRECT


218 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

219 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

221 
	#¸ót
 
¸ót64


	)

224 #ifde‡
__USE_LARGEFILE64


225 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

228 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

229 && !
deföed
 
__USE_POSIX
))

238 
	#F_ULOCK
 0

	)

239 
	#F_LOCK
 1

	)

240 
	#F_TLOCK
 2

	)

241 
	#F_TEST
 3

	)

243 #i‚de‡
__USE_FILE_OFFSET64


244 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

246 #ifde‡
__REDIRECT


247 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

249 
	#lockf
 
lockf64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

257 #ifde‡
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


261 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

262 
__advi£
Ë
__THROW
;

264 #ifde‡
__REDIRECT_NTH


265 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

266 
__off64_t
 
__Àn
, 
__advi£
),

267 
posix_Ádvi£64
);

269 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

272 #ifde‡
__USE_LARGEFILE64


273 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

274 
__advi£
Ë
__THROW
;

282 #i‚de‡
__USE_FILE_OFFSET64


283 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

285 #ifde‡
__REDIRECT


286 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

287 
__off64_t
 
__Àn
),

288 
posix_ÁŒoˇã64
);

290 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

293 #ifde‡
__USE_LARGEFILE64


294 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

300 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

301 && 
deföed
 
__va_¨g_∑ck_Àn


302 
	~<bôs/f˙é2.h
>

305 
__END_DECLS


	@/usr/include/glob.h

18 #i‚def 
_GLOB_H


19 
	#_GLOB_H
 1

	)

21 
	~<sys/cdefs.h
>

23 
	g__BEGIN_DECLS


26 #i‚de‡
__size_t


27 
__SIZE_TYPE__
 
	t__size_t
;

28 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


29 
__SIZE_TYPE__
 
	tsize_t
;

34 #unde‡
__size_t


35 
	#__size_t
 
size_t


	)

39 
	#GLOB_ERR
 (1 << 0)

	)

40 
	#GLOB_MARK
 (1 << 1)

	)

41 
	#GLOB_NOSORT
 (1 << 2)

	)

42 
	#GLOB_DOOFFS
 (1 << 3)

	)

43 
	#GLOB_NOCHECK
 (1 << 4)

	)

44 
	#GLOB_APPEND
 (1 << 5)

	)

45 
	#GLOB_NOESCAPE
 (1 << 6)

	)

46 
	#GLOB_PERIOD
 (1 << 7)

	)

48 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_BSD
 || deföed 
__USE_GNU


49 
	#GLOB_MAGCHAR
 (1 << 8)

	)

50 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

51 
	#GLOB_BRACE
 (1 << 10)

	)

52 
	#GLOB_NOMAGIC
 (1 << 11)

	)

53 
	#GLOB_TILDE
 (1 << 12)

	)

54 
	#GLOB_ONLYDIR
 (1 << 13)

	)

55 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

57 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

58 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

59 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

60 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

62 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

63 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

64 
GLOB_PERIOD
)

	)

68 
	#GLOB_NOSPACE
 1

	)

69 
	#GLOB_ABORTED
 2

	)

70 
	#GLOB_NOMATCH
 3

	)

71 
	#GLOB_NOSYS
 4

	)

72 #ifde‡
__USE_GNU


75 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

79 #ifde‡
__USE_GNU


80 
	g°©
;

84 
__size_t
 
	mgl_∑thc
;

85 **
	mgl_∑thv
;

86 
__size_t
 
	mgl_offs
;

87 
	mgl_Êags
;

91 (*
	mgl_˛o£dú
) (*);

92 #ifde‡
__USE_GNU


93 
	mdúít
 *(*
	mgl_ªaddú
) (*);

95 *(*
	mgl_ªaddú
) (*);

97 *(*
	mgl_›ídú
) (const *);

98 #ifde‡
__USE_GNU


99 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

100 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

102 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

103 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

105 } 
	tglob_t
;

107 #ifde‡
__USE_LARGEFILE64


108 #ifde‡
__USE_GNU


109 
	g°©64
;

113 
__size_t
 
	mgl_∑thc
;

114 **
	mgl_∑thv
;

115 
__size_t
 
	mgl_offs
;

116 
	mgl_Êags
;

120 (*
	mgl_˛o£dú
) (*);

121 #ifde‡
__USE_GNU


122 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

124 *(*
	mgl_ªaddú
) (*);

126 *(*
	mgl_›ídú
) (const *);

127 #ifde‡
__USE_GNU


128 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

129 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

131 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

132 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

134 } 
	tglob64_t
;

145 #i‡!
deföed
 
__USE_FILE_OFFSET64


146 
glob
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

147 (*
__îrfunc
) (const *, ),

148 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

151 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

153 
	`__REDIRECT_NTH
 (
glob
, (c⁄° *
__ª°ri˘
 
__∑âîn
,

154 
__Êags
,

155 (*
__îrfunc
) (const *, ),

156 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

158 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

161 #ifde‡
__USE_LARGEFILE64


162 
	`glob64
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

163 (*
__îrfunc
) (const *, ),

164 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

166 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

170 #ifde‡
__USE_GNU


176 
	$glob_∑âîn_p
 (c⁄° *
__∑âîn
, 
__quŸe
Ë
__THROW
;

179 
__END_DECLS


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


52 
	#__√ed_FILE


	)

53 
	~<°dio.h
>

57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


62 
£tgª¡
 ();

65 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

66 || 
deföed
 
__USE_XOPEN2K8


71 
ídgª¡
 ();

77 
group
 *
gëgª¡
 ();

80 #ifdef 
__USE_SVID


87 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

90 #ifde‡
__USE_GNU


97 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

98 
FILE
 *
__ª°ri˘
 
__f
);

105 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

111 
group
 *
gëg∫am
 (c⁄° *
__«me
);

113 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


115 #ifde‡
__USE_MISC


118 
	#NSS_BUFLEN_GROUP
 1024

	)

134 #ifde‡
__USE_GNU


135 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

136 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

137 
group
 **
__ª°ri˘
 
__ªsu…
);

144 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

145 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

146 
group
 **
__ª°ri˘
 
__ªsu…
);

152 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

153 
group
 *
__ª°ri˘
 
__ªsu…buf
,

154 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

155 
group
 **
__ª°ri˘
 
__ªsu…
);

157 #ifdef 
__USE_SVID


165 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

166 
group
 *
__ª°ri˘
 
__ªsu…buf
,

167 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

168 
group
 **
__ª°ri˘
 
__ªsu…
);

174 #ifdef 
__USE_BSD


176 
	#__√ed_size_t


	)

177 
	~<°ddef.h
>

180 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

190 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

191 
__gid_t
 *
__groups
, *
__ngroups
);

201 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

205 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/aio_abi.h

27 #i‚de‡
__LINUX__AIO_ABI_H


28 
	#__LINUX__AIO_ABI_H


	)

30 
	~<löux/ty≥s.h
>

31 
	~<asm/byã‹dî.h
>

33 
__kî√l_ul⁄g_t
 
	taio_c⁄ãxt_t
;

36 
	mIOCB_CMD_PREAD
 = 0,

37 
	mIOCB_CMD_PWRITE
 = 1,

38 
	mIOCB_CMD_FSYNC
 = 2,

39 
	mIOCB_CMD_FDSYNC
 = 3,

44 
	mIOCB_CMD_NOOP
 = 6,

45 
	mIOCB_CMD_PREADV
 = 7,

46 
	mIOCB_CMD_PWRITEV
 = 8,

55 
	#IOCB_FLAG_RESFD
 (1 << 0)

	)

58 
	sio_evít
 {

59 
__u64
 
	md©a
;

60 
__u64
 
	mobj
;

61 
__s64
 
	mªs
;

62 
__s64
 
	mªs2
;

65 #i‡
deföed
(
__BYTE_ORDER
Ë? __BYTE_ORDER =
__LITTLE_ENDIAN
 : defined(__LITTLE_ENDIAN)

66 
	#PADDED
(
x
,
y
Ëx, 
	)
y

67 #ñi‡
deföed
(
__BYTE_ORDER
Ë? __BYTE_ORDER =
__BIG_ENDIAN
 : defined(__BIG_ENDIAN)

68 
	#PADDED
(
x
,
y
Ëy, 
	)
x

70 #îr‹ 
edô
 
your
 
odd
 
byã‹dî
.

79 
	siocb
 {

81 
__u64
 
	maio_d©a
;

82 
__u32
 
PADDED
(
aio_key
, 
aio_ª£rved1
);

86 
__u16
 
	maio_lio_›code
;

87 
__s16
 
	maio_ªq¥io
;

88 
__u32
 
	maio_fûdes
;

90 
__u64
 
	maio_buf
;

91 
__u64
 
	maio_nbyãs
;

92 
__s64
 
	maio_off£t
;

95 
__u64
 
	maio_ª£rved2
;

98 
__u32
 
	maio_Êags
;

104 
__u32
 
	maio_ªsfd
;

107 #unde‡
IFBIG


108 #unde‡
IFLITTLE


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__unu£d
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


32 
	mIPPROTO_IP
 = 0,

33 
	#IPPROTO_IP
 
IPPROTO_IP


	)

34 
	mIPPROTO_HOPOPTS
 = 0,

35 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

36 
	mIPPROTO_ICMP
 = 1,

37 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

38 
	mIPPROTO_IGMP
 = 2,

39 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

40 
	mIPPROTO_IPIP
 = 4,

41 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

42 
	mIPPROTO_TCP
 = 6,

43 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

44 
	mIPPROTO_EGP
 = 8,

45 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

46 
	mIPPROTO_PUP
 = 12,

47 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

48 
	mIPPROTO_UDP
 = 17,

49 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

50 
	mIPPROTO_IDP
 = 22,

51 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

52 
	mIPPROTO_TP
 = 29,

53 
	#IPPROTO_TP
 
IPPROTO_TP


	)

54 
	mIPPROTO_DCCP
 = 33,

55 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

56 
	mIPPROTO_IPV6
 = 41,

57 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

58 
	mIPPROTO_ROUTING
 = 43,

59 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

60 
	mIPPROTO_FRAGMENT
 = 44,

61 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

62 
	mIPPROTO_RSVP
 = 46,

63 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

64 
	mIPPROTO_GRE
 = 47,

65 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

66 
	mIPPROTO_ESP
 = 50,

67 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

68 
	mIPPROTO_AH
 = 51,

69 
	#IPPROTO_AH
 
IPPROTO_AH


	)

70 
	mIPPROTO_ICMPV6
 = 58,

71 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

72 
	mIPPROTO_NONE
 = 59,

73 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

74 
	mIPPROTO_DSTOPTS
 = 60,

75 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

76 
	mIPPROTO_MTP
 = 92,

77 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


95 
uöt16_t
 
	tö_p‹t_t
;

100 
	mIPPORT_ECHO
 = 7,

101 
	mIPPORT_DISCARD
 = 9,

102 
	mIPPORT_SYSTAT
 = 11,

103 
	mIPPORT_DAYTIME
 = 13,

104 
	mIPPORT_NETSTAT
 = 15,

105 
	mIPPORT_FTP
 = 21,

106 
	mIPPORT_TELNET
 = 23,

107 
	mIPPORT_SMTP
 = 25,

108 
	mIPPORT_TIMESERVER
 = 37,

109 
	mIPPORT_NAMESERVER
 = 42,

110 
	mIPPORT_WHOIS
 = 43,

111 
	mIPPORT_MTP
 = 57,

113 
	mIPPORT_TFTP
 = 69,

114 
	mIPPORT_RJE
 = 77,

115 
	mIPPORT_FINGER
 = 79,

116 
	mIPPORT_TTYLINK
 = 87,

117 
	mIPPORT_SUPDUP
 = 95,

120 
	mIPPORT_EXECSERVER
 = 512,

121 
	mIPPORT_LOGINSERVER
 = 513,

122 
	mIPPORT_CMDSERVER
 = 514,

123 
	mIPPORT_EFSSERVER
 = 520,

126 
	mIPPORT_BIFFUDP
 = 512,

127 
	mIPPORT_WHOSERVER
 = 513,

128 
	mIPPORT_ROUTESERVER
 = 520,

131 
	mIPPORT_RESERVED
 = 1024,

134 
	mIPPORT_USERRESERVED
 = 5000

139 
uöt32_t
 
	tö_addr_t
;

140 
	sö_addr


142 
ö_addr_t
 
	ms_addr
;

151 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

152 
	#IN_CLASSA_NET
 0xff000000

	)

153 
	#IN_CLASSA_NSHIFT
 24

	)

154 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

155 
	#IN_CLASSA_MAX
 128

	)

157 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

158 
	#IN_CLASSB_NET
 0xffff0000

	)

159 
	#IN_CLASSB_NSHIFT
 16

	)

160 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

161 
	#IN_CLASSB_MAX
 65536

	)

163 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

164 
	#IN_CLASSC_NET
 0xffffff00

	)

165 
	#IN_CLASSC_NSHIFT
 8

	)

166 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

168 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

169 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

171 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

172 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

175 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

177 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

179 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

182 
	#IN_LOOPBACKNET
 127

	)

184 #i‚de‡
INADDR_LOOPBACK


185 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

189 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

190 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

191 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

192 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

196 
	sö6_addr


200 
uöt8_t
 
	m__u6_addr8
[16];

201 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


202 
uöt16_t
 
	m__u6_addr16
[8];

203 
uöt32_t
 
	m__u6_addr32
[4];

205 } 
	m__ö6_u
;

206 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

207 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


208 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

209 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

213 c⁄° 
ö6_addr
 
ö6addr_™y
;

214 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

215 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

216 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

218 
	#INET_ADDRSTRLEN
 16

	)

219 
	#INET6_ADDRSTRLEN
 46

	)

223 
	ssockaddr_ö


225 
__SOCKADDR_COMMON
 (
sö_
);

226 
ö_p‹t_t
 
	msö_p‹t
;

227 
ö_addr
 
	msö_addr
;

230 
	msö_zîo
[ (
sockaddr
) -

231 
__SOCKADDR_COMMON_SIZE
 -

232  (
ö_p‹t_t
) -

233  (
ö_addr
)];

237 
	ssockaddr_ö6


239 
__SOCKADDR_COMMON
 (
sö6_
);

240 
ö_p‹t_t
 
	msö6_p‹t
;

241 
uöt32_t
 
	msö6_Êowöfo
;

242 
ö6_addr
 
	msö6_addr
;

243 
uöt32_t
 
	msö6_sc›e_id
;

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


249 
	sù_mªq


252 
ö_addr
 
	mimr_mu…üddr
;

255 
ö_addr
 
	mimr_öãrÁ˚
;

258 
	sù_mªq_sour˚


261 
ö_addr
 
	mimr_mu…üddr
;

264 
ö_addr
 
	mimr_öãrÁ˚
;

267 
ö_addr
 
	mimr_sour˚addr
;

273 
	sùv6_mªq


276 
ö6_addr
 
	mùv6mr_mu…üddr
;

279 
	mùv6mr_öãrÁ˚
;

283 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


285 
	sgroup_ªq


288 
uöt32_t
 
	mgr_öãrÁ˚
;

291 
sockaddr_°‹age
 
	mgr_group
;

294 
	sgroup_sour˚_ªq


297 
uöt32_t
 
	mg§_öãrÁ˚
;

300 
sockaddr_°‹age
 
	mg§_group
;

303 
sockaddr_°‹age
 
	mg§_sour˚
;

308 
	sù_msfûãr


311 
ö_addr
 
	mimsf_mu…üddr
;

314 
ö_addr
 
	mimsf_öãrÁ˚
;

317 
uöt32_t
 
	mimsf_fmode
;

320 
uöt32_t
 
	mimsf_num§c
;

322 
ö_addr
 
	mimsf_¶i°
[1];

325 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

326 -  (
ö_addr
) \

327 + (
num§c
Ë*  (
ö_addr
))

	)

329 
	sgroup_fûãr


332 
uöt32_t
 
	mgf_öãrÁ˚
;

335 
sockaddr_°‹age
 
	mgf_group
;

338 
uöt32_t
 
	mgf_fmode
;

341 
uöt32_t
 
	mgf_num§c
;

343 
sockaddr_°‹age
 
	mgf_¶i°
[1];

346 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

347 -  (
sockaddr_°‹age
) \

348 + ((
num§c
) \

349 *  (
sockaddr_°‹age
)))

	)

354 
	~<bôs/ö.h
>

363 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

364 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

365 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

371 
	~<ídün.h
>

374 
	~<bôs/byãsw≠.h
>

376 #ifde‡
__OPTIMIZE__


380 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


383 
	#¡ohl
(
x
Ë(x)

	)

384 
	#¡ohs
(
x
Ë(x)

	)

385 
	#ht⁄l
(
x
Ë(x)

	)

386 
	#ht⁄s
(
x
Ë(x)

	)

388 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


389 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

390 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

391 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

397 #ifde‡
__GNUC__


398 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

399 (
__exãnsi⁄__
 \

400 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

401 
__a
->
s6_addr32
[0] == 0 \

402 && 
__a
->
s6_addr32
[1] == 0 \

403 && 
__a
->
s6_addr32
[2] == 0 \

404 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

406 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

407 (
__exãnsi⁄__
 \

408 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

409 
__a
->
s6_addr32
[0] == 0 \

410 && 
__a
->
s6_addr32
[1] == 0 \

411 && 
__a
->
s6_addr32
[2] == 0 \

412 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

414 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

415 (
__exãnsi⁄__
 \

416 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

417 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

419 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

424 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

425 (
__exãnsi⁄__
 \

426 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

427 
__a
->
s6_addr32
[0] == 0 \

428 && 
__a
->
s6_addr32
[1] == 0 \

429 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

431 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

432 (
__exãnsi⁄__
 \

433 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

434 
__a
->
s6_addr32
[0] == 0 \

435 && 
__a
->
s6_addr32
[1] == 0 \

436 && 
__a
->
s6_addr32
[2] == 0 \

437 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

439 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

440 (
__exãnsi⁄__
 \

441 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

442 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

443 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

444 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

445 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

446 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

448 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

449 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

450 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

451 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

452 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

454 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

455 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

456 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

457 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

458 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

460 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

461 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

462 =
	`ht⁄l
 (0x„800000))

	)

464 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

465 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

466 =
	`ht⁄l
 (0x„c00000))

	)

468 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

469 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

470 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

471 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

473 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

475 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

476 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

477 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

479 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

486 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

488 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


490 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

493 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

494 
__THROW
;

498 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

499 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

500 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

502 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

503 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

504 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

506 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

507 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

508 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

510 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

511 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

512 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

514 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

515 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

516 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

519 #ifde‡
__USE_GNU


520 
cmsghdr
;

523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 c⁄° 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 c⁄° 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 c⁄° 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

65 #ifde‡
__USE_MISC


66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

69 #ifde‡
__FAVOR_BSD


70 
u_öt32_t
 
	tt˝_£q
;

75 
	st˝hdr


77 
u_öt16_t
 
	mth_•‹t
;

78 
u_öt16_t
 
	mth_dp‹t
;

79 
t˝_£q
 
	mth_£q
;

80 
t˝_£q
 
	mth_ack
;

81 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


82 
u_öt8_t
 
	mth_x2
:4;

83 
u_öt8_t
 
	mth_off
:4;

85 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


86 
u_öt8_t
 
	mth_off
:4;

87 
u_öt8_t
 
	mth_x2
:4;

89 
u_öt8_t
 
	mth_Êags
;

90 
	#TH_FIN
 0x01

	)

91 
	#TH_SYN
 0x02

	)

92 
	#TH_RST
 0x04

	)

93 
	#TH_PUSH
 0x08

	)

94 
	#TH_ACK
 0x10

	)

95 
	#TH_URG
 0x20

	)

96 
u_öt16_t
 
	mth_wö
;

97 
u_öt16_t
 
	mth_sum
;

98 
u_öt16_t
 
	mth_uΩ
;

102 
	st˝hdr


104 
u_öt16_t
 
	msour˚
;

105 
u_öt16_t
 
	mde°
;

106 
u_öt32_t
 
	m£q
;

107 
u_öt32_t
 
	mack_£q
;

108 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


109 
u_öt16_t
 
	mªs1
:4;

110 
u_öt16_t
 
	mdoff
:4;

111 
u_öt16_t
 
	mfö
:1;

112 
u_öt16_t
 
	msyn
:1;

113 
u_öt16_t
 
	mr°
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mack
:1;

116 
u_öt16_t
 
	murg
:1;

117 
u_öt16_t
 
	mªs2
:2;

118 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


119 
u_öt16_t
 
	mdoff
:4;

120 
u_öt16_t
 
	mªs1
:4;

121 
u_öt16_t
 
	mªs2
:2;

122 
u_öt16_t
 
	murg
:1;

123 
u_öt16_t
 
	mack
:1;

124 
u_öt16_t
 
	mpsh
:1;

125 
u_öt16_t
 
	mr°
:1;

126 
u_öt16_t
 
	msyn
:1;

127 
u_öt16_t
 
	mfö
:1;

131 
u_öt16_t
 
	mwödow
;

132 
u_öt16_t
 
	mcheck
;

133 
u_öt16_t
 
	murg_±r
;

139 
	mTCP_ESTABLISHED
 = 1,

140 
	mTCP_SYN_SENT
,

141 
	mTCP_SYN_RECV
,

142 
	mTCP_FIN_WAIT1
,

143 
	mTCP_FIN_WAIT2
,

144 
	mTCP_TIME_WAIT
,

145 
	mTCP_CLOSE
,

146 
	mTCP_CLOSE_WAIT
,

147 
	mTCP_LAST_ACK
,

148 
	mTCP_LISTEN
,

149 
	mTCP_CLOSING


152 
	#TCPOPT_EOL
 0

	)

153 
	#TCPOPT_NOP
 1

	)

154 
	#TCPOPT_MAXSEG
 2

	)

155 
	#TCPOLEN_MAXSEG
 4

	)

156 
	#TCPOPT_WINDOW
 3

	)

157 
	#TCPOLEN_WINDOW
 3

	)

158 
	#TCPOPT_SACK_PERMITTED
 4

	)

159 
	#TCPOLEN_SACK_PERMITTED
 2

	)

160 
	#TCPOPT_SACK
 5

	)

161 
	#TCPOPT_TIMESTAMP
 8

	)

162 
	#TCPOLEN_TIMESTAMP
 10

	)

163 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

165 
	#TCPOPT_TSTAMP_HDR
 \

166 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

174 
	#TCP_MSS
 512

	)

176 
	#TCP_MAXWIN
 65535

	)

178 
	#TCP_MAX_WINSHIFT
 14

	)

180 
	#SOL_TCP
 6

	)

183 
	#TCPI_OPT_TIMESTAMPS
 1

	)

184 
	#TCPI_OPT_SACK
 2

	)

185 
	#TCPI_OPT_WSCALE
 4

	)

186 
	#TCPI_OPT_ECN
 8

	)

187 
	#TCPI_OPT_ECN_SEEN
 16

	)

188 
	#TCPI_OPT_SYN_DATA
 32

	)

191 
	et˝_ˇ_°©e


193 
	mTCP_CA_O≥n
 = 0,

194 
	mTCP_CA_Dis‹dî
 = 1,

195 
	mTCP_CA_CWR
 = 2,

196 
	mTCP_CA_Recovîy
 = 3,

197 
	mTCP_CA_Loss
 = 4

200 
	st˝_öfo


202 
u_öt8_t
 
	mt˝i_°©e
;

203 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

204 
u_öt8_t
 
	mt˝i_ªå™smôs
;

205 
u_öt8_t
 
	mt˝i_¥obes
;

206 
u_öt8_t
 
	mt˝i_backoff
;

207 
u_öt8_t
 
	mt˝i_›ti⁄s
;

208 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

210 
u_öt32_t
 
	mt˝i_πo
;

211 
u_öt32_t
 
	mt˝i_©o
;

212 
u_öt32_t
 
	mt˝i_¢d_mss
;

213 
u_öt32_t
 
	mt˝i_rcv_mss
;

215 
u_öt32_t
 
	mt˝i_u«cked
;

216 
u_öt32_t
 
	mt˝i_ßcked
;

217 
u_öt32_t
 
	mt˝i_lo°
;

218 
u_öt32_t
 
	mt˝i_ªå™s
;

219 
u_öt32_t
 
	mt˝i_Áckës
;

222 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

223 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

224 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

225 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

228 
u_öt32_t
 
	mt˝i_pmtu
;

229 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

230 
u_öt32_t
 
	mt˝i_πt
;

231 
u_öt32_t
 
	mt˝i_πtv¨
;

232 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

233 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

234 
u_öt32_t
 
	mt˝i_advmss
;

235 
u_öt32_t
 
	mt˝i_ª‹dîög
;

237 
u_öt32_t
 
	mt˝i_rcv_πt
;

238 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

240 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

245 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

247 
	st˝_md5sig


249 
sockaddr_°‹age
 
	mt˝m_addr
;

250 
u_öt16_t
 
	m__t˝m_∑d1
;

251 
u_öt16_t
 
	mt˝m_keyÀn
;

252 
u_öt32_t
 
	m__t˝m_∑d2
;

253 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

257 
	st˝_ª∑ú_›t


259 
u_öt32_t
 
	m›t_code
;

260 
u_öt32_t
 
	m›t_vÆ
;

266 
	mTCP_NO_QUEUE
,

267 
	mTCP_RECV_QUEUE
,

268 
	mTCP_SEND_QUEUE
,

269 
	mTCP_QUEUES_NR
,

273 
	#TCP_COOKIE_MIN
 8

	)

274 
	#TCP_COOKIE_MAX
 16

	)

275 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

278 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

279 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

283 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

284 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

286 
	#TCP_MSS_DEFAULT
 536U

	)

287 
	#TCP_MSS_DESIRED
 1220U

	)

289 
	st˝_cookõ_å™ß˘i⁄s


291 
u_öt16_t
 
	mt˝˘_Êags
;

292 
u_öt8_t
 
	m__t˝˘_∑d1
;

293 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

294 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

295 
u_öt16_t
 
	mt˝˘_u£d
;

296 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_SVID


94 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

102 
puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
gëpw«m
 (c⁄° *
__«me
);

118 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


139 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

144 
gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

149 
gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_SVID


163 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

171 #ifde‡
__USE_GNU


180 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

183 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

169 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

171 #ifde‡
__FAVOR_BSD


174 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 #ifde‡
__USE_XOPEN


177 #ifde‡
__GNUC__


178 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

181 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

187 #ifde‡
__USE_BSD


194 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

197 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

200 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

203 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

207 #ifde‡
__USE_MISC


208 
	#NSIG
 
_NSIG


	)

211 #ifde‡
__USE_GNU


212 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

216 #ifde‡
__USE_BSD


217 
__sigh™dÀr_t
 
	tsig_t
;

220 #ifde‡
__USE_POSIX


223 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

229 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

232 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__USE_GNU


240 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

243 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

244 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

247 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

248 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

253 
	~<bôs/siga˘i⁄.h
>

256 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

257 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

264 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

267 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

268 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

271 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

278 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

279 
	`__n⁄nuŒ
 ((1, 2));

281 #ifde‡
__USE_POSIX199309


286 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

294 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

295 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

296 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

297 
	`__n⁄nuŒ
 ((1));

301 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

302 
__THROW
;

307 #ifde‡
__USE_BSD


311 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

312 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

315 
	ssigvec


317 
__sigh™dÀr_t
 
sv_h™dÀr
;

318 
sv_mask
;

320 
sv_Êags
;

321 
	#sv_⁄°ack
 
sv_Êags


	)

325 
	#SV_ONSTACK
 (1 << 0)

	)

326 
	#SV_INTERRUPT
 (1 << 1)

	)

327 
	#SV_RESETHAND
 (1 << 2)

	)

335 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

336 
sigvec
 *
__ovec
Ë
__THROW
;

340 
	~<bôs/sigc⁄ãxt.h
>

343 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


349 
	#__√ed_size_t


	)

350 
	~<°ddef.h
>

355 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

357 
	~<bôs/sig°ack.h
>

358 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


360 
	~<sys/uc⁄ãxt.h
>

366 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

367 
__THROW
 
__©åibuã_dïªˇãd__
;

371 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

372 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

376 #ifde‡
__USE_XOPEN_EXTENDED


380 
	$sighﬁd
 (
__sig
Ë
__THROW
;

383 
	$sigªl£
 (
__sig
Ë
__THROW
;

386 
	$sigign‹e
 (
__sig
Ë
__THROW
;

389 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

392 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


395 
	~<bôs/±hªadty≥s.h
>

396 
	~<bôs/sigthªad.h
>

403 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

405 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

409 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

526 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

530 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

531 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

534 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 #ifdef 
__USE_GNU


541 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

542 
__loˇÀ_t
 
__loc
)

543 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

545 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

550 #ifdef 
__USE_BSD


553 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

554 c⁄° *
__ª°ri˘
 
__dñim
)

555 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

558 #ifdef 
__USE_XOPEN2K8


560 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

563 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

571 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

574 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 #ifdef 
__USE_GNU


580 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

581 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

584 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

587 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 #i‚de‡
ba£«me


594 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


595 "C++" *
	$ba£«me
 (*
__fûíame
)

596 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

597 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

600 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

606 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

607 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

608 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


628 
	~<bôs/°rög.h
>

631 
	~<bôs/°rög2.h
>

634 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


636 
	~<bôs/°rög3.h
>

640 
__END_DECLS


	@/usr/include/sys/epoll.h

18 #i‚def 
_SYS_EPOLL_H


19 
	#_SYS_EPOLL_H
 1

	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

25 
	~<bôs/sig£t.h
>

27 #i‚de‡
__sig£t_t_deföed


28 
	#__sig£t_t_deföed


	)

29 
__sig£t_t
 
	tsig£t_t
;

33 
	~<bôs/ïﬁl.h
>

35 #i‚de‡
__EPOLL_PACKED


36 
	#__EPOLL_PACKED


	)

40 
	eEPOLL_EVENTS


42 
	mEPOLLIN
 = 0x001,

43 
	#EPOLLIN
 
EPOLLIN


	)

44 
	mEPOLLPRI
 = 0x002,

45 
	#EPOLLPRI
 
EPOLLPRI


	)

46 
	mEPOLLOUT
 = 0x004,

47 
	#EPOLLOUT
 
EPOLLOUT


	)

48 
	mEPOLLRDNORM
 = 0x040,

49 
	#EPOLLRDNORM
 
EPOLLRDNORM


	)

50 
	mEPOLLRDBAND
 = 0x080,

51 
	#EPOLLRDBAND
 
EPOLLRDBAND


	)

52 
	mEPOLLWRNORM
 = 0x100,

53 
	#EPOLLWRNORM
 
EPOLLWRNORM


	)

54 
	mEPOLLWRBAND
 = 0x200,

55 
	#EPOLLWRBAND
 
EPOLLWRBAND


	)

56 
	mEPOLLMSG
 = 0x400,

57 
	#EPOLLMSG
 
EPOLLMSG


	)

58 
	mEPOLLERR
 = 0x008,

59 
	#EPOLLERR
 
EPOLLERR


	)

60 
	mEPOLLHUP
 = 0x010,

61 
	#EPOLLHUP
 
EPOLLHUP


	)

62 
	mEPOLLRDHUP
 = 0x2000,

63 
	#EPOLLRDHUP
 
EPOLLRDHUP


	)

64 
	mEPOLLWAKEUP
 = 1u << 29,

65 
	#EPOLLWAKEUP
 
EPOLLWAKEUP


	)

66 
	mEPOLLONESHOT
 = 1u << 30,

67 
	#EPOLLONESHOT
 
EPOLLONESHOT


	)

68 
	mEPOLLET
 = 1u << 31

69 
	#EPOLLET
 
EPOLLET


	)

74 
	#EPOLL_CTL_ADD
 1

	)

75 
	#EPOLL_CTL_DEL
 2

	)

76 
	#EPOLL_CTL_MOD
 3

	)

79 
	uïﬁl_d©a


81 *
	m±r
;

82 
	mfd
;

83 
uöt32_t
 
	mu32
;

84 
uöt64_t
 
	mu64
;

85 } 
	tïﬁl_d©a_t
;

87 
	sïﬁl_evít


89 
uöt32_t
 
	mevíts
;

90 
ïﬁl_d©a_t
 
	md©a
;

91 } 
	g__EPOLL_PACKED
;

94 
__BEGIN_DECLS


100 
	$ïﬁl_¸óã
 (
__size
Ë
__THROW
;

104 
	$ïﬁl_¸óã1
 (
__Êags
Ë
__THROW
;

113 
	$ïﬁl_˘l
 (
__ïfd
, 
__›
, 
__fd
,

114 
ïﬁl_evít
 *
__evít
Ë
__THROW
;

127 
	`ïﬁl_waô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

128 
__maxevíts
, 
__timeout
);

136 
	`ïﬁl_pwaô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

137 
__maxevíts
, 
__timeout
,

138 c⁄° 
__sig£t_t
 *
__ss
);

140 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‡!
deföed
 
__USE_SVID
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

28 
	~<bôs/ù˘y≥s.h
>

29 
	~<bôs/ùc.h
>

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 #i‚de‡
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

41 #i‚de‡
__mode_t_deföed


42 
__mode_t
 
	tmode_t
;

43 
	#__mode_t_deföed


	)

46 #i‚de‡
__key_t_deföed


47 
__key_t
 
	tkey_t
;

48 
	#__key_t_deföed


	)

51 
__BEGIN_DECLS


54 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

56 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/mount.h

21 #i‚de‡
_SYS_MOUNT_H


22 
	#_SYS_MOUNT_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/io˘l.h
>

27 
	#BLOCK_SIZE
 1024

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

35 
	mMS_RDONLY
 = 1,

36 
	#MS_RDONLY
 
MS_RDONLY


	)

37 
	mMS_NOSUID
 = 2,

38 
	#MS_NOSUID
 
MS_NOSUID


	)

39 
	mMS_NODEV
 = 4,

40 
	#MS_NODEV
 
MS_NODEV


	)

41 
	mMS_NOEXEC
 = 8,

42 
	#MS_NOEXEC
 
MS_NOEXEC


	)

43 
	mMS_SYNCHRONOUS
 = 16,

44 
	#MS_SYNCHRONOUS
 
MS_SYNCHRONOUS


	)

45 
	mMS_REMOUNT
 = 32,

46 
	#MS_REMOUNT
 
MS_REMOUNT


	)

47 
	mMS_MANDLOCK
 = 64,

48 
	#MS_MANDLOCK
 
MS_MANDLOCK


	)

49 
	mMS_DIRSYNC
 = 128,

50 
	#MS_DIRSYNC
 
MS_DIRSYNC


	)

51 
	mMS_NOATIME
 = 1024,

52 
	#MS_NOATIME
 
MS_NOATIME


	)

53 
	mMS_NODIRATIME
 = 2048,

54 
	#MS_NODIRATIME
 
MS_NODIRATIME


	)

55 
	mMS_BIND
 = 4096,

56 
	#MS_BIND
 
MS_BIND


	)

57 
	mMS_MOVE
 = 8192,

58 
	#MS_MOVE
 
MS_MOVE


	)

59 
	mMS_REC
 = 16384,

60 
	#MS_REC
 
MS_REC


	)

61 
	mMS_SILENT
 = 32768,

62 
	#MS_SILENT
 
MS_SILENT


	)

63 
	mMS_POSIXACL
 = 1 << 16,

64 
	#MS_POSIXACL
 
MS_POSIXACL


	)

65 
	mMS_UNBINDABLE
 = 1 << 17,

66 
	#MS_UNBINDABLE
 
MS_UNBINDABLE


	)

67 
	mMS_PRIVATE
 = 1 << 18,

68 
	#MS_PRIVATE
 
MS_PRIVATE


	)

69 
	mMS_SLAVE
 = 1 << 19,

70 
	#MS_SLAVE
 
MS_SLAVE


	)

71 
	mMS_SHARED
 = 1 << 20,

72 
	#MS_SHARED
 
MS_SHARED


	)

73 
	mMS_RELATIME
 = 1 << 21,

74 
	#MS_RELATIME
 
MS_RELATIME


	)

75 
	mMS_KERNMOUNT
 = 1 << 22,

76 
	#MS_KERNMOUNT
 
MS_KERNMOUNT


	)

77 
	mMS_I_VERSION
 = 1 << 23,

78 
	#MS_I_VERSION
 
MS_I_VERSION


	)

79 
	mMS_STRICTATIME
 = 1 << 24,

80 
	#MS_STRICTATIME
 
MS_STRICTATIME


	)

81 
	mMS_ACTIVE
 = 1 << 30,

82 
	#MS_ACTIVE
 
MS_ACTIVE


	)

83 
	mMS_NOUSER
 = 1 << 31

84 
	#MS_NOUSER
 
MS_NOUSER


	)

88 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

93 
	#MS_MGC_VAL
 0xc0ed0000

	)

94 
	#MS_MGC_MSK
 0xffff0000

	)

101 
	#BLKROSET
 
	`_IO
(0x12, 93Ë

	)

102 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

103 
	#BLKRRPART
 
	`_IO
(0x12, 95Ë

	)

104 
	#BLKGETSIZE
 
	`_IO
(0x12, 96Ë

	)

105 
	#BLKFLSBUF
 
	`_IO
(0x12, 97Ë

	)

106 
	#BLKRASET
 
	`_IO
(0x12, 98Ë

	)

107 
	#BLKRAGET
 
	`_IO
(0x12, 99Ë

	)

108 
	#BLKFRASET
 
	`_IO
(0x12,100Ë

	)

109 
	#BLKFRAGET
 
	`_IO
(0x12,101Ë

	)

110 
	#BLKSECTSET
 
	`_IO
(0x12,102Ë

	)

111 
	#BLKSECTGET
 
	`_IO
(0x12,103Ë

	)

112 
	#BLKSSZGET
 
	`_IO
(0x12,104Ë

	)

113 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

114 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

115 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

121 
	mMNT_FORCE
 = 1,

122 
	#MNT_FORCE
 
MNT_FORCE


	)

123 
	mMNT_DETACH
 = 2,

124 
	#MNT_DETACH
 
MNT_DETACH


	)

125 
	mMNT_EXPIRE
 = 4,

126 
	#MNT_EXPIRE
 
MNT_EXPIRE


	)

127 
	mUMOUNT_NOFOLLOW
 = 8

128 
	#UMOUNT_NOFOLLOW
 
UMOUNT_NOFOLLOW


	)

132 
__BEGIN_DECLS


135 
	$mou¡
 (c⁄° *
__•ecül_fûe
, c⁄° *
__dú
,

136 c⁄° *
__f°y≥
, 
__rwÊag
,

137 c⁄° *
__d©a
Ë
__THROW
;

140 
	$umou¡
 (c⁄° *
__•ecül_fûe
Ë
__THROW
;

143 
	$umou¡2
 (c⁄° *
__•ecül_fûe
, 
__Êags
Ë
__THROW
;

145 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‚de‡
NCARGS


54 #ifde‡
ARG_MAX


55 
	#NCARGS
 
ARG_MAX


	)

59 
	#NCARGS
 
INT_MAX


	)

65 #i‚de‡
NOGROUP


66 
	#NOGROUP
 65535

	)

68 #i‚de‡
NODEV


69 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

74 #i‚de‡
DEV_BSIZE


75 
	#DEV_BSIZE
 512

	)

80 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

81 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

82 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

83 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

86 #i‚de‡
howm™y


87 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

89 #ifde‡
__GNUC__


90 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

91 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

92 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

94 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

96 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

99 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

100 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/prctl.h

18 #i‚de‡
_SYS_PRCTL_H


19 
	#_SYS_PRCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<löux/¥˘l.h
>

24 
__BEGIN_DECLS


27 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

29 
__END_DECLS


	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/sem.h

18 #i‚de‡
_SYS_SEM_H


19 
	#_SYS_SEM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/£m.h
>

32 #ifde‡
__USE_GNU


33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

41 
	s£mbuf


43 
	m£m_num
;

44 
	m£m_›
;

45 
	m£m_Êg
;

49 
__BEGIN_DECLS


52 
	$£m˘l
 (
__£mid
, 
__£mnum
, 
__cmd
, ...Ë
__THROW
;

55 
	$£mgë
 (
key_t
 
__key
, 
__n£ms
, 
__£mÊg
Ë
__THROW
;

58 
	$£m›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
Ë
__THROW
;

60 #ifde‡
__USE_GNU


62 
	$£mtimed›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
,

63 c⁄° 
time•ec
 *
__timeout
Ë
__THROW
;

66 
__END_DECLS


	@/usr/include/sys/sendfile.h

19 #i‚de‡
_SYS_SENDFILE_H


20 
	#_SYS_SENDFILE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


32 #i‚de‡
__USE_FILE_OFFSET64


33 
ssize_t
 
	$£ndfûe
 (
__out_fd
, 
__ö_fd
, 
off_t
 *
__off£t
,

34 
size_t
 
__cou¡
Ë
__THROW
;

36 #ifde‡
__REDIRECT_NTH


37 
ssize_t
 
	`__REDIRECT_NTH
 (
£ndfûe
,

38 (
__out_fd
, 
__ö_fd
, 
__off64_t
 *
__off£t
,

39 
size_t
 
__cou¡
), 
£ndfûe64
);

41 
	#£ndfûe
 
£ndfûe64


	)

44 #ifde‡
__USE_LARGEFILE64


45 
ssize_t
 
	$£ndfûe64
 (
__out_fd
, 
__ö_fd
, 
__off64_t
 *
__off£t
,

46 
size_t
 
__cou¡
Ë
__THROW
;

49 
__END_DECLS


	@/usr/include/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	#__√ed_time_t


	)

34 
	~<time.h
>

36 #ifde‡
__USE_XOPEN


37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

44 
__BEGIN_DECLS


50 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

53 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

56 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

57 
__THROW
;

60 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_BSD


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 c⁄° 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/statvfs.h

19 #i‚def 
_SYS_STATVFS_H


20 
	#_SYS_STATVFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©vfs.h
>

27 #i‚de‡
__USE_FILE_OFFSET64


28 #i‚de‡
__fsblk˙t_t_deföed


29 
__fsblk˙t_t
 
	tfsblk˙t_t
;

30 
	#__fsblk˙t_t_deföed


	)

32 #i‚de‡
__fsfû˙t_t_deföed


33 
__fsfû˙t_t
 
	tfsfû˙t_t
;

34 
	#__fsfû˙t_t_deföed


	)

37 #i‚de‡
__fsblk˙t_t_deföed


38 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

39 
	#__fsblk˙t_t_deföed


	)

41 #i‚de‡
__fsfû˙t_t_deföed


42 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

43 
	#__fsfû˙t_t_deföed


	)

47 
	g__BEGIN_DECLS


50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$°©vfs
 (c⁄° *
__ª°ri˘
 
__fûe
,

52 
°©vfs
 *
__ª°ri˘
 
__buf
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

55 #ifde‡
__REDIRECT_NTH


56 
	`__REDIRECT_NTH
 (
°©vfs
,

57 (c⁄° *
__ª°ri˘
 
__fûe
,

58 
°©vfs
 *
__ª°ri˘
 
__buf
), 
°©vfs64
)

59 
	`__n⁄nuŒ
 ((1, 2));

61 
	#°©vfs
 
°©vfs64


	)

64 #ifde‡
__USE_LARGEFILE64


65 
	$°©vfs64
 (c⁄° *
__ª°ri˘
 
__fûe
,

66 
°©vfs64
 *
__ª°ri˘
 
__buf
)

67 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$f°©vfs
 (
__fûdes
, 
°©vfs
 *
__buf
)

74 
__THROW
 
	`__n⁄nuŒ
 ((2));

76 #ifde‡
__REDIRECT_NTH


77 
	`__REDIRECT_NTH
 (
f°©vfs
, (
__fûdes
, 
°©vfs
 *
__buf
),

78 
f°©vfs64
Ë
	`__n⁄nuŒ
 ((2));

80 
	#f°©vfs
 
f°©vfs64


	)

83 #ifde‡
__USE_LARGEFILE64


84 
	$f°©vfs64
 (
__fûdes
, 
°©vfs64
 *
__buf
)

85 
__THROW
 
	`__n⁄nuŒ
 ((2));

88 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/sysctl.h

18 #i‚def 
_SYS_SYSCTL_H


19 
	#_SYS_SYSCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

25 #i‚de‡
_LINUX_KERNEL_H


26 
	#_LINUX_KERNEL_H
 1

	)

27 
	#__undef_LINUX_KERNEL_H


	)

29 #i‚de‡
_LINUX_TYPES_H


30 
	#_LINUX_TYPES_H
 1

	)

31 
	#__undef_LINUX_TYPES_H


	)

33 #i‚de‡
_LINUX_LIST_H


34 
	#_LINUX_LIST_H
 1

	)

35 
	#__undef_LINUX_LIST_H


	)

37 #i‚de‡
__LINUX_COMPILER_H


38 
	#__LINUX_COMPILER_H
 1

	)

39 
	#__u£r


	)

40 
	#__undef__LINUX_COMPILER_H


	)

43 
	~<löux/sys˘l.h
>

45 #ifde‡
__undef_LINUX_KERNEL_H


46 #unde‡
_LINUX_KERNEL_H


47 #unde‡
__undef_LINUX_KERNEL_H


49 #ifde‡
__undef_LINUX_TYPES_H


50 #unde‡
_LINUX_TYPES_H


51 #unde‡
__undef_LINUX_TYPES_H


53 #ifde‡
__undef_LINUX_LIST_H


54 #unde‡
_LINUX_LIST_H


55 #unde‡
__undef_LINUX_LIST_H


57 #ifde‡
__undef__LINUX_COMPILER_H


58 #unde‡
__LINUX_COMPILER_H


59 #unde‡
__u£r


60 #unde‡
__undef__LINUX_COMPILER_H


63 
	~<bôs/sys˘l.h
>

65 
__BEGIN_DECLS


68 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

69 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_BSD


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_BSD


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_BSD


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_BSD


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_BSD


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/sys/un.h

18 #i‚def 
_SYS_UN_H


19 
	#_SYS_UN_H
 1

	)

21 
	~<sys/cdefs.h
>

24 
	~<bôs/sockaddr.h
>

26 
__BEGIN_DECLS


29 
	ssockaddr_un


31 
__SOCKADDR_COMMON
 (
sun_
);

32 
	msun_∑th
[108];

36 #ifde‡
__USE_MISC


37 
	~<°rög.h
>

40 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

41 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

44 
	g__END_DECLS


	@/usr/include/sys/utsname.h

22 #i‚def 
_SYS_UTSNAME_H


23 
	#_SYS_UTSNAME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ut¢ame.h
>

31 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


32 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

34 #i‚de‡
_UTSNAME_NODENAME_LENGTH


35 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

37 #i‚de‡
_UTSNAME_RELEASE_LENGTH


38 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

40 #i‚de‡
_UTSNAME_VERSION_LENGTH


41 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

43 #i‚de‡
_UTSNAME_MACHINE_LENGTH


44 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

48 
	sut¢ame


51 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

54 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

57 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

59 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

62 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

64 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

66 #ifde‡
__USE_GNU


67 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

69 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

74 #ifde‡
__USE_SVID


76 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

81 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/sys/vfs.h

4 
	~<sys/°©fs.h
>

	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

37 #ifdef 
__USE_BSD


42 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


43 
	#__WAIT_INT
(
°©us
) \

44 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

45 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

47 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

55 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


56 
	#__WAIT_STATUS
 *

	)

57 
	#__WAIT_STATUS_DEFN
 *

	)

62 
waô
 *
	m__u±r
;

63 *
	m__ùå
;

64 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

71 
	#__WAIT_STATUS
 *

	)

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	~<bôs/waô°©us.h
>

79 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

80 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

85 #ifde‡
__WIFCONTINUED


86 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifdef 
__USE_BSD


91 
	#WCOREFLAG
 
__WCOREFLAG


	)

92 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

93 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

94 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

98 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


101 
	mP_ALL
,

102 
	mP_PID
,

103 
	mP_PGID


104 } 
	tidty≥_t
;

113 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

115 #ifdef 
__USE_BSD


117 
	#WAIT_ANY
 (-1Ë

	)

118 
	#WAIT_MYPGRP
 0

	)

136 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


139 #i‚de‡
__id_t_deföed


140 
	~<bôs/ty≥s.h
>

141 
__id_t
 
	tid_t
;

142 
	#__id_t_deföed


	)

145 
	#__√ed_sigöfo_t


	)

146 
	~<bôs/sigöfo.h
>

159 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

160 
__›ti⁄s
);

163 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


166 
	grußge
;

173 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

174 
rußge
 * 
__ußge
Ë
__THROWNL
;

177 #ifde‡
__USE_BSD


179 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

180 
rußge
 *
__ußge
Ë
__THROWNL
;

184 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/epoll.h

18 #i‚def 
_SYS_EPOLL_H


25 
	mEPOLL_CLOEXEC
 = 02000000

26 
	#EPOLL_CLOEXEC
 
EPOLL_CLOEXEC


	)

29 
	#__EPOLL_PACKED
 
	`__©åibuã__
 ((
__∑cked__
))

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


27 
	#IP_OPTIONS
 4

	)

28 
	#IP_HDRINCL
 3

	)

29 
	#IP_TOS
 1

	)

30 
	#IP_TTL
 2

	)

31 
	#IP_RECVOPTS
 6

	)

33 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

34 
	#IP_RETOPTS
 7

	)

35 
	#IP_MULTICAST_IF
 32

	)

36 
	#IP_MULTICAST_TTL
 33

	)

37 
	#IP_MULTICAST_LOOP
 34

	)

38 
	#IP_ADD_MEMBERSHIP
 35

	)

39 
	#IP_DROP_MEMBERSHIP
 36

	)

40 
	#IP_UNBLOCK_SOURCE
 37

	)

41 
	#IP_BLOCK_SOURCE
 38

	)

42 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

43 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

44 
	#IP_MSFILTER
 41

	)

45 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


46 
	#MCAST_JOIN_GROUP
 42

	)

47 
	#MCAST_BLOCK_SOURCE
 43

	)

48 
	#MCAST_UNBLOCK_SOURCE
 44

	)

49 
	#MCAST_LEAVE_GROUP
 45

	)

50 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

51 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

52 
	#MCAST_MSFILTER
 48

	)

53 
	#IP_MULTICAST_ALL
 49

	)

54 
	#IP_UNICAST_IF
 50

	)

56 
	#MCAST_EXCLUDE
 0

	)

57 
	#MCAST_INCLUDE
 1

	)

60 
	#IP_ROUTER_ALERT
 5

	)

61 
	#IP_PKTINFO
 8

	)

62 
	#IP_PKTOPTIONS
 9

	)

63 
	#IP_PMTUDISC
 10

	)

64 
	#IP_MTU_DISCOVER
 10

	)

65 
	#IP_RECVERR
 11

	)

66 
	#IP_RECVTTL
 12

	)

67 
	#IP_RECVTOS
 13

	)

68 
	#IP_MTU
 14

	)

69 
	#IP_FREEBIND
 15

	)

70 
	#IP_IPSEC_POLICY
 16

	)

71 
	#IP_XFRM_POLICY
 17

	)

72 
	#IP_PASSSEC
 18

	)

73 
	#IP_TRANSPARENT
 19

	)

74 
	#IP_MULTICAST_ALL
 49

	)

77 
	#IP_ORIGDSTADDR
 20

	)

78 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

80 
	#IP_MINTTL
 21

	)

84 
	#IP_PMTUDISC_DONT
 0

	)

85 
	#IP_PMTUDISC_WANT
 1

	)

86 
	#IP_PMTUDISC_DO
 2

	)

87 
	#IP_PMTUDISC_PROBE
 3

	)

90 
	#SOL_IP
 0

	)

92 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

93 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

94 
	#IP_MAX_MEMBERSHIPS
 20

	)

96 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


100 
	sù_›ts


102 
ö_addr
 
	mù_d°
;

103 
	mù_›ts
[40];

107 
	sù_mªqn


109 
ö_addr
 
	mimr_mu…üddr
;

110 
ö_addr
 
	mimr_addªss
;

111 
	mimr_ifödex
;

115 
	sö_pktöfo


117 
	mùi_ifödex
;

118 
ö_addr
 
	mùi_•ec_d°
;

119 
ö_addr
 
	mùi_addr
;

126 
	#IPV6_ADDRFORM
 1

	)

127 
	#IPV6_2292PKTINFO
 2

	)

128 
	#IPV6_2292HOPOPTS
 3

	)

129 
	#IPV6_2292DSTOPTS
 4

	)

130 
	#IPV6_2292RTHDR
 5

	)

131 
	#IPV6_2292PKTOPTIONS
 6

	)

132 
	#IPV6_CHECKSUM
 7

	)

133 
	#IPV6_2292HOPLIMIT
 8

	)

135 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

137 
	#IPV6_NEXTHOP
 9

	)

138 
	#IPV6_AUTHHDR
 10

	)

139 
	#IPV6_UNICAST_HOPS
 16

	)

140 
	#IPV6_MULTICAST_IF
 17

	)

141 
	#IPV6_MULTICAST_HOPS
 18

	)

142 
	#IPV6_MULTICAST_LOOP
 19

	)

143 
	#IPV6_JOIN_GROUP
 20

	)

144 
	#IPV6_LEAVE_GROUP
 21

	)

145 
	#IPV6_ROUTER_ALERT
 22

	)

146 
	#IPV6_MTU_DISCOVER
 23

	)

147 
	#IPV6_MTU
 24

	)

148 
	#IPV6_RECVERR
 25

	)

149 
	#IPV6_V6ONLY
 26

	)

150 
	#IPV6_JOIN_ANYCAST
 27

	)

151 
	#IPV6_LEAVE_ANYCAST
 28

	)

152 
	#IPV6_IPSEC_POLICY
 34

	)

153 
	#IPV6_XFRM_POLICY
 35

	)

155 
	#IPV6_RECVPKTINFO
 49

	)

156 
	#IPV6_PKTINFO
 50

	)

157 
	#IPV6_RECVHOPLIMIT
 51

	)

158 
	#IPV6_HOPLIMIT
 52

	)

159 
	#IPV6_RECVHOPOPTS
 53

	)

160 
	#IPV6_HOPOPTS
 54

	)

161 
	#IPV6_RTHDRDSTOPTS
 55

	)

162 
	#IPV6_RECVRTHDR
 56

	)

163 
	#IPV6_RTHDR
 57

	)

164 
	#IPV6_RECVDSTOPTS
 58

	)

165 
	#IPV6_DSTOPTS
 59

	)

167 
	#IPV6_RECVTCLASS
 66

	)

168 
	#IPV6_TCLASS
 67

	)

171 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

172 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

173 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

174 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

177 
	#IPV6_PMTUDISC_DONT
 0

	)

178 
	#IPV6_PMTUDISC_WANT
 1

	)

179 
	#IPV6_PMTUDISC_DO
 2

	)

180 
	#IPV6_PMTUDISC_PROBE
 3

	)

183 
	#SOL_IPV6
 41

	)

184 
	#SOL_ICMPV6
 58

	)

187 
	#IPV6_RTHDR_LOOSE
 0

	)

188 
	#IPV6_RTHDR_STRICT
 1

	)

190 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

42 
	sùc_≥rm


44 
__key_t
 
	m__key
;

45 
__uid_t
 
	muid
;

46 
__gid_t
 
	mgid
;

47 
__uid_t
 
	mcuid
;

48 
__gid_t
 
	mcgid
;

49 
	mmode
;

50 
	m__∑d1
;

51 
	m__£q
;

52 
	m__∑d2
;

53 
__sysˇŒ_ul⁄g_t
 
	m__unu£d1
;

54 
__sysˇŒ_ul⁄g_t
 
	m__unu£d2
;

	@/usr/include/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/sem.h

18 #i‚de‡
_SYS_SEM_H


22 
	~<sys/ty≥s.h
>

25 
	#SEM_UNDO
 0x1000

	)

28 
	#GETPID
 11

	)

29 
	#GETVAL
 12

	)

30 
	#GETALL
 13

	)

31 
	#GETNCNT
 14

	)

32 
	#GETZCNT
 15

	)

33 
	#SETVAL
 16

	)

34 
	#SETALL
 17

	)

38 
	s£mid_ds


40 
ùc_≥rm
 
	m£m_≥rm
;

41 
__time_t
 
	m£m_Ÿime
;

42 
__sysˇŒ_ul⁄g_t
 
	m__unu£d1
;

43 
__time_t
 
	m£m_˘ime
;

44 
__sysˇŒ_ul⁄g_t
 
	m__unu£d2
;

45 
__sysˇŒ_ul⁄g_t
 
	m£m_n£ms
;

46 
__sysˇŒ_ul⁄g_t
 
	m__unu£d3
;

47 
__sysˇŒ_ul⁄g_t
 
	m__unu£d4
;

64 
	#_SEM_SEMUN_UNDEFINED
 1

	)

66 #ifde‡
__USE_MISC


69 
	#SEM_STAT
 18

	)

70 
	#SEM_INFO
 19

	)

72 
	s£möfo


74 
	m£mm≠
;

75 
	m£mmni
;

76 
	m£mmns
;

77 
	m£mmnu
;

78 
	m£mm¶
;

79 
	m£m›m
;

80 
	m£mume
;

81 
	m£musz
;

82 
	m£mvmx
;

83 
	m£m´m
;

	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

25 
	#SHM_R
 0400

	)

26 
	#SHM_W
 0200

	)

29 
	#SHM_RDONLY
 010000

	)

30 
	#SHM_RND
 020000

	)

31 
	#SHM_REMAP
 040000

	)

32 
	#SHM_EXEC
 0100000

	)

35 
	#SHM_LOCK
 11

	)

36 
	#SHM_UNLOCK
 12

	)

38 
	g__BEGIN_DECLS


41 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

42 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

46 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

49 
	sshmid_ds


51 
ùc_≥rm
 
shm_≥rm
;

52 
size_t
 
shm_£gsz
;

53 
__time_t
 
shm_©ime
;

54 #i‚de‡
__x86_64__


55 
__unu£d1
;

57 
__time_t
 
shm_dtime
;

58 #i‚de‡
__x86_64__


59 
__unu£d2
;

61 
__time_t
 
shm_˘ime
;

62 #i‚de‡
__x86_64__


63 
__unu£d3
;

65 
__pid_t
 
shm_˝id
;

66 
__pid_t
 
shm_Õid
;

67 
shm©t_t
 
shm_«âch
;

68 
__sysˇŒ_ul⁄g_t
 
__unu£d4
;

69 
__sysˇŒ_ul⁄g_t
 
__unu£d5
;

72 #ifde‡
__USE_MISC


75 
	#SHM_STAT
 13

	)

76 
	#SHM_INFO
 14

	)

79 
	#SHM_DEST
 01000

	)

80 
	#SHM_LOCKED
 02000

	)

81 
	#SHM_HUGETLB
 04000

	)

82 
	#SHM_NORESERVE
 010000

	)

84 
	sshmöfo


86 
__sysˇŒ_ul⁄g_t
 
shmmax
;

87 
__sysˇŒ_ul⁄g_t
 
shmmö
;

88 
__sysˇŒ_ul⁄g_t
 
shmmni
;

89 
__sysˇŒ_ul⁄g_t
 
shm£g
;

90 
__sysˇŒ_ul⁄g_t
 
shmÆl
;

91 
__sysˇŒ_ul⁄g_t
 
__unu£d1
;

92 
__sysˇŒ_ul⁄g_t
 
__unu£d2
;

93 
__sysˇŒ_ul⁄g_t
 
__unu£d3
;

94 
__sysˇŒ_ul⁄g_t
 
__unu£d4
;

97 
	sshm_öfo


99 
u£d_ids
;

100 
__sysˇŒ_ul⁄g_t
 
shm_tŸ
;

101 
__sysˇŒ_ul⁄g_t
 
shm_rss
;

102 
__sysˇŒ_ul⁄g_t
 
shm_swp
;

103 
__sysˇŒ_ul⁄g_t
 
sw≠_©ãm±s
;

104 
__sysˇŒ_ul⁄g_t
 
sw≠_suc˚s£s
;

109 
__END_DECLS


	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_CAN
 29

	)

72 
	#PF_TIPC
 30

	)

73 
	#PF_BLUETOOTH
 31

	)

74 
	#PF_IUCV
 32

	)

75 
	#PF_RXRPC
 33

	)

76 
	#PF_ISDN
 34

	)

77 
	#PF_PHONET
 35

	)

78 
	#PF_IEEE802154
 36

	)

79 
	#PF_CAIF
 37

	)

80 
	#PF_ALG
 38

	)

81 
	#PF_NFC
 39

	)

82 
	#PF_VSOCK
 40

	)

83 
	#PF_MAX
 41

	)

86 
	#AF_UNSPEC
 
PF_UNSPEC


	)

87 
	#AF_LOCAL
 
PF_LOCAL


	)

88 
	#AF_UNIX
 
PF_UNIX


	)

89 
	#AF_FILE
 
PF_FILE


	)

90 
	#AF_INET
 
PF_INET


	)

91 
	#AF_AX25
 
PF_AX25


	)

92 
	#AF_IPX
 
PF_IPX


	)

93 
	#AF_APPLETALK
 
PF_APPLETALK


	)

94 
	#AF_NETROM
 
PF_NETROM


	)

95 
	#AF_BRIDGE
 
PF_BRIDGE


	)

96 
	#AF_ATMPVC
 
PF_ATMPVC


	)

97 
	#AF_X25
 
PF_X25


	)

98 
	#AF_INET6
 
PF_INET6


	)

99 
	#AF_ROSE
 
PF_ROSE


	)

100 
	#AF_DEC√t
 
PF_DEC√t


	)

101 
	#AF_NETBEUI
 
PF_NETBEUI


	)

102 
	#AF_SECURITY
 
PF_SECURITY


	)

103 
	#AF_KEY
 
PF_KEY


	)

104 
	#AF_NETLINK
 
PF_NETLINK


	)

105 
	#AF_ROUTE
 
PF_ROUTE


	)

106 
	#AF_PACKET
 
PF_PACKET


	)

107 
	#AF_ASH
 
PF_ASH


	)

108 
	#AF_ECONET
 
PF_ECONET


	)

109 
	#AF_ATMSVC
 
PF_ATMSVC


	)

110 
	#AF_RDS
 
PF_RDS


	)

111 
	#AF_SNA
 
PF_SNA


	)

112 
	#AF_IRDA
 
PF_IRDA


	)

113 
	#AF_PPPOX
 
PF_PPPOX


	)

114 
	#AF_WANPIPE
 
PF_WANPIPE


	)

115 
	#AF_LLC
 
PF_LLC


	)

116 
	#AF_CAN
 
PF_CAN


	)

117 
	#AF_TIPC
 
PF_TIPC


	)

118 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

119 
	#AF_IUCV
 
PF_IUCV


	)

120 
	#AF_RXRPC
 
PF_RXRPC


	)

121 
	#AF_ISDN
 
PF_ISDN


	)

122 
	#AF_PHONET
 
PF_PHONET


	)

123 
	#AF_IEEE802154
 
PF_IEEE802154


	)

124 
	#AF_CAIF
 
PF_CAIF


	)

125 
	#AF_ALG
 
PF_ALG


	)

126 
	#AF_NFC
 
PF_NFC


	)

127 
	#AF_VSOCK
 
PF_VSOCK


	)

128 
	#AF_MAX
 
PF_MAX


	)

134 
	#SOL_RAW
 255

	)

135 
	#SOL_DECNET
 261

	)

136 
	#SOL_X25
 262

	)

137 
	#SOL_PACKET
 263

	)

138 
	#SOL_ATM
 264

	)

139 
	#SOL_AAL
 265

	)

140 
	#SOL_IRDA
 266

	)

143 
	#SOMAXCONN
 128

	)

146 
	~<bôs/sockaddr.h
>

149 
	ssockaddr


151 
__SOCKADDR_COMMON
 (
ß_
);

152 
	mß_d©a
[14];

158 
	#__ss_Æig¡y≥
 

	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000,

209 
	#MSG_MORE
 
MSG_MORE


	)

210 
	mMSG_WAITFORONE
 = 0x10000,

211 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

212 
	mMSG_FASTOPEN
 = 0x20000000,

213 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

215 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

218 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

224 
	smsghdr


226 *
	mmsg_«me
;

227 
sockÀn_t
 
	mmsg_«mñí
;

229 
iovec
 *
	mmsg_iov
;

230 
size_t
 
	mmsg_iovÀn
;

232 *
	mmsg_c⁄åﬁ
;

233 
size_t
 
	mmsg_c⁄åﬁÀn
;

238 
	mmsg_Êags
;

242 
	scmsghdr


244 
size_t
 
	mcmsg_Àn
;

249 
	mcmsg_Àvñ
;

250 
	mcmsg_ty≥
;

251 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

252 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

257 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

258 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

260 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

262 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

263 
	#CMSG_FIRSTHDR
(
mhdr
) \

264 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

265 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

266 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

267 & (
size_t
Ë~( (size_tË- 1))

	)

268 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

269 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

270 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

272 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

273 
cmsghdr
 *
__cmsg
Ë
__THROW
;

274 #ifde‡
__USE_EXTERN_INLINES


275 #i‚de‡
_EXTERN_INLINE


276 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

278 
_EXTERN_INLINE
 
cmsghdr
 *

279 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

281 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

283  (
cmsghdr
 *) 0;

285 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

286 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

287 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


288 + 
__mhdr
->
msg_c⁄åﬁÀn
)

289 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

290 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

292  (
cmsghdr
 *) 0;

293  
__cmsg
;

294 
	}
}

301 
	mSCM_RIGHTS
 = 0x01

302 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

303 #ifde‡
__USE_GNU


304 , 
	mSCM_CREDENTIALS
 = 0x02

305 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

309 #ifde‡
__USE_GNU


311 
	su¸ed


313 
pid_t
 
	mpid
;

314 
uid_t
 
	muid
;

315 
gid_t
 
	mgid
;

320 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


321 #i‚de‡
FIOGETOWN


322 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

324 #i‚de‡
FIOSETOWN


325 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

327 #i‚de‡
SIOCATMARK


328 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

330 #i‚de‡
SIOCGPGRP


331 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

333 #i‚de‡
SIOCGSTAMP


334 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

336 #i‚de‡
SIOCGSTAMPNS


337 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

339 #i‚de‡
SIOCSPGRP


340 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

345 
	~<asm/sockë.h
>

347 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


348 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


349 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


350 #unde‡
FIOGETOWN


352 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


354 #unde‡
FIOSETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


357 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


358 #unde‡
SIOCATMARK


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


361 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


362 #unde‡
SIOCGPGRP


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


366 #unde‡
SIOCGSTAMP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


370 #unde‡
SIOCGSTAMPNS


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


373 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


374 #unde‡
SIOCSPGRP


379 
	slögî


381 
	ml_⁄off
;

382 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/statvfs.h

18 #i‚de‡
_SYS_STATVFS_H


22 
	~<bôs/ty≥s.h
>

24 #i‡(
__WORDSIZE
 == 32 \

25 && (!
deföed
 
	g__SYSCALL_WORDSIZE
 || __SYSCALL_WORDSIZE == 32))

26 
	#_STATVFSBUF_F_UNUSED


	)

29 
	s°©vfs


31 
f_bsize
;

32 
	mf_‰size
;

33 #i‚de‡
__USE_FILE_OFFSET64


34 
__fsblk˙t_t
 
	mf_blocks
;

35 
__fsblk˙t_t
 
	mf_b‰ì
;

36 
__fsblk˙t_t
 
	mf_bavaû
;

37 
__fsfû˙t_t
 
	mf_fûes
;

38 
__fsfû˙t_t
 
	mf_f‰ì
;

39 
__fsfû˙t_t
 
	mf_Ávaû
;

41 
__fsblk˙t64_t
 
	mf_blocks
;

42 
__fsblk˙t64_t
 
	mf_b‰ì
;

43 
__fsblk˙t64_t
 
	mf_bavaû
;

44 
__fsfû˙t64_t
 
	mf_fûes
;

45 
__fsfû˙t64_t
 
	mf_f‰ì
;

46 
__fsfû˙t64_t
 
	mf_Ávaû
;

48 
	mf_fsid
;

49 #ifde‡
_STATVFSBUF_F_UNUSED


50 
	m__f_unu£d
;

52 
	mf_Êag
;

53 
	mf_«memax
;

54 
	m__f_•¨e
[6];

57 #ifde‡
__USE_LARGEFILE64


58 
	s°©vfs64


60 
	mf_bsize
;

61 
	mf_‰size
;

62 
__fsblk˙t64_t
 
	mf_blocks
;

63 
__fsblk˙t64_t
 
	mf_b‰ì
;

64 
__fsblk˙t64_t
 
	mf_bavaû
;

65 
__fsfû˙t64_t
 
	mf_fûes
;

66 
__fsfû˙t64_t
 
	mf_f‰ì
;

67 
__fsfû˙t64_t
 
	mf_Ávaû
;

68 
	mf_fsid
;

69 #ifde‡
_STATVFSBUF_F_UNUSED


70 
	m__f_unu£d
;

72 
	mf_Êag
;

73 
	mf_«memax
;

74 
	m__f_•¨e
[6];

82 
	mST_RDONLY
 = 1,

83 
	#ST_RDONLY
 
ST_RDONLY


	)

84 
	mST_NOSUID
 = 2

85 
	#ST_NOSUID
 
ST_NOSUID


	)

86 #ifde‡
__USE_GNU


88 
	mST_NODEV
 = 4,

89 
	#ST_NODEV
 
ST_NODEV


	)

90 
	mST_NOEXEC
 = 8,

91 
	#ST_NOEXEC
 
ST_NOEXEC


	)

92 
	mST_SYNCHRONOUS
 = 16,

93 
	#ST_SYNCHRONOUS
 
ST_SYNCHRONOUS


	)

94 
	mST_MANDLOCK
 = 64,

95 
	#ST_MANDLOCK
 
ST_MANDLOCK


	)

96 
	mST_WRITE
 = 128,

97 
	#ST_WRITE
 
ST_WRITE


	)

98 
	mST_APPEND
 = 256,

99 
	#ST_APPEND
 
ST_APPEND


	)

100 
	mST_IMMUTABLE
 = 512,

101 
	#ST_IMMUTABLE
 
ST_IMMUTABLE


	)

102 
	mST_NOATIME
 = 1024,

103 
	#ST_NOATIME
 
ST_NOATIME


	)

104 
	mST_NODIRATIME
 = 2048,

105 
	#ST_NODIRATIME
 
ST_NODIRATIME


	)

106 
	mST_RELATIME
 = 4096

107 
	#ST_RELATIME
 
ST_RELATIME


	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

13 
	#SYS_ac˘
 
__NR_ac˘


	)

14 
	#SYS_add_key
 
__NR_add_key


	)

15 
	#SYS_adjtimex
 
__NR_adjtimex


	)

16 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

17 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

18 
	#SYS_bdÊush
 
__NR_bdÊush


	)

19 
	#SYS_bpf
 
__NR_bpf


	)

20 
	#SYS_bªak
 
__NR_bªak


	)

21 
	#SYS_brk
 
__NR_brk


	)

22 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

23 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

24 
	#SYS_chdú
 
__NR_chdú


	)

25 
	#SYS_chmod
 
__NR_chmod


	)

26 
	#SYS_chown
 
__NR_chown


	)

27 
	#SYS_chown32
 
__NR_chown32


	)

28 
	#SYS_chroŸ
 
__NR_chroŸ


	)

29 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

30 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

31 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

32 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

33 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

34 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

35 
	#SYS_˛o£
 
__NR_˛o£


	)

36 
	#SYS_¸ót
 
__NR_¸ót


	)

37 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

38 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

39 
	#SYS_dup
 
__NR_dup


	)

40 
	#SYS_dup2
 
__NR_dup2


	)

41 
	#SYS_dup3
 
__NR_dup3


	)

42 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

43 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

44 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

45 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

46 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

47 
	#SYS_evítfd
 
__NR_evítfd


	)

48 
	#SYS_evítfd2
 
__NR_evítfd2


	)

49 
	#SYS_execve
 
__NR_execve


	)

50 
	#SYS_exô
 
__NR_exô


	)

51 
	#SYS_exô_group
 
__NR_exô_group


	)

52 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

53 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

54 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

55 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

56 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

57 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

58 
	#SYS_fchdú
 
__NR_fchdú


	)

59 
	#SYS_fchmod
 
__NR_fchmod


	)

60 
	#SYS_fchmod©
 
__NR_fchmod©


	)

61 
	#SYS_fchown
 
__NR_fchown


	)

62 
	#SYS_fchown32
 
__NR_fchown32


	)

63 
	#SYS_fchow«t
 
__NR_fchow«t


	)

64 
	#SYS_f˙é
 
__NR_f˙é


	)

65 
	#SYS_f˙é64
 
__NR_f˙é64


	)

66 
	#SYS_fd©async
 
__NR_fd©async


	)

67 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

68 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

69 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

70 
	#SYS_Êock
 
__NR_Êock


	)

71 
	#SYS_f‹k
 
__NR_f‹k


	)

72 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

73 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

74 
	#SYS_f°©
 
__NR_f°©


	)

75 
	#SYS_f°©64
 
__NR_f°©64


	)

76 
	#SYS_f°©©64
 
__NR_f°©©64


	)

77 
	#SYS_f°©fs
 
__NR_f°©fs


	)

78 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

79 
	#SYS_fsync
 
__NR_fsync


	)

80 
	#SYS_·ime
 
__NR_·ime


	)

81 
	#SYS_·runˇã
 
__NR_·runˇã


	)

82 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

83 
	#SYS_fuãx
 
__NR_fuãx


	)

84 
	#SYS_futimeßt
 
__NR_futimeßt


	)

85 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

86 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

87 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

88 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

89 
	#SYS_gë˝u
 
__NR_gë˝u


	)

90 
	#SYS_gëcwd
 
__NR_gëcwd


	)

91 
	#SYS_gëdíts
 
__NR_gëdíts


	)

92 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

93 
	#SYS_gëegid
 
__NR_gëegid


	)

94 
	#SYS_gëegid32
 
__NR_gëegid32


	)

95 
	#SYS_gëeuid
 
__NR_gëeuid


	)

96 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

97 
	#SYS_gëgid
 
__NR_gëgid


	)

98 
	#SYS_gëgid32
 
__NR_gëgid32


	)

99 
	#SYS_gëgroups
 
__NR_gëgroups


	)

100 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

101 
	#SYS_gëôimî
 
__NR_gëôimî


	)

102 
	#SYS_gëpgid
 
__NR_gëpgid


	)

103 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

104 
	#SYS_gëpid
 
__NR_gëpid


	)

105 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

106 
	#SYS_gëµid
 
__NR_gëµid


	)

107 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

108 
	#SYS_gëøndom
 
__NR_gëøndom


	)

109 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

110 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

111 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

112 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

113 
	#SYS_gëæimô
 
__NR_gëæimô


	)

114 
	#SYS_gërußge
 
__NR_gërußge


	)

115 
	#SYS_gësid
 
__NR_gësid


	)

116 
	#SYS_gëtid
 
__NR_gëtid


	)

117 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

118 
	#SYS_gëuid
 
__NR_gëuid


	)

119 
	#SYS_gëuid32
 
__NR_gëuid32


	)

120 
	#SYS_gëx©å
 
__NR_gëx©å


	)

121 
	#SYS_gây
 
__NR_gây


	)

122 
	#SYS_idÀ
 
__NR_idÀ


	)

123 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

124 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

125 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

126 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

127 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

128 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

129 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

130 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

131 
	#SYS_io_£tup
 
__NR_io_£tup


	)

132 
	#SYS_io_submô
 
__NR_io_submô


	)

133 
	#SYS_io˘l
 
__NR_io˘l


	)

134 
	#SYS_i›îm
 
__NR_i›îm


	)

135 
	#SYS_i›l
 
__NR_i›l


	)

136 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

137 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

138 
	#SYS_ùc
 
__NR_ùc


	)

139 
	#SYS_kcmp
 
__NR_kcmp


	)

140 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

141 
	#SYS_key˘l
 
__NR_key˘l


	)

142 
	#SYS_kûl
 
__NR_kûl


	)

143 
	#SYS_lchown
 
__NR_lchown


	)

144 
	#SYS_lchown32
 
__NR_lchown32


	)

145 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

146 
	#SYS_lök
 
__NR_lök


	)

147 
	#SYS_lök©
 
__NR_lök©


	)

148 
	#SYS_li°x©å
 
__NR_li°x©å


	)

149 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

150 
	#SYS_lock
 
__NR_lock


	)

151 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

152 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

153 
	#SYS_l£ek
 
__NR_l£ek


	)

154 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

155 
	#SYS_l°©
 
__NR_l°©


	)

156 
	#SYS_l°©64
 
__NR_l°©64


	)

157 
	#SYS_madvi£
 
__NR_madvi£


	)

158 
	#SYS_mböd
 
__NR_mböd


	)

159 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

160 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

161 
	#SYS_möc‹e
 
__NR_möc‹e


	)

162 
	#SYS_mkdú
 
__NR_mkdú


	)

163 
	#SYS_mkdú©
 
__NR_mkdú©


	)

164 
	#SYS_mknod
 
__NR_mknod


	)

165 
	#SYS_mknod©
 
__NR_mknod©


	)

166 
	#SYS_mlock
 
__NR_mlock


	)

167 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

168 
	#SYS_mm≠
 
__NR_mm≠


	)

169 
	#SYS_mm≠2
 
__NR_mm≠2


	)

170 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

171 
	#SYS_mou¡
 
__NR_mou¡


	)

172 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

173 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

174 
	#SYS_mpx
 
__NR_mpx


	)

175 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

176 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

177 
	#SYS_mq_›í
 
__NR_mq_›í


	)

178 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

179 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

180 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

181 
	#SYS_mªm≠
 
__NR_mªm≠


	)

182 
	#SYS_msync
 
__NR_msync


	)

183 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

184 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

185 
	#SYS_munm≠
 
__NR_munm≠


	)

186 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

187 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

188 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

189 
	#SYS_ni˚
 
__NR_ni˚


	)

190 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

191 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

192 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

193 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

194 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

195 
	#SYS_›í
 
__NR_›í


	)

196 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

197 
	#SYS_›í©
 
__NR_›í©


	)

198 
	#SYS_∑u£
 
__NR_∑u£


	)

199 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

200 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

201 
	#SYS_pùe
 
__NR_pùe


	)

202 
	#SYS_pùe2
 
__NR_pùe2


	)

203 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

204 
	#SYS_pﬁl
 
__NR_pﬁl


	)

205 
	#SYS_µﬁl
 
__NR_µﬁl


	)

206 
	#SYS_¥˘l
 
__NR_¥˘l


	)

207 
	#SYS_¥ód64
 
__NR_¥ód64


	)

208 
	#SYS_¥ódv
 
__NR_¥ódv


	)

209 
	#SYS_¥limô64
 
__NR_¥limô64


	)

210 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

211 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

212 
	#SYS_¥of
 
__NR_¥of


	)

213 
	#SYS_¥ofû
 
__NR_¥ofû


	)

214 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

215 
	#SYS_±ø˚
 
__NR_±ø˚


	)

216 
	#SYS_puçmsg
 
__NR_puçmsg


	)

217 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

218 
	#SYS_pwrôev
 
__NR_pwrôev


	)

219 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

220 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

221 
	#SYS_ªad
 
__NR_ªad


	)

222 
	#SYS_ªadahód
 
__NR_ªadahód


	)

223 
	#SYS_ªaddú
 
__NR_ªaddú


	)

224 
	#SYS_ªadlök
 
__NR_ªadlök


	)

225 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

226 
	#SYS_ªadv
 
__NR_ªadv


	)

227 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

228 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

229 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

230 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

231 
	#SYS_ª«me
 
__NR_ª«me


	)

232 
	#SYS_ª«mót
 
__NR_ª«mót


	)

233 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

234 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

235 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

236 
	#SYS_rmdú
 
__NR_rmdú


	)

237 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

238 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

239 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

240 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

241 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

242 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

243 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

244 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

245 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

246 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

247 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

248 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

249 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

250 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

251 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

252 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

253 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

254 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

255 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

256 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

257 
	#SYS_£ccomp
 
__NR_£ccomp


	)

258 
	#SYS_£À˘
 
__NR_£À˘


	)

259 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

260 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

261 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

262 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

263 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

264 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

265 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

266 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

267 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

268 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

269 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

270 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

271 
	#SYS_£tgid
 
__NR_£tgid


	)

272 
	#SYS_£tgid32
 
__NR_£tgid32


	)

273 
	#SYS_£tgroups
 
__NR_£tgroups


	)

274 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

275 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

276 
	#SYS_£tôimî
 
__NR_£tôimî


	)

277 
	#SYS_£äs
 
__NR_£äs


	)

278 
	#SYS_£çgid
 
__NR_£çgid


	)

279 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

280 
	#SYS_£åegid
 
__NR_£åegid


	)

281 
	#SYS_£åegid32
 
__NR_£åegid32


	)

282 
	#SYS_£åesgid
 
__NR_£åesgid


	)

283 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

284 
	#SYS_£åesuid
 
__NR_£åesuid


	)

285 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

286 
	#SYS_£åeuid
 
__NR_£åeuid


	)

287 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

288 
	#SYS_£ålimô
 
__NR_£ålimô


	)

289 
	#SYS_£tsid
 
__NR_£tsid


	)

290 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

291 
	#SYS_£tuid
 
__NR_£tuid


	)

292 
	#SYS_£tuid32
 
__NR_£tuid32


	)

293 
	#SYS_£tx©å
 
__NR_£tx©å


	)

294 
	#SYS_sgëmask
 
__NR_sgëmask


	)

295 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

296 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

297 
	#SYS_sig«l
 
__NR_sig«l


	)

298 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

299 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

300 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

301 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

302 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

303 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

304 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

305 
	#SYS_•li˚
 
__NR_•li˚


	)

306 
	#SYS_s£tmask
 
__NR_s£tmask


	)

307 
	#SYS_°©
 
__NR_°©


	)

308 
	#SYS_°©64
 
__NR_°©64


	)

309 
	#SYS_°©fs
 
__NR_°©fs


	)

310 
	#SYS_°©fs64
 
__NR_°©fs64


	)

311 
	#SYS_°ime
 
__NR_°ime


	)

312 
	#SYS_°ty
 
__NR_°ty


	)

313 
	#SYS_sw≠off
 
__NR_sw≠off


	)

314 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

315 
	#SYS_symlök
 
__NR_symlök


	)

316 
	#SYS_symlök©
 
__NR_symlök©


	)

317 
	#SYS_sync
 
__NR_sync


	)

318 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

319 
	#SYS_syncfs
 
__NR_syncfs


	)

320 
	#SYS_sysfs
 
__NR_sysfs


	)

321 
	#SYS_sysöfo
 
__NR_sysöfo


	)

322 
	#SYS_sy¶og
 
__NR_sy¶og


	)

323 
	#SYS_ãe
 
__NR_ãe


	)

324 
	#SYS_tgkûl
 
__NR_tgkûl


	)

325 
	#SYS_time
 
__NR_time


	)

326 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

327 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

328 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

329 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

330 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

331 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

332 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

333 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

334 
	#SYS_times
 
__NR_times


	)

335 
	#SYS_tkûl
 
__NR_tkûl


	)

336 
	#SYS_åunˇã
 
__NR_åunˇã


	)

337 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

338 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

339 
	#SYS_ulimô
 
__NR_ulimô


	)

340 
	#SYS_umask
 
__NR_umask


	)

341 
	#SYS_umou¡
 
__NR_umou¡


	)

342 
	#SYS_umou¡2
 
__NR_umou¡2


	)

343 
	#SYS_u«me
 
__NR_u«me


	)

344 
	#SYS_u∆ök
 
__NR_u∆ök


	)

345 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

346 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

347 
	#SYS_u£lib
 
__NR_u£lib


	)

348 
	#SYS_u°©
 
__NR_u°©


	)

349 
	#SYS_utime
 
__NR_utime


	)

350 
	#SYS_utimíßt
 
__NR_utimíßt


	)

351 
	#SYS_utimes
 
__NR_utimes


	)

352 
	#SYS_vf‹k
 
__NR_vf‹k


	)

353 
	#SYS_vh™gup
 
__NR_vh™gup


	)

354 
	#SYS_vm86
 
__NR_vm86


	)

355 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

356 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

357 
	#SYS_v£rvî
 
__NR_v£rvî


	)

358 
	#SYS_waô4
 
__NR_waô4


	)

359 
	#SYS_waôid
 
__NR_waôid


	)

360 
	#SYS_waôpid
 
__NR_waôpid


	)

361 
	#SYS_wrôe
 
__NR_wrôe


	)

362 
	#SYS_wrôev
 
__NR_wrôev


	)

364 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


365 
	#SYS__sys˘l
 
__NR__sys˘l


	)

366 
	#SYS_ac˚±
 
__NR_ac˚±


	)

367 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

368 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

369 
	#SYS_ac˘
 
__NR_ac˘


	)

370 
	#SYS_add_key
 
__NR_add_key


	)

371 
	#SYS_adjtimex
 
__NR_adjtimex


	)

372 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

373 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

374 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

375 
	#SYS_böd
 
__NR_böd


	)

376 
	#SYS_bpf
 
__NR_bpf


	)

377 
	#SYS_brk
 
__NR_brk


	)

378 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

379 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

380 
	#SYS_chdú
 
__NR_chdú


	)

381 
	#SYS_chmod
 
__NR_chmod


	)

382 
	#SYS_chown
 
__NR_chown


	)

383 
	#SYS_chroŸ
 
__NR_chroŸ


	)

384 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

385 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

386 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

387 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

388 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

389 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

390 
	#SYS_˛o£
 
__NR_˛o£


	)

391 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

392 
	#SYS_¸ót
 
__NR_¸ót


	)

393 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

394 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

395 
	#SYS_dup
 
__NR_dup


	)

396 
	#SYS_dup2
 
__NR_dup2


	)

397 
	#SYS_dup3
 
__NR_dup3


	)

398 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

399 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

400 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

401 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

402 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

403 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

404 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

405 
	#SYS_evítfd
 
__NR_evítfd


	)

406 
	#SYS_evítfd2
 
__NR_evítfd2


	)

407 
	#SYS_execve
 
__NR_execve


	)

408 
	#SYS_exô
 
__NR_exô


	)

409 
	#SYS_exô_group
 
__NR_exô_group


	)

410 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

411 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

412 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

413 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

414 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

415 
	#SYS_fchdú
 
__NR_fchdú


	)

416 
	#SYS_fchmod
 
__NR_fchmod


	)

417 
	#SYS_fchmod©
 
__NR_fchmod©


	)

418 
	#SYS_fchown
 
__NR_fchown


	)

419 
	#SYS_fchow«t
 
__NR_fchow«t


	)

420 
	#SYS_f˙é
 
__NR_f˙é


	)

421 
	#SYS_fd©async
 
__NR_fd©async


	)

422 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

423 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

424 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

425 
	#SYS_Êock
 
__NR_Êock


	)

426 
	#SYS_f‹k
 
__NR_f‹k


	)

427 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

428 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

429 
	#SYS_f°©
 
__NR_f°©


	)

430 
	#SYS_f°©fs
 
__NR_f°©fs


	)

431 
	#SYS_fsync
 
__NR_fsync


	)

432 
	#SYS_·runˇã
 
__NR_·runˇã


	)

433 
	#SYS_fuãx
 
__NR_fuãx


	)

434 
	#SYS_futimeßt
 
__NR_futimeßt


	)

435 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

436 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

437 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

438 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

439 
	#SYS_gë˝u
 
__NR_gë˝u


	)

440 
	#SYS_gëcwd
 
__NR_gëcwd


	)

441 
	#SYS_gëdíts
 
__NR_gëdíts


	)

442 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

443 
	#SYS_gëegid
 
__NR_gëegid


	)

444 
	#SYS_gëeuid
 
__NR_gëeuid


	)

445 
	#SYS_gëgid
 
__NR_gëgid


	)

446 
	#SYS_gëgroups
 
__NR_gëgroups


	)

447 
	#SYS_gëôimî
 
__NR_gëôimî


	)

448 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

449 
	#SYS_gëpgid
 
__NR_gëpgid


	)

450 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

451 
	#SYS_gëpid
 
__NR_gëpid


	)

452 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

453 
	#SYS_gëµid
 
__NR_gëµid


	)

454 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

455 
	#SYS_gëøndom
 
__NR_gëøndom


	)

456 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

457 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

458 
	#SYS_gëæimô
 
__NR_gëæimô


	)

459 
	#SYS_gërußge
 
__NR_gërußge


	)

460 
	#SYS_gësid
 
__NR_gësid


	)

461 
	#SYS_gësock«me
 
__NR_gësock«me


	)

462 
	#SYS_gësock›t
 
__NR_gësock›t


	)

463 
	#SYS_gëtid
 
__NR_gëtid


	)

464 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

465 
	#SYS_gëuid
 
__NR_gëuid


	)

466 
	#SYS_gëx©å
 
__NR_gëx©å


	)

467 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

468 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

469 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

470 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

471 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

472 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

473 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

474 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

475 
	#SYS_io_£tup
 
__NR_io_£tup


	)

476 
	#SYS_io_submô
 
__NR_io_submô


	)

477 
	#SYS_io˘l
 
__NR_io˘l


	)

478 
	#SYS_i›îm
 
__NR_i›îm


	)

479 
	#SYS_i›l
 
__NR_i›l


	)

480 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

481 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

482 
	#SYS_kcmp
 
__NR_kcmp


	)

483 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

484 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

485 
	#SYS_key˘l
 
__NR_key˘l


	)

486 
	#SYS_kûl
 
__NR_kûl


	)

487 
	#SYS_lchown
 
__NR_lchown


	)

488 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

489 
	#SYS_lök
 
__NR_lök


	)

490 
	#SYS_lök©
 
__NR_lök©


	)

491 
	#SYS_li°í
 
__NR_li°í


	)

492 
	#SYS_li°x©å
 
__NR_li°x©å


	)

493 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

494 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

495 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

496 
	#SYS_l£ek
 
__NR_l£ek


	)

497 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

498 
	#SYS_l°©
 
__NR_l°©


	)

499 
	#SYS_madvi£
 
__NR_madvi£


	)

500 
	#SYS_mböd
 
__NR_mböd


	)

501 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

502 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

503 
	#SYS_möc‹e
 
__NR_möc‹e


	)

504 
	#SYS_mkdú
 
__NR_mkdú


	)

505 
	#SYS_mkdú©
 
__NR_mkdú©


	)

506 
	#SYS_mknod
 
__NR_mknod


	)

507 
	#SYS_mknod©
 
__NR_mknod©


	)

508 
	#SYS_mlock
 
__NR_mlock


	)

509 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

510 
	#SYS_mm≠
 
__NR_mm≠


	)

511 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

512 
	#SYS_mou¡
 
__NR_mou¡


	)

513 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

514 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

515 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

516 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

517 
	#SYS_mq_›í
 
__NR_mq_›í


	)

518 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

519 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

520 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

521 
	#SYS_mªm≠
 
__NR_mªm≠


	)

522 
	#SYS_msg˘l
 
__NR_msg˘l


	)

523 
	#SYS_msggë
 
__NR_msggë


	)

524 
	#SYS_msgrcv
 
__NR_msgrcv


	)

525 
	#SYS_msg¢d
 
__NR_msg¢d


	)

526 
	#SYS_msync
 
__NR_msync


	)

527 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

528 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

529 
	#SYS_munm≠
 
__NR_munm≠


	)

530 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

531 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

532 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

533 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

534 
	#SYS_›í
 
__NR_›í


	)

535 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

536 
	#SYS_›í©
 
__NR_›í©


	)

537 
	#SYS_∑u£
 
__NR_∑u£


	)

538 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

539 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

540 
	#SYS_pùe
 
__NR_pùe


	)

541 
	#SYS_pùe2
 
__NR_pùe2


	)

542 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

543 
	#SYS_pﬁl
 
__NR_pﬁl


	)

544 
	#SYS_µﬁl
 
__NR_µﬁl


	)

545 
	#SYS_¥˘l
 
__NR_¥˘l


	)

546 
	#SYS_¥ód64
 
__NR_¥ód64


	)

547 
	#SYS_¥ódv
 
__NR_¥ódv


	)

548 
	#SYS_¥limô64
 
__NR_¥limô64


	)

549 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

550 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

551 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

552 
	#SYS_±ø˚
 
__NR_±ø˚


	)

553 
	#SYS_puçmsg
 
__NR_puçmsg


	)

554 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

555 
	#SYS_pwrôev
 
__NR_pwrôev


	)

556 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

557 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

558 
	#SYS_ªad
 
__NR_ªad


	)

559 
	#SYS_ªadahód
 
__NR_ªadahód


	)

560 
	#SYS_ªadlök
 
__NR_ªadlök


	)

561 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

562 
	#SYS_ªadv
 
__NR_ªadv


	)

563 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

564 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

565 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

566 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

567 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

568 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

569 
	#SYS_ª«me
 
__NR_ª«me


	)

570 
	#SYS_ª«mót
 
__NR_ª«mót


	)

571 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

572 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

573 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

574 
	#SYS_rmdú
 
__NR_rmdú


	)

575 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

576 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

577 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

578 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

579 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

580 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

581 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

582 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

583 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

584 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

585 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

586 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

587 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

588 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

589 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

590 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

591 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

592 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

593 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

594 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

595 
	#SYS_£ccomp
 
__NR_£ccomp


	)

596 
	#SYS_£curôy
 
__NR_£curôy


	)

597 
	#SYS_£À˘
 
__NR_£À˘


	)

598 
	#SYS_£m˘l
 
__NR_£m˘l


	)

599 
	#SYS_£mgë
 
__NR_£mgë


	)

600 
	#SYS_£m›
 
__NR_£m›


	)

601 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

602 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

603 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

604 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

605 
	#SYS_£ndto
 
__NR_£ndto


	)

606 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

607 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

608 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

609 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

610 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

611 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

612 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

613 
	#SYS_£tgid
 
__NR_£tgid


	)

614 
	#SYS_£tgroups
 
__NR_£tgroups


	)

615 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

616 
	#SYS_£tôimî
 
__NR_£tôimî


	)

617 
	#SYS_£äs
 
__NR_£äs


	)

618 
	#SYS_£çgid
 
__NR_£çgid


	)

619 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

620 
	#SYS_£åegid
 
__NR_£åegid


	)

621 
	#SYS_£åesgid
 
__NR_£åesgid


	)

622 
	#SYS_£åesuid
 
__NR_£åesuid


	)

623 
	#SYS_£åeuid
 
__NR_£åeuid


	)

624 
	#SYS_£ålimô
 
__NR_£ålimô


	)

625 
	#SYS_£tsid
 
__NR_£tsid


	)

626 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

627 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

628 
	#SYS_£tuid
 
__NR_£tuid


	)

629 
	#SYS_£tx©å
 
__NR_£tx©å


	)

630 
	#SYS_shm©
 
__NR_shm©


	)

631 
	#SYS_shm˘l
 
__NR_shm˘l


	)

632 
	#SYS_shmdt
 
__NR_shmdt


	)

633 
	#SYS_shmgë
 
__NR_shmgë


	)

634 
	#SYS_shutdown
 
__NR_shutdown


	)

635 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

636 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

637 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

638 
	#SYS_sockë
 
__NR_sockë


	)

639 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

640 
	#SYS_•li˚
 
__NR_•li˚


	)

641 
	#SYS_°©
 
__NR_°©


	)

642 
	#SYS_°©fs
 
__NR_°©fs


	)

643 
	#SYS_sw≠off
 
__NR_sw≠off


	)

644 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

645 
	#SYS_symlök
 
__NR_symlök


	)

646 
	#SYS_symlök©
 
__NR_symlök©


	)

647 
	#SYS_sync
 
__NR_sync


	)

648 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

649 
	#SYS_syncfs
 
__NR_syncfs


	)

650 
	#SYS_sysfs
 
__NR_sysfs


	)

651 
	#SYS_sysöfo
 
__NR_sysöfo


	)

652 
	#SYS_sy¶og
 
__NR_sy¶og


	)

653 
	#SYS_ãe
 
__NR_ãe


	)

654 
	#SYS_tgkûl
 
__NR_tgkûl


	)

655 
	#SYS_time
 
__NR_time


	)

656 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

657 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

658 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

659 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

660 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

661 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

662 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

663 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

664 
	#SYS_times
 
__NR_times


	)

665 
	#SYS_tkûl
 
__NR_tkûl


	)

666 
	#SYS_åunˇã
 
__NR_åunˇã


	)

667 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

668 
	#SYS_umask
 
__NR_umask


	)

669 
	#SYS_umou¡2
 
__NR_umou¡2


	)

670 
	#SYS_u«me
 
__NR_u«me


	)

671 
	#SYS_u∆ök
 
__NR_u∆ök


	)

672 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

673 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

674 
	#SYS_u£lib
 
__NR_u£lib


	)

675 
	#SYS_u°©
 
__NR_u°©


	)

676 
	#SYS_utime
 
__NR_utime


	)

677 
	#SYS_utimíßt
 
__NR_utimíßt


	)

678 
	#SYS_utimes
 
__NR_utimes


	)

679 
	#SYS_vf‹k
 
__NR_vf‹k


	)

680 
	#SYS_vh™gup
 
__NR_vh™gup


	)

681 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

682 
	#SYS_v£rvî
 
__NR_v£rvî


	)

683 
	#SYS_waô4
 
__NR_waô4


	)

684 
	#SYS_waôid
 
__NR_waôid


	)

685 
	#SYS_wrôe
 
__NR_wrôe


	)

686 
	#SYS_wrôev
 
__NR_wrôev


	)

688 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


689 
	#SYS_ac˚±
 
__NR_ac˚±


	)

690 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

691 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

692 
	#SYS_ac˘
 
__NR_ac˘


	)

693 
	#SYS_add_key
 
__NR_add_key


	)

694 
	#SYS_adjtimex
 
__NR_adjtimex


	)

695 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

696 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

697 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

698 
	#SYS_böd
 
__NR_böd


	)

699 
	#SYS_bpf
 
__NR_bpf


	)

700 
	#SYS_brk
 
__NR_brk


	)

701 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

702 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

703 
	#SYS_chdú
 
__NR_chdú


	)

704 
	#SYS_chmod
 
__NR_chmod


	)

705 
	#SYS_chown
 
__NR_chown


	)

706 
	#SYS_chroŸ
 
__NR_chroŸ


	)

707 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

708 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

709 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

710 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

711 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

712 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

713 
	#SYS_˛o£
 
__NR_˛o£


	)

714 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

715 
	#SYS_¸ót
 
__NR_¸ót


	)

716 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

717 
	#SYS_dup
 
__NR_dup


	)

718 
	#SYS_dup2
 
__NR_dup2


	)

719 
	#SYS_dup3
 
__NR_dup3


	)

720 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

721 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

722 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

723 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

724 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

725 
	#SYS_evítfd
 
__NR_evítfd


	)

726 
	#SYS_evítfd2
 
__NR_evítfd2


	)

727 
	#SYS_execve
 
__NR_execve


	)

728 
	#SYS_exô
 
__NR_exô


	)

729 
	#SYS_exô_group
 
__NR_exô_group


	)

730 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

731 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

732 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

733 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

734 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

735 
	#SYS_fchdú
 
__NR_fchdú


	)

736 
	#SYS_fchmod
 
__NR_fchmod


	)

737 
	#SYS_fchmod©
 
__NR_fchmod©


	)

738 
	#SYS_fchown
 
__NR_fchown


	)

739 
	#SYS_fchow«t
 
__NR_fchow«t


	)

740 
	#SYS_f˙é
 
__NR_f˙é


	)

741 
	#SYS_fd©async
 
__NR_fd©async


	)

742 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

743 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

744 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

745 
	#SYS_Êock
 
__NR_Êock


	)

746 
	#SYS_f‹k
 
__NR_f‹k


	)

747 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

748 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

749 
	#SYS_f°©
 
__NR_f°©


	)

750 
	#SYS_f°©fs
 
__NR_f°©fs


	)

751 
	#SYS_fsync
 
__NR_fsync


	)

752 
	#SYS_·runˇã
 
__NR_·runˇã


	)

753 
	#SYS_fuãx
 
__NR_fuãx


	)

754 
	#SYS_futimeßt
 
__NR_futimeßt


	)

755 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

756 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

757 
	#SYS_gë˝u
 
__NR_gë˝u


	)

758 
	#SYS_gëcwd
 
__NR_gëcwd


	)

759 
	#SYS_gëdíts
 
__NR_gëdíts


	)

760 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

761 
	#SYS_gëegid
 
__NR_gëegid


	)

762 
	#SYS_gëeuid
 
__NR_gëeuid


	)

763 
	#SYS_gëgid
 
__NR_gëgid


	)

764 
	#SYS_gëgroups
 
__NR_gëgroups


	)

765 
	#SYS_gëôimî
 
__NR_gëôimî


	)

766 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

767 
	#SYS_gëpgid
 
__NR_gëpgid


	)

768 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

769 
	#SYS_gëpid
 
__NR_gëpid


	)

770 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

771 
	#SYS_gëµid
 
__NR_gëµid


	)

772 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

773 
	#SYS_gëøndom
 
__NR_gëøndom


	)

774 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

775 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

776 
	#SYS_gëæimô
 
__NR_gëæimô


	)

777 
	#SYS_gërußge
 
__NR_gërußge


	)

778 
	#SYS_gësid
 
__NR_gësid


	)

779 
	#SYS_gësock«me
 
__NR_gësock«me


	)

780 
	#SYS_gësock›t
 
__NR_gësock›t


	)

781 
	#SYS_gëtid
 
__NR_gëtid


	)

782 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

783 
	#SYS_gëuid
 
__NR_gëuid


	)

784 
	#SYS_gëx©å
 
__NR_gëx©å


	)

785 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

786 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

787 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

788 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

789 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

790 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

791 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

792 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

793 
	#SYS_io_£tup
 
__NR_io_£tup


	)

794 
	#SYS_io_submô
 
__NR_io_submô


	)

795 
	#SYS_io˘l
 
__NR_io˘l


	)

796 
	#SYS_i›îm
 
__NR_i›îm


	)

797 
	#SYS_i›l
 
__NR_i›l


	)

798 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

799 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

800 
	#SYS_kcmp
 
__NR_kcmp


	)

801 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

802 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

803 
	#SYS_key˘l
 
__NR_key˘l


	)

804 
	#SYS_kûl
 
__NR_kûl


	)

805 
	#SYS_lchown
 
__NR_lchown


	)

806 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

807 
	#SYS_lök
 
__NR_lök


	)

808 
	#SYS_lök©
 
__NR_lök©


	)

809 
	#SYS_li°í
 
__NR_li°í


	)

810 
	#SYS_li°x©å
 
__NR_li°x©å


	)

811 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

812 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

813 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

814 
	#SYS_l£ek
 
__NR_l£ek


	)

815 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

816 
	#SYS_l°©
 
__NR_l°©


	)

817 
	#SYS_madvi£
 
__NR_madvi£


	)

818 
	#SYS_mböd
 
__NR_mböd


	)

819 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

820 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

821 
	#SYS_möc‹e
 
__NR_möc‹e


	)

822 
	#SYS_mkdú
 
__NR_mkdú


	)

823 
	#SYS_mkdú©
 
__NR_mkdú©


	)

824 
	#SYS_mknod
 
__NR_mknod


	)

825 
	#SYS_mknod©
 
__NR_mknod©


	)

826 
	#SYS_mlock
 
__NR_mlock


	)

827 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

828 
	#SYS_mm≠
 
__NR_mm≠


	)

829 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

830 
	#SYS_mou¡
 
__NR_mou¡


	)

831 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

832 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

833 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

834 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

835 
	#SYS_mq_›í
 
__NR_mq_›í


	)

836 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

837 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

838 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

839 
	#SYS_mªm≠
 
__NR_mªm≠


	)

840 
	#SYS_msg˘l
 
__NR_msg˘l


	)

841 
	#SYS_msggë
 
__NR_msggë


	)

842 
	#SYS_msgrcv
 
__NR_msgrcv


	)

843 
	#SYS_msg¢d
 
__NR_msg¢d


	)

844 
	#SYS_msync
 
__NR_msync


	)

845 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

846 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

847 
	#SYS_munm≠
 
__NR_munm≠


	)

848 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

849 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

850 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

851 
	#SYS_›í
 
__NR_›í


	)

852 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

853 
	#SYS_›í©
 
__NR_›í©


	)

854 
	#SYS_∑u£
 
__NR_∑u£


	)

855 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

856 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

857 
	#SYS_pùe
 
__NR_pùe


	)

858 
	#SYS_pùe2
 
__NR_pùe2


	)

859 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

860 
	#SYS_pﬁl
 
__NR_pﬁl


	)

861 
	#SYS_µﬁl
 
__NR_µﬁl


	)

862 
	#SYS_¥˘l
 
__NR_¥˘l


	)

863 
	#SYS_¥ód64
 
__NR_¥ód64


	)

864 
	#SYS_¥ódv
 
__NR_¥ódv


	)

865 
	#SYS_¥limô64
 
__NR_¥limô64


	)

866 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

867 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

868 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

869 
	#SYS_±ø˚
 
__NR_±ø˚


	)

870 
	#SYS_puçmsg
 
__NR_puçmsg


	)

871 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

872 
	#SYS_pwrôev
 
__NR_pwrôev


	)

873 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

874 
	#SYS_ªad
 
__NR_ªad


	)

875 
	#SYS_ªadahód
 
__NR_ªadahód


	)

876 
	#SYS_ªadlök
 
__NR_ªadlök


	)

877 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

878 
	#SYS_ªadv
 
__NR_ªadv


	)

879 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

880 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

881 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

882 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

883 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

884 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

885 
	#SYS_ª«me
 
__NR_ª«me


	)

886 
	#SYS_ª«mót
 
__NR_ª«mót


	)

887 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

888 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

889 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

890 
	#SYS_rmdú
 
__NR_rmdú


	)

891 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

892 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

893 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

894 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

895 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

896 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

897 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

898 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

899 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

900 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

901 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

902 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

903 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

904 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

905 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

906 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

907 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

908 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

909 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

910 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

911 
	#SYS_£ccomp
 
__NR_£ccomp


	)

912 
	#SYS_£curôy
 
__NR_£curôy


	)

913 
	#SYS_£À˘
 
__NR_£À˘


	)

914 
	#SYS_£m˘l
 
__NR_£m˘l


	)

915 
	#SYS_£mgë
 
__NR_£mgë


	)

916 
	#SYS_£m›
 
__NR_£m›


	)

917 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

918 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

919 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

920 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

921 
	#SYS_£ndto
 
__NR_£ndto


	)

922 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

923 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

924 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

925 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

926 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

927 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

928 
	#SYS_£tgid
 
__NR_£tgid


	)

929 
	#SYS_£tgroups
 
__NR_£tgroups


	)

930 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

931 
	#SYS_£tôimî
 
__NR_£tôimî


	)

932 
	#SYS_£äs
 
__NR_£äs


	)

933 
	#SYS_£çgid
 
__NR_£çgid


	)

934 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

935 
	#SYS_£åegid
 
__NR_£åegid


	)

936 
	#SYS_£åesgid
 
__NR_£åesgid


	)

937 
	#SYS_£åesuid
 
__NR_£åesuid


	)

938 
	#SYS_£åeuid
 
__NR_£åeuid


	)

939 
	#SYS_£ålimô
 
__NR_£ålimô


	)

940 
	#SYS_£tsid
 
__NR_£tsid


	)

941 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

942 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

943 
	#SYS_£tuid
 
__NR_£tuid


	)

944 
	#SYS_£tx©å
 
__NR_£tx©å


	)

945 
	#SYS_shm©
 
__NR_shm©


	)

946 
	#SYS_shm˘l
 
__NR_shm˘l


	)

947 
	#SYS_shmdt
 
__NR_shmdt


	)

948 
	#SYS_shmgë
 
__NR_shmgë


	)

949 
	#SYS_shutdown
 
__NR_shutdown


	)

950 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

951 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

952 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

953 
	#SYS_sockë
 
__NR_sockë


	)

954 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

955 
	#SYS_•li˚
 
__NR_•li˚


	)

956 
	#SYS_°©
 
__NR_°©


	)

957 
	#SYS_°©fs
 
__NR_°©fs


	)

958 
	#SYS_sw≠off
 
__NR_sw≠off


	)

959 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

960 
	#SYS_symlök
 
__NR_symlök


	)

961 
	#SYS_symlök©
 
__NR_symlök©


	)

962 
	#SYS_sync
 
__NR_sync


	)

963 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

964 
	#SYS_syncfs
 
__NR_syncfs


	)

965 
	#SYS_sysfs
 
__NR_sysfs


	)

966 
	#SYS_sysöfo
 
__NR_sysöfo


	)

967 
	#SYS_sy¶og
 
__NR_sy¶og


	)

968 
	#SYS_ãe
 
__NR_ãe


	)

969 
	#SYS_tgkûl
 
__NR_tgkûl


	)

970 
	#SYS_time
 
__NR_time


	)

971 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

972 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

973 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

974 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

975 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

976 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

977 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

978 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

979 
	#SYS_times
 
__NR_times


	)

980 
	#SYS_tkûl
 
__NR_tkûl


	)

981 
	#SYS_åunˇã
 
__NR_åunˇã


	)

982 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

983 
	#SYS_umask
 
__NR_umask


	)

984 
	#SYS_umou¡2
 
__NR_umou¡2


	)

985 
	#SYS_u«me
 
__NR_u«me


	)

986 
	#SYS_u∆ök
 
__NR_u∆ök


	)

987 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

988 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

989 
	#SYS_u°©
 
__NR_u°©


	)

990 
	#SYS_utime
 
__NR_utime


	)

991 
	#SYS_utimíßt
 
__NR_utimíßt


	)

992 
	#SYS_utimes
 
__NR_utimes


	)

993 
	#SYS_vf‹k
 
__NR_vf‹k


	)

994 
	#SYS_vh™gup
 
__NR_vh™gup


	)

995 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

996 
	#SYS_waô4
 
__NR_waô4


	)

997 
	#SYS_waôid
 
__NR_waôid


	)

998 
	#SYS_wrôe
 
__NR_wrôe


	)

999 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/sysctl.h

18 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/utsname.h

18 #i‚de‡
_SYS_UTSNAME_H


23 
	#_UTSNAME_LENGTH
 65

	)

28 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_ISOC11_SOURCE


161 
	#_ISOC11_SOURCE
 1

	)

162 #unde‡
_POSIX_SOURCE


163 
	#_POSIX_SOURCE
 1

	)

164 #unde‡
_POSIX_C_SOURCE


165 
	#_POSIX_C_SOURCE
 200809L

	)

166 #unde‡
_XOPEN_SOURCE


167 
	#_XOPEN_SOURCE
 700

	)

168 #unde‡
_XOPEN_SOURCE_EXTENDED


169 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

170 #unde‡
_LARGEFILE64_SOURCE


171 
	#_LARGEFILE64_SOURCE
 1

	)

172 #unde‡
_BSD_SOURCE


173 
	#_BSD_SOURCE
 1

	)

174 #unde‡
_SVID_SOURCE


175 
	#_SVID_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

183 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

184 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

185 
	#_BSD_SOURCE
 1

	)

186 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC11_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

192 
	#__USE_ISOC11
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

198 
	#__USE_ISOC99
 1

	)

202 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

203 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

204 
	#__USE_ISOC95
 1

	)

211 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

212 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

213 
	#__USE_ISOCXX11
 1

	)

218 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

219 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

220 
	#_POSIX_SOURCE
 1

	)

221 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

222 
	#_POSIX_C_SOURCE
 2

	)

223 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

224 
	#_POSIX_C_SOURCE
 199506L

	)

225 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

226 
	#_POSIX_C_SOURCE
 200112L

	)

228 
	#_POSIX_C_SOURCE
 200809L

	)

230 
	#__USE_POSIX_IMPLICITLY
 1

	)

233 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


234 
	#__USE_POSIX
 1

	)

237 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


238 
	#__USE_POSIX2
 1

	)

241 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

242 
	#__USE_POSIX199309
 1

	)

245 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

246 
	#__USE_POSIX199506
 1

	)

249 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

250 
	#__USE_XOPEN2K
 1

	)

251 #unde‡
__USE_ISOC95


252 
	#__USE_ISOC95
 1

	)

253 #unde‡
__USE_ISOC99


254 
	#__USE_ISOC99
 1

	)

257 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

258 
	#__USE_XOPEN2K8
 1

	)

259 #unde‡
_ATFILE_SOURCE


260 
	#_ATFILE_SOURCE
 1

	)

263 #ifdef 
_XOPEN_SOURCE


264 
	#__USE_XOPEN
 1

	)

265 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

266 
	#__USE_XOPEN_EXTENDED
 1

	)

267 
	#__USE_UNIX98
 1

	)

268 #unde‡
_LARGEFILE_SOURCE


269 
	#_LARGEFILE_SOURCE
 1

	)

270 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

271 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

272 
	#__USE_XOPEN2K8
 1

	)

273 
	#__USE_XOPEN2K8XSI
 1

	)

275 
	#__USE_XOPEN2K
 1

	)

276 
	#__USE_XOPEN2KXSI
 1

	)

277 #unde‡
__USE_ISOC95


278 
	#__USE_ISOC95
 1

	)

279 #unde‡
__USE_ISOC99


280 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_XOPEN_SOURCE_EXTENDED


284 
	#__USE_XOPEN_EXTENDED
 1

	)

289 #ifde‡
_LARGEFILE_SOURCE


290 
	#__USE_LARGEFILE
 1

	)

293 #ifde‡
_LARGEFILE64_SOURCE


294 
	#__USE_LARGEFILE64
 1

	)

297 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

298 
	#__USE_FILE_OFFSET64
 1

	)

301 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


302 
	#__USE_MISC
 1

	)

305 #ifdef 
_BSD_SOURCE


306 
	#__USE_BSD
 1

	)

309 #ifdef 
_SVID_SOURCE


310 
	#__USE_SVID
 1

	)

313 #ifdef 
_ATFILE_SOURCE


314 
	#__USE_ATFILE
 1

	)

317 #ifdef 
_GNU_SOURCE


318 
	#__USE_GNU
 1

	)

321 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


322 
	#__USE_REENTRANT
 1

	)

325 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

326 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

327 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

328 #ñi‡!
__GNUC_PREREQ
 (4, 1)

329 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


330 #ñi‡
_FORTIFY_SOURCE
 > 1

331 
	#__USE_FORTIFY_LEVEL
 2

	)

333 
	#__USE_FORTIFY_LEVEL
 1

	)

336 #i‚de‡
__USE_FORTIFY_LEVEL


337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 18

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/prctl.h

1 #i‚de‡
_LINUX_PRCTL_H


2 
	#_LINUX_PRCTL_H


	)

4 
	~<löux/ty≥s.h
>

8 
	#PR_SET_PDEATHSIG
 1

	)

9 
	#PR_GET_PDEATHSIG
 2

	)

12 
	#PR_GET_DUMPABLE
 3

	)

13 
	#PR_SET_DUMPABLE
 4

	)

16 
	#PR_GET_UNALIGN
 5

	)

17 
	#PR_SET_UNALIGN
 6

	)

18 
	#PR_UNALIGN_NOPRINT
 1

	)

19 
	#PR_UNALIGN_SIGBUS
 2

	)

23 
	#PR_GET_KEEPCAPS
 7

	)

24 
	#PR_SET_KEEPCAPS
 8

	)

27 
	#PR_GET_FPEMU
 9

	)

28 
	#PR_SET_FPEMU
 10

	)

29 
	#PR_FPEMU_NOPRINT
 1

	)

30 
	#PR_FPEMU_SIGFPE
 2

	)

33 
	#PR_GET_FPEXC
 11

	)

34 
	#PR_SET_FPEXC
 12

	)

35 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

36 
	#PR_FP_EXC_DIV
 0x010000

	)

37 
	#PR_FP_EXC_OVF
 0x020000

	)

38 
	#PR_FP_EXC_UND
 0x040000

	)

39 
	#PR_FP_EXC_RES
 0x080000

	)

40 
	#PR_FP_EXC_INV
 0x100000

	)

41 
	#PR_FP_EXC_DISABLED
 0

	)

42 
	#PR_FP_EXC_NONRECOV
 1

	)

43 
	#PR_FP_EXC_ASYNC
 2

	)

44 
	#PR_FP_EXC_PRECISE
 3

	)

48 
	#PR_GET_TIMING
 13

	)

49 
	#PR_SET_TIMING
 14

	)

50 
	#PR_TIMING_STATISTICAL
 0

	)

52 
	#PR_TIMING_TIMESTAMP
 1

	)

55 
	#PR_SET_NAME
 15

	)

56 
	#PR_GET_NAME
 16

	)

59 
	#PR_GET_ENDIAN
 19

	)

60 
	#PR_SET_ENDIAN
 20

	)

61 
	#PR_ENDIAN_BIG
 0

	)

62 
	#PR_ENDIAN_LITTLE
 1

	)

63 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

66 
	#PR_GET_SECCOMP
 21

	)

67 
	#PR_SET_SECCOMP
 22

	)

70 
	#PR_CAPBSET_READ
 23

	)

71 
	#PR_CAPBSET_DROP
 24

	)

74 
	#PR_GET_TSC
 25

	)

75 
	#PR_SET_TSC
 26

	)

76 
	#PR_TSC_ENABLE
 1

	)

77 
	#PR_TSC_SIGSEGV
 2

	)

80 
	#PR_GET_SECUREBITS
 27

	)

81 
	#PR_SET_SECUREBITS
 28

	)

87 
	#PR_SET_TIMERSLACK
 29

	)

88 
	#PR_GET_TIMERSLACK
 30

	)

90 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

91 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

97 
	#PR_MCE_KILL
 33

	)

98 
	#PR_MCE_KILL_CLEAR
 0

	)

99 
	#PR_MCE_KILL_SET
 1

	)

101 
	#PR_MCE_KILL_LATE
 0

	)

102 
	#PR_MCE_KILL_EARLY
 1

	)

103 
	#PR_MCE_KILL_DEFAULT
 2

	)

105 
	#PR_MCE_KILL_GET
 34

	)

110 
	#PR_SET_MM
 35

	)

111 
	#PR_SET_MM_START_CODE
 1

	)

112 
	#PR_SET_MM_END_CODE
 2

	)

113 
	#PR_SET_MM_START_DATA
 3

	)

114 
	#PR_SET_MM_END_DATA
 4

	)

115 
	#PR_SET_MM_START_STACK
 5

	)

116 
	#PR_SET_MM_START_BRK
 6

	)

117 
	#PR_SET_MM_BRK
 7

	)

118 
	#PR_SET_MM_ARG_START
 8

	)

119 
	#PR_SET_MM_ARG_END
 9

	)

120 
	#PR_SET_MM_ENV_START
 10

	)

121 
	#PR_SET_MM_ENV_END
 11

	)

122 
	#PR_SET_MM_AUXV
 12

	)

123 
	#PR_SET_MM_EXE_FILE
 13

	)

124 
	#PR_SET_MM_MAP
 14

	)

125 
	#PR_SET_MM_MAP_SIZE
 15

	)

133 
	s¥˘l_mm_m≠
 {

134 
__u64
 
	m°¨t_code
;

135 
__u64
 
	míd_code
;

136 
__u64
 
	m°¨t_d©a
;

137 
__u64
 
	míd_d©a
;

138 
__u64
 
	m°¨t_brk
;

139 
__u64
 
	mbrk
;

140 
__u64
 
	m°¨t_°ack
;

141 
__u64
 
	m¨g_°¨t
;

142 
__u64
 
	m¨g_íd
;

143 
__u64
 
	mív_°¨t
;

144 
__u64
 
	mív_íd
;

145 
__u64
 *
	mauxv
;

146 
__u32
 
	mauxv_size
;

147 
__u32
 
	mexe_fd
;

154 
	#PR_SET_PTRACER
 0x59616d61

	)

155 
	#PR_SET_PTRACER_ANY
 (()-1)

	)

157 
	#PR_SET_CHILD_SUBREAPER
 36

	)

158 
	#PR_GET_CHILD_SUBREAPER
 37

	)

174 
	#PR_SET_NO_NEW_PRIVS
 38

	)

175 
	#PR_GET_NO_NEW_PRIVS
 39

	)

177 
	#PR_GET_TID_ADDRESS
 40

	)

179 
	#PR_SET_THP_DISABLE
 41

	)

180 
	#PR_GET_THP_DISABLE
 42

	)

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

163 
	mVM_UNUSED1
=1,

164 
	mVM_UNUSED2
=2,

165 
	mVM_UNUSED3
=3,

166 
	mVM_UNUSED4
=4,

167 
	mVM_OVERCOMMIT_MEMORY
=5,

168 
	mVM_UNUSED5
=6,

169 
	mVM_UNUSED7
=7,

170 
	mVM_UNUSED8
=8,

171 
	mVM_UNUSED9
=9,

172 
	mVM_PAGE_CLUSTER
=10,

173 
	mVM_DIRTY_BACKGROUND
=11,

174 
	mVM_DIRTY_RATIO
=12,

175 
	mVM_DIRTY_WB_CS
=13,

176 
	mVM_DIRTY_EXPIRE_CS
=14,

177 
	mVM_NR_PDFLUSH_THREADS
=15,

178 
	mVM_OVERCOMMIT_RATIO
=16,

179 
	mVM_PAGEBUF
=17,

180 
	mVM_HUGETLB_PAGES
=18,

181 
	mVM_SWAPPINESS
=19,

182 
	mVM_LOWMEM_RESERVE_RATIO
=20,

183 
	mVM_MIN_FREE_KBYTES
=21,

184 
	mVM_MAX_MAP_COUNT
=22,

185 
	mVM_LAPTOP_MODE
=23,

186 
	mVM_BLOCK_DUMP
=24,

187 
	mVM_HUGETLB_GROUP
=25,

188 
	mVM_VFS_CACHE_PRESSURE
=26,

189 
	mVM_LEGACY_VA_LAYOUT
=27,

190 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

191 
	mVM_DROP_PAGECACHE
=29,

192 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

193 
	mVM_ZONE_RECLAIM_MODE
=31,

194 
	mVM_MIN_UNMAPPED
=32,

195 
	mVM_PANIC_ON_OOM
=33,

196 
	mVM_VDSO_ENABLED
=34,

197 
	mVM_MIN_SLAB
=35,

204 
	mNET_CORE
=1,

205 
	mNET_ETHER
=2,

206 
	mNET_802
=3,

207 
	mNET_UNIX
=4,

208 
	mNET_IPV4
=5,

209 
	mNET_IPX
=6,

210 
	mNET_ATALK
=7,

211 
	mNET_NETROM
=8,

212 
	mNET_AX25
=9,

213 
	mNET_BRIDGE
=10,

214 
	mNET_ROSE
=11,

215 
	mNET_IPV6
=12,

216 
	mNET_X25
=13,

217 
	mNET_TR
=14,

218 
	mNET_DECNET
=15,

219 
	mNET_ECONET
=16,

220 
	mNET_SCTP
=17,

221 
	mNET_LLC
=18,

222 
	mNET_NETFILTER
=19,

223 
	mNET_DCCP
=20,

224 
	mNET_IRDA
=412,

230 
	mRANDOM_POOLSIZE
=1,

231 
	mRANDOM_ENTROPY_COUNT
=2,

232 
	mRANDOM_READ_THRESH
=3,

233 
	mRANDOM_WRITE_THRESH
=4,

234 
	mRANDOM_BOOT_ID
=5,

235 
	mRANDOM_UUID
=6

241 
	mPTY_MAX
=1,

242 
	mPTY_NR
=2

248 
	mBUS_ISA_MEM_BASE
=1,

249 
	mBUS_ISA_PORT_BASE
=2,

250 
	mBUS_ISA_PORT_SHIFT
=3

256 
	mNET_CORE_WMEM_MAX
=1,

257 
	mNET_CORE_RMEM_MAX
=2,

258 
	mNET_CORE_WMEM_DEFAULT
=3,

259 
	mNET_CORE_RMEM_DEFAULT
=4,

261 
	mNET_CORE_MAX_BACKLOG
=6,

262 
	mNET_CORE_FASTROUTE
=7,

263 
	mNET_CORE_MSG_COST
=8,

264 
	mNET_CORE_MSG_BURST
=9,

265 
	mNET_CORE_OPTMEM_MAX
=10,

266 
	mNET_CORE_HOT_LIST_LENGTH
=11,

267 
	mNET_CORE_DIVERT_VERSION
=12,

268 
	mNET_CORE_NO_CONG_THRESH
=13,

269 
	mNET_CORE_NO_CONG
=14,

270 
	mNET_CORE_LO_CONG
=15,

271 
	mNET_CORE_MOD_CONG
=16,

272 
	mNET_CORE_DEV_WEIGHT
=17,

273 
	mNET_CORE_SOMAXCONN
=18,

274 
	mNET_CORE_BUDGET
=19,

275 
	mNET_CORE_AEVENT_ETIME
=20,

276 
	mNET_CORE_AEVENT_RSEQTH
=21,

277 
	mNET_CORE_WARNINGS
=22,

288 
	mNET_UNIX_DESTROY_DELAY
=1,

289 
	mNET_UNIX_DELETE_DELAY
=2,

290 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

296 
	mNET_NF_CONNTRACK_MAX
=1,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

307 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

308 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

309 
	mNET_NF_CONNTRACK_BUCKETS
=14,

310 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

311 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

312 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

313 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

314 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

322 
	mNET_NF_CONNTRACK_COUNT
=27,

323 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

324 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

325 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

326 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

327 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

334 
	mNET_IPV4_FORWARD
=8,

335 
	mNET_IPV4_DYNADDR
=9,

337 
	mNET_IPV4_CONF
=16,

338 
	mNET_IPV4_NEIGH
=17,

339 
	mNET_IPV4_ROUTE
=18,

340 
	mNET_IPV4_FIB_HASH
=19,

341 
	mNET_IPV4_NETFILTER
=20,

343 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

344 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

345 
	mNET_IPV4_TCP_SACK
=35,

346 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

347 
	mNET_IPV4_DEFAULT_TTL
=37,

348 
	mNET_IPV4_AUTOCONFIG
=38,

349 
	mNET_IPV4_NO_PMTU_DISC
=39,

350 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

351 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

352 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

353 
	mNET_IPV4_IPFRAG_TIME
=43,

354 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

355 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

356 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

357 
	mNET_IPV4_TCP_RETRIES1
=47,

358 
	mNET_IPV4_TCP_RETRIES2
=48,

359 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

360 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

361 
	mNET_TCP_SYNCOOKIES
=51,

362 
	mNET_TCP_STDURG
=52,

363 
	mNET_TCP_RFC1337
=53,

364 
	mNET_TCP_SYN_TAILDROP
=54,

365 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

366 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

369 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

370 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

371 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

372 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

373 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

374 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

375 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

376 
	mNET_TCP_TW_RECYCLE
=66,

377 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

378 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

379 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

380 
	mNET_IPV4_INET_PEER_MINTTL
=70,

381 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

382 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

383 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

384 
	mNET_TCP_ORPHAN_RETRIES
=74,

385 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

386 
	mNET_TCP_SYNACK_RETRIES
=76,

387 
	mNET_TCP_MAX_ORPHANS
=77,

388 
	mNET_TCP_MAX_TW_BUCKETS
=78,

389 
	mNET_TCP_FACK
=79,

390 
	mNET_TCP_REORDERING
=80,

391 
	mNET_TCP_ECN
=81,

392 
	mNET_TCP_DSACK
=82,

393 
	mNET_TCP_MEM
=83,

394 
	mNET_TCP_WMEM
=84,

395 
	mNET_TCP_RMEM
=85,

396 
	mNET_TCP_APP_WIN
=86,

397 
	mNET_TCP_ADV_WIN_SCALE
=87,

398 
	mNET_IPV4_NONLOCAL_BIND
=88,

399 
	mNET_IPV4_ICMP_RATELIMIT
=89,

400 
	mNET_IPV4_ICMP_RATEMASK
=90,

401 
	mNET_TCP_TW_REUSE
=91,

402 
	mNET_TCP_FRTO
=92,

403 
	mNET_TCP_LOW_LATENCY
=93,

404 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

405 
	mNET_IPV4_IGMP_MAX_MSF
=96,

406 
	mNET_TCP_NO_METRICS_SAVE
=97,

407 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

408 
	mNET_TCP_MODERATE_RCVBUF
=106,

409 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

410 
	mNET_TCP_BIC_BETA
=108,

411 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

412 
	mNET_TCP_CONG_CONTROL
=110,

413 
	mNET_TCP_ABC
=111,

414 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

415 
	mNET_TCP_MTU_PROBING
=113,

416 
	mNET_TCP_BASE_MSS
=114,

417 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

418 
	mNET_TCP_DMA_COPYBREAK
=116,

419 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

420 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

421 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

422 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

423 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

424 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

425 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

426 
	mNET_TCP_MAX_SSTHRESH
=124,

427 
	mNET_TCP_FRTO_RESPONSE
=125,

431 
	mNET_IPV4_ROUTE_FLUSH
=1,

432 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

433 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

434 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

435 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

436 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

437 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

438 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

439 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

440 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

441 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

442 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

443 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

444 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

445 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

446 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

447 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

448 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

449 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

454 
	mNET_PROTO_CONF_ALL
=-2,

455 
	mNET_PROTO_CONF_DEFAULT
=-3

462 
	mNET_IPV4_CONF_FORWARDING
=1,

463 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

464 
	mNET_IPV4_CONF_PROXY_ARP
=3,

465 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

466 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

467 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

468 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

469 
	mNET_IPV4_CONF_RP_FILTER
=8,

470 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

471 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

472 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

473 
	mNET_IPV4_CONF_TAG
=12,

474 
	mNET_IPV4_CONF_ARPFILTER
=13,

475 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

476 
	mNET_IPV4_CONF_NOXFRM
=15,

477 
	mNET_IPV4_CONF_NOPOLICY
=16,

478 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

479 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

480 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

481 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

482 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

483 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

489 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

500 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

501 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

502 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

503 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

515 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

516 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

521 
	mNET_IPV6_CONF
=16,

522 
	mNET_IPV6_NEIGH
=17,

523 
	mNET_IPV6_ROUTE
=18,

524 
	mNET_IPV6_ICMP
=19,

525 
	mNET_IPV6_BINDV6ONLY
=20,

526 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

527 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

528 
	mNET_IPV6_IP6FRAG_TIME
=23,

529 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

530 
	mNET_IPV6_MLD_MAX_MSF
=25,

534 
	mNET_IPV6_ROUTE_FLUSH
=1,

535 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

536 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

537 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

538 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

539 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

540 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

541 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

542 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

543 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

547 
	mNET_IPV6_FORWARDING
=1,

548 
	mNET_IPV6_HOP_LIMIT
=2,

549 
	mNET_IPV6_MTU
=3,

550 
	mNET_IPV6_ACCEPT_RA
=4,

551 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

552 
	mNET_IPV6_AUTOCONF
=6,

553 
	mNET_IPV6_DAD_TRANSMITS
=7,

554 
	mNET_IPV6_RTR_SOLICITS
=8,

555 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

556 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

557 
	mNET_IPV6_USE_TEMPADDR
=11,

558 
	mNET_IPV6_TEMP_VALID_LFT
=12,

559 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

560 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

561 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

562 
	mNET_IPV6_MAX_ADDRESSES
=16,

563 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

564 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

565 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

566 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

567 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

568 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

569 
	mNET_IPV6_PROXY_NDP
=23,

570 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

571 
	mNET_IPV6_ACCEPT_RA_FROM_LOCAL
=26,

572 
	m__NET_IPV6_MAX


577 
	mNET_IPV6_ICMP_RATELIMIT
=1

582 
	mNET_NEIGH_MCAST_SOLICIT
=1,

583 
	mNET_NEIGH_UCAST_SOLICIT
=2,

584 
	mNET_NEIGH_APP_SOLICIT
=3,

585 
	mNET_NEIGH_RETRANS_TIME
=4,

586 
	mNET_NEIGH_REACHABLE_TIME
=5,

587 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

588 
	mNET_NEIGH_GC_STALE_TIME
=7,

589 
	mNET_NEIGH_UNRES_QLEN
=8,

590 
	mNET_NEIGH_PROXY_QLEN
=9,

591 
	mNET_NEIGH_ANYCAST_DELAY
=10,

592 
	mNET_NEIGH_PROXY_DELAY
=11,

593 
	mNET_NEIGH_LOCKTIME
=12,

594 
	mNET_NEIGH_GC_INTERVAL
=13,

595 
	mNET_NEIGH_GC_THRESH1
=14,

596 
	mNET_NEIGH_GC_THRESH2
=15,

597 
	mNET_NEIGH_GC_THRESH3
=16,

598 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

599 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

604 
	mNET_DCCP_DEFAULT
=1,

609 
	mNET_IPX_PPROP_BROADCASTING
=1,

610 
	mNET_IPX_FORWARDING
=2

615 
	mNET_LLC2
=1,

616 
	mNET_LLC_STATION
=2,

621 
	mNET_LLC2_TIMEOUT
=1,

626 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_ACK_TIMEOUT
=1,

632 
	mNET_LLC2_P_TIMEOUT
=2,

633 
	mNET_LLC2_REJ_TIMEOUT
=3,

634 
	mNET_LLC2_BUSY_TIMEOUT
=4,

639 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

640 
	mNET_ATALK_AARP_TICK_TIME
=2,

641 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

642 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

648 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

649 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

650 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

651 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

652 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

653 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

654 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

655 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

656 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

657 
	mNET_NETROM_ROUTING_CONTROL
=10,

658 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

659 
	mNET_NETROM_RESET
=12

664 
	mNET_AX25_IP_DEFAULT_MODE
=1,

665 
	mNET_AX25_DEFAULT_MODE
=2,

666 
	mNET_AX25_BACKOFF_TYPE
=3,

667 
	mNET_AX25_CONNECT_MODE
=4,

668 
	mNET_AX25_STANDARD_WINDOW
=5,

669 
	mNET_AX25_EXTENDED_WINDOW
=6,

670 
	mNET_AX25_T1_TIMEOUT
=7,

671 
	mNET_AX25_T2_TIMEOUT
=8,

672 
	mNET_AX25_T3_TIMEOUT
=9,

673 
	mNET_AX25_IDLE_TIMEOUT
=10,

674 
	mNET_AX25_N2
=11,

675 
	mNET_AX25_PACLEN
=12,

676 
	mNET_AX25_PROTOCOL
=13,

677 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

682 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

683 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

684 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

685 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

686 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

687 
	mNET_ROSE_ROUTING_CONTROL
=6,

688 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

689 
	mNET_ROSE_MAX_VCS
=8,

690 
	mNET_ROSE_WINDOW_SIZE
=9,

691 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

696 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

697 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

698 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

699 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

700 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

701 
	mNET_X25_FORWARD
=6

707 
	mNET_TR_RIF_TIMEOUT
=1

712 
	mNET_DECNET_NODE_TYPE
 = 1,

713 
	mNET_DECNET_NODE_ADDRESS
 = 2,

714 
	mNET_DECNET_NODE_NAME
 = 3,

715 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

716 
	mNET_DECNET_TIME_WAIT
 = 5,

717 
	mNET_DECNET_DN_COUNT
 = 6,

718 
	mNET_DECNET_DI_COUNT
 = 7,

719 
	mNET_DECNET_DR_COUNT
 = 8,

720 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

721 
	mNET_DECNET_CONF
 = 10,

722 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

723 
	mNET_DECNET_MEM
 = 12,

724 
	mNET_DECNET_RMEM
 = 13,

725 
	mNET_DECNET_WMEM
 = 14,

726 
	mNET_DECNET_DEBUG_LEVEL
 = 255

731 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

732 
	mNET_DECNET_CONF_DDCMP
 = -3,

733 
	mNET_DECNET_CONF_PPP
 = -4,

734 
	mNET_DECNET_CONF_X25
 = -5,

735 
	mNET_DECNET_CONF_GRE
 = -6,

736 
	mNET_DECNET_CONF_ETHER
 = -7

743 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

744 
	mNET_DECNET_CONF_DEV_T1
 = 2,

745 
	mNET_DECNET_CONF_DEV_T2
 = 3,

746 
	mNET_DECNET_CONF_DEV_T3
 = 4,

747 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

748 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

749 
	mNET_DECNET_CONF_DEV_STATE
 = 7

754 
	mNET_SCTP_RTO_INITIAL
 = 1,

755 
	mNET_SCTP_RTO_MIN
 = 2,

756 
	mNET_SCTP_RTO_MAX
 = 3,

757 
	mNET_SCTP_RTO_ALPHA
 = 4,

758 
	mNET_SCTP_RTO_BETA
 = 5,

759 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

760 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

761 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

762 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

763 
	mNET_SCTP_HB_INTERVAL
 = 10,

764 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

765 
	mNET_SCTP_MAX_BURST
 = 12,

766 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

767 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

768 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

769 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

770 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

775 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

776 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

777 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

778 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

779 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

784 
	mNET_IRDA_DISCOVERY
=1,

785 
	mNET_IRDA_DEVNAME
=2,

786 
	mNET_IRDA_DEBUG
=3,

787 
	mNET_IRDA_FAST_POLL
=4,

788 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

789 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

790 
	mNET_IRDA_SLOT_TIMEOUT
=7,

791 
	mNET_IRDA_MAX_BAUD_RATE
=8,

792 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

793 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

794 
	mNET_IRDA_MAX_TX_WINDOW
=11,

795 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

796 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

797 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

804 
	mFS_NRINODE
=1,

805 
	mFS_STATINODE
=2,

806 
	mFS_MAXINODE
=3,

807 
	mFS_NRDQUOT
=4,

808 
	mFS_MAXDQUOT
=5,

809 
	mFS_NRFILE
=6,

810 
	mFS_MAXFILE
=7,

811 
	mFS_DENTRY
=8,

812 
	mFS_NRSUPER
=9,

813 
	mFS_MAXSUPER
=10,

814 
	mFS_OVERFLOWUID
=11,

815 
	mFS_OVERFLOWGID
=12,

816 
	mFS_LEASES
=13,

817 
	mFS_DIR_NOTIFY
=14,

818 
	mFS_LEASE_TIME
=15,

819 
	mFS_DQSTATS
=16,

820 
	mFS_XFS
=17,

821 
	mFS_AIO_NR
=18,

822 
	mFS_AIO_MAX_NR
=19,

823 
	mFS_INOTIFY
=20,

824 
	mFS_OCFS2
=988,

829 
	mFS_DQ_LOOKUPS
 = 1,

830 
	mFS_DQ_DROPS
 = 2,

831 
	mFS_DQ_READS
 = 3,

832 
	mFS_DQ_WRITES
 = 4,

833 
	mFS_DQ_CACHE_HITS
 = 5,

834 
	mFS_DQ_ALLOCATED
 = 6,

835 
	mFS_DQ_FREE
 = 7,

836 
	mFS_DQ_SYNCS
 = 8,

837 
	mFS_DQ_WARNINGS
 = 9,

844 
	mDEV_CDROM
=1,

845 
	mDEV_HWMON
=2,

846 
	mDEV_PARPORT
=3,

847 
	mDEV_RAID
=4,

848 
	mDEV_MAC_HID
=5,

849 
	mDEV_SCSI
=6,

850 
	mDEV_IPMI
=7,

855 
	mDEV_CDROM_INFO
=1,

856 
	mDEV_CDROM_AUTOCLOSE
=2,

857 
	mDEV_CDROM_AUTOEJECT
=3,

858 
	mDEV_CDROM_DEBUG
=4,

859 
	mDEV_CDROM_LOCK
=5,

860 
	mDEV_CDROM_CHECK_MEDIA
=6

865 
	mDEV_PARPORT_DEFAULT
=-3

870 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

871 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

876 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

877 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

882 
	mDEV_PARPORT_SPINTIME
=1,

883 
	mDEV_PARPORT_BASE_ADDR
=2,

884 
	mDEV_PARPORT_IRQ
=3,

885 
	mDEV_PARPORT_DMA
=4,

886 
	mDEV_PARPORT_MODES
=5,

887 
	mDEV_PARPORT_DEVICES
=6,

888 
	mDEV_PARPORT_AUTOPROBE
=16

893 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

898 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

903 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

904 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

905 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

906 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

907 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

908 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

913 
	mDEV_SCSI_LOGGING_LEVEL
=1,

918 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

924 
	mABI_DEFHANDLER_COFF
=1,

925 
	mABI_DEFHANDLER_ELF
=2,

926 
	mABI_DEFHANDLER_LCALL7
=3,

927 
	mABI_DEFHANDLER_LIBCSO
=4,

928 
	mABI_TRACE
=5,

929 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/statfs.h

19 #i‚def 
_SYS_STATFS_H


20 
	#_SYS_STATFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©fs.h
>

27 
	g__BEGIN_DECLS


30 #i‚de‡
__USE_FILE_OFFSET64


31 
	$°©fs
 (c⁄° *
__fûe
, 
°©fs
 *
__buf
)

32 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

34 #ifde‡
__REDIRECT_NTH


35 
	`__REDIRECT_NTH
 (
°©fs
,

36 (c⁄° *
__fûe
, 
°©fs
 *
__buf
),

37 
°©fs64
Ë
	`__n⁄nuŒ
 ((1, 2));

39 
	#°©fs
 
°©fs64


	)

42 #ifde‡
__USE_LARGEFILE64


43 
	$°©fs64
 (c⁄° *
__fûe
, 
°©fs64
 *
__buf
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$f°©fs
 (
__fûdes
, 
°©fs
 *
__buf
)

51 
__THROW
 
	`__n⁄nuŒ
 ((2));

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
f°©fs
, (
__fûdes
, 
°©fs
 *
__buf
),

55 
f°©fs64
Ë
	`__n⁄nuŒ
 ((2));

57 
	#f°©fs
 
f°©fs64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$f°©fs64
 (
__fûdes
, 
°©fs64
 *
__buf
)

62 
__THROW
 
	`__n⁄nuŒ
 ((2));

65 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
args

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
args

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

412 
	#Z_HAVE_UNISTD_H


	)

416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

355 
	#__NR_gëøndom
 355

	)

356 
	#__NR_memfd_¸óã
 356

	)

357 
	#__NR_bpf
 357

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

322 
	#__NR_gëøndom
 318

	)

323 
	#__NR_memfd_¸óã
 319

	)

324 
	#__NR_kexec_fûe_lﬂd
 320

	)

325 
	#__NR_bpf
 321

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_gëøndom
 (
__X32_SYSCALL_BIT
 + 318)

	)

279 
	#__NR_memfd_¸óã
 (
__X32_SYSCALL_BIT
 + 319)

	)

280 
	#__NR_kexec_fûe_lﬂd
 (
__X32_SYSCALL_BIT
 + 320)

	)

281 
	#__NR_bpf
 (
__X32_SYSCALL_BIT
 + 321)

	)

282 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

283 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

284 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

285 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

286 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

287 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

288 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

289 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

290 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

291 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

292 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

293 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

294 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

295 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

296 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

297 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

298 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

299 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

300 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

301 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

302 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

303 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

304 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

305 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

306 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

307 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

308 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

309 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

310 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

311 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

312 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

313 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

314 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

100 #i‚de‡
F_GETLK


101 #i‚de‡
__USE_FILE_OFFSET64


102 
	#F_GETLK
 5

	)

103 
	#F_SETLK
 6

	)

104 
	#F_SETLKW
 7

	)

106 
	#F_GETLK
 
F_GETLK64


	)

107 
	#F_SETLK
 
F_SETLK64


	)

108 
	#F_SETLKW
 
F_SETLKW64


	)

111 #i‚de‡
F_GETLK64


112 
	#F_GETLK64
 12

	)

113 
	#F_SETLK64
 13

	)

114 
	#F_SETLKW64
 14

	)

117 #ifde‡
__USE_LARGEFILE64


118 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

123 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

124 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

127 #ifde‡
__USE_GNU


128 
	#O_DIRECT
 
__O_DIRECT


	)

129 
	#O_NOATIME
 
__O_NOATIME


	)

130 
	#O_PATH
 
__O_PATH


	)

136 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


137 
	#O_DSYNC
 
__O_DSYNC


	)

138 #i‡
deföed
 
__O_RSYNC


139 
	#O_RSYNC
 
__O_RSYNC


	)

141 
	#O_RSYNC
 
O_SYNC


	)

146 
	#F_DUPFD
 0

	)

147 
	#F_GETFD
 1

	)

148 
	#F_SETFD
 2

	)

149 
	#F_GETFL
 3

	)

150 
	#F_SETFL
 4

	)

152 #i‚de‡
__F_SETOWN


153 
	#__F_SETOWN
 8

	)

154 
	#__F_GETOWN
 9

	)

157 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


158 
	#F_SETOWN
 
__F_SETOWN


	)

159 
	#F_GETOWN
 
__F_GETOWN


	)

162 #i‚de‡
__F_SETSIG


163 
	#__F_SETSIG
 10

	)

164 
	#__F_GETSIG
 11

	)

166 #i‚de‡
__F_SETOWN_EX


167 
	#__F_SETOWN_EX
 15

	)

168 
	#__F_GETOWN_EX
 16

	)

171 #ifde‡
__USE_GNU


172 
	#F_SETSIG
 
__F_SETSIG


	)

173 
	#F_GETSIG
 
__F_GETSIG


	)

174 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

175 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

178 #ifde‡
__USE_GNU


179 
	#F_SETLEASE
 1024

	)

180 
	#F_GETLEASE
 1025

	)

181 
	#F_NOTIFY
 1026

	)

182 
	#F_SETPIPE_SZ
 1031

	)

183 
	#F_GETPIPE_SZ
 1032

	)

185 #ifde‡
__USE_XOPEN2K8


186 
	#F_DUPFD_CLOEXEC
 1030

	)

191 
	#FD_CLOEXEC
 1

	)

193 #i‚de‡
F_RDLCK


195 
	#F_RDLCK
 0

	)

196 
	#F_WRLCK
 1

	)

197 
	#F_UNLCK
 2

	)

202 #i‚de‡
F_EXLCK


203 
	#F_EXLCK
 4

	)

204 
	#F_SHLCK
 8

	)

207 #ifde‡
__USE_BSD


209 
	#LOCK_SH
 1

	)

210 
	#LOCK_EX
 2

	)

211 
	#LOCK_NB
 4

	)

213 
	#LOCK_UN
 8

	)

216 #ifde‡
__USE_GNU


217 
	#LOCK_MAND
 32

	)

218 
	#LOCK_READ
 64

	)

219 
	#LOCK_WRITE
 128

	)

220 
	#LOCK_RW
 192

	)

223 #ifde‡
__USE_GNU


225 
	#DN_ACCESS
 0x00000001

	)

226 
	#DN_MODIFY
 0x00000002

	)

227 
	#DN_CREATE
 0x00000004

	)

228 
	#DN_DELETE
 0x00000008

	)

229 
	#DN_RENAME
 0x00000010

	)

230 
	#DN_ATTRIB
 0x00000020

	)

231 
	#DN_MULTISHOT
 0x80000000

	)

235 #ifde‡
__USE_GNU


237 
	e__pid_ty≥


239 
	mF_OWNER_TID
 = 0,

240 
	mF_OWNER_PID
,

241 
	mF_OWNER_PGRP
,

242 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


246 
	sf_ow√r_ex


248 
__pid_ty≥
 
	mty≥
;

249 
__pid_t
 
	mpid
;

255 #ifdef 
__USE_BSD


256 
	#FAPPEND
 
O_APPEND


	)

257 
	#FFSYNC
 
O_FSYNC


	)

258 
	#FASYNC
 
O_ASYNC


	)

259 
	#FNONBLOCK
 
O_NONBLOCK


	)

260 
	#FNDELAY
 
O_NDELAY


	)

263 #i‚de‡
__POSIX_FADV_DONTNEED


264 
	#__POSIX_FADV_DONTNEED
 4

	)

265 
	#__POSIX_FADV_NOREUSE
 5

	)

268 #ifde‡
__USE_XOPEN2K


269 
	#POSIX_FADV_NORMAL
 0

	)

270 
	#POSIX_FADV_RANDOM
 1

	)

271 
	#POSIX_FADV_SEQUENTIAL
 2

	)

272 
	#POSIX_FADV_WILLNEED
 3

	)

273 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

274 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

278 #ifde‡
__USE_GNU


280 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

283 
	#SYNC_FILE_RANGE_WRITE
 2

	)

286 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

291 
	#SPLICE_F_MOVE
 1

	)

292 
	#SPLICE_F_NONBLOCK
 2

	)

295 
	#SPLICE_F_MORE
 4

	)

296 
	#SPLICE_F_GIFT
 8

	)

300 
	#FALLOC_FL_KEEP_SIZE
 1

	)

303 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

307 
	sfûe_h™dÀ


309 
	mh™dÀ_byãs
;

310 
	mh™dÀ_ty≥
;

312 
	mf_h™dÀ
[0];

316 
	#MAX_HANDLE_SZ
 128

	)

319 
	g__BEGIN_DECLS


321 #ifde‡
__USE_GNU


324 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

325 
__THROW
;

332 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

333 
__Êags
);

340 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

341 
size_t
 
__cou¡
, 
__Êags
);

347 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

348 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

349 
__Êags
);

355 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

356 
__Êags
);

362 #i‚de‡
__USE_FILE_OFFSET64


363 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

365 #ifde‡
__REDIRECT


366 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

367 
__off64_t
 
__Àn
),

368 
ÁŒoˇã64
);

370 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

373 #ifde‡
__USE_LARGEFILE64


374 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

375 
__off64_t
 
__Àn
);

380 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

381 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

382 
__Êags
Ë
__THROW
;

388 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

389 
__Êags
);

393 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 #ifde‡
__MAP_ANONYMOUS


53 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

55 
	#MAP_ANONYMOUS
 0x20

	)

57 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

59 
	#MAP_HUGE_SHIFT
 26

	)

60 
	#MAP_HUGE_MASK
 0x3f

	)

64 
	#MS_ASYNC
 1

	)

65 
	#MS_SYNC
 4

	)

66 
	#MS_INVALIDATE
 2

	)

69 #ifde‡
__USE_GNU


70 
	#MREMAP_MAYMOVE
 1

	)

71 
	#MREMAP_FIXED
 2

	)

75 #ifde‡
__USE_BSD


76 
	#MADV_NORMAL
 0

	)

77 
	#MADV_RANDOM
 1

	)

78 
	#MADV_SEQUENTIAL
 2

	)

79 
	#MADV_WILLNEED
 3

	)

80 
	#MADV_DONTNEED
 4

	)

81 
	#MADV_REMOVE
 9

	)

82 
	#MADV_DONTFORK
 10

	)

83 
	#MADV_DOFORK
 11

	)

84 
	#MADV_MERGEABLE
 12

	)

85 
	#MADV_UNMERGEABLE
 13

	)

86 
	#MADV_HUGEPAGE
 14

	)

87 
	#MADV_NOHUGEPAGE
 15

	)

88 
	#MADV_DONTDUMP
 16

	)

90 
	#MADV_DODUMP
 17

	)

91 
	#MADV_HWPOISON
 100

	)

95 #ifde‡
__USE_XOPEN2K


96 
	#POSIX_MADV_NORMAL
 0

	)

97 
	#POSIX_MADV_RANDOM
 1

	)

98 
	#POSIX_MADV_SEQUENTIAL
 2

	)

99 
	#POSIX_MADV_WILLNEED
 3

	)

100 
	#POSIX_MADV_DONTNEED
 4

	)

104 #i‚de‡
MCL_CURRENT


105 
	#MCL_CURRENT
 1

	)

106 
	#MCL_FUTURE
 2

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/statfs.h

18 #i‚de‡
_SYS_STATFS_H


22 
	~<bôs/ty≥s.h
>

24 
	s°©fs


26 
__fsw‹d_t
 
	mf_ty≥
;

27 
__fsw‹d_t
 
	mf_bsize
;

28 #i‚de‡
__USE_FILE_OFFSET64


29 
__fsblk˙t_t
 
	mf_blocks
;

30 
__fsblk˙t_t
 
	mf_b‰ì
;

31 
__fsblk˙t_t
 
	mf_bavaû
;

32 
__fsfû˙t_t
 
	mf_fûes
;

33 
__fsfû˙t_t
 
	mf_f‰ì
;

35 
__fsblk˙t64_t
 
	mf_blocks
;

36 
__fsblk˙t64_t
 
	mf_b‰ì
;

37 
__fsblk˙t64_t
 
	mf_bavaû
;

38 
__fsfû˙t64_t
 
	mf_fûes
;

39 
__fsfû˙t64_t
 
	mf_f‰ì
;

41 
__fsid_t
 
	mf_fsid
;

42 
__fsw‹d_t
 
	mf_«mñí
;

43 
__fsw‹d_t
 
	mf_‰size
;

44 
__fsw‹d_t
 
	mf_Êags
;

45 
__fsw‹d_t
 
	mf_•¨e
[4];

48 #ifde‡
__USE_LARGEFILE64


49 
	s°©fs64


51 
__fsw‹d_t
 
	mf_ty≥
;

52 
__fsw‹d_t
 
	mf_bsize
;

53 
__fsblk˙t64_t
 
	mf_blocks
;

54 
__fsblk˙t64_t
 
	mf_b‰ì
;

55 
__fsblk˙t64_t
 
	mf_bavaû
;

56 
__fsfû˙t64_t
 
	mf_fûes
;

57 
__fsfû˙t64_t
 
	mf_f‰ì
;

58 
__fsid_t
 
	mf_fsid
;

59 
__fsw‹d_t
 
	mf_«mñí
;

60 
__fsw‹d_t
 
	mf_‰size
;

61 
__fsw‹d_t
 
	mf_Êags
;

62 
__fsw‹d_t
 
	mf_•¨e
[4];

67 
	#_STATFS_F_NAMELEN


	)

68 
	#_STATFS_F_FRSIZE


	)

69 
	#_STATFS_F_FLAGS


	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__HAVE_BUILTIN_BSWAP16__


49  
	`__buûtö_bsw≠16
(
vÆ
);

50 #ñi‡
	`deföed
 (
__¨ch_swab16
)

51  
	`__¨ch_swab16
(
vÆ
);

53  
	`___c⁄°™t_swab16
(
vÆ
);

55 
	}
}

57 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

59 #ifde‡
__HAVE_BUILTIN_BSWAP32__


60  
	`__buûtö_bsw≠32
(
vÆ
);

61 #ñi‡
	`deföed
(
__¨ch_swab32
)

62  
	`__¨ch_swab32
(
vÆ
);

64  
	`___c⁄°™t_swab32
(
vÆ
);

66 
	}
}

68 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

70 #ifde‡
__HAVE_BUILTIN_BSWAP64__


71  
	`__buûtö_bsw≠64
(
vÆ
);

72 #ñi‡
	`deföed
 (
__¨ch_swab64
)

73  
	`__¨ch_swab64
(
vÆ
);

74 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

75 
__u32
 
h
 = 
vÆ
 >> 32;

76 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

77  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

79  
	`___c⁄°™t_swab64
(
vÆ
);

81 
	}
}

83 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

85 #ifde‡
__¨ch_swahw32


86  
	`__¨ch_swahw32
(
vÆ
);

88  
	`___c⁄°™t_swahw32
(
vÆ
);

90 
	}
}

92 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

94 #ifde‡
__¨ch_swahb32


95  
	`__¨ch_swahb32
(
vÆ
);

97  
	`___c⁄°™t_swahb32
(
vÆ
);

99 
	}
}

105 
	#__swab16
(
x
) \

106 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

107 
	`___c⁄°™t_swab16
(
x
) : \

108 
	`__fswab16
(
x
))

	)

114 
	#__swab32
(
x
) \

115 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

116 
	`___c⁄°™t_swab32
(
x
) : \

117 
	`__fswab32
(
x
))

	)

123 
	#__swab64
(
x
) \

124 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

125 
	`___c⁄°™t_swab64
(
x
) : \

126 
	`__fswab64
(
x
))

	)

134 
	#__swahw32
(
x
) \

135 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

136 
	`___c⁄°™t_swahw32
(
x
) : \

137 
	`__fswahw32
(
x
))

	)

145 
	#__swahb32
(
x
) \

146 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

147 
	`___c⁄°™t_swahb32
(
x
) : \

148 
	`__fswahb32
(
x
))

	)

154 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

156 #ifde‡
__¨ch_swab16p


157  
	`__¨ch_swab16p
(
p
);

159  
	`__swab16
(*
p
);

161 
	}
}

167 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

169 #ifde‡
__¨ch_swab32p


170  
	`__¨ch_swab32p
(
p
);

172  
	`__swab32
(*
p
);

174 
	}
}

180 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

182 #ifde‡
__¨ch_swab64p


183  
	`__¨ch_swab64p
(
p
);

185  
	`__swab64
(*
p
);

187 
	}
}

195 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

197 #ifde‡
__¨ch_swahw32p


198  
	`__¨ch_swahw32p
(
p
);

200  
	`__swahw32
(*
p
);

202 
	}
}

210 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

212 #ifde‡
__¨ch_swahb32p


213  
	`__¨ch_swahb32p
(
p
);

215  
	`__swahb32
(*
p
);

217 
	}
}

223 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

225 #ifde‡
__¨ch_swab16s


226 
	`__¨ch_swab16s
(
p
);

228 *
p
 = 
	`__swab16p
(p);

230 
	}
}

235 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

237 #ifde‡
__¨ch_swab32s


238 
	`__¨ch_swab32s
(
p
);

240 *
p
 = 
	`__swab32p
(p);

242 
	}
}

248 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

250 #ifde‡
__¨ch_swab64s


251 
	`__¨ch_swab64s
(
p
);

253 *
p
 = 
	`__swab64p
(p);

255 
	}
}

263 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

265 #ifde‡
__¨ch_swahw32s


266 
	`__¨ch_swahw32s
(
p
);

268 *
p
 = 
	`__swahw32p
(p);

270 
	}
}

278 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

280 #ifde‡
__¨ch_swahb32s


281 
	`__¨ch_swahb32s
(
p
);

283 *
p
 = 
	`__swahb32p
(p);

285 
	}
}

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

10  
vÆ
;

11 
	}
}

12 
	#__¨ch_swab32
 
__¨ch_swab32


	)

14 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

16 #ifde‡
__i386__


19 
__u32
 
a
;

20 
__u32
 
b
;

21 } 
s
;

22 
__u64
 
u
;

23 } 
v
;

24 
v
.
u
 = 
vÆ
;

25 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

26 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

27 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

28  
v
.
u
;

30 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

31  
vÆ
;

33 
	}
}

34 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
444
12975
auto/lib/zlib/patch.zlib.h
objs/ngx_auto_config.h
objs/ngx_auto_headers.h
objs/ngx_modules.c
src/core/nginx.c
src/core/nginx.h
src/core/ngx_array.c
src/core/ngx_array.h
src/core/ngx_buf.c
src/core/ngx_buf.h
src/core/ngx_conf_file.c
src/core/ngx_conf_file.h
src/core/ngx_config.h
src/core/ngx_connection.c
src/core/ngx_connection.h
src/core/ngx_core.h
src/core/ngx_cpuinfo.c
src/core/ngx_crc.h
src/core/ngx_crc32.c
src/core/ngx_crc32.h
src/core/ngx_crypt.c
src/core/ngx_crypt.h
src/core/ngx_cycle.c
src/core/ngx_cycle.h
src/core/ngx_file.c
src/core/ngx_file.h
src/core/ngx_hash.c
src/core/ngx_hash.h
src/core/ngx_inet.c
src/core/ngx_inet.h
src/core/ngx_list.c
src/core/ngx_list.h
src/core/ngx_log.c
src/core/ngx_log.h
src/core/ngx_md5.c
src/core/ngx_md5.h
src/core/ngx_murmurhash.c
src/core/ngx_murmurhash.h
src/core/ngx_open_file_cache.c
src/core/ngx_open_file_cache.h
src/core/ngx_output_chain.c
src/core/ngx_palloc.c
src/core/ngx_palloc.h
src/core/ngx_parse.c
src/core/ngx_parse.h
src/core/ngx_queue.c
src/core/ngx_queue.h
src/core/ngx_radix_tree.c
src/core/ngx_radix_tree.h
src/core/ngx_rbtree.c
src/core/ngx_rbtree.h
src/core/ngx_regex.c
src/core/ngx_regex.h
src/core/ngx_resolver.c
src/core/ngx_resolver.h
src/core/ngx_sha1.h
src/core/ngx_shmtx.c
src/core/ngx_shmtx.h
src/core/ngx_slab.c
src/core/ngx_slab.h
src/core/ngx_spinlock.c
src/core/ngx_string.c
src/core/ngx_string.h
src/core/ngx_times.c
src/core/ngx_times.h
src/event/modules/ngx_aio_module.c
src/event/modules/ngx_devpoll_module.c
src/event/modules/ngx_epoll_module.c
src/event/modules/ngx_eventport_module.c
src/event/modules/ngx_kqueue_module.c
src/event/modules/ngx_poll_module.c
src/event/modules/ngx_rtsig_module.c
src/event/modules/ngx_select_module.c
src/event/modules/ngx_win32_select_module.c
src/event/ngx_event.c
src/event/ngx_event.h
src/event/ngx_event_accept.c
src/event/ngx_event_busy_lock.c
src/event/ngx_event_busy_lock.h
src/event/ngx_event_connect.c
src/event/ngx_event_connect.h
src/event/ngx_event_mutex.c
src/event/ngx_event_openssl.c
src/event/ngx_event_openssl.h
src/event/ngx_event_pipe.c
src/event/ngx_event_pipe.h
src/event/ngx_event_posted.c
src/event/ngx_event_posted.h
src/event/ngx_event_timer.c
src/event/ngx_event_timer.h
src/http/modules/ngx_http_access_module.c
src/http/modules/ngx_http_addition_filter_module.c
src/http/modules/ngx_http_auth_basic_module.c
src/http/modules/ngx_http_autoindex_module.c
src/http/modules/ngx_http_browser_module.c
src/http/modules/ngx_http_charset_filter_module.c
src/http/modules/ngx_http_chunked_filter_module.c
src/http/modules/ngx_http_dav_module.c
src/http/modules/ngx_http_degradation_module.c
src/http/modules/ngx_http_empty_gif_module.c
src/http/modules/ngx_http_fastcgi_module.c
src/http/modules/ngx_http_flv_module.c
src/http/modules/ngx_http_geo_module.c
src/http/modules/ngx_http_geoip_module.c
src/http/modules/ngx_http_gzip_filter_module.c
src/http/modules/ngx_http_gzip_static_module.c
src/http/modules/ngx_http_headers_filter_module.c
src/http/modules/ngx_http_image_filter_module.c
src/http/modules/ngx_http_index_module.c
src/http/modules/ngx_http_limit_req_module.c
src/http/modules/ngx_http_limit_zone_module.c
src/http/modules/ngx_http_log_module.c
src/http/modules/ngx_http_map_module.c
src/http/modules/ngx_http_memcached_module.c
src/http/modules/ngx_http_mp4_module.c
src/http/modules/ngx_http_not_modified_filter_module.c
src/http/modules/ngx_http_proxy_module.c
src/http/modules/ngx_http_random_index_module.c
src/http/modules/ngx_http_range_filter_module.c
src/http/modules/ngx_http_realip_module.c
src/http/modules/ngx_http_referer_module.c
src/http/modules/ngx_http_rewrite_module.c
src/http/modules/ngx_http_scgi_module.c
src/http/modules/ngx_http_secure_link_module.c
src/http/modules/ngx_http_split_clients_module.c
src/http/modules/ngx_http_ssi_filter_module.c
src/http/modules/ngx_http_ssi_filter_module.h
src/http/modules/ngx_http_ssl_module.c
src/http/modules/ngx_http_ssl_module.h
src/http/modules/ngx_http_static_module.c
src/http/modules/ngx_http_stub_status_module.c
src/http/modules/ngx_http_sub_filter_module.c
src/http/modules/ngx_http_upstream_ip_hash_module.c
src/http/modules/ngx_http_userid_filter_module.c
src/http/modules/ngx_http_uwsgi_module.c
src/http/modules/ngx_http_xslt_filter_module.c
src/http/modules/perl/ngx_http_perl_module.c
src/http/modules/perl/ngx_http_perl_module.h
src/http/ngx_http.c
src/http/ngx_http.h
src/http/ngx_http_busy_lock.c
src/http/ngx_http_busy_lock.h
src/http/ngx_http_cache.h
src/http/ngx_http_config.h
src/http/ngx_http_copy_filter_module.c
src/http/ngx_http_core_module.c
src/http/ngx_http_core_module.h
src/http/ngx_http_file_cache.c
src/http/ngx_http_header_filter_module.c
src/http/ngx_http_parse.c
src/http/ngx_http_parse_time.c
src/http/ngx_http_postpone_filter_module.c
src/http/ngx_http_request.c
src/http/ngx_http_request.h
src/http/ngx_http_request_body.c
src/http/ngx_http_script.c
src/http/ngx_http_script.h
src/http/ngx_http_special_response.c
src/http/ngx_http_upstream.c
src/http/ngx_http_upstream.h
src/http/ngx_http_upstream_round_robin.c
src/http/ngx_http_upstream_round_robin.h
src/http/ngx_http_variables.c
src/http/ngx_http_variables.h
src/http/ngx_http_write_filter_module.c
src/mail/ngx_mail.c
src/mail/ngx_mail.h
src/mail/ngx_mail_auth_http_module.c
src/mail/ngx_mail_core_module.c
src/mail/ngx_mail_handler.c
src/mail/ngx_mail_imap_handler.c
src/mail/ngx_mail_imap_module.c
src/mail/ngx_mail_imap_module.h
src/mail/ngx_mail_parse.c
src/mail/ngx_mail_pop3_handler.c
src/mail/ngx_mail_pop3_module.c
src/mail/ngx_mail_pop3_module.h
src/mail/ngx_mail_proxy_module.c
src/mail/ngx_mail_smtp_handler.c
src/mail/ngx_mail_smtp_module.c
src/mail/ngx_mail_smtp_module.h
src/mail/ngx_mail_ssl_module.c
src/mail/ngx_mail_ssl_module.h
src/misc/ngx_cpp_test_module.cpp
src/misc/ngx_google_perftools_module.c
src/os/unix/ngx_aio_read.c
src/os/unix/ngx_aio_read_chain.c
src/os/unix/ngx_aio_write.c
src/os/unix/ngx_aio_write_chain.c
src/os/unix/ngx_alloc.c
src/os/unix/ngx_alloc.h
src/os/unix/ngx_atomic.h
src/os/unix/ngx_channel.c
src/os/unix/ngx_channel.h
src/os/unix/ngx_daemon.c
src/os/unix/ngx_darwin.h
src/os/unix/ngx_darwin_config.h
src/os/unix/ngx_darwin_init.c
src/os/unix/ngx_darwin_sendfile_chain.c
src/os/unix/ngx_errno.c
src/os/unix/ngx_errno.h
src/os/unix/ngx_file_aio_read.c
src/os/unix/ngx_files.c
src/os/unix/ngx_files.h
src/os/unix/ngx_freebsd.h
src/os/unix/ngx_freebsd_config.h
src/os/unix/ngx_freebsd_init.c
src/os/unix/ngx_freebsd_rfork_thread.c
src/os/unix/ngx_freebsd_rfork_thread.h
src/os/unix/ngx_freebsd_sendfile_chain.c
src/os/unix/ngx_gcc_atomic_amd64.h
src/os/unix/ngx_gcc_atomic_ppc.h
src/os/unix/ngx_gcc_atomic_sparc64.h
src/os/unix/ngx_gcc_atomic_x86.h
src/os/unix/ngx_linux.h
src/os/unix/ngx_linux_aio_read.c
src/os/unix/ngx_linux_config.h
src/os/unix/ngx_linux_init.c
src/os/unix/ngx_linux_sendfile_chain.c
src/os/unix/ngx_os.h
src/os/unix/ngx_posix_config.h
src/os/unix/ngx_posix_init.c
src/os/unix/ngx_process.c
src/os/unix/ngx_process.h
src/os/unix/ngx_process_cycle.c
src/os/unix/ngx_process_cycle.h
src/os/unix/ngx_pthread_thread.c
src/os/unix/ngx_readv_chain.c
src/os/unix/ngx_recv.c
src/os/unix/ngx_send.c
src/os/unix/ngx_setproctitle.c
src/os/unix/ngx_setproctitle.h
src/os/unix/ngx_shmem.c
src/os/unix/ngx_shmem.h
src/os/unix/ngx_socket.c
src/os/unix/ngx_socket.h
src/os/unix/ngx_solaris.h
src/os/unix/ngx_solaris_config.h
src/os/unix/ngx_solaris_init.c
src/os/unix/ngx_solaris_sendfilev_chain.c
src/os/unix/ngx_sunpro_atomic_sparc64.h
src/os/unix/ngx_thread.h
src/os/unix/ngx_time.c
src/os/unix/ngx_time.h
src/os/unix/ngx_udp_recv.c
src/os/unix/ngx_user.c
src/os/unix/ngx_user.h
src/os/unix/ngx_writev_chain.c
/usr/include/aio.h
/usr/include/arpa/inet.h
/usr/include/crypt.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/glob.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/aio_abi.h
/usr/include/malloc.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/epoll.h
/usr/include/sys/ioctl.h
/usr/include/sys/ipc.h
/usr/include/sys/mman.h
/usr/include/sys/mount.h
/usr/include/sys/param.h
/usr/include/sys/prctl.h
/usr/include/sys/resource.h
/usr/include/sys/sem.h
/usr/include/sys/sendfile.h
/usr/include/sys/shm.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/statvfs.h
/usr/include/sys/syscall.h
/usr/include/sys/sysctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/un.h
/usr/include/sys/utsname.h
/usr/include/sys/vfs.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/xlocale.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/asm/byteorder.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/epoll.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/mman.h
/usr/include/bits/netdb.h
/usr/include/bits/param.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/sem.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/statvfs.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/sysctl.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/prctl.h
/usr/include/linux/sysctl.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/statfs.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/asm/types.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/socket_type.h
/usr/include/bits/statfs.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/asm/posix_types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/linux/sysinfo.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/param.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/sockios.h
/usr/include/asm/swab.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/linux/ioctl.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/ioctl.h
